
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af 78 00 00       	call   c00078cf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 02 02 c0       	mov    eax,0xc00202f4
c0000025:	3d f4 02 02 c0       	cmp    eax,0xc00202f4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 02 02 c0       	push   0xc00202f4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 02 02 c0       	mov    eax,0xc00202f4
c0000051:	2d f4 02 02 c0       	sub    eax,0xc00202f4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 02 02 c0       	push   0xc00202f4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d8 d5 01 c0       	mov    ebx,0xc001d5d8
c0000097:	81 eb d4 d5 01 c0    	sub    ebx,0xc001d5d4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d4 d5 01 c0       	mov    esi,0xc001d5d4
c00000a6:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 02 c0       	mov    ds:0xc00220c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 02 02 c0       	push   0xc00202f4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 02 c0 01 	mov    BYTE PTR ds:0xc00220c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 02 c0       	push   0xc00220c8
c0000108:	68 f4 02 02 c0       	push   0xc00202f4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 f8 2d 01 00       	call   c00130a8 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 0a a1 00 00       	call   c000a3d2 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 d6 2d 01 00       	call   c00130a8 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 df 32 01 00       	call   c00135d0 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 2e 39 01 00       	call   c0013c28 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 2e 02 c0 	lgdtd  ds:0xc0022ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 8c ff 00 00       	jmp    c001030e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 20 02 c0       	mov    ds:0xc00220e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 20 02 c0    	mov    DWORD PTR ds:0xc00220e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 d5 01 c0 02 	test   BYTE PTR [edx-0x3ffe2a20],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a20],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 d5 01 c0 08 	test   BYTE PTR [edx-0x3ffe2a20],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 d5 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2a20],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a20],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 21 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 21 02 c0    	mov    ecx,DWORD PTR ds:0xc002213c
c0000d3d:	c7 42 0c 34 21 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 21 02 c0 02 	test   BYTE PTR ds:0xc0022100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 2e 69 00 00       	call   c000774c <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 70 68 00 00       	call   c000774c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 5a 68 00 00       	call   c000774c <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 36 68 00 00       	call   c000774c <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 21 02 c0 	mov    DWORD PTR [edx*4-0x3ffddefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 21 02 c0 	lea    edx,[eax*8-0x3ffddecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c00010bf:	81 fb 34 21 02 c0    	cmp    ebx,0xc0022134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 21 02 c0       	cmp    eax,0xc0022134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 21 02 c0    	cmp    DWORD PTR ds:0xc0022130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 21 02 c0       	mov    ds:0xc002213c,eax
c00010fb:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c0001100:	a3 30 21 02 c0       	mov    ds:0xc0022130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c000110e:	c7 40 0c 34 21 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 20 02 c0 	lea    ebp,[edx*4-0x3ffddf08]
c000115f:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 21 02 c0 	lea    ecx,[edx*4-0x3ffddf00]
c000117a:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 24 02 c0 	or     DWORD PTR [edi*4-0x3ffddbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 21 02 c0 	lea    eax,[eax*8-0x3ffddecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,ecx
c0001234:	89 0d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,ecx
c000123a:	c7 41 08 34 21 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022134
c0001241:	c7 41 0c 34 21 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 21 02 c0 	lea    edx,[ecx*8-0x3ffdded4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 21 02 c0 	lea    edx,[eax*4-0x3ffdded4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 24 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edi
c0001307:	89 3d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edi
c000130d:	c7 47 08 34 21 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022134
c0001314:	c7 47 0c 34 21 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 21 02 c0    	mov    DWORD PTR ds:0xc0022130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 21 02 c0       	mov    edx,0xc0022100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 24 02 c0    	mov    DWORD PTR ds:0xc0022454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 24 02 c0    	push   DWORD PTR ds:0xc002245c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 24 02 c0       	mov    eax,ds:0xc002245c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 21 02 c0 00 	cmp    DWORD PTR ds:0xc002212c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 21 02 c0       	mov    eax,0xc0022134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 24 02 c0       	cmp    eax,0xc002242c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 24 02 c0       	mov    eax,ds:0xc0022468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe291c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 21 02 c0       	mov    ds:0xc0022100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 24 02 c0    	mov    DWORD PTR ds:0xc0022444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 24 02 c0    	mov    DWORD PTR ds:0xc0022448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 24 02 c0    	mov    DWORD PTR ds:0xc002244c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 ce 52 01 00       	jmp    c0016fb8 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 fc 52 01 00       	jmp    c0016ffc <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 21 53 01 00       	jmp    c0017040 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d8 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe27c0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe27c0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc d6 01 c0       	mov    edx,0xc001d6fc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 24 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 24 02 c0    	mov    ax,ds:0xc0022480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 24 02 c0    	mov    ds:0xc0022480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 d7 01 c0       	mov    eax,0xc001d702
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 d7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2840]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b d7 01 c0       	mov    eax,0xc001d70b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe27c0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 24 02 c0 	mov    DWORD PTR [edx*4-0x3ffddb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 d7 01 c0       	mov    eax,0xc001d790
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 d7 01 c0       	mov    ebx,0xc001d780
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 d7 01 c0       	mov    edx,0xc001d760
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 d7 01 c0       	mov    edx,0xc001d770
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 d7 01 c0       	mov    edx,0xc001d712
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e d7 01 c0       	mov    edx,0xc001d71e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 d7 01 c0       	mov    edx,0xc001d732
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 fa 1d 00 00       	call   c0007875 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 f2 1d 00 00       	call   c0007885 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db60
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db60
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d9 01 c0       	mov    eax,0xc001d960
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d8 01 c0       	mov    eax,0xc001d8a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe27a0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bgrad_cache>:
c0005e15:	83 fa 0e             	cmp    edx,0xe
c0005e18:	77 16                	ja     c0005e30 <bgrad_cache+0x1b>
c0005e1a:	53                   	push   ebx
c0005e1b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e1e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e22:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e25:	42                   	inc    edx
c0005e26:	83 fa 0f             	cmp    edx,0xf
c0005e29:	75 f3                	jne    c0005e1e <bgrad_cache+0x9>
c0005e2b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e2e:	5b                   	pop    ebx
c0005e2f:	c3                   	ret    
c0005e30:	c3                   	ret    

c0005e31 <ucscompare>:
c0005e31:	55                   	push   ebp
c0005e32:	57                   	push   edi
c0005e33:	89 c7                	mov    edi,eax
c0005e35:	56                   	push   esi
c0005e36:	89 d6                	mov    esi,edx
c0005e38:	53                   	push   ebx
c0005e39:	31 d2                	xor    edx,edx
c0005e3b:	83 ec 1c             	sub    esp,0x1c
c0005e3e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e42:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e47:	c1 e3 08             	shl    ebx,0x8
c0005e4a:	09 c3                	or     ebx,eax
c0005e4c:	39 ca                	cmp    edx,ecx
c0005e4e:	7d 42                	jge    c0005e92 <ucscompare+0x61>
c0005e50:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e54:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e59:	c1 e0 08             	shl    eax,0x8
c0005e5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e60:	09 e8                	or     eax,ebp
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	83 f8 3b             	cmp    eax,0x3b
c0005e69:	74 27                	je     c0005e92 <ucscompare+0x61>
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	50                   	push   eax
c0005e6f:	e8 5c aa ff ff       	call   c00008d0 <tolower>
c0005e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e77:	89 c5                	mov    ebp,eax
c0005e79:	e8 52 aa ff ff       	call   c00008d0 <tolower>
c0005e7e:	83 c4 10             	add    esp,0x10
c0005e81:	39 c5                	cmp    ebp,eax
c0005e83:	75 20                	jne    c0005ea5 <ucscompare+0x74>
c0005e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e8d:	83 c2 02             	add    edx,0x2
c0005e90:	eb ac                	jmp    c0005e3e <ucscompare+0xd>
c0005e92:	85 db                	test   ebx,ebx
c0005e94:	0f 95 c2             	setne  dl
c0005e97:	31 c0                	xor    eax,eax
c0005e99:	83 fb 2f             	cmp    ebx,0x2f
c0005e9c:	0f 95 c0             	setne  al
c0005e9f:	21 d0                	and    eax,edx
c0005ea1:	f7 d8                	neg    eax
c0005ea3:	eb 03                	jmp    c0005ea8 <ucscompare+0x77>
c0005ea5:	83 c8 ff             	or     eax,0xffffffff
c0005ea8:	83 c4 1c             	add    esp,0x1c
c0005eab:	5b                   	pop    ebx
c0005eac:	5e                   	pop    esi
c0005ead:	5f                   	pop    edi
c0005eae:	5d                   	pop    ebp
c0005eaf:	c3                   	ret    

c0005eb0 <fncompare>:
c0005eb0:	55                   	push   ebp
c0005eb1:	57                   	push   edi
c0005eb2:	89 c7                	mov    edi,eax
c0005eb4:	56                   	push   esi
c0005eb5:	89 ce                	mov    esi,ecx
c0005eb7:	53                   	push   ebx
c0005eb8:	31 db                	xor    ebx,ebx
c0005eba:	83 ec 1c             	sub    esp,0x1c
c0005ebd:	39 d3                	cmp    ebx,edx
c0005ebf:	7d 43                	jge    c0005f04 <fncompare+0x54>
c0005ec1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005ec5:	3c 3b                	cmp    al,0x3b
c0005ec7:	74 3b                	je     c0005f04 <fncompare+0x54>
c0005ec9:	3c 2e                	cmp    al,0x2e
c0005ecb:	75 0e                	jne    c0005edb <fncompare+0x2b>
c0005ecd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ed0:	39 d9                	cmp    ecx,ebx
c0005ed2:	74 30                	je     c0005f04 <fncompare+0x54>
c0005ed4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ed9:	74 29                	je     c0005f04 <fncompare+0x54>
c0005edb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edf:	83 ec 0c             	sub    esp,0xc
c0005ee2:	50                   	push   eax
c0005ee3:	e8 e8 a9 ff ff       	call   c00008d0 <tolower>
c0005ee8:	89 c5                	mov    ebp,eax
c0005eea:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ef1:	e8 da a9 ff ff       	call   c00008d0 <tolower>
c0005ef6:	83 c4 10             	add    esp,0x10
c0005ef9:	39 c5                	cmp    ebp,eax
c0005efb:	75 1d                	jne    c0005f1a <fncompare+0x6a>
c0005efd:	43                   	inc    ebx
c0005efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f02:	eb b9                	jmp    c0005ebd <fncompare+0xd>
c0005f04:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f07:	84 d2                	test   dl,dl
c0005f09:	0f 95 c1             	setne  cl
c0005f0c:	31 c0                	xor    eax,eax
c0005f0e:	80 fa 2f             	cmp    dl,0x2f
c0005f11:	0f 95 c0             	setne  al
c0005f14:	21 c8                	and    eax,ecx
c0005f16:	f7 d8                	neg    eax
c0005f18:	eb 03                	jmp    c0005f1d <fncompare+0x6d>
c0005f1a:	83 c8 ff             	or     eax,0xffffffff
c0005f1d:	83 c4 1c             	add    esp,0x1c
c0005f20:	5b                   	pop    ebx
c0005f21:	5e                   	pop    esi
c0005f22:	5f                   	pop    edi
c0005f23:	5d                   	pop    ebp
c0005f24:	c3                   	ret    

c0005f25 <bclear_cache>:
c0005f25:	83 ec 18             	sub    esp,0x18
c0005f28:	68 60 dc 01 c0       	push   0xc001dc60
c0005f2d:	e8 be 19 01 00       	call   c00178f0 <iso_kprintf>
c0005f32:	83 c4 10             	add    esp,0x10
c0005f35:	31 c0                	xor    eax,eax
c0005f37:	8b 14 85 20 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddfe0]
c0005f3e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f44:	8b 14 85 80 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf80]
c0005f4b:	40                   	inc    eax
c0005f4c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f52:	83 f8 10             	cmp    eax,0x10
c0005f55:	75 e0                	jne    c0005f37 <bclear_cache+0x12>
c0005f57:	83 c4 0c             	add    esp,0xc
c0005f5a:	c3                   	ret    

c0005f5b <bclear>:
c0005f5b:	eb c8                	jmp    c0005f25 <bclear_cache>

c0005f5d <iso_break_all>:
c0005f5d:	83 ec 18             	sub    esp,0x18
c0005f60:	68 6e dc 01 c0       	push   0xc001dc6e
c0005f65:	e8 86 19 01 00       	call   c00178f0 <iso_kprintf>
c0005f6a:	83 c4 10             	add    esp,0x10
c0005f6d:	31 c0                	xor    eax,eax
c0005f6f:	c7 80 d0 25 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdda30],0x1
c0005f79:	05 94 00 00 00       	add    eax,0x94
c0005f7e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f83:	75 ea                	jne    c0005f6f <iso_break_all+0x12>
c0005f85:	83 c4 0c             	add    esp,0xc
c0005f88:	c3                   	ret    

c0005f89 <isoReadDiscSector>:
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	0f be 05 60 20 02 c0 	movsx  eax,BYTE PTR ds:0xc0022060
c0005f93:	50                   	push   eax
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa0:	e8 ef 18 01 00       	call   c0017894 <isoReadDiscSectorHelper>
c0005fa5:	83 c4 1c             	add    esp,0x1c
c0005fa8:	c3                   	ret    

c0005fa9 <bread_cache>:
c0005fa9:	55                   	push   ebp
c0005faa:	57                   	push   edi
c0005fab:	89 d7                	mov    edi,edx
c0005fad:	56                   	push   esi
c0005fae:	ba 0f 00 00 00       	mov    edx,0xf
c0005fb3:	53                   	push   ebx
c0005fb4:	89 c6                	mov    esi,eax
c0005fb6:	83 ec 0c             	sub    esp,0xc
c0005fb9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fbc:	39 38                	cmp    DWORD PTR [eax],edi
c0005fbe:	74 3c                	je     c0005ffc <bread_cache+0x53>
c0005fc0:	4a                   	dec    edx
c0005fc1:	83 fa ff             	cmp    edx,0xffffffff
c0005fc4:	75 f3                	jne    c0005fb9 <bread_cache+0x10>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fcb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fce:	74 08                	je     c0005fd8 <bread_cache+0x2f>
c0005fd0:	43                   	inc    ebx
c0005fd1:	83 fb 10             	cmp    ebx,0x10
c0005fd4:	75 f2                	jne    c0005fc8 <bread_cache+0x1f>
c0005fd6:	31 db                	xor    ebx,ebx
c0005fd8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fdb:	50                   	push   eax
c0005fdc:	6a 01                	push   0x1
c0005fde:	57                   	push   edi
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	83 c0 04             	add    eax,0x4
c0005fe5:	50                   	push   eax
c0005fe6:	e8 9e ff ff ff       	call   c0005f89 <isoReadDiscSector>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	83 c9 ff             	or     ecx,0xffffffff
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	78 13                	js     c0006008 <bread_cache+0x5f>
c0005ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff8:	89 da                	mov    edx,ebx
c0005ffa:	89 38                	mov    DWORD PTR [eax],edi
c0005ffc:	89 f0                	mov    eax,esi
c0005ffe:	e8 12 fe ff ff       	call   c0005e15 <bgrad_cache>
c0006003:	b9 0f 00 00 00       	mov    ecx,0xf
c0006008:	83 c4 0c             	add    esp,0xc
c000600b:	89 c8                	mov    eax,ecx
c000600d:	5b                   	pop    ebx
c000600e:	5e                   	pop    esi
c000600f:	5f                   	pop    edi
c0006010:	5d                   	pop    ebp
c0006011:	c3                   	ret    

c0006012 <biread>:
c0006012:	89 c2                	mov    edx,eax
c0006014:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0006019:	eb 8e                	jmp    c0005fa9 <bread_cache>

c000601b <bdread>:
c000601b:	89 c2                	mov    edx,eax
c000601d:	b8 20 20 02 c0       	mov    eax,0xc0022020
c0006022:	eb 85                	jmp    c0005fa9 <bread_cache>

c0006024 <strnicmp>:
c0006024:	55                   	push   ebp
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	31 f6                	xor    esi,esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 0c             	sub    esp,0xc
c000602d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006031:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006035:	74 42                	je     c0006079 <strnicmp+0x55>
c0006037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000603b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000603f:	84 c0                	test   al,al
c0006041:	74 36                	je     c0006079 <strnicmp+0x55>
c0006043:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006046:	84 d2                	test   dl,dl
c0006048:	74 2f                	je     c0006079 <strnicmp+0x55>
c000604a:	38 d0                	cmp    al,dl
c000604c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000604f:	75 04                	jne    c0006055 <strnicmp+0x31>
c0006051:	89 ee                	mov    esi,ebp
c0006053:	eb dc                	jmp    c0006031 <strnicmp+0xd>
c0006055:	83 ec 0c             	sub    esp,0xc
c0006058:	50                   	push   eax
c0006059:	e8 72 a8 ff ff       	call   c00008d0 <tolower>
c000605e:	89 c7                	mov    edi,eax
c0006060:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006064:	89 ee                	mov    esi,ebp
c0006066:	89 04 24             	mov    DWORD PTR [esp],eax
c0006069:	e8 62 a8 ff ff       	call   c00008d0 <tolower>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	29 c7                	sub    edi,eax
c0006073:	89 f8                	mov    eax,edi
c0006075:	74 ba                	je     c0006031 <strnicmp+0xd>
c0006077:	eb 02                	jmp    c000607b <strnicmp+0x57>
c0006079:	31 c0                	xor    eax,eax
c000607b:	83 c4 0c             	add    esp,0xc
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	5d                   	pop    ebp
c0006082:	c3                   	ret    

c0006083 <find_object>:
c0006083:	55                   	push   ebp
c0006084:	89 c5                	mov    ebp,eax
c0006086:	57                   	push   edi
c0006087:	56                   	push   esi
c0006088:	53                   	push   ebx
c0006089:	89 d3                	mov    ebx,edx
c000608b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006091:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006098:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a0:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00060a7:	74 0b                	je     c00060b4 <find_object+0x31>
c00060a9:	89 ea                	mov    edx,ebp
c00060ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060af:	e8 90 fc ff ff       	call   c0005d44 <utf2ucs>
c00060b4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060c0:	7e 11                	jle    c00060d3 <find_object+0x50>
c00060c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060c6:	e8 47 ff ff ff       	call   c0006012 <biread>
c00060cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060cf:	85 c0                	test   eax,eax
c00060d1:	79 07                	jns    c00060da <find_object+0x57>
c00060d3:	31 db                	xor    ebx,ebx
c00060d5:	e9 5b 01 00 00       	jmp    c0006235 <find_object+0x1b2>
c00060da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060ea:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00060f1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060f7:	84 c0                	test   al,al
c00060f9:	75 0e                	jne    c0006109 <find_object+0x86>
c00060fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ff:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c0006107:	eb b2                	jmp    c00060bb <find_object+0x38>
c0006109:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c000610f:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006113:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006117:	89 ca                	mov    edx,ecx
c0006119:	85 f6                	test   esi,esi
c000611b:	74 2b                	je     c0006148 <find_object+0xc5>
c000611d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006120:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006124:	e8 08 fd ff ff       	call   c0005e31 <ucscompare>
c0006129:	85 c0                	test   eax,eax
c000612b:	0f 84 c1 00 00 00    	je     c00061f2 <find_object+0x16f>
c0006131:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006134:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006138:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006140:	0f 8e dc 00 00 00    	jle    c0006222 <find_object+0x19f>
c0006146:	eb b3                	jmp    c00060fb <find_object+0x78>
c0006148:	0f b6 f0             	movzx  esi,al
c000614b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000614f:	29 ce                	sub    esi,ecx
c0006151:	80 e2 01             	and    dl,0x1
c0006154:	74 05                	je     c000615b <find_object+0xd8>
c0006156:	83 ee 21             	sub    esi,0x21
c0006159:	eb 55                	jmp    c00061b0 <find_object+0x12d>
c000615b:	47                   	inc    edi
c000615c:	83 ee 22             	sub    esi,0x22
c000615f:	eb 4f                	jmp    c00061b0 <find_object+0x12d>
c0006161:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006164:	48                   	dec    eax
c0006165:	3c 01                	cmp    al,0x1
c0006167:	77 4c                	ja     c00061b5 <find_object+0x132>
c0006169:	50                   	push   eax
c000616a:	6a 02                	push   0x2
c000616c:	68 7d dc 01 c0       	push   0xc001dc7d
c0006171:	57                   	push   edi
c0006172:	e8 e9 a5 ff ff       	call   c0000760 <strncmp>
c0006177:	83 c4 10             	add    esp,0x10
c000617a:	85 c0                	test   eax,eax
c000617c:	75 2a                	jne    c00061a8 <find_object+0x125>
c000617e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006182:	8d 42 fb             	lea    eax,[edx-0x5]
c0006185:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006189:	50                   	push   eax
c000618a:	8d 47 05             	lea    eax,[edi+0x5]
c000618d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006191:	50                   	push   eax
c0006192:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006196:	50                   	push   eax
c0006197:	e8 94 a4 ff ff       	call   c0000630 <strncpy>
c000619c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061a0:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c00061a5:	83 c4 10             	add    esp,0x10
c00061a8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061ac:	29 c6                	sub    esi,eax
c00061ae:	01 c7                	add    edi,eax
c00061b0:	83 fe 03             	cmp    esi,0x3
c00061b3:	7f ac                	jg     c0006161 <find_object+0xde>
c00061b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061ba:	7e 40                	jle    c00061fc <find_object+0x179>
c00061bc:	51                   	push   ecx
c00061bd:	51                   	push   ecx
c00061be:	6a 2f                	push   0x2f
c00061c0:	55                   	push   ebp
c00061c1:	e8 6a a5 ff ff       	call   c0000730 <strchr>
c00061c6:	83 c4 10             	add    esp,0x10
c00061c9:	85 c0                	test   eax,eax
c00061cb:	74 04                	je     c00061d1 <find_object+0x14e>
c00061cd:	29 e8                	sub    eax,ebp
c00061cf:	eb 0c                	jmp    c00061dd <find_object+0x15a>
c00061d1:	83 ec 0c             	sub    esp,0xc
c00061d4:	55                   	push   ebp
c00061d5:	e8 66 a3 ff ff       	call   c0000540 <strlen>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	52                   	push   edx
c00061de:	50                   	push   eax
c00061df:	55                   	push   ebp
c00061e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061e4:	50                   	push   eax
c00061e5:	e8 3a fe ff ff       	call   c0006024 <strnicmp>
c00061ea:	83 c4 10             	add    esp,0x10
c00061ed:	e9 37 ff ff ff       	jmp    c0006129 <find_object+0xa6>
c00061f2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061fa:	eb 1e                	jmp    c000621a <find_object+0x197>
c00061fc:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006200:	8d 43 21             	lea    eax,[ebx+0x21]
c0006203:	89 e9                	mov    ecx,ebp
c0006205:	e8 a6 fc ff ff       	call   c0005eb0 <fncompare>
c000620a:	85 c0                	test   eax,eax
c000620c:	0f 85 1f ff ff ff    	jne    c0006131 <find_object+0xae>
c0006212:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006216:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000621a:	0f 85 11 ff ff ff    	jne    c0006131 <find_object+0xae>
c0006220:	eb 13                	jmp    c0006235 <find_object+0x1b2>
c0006222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006226:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000622a:	0f 8f b2 fe ff ff    	jg     c00060e2 <find_object+0x5f>
c0006230:	e9 c6 fe ff ff       	jmp    c00060fb <find_object+0x78>
c0006235:	81 c4 2c 01 00 00    	add    esp,0x12c
c000623b:	89 d8                	mov    eax,ebx
c000623d:	5b                   	pop    ebx
c000623e:	5e                   	pop    esi
c000623f:	5f                   	pop    edi
c0006240:	5d                   	pop    ebp
c0006241:	c3                   	ret    

c0006242 <find_object_path>:
c0006242:	55                   	push   ebp
c0006243:	57                   	push   edi
c0006244:	89 d7                	mov    edi,edx
c0006246:	56                   	push   esi
c0006247:	89 c6                	mov    esi,eax
c0006249:	53                   	push   ebx
c000624a:	89 cb                	mov    ebx,ecx
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	50                   	push   eax
c0006250:	50                   	push   eax
c0006251:	6a 2f                	push   0x2f
c0006253:	56                   	push   esi
c0006254:	e8 d7 a4 ff ff       	call   c0000730 <strchr>
c0006259:	83 c4 10             	add    esp,0x10
c000625c:	89 c5                	mov    ebp,eax
c000625e:	85 c0                	test   eax,eax
c0006260:	74 3a                	je     c000629c <find_object_path+0x5a>
c0006262:	39 ee                	cmp    esi,ebp
c0006264:	74 31                	je     c0006297 <find_object_path+0x55>
c0006266:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006269:	e8 a5 fb ff ff       	call   c0005e13 <iso_733>
c000626e:	89 c2                	mov    edx,eax
c0006270:	8d 43 02             	lea    eax,[ebx+0x2]
c0006273:	e8 9b fb ff ff       	call   c0005e13 <iso_733>
c0006278:	83 ec 0c             	sub    esp,0xc
c000627b:	89 c1                	mov    ecx,eax
c000627d:	52                   	push   edx
c000627e:	89 f0                	mov    eax,esi
c0006280:	ba 01 00 00 00       	mov    edx,0x1
c0006285:	e8 f9 fd ff ff       	call   c0006083 <find_object>
c000628a:	83 c4 10             	add    esp,0x10
c000628d:	89 c3                	mov    ebx,eax
c000628f:	85 c0                	test   eax,eax
c0006291:	75 04                	jne    c0006297 <find_object_path+0x55>
c0006293:	31 db                	xor    ebx,ebx
c0006295:	eb 36                	jmp    c00062cd <find_object_path+0x8b>
c0006297:	8d 75 01             	lea    esi,[ebp+0x1]
c000629a:	eb b3                	jmp    c000624f <find_object_path+0xd>
c000629c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000629f:	74 28                	je     c00062c9 <find_object_path+0x87>
c00062a1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00062a4:	e8 6a fb ff ff       	call   c0005e13 <iso_733>
c00062a9:	89 c2                	mov    edx,eax
c00062ab:	8d 43 02             	lea    eax,[ebx+0x2]
c00062ae:	e8 60 fb ff ff       	call   c0005e13 <iso_733>
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 c1                	mov    ecx,eax
c00062b8:	52                   	push   edx
c00062b9:	89 f0                	mov    eax,esi
c00062bb:	89 fa                	mov    edx,edi
c00062bd:	e8 c1 fd ff ff       	call   c0006083 <find_object>
c00062c2:	83 c4 10             	add    esp,0x10
c00062c5:	89 c3                	mov    ebx,eax
c00062c7:	eb 04                	jmp    c00062cd <find_object_path+0x8b>
c00062c9:	85 ff                	test   edi,edi
c00062cb:	74 c6                	je     c0006293 <find_object_path+0x51>
c00062cd:	83 c4 0c             	add    esp,0xc
c00062d0:	89 d8                	mov    eax,ebx
c00062d2:	5b                   	pop    ebx
c00062d3:	5e                   	pop    esi
c00062d4:	5f                   	pop    edi
c00062d5:	5d                   	pop    ebp
c00062d6:	c3                   	ret    

c00062d7 <stricmp>:
c00062d7:	57                   	push   edi
c00062d8:	56                   	push   esi
c00062d9:	31 f6                	xor    esi,esi
c00062db:	53                   	push   ebx
c00062dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e0:	83 ec 0c             	sub    esp,0xc
c00062e3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062eb:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062ef:	50                   	push   eax
c00062f0:	e8 bb a5 ff ff       	call   c00008b0 <toupper>
c00062f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f8:	e8 d3 a5 ff ff       	call   c00008d0 <tolower>
c00062fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006300:	89 c3                	mov    ebx,eax
c0006302:	e8 a9 a5 ff ff       	call   c00008b0 <toupper>
c0006307:	89 04 24             	mov    DWORD PTR [esp],eax
c000630a:	e8 c1 a5 ff ff       	call   c00008d0 <tolower>
c000630f:	83 c4 10             	add    esp,0x10
c0006312:	39 c3                	cmp    ebx,eax
c0006314:	75 05                	jne    c000631b <stricmp+0x44>
c0006316:	46                   	inc    esi
c0006317:	85 db                	test   ebx,ebx
c0006319:	75 c1                	jne    c00062dc <stricmp+0x5>
c000631b:	29 c3                	sub    ebx,eax
c000631d:	89 d8                	mov    eax,ebx
c000631f:	5b                   	pop    ebx
c0006320:	5e                   	pop    esi
c0006321:	5f                   	pop    edi
c0006322:	c3                   	ret    

c0006323 <iso_open>:
c0006323:	57                   	push   edi
c0006324:	31 c0                	xor    eax,eax
c0006326:	56                   	push   esi
c0006327:	b9 80 2e 02 c0       	mov    ecx,0xc0022e80
c000632c:	53                   	push   ebx
c000632d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006332:	0f 95 c0             	setne  al
c0006335:	89 c2                	mov    edx,eax
c0006337:	89 c6                	mov    esi,eax
c0006339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000633d:	e8 00 ff ff ff       	call   c0006242 <find_object_path>
c0006342:	83 ca ff             	or     edx,0xffffffff
c0006345:	85 c0                	test   eax,eax
c0006347:	74 5e                	je     c00063a7 <iso_open+0x84>
c0006349:	89 c1                	mov    ecx,eax
c000634b:	31 d2                	xor    edx,edx
c000634d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006353:	83 bf 40 25 02 c0 00 	cmp    DWORD PTR [edi-0x3ffddac0],0x0
c000635a:	75 42                	jne    c000639e <iso_open+0x7b>
c000635c:	8d 41 02             	lea    eax,[ecx+0x2]
c000635f:	c7 87 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffddac0],0xffffffff
c0006369:	e8 a5 fa ff ff       	call   c0005e13 <iso_733>
c000636e:	89 b7 44 25 02 c0    	mov    DWORD PTR [edi-0x3ffddabc],esi
c0006374:	89 87 40 25 02 c0    	mov    DWORD PTR [edi-0x3ffddac0],eax
c000637a:	c7 87 48 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffddab8],0x0
c0006384:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006387:	e8 87 fa ff ff       	call   c0005e13 <iso_733>
c000638c:	c7 87 d0 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdda30],0x0
c0006396:	89 87 4c 25 02 c0    	mov    DWORD PTR [edi-0x3ffddab4],eax
c000639c:	eb 09                	jmp    c00063a7 <iso_open+0x84>
c000639e:	42                   	inc    edx
c000639f:	83 fa 10             	cmp    edx,0x10
c00063a2:	75 a9                	jne    c000634d <iso_open+0x2a>
c00063a4:	83 ca ff             	or     edx,0xffffffff
c00063a7:	5b                   	pop    ebx
c00063a8:	89 d0                	mov    eax,edx
c00063aa:	5e                   	pop    esi
c00063ab:	5f                   	pop    edi
c00063ac:	c3                   	ret    

c00063ad <iso_close>:
c00063ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063b1:	83 f8 0f             	cmp    eax,0xf
c00063b4:	7f 10                	jg     c00063c6 <iso_close+0x19>
c00063b6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063bc:	c7 80 40 25 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffddac0],0x0
c00063c6:	e9 5a fb ff ff       	jmp    c0005f25 <bclear_cache>

c00063cb <iso_read>:
c00063cb:	55                   	push   ebp
c00063cc:	57                   	push   edi
c00063cd:	56                   	push   esi
c00063ce:	53                   	push   ebx
c00063cf:	83 ec 1c             	sub    esp,0x1c
c00063d2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063d6:	83 fd 0f             	cmp    ebp,0xf
c00063d9:	7e 0a                	jle    c00063e5 <iso_read+0x1a>
c00063db:	83 c8 ff             	or     eax,0xffffffff
c00063de:	89 c2                	mov    edx,eax
c00063e0:	e9 f4 00 00 00       	jmp    c00064d9 <iso_read+0x10e>
c00063e5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063eb:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00063f2:	74 e7                	je     c00063db <iso_read+0x10>
c00063f4:	8b 95 d0 25 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdda30]
c00063fa:	85 d2                	test   edx,edx
c00063fc:	75 dd                	jne    c00063db <iso_read+0x10>
c00063fe:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006403:	0f 84 cd 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006409:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c000640f:	8b 8d 4c 25 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffddab4]
c0006415:	29 c1                	sub    ecx,eax
c0006417:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000641b:	76 04                	jbe    c0006421 <iso_read+0x56>
c000641d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006421:	85 c9                	test   ecx,ecx
c0006423:	0f 84 ad 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006429:	89 c6                	mov    esi,eax
c000642b:	bb 00 08 00 00       	mov    ebx,0x800
c0006430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006436:	c1 e8 0b             	shr    eax,0xb
c0006439:	29 f3                	sub    ebx,esi
c000643b:	03 85 40 25 02 c0    	add    eax,DWORD PTR [ebp-0x3ffddac0]
c0006441:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006447:	7e 3f                	jle    c0006488 <iso_read+0xbd>
c0006449:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000644f:	75 37                	jne    c0006488 <iso_read+0xbd>
c0006451:	be 20 00 00 00       	mov    esi,0x20
c0006456:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000645c:	7f 05                	jg     c0006463 <iso_read+0x98>
c000645e:	89 ce                	mov    esi,ecx
c0006460:	c1 fe 0b             	sar    esi,0xb
c0006463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006467:	89 f3                	mov    ebx,esi
c0006469:	c1 e3 0b             	shl    ebx,0xb
c000646c:	52                   	push   edx
c000646d:	56                   	push   esi
c000646e:	50                   	push   eax
c000646f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006473:	e8 11 fb ff ff       	call   c0005f89 <isoReadDiscSector>
c0006478:	83 c4 10             	add    esp,0x10
c000647b:	85 c0                	test   eax,eax
c000647d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006481:	7f 3e                	jg     c00064c1 <iso_read+0xf6>
c0006483:	e9 53 ff ff ff       	jmp    c00063db <iso_read+0x10>
c0006488:	39 cb                	cmp    ebx,ecx
c000648a:	7e 02                	jle    c000648e <iso_read+0xc3>
c000648c:	89 cb                	mov    ebx,ecx
c000648e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006492:	e8 84 fb ff ff       	call   c000601b <bdread>
c0006497:	85 c0                	test   eax,eax
c0006499:	0f 88 3c ff ff ff    	js     c00063db <iso_read+0x10>
c000649f:	8b 0c 85 20 20 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddfe0]
c00064a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00064aa:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c00064b0:	25 ff 07 00 00       	and    eax,0x7ff
c00064b5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064b9:	89 d9                	mov    ecx,ebx
c00064bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064c1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064c5:	01 9d 48 25 02 c0    	add    DWORD PTR [ebp-0x3ffddab8],ebx
c00064cb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064cf:	01 da                	add    edx,ebx
c00064d1:	e9 28 ff ff ff       	jmp    c00063fe <iso_read+0x33>
c00064d6:	89 d0                	mov    eax,edx
c00064d8:	99                   	cdq    
c00064d9:	83 c4 1c             	add    esp,0x1c
c00064dc:	5b                   	pop    ebx
c00064dd:	5e                   	pop    esi
c00064de:	5f                   	pop    edi
c00064df:	5d                   	pop    ebp
c00064e0:	c3                   	ret    

c00064e1 <iso_seek>:
c00064e1:	55                   	push   ebp
c00064e2:	83 c8 ff             	or     eax,0xffffffff
c00064e5:	57                   	push   edi
c00064e6:	89 c2                	mov    edx,eax
c00064e8:	56                   	push   esi
c00064e9:	53                   	push   ebx
c00064ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064f6:	83 fe 0f             	cmp    esi,0xf
c00064f9:	7f 65                	jg     c0006560 <iso_seek+0x7f>
c00064fb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006501:	8d 8d 40 25 02 c0    	lea    ecx,[ebp-0x3ffddac0]
c0006507:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c000650e:	74 50                	je     c0006560 <iso_seek+0x7f>
c0006510:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006517:	75 47                	jne    c0006560 <iso_seek+0x7f>
c0006519:	83 fb 01             	cmp    ebx,0x1
c000651c:	74 0e                	je     c000652c <iso_seek+0x4b>
c000651e:	83 fb 02             	cmp    ebx,0x2
c0006521:	74 0e                	je     c0006531 <iso_seek+0x50>
c0006523:	85 db                	test   ebx,ebx
c0006525:	75 39                	jne    c0006560 <iso_seek+0x7f>
c0006527:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000652a:	eb 0d                	jmp    c0006539 <iso_seek+0x58>
c000652c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000652f:	eb 08                	jmp    c0006539 <iso_seek+0x58>
c0006531:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006534:	01 f8                	add    eax,edi
c0006536:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006539:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000653f:	8b 88 4c 25 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffddab4]
c0006545:	05 40 25 02 c0       	add    eax,0xc0022540
c000654a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000654d:	76 03                	jbe    c0006552 <iso_seek+0x71>
c000654f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006552:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006558:	8b 82 48 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab8]
c000655e:	31 d2                	xor    edx,edx
c0006560:	5b                   	pop    ebx
c0006561:	5e                   	pop    esi
c0006562:	5f                   	pop    edi
c0006563:	5d                   	pop    ebp
c0006564:	c3                   	ret    

c0006565 <iso_tell>:
c0006565:	83 c8 ff             	or     eax,0xffffffff
c0006568:	53                   	push   ebx
c0006569:	89 c2                	mov    edx,eax
c000656b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000656f:	83 f9 0f             	cmp    ecx,0xf
c0006572:	7f 20                	jg     c0006594 <iso_tell+0x2f>
c0006574:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000657a:	83 bb 40 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffddac0],0x0
c0006581:	74 11                	je     c0006594 <iso_tell+0x2f>
c0006583:	83 bb d0 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdda30],0x0
c000658a:	75 08                	jne    c0006594 <iso_tell+0x2f>
c000658c:	8b 83 48 25 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffddab8]
c0006592:	31 d2                	xor    edx,edx
c0006594:	5b                   	pop    ebx
c0006595:	c3                   	ret    

c0006596 <iso_total>:
c0006596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659a:	83 c8 ff             	or     eax,0xffffffff
c000659d:	83 fa 0f             	cmp    edx,0xf
c00065a0:	7f 1e                	jg     c00065c0 <iso_total+0x2a>
c00065a2:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00065a8:	83 ba 40 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffddac0],0x0
c00065af:	74 0f                	je     c00065c0 <iso_total+0x2a>
c00065b1:	83 ba d0 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdda30],0x0
c00065b8:	75 06                	jne    c00065c0 <iso_total+0x2a>
c00065ba:	8b 82 4c 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab4]
c00065c0:	c3                   	ret    

c00065c1 <fn_postprocess>:
c00065c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065c5:	89 d0                	mov    eax,edx
c00065c7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065c9:	80 f9 3b             	cmp    cl,0x3b
c00065cc:	74 07                	je     c00065d5 <fn_postprocess+0x14>
c00065ce:	84 c9                	test   cl,cl
c00065d0:	74 03                	je     c00065d5 <fn_postprocess+0x14>
c00065d2:	40                   	inc    eax
c00065d3:	eb f2                	jmp    c00065c7 <fn_postprocess+0x6>
c00065d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065d8:	39 d0                	cmp    eax,edx
c00065da:	76 0a                	jbe    c00065e6 <fn_postprocess+0x25>
c00065dc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065e0:	75 04                	jne    c00065e6 <fn_postprocess+0x25>
c00065e2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065e6:	c3                   	ret    

c00065e7 <iso_readdir>:
c00065e7:	55                   	push   ebp
c00065e8:	57                   	push   edi
c00065e9:	56                   	push   esi
c00065ea:	53                   	push   ebx
c00065eb:	83 ec 1c             	sub    esp,0x1c
c00065ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065f2:	83 fb 0f             	cmp    ebx,0xf
c00065f5:	7f 28                	jg     c000661f <iso_readdir+0x38>
c00065f7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065fd:	8d b8 40 25 02 c0    	lea    edi,[eax-0x3ffddac0]
c0006603:	83 b8 40 25 02 c0 00 	cmp    DWORD PTR [eax-0x3ffddac0],0x0
c000660a:	74 13                	je     c000661f <iso_readdir+0x38>
c000660c:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006610:	74 0d                	je     c000661f <iso_readdir+0x38>
c0006612:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006619:	0f 84 b1 00 00 00    	je     c00066d0 <iso_readdir+0xe9>
c000661f:	83 ec 0c             	sub    esp,0xc
c0006622:	68 80 dc 01 c0       	push   0xc001dc80
c0006627:	e8 c4 12 01 00       	call   c00178f0 <iso_kprintf>
c000662c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000662f:	e8 d8 12 01 00       	call   c001790c <iso_kprintfd>
c0006634:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000663a:	c7 04 24 85 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc85
c0006641:	e8 aa 12 01 00       	call   c00178f0 <iso_kprintf>
c0006646:	5d                   	pop    ebp
c0006647:	ff b3 40 25 02 c0    	push   DWORD PTR [ebx-0x3ffddac0]
c000664d:	e8 ba 12 01 00       	call   c001790c <iso_kprintfd>
c0006652:	c7 04 24 8b dc 01 c0 	mov    DWORD PTR [esp],0xc001dc8b
c0006659:	e8 92 12 01 00       	call   c00178f0 <iso_kprintf>
c000665e:	58                   	pop    eax
c000665f:	ff b3 44 25 02 c0    	push   DWORD PTR [ebx-0x3ffddabc]
c0006665:	e8 a2 12 01 00       	call   c001790c <iso_kprintfd>
c000666a:	c7 04 24 91 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc91
c0006671:	e8 7a 12 01 00       	call   c00178f0 <iso_kprintf>
c0006676:	58                   	pop    eax
c0006677:	ff b3 d0 25 02 c0    	push   DWORD PTR [ebx-0x3ffdda30]
c000667d:	e8 8a 12 01 00       	call   c001790c <iso_kprintfd>
c0006682:	83 c4 10             	add    esp,0x10
c0006685:	eb 42                	jmp    c00066c9 <iso_readdir+0xe2>
c0006687:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000668a:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c0006691:	89 d1                	mov    ecx,edx
c0006693:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006699:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000669d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00066a0:	75 35                	jne    c00066d7 <iso_readdir+0xf0>
c00066a2:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00066a8:	81 c2 00 08 00 00    	add    edx,0x800
c00066ae:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066b1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066b4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066b7:	73 1e                	jae    c00066d7 <iso_readdir+0xf0>
c00066b9:	c1 ea 0b             	shr    edx,0xb
c00066bc:	8b 07                	mov    eax,DWORD PTR [edi]
c00066be:	01 d0                	add    eax,edx
c00066c0:	e8 4d f9 ff ff       	call   c0006012 <biread>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	79 be                	jns    c0006687 <iso_readdir+0xa0>
c00066c9:	31 c0                	xor    eax,eax
c00066cb:	e9 66 01 00 00       	jmp    c0006836 <iso_readdir+0x24f>
c00066d0:	31 f6                	xor    esi,esi
c00066d2:	83 c8 ff             	or     eax,0xffffffff
c00066d5:	eb da                	jmp    c00066b1 <iso_readdir+0xca>
c00066d7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066dd:	8b ba 48 25 02 c0    	mov    edi,DWORD PTR [edx-0x3ffddab8]
c00066e3:	81 c2 40 25 02 c0    	add    edx,0xc0022540
c00066e9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066ec:	73 db                	jae    c00066c9 <iso_readdir+0xe2>
c00066ee:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066f2:	75 34                	jne    c0006728 <iso_readdir+0x141>
c00066f4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066f8:	75 2e                	jne    c0006728 <iso_readdir+0x141>
c00066fa:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066fd:	8b 34 85 80 20 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddf80]
c0006704:	01 f9                	add    ecx,edi
c0006706:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006709:	89 c8                	mov    eax,ecx
c000670b:	25 ff 07 00 00       	and    eax,0x7ff
c0006710:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006715:	01 c8                	add    eax,ecx
c0006717:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000671a:	25 ff 07 00 00       	and    eax,0x7ff
c000671f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006723:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006726:	74 a1                	je     c00066c9 <iso_readdir+0xe2>
c0006728:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000672e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006732:	8d 56 21             	lea    edx,[esi+0x21]
c0006735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006739:	8d a8 58 25 02 c0    	lea    ebp,[eax-0x3ffddaa8]
c000673f:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006746:	74 0c                	je     c0006754 <iso_readdir+0x16d>
c0006748:	89 e8                	mov    eax,ebp
c000674a:	e8 17 f6 ff ff       	call   c0005d66 <ucs2utfn>
c000674f:	e9 a6 00 00 00       	jmp    c00067fa <iso_readdir+0x213>
c0006754:	57                   	push   edi
c0006755:	51                   	push   ecx
c0006756:	52                   	push   edx
c0006757:	55                   	push   ebp
c0006758:	e8 d3 9e ff ff       	call   c0000630 <strncpy>
c000675d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006761:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006767:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000676a:	c6 84 01 58 25 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffddaa8],0x0
c0006772:	e8 4a fe ff ff       	call   c00065c1 <fn_postprocess>
c0006777:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000677b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000677e:	83 c4 10             	add    esp,0x10
c0006781:	29 d0                	sub    eax,edx
c0006783:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006787:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000678b:	74 05                	je     c0006792 <iso_readdir+0x1ab>
c000678d:	83 e8 21             	sub    eax,0x21
c0006790:	eb 04                	jmp    c0006796 <iso_readdir+0x1af>
c0006792:	47                   	inc    edi
c0006793:	83 e8 22             	sub    eax,0x22
c0006796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000679a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00067a4:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00067a9:	7e 4f                	jle    c00067fa <iso_readdir+0x213>
c00067ab:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00067ae:	48                   	dec    eax
c00067af:	3c 01                	cmp    al,0x1
c00067b1:	77 47                	ja     c00067fa <iso_readdir+0x213>
c00067b3:	52                   	push   edx
c00067b4:	6a 02                	push   0x2
c00067b6:	68 7d dc 01 c0       	push   0xc001dc7d
c00067bb:	57                   	push   edi
c00067bc:	e8 9f 9f ff ff       	call   c0000760 <strncmp>
c00067c1:	83 c4 10             	add    esp,0x10
c00067c4:	85 c0                	test   eax,eax
c00067c6:	75 26                	jne    c00067ee <iso_readdir+0x207>
c00067c8:	50                   	push   eax
c00067c9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067cd:	83 e8 05             	sub    eax,0x5
c00067d0:	50                   	push   eax
c00067d1:	8d 47 05             	lea    eax,[edi+0x5]
c00067d4:	50                   	push   eax
c00067d5:	55                   	push   ebp
c00067d6:	e8 55 9e ff ff       	call   c0000630 <strncpy>
c00067db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067df:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e3:	83 c4 10             	add    esp,0x10
c00067e6:	c6 84 08 53 25 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffddaad],0x0
c00067ee:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067f2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067f6:	01 c7                	add    edi,eax
c00067f8:	eb aa                	jmp    c00067a4 <iso_readdir+0x1bd>
c00067fa:	83 c8 ff             	or     eax,0xffffffff
c00067fd:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006801:	89 c2                	mov    edx,eax
c0006803:	75 0a                	jne    c000680f <iso_readdir+0x228>
c0006805:	8d 46 0a             	lea    eax,[esi+0xa]
c0006808:	e8 06 f6 ff ff       	call   c0005e13 <iso_733>
c000680d:	31 d2                	xor    edx,edx
c000680f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006815:	89 83 50 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddab0],eax
c000681b:	89 93 54 25 02 c0    	mov    DWORD PTR [ebx-0x3ffddaac],edx
c0006821:	81 c3 40 25 02 c0    	add    ebx,0xc0022540
c0006827:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000682a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000682d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006831:	05 50 25 02 c0       	add    eax,0xc0022550
c0006836:	83 c4 1c             	add    esp,0x1c
c0006839:	5b                   	pop    ebx
c000683a:	5e                   	pop    esi
c000683b:	5f                   	pop    edi
c000683c:	5d                   	pop    ebp
c000683d:	c3                   	ret    

c000683e <iso_reset>:
c000683e:	83 ec 18             	sub    esp,0x18
c0006841:	68 9a dc 01 c0       	push   0xc001dc9a
c0006846:	e8 a5 10 01 00       	call   c00178f0 <iso_kprintf>
c000684b:	e8 0d f7 ff ff       	call   c0005f5d <iso_break_all>
c0006850:	e8 06 f7 ff ff       	call   c0005f5b <bclear>
c0006855:	31 c0                	xor    eax,eax
c0006857:	83 c4 1c             	add    esp,0x1c
c000685a:	c3                   	ret    

c000685b <init_percd>:
c000685b:	57                   	push   edi
c000685c:	56                   	push   esi
c000685d:	53                   	push   ebx
c000685e:	bb 01 00 00 00       	mov    ebx,0x1
c0006863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006867:	a2 60 20 02 c0       	mov    ds:0xc0022060,al
c000686c:	e8 cd ff ff ff       	call   c000683e <iso_reset>
c0006871:	c7 05 b4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb4,0x0
c000687b:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c0006880:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006884:	e8 89 f7 ff ff       	call   c0006012 <biread>
c0006889:	89 c6                	mov    esi,eax
c000688b:	85 c0                	test   eax,eax
c000688d:	0f 88 ba 00 00 00    	js     c000694d <init_percd+0xf2>
c0006893:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c000689a:	83 c0 04             	add    eax,0x4
c000689d:	52                   	push   edx
c000689e:	6a 06                	push   0x6
c00068a0:	68 a5 dc 01 c0       	push   0xc001dca5
c00068a5:	50                   	push   eax
c00068a6:	e8 e5 9a ff ff       	call   c0000390 <memcmp>
c00068ab:	83 c4 10             	add    esp,0x10
c00068ae:	85 c0                	test   eax,eax
c00068b0:	74 08                	je     c00068ba <init_percd+0x5f>
c00068b2:	43                   	inc    ebx
c00068b3:	83 fb 04             	cmp    ebx,0x4
c00068b6:	75 c3                	jne    c000687b <init_percd+0x20>
c00068b8:	eb 1a                	jmp    c00068d4 <init_percd+0x79>
c00068ba:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c00068c1:	83 c0 5c             	add    eax,0x5c
c00068c4:	e8 1b f5 ff ff       	call   c0005de4 <isjoliet>
c00068c9:	a3 b4 2e 02 c0       	mov    ds:0xc0022eb4,eax
c00068ce:	85 c0                	test   eax,eax
c00068d0:	74 e0                	je     c00068b2 <init_percd+0x57>
c00068d2:	eb 3e                	jmp    c0006912 <init_percd+0xb7>
c00068d4:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00068db:	75 35                	jne    c0006912 <init_percd+0xb7>
c00068dd:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00068e2:	83 c0 10             	add    eax,0x10
c00068e5:	e8 28 f7 ff ff       	call   c0006012 <biread>
c00068ea:	89 c6                	mov    esi,eax
c00068ec:	85 c0                	test   eax,eax
c00068ee:	78 5f                	js     c000694f <init_percd+0xf4>
c00068f0:	83 cb ff             	or     ebx,0xffffffff
c00068f3:	50                   	push   eax
c00068f4:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c00068fb:	6a 06                	push   0x6
c00068fd:	83 c0 04             	add    eax,0x4
c0006900:	68 ac dc 01 c0       	push   0xc001dcac
c0006905:	50                   	push   eax
c0006906:	e8 85 9a ff ff       	call   c0000390 <memcmp>
c000690b:	83 c4 10             	add    esp,0x10
c000690e:	85 c0                	test   eax,eax
c0006910:	75 3d                	jne    c000694f <init_percd+0xf4>
c0006912:	8b 34 b5 80 20 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffddf80]
c0006919:	bf 80 2e 02 c0       	mov    edi,0xc0022e80
c000691e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006924:	b9 22 00 00 00       	mov    ecx,0x22
c0006929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000692b:	b8 82 2e 02 c0       	mov    eax,0xc0022e82
c0006930:	31 db                	xor    ebx,ebx
c0006932:	e8 dc f4 ff ff       	call   c0005e13 <iso_733>
c0006937:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c000693c:	b8 8a 2e 02 c0       	mov    eax,0xc0022e8a
c0006941:	e8 cd f4 ff ff       	call   c0005e13 <iso_733>
c0006946:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c000694b:	eb 02                	jmp    c000694f <init_percd+0xf4>
c000694d:	89 c3                	mov    ebx,eax
c000694f:	89 d8                	mov    eax,ebx
c0006951:	5b                   	pop    ebx
c0006952:	5e                   	pop    esi
c0006953:	5f                   	pop    edi
c0006954:	c3                   	ret    

c0006955 <iso_ioctl>:
c0006955:	83 ec 18             	sub    esp,0x18
c0006958:	68 b3 dc 01 c0       	push   0xc001dcb3
c000695d:	e8 8e 0f 01 00       	call   c00178f0 <iso_kprintf>
c0006962:	e8 d7 fe ff ff       	call   c000683e <iso_reset>
c0006967:	31 c0                	xor    eax,eax
c0006969:	83 c4 1c             	add    esp,0x1c
c000696c:	c3                   	ret    

c000696d <fs_iso9660_init>:
c000696d:	53                   	push   ebx
c000696e:	31 db                	xor    ebx,ebx
c0006970:	83 ec 14             	sub    esp,0x14
c0006973:	68 be dc 01 c0       	push   0xc001dcbe
c0006978:	e8 73 0f 01 00       	call   c00178f0 <iso_kprintf>
c000697d:	83 c4 0c             	add    esp,0xc
c0006980:	68 40 09 00 00       	push   0x940
c0006985:	6a 00                	push   0x0
c0006987:	68 40 25 02 c0       	push   0xc0022540
c000698c:	e8 3f 9b ff ff       	call   c00004d0 <memset>
c0006991:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006998:	c7 05 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0022540,0xffffffff
c00069a2:	e8 ce 0e 00 00       	call   c0007875 <malloc>
c00069a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069ae:	a3 b0 2e 02 c0       	mov    ds:0xc0022eb0,eax
c00069b3:	e8 bd 0e 00 00       	call   c0007875 <malloc>
c00069b8:	83 c4 10             	add    esp,0x10
c00069bb:	a3 20 25 02 c0       	mov    ds:0xc0022520,eax
c00069c0:	83 ec 0c             	sub    esp,0xc
c00069c3:	68 04 08 00 00       	push   0x804
c00069c8:	e8 a8 0e 00 00       	call   c0007875 <malloc>
c00069cd:	89 04 9d 80 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddf80],eax
c00069d4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069da:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069e1:	e8 8f 0e 00 00       	call   c0007875 <malloc>
c00069e6:	83 c4 10             	add    esp,0x10
c00069e9:	89 04 9d 20 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddfe0],eax
c00069f0:	43                   	inc    ebx
c00069f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069f7:	83 fb 10             	cmp    ebx,0x10
c00069fa:	75 c4                	jne    c00069c0 <fs_iso9660_init+0x53>
c00069fc:	31 c0                	xor    eax,eax
c00069fe:	83 c4 08             	add    esp,0x8
c0006a01:	5b                   	pop    ebx
c0006a02:	c3                   	ret    

c0006a03 <fs_iso9660_shutdown>:
c0006a03:	53                   	push   ebx
c0006a04:	31 db                	xor    ebx,ebx
c0006a06:	83 ec 08             	sub    esp,0x8
c0006a09:	83 ec 0c             	sub    esp,0xc
c0006a0c:	ff 34 9d 80 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddf80]
c0006a13:	e8 6d 0e 00 00       	call   c0007885 <free>
c0006a18:	58                   	pop    eax
c0006a19:	ff 34 9d 20 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddfe0]
c0006a20:	43                   	inc    ebx
c0006a21:	e8 5f 0e 00 00       	call   c0007885 <free>
c0006a26:	83 c4 10             	add    esp,0x10
c0006a29:	83 fb 10             	cmp    ebx,0x10
c0006a2c:	75 db                	jne    c0006a09 <fs_iso9660_shutdown+0x6>
c0006a2e:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c0006a33:	85 c0                	test   eax,eax
c0006a35:	74 0c                	je     c0006a43 <fs_iso9660_shutdown+0x40>
c0006a37:	83 ec 0c             	sub    esp,0xc
c0006a3a:	50                   	push   eax
c0006a3b:	e8 45 0e 00 00       	call   c0007885 <free>
c0006a40:	83 c4 10             	add    esp,0x10
c0006a43:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c0006a48:	85 c0                	test   eax,eax
c0006a4a:	74 0c                	je     c0006a58 <fs_iso9660_shutdown+0x55>
c0006a4c:	83 ec 0c             	sub    esp,0xc
c0006a4f:	50                   	push   eax
c0006a50:	e8 30 0e 00 00       	call   c0007885 <free>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c0006a62:	c7 05 b0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb0,0x0
c0006a6c:	31 c0                	xor    eax,eax
c0006a6e:	83 c4 08             	add    esp,0x8
c0006a71:	5b                   	pop    ebx
c0006a72:	c3                   	ret    
c0006a73:	90                   	nop

c0006a74 <Computer::close(int, int, void*)>:
c0006a74:	57                   	push   edi
c0006a75:	56                   	push   esi
c0006a76:	53                   	push   ebx
c0006a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a83:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a89:	83 ec 0c             	sub    esp,0xc
c0006a8c:	50                   	push   eax
c0006a8d:	e8 d8 50 00 00       	call   c000bb6a <Device::closeAll()>
c0006a92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a98:	83 c4 10             	add    esp,0x10
c0006a9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006aa1:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006aa9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ab1:	5b                   	pop    ebx
c0006ab2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ab5:	5e                   	pop    esi
c0006ab6:	5f                   	pop    edi
c0006ab7:	ff e0                	jmp    eax

c0006ab9 <Krnl::firstTask()>:
c0006ab9:	53                   	push   ebx
c0006aba:	83 ec 14             	sub    esp,0x14
c0006abd:	fb                   	sti    
c0006abe:	68 cf dc 01 c0       	push   0xc001dccf
c0006ac3:	e8 e3 91 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006ac8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006acf:	e8 a1 0d 00 00       	call   c0007875 <malloc>
c0006ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006adb:	89 c3                	mov    ebx,eax
c0006add:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0006ae2:	50                   	push   eax
c0006ae3:	68 e8 dc 01 c0       	push   0xc001dce8
c0006ae8:	6a 01                	push   0x1
c0006aea:	53                   	push   ebx
c0006aeb:	e8 08 c9 00 00       	call   c00133f8 <Process::Process(bool, char const*, Process*, char**)>
c0006af0:	83 c4 20             	add    esp,0x20
c0006af3:	68 ff 00 00 00       	push   0xff
c0006af8:	6a 00                	push   0x0
c0006afa:	68 c9 72 00 c0       	push   0xc00072c9
c0006aff:	53                   	push   ebx
c0006b00:	e8 1b cb 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c0006b05:	8b 15 90 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026190
c0006b0b:	6a 7a                	push   0x7a
c0006b0d:	6a 00                	push   0x0
c0006b0f:	68 74 40 01 c0       	push   0xc0014074
c0006b14:	52                   	push   edx
c0006b15:	e8 06 cb 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c0006b1a:	83 c4 14             	add    esp,0x14
c0006b1d:	a3 48 61 02 c0       	mov    ds:0xc0026148,eax
c0006b22:	68 e4 dd 01 c0       	push   0xc001dde4
c0006b27:	c6 05 bd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ebd,0x1
c0006b2e:	e8 78 91 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006b33:	e8 1b d9 00 00       	call   c0014453 <Vm::initialise8086()>
c0006b38:	e8 73 3e 00 00       	call   c000a9b0 <Fs::initVFS()>
c0006b3d:	c7 04 24 f5 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcf5
c0006b44:	e8 62 91 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006b49:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006b4e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b54:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b56:	6a 00                	push   0x0
c0006b58:	6a 00                	push   0x0
c0006b5a:	6a 00                	push   0x0
c0006b5c:	50                   	push   eax
c0006b5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b60:	83 c4 14             	add    esp,0x14
c0006b63:	68 e4 dd 01 c0       	push   0xc001dde4
c0006b68:	e8 3e 91 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006b6d:	e8 14 96 00 00       	call   c0010186 <Krnl::loadSystemEnv()>
c0006b72:	e8 71 98 00 00       	call   c00103e8 <Krnl::setupPowerManager()>
c0006b77:	83 c4 0c             	add    esp,0xc
c0006b7a:	6a 3a                	push   0x3a
c0006b7c:	68 0f dd 01 c0       	push   0xc001dd0f
c0006b81:	68 18 dd 01 c0       	push   0xc001dd18
c0006b86:	e8 16 ae 00 00       	call   c00119a1 <Reg::readIntWithDefault(char*, char*, int)>
c0006b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b8e:	e8 29 49 00 00       	call   c000b4bc <User::loadClockSettings(int)>
c0006b93:	c7 04 24 08 de 01 c0 	mov    DWORD PTR [esp],0xc001de08
c0006b9a:	e8 0c 91 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006b9f:	59                   	pop    ecx
c0006ba0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006ba5:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006bab:	53                   	push   ebx
c0006bac:	e8 b7 4f 00 00       	call   c000bb68 <Device::loadDriversForAll()>
c0006bb1:	c7 04 24 20 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd20
c0006bb8:	e8 ee 90 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006bbd:	58                   	pop    eax
c0006bbe:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c0006bc4:	5a                   	pop    edx
c0006bc5:	6a 01                	push   0x1
c0006bc7:	68 31 dd 01 c0       	push   0xc001dd31
c0006bcc:	e8 45 c2 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c0006bd1:	59                   	pop    ecx
c0006bd2:	5a                   	pop    edx
c0006bd3:	53                   	push   ebx
c0006bd4:	50                   	push   eax
c0006bd5:	e8 6d c4 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c0006bda:	83 c4 10             	add    esp,0x10
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	6a 02                	push   0x2
c0006be2:	e8 55 ce 00 00       	call   c0013a3c <blockTask(TaskState)>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	eb f1                	jmp    c0006bdd <Krnl::firstTask()+0x124>

c0006bec <Computer::Computer()>:
c0006bec:	83 ec 0c             	sub    esp,0xc
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	83 ec 08             	sub    esp,0x8
c0006bf6:	68 4d dd 01 c0       	push   0xc001dd4d
c0006bfb:	50                   	push   eax
c0006bfc:	e8 e3 4f 00 00       	call   c000bbe4 <Device::Device(char const*)>
c0006c01:	83 c4 10             	add    esp,0x10
c0006c04:	ba 54 de 01 c0       	mov    edx,0xc001de54
c0006c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0d:	89 10                	mov    DWORD PTR [eax],edx
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c21:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c35:	83 ca 04             	or     edx,0x4
c0006c38:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c48:	31 d2                	xor    edx,edx
c0006c4a:	88 c2                	mov    dl,al
c0006c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c50:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c61:	31 d2                	xor    edx,edx
c0006c63:	88 c2                	mov    dl,al
c0006c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c69:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c78:	8d 50 01             	lea    edx,[eax+0x1]
c0006c7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c85:	31 d2                	xor    edx,edx
c0006c87:	88 c2                	mov    dl,al
c0006c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c91:	83 e1 3f             	and    ecx,0x3f
c0006c94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c98:	90                   	nop
c0006c99:	83 c4 0c             	add    esp,0xc
c0006c9c:	c3                   	ret    
c0006c9d:	90                   	nop

c0006c9e <Computer::setBootMessage(char const*)>:
c0006c9e:	c3                   	ret    
c0006c9f:	90                   	nop

c0006ca0 <Computer::detectFeatures()>:
c0006ca0:	55                   	push   ebp
c0006ca1:	57                   	push   edi
c0006ca2:	56                   	push   esi
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 1c             	sub    esp,0x1c
c0006ca7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006cab:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cb5:	e8 3f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc2:	0f 95 c2             	setne  dl
c0006cc5:	83 e0 fd             	and    eax,0xfffffffd
c0006cc8:	01 d2                	add    edx,edx
c0006cca:	09 d0                	or     eax,edx
c0006ccc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cd2:	a8 02                	test   al,0x2
c0006cd4:	75 46                	jne    c0006d1c <Computer::detectFeatures()+0x7c>
c0006cd6:	f6 05 d1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed1,0x4
c0006cdd:	74 07                	je     c0006ce6 <Computer::detectFeatures()+0x46>
c0006cdf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ce6:	e8 eb 58 01 00       	call   c001c5d6 <x87Detect>
c0006ceb:	83 e0 01             	and    eax,0x1
c0006cee:	c1 e0 04             	shl    eax,0x4
c0006cf1:	88 c2                	mov    dl,al
c0006cf3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf9:	83 e0 ef             	and    eax,0xffffffef
c0006cfc:	09 d0                	or     eax,edx
c0006cfe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d04:	a8 10                	test   al,0x10
c0006d06:	0f 85 2a 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x196>
c0006d0c:	84 c0                	test   al,al
c0006d0e:	0f 88 45 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1b9>
c0006d14:	83 c4 1c             	add    esp,0x1c
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	5f                   	pop    edi
c0006d1a:	5d                   	pop    ebp
c0006d1b:	c3                   	ret    
c0006d1c:	83 ec 0c             	sub    esp,0xc
c0006d1f:	6a 20                	push   0x20
c0006d21:	e8 b2 84 00 00       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d26:	83 e0 01             	and    eax,0x1
c0006d29:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d30:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d36:	83 e0 f7             	and    eax,0xfffffff7
c0006d39:	09 d0                	or     eax,edx
c0006d3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d41:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d48:	e8 8b 84 00 00       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d4d:	83 e0 01             	and    eax,0x1
c0006d50:	88 c2                	mov    dl,al
c0006d52:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d58:	83 e0 fe             	and    eax,0xfffffffe
c0006d5b:	09 d0                	or     eax,edx
c0006d5d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d63:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d6a:	e8 69 84 00 00       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d6f:	c1 e0 07             	shl    eax,0x7
c0006d72:	88 c2                	mov    dl,al
c0006d74:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d7a:	83 e0 7f             	and    eax,0x7f
c0006d7d:	09 d0                	or     eax,edx
c0006d7f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d85:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d8c:	e8 47 84 00 00       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d91:	83 c4 10             	add    esp,0x10
c0006d94:	83 e0 01             	and    eax,0x1
c0006d97:	c1 e0 05             	shl    eax,0x5
c0006d9a:	88 c2                	mov    dl,al
c0006d9c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006da2:	83 e0 df             	and    eax,0xffffffdf
c0006da5:	09 d0                	or     eax,edx
c0006da7:	f7 05 d0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ed0,0x401
c0006db1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db7:	0f 84 c2 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1df>
c0006dbd:	83 e0 fe             	and    eax,0xfffffffe
c0006dc0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dc6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dcc:	88 c2                	mov    dl,al
c0006dce:	83 e2 09             	and    edx,0x9
c0006dd1:	fe ca                	dec    dl
c0006dd3:	75 09                	jne    c0006dde <Computer::detectFeatures()+0x13e>
c0006dd5:	83 e0 fe             	and    eax,0xfffffffe
c0006dd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006de5:	50                   	push   eax
c0006de6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dea:	55                   	push   ebp
c0006deb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006def:	57                   	push   edi
c0006df0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006df4:	56                   	push   esi
c0006df5:	68 00 00 00 80       	push   0x80000000
c0006dfa:	e8 55 83 00 00       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dff:	83 c4 20             	add    esp,0x20
c0006e02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e0d:	0f 86 c3 fe ff ff    	jbe    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e13:	83 ec 0c             	sub    esp,0xc
c0006e16:	50                   	push   eax
c0006e17:	55                   	push   ebp
c0006e18:	57                   	push   edi
c0006e19:	56                   	push   esi
c0006e1a:	68 01 00 00 80       	push   0x80000001
c0006e1f:	e8 30 83 00 00       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e24:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e2e:	83 c4 20             	add    esp,0x20
c0006e31:	e9 a0 fe ff ff       	jmp    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e36:	e8 55 57 01 00       	call   c001c590 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 bb fe ff ff    	jns    c0006d14 <Computer::detectFeatures()+0x74>
c0006e59:	e8 52 54 01 00       	call   c001c2b0 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 4c 83 00 00       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 c4 10             	add    esp,0x10
c0006e8f:	83 e0 01             	and    eax,0x1
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 1c ff ff ff       	jmp    c0006dc6 <Computer::detectFeatures()+0x126>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 56 dd 01 c0       	push   0xc001dd56
c0006ece:	e8 50 94 00 00       	call   c0010323 <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 5c dd 01 c0       	push   0xc001dd5c
c0006f06:	e8 18 94 00 00       	call   c0010323 <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 fd 7c 00 00       	jmp    c000ec50 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6b:	19 c0                	sbb    eax,eax
c0006f6d:	83 e0 80             	and    eax,0xffffff80
c0006f70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f74:	e6 70                	out    0x70,al
c0006f76:	e4 71                	in     al,0x71
c0006f78:	c3                   	ret    
c0006f79:	90                   	nop

c0006f7a <Computer::enableNMI(bool)>:
c0006f7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f90:	eb ce                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f92 <Computer::open(int, int, void*)>:
c0006f92:	56                   	push   esi
c0006f93:	53                   	push   ebx
c0006f94:	83 ec 10             	sub    esp,0x10
c0006f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f9b:	f6 05 d0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed0,0x4
c0006fa2:	68 62 dd 01 c0       	push   0xc001dd62
c0006fa7:	0f 94 05 60 ff 01 c0 	sete   BYTE PTR ds:0xc001ff60
c0006fae:	e8 f8 8c 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006fb3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fba:	e8 b6 08 00 00       	call   c0007875 <malloc>
c0006fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc2:	89 c6                	mov    esi,eax
c0006fc4:	e8 1f 78 00 00       	call   c000e7e8 <ACPI::ACPI()>
c0006fc9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fcf:	58                   	pop    eax
c0006fd0:	5a                   	pop    edx
c0006fd1:	56                   	push   esi
c0006fd2:	53                   	push   ebx
c0006fd3:	e8 74 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c0006fd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdb:	e8 c0 fc ff ff       	call   c0006ca0 <Computer::detectFeatures()>
c0006fe0:	59                   	pop    ecx
c0006fe1:	5e                   	pop    esi
c0006fe2:	6a 01                	push   0x1
c0006fe4:	53                   	push   ebx
c0006fe5:	e8 90 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0006fea:	c7 04 24 7a dd 01 c0 	mov    DWORD PTR [esp],0xc001dd7a
c0006ff1:	e8 b5 8c 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c0006ff6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006ffd:	e8 73 08 00 00       	call   c0007875 <malloc>
c0007002:	89 04 24             	mov    DWORD PTR [esp],eax
c0007005:	89 c6                	mov    esi,eax
c0007007:	e8 84 82 00 00       	call   c000f290 <CPU::CPU()>
c000700c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007012:	58                   	pop    eax
c0007013:	5a                   	pop    edx
c0007014:	56                   	push   esi
c0007015:	53                   	push   ebx
c0007016:	e8 31 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c000701b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007021:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007025:	8b 10                	mov    edx,DWORD PTR [eax]
c0007027:	51                   	push   ecx
c0007028:	6a 00                	push   0x0
c000702a:	6a 00                	push   0x0
c000702c:	50                   	push   eax
c000702d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007030:	83 c4 14             	add    esp,0x14
c0007033:	68 28 de 01 c0       	push   0xc001de28
c0007038:	e8 6e 8c 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000703d:	e8 48 e5 00 00       	call   c001558a <HalInitialiseCoprocessor()>
c0007042:	c7 04 24 94 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd94
c0007049:	e8 5d 8c 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000704e:	c7 04 24 b9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006ab9
c0007055:	e8 de c6 00 00       	call   c0013738 <setupMultitasking(void (*)())>
c000705a:	83 c4 14             	add    esp,0x14
c000705d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007062:	5b                   	pop    ebx
c0007063:	5e                   	pop    esi
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::disableNMI()>:
c0007066:	6a 00                	push   0x0
c0007068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000706c:	50                   	push   eax
c000706d:	e8 08 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0007072:	5a                   	pop    edx
c0007073:	59                   	pop    ecx
c0007074:	c3                   	ret    
c0007075:	90                   	nop

c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007081:	19 c0                	sbb    eax,eax
c0007083:	83 e0 80             	and    eax,0xffffff80
c0007086:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000708a:	e6 70                	out    0x70,al
c000708c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007090:	e6 71                	out    0x71,al
c0007092:	c3                   	ret    
c0007093:	90                   	nop

c0007094 <Computer::handleNMI()>:
c0007094:	56                   	push   esi
c0007095:	53                   	push   ebx
c0007096:	83 ec 10             	sub    esp,0x10
c0007099:	e4 92                	in     al,0x92
c000709b:	89 c6                	mov    esi,eax
c000709d:	e4 61                	in     al,0x61
c000709f:	68 af dd 01 c0       	push   0xc001ddaf
c00070a4:	88 c3                	mov    bl,al
c00070a6:	e8 63 35 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00070ab:	83 c4 10             	add    esp,0x10
c00070ae:	83 e6 10             	and    esi,0x10
c00070b1:	75 0d                	jne    c00070c0 <Computer::handleNMI()+0x2c>
c00070b3:	f6 c3 40             	test   bl,0x40
c00070b6:	75 1d                	jne    c00070d5 <Computer::handleNMI()+0x41>
c00070b8:	84 db                	test   bl,bl
c00070ba:	78 2d                	js     c00070e9 <Computer::handleNMI()+0x55>
c00070bc:	58                   	pop    eax
c00070bd:	5b                   	pop    ebx
c00070be:	5e                   	pop    esi
c00070bf:	c3                   	ret    
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	68 c0 dd 01 c0       	push   0xc001ddc0
c00070c8:	e8 56 92 00 00       	call   c0010323 <KePanic(char const*)>
c00070cd:	83 c4 10             	add    esp,0x10
c00070d0:	f6 c3 40             	test   bl,0x40
c00070d3:	74 e3                	je     c00070b8 <Computer::handleNMI()+0x24>
c00070d5:	83 ec 0c             	sub    esp,0xc
c00070d8:	68 cd dd 01 c0       	push   0xc001ddcd
c00070dd:	e8 41 92 00 00       	call   c0010323 <KePanic(char const*)>
c00070e2:	83 c4 10             	add    esp,0x10
c00070e5:	84 db                	test   bl,bl
c00070e7:	79 d3                	jns    c00070bc <Computer::handleNMI()+0x28>
c00070e9:	c7 44 24 10 d7 dd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ddd7
c00070f1:	5a                   	pop    edx
c00070f2:	5b                   	pop    ebx
c00070f3:	5e                   	pop    esi
c00070f4:	e9 2a 92 00 00       	jmp    c0010323 <KePanic(char const*)>
c00070f9:	90                   	nop

c00070fa <GDTEntry::setBase(unsigned int)>:
c00070fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007102:	89 c1                	mov    ecx,eax
c0007104:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007108:	c1 e9 10             	shr    ecx,0x10
c000710b:	c1 e8 18             	shr    eax,0x18
c000710e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007111:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007114:	c3                   	ret    
c0007115:	90                   	nop

c0007116 <GDTEntry::setLimit(unsigned int)>:
c0007116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007121:	66 89 01             	mov    WORD PTR [ecx],ax
c0007124:	83 e2 f0             	and    edx,0xfffffff0
c0007127:	c1 e8 10             	shr    eax,0x10
c000712a:	83 e0 0f             	and    eax,0xf
c000712d:	09 d0                	or     eax,edx
c000712f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007132:	c3                   	ret    
c0007133:	90                   	nop

c0007134 <GDT::GDT()>:
c0007134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000713e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007142:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007148:	90                   	nop
c0007149:	c3                   	ret    

c000714a <GDT::addEntry(GDTEntry)>:
c000714a:	53                   	push   ebx
c000714b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000714f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007153:	8b 02                	mov    eax,DWORD PTR [edx]
c0007155:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007159:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000715d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007161:	8d 48 01             	lea    ecx,[eax+0x1]
c0007164:	c1 e0 03             	shl    eax,0x3
c0007167:	89 0a                	mov    DWORD PTR [edx],ecx
c0007169:	5b                   	pop    ebx
c000716a:	c3                   	ret    
c000716b:	90                   	nop

c000716c <GDT::getNumberOfEntries()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8b 00                	mov    eax,DWORD PTR [eax]
c0007172:	c3                   	ret    
c0007173:	90                   	nop

c0007174 <GDT::flush()>:
c0007174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007178:	8b 10                	mov    edx,DWORD PTR [eax]
c000717a:	83 c0 04             	add    eax,0x4
c000717d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007184:	a3 c2 2e 02 c0       	mov    ds:0xc0022ec2,eax
c0007189:	66 89 15 c0 2e 02 c0 	mov    WORD PTR ds:0xc0022ec0,dx
c0007190:	e9 c8 91 ff ff       	jmp    c000035d <loadGDT>
c0007195:	90                   	nop

c0007196 <GDT::setup()>:
c0007196:	57                   	push   edi
c0007197:	56                   	push   esi
c0007198:	53                   	push   ebx
c0007199:	83 ec 30             	sub    esp,0x30
c000719c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a0:	6a 00                	push   0x0
c00071a2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071a6:	56                   	push   esi
c00071a7:	e8 4e ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071ac:	6a 00                	push   0x0
c00071ae:	56                   	push   esi
c00071af:	e8 62 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071b4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071bc:	6a 00                	push   0x0
c00071be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071c2:	56                   	push   esi
c00071c3:	e8 32 ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071c8:	68 ff ff ff 00       	push   0xffffff
c00071cd:	56                   	push   esi
c00071ce:	e8 43 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071df:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071e3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071ed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071f5:	89 f8                	mov    eax,edi
c00071f7:	89 fa                	mov    edx,edi
c00071f9:	80 e4 f7             	and    ah,0xf7
c00071fc:	80 ce 60             	or     dh,0x60
c00071ff:	89 c7                	mov    edi,eax
c0007201:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007205:	80 cc 60             	or     ah,0x60
c0007208:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000720c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007210:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007214:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007218:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000721c:	83 c4 20             	add    esp,0x20
c000721f:	6a 00                	push   0x0
c0007221:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007225:	50                   	push   eax
c0007226:	e8 cf fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c000722b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000722f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007233:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007238:	6a 00                	push   0x0
c000723a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000723e:	50                   	push   eax
c000723f:	e8 b6 fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0007244:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007249:	83 c4 0c             	add    esp,0xc
c000724c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007254:	53                   	push   ebx
c0007255:	e8 f0 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000725a:	83 c4 0c             	add    esp,0xc
c000725d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007265:	53                   	push   ebx
c0007266:	e8 df fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000726b:	83 c4 0c             	add    esp,0xc
c000726e:	57                   	push   edi
c000726f:	56                   	push   esi
c0007270:	53                   	push   ebx
c0007271:	e8 d4 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007276:	83 c4 0c             	add    esp,0xc
c0007279:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000727d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007281:	53                   	push   ebx
c0007282:	e8 c3 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007287:	83 c4 0c             	add    esp,0xc
c000728a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000728e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007292:	53                   	push   ebx
c0007293:	e8 b2 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007298:	83 c4 0c             	add    esp,0xc
c000729b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000729f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a3:	53                   	push   ebx
c00072a4:	e8 a1 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072a9:	83 c4 0c             	add    esp,0xc
c00072ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b4:	53                   	push   ebx
c00072b5:	e8 90 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072bd:	e8 b2 fe ff ff       	call   c0007174 <GDT::flush()>
c00072c2:	83 c4 40             	add    esp,0x40
c00072c5:	5b                   	pop    ebx
c00072c6:	5e                   	pop    esi
c00072c7:	5f                   	pop    edi
c00072c8:	c3                   	ret    

c00072c9 <idleFunction(void*)>:
c00072c9:	83 ec 0c             	sub    esp,0xc
c00072cc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00072d1:	48                   	dec    eax
c00072d2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00072d7:	75 01                	jne    c00072da <idleFunction(void*)+0x11>
c00072d9:	fb                   	sti    
c00072da:	e8 85 df 00 00       	call   c0015264 <HalSystemIdle()>
c00072df:	e8 ae 58 01 00       	call   c001cb92 <idleCommon()>
c00072e4:	eb f4                	jmp    c00072da <idleFunction(void*)+0x11>
c00072e6:	66 90                	xchg   ax,ax

c00072e8 <IDTEntry::IDTEntry(bool)>:
c00072e8:	83 ec 04             	sub    esp,0x4
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	88 04 24             	mov    BYTE PTR [esp],al
c00072f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 f0             	and    edx,0xfffffff0
c000730e:	83 ca 0e             	or     edx,0xe
c0007311:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 ef             	and    edx,0xffffffef
c000731e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007321:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007325:	74 05                	je     c000732c <IDTEntry::IDTEntry(bool)+0x44>
c0007327:	b2 03                	mov    dl,0x3
c0007329:	eb 05                	jmp    c0007330 <IDTEntry::IDTEntry(bool)+0x48>
c000732b:	90                   	nop
c000732c:	b2 00                	mov    dl,0x0
c000732e:	66 90                	xchg   ax,ax
c0007330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007334:	83 e2 03             	and    edx,0x3
c0007337:	88 d1                	mov    cl,dl
c0007339:	c1 e1 05             	shl    ecx,0x5
c000733c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733f:	83 e2 9f             	and    edx,0xffffff9f
c0007342:	09 ca                	or     edx,ecx
c0007344:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734e:	83 ca 80             	or     edx,0xffffff80
c0007351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007354:	90                   	nop
c0007355:	83 c4 04             	add    esp,0x4
c0007358:	c3                   	ret    
c0007359:	90                   	nop

c000735a <IDTEntry::setOffset(unsigned int)>:
c000735a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	66 89 02             	mov    WORD PTR [edx],ax
c0007365:	c1 e8 10             	shr    eax,0x10
c0007368:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000736c:	c3                   	ret    
c000736d:	90                   	nop
c000736e:	66 90                	xchg   ax,ax

c0007370 <IDT::IDT()>:
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 30             	add    eax,0x30
c0007379:	c3                   	ret    

c000737a <IDT::addEntry(IDTEntry, int)>:
c000737a:	53                   	push   ebx
c000737b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000738b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000738e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007392:	5b                   	pop    ebx
c0007393:	c3                   	ret    

c0007394 <IDT::addEntry(int, void (*)(), bool)>:
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000739d:	50                   	push   eax
c000739e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073a2:	53                   	push   ebx
c00073a3:	e8 40 ff ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c00073a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073ac:	53                   	push   ebx
c00073ad:	e8 a8 ff ff ff       	call   c000735a <IDTEntry::setOffset(unsigned int)>
c00073b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c2:	e8 b3 ff ff ff       	call   c000737a <IDT::addEntry(IDTEntry, int)>
c00073c7:	83 c4 30             	add    esp,0x30
c00073ca:	5b                   	pop    ebx
c00073cb:	c3                   	ret    

c00073cc <IDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	66 c7 05 c8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ec8,0x7ff
c00073d9:	a3 ca 2e 02 c0       	mov    ds:0xc0022eca,eax
c00073de:	0f 01 1d c8 2e 02 c0 	lidtd  ds:0xc0022ec8
c00073e5:	c3                   	ret    

c00073e6 <IDT::setup()>:
c00073e6:	57                   	push   edi
c00073e7:	56                   	push   esi
c00073e8:	53                   	push   ebx
c00073e9:	83 ec 10             	sub    esp,0x10
c00073ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073f0:	6a 00                	push   0x0
c00073f2:	68 40 c3 01 c0       	push   0xc001c340
c00073f7:	6a 00                	push   0x0
c00073f9:	53                   	push   ebx
c00073fa:	e8 95 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00073ff:	6a 00                	push   0x0
c0007401:	68 50 c3 01 c0       	push   0xc001c350
c0007406:	6a 01                	push   0x1
c0007408:	53                   	push   ebx
c0007409:	e8 86 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	83 c4 20             	add    esp,0x20
c0007411:	6a 00                	push   0x0
c0007413:	68 5a c3 01 c0       	push   0xc001c35a
c0007418:	6a 02                	push   0x2
c000741a:	53                   	push   ebx
c000741b:	e8 74 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007420:	6a 00                	push   0x0
c0007422:	68 64 c3 01 c0       	push   0xc001c364
c0007427:	6a 03                	push   0x3
c0007429:	53                   	push   ebx
c000742a:	e8 65 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	83 c4 20             	add    esp,0x20
c0007432:	6a 00                	push   0x0
c0007434:	68 6e c3 01 c0       	push   0xc001c36e
c0007439:	6a 04                	push   0x4
c000743b:	53                   	push   ebx
c000743c:	e8 53 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007441:	6a 00                	push   0x0
c0007443:	68 78 c3 01 c0       	push   0xc001c378
c0007448:	6a 05                	push   0x5
c000744a:	53                   	push   ebx
c000744b:	e8 44 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	83 c4 20             	add    esp,0x20
c0007453:	6a 00                	push   0x0
c0007455:	68 82 c3 01 c0       	push   0xc001c382
c000745a:	6a 06                	push   0x6
c000745c:	53                   	push   ebx
c000745d:	e8 32 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007462:	6a 00                	push   0x0
c0007464:	68 8c c3 01 c0       	push   0xc001c38c
c0007469:	6a 07                	push   0x7
c000746b:	53                   	push   ebx
c000746c:	e8 23 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	6a 00                	push   0x0
c0007476:	68 96 c3 01 c0       	push   0xc001c396
c000747b:	6a 08                	push   0x8
c000747d:	53                   	push   ebx
c000747e:	e8 11 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007483:	6a 00                	push   0x0
c0007485:	68 9e c3 01 c0       	push   0xc001c39e
c000748a:	6a 09                	push   0x9
c000748c:	53                   	push   ebx
c000748d:	e8 02 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	83 c4 20             	add    esp,0x20
c0007495:	6a 00                	push   0x0
c0007497:	68 a8 c3 01 c0       	push   0xc001c3a8
c000749c:	6a 0a                	push   0xa
c000749e:	53                   	push   ebx
c000749f:	e8 f0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074a4:	6a 00                	push   0x0
c00074a6:	68 b0 c3 01 c0       	push   0xc001c3b0
c00074ab:	6a 0b                	push   0xb
c00074ad:	53                   	push   ebx
c00074ae:	e8 e1 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	83 c4 20             	add    esp,0x20
c00074b6:	6a 00                	push   0x0
c00074b8:	68 b8 c3 01 c0       	push   0xc001c3b8
c00074bd:	6a 0c                	push   0xc
c00074bf:	53                   	push   ebx
c00074c0:	e8 cf fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074c5:	6a 00                	push   0x0
c00074c7:	68 c0 c3 01 c0       	push   0xc001c3c0
c00074cc:	6a 0d                	push   0xd
c00074ce:	53                   	push   ebx
c00074cf:	e8 c0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	83 c4 20             	add    esp,0x20
c00074d7:	6a 00                	push   0x0
c00074d9:	68 c8 c3 01 c0       	push   0xc001c3c8
c00074de:	6a 0e                	push   0xe
c00074e0:	53                   	push   ebx
c00074e1:	e8 ae fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074e6:	6a 00                	push   0x0
c00074e8:	68 d0 c3 01 c0       	push   0xc001c3d0
c00074ed:	6a 0f                	push   0xf
c00074ef:	53                   	push   ebx
c00074f0:	e8 9f fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	83 c4 20             	add    esp,0x20
c00074f8:	6a 00                	push   0x0
c00074fa:	68 da c3 01 c0       	push   0xc001c3da
c00074ff:	6a 10                	push   0x10
c0007501:	53                   	push   ebx
c0007502:	e8 8d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007507:	6a 00                	push   0x0
c0007509:	68 e4 c3 01 c0       	push   0xc001c3e4
c000750e:	6a 11                	push   0x11
c0007510:	53                   	push   ebx
c0007511:	e8 7e fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	83 c4 20             	add    esp,0x20
c0007519:	6a 00                	push   0x0
c000751b:	68 ee c3 01 c0       	push   0xc001c3ee
c0007520:	6a 12                	push   0x12
c0007522:	53                   	push   ebx
c0007523:	e8 6c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007528:	6a 01                	push   0x1
c000752a:	68 88 c4 01 c0       	push   0xc001c488
c000752f:	6a 60                	push   0x60
c0007531:	53                   	push   ebx
c0007532:	e8 5d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	83 c4 20             	add    esp,0x20
c000753a:	6a 00                	push   0x0
c000753c:	68 8f c4 01 c0       	push   0xc001c48f
c0007541:	6a 20                	push   0x20
c0007543:	53                   	push   ebx
c0007544:	e8 4b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007549:	6a 00                	push   0x0
c000754b:	68 7a c4 01 c0       	push   0xc001c47a
c0007550:	6a 21                	push   0x21
c0007552:	53                   	push   ebx
c0007553:	e8 3c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	83 c4 20             	add    esp,0x20
c000755b:	6a 00                	push   0x0
c000755d:	68 81 c4 01 c0       	push   0xc001c481
c0007562:	6a 22                	push   0x22
c0007564:	53                   	push   ebx
c0007565:	e8 2a fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000756a:	6a 00                	push   0x0
c000756c:	68 f8 c3 01 c0       	push   0xc001c3f8
c0007571:	6a 23                	push   0x23
c0007573:	53                   	push   ebx
c0007574:	e8 1b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	83 c4 20             	add    esp,0x20
c000757c:	6a 00                	push   0x0
c000757e:	68 02 c4 01 c0       	push   0xc001c402
c0007583:	6a 24                	push   0x24
c0007585:	53                   	push   ebx
c0007586:	e8 09 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000758b:	6a 00                	push   0x0
c000758d:	68 0c c4 01 c0       	push   0xc001c40c
c0007592:	6a 25                	push   0x25
c0007594:	53                   	push   ebx
c0007595:	e8 fa fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	83 c4 20             	add    esp,0x20
c000759d:	6a 00                	push   0x0
c000759f:	68 16 c4 01 c0       	push   0xc001c416
c00075a4:	6a 26                	push   0x26
c00075a6:	53                   	push   ebx
c00075a7:	e8 e8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ac:	6a 00                	push   0x0
c00075ae:	68 20 c4 01 c0       	push   0xc001c420
c00075b3:	6a 27                	push   0x27
c00075b5:	53                   	push   ebx
c00075b6:	e8 d9 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	83 c4 20             	add    esp,0x20
c00075be:	6a 00                	push   0x0
c00075c0:	68 2a c4 01 c0       	push   0xc001c42a
c00075c5:	6a 28                	push   0x28
c00075c7:	53                   	push   ebx
c00075c8:	e8 c7 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075cd:	6a 00                	push   0x0
c00075cf:	68 34 c4 01 c0       	push   0xc001c434
c00075d4:	6a 29                	push   0x29
c00075d6:	53                   	push   ebx
c00075d7:	e8 b8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	83 c4 20             	add    esp,0x20
c00075df:	6a 00                	push   0x0
c00075e1:	68 3e c4 01 c0       	push   0xc001c43e
c00075e6:	6a 2a                	push   0x2a
c00075e8:	53                   	push   ebx
c00075e9:	e8 a6 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ee:	6a 00                	push   0x0
c00075f0:	68 48 c4 01 c0       	push   0xc001c448
c00075f5:	6a 2b                	push   0x2b
c00075f7:	53                   	push   ebx
c00075f8:	e8 97 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	83 c4 20             	add    esp,0x20
c0007600:	6a 00                	push   0x0
c0007602:	68 52 c4 01 c0       	push   0xc001c452
c0007607:	6a 2c                	push   0x2c
c0007609:	53                   	push   ebx
c000760a:	e8 85 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 5c c4 01 c0       	push   0xc001c45c
c0007616:	6a 2d                	push   0x2d
c0007618:	53                   	push   ebx
c0007619:	e8 76 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 66 c4 01 c0       	push   0xc001c466
c0007628:	6a 2e                	push   0x2e
c000762a:	53                   	push   ebx
c000762b:	e8 64 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 70 c4 01 c0       	push   0xc001c470
c0007637:	6a 2f                	push   0x2f
c0007639:	53                   	push   ebx
c000763a:	e8 55 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 21 c5 01 c0       	push   0xc001c521
c0007649:	6a 30                	push   0x30
c000764b:	53                   	push   ebx
c000764c:	e8 43 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 2b c5 01 c0       	push   0xc001c52b
c0007658:	6a 31                	push   0x31
c000765a:	53                   	push   ebx
c000765b:	e8 34 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 35 c5 01 c0       	push   0xc001c535
c000766a:	6a 32                	push   0x32
c000766c:	53                   	push   ebx
c000766d:	e8 22 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 3f c5 01 c0       	push   0xc001c53f
c0007679:	6a 33                	push   0x33
c000767b:	53                   	push   ebx
c000767c:	e8 13 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 49 c5 01 c0       	push   0xc001c549
c000768b:	6a 34                	push   0x34
c000768d:	53                   	push   ebx
c000768e:	e8 01 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 53 c5 01 c0       	push   0xc001c553
c000769a:	6a 35                	push   0x35
c000769c:	53                   	push   ebx
c000769d:	e8 f2 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 5d c5 01 c0       	push   0xc001c55d
c00076ac:	6a 36                	push   0x36
c00076ae:	53                   	push   ebx
c00076af:	e8 e0 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 67 c5 01 c0       	push   0xc001c567
c00076bb:	6a 37                	push   0x37
c00076bd:	53                   	push   ebx
c00076be:	e8 d1 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 1c             	add    esp,0x1c
c00076c6:	6a 03                	push   0x3
c00076c8:	6a 02                	push   0x2
c00076ca:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c00076d0:	e8 43 24 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c00076d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076dc:	89 c6                	mov    esi,eax
c00076de:	e8 92 01 00 00       	call   c0007875 <malloc>
c00076e3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ec:	89 c7                	mov    edi,eax
c00076ee:	e8 a1 15 00 00       	call   c0008c94 <TSS::TSS()>
c00076f3:	83 c4 0c             	add    esp,0xc
c00076f6:	68 96 c3 01 c0       	push   0xc001c396
c00076fb:	56                   	push   esi
c00076fc:	57                   	push   edi
c00076fd:	e8 d6 15 00 00       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c0007702:	89 c6                	mov    esi,eax
c0007704:	58                   	pop    eax
c0007705:	5a                   	pop    edx
c0007706:	6a 00                	push   0x0
c0007708:	8d 44 24 14          	lea    eax,[esp+0x14]
c000770c:	50                   	push   eax
c000770d:	e8 d6 fb ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c0007712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007716:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000771b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007722:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772c:	80 ce 05             	or     dh,0x5
c000772f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000773a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000773d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007740:	e8 87 fc ff ff       	call   c00073cc <IDT::flush()>
c0007745:	83 c4 20             	add    esp,0x20
c0007748:	5b                   	pop    ebx
c0007749:	5e                   	pop    esi
c000774a:	5f                   	pop    edi
c000774b:	c3                   	ret    

c000774c <sbrk>:
c000774c:	55                   	push   ebp
c000774d:	57                   	push   edi
c000774e:	56                   	push   esi
c000774f:	53                   	push   ebx
c0007750:	83 ec 1c             	sub    esp,0x1c
c0007753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007757:	85 c0                	test   eax,eax
c0007759:	74 5f                	je     c00077ba <sbrk+0x6e>
c000775b:	78 64                	js     c00077c1 <sbrk+0x75>
c000775d:	8b 15 44 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff44
c0007763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007767:	05 ff 0f 00 00       	add    eax,0xfff
c000776c:	89 c5                	mov    ebp,eax
c000776e:	78 69                	js     c00077d9 <sbrk+0x8d>
c0007770:	c1 fd 0c             	sar    ebp,0xc
c0007773:	bb 00 00 00 00       	mov    ebx,0x0
c0007778:	8b 35 b0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fb0
c000777e:	8b 3d 44 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff44
c0007784:	e8 c8 03 00 00       	call   c0007b51 <Phys::allocatePage()>
c0007789:	68 01 04 00 00       	push   0x401
c000778e:	57                   	push   edi
c000778f:	50                   	push   eax
c0007790:	56                   	push   esi
c0007791:	e8 7e 22 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007796:	81 05 44 ff 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ff44,0x1000
c00077a0:	43                   	inc    ebx
c00077a1:	83 c4 10             	add    esp,0x10
c00077a4:	39 dd                	cmp    ebp,ebx
c00077a6:	75 d0                	jne    c0007778 <sbrk+0x2c>
c00077a8:	0f 20 d8             	mov    eax,cr3
c00077ab:	0f 22 d8             	mov    cr3,eax
c00077ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077b2:	83 c4 1c             	add    esp,0x1c
c00077b5:	5b                   	pop    ebx
c00077b6:	5e                   	pop    esi
c00077b7:	5f                   	pop    edi
c00077b8:	5d                   	pop    ebp
c00077b9:	c3                   	ret    
c00077ba:	a1 44 ff 01 c0       	mov    eax,ds:0xc001ff44
c00077bf:	eb f1                	jmp    c00077b2 <sbrk+0x66>
c00077c1:	83 ec 08             	sub    esp,0x8
c00077c4:	50                   	push   eax
c00077c5:	68 78 de 01 c0       	push   0xc001de78
c00077ca:	e8 3f 2e 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00077cf:	83 c4 10             	add    esp,0x10
c00077d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077d7:	eb d9                	jmp    c00077b2 <sbrk+0x66>
c00077d9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077df:	eb 8f                	jmp    c0007770 <sbrk+0x24>

c00077e1 <mmap>:
c00077e1:	83 ec 18             	sub    esp,0x18
c00077e4:	68 a8 de 01 c0       	push   0xc001dea8
c00077e9:	e8 35 8b 00 00       	call   c0010323 <KePanic(char const*)>
c00077ee:	b8 00 00 00 00       	mov    eax,0x0
c00077f3:	83 c4 1c             	add    esp,0x1c
c00077f6:	c3                   	ret    

c00077f7 <munmap>:
c00077f7:	83 ec 18             	sub    esp,0x18
c00077fa:	68 ad de 01 c0       	push   0xc001dead
c00077ff:	e8 1f 8b 00 00       	call   c0010323 <KePanic(char const*)>
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	83 c4 1c             	add    esp,0x1c
c000780c:	c3                   	ret    

c000780d <liballoc_lock()>:
c000780d:	fa                   	cli    
c000780e:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007814:	b8 00 00 00 00       	mov    eax,0x0
c0007819:	c3                   	ret    

c000781a <liballoc_unlock()>:
c000781a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000781f:	48                   	dec    eax
c0007820:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007825:	75 01                	jne    c0007828 <liballoc_unlock()+0xe>
c0007827:	fb                   	sti    
c0007828:	b8 00 00 00 00       	mov    eax,0x0
c000782d:	c3                   	ret    

c000782e <liballoc_alloc(int)>:
c000782e:	83 ec 10             	sub    esp,0x10
c0007831:	6a 01                	push   0x1
c0007833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007837:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c000783d:	e8 d6 22 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c0007842:	83 c4 1c             	add    esp,0x1c
c0007845:	c3                   	ret    

c0007846 <liballoc_free(void*, int)>:
c0007846:	83 ec 14             	sub    esp,0x14
c0007849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784d:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007853:	e8 12 1f 00 00       	call   c000976a <VAS::freeAllocatedPages(unsigned long)>
c0007858:	b8 00 00 00 00       	mov    eax,0x0
c000785d:	83 c4 1c             	add    esp,0x1c
c0007860:	c3                   	ret    

c0007861 <realloc>:
c0007861:	83 ec 14             	sub    esp,0x14
c0007864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 c0 9c ff ff       	call   c0001531 <dlrealloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <malloc>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 73 97 ff ff       	call   c0000ff4 <dlmalloc>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <free>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 08 94 ff ff       	call   c0000c99 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <rfree>:
c0007895:	83 ec 18             	sub    esp,0x18
c0007898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000789c:	e8 f8 93 ff ff       	call   c0000c99 <dlfree>
c00078a1:	83 c4 1c             	add    esp,0x1c
c00078a4:	c3                   	ret    

c00078a5 <calloc>:
c00078a5:	56                   	push   esi
c00078a6:	53                   	push   ebx
c00078a7:	83 ec 10             	sub    esp,0x10
c00078aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078ae:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b3:	53                   	push   ebx
c00078b4:	e8 bc ff ff ff       	call   c0007875 <malloc>
c00078b9:	89 c6                	mov    esi,eax
c00078bb:	83 c4 0c             	add    esp,0xc
c00078be:	53                   	push   ebx
c00078bf:	6a 00                	push   0x0
c00078c1:	50                   	push   eax
c00078c2:	e8 09 8c ff ff       	call   c00004d0 <memset>
c00078c7:	89 f0                	mov    eax,esi
c00078c9:	83 c4 14             	add    esp,0x14
c00078cc:	5b                   	pop    ebx
c00078cd:	5e                   	pop    esi
c00078ce:	c3                   	ret    

c00078cf <KeEntryPoint>:
c00078cf:	57                   	push   edi
c00078d0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078d5:	56                   	push   esi
c00078d6:	89 fa                	mov    edx,edi
c00078d8:	53                   	push   ebx
c00078d9:	31 f6                	xor    esi,esi
c00078db:	83 ec 2c             	sub    esp,0x2c
c00078de:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e3:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c00078e8:	89 f0                	mov    eax,esi
c00078ea:	ee                   	out    dx,al
c00078eb:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078f0:	b0 80                	mov    al,0x80
c00078f2:	89 da                	mov    edx,ebx
c00078f4:	ee                   	out    dx,al
c00078f5:	b1 03                	mov    cl,0x3
c00078f7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078fc:	88 c8                	mov    al,cl
c00078fe:	ee                   	out    dx,al
c00078ff:	89 f0                	mov    eax,esi
c0007901:	89 fa                	mov    edx,edi
c0007903:	ee                   	out    dx,al
c0007904:	88 c8                	mov    al,cl
c0007906:	89 da                	mov    edx,ebx
c0007908:	ee                   	out    dx,al
c0007909:	b0 c7                	mov    al,0xc7
c000790b:	ba fa 03 00 00       	mov    edx,0x3fa
c0007910:	ee                   	out    dx,al
c0007911:	b0 0b                	mov    al,0xb
c0007913:	ba fc 03 00 00       	mov    edx,0x3fc
c0007918:	ee                   	out    dx,al
c0007919:	68 b4 de 01 c0       	push   0xc001deb4
c000791e:	e8 eb 2c 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007923:	e8 15 83 00 00       	call   c000fc3d <KeDisplaySplashScreen()>
c0007928:	a1 24 05 00 00       	mov    eax,ds:0x524
c000792d:	05 ff 0f 00 00       	add    eax,0xfff
c0007932:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007937:	89 04 24             	mov    DWORD PTR [esp],eax
c000793a:	e8 64 03 00 00       	call   c0007ca3 <Phys::physicalMemorySetup(unsigned int)>
c000793f:	e8 cc 1b 00 00       	call   c0009510 <Virt::virtualMemorySetup()>
c0007944:	58                   	pop    eax
c0007945:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007949:	53                   	push   ebx
c000794a:	e8 99 1e 00 00       	call   c00097e8 <VAS::VAS()>
c000794f:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0007955:	e8 d0 51 01 00       	call   c001cb2a <_init>
c000795a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007961:	e8 0f ff ff ff       	call   c0007875 <malloc>
c0007966:	89 04 24             	mov    DWORD PTR [esp],eax
c0007969:	89 c6                	mov    esi,eax
c000796b:	e8 7c f2 ff ff       	call   c0006bec <Computer::Computer()>
c0007970:	6a 00                	push   0x0
c0007972:	89 35 b8 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb8,esi
c0007978:	6a 00                	push   0x0
c000797a:	6a 00                	push   0x0
c000797c:	56                   	push   esi
c000797d:	e8 10 f6 ff ff       	call   c0006f92 <Computer::open(int, int, void*)>
c0007982:	83 c4 14             	add    esp,0x14
c0007985:	53                   	push   ebx
c0007986:	e8 25 1f 00 00       	call   c00098b0 <VAS::~VAS()>
c000798b:	83 c4 30             	add    esp,0x30
c000798e:	5b                   	pop    ebx
c000798f:	5e                   	pop    esi
c0007990:	5f                   	pop    edi
c0007991:	c3                   	ret    

c0007992 <Phys::allocateDMA(unsigned long)>:
c0007992:	55                   	push   ebp
c0007993:	31 ed                	xor    ebp,ebp
c0007995:	57                   	push   edi
c0007996:	56                   	push   esi
c0007997:	53                   	push   ebx
c0007998:	31 db                	xor    ebx,ebx
c000799a:	83 ec 1c             	sub    esp,0x1c
c000799d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079af:	31 c0                	xor    eax,eax
c00079b1:	c1 ef 0c             	shr    edi,0xc
c00079b4:	eb 19                	jmp    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079b6:	85 c0                	test   eax,eax
c00079b8:	75 06                	jne    c00079c0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079be:	89 dd                	mov    ebp,ebx
c00079c0:	8d 70 01             	lea    esi,[eax+0x1]
c00079c3:	39 f7                	cmp    edi,esi
c00079c5:	74 33                	je     c00079fa <Phys::allocateDMA(unsigned long)+0x68>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	43                   	inc    ebx
c00079ca:	83 fb 0f             	cmp    ebx,0xf
c00079cd:	7f 11                	jg     c00079e0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079cf:	80 bb ec 2e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdd114],0x0
c00079d6:	74 de                	je     c00079b6 <Phys::allocateDMA(unsigned long)+0x24>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	43                   	inc    ebx
c00079db:	83 fb 0f             	cmp    ebx,0xf
c00079de:	7e ef                	jle    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079e0:	83 ec 0c             	sub    esp,0xc
c00079e3:	68 cc de 01 c0       	push   0xc001decc
c00079e8:	e8 36 89 00 00       	call   c0010323 <KePanic(char const*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	31 c0                	xor    eax,eax
c00079f2:	83 c4 1c             	add    esp,0x1c
c00079f5:	5b                   	pop    ebx
c00079f6:	5e                   	pop    esi
c00079f7:	5f                   	pop    edi
c00079f8:	5d                   	pop    ebp
c00079f9:	c3                   	ret    
c00079fa:	89 e9                	mov    ecx,ebp
c00079fc:	c1 f9 04             	sar    ecx,0x4
c00079ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007a03:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007a07:	89 ca                	mov    edx,ecx
c0007a09:	4a                   	dec    edx
c0007a0a:	79 03                	jns    c0007a0f <Phys::allocateDMA(unsigned long)+0x7d>
c0007a0c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a0f:	c1 fa 04             	sar    edx,0x4
c0007a12:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a16:	74 08                	je     c0007a20 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a1c:	31 c0                	xor    eax,eax
c0007a1e:	eb ba                	jmp    c00079da <Phys::allocateDMA(unsigned long)+0x48>
c0007a20:	85 f6                	test   esi,esi
c0007a22:	74 15                	je     c0007a39 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a24:	8d 95 ec 2e 02 c0    	lea    edx,[ebp-0x3ffdd114]
c0007a2a:	8d 84 05 ed 2e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdd113]
c0007a31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a34:	42                   	inc    edx
c0007a35:	39 d0                	cmp    eax,edx
c0007a37:	75 f8                	jne    c0007a31 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a39:	01 3d e4 2e 02 c0    	add    DWORD PTR ds:0xc0022ee4,edi
c0007a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a43:	85 c0                	test   eax,eax
c0007a45:	74 17                	je     c0007a5e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a47:	83 ec 0c             	sub    esp,0xc
c0007a4a:	68 cc de 01 c0       	push   0xc001decc
c0007a4f:	e8 cf 88 00 00       	call   c0010323 <KePanic(char const*)>
c0007a54:	83 c4 10             	add    esp,0x10
c0007a57:	89 f0                	mov    eax,esi
c0007a59:	e9 6b ff ff ff       	jmp    c00079c9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a5e:	c1 e5 0c             	shl    ebp,0xc
c0007a61:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a67:	eb 89                	jmp    c00079f2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a6d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	c1 ea 0c             	shr    edx,0xc
c0007a7a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a7f:	29 15 e4 2e 02 c0    	sub    DWORD PTR ds:0xc0022ee4,edx
c0007a85:	c1 e8 0c             	shr    eax,0xc
c0007a88:	85 d2                	test   edx,edx
c0007a8a:	74 0f                	je     c0007a9b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a8c:	05 ec 2e 02 c0       	add    eax,0xc0022eec
c0007a91:	01 c2                	add    edx,eax
c0007a93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a96:	40                   	inc    eax
c0007a97:	39 d0                	cmp    eax,edx
c0007a99:	75 f8                	jne    c0007a93 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a9b:	c3                   	ret    

c0007a9c <Phys::setPageState(unsigned long, bool)>:
c0007a9c:	56                   	push   esi
c0007a9d:	ba 01 00 00 00       	mov    edx,0x1
c0007aa2:	53                   	push   ebx
c0007aa3:	8b 35 48 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff48
c0007aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab1:	89 c8                	mov    eax,ecx
c0007ab3:	83 e1 07             	and    ecx,0x7
c0007ab6:	c1 e8 03             	shr    eax,0x3
c0007ab9:	d3 e3                	shl    ebx,cl
c0007abb:	01 c6                	add    esi,eax
c0007abd:	d3 e2                	shl    edx,cl
c0007abf:	f7 d2                	not    edx
c0007ac1:	20 16                	and    BYTE PTR [esi],dl
c0007ac3:	03 05 48 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff48
c0007ac9:	08 18                	or     BYTE PTR [eax],bl
c0007acb:	5b                   	pop    ebx
c0007acc:	5e                   	pop    esi
c0007acd:	c3                   	ret    

c0007ace <Phys::getPageState(unsigned long)>:
c0007ace:	53                   	push   ebx
c0007acf:	8b 15 48 ff 01 c0    	mov    edx,DWORD PTR ds:0xc001ff48
c0007ad5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ad9:	31 db                	xor    ebx,ebx
c0007adb:	89 c8                	mov    eax,ecx
c0007add:	83 e1 07             	and    ecx,0x7
c0007ae0:	c1 e8 03             	shr    eax,0x3
c0007ae3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ae6:	89 d8                	mov    eax,ebx
c0007ae8:	5b                   	pop    ebx
c0007ae9:	d3 f8                	sar    eax,cl
c0007aeb:	83 e0 01             	and    eax,0x1
c0007aee:	c3                   	ret    

c0007aef <Phys::freePage(unsigned long)>:
c0007aef:	53                   	push   ebx
c0007af0:	83 ec 08             	sub    esp,0x8
c0007af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007af7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007afd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b03:	76 3a                	jbe    c0007b3f <Phys::freePage(unsigned long)+0x50>
c0007b05:	c1 e8 0c             	shr    eax,0xc
c0007b08:	50                   	push   eax
c0007b09:	89 c3                	mov    ebx,eax
c0007b0b:	e8 be ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b10:	5a                   	pop    edx
c0007b11:	84 c0                	test   al,al
c0007b13:	74 19                	je     c0007b2e <Phys::freePage(unsigned long)+0x3f>
c0007b15:	83 ec 08             	sub    esp,0x8
c0007b18:	ff 0d e4 2e 02 c0    	dec    DWORD PTR ds:0xc0022ee4
c0007b1e:	6a 00                	push   0x0
c0007b20:	53                   	push   ebx
c0007b21:	e8 76 ff ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007b26:	83 c4 10             	add    esp,0x10
c0007b29:	83 c4 08             	add    esp,0x8
c0007b2c:	5b                   	pop    ebx
c0007b2d:	c3                   	ret    
c0007b2e:	c7 44 24 10 71 df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001df71
c0007b36:	83 c4 08             	add    esp,0x8
c0007b39:	5b                   	pop    ebx
c0007b3a:	e9 e4 87 00 00       	jmp    c0010323 <KePanic(char const*)>
c0007b3f:	68 00 10 00 00       	push   0x1000
c0007b44:	50                   	push   eax
c0007b45:	e8 1f ff ff ff       	call   c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b4a:	59                   	pop    ecx
c0007b4b:	5b                   	pop    ebx
c0007b4c:	83 c4 08             	add    esp,0x8
c0007b4f:	5b                   	pop    ebx
c0007b50:	c3                   	ret    

c0007b51 <Phys::allocatePage()>:
c0007b51:	56                   	push   esi
c0007b52:	53                   	push   ebx
c0007b53:	83 ec 14             	sub    esp,0x14
c0007b56:	8b 35 d8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed8
c0007b5c:	89 f3                	mov    ebx,esi
c0007b5e:	eb 0a                	jmp    c0007b6a <Phys::allocatePage()+0x19>
c0007b60:	89 1d d8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed8,ebx
c0007b66:	39 de                	cmp    esi,ebx
c0007b68:	74 24                	je     c0007b8e <Phys::allocatePage()+0x3d>
c0007b6a:	53                   	push   ebx
c0007b6b:	e8 5e ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b70:	5a                   	pop    edx
c0007b71:	84 c0                	test   al,al
c0007b73:	74 5f                	je     c0007bd4 <Phys::allocatePage()+0x83>
c0007b75:	43                   	inc    ebx
c0007b76:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b7c:	75 e2                	jne    c0007b60 <Phys::allocatePage()+0xf>
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c0007b8a:	39 de                	cmp    esi,ebx
c0007b8c:	75 dc                	jne    c0007b6a <Phys::allocatePage()+0x19>
c0007b8e:	83 ec 0c             	sub    esp,0xc
c0007b91:	80 35 fc 2e 02 c0 01 	xor    BYTE PTR ds:0xc0022efc,0x1
c0007b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ba0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007ba6:	50                   	push   eax
c0007ba7:	e8 46 27 00 00       	call   c000a2f2 <VAS::scanForEviction()>
c0007bac:	83 c4 10             	add    esp,0x10
c0007baf:	85 c0                	test   eax,eax
c0007bb1:	75 3f                	jne    c0007bf2 <Phys::allocatePage()+0xa1>
c0007bb3:	83 ec 0c             	sub    esp,0xc
c0007bb6:	68 f4 de 01 c0       	push   0xc001def4
c0007bbb:	e8 63 87 00 00       	call   c0010323 <KePanic(char const*)>
c0007bc0:	83 c4 10             	add    esp,0x10
c0007bc3:	8b 1d d8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed8
c0007bc9:	53                   	push   ebx
c0007bca:	e8 ff fe ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007bcf:	5a                   	pop    edx
c0007bd0:	84 c0                	test   al,al
c0007bd2:	75 a1                	jne    c0007b75 <Phys::allocatePage()+0x24>
c0007bd4:	6a 01                	push   0x1
c0007bd6:	53                   	push   ebx
c0007bd7:	e8 c0 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007bdc:	a1 d8 2e 02 c0       	mov    eax,ds:0xc0022ed8
c0007be1:	5a                   	pop    edx
c0007be2:	ff 05 e4 2e 02 c0    	inc    DWORD PTR ds:0xc0022ee4
c0007be8:	c1 e0 0c             	shl    eax,0xc
c0007beb:	59                   	pop    ecx
c0007bec:	83 c4 14             	add    esp,0x14
c0007bef:	5b                   	pop    ebx
c0007bf0:	5e                   	pop    esi
c0007bf1:	c3                   	ret    
c0007bf2:	83 ec 08             	sub    esp,0x8
c0007bf5:	89 c2                	mov    edx,eax
c0007bf7:	6a 01                	push   0x1
c0007bf9:	c1 ea 0c             	shr    edx,0xc
c0007bfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c00:	52                   	push   edx
c0007c01:	e8 96 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c06:	83 c4 10             	add    esp,0x10
c0007c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c0d:	eb dd                	jmp    c0007bec <Phys::allocatePage()+0x9b>

c0007c0f <Phys::allocateContiguousPages(int)>:
c0007c0f:	57                   	push   edi
c0007c10:	56                   	push   esi
c0007c11:	53                   	push   ebx
c0007c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c16:	fa                   	cli    
c0007c17:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007c1d:	31 db                	xor    ebx,ebx
c0007c1f:	85 db                	test   ebx,ebx
c0007c21:	75 11                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c23:	e8 29 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c28:	83 fe 01             	cmp    esi,0x1
c0007c2b:	89 c7                	mov    edi,eax
c0007c2d:	74 21                	je     c0007c50 <Phys::allocateContiguousPages(int)+0x41>
c0007c2f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c34:	e8 18 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c39:	89 da                	mov    edx,ebx
c0007c3b:	c1 e2 0c             	shl    edx,0xc
c0007c3e:	01 fa                	add    edx,edi
c0007c40:	39 c2                	cmp    edx,eax
c0007c42:	74 20                	je     c0007c64 <Phys::allocateContiguousPages(int)+0x55>
c0007c44:	bb 01 00 00 00       	mov    ebx,0x1
c0007c49:	89 c7                	mov    edi,eax
c0007c4b:	83 fe 01             	cmp    esi,0x1
c0007c4e:	75 e4                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c50:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007c55:	48                   	dec    eax
c0007c56:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007c5b:	75 01                	jne    c0007c5e <Phys::allocateContiguousPages(int)+0x4f>
c0007c5d:	fb                   	sti    
c0007c5e:	89 f8                	mov    eax,edi
c0007c60:	5b                   	pop    ebx
c0007c61:	5e                   	pop    esi
c0007c62:	5f                   	pop    edi
c0007c63:	c3                   	ret    
c0007c64:	43                   	inc    ebx
c0007c65:	39 f3                	cmp    ebx,esi
c0007c67:	75 b6                	jne    c0007c1f <Phys::allocateContiguousPages(int)+0x10>
c0007c69:	eb e5                	jmp    c0007c50 <Phys::allocateContiguousPages(int)+0x41>

c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c6b:	56                   	push   esi
c0007c6c:	53                   	push   ebx
c0007c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c71:	39 1d dc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022edc,ebx
c0007c77:	73 06                	jae    c0007c7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c79:	89 1d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ebx
c0007c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c83:	c1 eb 0c             	shr    ebx,0xc
c0007c86:	c1 e8 0c             	shr    eax,0xc
c0007c89:	39 d8                	cmp    eax,ebx
c0007c8b:	73 13                	jae    c0007ca0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c8d:	6a 00                	push   0x0
c0007c8f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c92:	50                   	push   eax
c0007c93:	e8 04 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c98:	5a                   	pop    edx
c0007c99:	89 f0                	mov    eax,esi
c0007c9b:	59                   	pop    ecx
c0007c9c:	39 f3                	cmp    ebx,esi
c0007c9e:	75 ed                	jne    c0007c8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ca0:	5b                   	pop    ebx
c0007ca1:	5e                   	pop    esi
c0007ca2:	c3                   	ret    

c0007ca3 <Phys::physicalMemorySetup(unsigned int)>:
c0007ca3:	55                   	push   ebp
c0007ca4:	57                   	push   edi
c0007ca5:	56                   	push   esi
c0007ca6:	53                   	push   ebx
c0007ca7:	31 db                	xor    ebx,ebx
c0007ca9:	83 ec 40             	sub    esp,0x40
c0007cac:	6a 10                	push   0x10
c0007cae:	6a 00                	push   0x0
c0007cb0:	68 ec 2e 02 c0       	push   0xc0022eec
c0007cb5:	e8 16 88 ff ff       	call   c00004d0 <memset>
c0007cba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cc3:	05 00 10 00 00       	add    eax,0x1000
c0007cc8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ccc:	5a                   	pop    edx
c0007ccd:	59                   	pop    ecx
c0007cce:	50                   	push   eax
c0007ccf:	68 87 df 01 c0       	push   0xc001df87
c0007cd4:	e8 35 29 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007cd9:	83 c4 10             	add    esp,0x10
c0007cdc:	83 ec 08             	sub    esp,0x8
c0007cdf:	6a 01                	push   0x1
c0007ce1:	53                   	push   ebx
c0007ce2:	43                   	inc    ebx
c0007ce3:	e8 b4 fd ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ce8:	83 c4 10             	add    esp,0x10
c0007ceb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007cf1:	75 e9                	jne    c0007cdc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007cf3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	0f 84 97 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007d02:	89 c7                	mov    edi,eax
c0007d04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d0c:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d12:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d17:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d1b:	eb 15                	jmp    c0007d32 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d21:	83 c3 18             	add    ebx,0x18
c0007d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d2c:	0f 84 77 01 00 00    	je     c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d32:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d43:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d45:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d48:	01 f0                	add    eax,esi
c0007d4a:	55                   	push   ebp
c0007d4b:	11 fa                	adc    edx,edi
c0007d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d51:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d59:	50                   	push   eax
c0007d5a:	56                   	push   esi
c0007d5b:	68 24 df 01 c0       	push   0xc001df24
c0007d60:	e8 a9 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	09 f8                	or     eax,edi
c0007d6e:	0f 85 35 01 00 00    	jne    c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d74:	4d                   	dec    ebp
c0007d75:	75 a6                	jne    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d7b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d80:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d84:	39 f2                	cmp    edx,esi
c0007d86:	89 c1                	mov    ecx,eax
c0007d88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d90:	19 f9                	sbb    ecx,edi
c0007d92:	0f 82 a7 00 00 00    	jb     c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d9c:	89 c1                	mov    ecx,eax
c0007d9e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007da2:	0f 83 97 00 00 00    	jae    c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007da8:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007dad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db5:	39 fa                	cmp    edx,edi
c0007db7:	19 e8                	sbb    eax,ebp
c0007db9:	0f 82 9a 01 00 00    	jb     c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007dbf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dc7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dcd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dd2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dd5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dd9:	31 c0                	xor    eax,eax
c0007ddb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007ddf:	39 fa                	cmp    edx,edi
c0007de1:	89 c1                	mov    ecx,eax
c0007de3:	19 e9                	sbb    ecx,ebp
c0007de5:	0f 83 32 ff ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007deb:	be 00 00 08 00       	mov    esi,0x80000
c0007df0:	51                   	push   ecx
c0007df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007df5:	57                   	push   edi
c0007df6:	56                   	push   esi
c0007df7:	68 48 df 01 c0       	push   0xc001df48
c0007dfc:	e8 0d 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007e01:	5d                   	pop    ebp
c0007e02:	58                   	pop    eax
c0007e03:	57                   	push   edi
c0007e04:	56                   	push   esi
c0007e05:	e8 61 fe ff ff       	call   c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007e0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e12:	83 c4 0c             	add    esp,0xc
c0007e15:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e19:	03 05 e8 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ee8
c0007e1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e26:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e2b:	52                   	push   edx
c0007e2c:	50                   	push   eax
c0007e2d:	68 ad df 01 c0       	push   0xc001dfad
c0007e32:	e8 d7 27 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007e37:	83 c4 10             	add    esp,0x10
c0007e3a:	e9 de fe ff ff       	jmp    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e3f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e4b:	39 ea                	cmp    edx,ebp
c0007e4d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e51:	0f 82 c6 fe ff ff    	jb     c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e57:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e5c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e60:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e64:	0f 83 b3 fe ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e6a:	39 ee                	cmp    esi,ebp
c0007e6c:	89 f8                	mov    eax,edi
c0007e6e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e72:	0f 83 78 ff ff ff    	jae    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e80:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e84:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e88:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e94:	e9 57 ff ff ff       	jmp    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e99:	83 ec 0c             	sub    esp,0xc
c0007e9c:	68 9f df 01 c0       	push   0xc001df9f
c0007ea1:	e8 7d 84 00 00       	call   c0010323 <KePanic(char const*)>
c0007ea6:	83 c4 10             	add    esp,0x10
c0007ea9:	83 ec 08             	sub    esp,0x8
c0007eac:	bb 60 00 00 00       	mov    ebx,0x60
c0007eb1:	6a 00                	push   0x0
c0007eb3:	6a 06                	push   0x6
c0007eb5:	e8 e2 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007eba:	58                   	pop    eax
c0007ebb:	5a                   	pop    edx
c0007ebc:	6a 00                	push   0x0
c0007ebe:	6a 07                	push   0x7
c0007ec0:	e8 d7 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ec5:	83 05 e8 2e 02 c0 02 	add    DWORD PTR ds:0xc0022ee8,0x2
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	83 ec 08             	sub    esp,0x8
c0007ed2:	6a 00                	push   0x0
c0007ed4:	53                   	push   ebx
c0007ed5:	43                   	inc    ebx
c0007ed6:	e8 c1 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ee4:	75 e9                	jne    c0007ecf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ee6:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007eeb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ef0:	83 c0 20             	add    eax,0x20
c0007ef3:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007ef8:	eb 22                	jmp    c0007f1c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007efa:	83 ec 08             	sub    esp,0x8
c0007efd:	6a 00                	push   0x0
c0007eff:	53                   	push   ebx
c0007f00:	43                   	inc    ebx
c0007f01:	e8 96 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f06:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	40                   	inc    eax
c0007f0f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f15:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007f1a:	74 07                	je     c0007f23 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f1c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f21:	7e d7                	jle    c0007efa <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f23:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f28:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f2d:	7f 22                	jg     c0007f51 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f2f:	83 ec 08             	sub    esp,0x8
c0007f32:	6a 00                	push   0x0
c0007f34:	53                   	push   ebx
c0007f35:	43                   	inc    ebx
c0007f36:	e8 61 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f3b:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007f40:	83 c4 10             	add    esp,0x10
c0007f43:	40                   	inc    eax
c0007f44:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f4a:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007f4f:	75 d7                	jne    c0007f28 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f51:	83 c4 3c             	add    esp,0x3c
c0007f54:	5b                   	pop    ebx
c0007f55:	5e                   	pop    esi
c0007f56:	5f                   	pop    edi
c0007f57:	5d                   	pop    ebp
c0007f58:	c3                   	ret    
c0007f59:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f69:	e9 51 fe ff ff       	jmp    c0007dbf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f6e <Pipe::isAtty()>:
c0007f6e:	31 c0                	xor    eax,eax
c0007f70:	c3                   	ret    
c0007f71:	90                   	nop

c0007f72 <Pipe::~Pipe()>:
c0007f72:	83 ec 0c             	sub    esp,0xc
c0007f75:	ba 0c e0 01 c0       	mov    edx,0xc001e00c
c0007f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7e:	89 10                	mov    DWORD PTR [eax],edx
c0007f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f84:	83 ec 0c             	sub    esp,0xc
c0007f87:	50                   	push   eax
c0007f88:	e8 63 11 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c0007f8d:	83 c4 10             	add    esp,0x10
c0007f90:	90                   	nop
c0007f91:	83 c4 0c             	add    esp,0xc
c0007f94:	c3                   	ret    
c0007f95:	90                   	nop

c0007f96 <Pipe::~Pipe()>:
c0007f96:	83 ec 0c             	sub    esp,0xc
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa0:	e8 cd ff ff ff       	call   c0007f72 <Pipe::~Pipe()>
c0007fa5:	83 c4 10             	add    esp,0x10
c0007fa8:	83 ec 08             	sub    esp,0x8
c0007fab:	6a 20                	push   0x20
c0007fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fb1:	e8 62 25 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 c4 0c             	add    esp,0xc
c0007fbc:	c3                   	ret    
c0007fbd:	90                   	nop

c0007fbe <Pipe::write(unsigned long long, void*, int*)>:
c0007fbe:	55                   	push   ebp
c0007fbf:	57                   	push   edi
c0007fc0:	56                   	push   esi
c0007fc1:	53                   	push   ebx
c0007fc2:	83 ec 1c             	sub    esp,0x1c
c0007fc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fcd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fd0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fdb:	89 d8                	mov    eax,ebx
c0007fdd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fe0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fe4:	89 d6                	mov    esi,edx
c0007fe6:	89 d7                	mov    edi,edx
c0007fe8:	c1 ff 1f             	sar    edi,0x1f
c0007feb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fee:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007ff2:	c1 f8 1f             	sar    eax,0x1f
c0007ff5:	39 f3                	cmp    ebx,esi
c0007ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fff:	19 f8                	sbb    eax,edi
c0008001:	b8 01 00 00 00       	mov    eax,0x1
c0008006:	72 6e                	jb     c0008076 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008008:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000800b:	01 d0                	add    eax,edx
c000800d:	99                   	cdq    
c000800e:	f7 fb                	idiv   ebx
c0008010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008014:	29 d3                	sub    ebx,edx
c0008016:	89 d7                	mov    edi,edx
c0008018:	89 de                	mov    esi,ebx
c000801a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000801d:	c1 fb 1f             	sar    ebx,0x1f
c0008020:	39 f2                	cmp    edx,esi
c0008022:	19 d8                	sbb    eax,ebx
c0008024:	b8 00 00 00 00       	mov    eax,0x0
c0008029:	72 04                	jb     c000802f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000802b:	89 d0                	mov    eax,edx
c000802d:	29 f0                	sub    eax,esi
c000802f:	89 d3                	mov    ebx,edx
c0008031:	29 c3                	sub    ebx,eax
c0008033:	74 0b                	je     c0008040 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008035:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008038:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000803c:	89 d9                	mov    ecx,ebx
c000803e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008040:	85 c0                	test   eax,eax
c0008042:	74 0d                	je     c0008051 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008044:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008048:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000804b:	89 de                	mov    esi,ebx
c000804d:	89 c1                	mov    ecx,eax
c000804f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008051:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008054:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008059:	75 10                	jne    c000806b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000805b:	83 ec 0c             	sub    esp,0xc
c000805e:	68 c9 df 01 c0       	push   0xc001dfc9
c0008063:	e8 bb 82 00 00       	call   c0010323 <KePanic(char const*)>
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000806f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008072:	89 08                	mov    DWORD PTR [eax],ecx
c0008074:	31 c0                	xor    eax,eax
c0008076:	83 c4 1c             	add    esp,0x1c
c0008079:	5b                   	pop    ebx
c000807a:	5e                   	pop    esi
c000807b:	5f                   	pop    edi
c000807c:	5d                   	pop    ebp
c000807d:	c3                   	ret    

c000807e <Pipe::read(unsigned long long, void*, int*)>:
c000807e:	55                   	push   ebp
c000807f:	57                   	push   edi
c0008080:	56                   	push   esi
c0008081:	53                   	push   ebx
c0008082:	83 ec 1c             	sub    esp,0x1c
c0008085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000808d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008094:	89 c8                	mov    eax,ecx
c0008096:	99                   	cdq    
c0008097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000809b:	74 24                	je     c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000809d:	39 f9                	cmp    ecx,edi
c000809f:	89 d1                	mov    ecx,edx
c00080a1:	19 f1                	sbb    ecx,esi
c00080a3:	73 1c                	jae    c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080a5:	fa                   	cli    
c00080a6:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00080ac:	e8 8f b7 00 00       	call   c0013840 <schedule()>
c00080b1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00080b6:	48                   	dec    eax
c00080b7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00080bc:	75 d3                	jne    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080be:	fb                   	sti    
c00080bf:	eb d0                	jmp    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080c1:	39 f8                	cmp    eax,edi
c00080c3:	89 d1                	mov    ecx,edx
c00080c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080c8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080cc:	19 f1                	sbb    ecx,esi
c00080ce:	73 07                	jae    c00080d7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080dd:	29 f7                	sub    edi,esi
c00080df:	89 f8                	mov    eax,edi
c00080e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080e5:	99                   	cdq    
c00080e6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080ed:	19 d0                	sbb    eax,edx
c00080ef:	73 07                	jae    c00080f8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080f8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080fb:	89 ea                	mov    edx,ebp
c00080fd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008106:	74 0d                	je     c0008115 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008108:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000810b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000810f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008113:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008115:	85 d2                	test   edx,edx
c0008117:	74 11                	je     c000812a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008120:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008124:	89 d1                	mov    ecx,edx
c0008126:	89 c7                	mov    edi,eax
c0008128:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000812a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000812d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008130:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008133:	99                   	cdq    
c0008134:	89 f7                	mov    edi,esi
c0008136:	03 04 24             	add    eax,DWORD PTR [esp]
c0008139:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000813d:	c1 ff 1f             	sar    edi,0x1f
c0008140:	57                   	push   edi
c0008141:	56                   	push   esi
c0008142:	52                   	push   edx
c0008143:	50                   	push   eax
c0008144:	e8 c7 48 01 00       	call   c001ca10 <__umoddi3>
c0008149:	83 c4 10             	add    esp,0x10
c000814c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000814f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008154:	75 10                	jne    c0008166 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008156:	83 ec 0c             	sub    esp,0xc
c0008159:	68 e6 df 01 c0       	push   0xc001dfe6
c000815e:	e8 c0 81 00 00       	call   c0010323 <KePanic(char const*)>
c0008163:	83 c4 10             	add    esp,0x10
c0008166:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000816a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000816d:	89 10                	mov    DWORD PTR [eax],edx
c000816f:	83 c4 1c             	add    esp,0x1c
c0008172:	31 c0                	xor    eax,eax
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    
c0008179:	90                   	nop

c000817a <Pipe::Pipe(int)>:
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008181:	83 ec 08             	sub    esp,0x8
c0008184:	6a 00                	push   0x0
c0008186:	50                   	push   eax
c0008187:	e8 82 0d 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	ba 0c e0 01 c0       	mov    edx,0xc001e00c
c0008194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008198:	89 10                	mov    DWORD PTR [eax],edx
c000819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081bf:	83 ec 0c             	sub    esp,0xc
c00081c2:	50                   	push   eax
c00081c3:	e8 ad f6 ff ff       	call   c0007875 <malloc>
c00081c8:	83 c4 10             	add    esp,0x10
c00081cb:	89 c2                	mov    edx,eax
c00081cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081dc:	90                   	nop
c00081dd:	83 c4 0c             	add    esp,0xc
c00081e0:	c3                   	ret    
c00081e1:	90                   	nop

c00081e2 <VgaText::isAtty()>:
c00081e2:	b0 01                	mov    al,0x1
c00081e4:	c3                   	ret    
c00081e5:	90                   	nop

c00081e6 <VgaText::~VgaText()>:
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c00081ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f2:	89 10                	mov    DWORD PTR [eax],edx
c00081f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f8:	83 ec 0c             	sub    esp,0xc
c00081fb:	50                   	push   eax
c00081fc:	e8 ef 0e 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c0008201:	83 c4 10             	add    esp,0x10
c0008204:	90                   	nop
c0008205:	83 c4 0c             	add    esp,0xc
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <VgaText::~VgaText()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	83 ec 0c             	sub    esp,0xc
c0008210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008214:	e8 cd ff ff ff       	call   c00081e6 <VgaText::~VgaText()>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	83 ec 08             	sub    esp,0x8
c000821f:	68 84 01 00 00       	push   0x184
c0008224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008228:	e8 eb 22 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	83 c4 0c             	add    esp,0xc
c0008233:	c3                   	ret    

c0008234 <VgaText::read(unsigned long long, void*, int*)>:
c0008234:	83 ec 10             	sub    esp,0x10
c0008237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000823b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000823f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008243:	e8 24 46 00 00       	call   c000c86c <readKeyboard(VgaText*, char*, unsigned long)>
c0008248:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000824c:	89 02                	mov    DWORD PTR [edx],eax
c000824e:	31 c0                	xor    eax,eax
c0008250:	83 c4 1c             	add    esp,0x1c
c0008253:	c3                   	ret    

c0008254 <setTerminalScrollLock(bool)>:
c0008254:	c3                   	ret    

c0008255 <doTerminalCycle()>:
c0008255:	c3                   	ret    

c0008256 <addToTerminalCycle(VgaText*)>:
c0008256:	c3                   	ret    

c0008257 <scrollTerminalScrollLock(int)>:
c0008257:	c3                   	ret    

c0008258 <VgaText::updateTitle()>:
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::load()>:
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <VgaText::updateCursor()>:
c000825c:	83 ec 14             	sub    esp,0x14
c000825f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008263:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008266:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008269:	e8 ae e1 00 00       	call   c001641c <HalConsoleCursorUpdate(int, int)>
c000826e:	83 c4 1c             	add    esp,0x1c
c0008271:	c3                   	ret    

c0008272 <VgaText::doANSI_SGR(int)>:
c0008272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	85 d2                	test   edx,edx
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x17>
c000827e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008281:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008284:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008287:	eb 59                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 07             	cmp    edx,0x7
c000828c:	75 0b                	jne    c0008299 <VgaText::doANSI_SGR(int)+0x27>
c000828e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008291:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008294:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008297:	eb 49                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008299:	83 fa 1b             	cmp    edx,0x1b
c000829c:	74 e0                	je     c000827e <VgaText::doANSI_SGR(int)+0xc>
c000829e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082a1:	83 f9 07             	cmp    ecx,0x7
c00082a4:	77 09                	ja     c00082af <VgaText::doANSI_SGR(int)+0x3d>
c00082a6:	8b 14 8d 80 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0080]
c00082ad:	eb 20                	jmp    c00082cf <VgaText::doANSI_SGR(int)+0x5d>
c00082af:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082b2:	83 f9 07             	cmp    ecx,0x7
c00082b5:	77 09                	ja     c00082c0 <VgaText::doANSI_SGR(int)+0x4e>
c00082b7:	8b 14 8d 80 ff 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0080]
c00082be:	eb 22                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c00082c0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082c3:	83 f9 07             	cmp    ecx,0x7
c00082c6:	77 0b                	ja     c00082d3 <VgaText::doANSI_SGR(int)+0x61>
c00082c8:	8b 14 95 38 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe01c8]
c00082cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082d2:	c3                   	ret    
c00082d3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082d6:	83 f9 07             	cmp    ecx,0x7
c00082d9:	77 0a                	ja     c00082e5 <VgaText::doANSI_SGR(int)+0x73>
c00082db:	8b 14 95 10 fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe01f0]
c00082e2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e5:	c3                   	ret    

c00082e6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082f1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082fe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008301:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008304:	c3                   	ret    
c0008305:	90                   	nop

c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008306:	53                   	push   ebx
c0008307:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000830b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000830f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008313:	51                   	push   ecx
c0008314:	e8 cd ff ff ff       	call   c00082e6 <VgaText::setDefaultBgColour(VgaColour)>
c0008319:	58                   	pop    eax
c000831a:	5a                   	pop    edx
c000831b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000831f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008323:	5b                   	pop    ebx
c0008324:	eb d0                	jmp    c00082f6 <VgaText::setDefaultFgColour(VgaColour)>

c0008326 <VgaText::setTitleTextColour(VgaColour)>:
c0008326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000832a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008331:	c3                   	ret    

c0008332 <VgaText::setTitleColour(VgaColour)>:
c0008332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000833a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000833d:	c3                   	ret    

c000833e <VgaText::setTitle(char*)>:
c000833e:	c3                   	ret    
c000833f:	90                   	nop

c0008340 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008340:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008344:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008349:	83 e0 0f             	and    eax,0xf
c000834c:	c1 e2 04             	shl    edx,0x4
c000834f:	09 d0                	or     eax,edx
c0008351:	c3                   	ret    

c0008352 <VgaText::scrollScreen()>:
c0008352:	55                   	push   ebp
c0008353:	b9 01 00 00 00       	mov    ecx,0x1
c0008358:	57                   	push   edi
c0008359:	56                   	push   esi
c000835a:	53                   	push   ebx
c000835b:	83 ec 0c             	sub    esp,0xc
c000835e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008362:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008368:	31 ff                	xor    edi,edi
c000836a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000836d:	83 f9 18             	cmp    ecx,0x18
c0008370:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008373:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000837a:	75 27                	jne    c00083a3 <VgaText::scrollScreen()+0x51>
c000837c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000837f:	01 f5                	add    ebp,esi
c0008381:	f7 c7 01 00 00 00    	test   edi,0x1
c0008387:	74 16                	je     c000839f <VgaText::scrollScreen()+0x4d>
c0008389:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000838d:	50                   	push   eax
c000838e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008392:	50                   	push   eax
c0008393:	e8 a8 ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008398:	5a                   	pop    edx
c0008399:	5a                   	pop    edx
c000839a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000839d:	eb 04                	jmp    c00083a3 <VgaText::scrollScreen()+0x51>
c000839f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00083a3:	47                   	inc    edi
c00083a4:	46                   	inc    esi
c00083a5:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083ab:	75 bd                	jne    c000836a <VgaText::scrollScreen()+0x18>
c00083ad:	41                   	inc    ecx
c00083ae:	83 f9 19             	cmp    ecx,0x19
c00083b1:	75 af                	jne    c0008362 <VgaText::scrollScreen()+0x10>
c00083b3:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c00083b9:	75 1f                	jne    c00083da <VgaText::scrollScreen()+0x88>
c00083bb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083bf:	74 05                	je     c00083c6 <VgaText::scrollScreen()+0x74>
c00083c1:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083c4:	eb 14                	jmp    c00083da <VgaText::scrollScreen()+0x88>
c00083c6:	50                   	push   eax
c00083c7:	50                   	push   eax
c00083c8:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083cc:	50                   	push   eax
c00083cd:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083d1:	50                   	push   eax
c00083d2:	e8 d1 de 00 00       	call   c00162a8 <HalConsoleScroll(int, int)>
c00083d7:	83 c4 10             	add    esp,0x10
c00083da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083de:	83 c4 0c             	add    esp,0xc
c00083e1:	5b                   	pop    ebx
c00083e2:	5e                   	pop    esi
c00083e3:	5f                   	pop    edi
c00083e4:	5d                   	pop    ebp
c00083e5:	e9 72 fe ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00083ea <VgaText::combineCharAndColour(char, unsigned char)>:
c00083ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083ef:	c1 e0 08             	shl    eax,0x8
c00083f2:	89 c2                	mov    edx,eax
c00083f4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083f9:	09 d0                	or     eax,edx
c00083fb:	c3                   	ret    

c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083fc:	55                   	push   ebp
c00083fd:	57                   	push   edi
c00083fe:	56                   	push   esi
c00083ff:	53                   	push   ebx
c0008400:	83 ec 1c             	sub    esp,0x1c
c0008403:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008407:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000840f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008413:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008417:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000841b:	0f b6 c3             	movzx  eax,bl
c000841e:	50                   	push   eax
c000841f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008424:	50                   	push   eax
c0008425:	e8 16 ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c000842a:	5a                   	pop    edx
c000842b:	0f b6 c0             	movzx  eax,al
c000842e:	59                   	pop    ecx
c000842f:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008434:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008438:	50                   	push   eax
c0008439:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000843d:	e8 a8 ff ff ff       	call   c00083ea <VgaText::combineCharAndColour(char, unsigned char)>
c0008442:	5a                   	pop    edx
c0008443:	66 6b d7 50          	imul   dx,di,0x50
c0008447:	59                   	pop    ecx
c0008448:	01 f2                	add    edx,esi
c000844a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000844d:	0f b7 d2             	movzx  edx,dx
c0008450:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008454:	39 2d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebp
c000845a:	75 28                	jne    c0008484 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000845c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008460:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008464:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008468:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000846c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008478:	83 c4 1c             	add    esp,0x1c
c000847b:	5b                   	pop    ebx
c000847c:	5e                   	pop    esi
c000847d:	5f                   	pop    edi
c000847e:	5d                   	pop    ebp
c000847f:	e9 2c df 00 00       	jmp    c00163b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008484:	83 c4 1c             	add    esp,0x1c
c0008487:	5b                   	pop    ebx
c0008488:	5e                   	pop    esi
c0008489:	5f                   	pop    edi
c000848a:	5d                   	pop    ebp
c000848b:	c3                   	ret    

c000848c <VgaText::getCursorX()>:
c000848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008490:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008493:	c3                   	ret    

c0008494 <VgaText::getCursorY()>:
c0008494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008498:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000849b:	c3                   	ret    

c000849c <VgaText::setCursor(int, int)>:
c000849c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084a4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084ae:	e9 a9 fd ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00084b3 <setActiveTerminal(VgaText*)>:
c00084b3:	53                   	push   ebx
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084bb:	85 db                	test   ebx,ebx
c00084bd:	75 11                	jne    c00084d0 <setActiveTerminal(VgaText*)+0x1d>
c00084bf:	c7 44 24 10 20 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e020
c00084c7:	83 c4 08             	add    esp,0x8
c00084ca:	5b                   	pop    ebx
c00084cb:	e9 53 7e 00 00       	jmp    c0010323 <KePanic(char const*)>
c00084d0:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00084d5:	85 c0                	test   eax,eax
c00084d7:	74 0c                	je     c00084e5 <setActiveTerminal(VgaText*)+0x32>
c00084d9:	83 ec 0c             	sub    esp,0xc
c00084dc:	50                   	push   eax
c00084dd:	e8 7a fd ff ff       	call   c000825c <VgaText::updateCursor()>
c00084e2:	83 c4 10             	add    esp,0x10
c00084e5:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c00084eb:	50                   	push   eax
c00084ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084f2:	53                   	push   ebx
c00084f3:	e8 a4 ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c00084f8:	83 c4 18             	add    esp,0x18
c00084fb:	5b                   	pop    ebx
c00084fc:	c3                   	ret    
c00084fd:	90                   	nop

c00084fe <VgaText::clearScreen()>:
c00084fe:	57                   	push   edi
c00084ff:	56                   	push   esi
c0008500:	31 f6                	xor    esi,esi
c0008502:	53                   	push   ebx
c0008503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008507:	52                   	push   edx
c0008508:	6a 00                	push   0x0
c000850a:	6a 00                	push   0x0
c000850c:	53                   	push   ebx
c000850d:	e8 8a ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008512:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008519:	83 c4 10             	add    esp,0x10
c000851c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000851f:	7e 20                	jle    c0008541 <VgaText::clearScreen()+0x43>
c0008521:	31 ff                	xor    edi,edi
c0008523:	50                   	push   eax
c0008524:	50                   	push   eax
c0008525:	56                   	push   esi
c0008526:	57                   	push   edi
c0008527:	47                   	inc    edi
c0008528:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000852b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000852e:	6a 20                	push   0x20
c0008530:	53                   	push   ebx
c0008531:	e8 c6 fe ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008536:	83 c4 20             	add    esp,0x20
c0008539:	83 ff 50             	cmp    edi,0x50
c000853c:	75 e5                	jne    c0008523 <VgaText::clearScreen()+0x25>
c000853e:	46                   	inc    esi
c000853f:	eb db                	jmp    c000851c <VgaText::clearScreen()+0x1e>
c0008541:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008548:	5b                   	pop    ebx
c0008549:	5e                   	pop    esi
c000854a:	5f                   	pop    edi
c000854b:	c3                   	ret    

c000854c <VgaText::setCursorX(int)>:
c000854c:	83 ec 10             	sub    esp,0x10
c000854f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008553:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000855a:	50                   	push   eax
c000855b:	e8 3c ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008560:	83 c4 1c             	add    esp,0x1c
c0008563:	c3                   	ret    

c0008564 <VgaText::setCursorY(int)>:
c0008564:	83 ec 10             	sub    esp,0x10
c0008567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000856b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000856f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008572:	50                   	push   eax
c0008573:	e8 24 ff ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008578:	83 c4 1c             	add    esp,0x1c
c000857b:	c3                   	ret    

c000857c <VgaText::incrementCursor(bool)>:
c000857c:	56                   	push   esi
c000857d:	53                   	push   ebx
c000857e:	51                   	push   ecx
c000857f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008583:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008587:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000858a:	40                   	inc    eax
c000858b:	83 f8 50             	cmp    eax,0x50
c000858e:	74 05                	je     c0008595 <VgaText::incrementCursor(bool)+0x19>
c0008590:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008593:	eb 24                	jmp    c00085b9 <VgaText::incrementCursor(bool)+0x3d>
c0008595:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008598:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000859f:	8d 50 01             	lea    edx,[eax+0x1]
c00085a2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085a5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a8:	75 0f                	jne    c00085b9 <VgaText::incrementCursor(bool)+0x3d>
c00085aa:	83 ec 0c             	sub    esp,0xc
c00085ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085b0:	53                   	push   ebx
c00085b1:	e8 9c fd ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00085b6:	83 c4 10             	add    esp,0x10
c00085b9:	89 f0                	mov    eax,esi
c00085bb:	84 c0                	test   al,al
c00085bd:	74 0c                	je     c00085cb <VgaText::incrementCursor(bool)+0x4f>
c00085bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085c3:	5a                   	pop    edx
c00085c4:	5b                   	pop    ebx
c00085c5:	5e                   	pop    esi
c00085c6:	e9 91 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085cb:	58                   	pop    eax
c00085cc:	5b                   	pop    ebx
c00085cd:	5e                   	pop    esi
c00085ce:	c3                   	ret    
c00085cf:	90                   	nop

c00085d0 <VgaText::decrementCursor(bool)>:
c00085d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085db:	85 c0                	test   eax,eax
c00085dd:	74 04                	je     c00085e3 <VgaText::decrementCursor(bool)+0x13>
c00085df:	48                   	dec    eax
c00085e0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085e3:	84 c9                	test   cl,cl
c00085e5:	74 09                	je     c00085f0 <VgaText::decrementCursor(bool)+0x20>
c00085e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085eb:	e9 6c fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008602:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008606:	3c 07                	cmp    al,0x7
c0008608:	75 21                	jne    c000862b <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000860a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008612:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000861a:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008622:	83 c4 08             	add    esp,0x8
c0008625:	5b                   	pop    ebx
c0008626:	e9 38 2e 00 00       	jmp    c000b463 <Krnl::beep(int, int, bool)>
c000862b:	3c 0d                	cmp    al,0xd
c000862d:	75 09                	jne    c0008638 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000862f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008636:	eb 2c                	jmp    c0008664 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008638:	3c 0a                	cmp    al,0xa
c000863a:	75 31                	jne    c000866d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000863c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000863f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008646:	8d 50 01             	lea    edx,[eax+0x1]
c0008649:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000864c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000864f:	75 0f                	jne    c0008660 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008651:	83 ec 0c             	sub    esp,0xc
c0008654:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008657:	53                   	push   ebx
c0008658:	e8 f5 fc ff ff       	call   c0008352 <VgaText::scrollScreen()>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008664:	83 c4 08             	add    esp,0x8
c0008667:	5b                   	pop    ebx
c0008668:	e9 ef fb ff ff       	jmp    c000825c <VgaText::updateCursor()>
c000866d:	3c 08                	cmp    al,0x8
c000866f:	75 25                	jne    c0008696 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008671:	50                   	push   eax
c0008672:	50                   	push   eax
c0008673:	6a 01                	push   0x1
c0008675:	53                   	push   ebx
c0008676:	e8 55 ff ff ff       	call   c00085d0 <VgaText::decrementCursor(bool)>
c000867b:	5a                   	pop    edx
c000867c:	59                   	pop    ecx
c000867d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008680:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008683:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008686:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008689:	6a 20                	push   0x20
c000868b:	53                   	push   ebx
c000868c:	e8 6b fd ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008691:	83 c4 28             	add    esp,0x28
c0008694:	5b                   	pop    ebx
c0008695:	c3                   	ret    
c0008696:	83 ec 08             	sub    esp,0x8
c0008699:	0f be c0             	movsx  eax,al
c000869c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000869f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086a2:	51                   	push   ecx
c00086a3:	52                   	push   edx
c00086a4:	50                   	push   eax
c00086a5:	53                   	push   ebx
c00086a6:	e8 51 fd ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086ab:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086af:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086b7:	83 c4 28             	add    esp,0x28
c00086ba:	5b                   	pop    ebx
c00086bb:	e9 bc fe ff ff       	jmp    c000857c <VgaText::incrementCursor(bool)>

c00086c0 <VgaText::putchar(char)>:
c00086c0:	56                   	push   esi
c00086c1:	53                   	push   ebx
c00086c2:	83 ec 14             	sub    esp,0x14
c00086c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086cd:	3c 5b                	cmp    al,0x5b
c00086cf:	75 18                	jne    c00086e9 <VgaText::putchar(char)+0x29>
c00086d1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086d5:	74 1f                	je     c00086f6 <VgaText::putchar(char)+0x36>
c00086d7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086dd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086e4:	e9 bd 00 00 00       	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c00086e9:	3c 1b                	cmp    al,0x1b
c00086eb:	75 09                	jne    c00086f6 <VgaText::putchar(char)+0x36>
c00086ed:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086f1:	e9 b0 00 00 00       	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c00086f6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086f9:	84 c9                	test   cl,cl
c00086fb:	0f 84 92 00 00 00    	je     c0008793 <VgaText::putchar(char)+0xd3>
c0008701:	8d 50 c0             	lea    edx,[eax-0x40]
c0008704:	80 fa 3e             	cmp    dl,0x3e
c0008707:	77 76                	ja     c000877f <VgaText::putchar(char)+0xbf>
c0008709:	3c 6d                	cmp    al,0x6d
c000870b:	75 47                	jne    c0008754 <VgaText::putchar(char)+0x94>
c000870d:	31 f6                	xor    esi,esi
c000870f:	31 d2                	xor    edx,edx
c0008711:	31 c0                	xor    eax,eax
c0008713:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008716:	7e 2d                	jle    c0008745 <VgaText::putchar(char)+0x85>
c0008718:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000871d:	80 fa 3b             	cmp    dl,0x3b
c0008720:	75 17                	jne    c0008739 <VgaText::putchar(char)+0x79>
c0008722:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008726:	50                   	push   eax
c0008727:	53                   	push   ebx
c0008728:	e8 45 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c000872d:	59                   	pop    ecx
c000872e:	31 d2                	xor    edx,edx
c0008730:	58                   	pop    eax
c0008731:	31 c0                	xor    eax,eax
c0008733:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008737:	eb 09                	jmp    c0008742 <VgaText::putchar(char)+0x82>
c0008739:	6b c0 0a             	imul   eax,eax,0xa
c000873c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008740:	88 ca                	mov    dl,cl
c0008742:	46                   	inc    esi
c0008743:	eb ce                	jmp    c0008713 <VgaText::putchar(char)+0x53>
c0008745:	84 d2                	test   dl,dl
c0008747:	74 2e                	je     c0008777 <VgaText::putchar(char)+0xb7>
c0008749:	50                   	push   eax
c000874a:	53                   	push   ebx
c000874b:	e8 22 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c0008750:	58                   	pop    eax
c0008751:	5a                   	pop    edx
c0008752:	eb 23                	jmp    c0008777 <VgaText::putchar(char)+0xb7>
c0008754:	3c 4a                	cmp    al,0x4a
c0008756:	75 1f                	jne    c0008777 <VgaText::putchar(char)+0xb7>
c0008758:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000875c:	75 19                	jne    c0008777 <VgaText::putchar(char)+0xb7>
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	53                   	push   ebx
c0008762:	e8 97 fd ff ff       	call   c00084fe <VgaText::clearScreen()>
c0008767:	83 c4 0c             	add    esp,0xc
c000876a:	6a 00                	push   0x0
c000876c:	6a 00                	push   0x0
c000876e:	53                   	push   ebx
c000876f:	e8 28 fd ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000877d:	eb 27                	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c000877f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008782:	83 fa 0e             	cmp    edx,0xe
c0008785:	7f 1f                	jg     c00087a6 <VgaText::putchar(char)+0xe6>
c0008787:	8d 4a 01             	lea    ecx,[edx+0x1]
c000878a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000878d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008791:	eb 13                	jmp    c00087a6 <VgaText::putchar(char)+0xe6>
c0008793:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008796:	0f be c0             	movsx  eax,al
c0008799:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000879c:	50                   	push   eax
c000879d:	53                   	push   ebx
c000879e:	e8 4f fe ff ff       	call   c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c00087a3:	83 c4 10             	add    esp,0x10
c00087a6:	83 c4 14             	add    esp,0x14
c00087a9:	5b                   	pop    ebx
c00087aa:	5e                   	pop    esi
c00087ab:	c3                   	ret    

c00087ac <VgaText::putx(unsigned int)>:
c00087ac:	57                   	push   edi
c00087ad:	b9 11 00 00 00       	mov    ecx,0x11
c00087b2:	56                   	push   esi
c00087b3:	be 2e e0 01 c0       	mov    esi,0xc001e02e
c00087b8:	53                   	push   ebx
c00087b9:	83 ec 20             	sub    esp,0x20
c00087bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087c0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087c4:	fc                   	cld    
c00087c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087c7:	be 08 00 00 00       	mov    esi,0x8
c00087cc:	50                   	push   eax
c00087cd:	50                   	push   eax
c00087ce:	89 d8                	mov    eax,ebx
c00087d0:	c1 e3 04             	shl    ebx,0x4
c00087d3:	c1 e8 1c             	shr    eax,0x1c
c00087d6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087db:	50                   	push   eax
c00087dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087e0:	e8 db fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	4e                   	dec    esi
c00087e9:	75 e1                	jne    c00087cc <VgaText::putx(unsigned int)+0x20>
c00087eb:	83 c4 20             	add    esp,0x20
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::puts(char const*)>:
c00087f2:	53                   	push   ebx
c00087f3:	83 ec 08             	sub    esp,0x8
c00087f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087fd:	84 c0                	test   al,al
c00087ff:	74 12                	je     c0008813 <VgaText::puts(char const*)+0x21>
c0008801:	43                   	inc    ebx
c0008802:	51                   	push   ecx
c0008803:	51                   	push   ecx
c0008804:	50                   	push   eax
c0008805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008809:	e8 b2 fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c000880e:	83 c4 10             	add    esp,0x10
c0008811:	eb e7                	jmp    c00087fa <VgaText::puts(char const*)+0x8>
c0008813:	83 c4 08             	add    esp,0x8
c0008816:	5b                   	pop    ebx
c0008817:	c3                   	ret    

c0008818 <VgaText::write(unsigned long long, void*, int*)>:
c0008818:	55                   	push   ebp
c0008819:	57                   	push   edi
c000881a:	56                   	push   esi
c000881b:	53                   	push   ebx
c000881c:	83 ec 0c             	sub    esp,0xc
c000881f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008823:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008827:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000882b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008832:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008835:	39 eb                	cmp    ebx,ebp
c0008837:	74 13                	je     c000884c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008839:	43                   	inc    ebx
c000883a:	50                   	push   eax
c000883b:	50                   	push   eax
c000883c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008840:	50                   	push   eax
c0008841:	56                   	push   esi
c0008842:	e8 79 fe ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008847:	83 c4 10             	add    esp,0x10
c000884a:	eb e9                	jmp    c0008835 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000884c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008857:	89 38                	mov    DWORD PTR [eax],edi
c0008859:	83 c4 0c             	add    esp,0xc
c000885c:	31 c0                	xor    eax,eax
c000885e:	5b                   	pop    ebx
c000885f:	5e                   	pop    esi
c0008860:	5f                   	pop    edi
c0008861:	5d                   	pop    ebp
c0008862:	c3                   	ret    
c0008863:	90                   	nop

c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008864:	55                   	push   ebp
c0008865:	57                   	push   edi
c0008866:	56                   	push   esi
c0008867:	53                   	push   ebx
c0008868:	83 ec 0c             	sub    esp,0xc
c000886b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000886f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008874:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000887b:	50                   	push   eax
c000887c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008881:	50                   	push   eax
c0008882:	e8 b9 fa ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008887:	5a                   	pop    edx
c0008888:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000888d:	59                   	pop    ecx
c000888e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008891:	89 c5                	mov    ebp,eax
c0008893:	0f b7 f6             	movzx  esi,si
c0008896:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000889a:	01 f6                	add    esi,esi
c000889c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000889f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088a2:	84 c0                	test   al,al
c00088a4:	0f 84 f4 00 00 00    	je     c000899e <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088aa:	3c 0d                	cmp    al,0xd
c00088ac:	75 0c                	jne    c00088ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b5:	e9 de 00 00 00       	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ba:	3c 0a                	cmp    al,0xa
c00088bc:	75 45                	jne    c0008903 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088c1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c8:	8d 48 01             	lea    ecx,[eax+0x1]
c00088cb:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088ce:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088d1:	75 0f                	jne    c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088d3:	83 ec 0c             	sub    esp,0xc
c00088d6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d9:	53                   	push   ebx
c00088da:	e8 73 fa ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00088df:	83 c4 10             	add    esp,0x10
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 71 f9 ff ff       	call   c000825c <VgaText::updateCursor()>
c00088eb:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088f0:	83 c4 10             	add    esp,0x10
c00088f3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088f6:	0f b7 f6             	movzx  esi,si
c00088f9:	01 f6                	add    esi,esi
c00088fb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088fe:	e9 95 00 00 00       	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008903:	3c 08                	cmp    al,0x8
c0008905:	75 35                	jne    c000893c <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008907:	51                   	push   ecx
c0008908:	51                   	push   ecx
c0008909:	6a 01                	push   0x1
c000890b:	53                   	push   ebx
c000890c:	e8 bf fc ff ff       	call   c00085d0 <VgaText::decrementCursor(bool)>
c0008911:	5e                   	pop    esi
c0008912:	58                   	pop    eax
c0008913:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008916:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008919:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891f:	6a 20                	push   0x20
c0008921:	53                   	push   ebx
c0008922:	e8 d5 fa ff ff       	call   c00083fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008927:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000892c:	83 c4 20             	add    esp,0x20
c000892f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008932:	0f b7 f6             	movzx  esi,si
c0008935:	01 f6                	add    esi,esi
c0008937:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000893a:	eb 5c                	jmp    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000893c:	52                   	push   edx
c000893d:	52                   	push   edx
c000893e:	89 ea                	mov    edx,ebp
c0008940:	0f b6 ca             	movzx  ecx,dl
c0008943:	51                   	push   ecx
c0008944:	50                   	push   eax
c0008945:	e8 a0 fa ff ff       	call   c00083ea <VgaText::combineCharAndColour(char, unsigned char)>
c000894a:	83 c4 10             	add    esp,0x10
c000894d:	66 89 06             	mov    WORD PTR [esi],ax
c0008950:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c0008956:	75 1d                	jne    c0008975 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008958:	83 ec 0c             	sub    esp,0xc
c000895b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008965:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008969:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000896c:	50                   	push   eax
c000896d:	e8 3e da 00 00       	call   c00163b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008972:	83 c4 20             	add    esp,0x20
c0008975:	83 c6 02             	add    esi,0x2
c0008978:	50                   	push   eax
c0008979:	50                   	push   eax
c000897a:	6a 00                	push   0x0
c000897c:	53                   	push   ebx
c000897d:	e8 fa fb ff ff       	call   c000857c <VgaText::incrementCursor(bool)>
c0008982:	83 c4 10             	add    esp,0x10
c0008985:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008989:	75 0d                	jne    c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000898b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008990:	0f b7 f6             	movzx  esi,si
c0008993:	01 f6                	add    esi,esi
c0008995:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008998:	47                   	inc    edi
c0008999:	e9 01 ff ff ff       	jmp    c000889f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000899e:	83 ec 0c             	sub    esp,0xc
c00089a1:	53                   	push   ebx
c00089a2:	e8 b5 f8 ff ff       	call   c000825c <VgaText::updateCursor()>
c00089a7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089ae:	83 c4 1c             	add    esp,0x1c
c00089b1:	5b                   	pop    ebx
c00089b2:	5e                   	pop    esi
c00089b3:	5f                   	pop    edi
c00089b4:	5d                   	pop    ebp
c00089b5:	c3                   	ret    

c00089b6 <VgaText::VgaText(char const*)>:
c00089b6:	56                   	push   esi
c00089b7:	53                   	push   ebx
c00089b8:	83 ec 04             	sub    esp,0x4
c00089bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089bf:	83 ec 08             	sub    esp,0x8
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 44 05 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c00089d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d6:	89 10                	mov    DWORD PTR [eax],edx
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a23:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a35:	83 ec 0c             	sub    esp,0xc
c0008a38:	6a 01                	push   0x1
c0008a3a:	e8 12 09 00 00       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	89 c2                	mov    edx,eax
c0008a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a4b:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0008a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a58:	89 c6                	mov    esi,eax
c0008a5a:	e8 f2 f0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0008a5f:	68 05 0c 00 00       	push   0xc05
c0008a64:	56                   	push   esi
c0008a65:	50                   	push   eax
c0008a66:	53                   	push   ebx
c0008a67:	e8 a8 0f 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a6c:	83 c4 10             	add    esp,0x10
c0008a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a76:	83 ec 04             	sub    esp,0x4
c0008a79:	68 a0 0f 00 00       	push   0xfa0
c0008a7e:	6a 00                	push   0x0
c0008a80:	50                   	push   eax
c0008a81:	e8 4a 7a ff ff       	call   c00004d0 <memset>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	83 ec 04             	sub    esp,0x4
c0008a8c:	6a 00                	push   0x0
c0008a8e:	6a 07                	push   0x7
c0008a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a94:	e8 6d f8 ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	83 ec 04             	sub    esp,0x4
c0008a9f:	6a 00                	push   0x0
c0008aa1:	6a 00                	push   0x0
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 f0 f9 ff ff       	call   c000849c <VgaText::setCursor(int, int)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	83 ec 0c             	sub    esp,0xc
c0008ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab6:	e8 43 fa ff ff       	call   c00084fe <VgaText::clearScreen()>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aca:	05 82 00 00 00       	add    eax,0x82
c0008acf:	83 ec 04             	sub    esp,0x4
c0008ad2:	68 80 00 00 00       	push   0x80
c0008ad7:	6a 00                	push   0x0
c0008ad9:	50                   	push   eax
c0008ada:	e8 f1 79 ff ff       	call   c00004d0 <memset>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	05 02 01 00 00       	add    eax,0x102
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	68 80 00 00 00       	push   0x80
c0008af3:	6a 00                	push   0x0
c0008af5:	50                   	push   eax
c0008af6:	e8 d5 79 ff ff       	call   c00004d0 <memset>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	90                   	nop
c0008aff:	83 c4 04             	add    esp,0x4
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	c3                   	ret    
c0008b05:	90                   	nop

c0008b06 <VgaText::receiveKey(unsigned char)>:
c0008b06:	55                   	push   ebp
c0008b07:	57                   	push   edi
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	83 ec 1c             	sub    esp,0x1c
c0008b0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b15:	89 f0                	mov    eax,esi
c0008b17:	84 c0                	test   al,al
c0008b19:	0f 84 47 01 00 00    	je     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008b1f:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b25:	3c 08                	cmp    al,0x8
c0008b27:	75 6b                	jne    c0008b94 <VgaText::receiveKey(unsigned char)+0x8e>
c0008b29:	83 ec 0c             	sub    esp,0xc
c0008b2c:	57                   	push   edi
c0008b2d:	e8 0e 7a ff ff       	call   c0000540 <strlen>
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 84 ee 00 00 00    	je     c0008c2b <VgaText::receiveKey(unsigned char)+0x125>
c0008b3d:	50                   	push   eax
c0008b3e:	50                   	push   eax
c0008b3f:	6a 08                	push   0x8
c0008b41:	53                   	push   ebx
c0008b42:	e8 79 fb ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008b47:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b4a:	e8 f1 79 ff ff       	call   c0000540 <strlen>
c0008b4f:	83 c4 10             	add    esp,0x10
c0008b52:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b59:	3c 0d                	cmp    al,0xd
c0008b5b:	0f 95 c1             	setne  cl
c0008b5e:	3c 18                	cmp    al,0x18
c0008b60:	0f 9e c2             	setle  dl
c0008b63:	84 d1                	test   cl,dl
c0008b65:	74 17                	je     c0008b7e <VgaText::receiveKey(unsigned char)+0x78>
c0008b67:	83 e8 08             	sub    eax,0x8
c0008b6a:	3c 02                	cmp    al,0x2
c0008b6c:	76 10                	jbe    c0008b7e <VgaText::receiveKey(unsigned char)+0x78>
c0008b6e:	55                   	push   ebp
c0008b6f:	55                   	push   ebp
c0008b70:	68 3f e0 01 c0       	push   0xc001e03f
c0008b75:	53                   	push   ebx
c0008b76:	e8 77 fc ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	57                   	push   edi
c0008b82:	e8 b9 79 ff ff       	call   c0000540 <strlen>
c0008b87:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b8f:	e9 94 00 00 00       	jmp    c0008c28 <VgaText::receiveKey(unsigned char)+0x122>
c0008b94:	83 ec 0c             	sub    esp,0xc
c0008b97:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 9d 79 ff ff       	call   c0000540 <strlen>
c0008ba3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ba6:	89 c5                	mov    ebp,eax
c0008ba8:	e8 93 79 ff ff       	call   c0000540 <strlen>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bb4:	3d 80 00 00 00       	cmp    eax,0x80
c0008bb9:	0f 87 a7 00 00 00    	ja     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008bbf:	89 f0                	mov    eax,esi
c0008bc1:	3c 18                	cmp    al,0x18
c0008bc3:	0f 96 c2             	setbe  dl
c0008bc6:	3c 0d                	cmp    al,0xd
c0008bc8:	0f 95 c0             	setne  al
c0008bcb:	84 c2                	test   dl,al
c0008bcd:	74 30                	je     c0008bff <VgaText::receiveKey(unsigned char)+0xf9>
c0008bcf:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bd2:	3c 01                	cmp    al,0x1
c0008bd4:	76 29                	jbe    c0008bff <VgaText::receiveKey(unsigned char)+0xf9>
c0008bd6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bdc:	68 45 e0 01 c0       	push   0xc001e045
c0008be1:	53                   	push   ebx
c0008be2:	e8 7d fc ff ff       	call   c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008be7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bea:	8d 46 40             	lea    eax,[esi+0x40]
c0008bed:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf0:	0f b6 c0             	movzx  eax,al
c0008bf3:	50                   	push   eax
c0008bf4:	53                   	push   ebx
c0008bf5:	e8 f8 f9 ff ff       	call   c00085f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bfa:	83 c4 20             	add    esp,0x20
c0008bfd:	eb 11                	jmp    c0008c10 <VgaText::receiveKey(unsigned char)+0x10a>
c0008bff:	89 f0                	mov    eax,esi
c0008c01:	51                   	push   ecx
c0008c02:	0f be c0             	movsx  eax,al
c0008c05:	51                   	push   ecx
c0008c06:	50                   	push   eax
c0008c07:	53                   	push   ebx
c0008c08:	e8 b3 fa ff ff       	call   c00086c0 <VgaText::putchar(char)>
c0008c0d:	83 c4 10             	add    esp,0x10
c0008c10:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c15:	89 f0                	mov    eax,esi
c0008c17:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c1b:	52                   	push   edx
c0008c1c:	52                   	push   edx
c0008c1d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c21:	50                   	push   eax
c0008c22:	57                   	push   edi
c0008c23:	e8 98 7b ff ff       	call   c00007c0 <strcat>
c0008c28:	83 c4 10             	add    esp,0x10
c0008c2b:	89 f0                	mov    eax,esi
c0008c2d:	3c 03                	cmp    al,0x3
c0008c2f:	0f 94 c2             	sete   dl
c0008c32:	3c 0a                	cmp    al,0xa
c0008c34:	0f 94 c0             	sete   al
c0008c37:	08 c2                	or     dl,al
c0008c39:	75 09                	jne    c0008c44 <VgaText::receiveKey(unsigned char)+0x13e>
c0008c3b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c42:	74 22                	je     c0008c66 <VgaText::receiveKey(unsigned char)+0x160>
c0008c44:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c4a:	50                   	push   eax
c0008c4b:	50                   	push   eax
c0008c4c:	57                   	push   edi
c0008c4d:	53                   	push   ebx
c0008c4e:	e8 6d 7b ff ff       	call   c00007c0 <strcat>
c0008c53:	83 c4 0c             	add    esp,0xc
c0008c56:	68 80 00 00 00       	push   0x80
c0008c5b:	6a 00                	push   0x0
c0008c5d:	57                   	push   edi
c0008c5e:	e8 6d 78 ff ff       	call   c00004d0 <memset>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	83 c4 1c             	add    esp,0x1c
c0008c69:	5b                   	pop    ebx
c0008c6a:	5e                   	pop    esi
c0008c6b:	5f                   	pop    edi
c0008c6c:	5d                   	pop    ebp
c0008c6d:	c3                   	ret    

c0008c6e <VgaText::doUpdate()>:
c0008c6e:	c3                   	ret    

c0008c6f <newTerminal(char*)>:
c0008c6f:	83 ec 28             	sub    esp,0x28
c0008c72:	68 84 01 00 00       	push   0x184
c0008c77:	e8 f9 eb ff ff       	call   c0007875 <malloc>
c0008c7c:	5a                   	pop    edx
c0008c7d:	59                   	pop    ecx
c0008c7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c82:	50                   	push   eax
c0008c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c87:	e8 2a fd ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c0008c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c90:	83 c4 2c             	add    esp,0x2c
c0008c93:	c3                   	ret    

c0008c94 <TSS::TSS()>:
c0008c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c9f:	90                   	nop
c0008ca0:	c3                   	ret    
c0008ca1:	90                   	nop
c0008ca2:	66 90                	xchg   ax,ax

c0008ca4 <TSS::setESP(unsigned long)>:
c0008ca4:	55                   	push   ebp
c0008ca5:	89 e5                	mov    ebp,esp
c0008ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cb3:	90                   	nop
c0008cb4:	5d                   	pop    ebp
c0008cb5:	c3                   	ret    
c0008cb6:	66 90                	xchg   ax,ax

c0008cb8 <TSS::flush()>:
c0008cb8:	55                   	push   ebp
c0008cb9:	89 e5                	mov    ebp,esp
c0008cbb:	83 ec 10             	sub    esp,0x10
c0008cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	83 c8 03             	or     eax,0x3
c0008cc6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cce:	66 89 d0             	mov    ax,dx
c0008cd1:	0f 00 d8             	ltr    ax
c0008cd4:	90                   	nop
c0008cd5:	c9                   	leave  
c0008cd6:	c3                   	ret    
c0008cd7:	90                   	nop

c0008cd8 <TSS::setup(unsigned long, unsigned long)>:
c0008cd8:	55                   	push   ebp
c0008cd9:	89 e5                	mov    ebp,esp
c0008cdb:	83 ec 18             	sub    esp,0x18
c0008cde:	83 ec 0c             	sub    esp,0xc
c0008ce1:	6a 68                	push   0x68
c0008ce3:	e8 8d eb ff ff       	call   c0007875 <malloc>
c0008ce8:	83 c4 10             	add    esp,0x10
c0008ceb:	89 c2                	mov    edx,eax
c0008ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf9:	83 ec 04             	sub    esp,0x4
c0008cfc:	6a 68                	push   0x68
c0008cfe:	6a 00                	push   0x0
c0008d00:	50                   	push   eax
c0008d01:	e8 ca 77 ff ff       	call   c00004d0 <memset>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d33:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d57:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d7e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d93:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008da0:	0f 20 da             	mov    edx,cr3
c0008da3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008da6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008daf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008db2:	83 ec 08             	sub    esp,0x8
c0008db5:	50                   	push   eax
c0008db6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db9:	50                   	push   eax
c0008dba:	e8 3b e3 ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0008dbf:	83 c4 10             	add    esp,0x10
c0008dc2:	83 ec 08             	sub    esp,0x8
c0008dc5:	6a 68                	push   0x68
c0008dc7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dca:	50                   	push   eax
c0008dcb:	e8 46 e3 ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c0008dd0:	83 c4 10             	add    esp,0x10
c0008dd3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dd7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dda:	83 e0 0f             	and    eax,0xf
c0008ddd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008de3:	83 c8 40             	or     eax,0x40
c0008de6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de9:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008dee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008df4:	05 78 01 00 00       	add    eax,0x178
c0008df9:	83 ec 04             	sub    esp,0x4
c0008dfc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e02:	50                   	push   eax
c0008e03:	e8 42 e3 ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0008e08:	83 c4 10             	add    esp,0x10
c0008e0b:	89 c2                	mov    edx,eax
c0008e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e10:	89 10                	mov    DWORD PTR [eax],edx
c0008e12:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008e17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e1d:	05 78 01 00 00       	add    eax,0x178
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	50                   	push   eax
c0008e26:	e8 49 e3 ff ff       	call   c0007174 <GDT::flush()>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	c9                   	leave  
c0008e34:	c3                   	ret    
c0008e35:	90                   	nop

c0008e36 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e46:	75 08                	jne    c0008e50 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e48:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e4e:	eb 38                	jmp    c0008e88 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e50:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e55:	75 17                	jne    c0008e6e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e6b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e6e:	89 c1                	mov    ecx,eax
c0008e70:	83 e1 fd             	and    ecx,0xfffffffd
c0008e73:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e79:	74 cd                	je     c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e7b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e80:	83 e0 ef             	and    eax,0xffffffef
c0008e83:	83 f8 08             	cmp    eax,0x8
c0008e86:	76 c0                	jbe    c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	c3                   	ret    
c0008e8b:	90                   	nop

c0008e8c <ReservedFilename::isAtty()>:
c0008e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e93:	31 c0                	xor    eax,eax
c0008e95:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e9b:	74 09                	je     c0008ea6 <ReservedFilename::isAtty()+0x1a>
c0008e9d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ea3:	0f 94 c0             	sete   al
c0008ea6:	c3                   	ret    
c0008ea7:	90                   	nop

c0008ea8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eb7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ebc:	75 08                	jne    c0008ec6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008ebe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ec4:	eb 3d                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ec6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ecb:	75 17                	jne    c0008ee4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ecd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ed2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ed5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0008edd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ee1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ee4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee9:	75 04                	jne    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008eeb:	89 0a                	mov    DWORD PTR [edx],ecx
c0008eed:	eb 14                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eef:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ef4:	74 c8                	je     c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ef6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008efb:	83 e0 ef             	and    eax,0xffffffef
c0008efe:	83 f8 08             	cmp    eax,0x8
c0008f01:	76 bb                	jbe    c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f03:	31 c0                	xor    eax,eax
c0008f05:	c3                   	ret    

c0008f06 <UnixFile::getFileDescriptor()>:
c0008f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f0d:	c3                   	ret    

c0008f0e <UnixFile::UnixFile(int)>:
c0008f0e:	53                   	push   ebx
c0008f0f:	83 ec 28             	sub    esp,0x28
c0008f12:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c0008f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f1b:	89 10                	mov    DWORD PTR [eax],edx
c0008f1d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f25:	0f 8f 8c 01 00 00    	jg     c00090b7 <UnixFile::UnixFile(int)+0x1a9>
c0008f2b:	a1 c0 ff 01 c0       	mov    eax,ds:0xc001ffc0
c0008f30:	8d 50 01             	lea    edx,[eax+0x1]
c0008f33:	89 15 c0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc0,edx
c0008f39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f40:	83 ec 08             	sub    esp,0x8
c0008f43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f47:	68 98 2f 02 c0       	push   0xc0022f98
c0008f4c:	e8 a7 3c 01 00       	call   c001cbf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	a0 94 2f 02 c0       	mov    al,ds:0xc0022f94
c0008f59:	83 f0 01             	xor    eax,0x1
c0008f5c:	84 c0                	test   al,al
c0008f5e:	0f 84 54 01 00 00    	je     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c0008f64:	c6 05 94 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f94,0x1
c0008f6b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f7a:	e8 f6 e8 ff ff       	call   c0007875 <malloc>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 c3                	mov    ebx,eax
c0008f84:	83 ec 08             	sub    esp,0x8
c0008f87:	68 03 ff ff 0f       	push   0xfffff03
c0008f8c:	53                   	push   ebx
c0008f8d:	e8 2c 01 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 1d 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,ebx
c0008f9b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008fa3:	83 ec 0c             	sub    esp,0xc
c0008fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008faa:	e8 c6 e8 ff ff       	call   c0007875 <malloc>
c0008faf:	83 c4 10             	add    esp,0x10
c0008fb2:	89 c3                	mov    ebx,eax
c0008fb4:	83 ec 08             	sub    esp,0x8
c0008fb7:	68 01 ff ff 0f       	push   0xfffff01
c0008fbc:	53                   	push   ebx
c0008fbd:	e8 fc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0008fcb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fd3:	83 ec 0c             	sub    esp,0xc
c0008fd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fda:	e8 96 e8 ff ff       	call   c0007875 <malloc>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	89 c3                	mov    ebx,eax
c0008fe4:	83 ec 08             	sub    esp,0x8
c0008fe7:	68 00 ff ff 0f       	push   0xfffff00
c0008fec:	53                   	push   ebx
c0008fed:	e8 cc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008ff2:	83 c4 10             	add    esp,0x10
c0008ff5:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c0008ffb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009003:	83 ec 0c             	sub    esp,0xc
c0009006:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000900a:	e8 66 e8 ff ff       	call   c0007875 <malloc>
c000900f:	83 c4 10             	add    esp,0x10
c0009012:	89 c3                	mov    ebx,eax
c0009014:	83 ec 08             	sub    esp,0x8
c0009017:	68 02 ff ff 0f       	push   0xfffff02
c000901c:	53                   	push   ebx
c000901d:	e8 9c 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 1d 88 2f 02 c0    	mov    DWORD PTR ds:0xc0022f88,ebx
c000902b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009033:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009038:	7f 7e                	jg     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c000903a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009042:	83 ec 0c             	sub    esp,0xc
c0009045:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009049:	e8 27 e8 ff ff       	call   c0007875 <malloc>
c000904e:	83 c4 10             	add    esp,0x10
c0009051:	89 c3                	mov    ebx,eax
c0009053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009057:	05 10 ff ff 0f       	add    eax,0xfffff10
c000905c:	83 ec 08             	sub    esp,0x8
c000905f:	50                   	push   eax
c0009060:	53                   	push   ebx
c0009061:	e8 58 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009066:	83 c4 10             	add    esp,0x10
c0009069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000906d:	89 1c 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],ebx
c0009074:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009083:	e8 ed e7 ff ff       	call   c0007875 <malloc>
c0009088:	83 c4 10             	add    esp,0x10
c000908b:	89 c3                	mov    ebx,eax
c000908d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009091:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	50                   	push   eax
c000909a:	53                   	push   ebx
c000909b:	e8 1e 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a7:	89 1c 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],ebx
c00090ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090b2:	e9 7c ff ff ff       	jmp    c0009033 <UnixFile::UnixFile(int)+0x125>
c00090b7:	90                   	nop
c00090b8:	83 c4 28             	add    esp,0x28
c00090bb:	5b                   	pop    ebx
c00090bc:	c3                   	ret    
c00090bd:	90                   	nop

c00090be <ReservedFilename::ReservedFilename(int)>:
c00090be:	83 ec 0c             	sub    esp,0xc
c00090c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c5:	83 ec 08             	sub    esp,0x8
c00090c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090cc:	50                   	push   eax
c00090cd:	e8 3c fe ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	ba 38 e1 01 c0       	mov    edx,0xc001e138
c00090da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090de:	89 10                	mov    DWORD PTR [eax],edx
c00090e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090eb:	90                   	nop
c00090ec:	83 c4 0c             	add    esp,0xc
c00090ef:	c3                   	ret    

c00090f0 <UnixFile::~UnixFile()>:
c00090f0:	83 ec 1c             	sub    esp,0x1c
c00090f3:	ba 1c e1 01 c0       	mov    edx,0xc001e11c
c00090f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fc:	89 10                	mov    DWORD PTR [eax],edx
c00090fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009105:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000910a:	7f 73                	jg     c000917f <UnixFile::~UnixFile()+0x8f>
c000910c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	68 98 2f 02 c0       	push   0xc0022f98
c000911c:	e8 ab 3b 01 00       	call   c001cccc <LinkedList<UnixFile>::getFirstElement()>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009128:	83 ec 0c             	sub    esp,0xc
c000912b:	68 98 2f 02 c0       	push   0xc0022f98
c0009130:	e8 9f 3b 01 00       	call   c001ccd4 <LinkedList<UnixFile>::removeFirst()>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000913c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009140:	74 40                	je     c0009182 <UnixFile::~UnixFile()+0x92>
c0009142:	83 ec 08             	sub    esp,0x8
c0009145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009149:	68 98 2f 02 c0       	push   0xc0022f98
c000914e:	e8 a5 3a 01 00       	call   c001cbf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000915a:	8d 50 01             	lea    edx,[eax+0x1]
c000915d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009161:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009166:	0f 94 c0             	sete   al
c0009169:	84 c0                	test   al,al
c000916b:	74 a7                	je     c0009114 <UnixFile::~UnixFile()+0x24>
c000916d:	83 ec 0c             	sub    esp,0xc
c0009170:	68 f4 e0 01 c0       	push   0xc001e0f4
c0009175:	e8 a9 71 00 00       	call   c0010323 <KePanic(char const*)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	eb 95                	jmp    c0009114 <UnixFile::~UnixFile()+0x24>
c000917f:	90                   	nop
c0009180:	eb 01                	jmp    c0009183 <UnixFile::~UnixFile()+0x93>
c0009182:	90                   	nop
c0009183:	90                   	nop
c0009184:	83 c4 1c             	add    esp,0x1c
c0009187:	c3                   	ret    

c0009188 <UnixFile::~UnixFile()>:
c0009188:	83 ec 0c             	sub    esp,0xc
c000918b:	83 ec 0c             	sub    esp,0xc
c000918e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009192:	e8 59 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	83 ec 08             	sub    esp,0x8
c000919d:	6a 0c                	push   0xc
c000919f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091a3:	e8 70 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	83 c4 0c             	add    esp,0xc
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <ReservedFilename::~ReservedFilename()>:
c00091b0:	83 ec 0c             	sub    esp,0xc
c00091b3:	ba 38 e1 01 c0       	mov    edx,0xc001e138
c00091b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091bc:	89 10                	mov    DWORD PTR [eax],edx
c00091be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091c2:	83 ec 0c             	sub    esp,0xc
c00091c5:	50                   	push   eax
c00091c6:	e8 25 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c00091cb:	83 c4 10             	add    esp,0x10
c00091ce:	90                   	nop
c00091cf:	83 c4 0c             	add    esp,0xc
c00091d2:	c3                   	ret    
c00091d3:	90                   	nop

c00091d4 <ReservedFilename::~ReservedFilename()>:
c00091d4:	83 ec 0c             	sub    esp,0xc
c00091d7:	83 ec 0c             	sub    esp,0xc
c00091da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091de:	e8 cd ff ff ff       	call   c00091b0 <ReservedFilename::~ReservedFilename()>
c00091e3:	83 c4 10             	add    esp,0x10
c00091e6:	83 ec 08             	sub    esp,0x8
c00091e9:	6a 0c                	push   0xc
c00091eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ef:	e8 24 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091f4:	83 c4 10             	add    esp,0x10
c00091f7:	83 c4 0c             	add    esp,0xc
c00091fa:	c3                   	ret    

c00091fb <getFromFileDescriptor(int)>:
c00091fb:	53                   	push   ebx
c00091fc:	83 ec 08             	sub    esp,0x8
c00091ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009203:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009209:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000920f:	7f 2c                	jg     c000923d <getFromFileDescriptor(int)+0x42>
c0009211:	83 ec 0c             	sub    esp,0xc
c0009214:	68 98 2f 02 c0       	push   0xc0022f98
c0009219:	e8 ae 3a 01 00       	call   c001cccc <LinkedList<UnixFile>::getFirstElement()>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	85 c0                	test   eax,eax
c0009223:	75 04                	jne    c0009229 <getFromFileDescriptor(int)+0x2e>
c0009225:	31 c0                	xor    eax,eax
c0009227:	eb 6e                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009229:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000922c:	74 69                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000922e:	52                   	push   edx
c000922f:	52                   	push   edx
c0009230:	50                   	push   eax
c0009231:	68 98 2f 02 c0       	push   0xc0022f98
c0009236:	e8 3b 3b 01 00       	call   c001cd76 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000923b:	eb e1                	jmp    c000921e <getFromFileDescriptor(int)+0x23>
c000923d:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0009242:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009248:	74 4d                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000924a:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c000924f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009255:	74 40                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009257:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c000925c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009262:	74 33                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009264:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c0009269:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000926f:	74 26                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009271:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009277:	83 f8 08             	cmp    eax,0x8
c000927a:	77 09                	ja     c0009285 <getFromFileDescriptor(int)+0x8a>
c000927c:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c0009283:	eb 12                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009285:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000928b:	83 fb 08             	cmp    ebx,0x8
c000928e:	77 95                	ja     c0009225 <getFromFileDescriptor(int)+0x2a>
c0009290:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c0009297:	83 c4 08             	add    esp,0x8
c000929a:	5b                   	pop    ebx
c000929b:	c3                   	ret    

c000929c <__static_initialization_and_destruction_0(int, int)>:
c000929c:	83 ec 0c             	sub    esp,0xc
c000929f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092a4:	75 34                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092ae:	75 2a                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092b0:	83 ec 0c             	sub    esp,0xc
c00092b3:	68 98 2f 02 c0       	push   0xc0022f98
c00092b8:	e8 f9 38 01 00       	call   c001cbb6 <LinkedList<UnixFile>::LinkedList()>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	83 ec 04             	sub    esp,0x4
c00092c3:	68 40 ff 01 c0       	push   0xc001ff40
c00092c8:	68 98 2f 02 c0       	push   0xc0022f98
c00092cd:	68 b4 cb 01 c0       	push   0xc001cbb4
c00092d2:	e8 f1 11 00 00       	call   c000a4c8 <__cxa_atexit>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	90                   	nop
c00092db:	83 c4 0c             	add    esp,0xc
c00092de:	c3                   	ret    

c00092df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092df:	83 ec 0c             	sub    esp,0xc
c00092e2:	83 ec 08             	sub    esp,0x8
c00092e5:	68 ff ff 00 00       	push   0xffff
c00092ea:	6a 01                	push   0x1
c00092ec:	e8 ab ff ff ff       	call   c000929c <__static_initialization_and_destruction_0(int, int)>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	83 c4 0c             	add    esp,0xc
c00092f7:	c3                   	ret    

c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f8:	53                   	push   ebx
c00092f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009301:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	d1 e8                	shr    eax,1
c000930b:	03 05 c8 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ffc8
c0009311:	83 e1 01             	and    ecx,0x1
c0009314:	8a 10                	mov    dl,BYTE PTR [eax]
c0009316:	75 09                	jne    c0009321 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009318:	83 e2 f0             	and    edx,0xfffffff0
c000931b:	09 da                	or     edx,ebx
c000931d:	88 10                	mov    BYTE PTR [eax],dl
c000931f:	5b                   	pop    ebx
c0009320:	c3                   	ret    
c0009321:	c1 e3 04             	shl    ebx,0x4
c0009324:	83 e2 0f             	and    edx,0xf
c0009327:	09 da                	or     edx,ebx
c0009329:	88 10                	mov    BYTE PTR [eax],dl
c000932b:	5b                   	pop    ebx
c000932c:	c3                   	ret    

c000932d <Virt::getPageState(unsigned long)>:
c000932d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009331:	8b 0d c8 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffc8
c0009337:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000933d:	89 d0                	mov    eax,edx
c000933f:	d1 e8                	shr    eax,1
c0009341:	83 e2 01             	and    edx,0x1
c0009344:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009347:	75 04                	jne    c000934d <Virt::getPageState(unsigned long)+0x20>
c0009349:	83 e0 0f             	and    eax,0xf
c000934c:	c3                   	ret    
c000934d:	c0 e8 04             	shr    al,0x4
c0009350:	c3                   	ret    

c0009351 <Virt::allocateKernelVirtualPages(int)>:
c0009351:	55                   	push   ebp
c0009352:	31 ed                	xor    ebp,ebp
c0009354:	57                   	push   edi
c0009355:	56                   	push   esi
c0009356:	53                   	push   ebx
c0009357:	31 db                	xor    ebx,ebx
c0009359:	83 ec 1c             	sub    esp,0x1c
c000935c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009360:	8b 3d c4 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ffc4
c0009366:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000936b:	57                   	push   edi
c000936c:	e8 bc ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c0009371:	5a                   	pop    edx
c0009372:	84 c0                	test   al,al
c0009374:	75 3a                	jne    c00093b0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009376:	85 db                	test   ebx,ebx
c0009378:	75 02                	jne    c000937c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000937a:	89 fd                	mov    ebp,edi
c000937c:	43                   	inc    ebx
c000937d:	39 f3                	cmp    ebx,esi
c000937f:	74 5a                	je     c00093db <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009381:	47                   	inc    edi
c0009382:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009388:	76 31                	jbe    c00093bb <Virt::allocateKernelVirtualPages(int)+0x6a>
c000938a:	c7 05 c4 ff 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ffc4,0xc8000
c0009394:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009399:	75 28                	jne    c00093c3 <Virt::allocateKernelVirtualPages(int)+0x72>
c000939b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00093a0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093a5:	57                   	push   edi
c00093a6:	e8 82 ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00093ab:	5a                   	pop    edx
c00093ac:	84 c0                	test   al,al
c00093ae:	74 c6                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093b0:	31 db                	xor    ebx,ebx
c00093b2:	47                   	inc    edi
c00093b3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b9:	77 cf                	ja     c000938a <Virt::allocateKernelVirtualPages(int)+0x39>
c00093bb:	89 3d c4 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc4,edi
c00093c1:	eb a8                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093c3:	83 ec 0c             	sub    esp,0xc
c00093c6:	68 4c e1 01 c0       	push   0xc001e14c
c00093cb:	e8 53 6f 00 00       	call   c0010323 <KePanic(char const*)>
c00093d0:	8b 3d c4 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ffc4
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	eb 90                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093db:	89 2d c4 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc4,ebp
c00093e1:	4b                   	dec    ebx
c00093e2:	74 5f                	je     c0009443 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093e4:	85 f6                	test   esi,esi
c00093e6:	74 3d                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e8:	89 e8                	mov    eax,ebp
c00093ea:	31 db                	xor    ebx,ebx
c00093ec:	8d 7e ff             	lea    edi,[esi-0x1]
c00093ef:	eb 14                	jmp    c0009405 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093f1:	6a 01                	push   0x1
c00093f3:	43                   	inc    ebx
c00093f4:	50                   	push   eax
c00093f5:	e8 fe fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093fa:	58                   	pop    eax
c00093fb:	39 f3                	cmp    ebx,esi
c00093fd:	5a                   	pop    edx
c00093fe:	74 25                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009400:	a1 c4 ff 01 c0       	mov    eax,ds:0xc001ffc4
c0009405:	8d 50 01             	lea    edx,[eax+0x1]
c0009408:	85 db                	test   ebx,ebx
c000940a:	89 15 c4 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc4,edx
c0009410:	74 20                	je     c0009432 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009412:	39 df                	cmp    edi,ebx
c0009414:	75 db                	jne    c00093f1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009416:	6a 03                	push   0x3
c0009418:	43                   	inc    ebx
c0009419:	50                   	push   eax
c000941a:	e8 d9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941f:	59                   	pop    ecx
c0009420:	39 f3                	cmp    ebx,esi
c0009422:	58                   	pop    eax
c0009423:	75 db                	jne    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009425:	83 c4 1c             	add    esp,0x1c
c0009428:	89 e8                	mov    eax,ebp
c000942a:	5b                   	pop    ebx
c000942b:	c1 e0 0c             	shl    eax,0xc
c000942e:	5e                   	pop    esi
c000942f:	5f                   	pop    edi
c0009430:	5d                   	pop    ebp
c0009431:	c3                   	ret    
c0009432:	6a 02                	push   0x2
c0009434:	bb 01 00 00 00       	mov    ebx,0x1
c0009439:	50                   	push   eax
c000943a:	e8 b9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943f:	58                   	pop    eax
c0009440:	5a                   	pop    edx
c0009441:	eb bd                	jmp    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009443:	6a 04                	push   0x4
c0009445:	8d 45 01             	lea    eax,[ebp+0x1]
c0009448:	55                   	push   ebp
c0009449:	a3 c4 ff 01 c0       	mov    ds:0xc001ffc4,eax
c000944e:	e8 a5 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	59                   	pop    ecx
c0009454:	89 e8                	mov    eax,ebp
c0009456:	5b                   	pop    ebx
c0009457:	c1 e0 0c             	shl    eax,0xc
c000945a:	83 c4 1c             	add    esp,0x1c
c000945d:	5b                   	pop    ebx
c000945e:	5e                   	pop    esi
c000945f:	5f                   	pop    edi
c0009460:	5d                   	pop    ebp
c0009461:	c3                   	ret    

c0009462 <Virt::freeSwapfilePage(unsigned long)>:
c0009462:	53                   	push   ebx
c0009463:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c0009469:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000946d:	b8 01 00 00 00       	mov    eax,0x1
c0009472:	89 cb                	mov    ebx,ecx
c0009474:	d3 e0                	shl    eax,cl
c0009476:	c1 eb 05             	shr    ebx,0x5
c0009479:	f7 d0                	not    eax
c000947b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000947e:	5b                   	pop    ebx
c000947f:	c3                   	ret    

c0009480 <Virt::swapIDToSector(unsigned long)>:
c0009480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009484:	0f af 05 cc ff 01 c0 	imul   eax,DWORD PTR ds:0xc001ffcc
c000948b:	03 05 d4 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ffd4
c0009491:	c3                   	ret    

c0009492 <Virt::allocateSwapfilePage()>:
c0009492:	55                   	push   ebp
c0009493:	31 d2                	xor    edx,edx
c0009495:	57                   	push   edi
c0009496:	56                   	push   esi
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 0d cc ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffcc
c00094a1:	a1 d0 ff 01 c0       	mov    eax,ds:0xc001ffd0
c00094a6:	f7 f1                	div    ecx
c00094a8:	39 0d d0 ff 01 c0    	cmp    DWORD PTR ds:0xc001ffd0,ecx
c00094ae:	72 2d                	jb     c00094dd <Virt::allocateSwapfilePage()+0x4b>
c00094b0:	8b 35 ac 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fac
c00094b6:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b8:	f6 c2 01             	test   dl,0x1
c00094bb:	74 3c                	je     c00094f9 <Virt::allocateSwapfilePage()+0x67>
c00094bd:	31 c9                	xor    ecx,ecx
c00094bf:	bf 01 00 00 00       	mov    edi,0x1
c00094c4:	eb 12                	jmp    c00094d8 <Virt::allocateSwapfilePage()+0x46>
c00094c6:	89 fd                	mov    ebp,edi
c00094c8:	89 ca                	mov    edx,ecx
c00094ca:	d3 e5                	shl    ebp,cl
c00094cc:	c1 ea 05             	shr    edx,0x5
c00094cf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094d4:	85 ea                	test   edx,ebp
c00094d6:	74 2a                	je     c0009502 <Virt::allocateSwapfilePage()+0x70>
c00094d8:	41                   	inc    ecx
c00094d9:	39 c8                	cmp    eax,ecx
c00094db:	77 e9                	ja     c00094c6 <Virt::allocateSwapfilePage()+0x34>
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	68 b3 e2 01 c0       	push   0xc001e2b3
c00094e5:	e8 39 6e 00 00       	call   c0010323 <KePanic(char const*)>
c00094ea:	83 c4 10             	add    esp,0x10
c00094ed:	31 c9                	xor    ecx,ecx
c00094ef:	83 c4 0c             	add    esp,0xc
c00094f2:	89 c8                	mov    eax,ecx
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	5f                   	pop    edi
c00094f7:	5d                   	pop    ebp
c00094f8:	c3                   	ret    
c00094f9:	89 f3                	mov    ebx,esi
c00094fb:	bd 01 00 00 00       	mov    ebp,0x1
c0009500:	31 c9                	xor    ecx,ecx
c0009502:	09 ea                	or     edx,ebp
c0009504:	89 c8                	mov    eax,ecx
c0009506:	89 13                	mov    DWORD PTR [ebx],edx
c0009508:	83 c4 0c             	add    esp,0xc
c000950b:	5b                   	pop    ebx
c000950c:	5e                   	pop    esi
c000950d:	5f                   	pop    edi
c000950e:	5d                   	pop    ebp
c000950f:	c3                   	ret    

c0009510 <Virt::virtualMemorySetup()>:
c0009510:	53                   	push   ebx
c0009511:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009516:	6a 0f                	push   0xf
c0009518:	53                   	push   ebx
c0009519:	43                   	inc    ebx
c000951a:	e8 d9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000951f:	58                   	pop    eax
c0009520:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009526:	5a                   	pop    edx
c0009527:	75 ed                	jne    c0009516 <Virt::virtualMemorySetup()+0x6>
c0009529:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000952e:	6a 00                	push   0x0
c0009530:	53                   	push   ebx
c0009531:	43                   	inc    ebx
c0009532:	e8 c1 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009537:	59                   	pop    ecx
c0009538:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000953e:	58                   	pop    eax
c000953f:	75 ed                	jne    c000952e <Virt::virtualMemorySetup()+0x1e>
c0009541:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009546:	6a 0f                	push   0xf
c0009548:	53                   	push   ebx
c0009549:	43                   	inc    ebx
c000954a:	e8 a9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954f:	58                   	pop    eax
c0009550:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009556:	5a                   	pop    edx
c0009557:	75 ed                	jne    c0009546 <Virt::virtualMemorySetup()+0x36>
c0009559:	5b                   	pop    ebx
c000955a:	c3                   	ret    

c000955b <Virt::setupPageSwapping(int)>:
c000955b:	53                   	push   ebx
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009563:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c0009568:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	53                   	push   ebx
c0009571:	c1 e3 0b             	shl    ebx,0xb
c0009574:	68 ca e2 01 c0       	push   0xc001e2ca
c0009579:	50                   	push   eax
c000957a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000957d:	89 1d d0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffd0,ebx
c0009583:	c6 05 d8 ff 01 c0 43 	mov    BYTE PTR ds:0xc001ffd8,0x43
c000958a:	c1 eb 08             	shr    ebx,0x8
c000958d:	a3 d4 ff 01 c0       	mov    ds:0xc001ffd4,eax
c0009592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009595:	c7 05 cc ff 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ffcc,0x8
c000959f:	e8 d1 e2 ff ff       	call   c0007875 <malloc>
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	89 c1                	mov    ecx,eax
c00095a9:	a3 ac 2f 02 c0       	mov    ds:0xc0022fac,eax
c00095ae:	31 d2                	xor    edx,edx
c00095b0:	a1 d0 ff 01 c0       	mov    eax,ds:0xc001ffd0
c00095b5:	f7 35 cc ff 01 c0    	div    DWORD PTR ds:0xc001ffcc
c00095bb:	c1 e8 05             	shr    eax,0x5
c00095be:	50                   	push   eax
c00095bf:	6a 00                	push   0x0
c00095c1:	51                   	push   ecx
c00095c2:	e8 09 6f ff ff       	call   c00004d0 <memset>
c00095c7:	83 c4 18             	add    esp,0x18
c00095ca:	5b                   	pop    ebx
c00095cb:	c3                   	ret    

c00095cc <VAS::VAS(VAS*)>:
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095e5:	83 ec 0c             	sub    esp,0xc
c00095e8:	68 6c e1 01 c0       	push   0xc001e16c
c00095ed:	e8 31 6d 00 00       	call   c0010323 <KePanic(char const*)>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	90                   	nop
c00095f6:	83 c4 0c             	add    esp,0xc
c00095f9:	c3                   	ret    

c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095fe:	89 c2                	mov    edx,eax
c0009600:	c1 e8 0a             	shr    eax,0xa
c0009603:	c1 ea 16             	shr    edx,0x16
c0009606:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000960b:	19 c9                	sbb    ecx,ecx
c000960d:	c1 e2 0c             	shl    edx,0xc
c0009610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009616:	25 fc 0f 00 00       	and    eax,0xffc
c000961b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009622:	01 d0                	add    eax,edx
c0009624:	c3                   	ret    
c0009625:	90                   	nop

c0009626 <VAS::getPageTableEntry(unsigned long)>:
c0009626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000962a:	89 ca                	mov    edx,ecx
c000962c:	c1 e9 0a             	shr    ecx,0xa
c000962f:	c1 ea 16             	shr    edx,0x16
c0009632:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009638:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000963e:	c1 e0 0c             	shl    eax,0xc
c0009641:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009644:	c3                   	ret    

c0009645 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009645:	57                   	push   edi
c0009646:	56                   	push   esi
c0009647:	be 01 00 00 00       	mov    esi,0x1
c000964c:	53                   	push   ebx
c000964d:	83 ec 10             	sub    esp,0x10
c0009650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009654:	c1 eb 0c             	shr    ebx,0xc
c0009657:	eb 3f                	jmp    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009659:	83 ec 08             	sub    esp,0x8
c000965c:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0009661:	57                   	push   edi
c0009662:	50                   	push   eax
c0009663:	e8 be ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8b 00                	mov    eax,DWORD PTR [eax]
c000966d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009671:	f6 c4 04             	test   ah,0x4
c0009674:	75 60                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009676:	80 fa 04             	cmp    dl,0x4
c0009679:	74 79                	je     c00096f4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000967b:	80 fa 02             	cmp    dl,0x2
c000967e:	0f 84 89 00 00 00    	je     c000970d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009684:	80 fa 03             	cmp    dl,0x3
c0009687:	0f 84 ae 00 00 00    	je     c000973b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000968d:	fe ca                	dec    dl
c000968f:	0f 84 93 00 00 00    	je     c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009695:	43                   	inc    ebx
c0009696:	31 f6                	xor    esi,esi
c0009698:	53                   	push   ebx
c0009699:	89 df                	mov    edi,ebx
c000969b:	e8 8d fc ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00096a0:	c1 e7 0c             	shl    edi,0xc
c00096a3:	5a                   	pop    edx
c00096a4:	84 c0                	test   al,al
c00096a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096aa:	75 ad                	jne    c0009659 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096ac:	83 ec 0c             	sub    esp,0xc
c00096af:	68 e1 e2 01 c0       	push   0xc001e2e1
c00096b4:	e8 6a 6c 00 00       	call   c0010323 <KePanic(char const*)>
c00096b9:	5a                   	pop    edx
c00096ba:	59                   	pop    ecx
c00096bb:	57                   	push   edi
c00096bc:	8b 3d b0 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022fb0
c00096c2:	57                   	push   edi
c00096c3:	e8 5e ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096d1:	f6 c4 04             	test   ah,0x4
c00096d4:	74 bf                	je     c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096df:	83 ec 0c             	sub    esp,0xc
c00096e2:	50                   	push   eax
c00096e3:	e8 07 e4 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00096e8:	83 c4 10             	add    esp,0x10
c00096eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096ef:	80 fa 04             	cmp    dl,0x4
c00096f2:	75 87                	jne    c000967b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096f4:	89 f0                	mov    eax,esi
c00096f6:	84 c0                	test   al,al
c00096f8:	75 47                	jne    c0009741 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096fa:	c7 44 24 20 90 e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e190
c0009702:	83 c4 10             	add    esp,0x10
c0009705:	5b                   	pop    ebx
c0009706:	5e                   	pop    esi
c0009707:	5f                   	pop    edi
c0009708:	e9 16 6c 00 00       	jmp    c0010323 <KePanic(char const*)>
c000970d:	89 f0                	mov    eax,esi
c000970f:	84 c0                	test   al,al
c0009711:	75 15                	jne    c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009713:	83 ec 0c             	sub    esp,0xc
c0009716:	68 fd e2 01 c0       	push   0xc001e2fd
c000971b:	e8 03 6c 00 00       	call   c0010323 <KePanic(char const*)>
c0009720:	83 c4 10             	add    esp,0x10
c0009723:	e9 6d ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	6a 00                	push   0x0
c000972d:	53                   	push   ebx
c000972e:	e8 c5 fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	83 c4 10             	add    esp,0x10
c0009736:	e9 5a ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000973b:	89 f0                	mov    eax,esi
c000973d:	84 c0                	test   al,al
c000973f:	75 15                	jne    c0009756 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009741:	83 ec 08             	sub    esp,0x8
c0009744:	6a 00                	push   0x0
c0009746:	53                   	push   ebx
c0009747:	e8 ac fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974c:	83 c4 10             	add    esp,0x10
c000974f:	83 c4 10             	add    esp,0x10
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	c3                   	ret    
c0009756:	c7 44 24 20 19 e3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e319
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	5b                   	pop    ebx
c0009762:	5e                   	pop    esi
c0009763:	5f                   	pop    edi
c0009764:	e9 ba 6b 00 00       	jmp    c0010323 <KePanic(char const*)>
c0009769:	90                   	nop

c000976a <VAS::freeAllocatedPages(unsigned long)>:
c000976a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009772:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009776:	74 09                	je     c0009781 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009778:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977c:	e9 c4 fe ff ff       	jmp    c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009781:	c7 44 24 04 b4 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e1b4
c0009789:	e9 80 0e 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>

c000978e <VAS::virtualToPhysical(unsigned long)>:
c000978e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009792:	50                   	push   eax
c0009793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009797:	52                   	push   edx
c0009798:	e8 89 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000979d:	59                   	pop    ecx
c000979e:	8b 00                	mov    eax,DWORD PTR [eax]
c00097a0:	5a                   	pop    edx
c00097a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097a6:	c3                   	ret    
c00097a7:	90                   	nop

c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a8:	55                   	push   ebp
c00097a9:	57                   	push   edi
c00097aa:	56                   	push   esi
c00097ab:	53                   	push   ebx
c00097ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097bc:	85 db                	test   ebx,ebx
c00097be:	7e 22                	jle    c00097e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097c0:	c1 e3 0c             	shl    ebx,0xc
c00097c3:	01 f3                	add    ebx,esi
c00097c5:	56                   	push   esi
c00097c6:	81 c6 00 10 00 00    	add    esi,0x1000
c00097cc:	55                   	push   ebp
c00097cd:	e8 54 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00097d2:	5a                   	pop    edx
c00097d3:	59                   	pop    ecx
c00097d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097d6:	21 f9                	and    ecx,edi
c00097d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097dc:	39 f3                	cmp    ebx,esi
c00097de:	89 08                	mov    DWORD PTR [eax],ecx
c00097e0:	75 e3                	jne    c00097c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097e2:	5b                   	pop    ebx
c00097e3:	5e                   	pop    esi
c00097e4:	5f                   	pop    edi
c00097e5:	5d                   	pop    ebp
c00097e6:	c3                   	ret    
c00097e7:	90                   	nop

c00097e8 <VAS::VAS()>:
c00097e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009802:	a3 b0 2f 02 c0       	mov    ds:0xc0022fb0,eax
c0009807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000980f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009813:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009821:	ba 7d 10 02 c0       	mov    edx,0xc002107d
c0009826:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000982b:	29 c2                	sub    edx,eax
c000982d:	89 d0                	mov    eax,edx
c000982f:	05 ff 0f 00 00       	add    eax,0xfff
c0009834:	c1 e8 0c             	shr    eax,0xc
c0009837:	89 c2                	mov    edx,eax
c0009839:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000983e:	6a 04                	push   0x4
c0009840:	6a ff                	push   0xffffffff
c0009842:	52                   	push   edx
c0009843:	50                   	push   eax
c0009844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009848:	e8 5b ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000984d:	83 c4 14             	add    esp,0x14
c0009850:	90                   	nop
c0009851:	c3                   	ret    

c0009852 <VAS::setToWriteCombining(unsigned long, int)>:
c0009852:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009857:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000985d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009864:	75 01                	jne    c0009867 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009866:	c3                   	ret    
c0009867:	68 80 00 00 00       	push   0x80
c000986c:	6a ff                	push   0xffffffff
c000986e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009872:	50                   	push   eax
c0009873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009877:	52                   	push   edx
c0009878:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000987c:	51                   	push   ecx
c000987d:	e8 26 ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009882:	83 c4 14             	add    esp,0x14
c0009885:	c3                   	ret    

c0009886 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009886:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000988b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000988f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009896:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009899:	19 c0                	sbb    eax,eax
c000989b:	83 ca 03             	or     edx,0x3
c000989e:	83 e0 fc             	and    eax,0xfffffffc
c00098a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a8:	0f 20 d8             	mov    eax,cr3
c00098ab:	0f 22 d8             	mov    cr3,eax
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::~VAS()>:
c00098b0:	83 ec 2c             	sub    esp,0x2c
c00098b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098bb:	fa                   	cli    
c00098bc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00098c1:	40                   	inc    eax
c00098c2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00098c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098d1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098db:	6a 01                	push   0x1
c00098dd:	50                   	push   eax
c00098de:	e8 a3 ff ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c00098e3:	83 c4 0c             	add    esp,0xc
c00098e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098f6:	0f 8f d4 00 00 00    	jg     c00099d0 <VAS::~VAS()+0x120>
c00098fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009907:	c1 e2 02             	shl    edx,0x2
c000990a:	01 d0                	add    eax,edx
c000990c:	8b 00                	mov    eax,DWORD PTR [eax]
c000990e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009916:	83 e0 01             	and    eax,0x1
c0009919:	0f 84 a8 00 00 00    	je     c00099c7 <VAS::~VAS()+0x117>
c000991f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009927:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000992f:	7f 72                	jg     c00099a3 <VAS::~VAS()+0xf3>
c0009931:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009935:	c1 e0 0a             	shl    eax,0xa
c0009938:	89 c2                	mov    edx,eax
c000993a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000993e:	01 d0                	add    eax,edx
c0009940:	c1 e0 0c             	shl    eax,0xc
c0009943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009947:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000994c:	8b 00                	mov    eax,DWORD PTR [eax]
c000994e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009951:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000995b:	6a 01                	push   0x1
c000995d:	50                   	push   eax
c000995e:	e8 97 fc ff ff       	call   c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009963:	83 c4 0c             	add    esp,0xc
c0009966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000996a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009970:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009978:	25 01 04 00 00       	and    eax,0x401
c000997d:	3d 01 04 00 00       	cmp    eax,0x401
c0009982:	75 19                	jne    c000999d <VAS::~VAS()+0xed>
c0009984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009988:	25 00 f0 ff ff       	and    eax,0xfffff000
c000998d:	83 ec 0c             	sub    esp,0xc
c0009990:	50                   	push   eax
c0009991:	e8 59 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0009996:	83 c4 10             	add    esp,0x10
c0009999:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000999d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00099a1:	eb 84                	jmp    c0009927 <VAS::~VAS()+0x77>
c00099a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a7:	25 00 04 00 00       	and    eax,0x400
c00099ac:	74 19                	je     c00099c7 <VAS::~VAS()+0x117>
c00099ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b7:	83 ec 0c             	sub    esp,0xc
c00099ba:	50                   	push   eax
c00099bb:	e8 2f e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099c0:	83 c4 10             	add    esp,0x10
c00099c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099cb:	e9 1e ff ff ff       	jmp    c00098ee <VAS::~VAS()+0x3e>
c00099d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	83 ec 0c             	sub    esp,0xc
c00099da:	50                   	push   eax
c00099db:	e8 65 fc ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099ea:	83 ec 0c             	sub    esp,0xc
c00099ed:	50                   	push   eax
c00099ee:	e8 fc e0 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099fa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00099ff:	48                   	dec    eax
c0009a00:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0009a05:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009a0a:	85 c0                	test   eax,eax
c0009a0c:	75 01                	jne    c0009a0f <VAS::~VAS()+0x15f>
c0009a0e:	fb                   	sti    
c0009a0f:	90                   	nop
c0009a10:	83 c4 2c             	add    esp,0x2c
c0009a13:	c3                   	ret    

c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a14:	55                   	push   ebp
c0009a15:	57                   	push   edi
c0009a16:	56                   	push   esi
c0009a17:	53                   	push   ebx
c0009a18:	83 ec 1c             	sub    esp,0x1c
c0009a1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a29:	77 0b                	ja     c0009a36 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a2b:	0f 20 d8             	mov    eax,cr3
c0009a2e:	0f 20 d8             	mov    eax,cr3
c0009a31:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a34:	75 47                	jne    c0009a7d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3a:	09 d8                	or     eax,ebx
c0009a3c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a41:	75 57                	jne    c0009a9a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a43:	89 de                	mov    esi,ebx
c0009a45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a48:	c1 ee 16             	shr    esi,0x16
c0009a4b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a52:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a56:	74 54                	je     c0009aac <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a5c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a62:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a66:	c1 e6 0c             	shl    esi,0xc
c0009a69:	c1 eb 0a             	shr    ebx,0xa
c0009a6c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a72:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a75:	83 c4 1c             	add    esp,0x1c
c0009a78:	5b                   	pop    ebx
c0009a79:	5e                   	pop    esi
c0009a7a:	5f                   	pop    edi
c0009a7b:	5d                   	pop    ebp
c0009a7c:	c3                   	ret    
c0009a7d:	83 ec 0c             	sub    esp,0xc
c0009a80:	68 d8 e1 01 c0       	push   0xc001e1d8
c0009a85:	e8 84 0b 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0009a8a:	83 c4 10             	add    esp,0x10
c0009a8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a91:	09 d8                	or     eax,ebx
c0009a93:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a98:	74 a9                	je     c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a9a:	83 ec 0c             	sub    esp,0xc
c0009a9d:	68 40 e2 01 c0       	push   0xc001e240
c0009aa2:	e8 7c 68 00 00       	call   c0010323 <KePanic(char const*)>
c0009aa7:	83 c4 10             	add    esp,0x10
c0009aaa:	eb 97                	jmp    c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ab0:	e8 9c e0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ab5:	83 ec 0c             	sub    esp,0xc
c0009ab8:	89 c5                	mov    ebp,eax
c0009aba:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009ac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ac4:	6a 01                	push   0x1
c0009ac6:	e8 86 f8 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009acb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ad2:	6a 01                	push   0x1
c0009ad4:	50                   	push   eax
c0009ad5:	55                   	push   ebp
c0009ad6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009adc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ae0:	51                   	push   ecx
c0009ae1:	e8 28 02 00 00       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ae6:	83 c4 1c             	add    esp,0x1c
c0009ae9:	68 00 10 00 00       	push   0x1000
c0009aee:	6a 00                	push   0x0
c0009af0:	50                   	push   eax
c0009af1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009af5:	e8 d6 69 ff ff       	call   c00004d0 <memset>
c0009afa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009afe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b01:	e8 3f fb ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b0d:	83 c4 10             	add    esp,0x10
c0009b10:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b13:	e9 40 ff ff ff       	jmp    c0009a58 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b18 <VAS::allocatePages(int, int)>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 1c             	sub    esp,0x1c
c0009b1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b23:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009b28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b34:	83 e0 01             	and    eax,0x1
c0009b37:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b3f:	0f 85 cc 00 00 00    	jne    c0009c11 <VAS::allocatePages(int, int)+0xf9>
c0009b45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b4c:	85 c0                	test   eax,eax
c0009b4e:	0f 84 a1 00 00 00    	je     c0009bf5 <VAS::allocatePages(int, int)+0xdd>
c0009b54:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b5c:	c1 e6 0c             	shl    esi,0xc
c0009b5f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b63:	85 c0                	test   eax,eax
c0009b65:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b68:	7e 33                	jle    c0009b9d <VAS::allocatePages(int, int)+0x85>
c0009b6a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b72:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b78:	e8 d4 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009b7d:	55                   	push   ebp
c0009b7e:	53                   	push   ebx
c0009b7f:	50                   	push   eax
c0009b80:	57                   	push   edi
c0009b81:	e8 8e fe ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b86:	83 c4 10             	add    esp,0x10
c0009b89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8e:	74 03                	je     c0009b93 <VAS::allocatePages(int, int)+0x7b>
c0009b90:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b93:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b99:	39 de                	cmp    esi,ebx
c0009b9b:	75 db                	jne    c0009b78 <VAS::allocatePages(int, int)+0x60>
c0009b9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba2:	75 12                	jne    c0009bb6 <VAS::allocatePages(int, int)+0x9e>
c0009ba4:	0f 20 d8             	mov    eax,cr3
c0009ba7:	0f 22 d8             	mov    cr3,eax
c0009baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bae:	83 c4 1c             	add    esp,0x1c
c0009bb1:	5b                   	pop    ebx
c0009bb2:	5e                   	pop    esi
c0009bb3:	5f                   	pop    edi
c0009bb4:	5d                   	pop    ebp
c0009bb5:	c3                   	ret    
c0009bb6:	c1 ee 0a             	shr    esi,0xa
c0009bb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bbd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bc3:	c1 eb 0a             	shr    ebx,0xa
c0009bc6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bcc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bd2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd8:	39 c3                	cmp    ebx,eax
c0009bda:	77 ce                	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009bdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be5:	39 d8                	cmp    eax,ebx
c0009be7:	73 f3                	jae    c0009bdc <VAS::allocatePages(int, int)+0xc4>
c0009be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	5b                   	pop    ebx
c0009bf1:	5e                   	pop    esi
c0009bf2:	5f                   	pop    edi
c0009bf3:	5d                   	pop    ebp
c0009bf4:	c3                   	ret    
c0009bf5:	83 ec 0c             	sub    esp,0xc
c0009bf8:	68 64 e2 01 c0       	push   0xc001e264
c0009bfd:	e8 21 67 00 00       	call   c0010323 <KePanic(char const*)>
c0009c02:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c09:	83 c4 10             	add    esp,0x10
c0009c0c:	e9 43 ff ff ff       	jmp    c0009b54 <VAS::allocatePages(int, int)+0x3c>
c0009c11:	83 ec 0c             	sub    esp,0xc
c0009c14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c18:	51                   	push   ecx
c0009c19:	e8 33 f7 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c22:	83 c4 10             	add    esp,0x10
c0009c25:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c2a:	0f 87 9b 00 00 00    	ja     c0009ccb <VAS::allocatePages(int, int)+0x1b3>
c0009c30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c34:	85 d2                	test   edx,edx
c0009c36:	7e 3c                	jle    c0009c74 <VAS::allocatePages(int, int)+0x15c>
c0009c38:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c44:	c1 e5 0c             	shl    ebp,0xc
c0009c47:	81 ce 00 04 00 00    	or     esi,0x400
c0009c4d:	01 dd                	add    ebp,ebx
c0009c4f:	e8 fd de ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009c54:	56                   	push   esi
c0009c55:	53                   	push   ebx
c0009c56:	50                   	push   eax
c0009c57:	57                   	push   edi
c0009c58:	e8 b7 fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c5d:	83 c4 10             	add    esp,0x10
c0009c60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c65:	74 03                	je     c0009c6a <VAS::allocatePages(int, int)+0x152>
c0009c67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c70:	39 dd                	cmp    ebp,ebx
c0009c72:	75 db                	jne    c0009c4f <VAS::allocatePages(int, int)+0x137>
c0009c74:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c79:	0f 84 25 ff ff ff    	je     c0009ba4 <VAS::allocatePages(int, int)+0x8c>
c0009c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c87:	89 d3                	mov    ebx,edx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	c1 eb 0a             	shr    ebx,0xa
c0009c8f:	01 d0                	add    eax,edx
c0009c91:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c97:	c1 e8 0a             	shr    eax,0xa
c0009c9a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ca0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca5:	2d 00 00 40 00       	sub    eax,0x400000
c0009caa:	39 c3                	cmp    ebx,eax
c0009cac:	0f 87 f8 fe ff ff    	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009cb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cbb:	39 d8                	cmp    eax,ebx
c0009cbd:	73 f3                	jae    c0009cb2 <VAS::allocatePages(int, int)+0x19a>
c0009cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	5b                   	pop    ebx
c0009cc7:	5e                   	pop    esi
c0009cc8:	5f                   	pop    edi
c0009cc9:	5d                   	pop    ebp
c0009cca:	c3                   	ret    
c0009ccb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009cd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cdd:	0f 84 4d ff ff ff    	je     c0009c30 <VAS::allocatePages(int, int)+0x118>
c0009ce3:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ceb:	e9 40 ff ff ff       	jmp    c0009c30 <VAS::allocatePages(int, int)+0x118>

c0009cf0 <VAS::setCPUSpecific(unsigned long)>:
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	6a 05                	push   0x5
c0009cf5:	68 00 00 40 c2       	push   0xc2400000
c0009cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfe:	50                   	push   eax
c0009cff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d03:	52                   	push   edx
c0009d04:	e8 0b fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d09:	83 c4 1c             	add    esp,0x1c
c0009d0c:	c3                   	ret    
c0009d0d:	90                   	nop

c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d0e:	55                   	push   ebp
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	53                   	push   ebx
c0009d12:	83 ec 1c             	sub    esp,0x1c
c0009d15:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009d1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d28:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d2e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d32:	83 e0 01             	and    eax,0x1
c0009d35:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d3d:	85 c0                	test   eax,eax
c0009d3f:	7e 39                	jle    c0009d7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	89 f3                	mov    ebx,esi
c0009d47:	c1 e0 0c             	shl    eax,0xc
c0009d4a:	01 f0                	add    eax,esi
c0009d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d50:	55                   	push   ebp
c0009d51:	53                   	push   ebx
c0009d52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d56:	29 f0                	sub    eax,esi
c0009d58:	01 d8                	add    eax,ebx
c0009d5a:	50                   	push   eax
c0009d5b:	57                   	push   edi
c0009d5c:	e8 b3 fc ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d69:	74 03                	je     c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d74:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d78:	75 d6                	jne    c0009d50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d7f:	75 10                	jne    c0009d91 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d81:	0f 20 d8             	mov    eax,cr3
c0009d84:	0f 22 d8             	mov    cr3,eax
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	89 f0                	mov    eax,esi
c0009d8c:	5b                   	pop    ebx
c0009d8d:	5e                   	pop    esi
c0009d8e:	5f                   	pop    edi
c0009d8f:	5d                   	pop    ebp
c0009d90:	c3                   	ret    
c0009d91:	89 f3                	mov    ebx,esi
c0009d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d97:	c1 eb 0a             	shr    ebx,0xa
c0009d9a:	c1 e0 0c             	shl    eax,0xc
c0009d9d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009da3:	01 f0                	add    eax,esi
c0009da5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009dab:	c1 e8 0a             	shr    eax,0xa
c0009dae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009db3:	2d 00 00 40 00       	sub    eax,0x400000
c0009db8:	39 c3                	cmp    ebx,eax
c0009dba:	77 cb                	ja     c0009d87 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009dbc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dbf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc5:	39 d8                	cmp    eax,ebx
c0009dc7:	73 f3                	jae    c0009dbc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc9:	83 c4 1c             	add    esp,0x1c
c0009dcc:	89 f0                	mov    eax,esi
c0009dce:	5b                   	pop    ebx
c0009dcf:	5e                   	pop    esi
c0009dd0:	5f                   	pop    edi
c0009dd1:	5d                   	pop    ebp
c0009dd2:	c3                   	ret    
c0009dd3:	90                   	nop

c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dd4:	55                   	push   ebp
c0009dd5:	57                   	push   edi
c0009dd6:	56                   	push   esi
c0009dd7:	53                   	push   ebx
c0009dd8:	83 ec 1c             	sub    esp,0x1c
c0009ddb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ddf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009de3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009de7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009deb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009df0:	75 4a                	jne    c0009e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009df2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df9:	c1 eb 16             	shr    ebx,0x16
c0009dfc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009e03:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e07:	74 4d                	je     c0009e56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e0d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e11:	c1 e8 0a             	shr    eax,0xa
c0009e14:	80 fa 01             	cmp    dl,0x1
c0009e17:	19 d2                	sbb    edx,edx
c0009e19:	c1 e3 0c             	shl    ebx,0xc
c0009e1c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e20:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e26:	25 fc 0f 00 00       	and    eax,0xffc
c0009e2b:	01 d8                	add    eax,ebx
c0009e2d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e34:	83 c4 1c             	add    esp,0x1c
c0009e37:	5b                   	pop    ebx
c0009e38:	5e                   	pop    esi
c0009e39:	5f                   	pop    edi
c0009e3a:	5d                   	pop    ebp
c0009e3b:	c3                   	ret    
c0009e3c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e40:	83 ec 0c             	sub    esp,0xc
c0009e43:	68 90 e2 01 c0       	push   0xc001e290
c0009e48:	e8 d6 64 00 00       	call   c0010323 <KePanic(char const*)>
c0009e4d:	83 c4 10             	add    esp,0x10
c0009e50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e54:	eb 9c                	jmp    c0009df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e5a:	e8 f2 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	89 c5                	mov    ebp,eax
c0009e64:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009e6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e6e:	6a 01                	push   0x1
c0009e70:	e8 dc f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009e75:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e7c:	6a 01                	push   0x1
c0009e7e:	50                   	push   eax
c0009e7f:	55                   	push   ebp
c0009e80:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e8a:	51                   	push   ecx
c0009e8b:	e8 7e fe ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e90:	83 c4 1c             	add    esp,0x1c
c0009e93:	68 00 10 00 00       	push   0x1000
c0009e98:	6a 00                	push   0x0
c0009e9a:	50                   	push   eax
c0009e9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9f:	e8 2c 66 ff ff       	call   c00004d0 <memset>
c0009ea4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009eab:	e8 95 f7 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009eb0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ebd:	e9 47 ff ff ff       	jmp    c0009e09 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009ec2 <VAS::VAS(bool)>:
c0009ec2:	53                   	push   ebx
c0009ec3:	83 ec 28             	sub    esp,0x28
c0009ec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009edd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009eec:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009eef:	e8 5d dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ef4:	89 c2                	mov    edx,eax
c0009ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009efd:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009f03:	83 ec 0c             	sub    esp,0xc
c0009f06:	6a 01                	push   0x1
c0009f08:	e8 44 f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 c2                	mov    edx,eax
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f19:	83 ec 0c             	sub    esp,0xc
c0009f1c:	6a 03                	push   0x3
c0009f1e:	6a 01                	push   0x1
c0009f20:	52                   	push   edx
c0009f21:	50                   	push   eax
c0009f22:	53                   	push   ebx
c0009f23:	e8 e6 fd ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f28:	83 c4 20             	add    esp,0x20
c0009f2b:	89 c2                	mov    edx,eax
c0009f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f3c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f44:	7f 1c                	jg     c0009f62 <VAS::VAS(bool)+0xa0>
c0009f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f51:	c1 e2 02             	shl    edx,0x2
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f60:	eb da                	jmp    c0009f3c <VAS::VAS(bool)+0x7a>
c0009f62:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f6a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f72:	7f 7a                	jg     c0009fee <VAS::VAS(bool)+0x12c>
c0009f74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f78:	2d 00 02 00 00       	sub    eax,0x200
c0009f7d:	c1 e0 0c             	shl    eax,0xc
c0009f80:	83 c8 05             	or     eax,0x5
c0009f83:	89 c2                	mov    edx,eax
c0009f85:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f90:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f96:	83 e0 10             	and    eax,0x10
c0009f99:	84 c0                	test   al,al
c0009f9b:	74 07                	je     c0009fa4 <VAS::VAS(bool)+0xe2>
c0009f9d:	b8 00 01 00 00       	mov    eax,0x100
c0009fa2:	eb 05                	jmp    c0009fa9 <VAS::VAS(bool)+0xe7>
c0009fa4:	b8 00 00 00 00       	mov    eax,0x0
c0009fa9:	09 d0                	or     eax,edx
c0009fab:	89 c1                	mov    ecx,eax
c0009fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb8:	c1 e2 02             	shl    edx,0x2
c0009fbb:	01 d0                	add    eax,edx
c0009fbd:	89 ca                	mov    edx,ecx
c0009fbf:	89 10                	mov    DWORD PTR [eax],edx
c0009fc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc5:	2d 40 03 00 00       	sub    eax,0x340
c0009fca:	83 f8 7f             	cmp    eax,0x7f
c0009fcd:	77 16                	ja     c0009fe5 <VAS::VAS(bool)+0x123>
c0009fcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fda:	c1 e2 02             	shl    edx,0x2
c0009fdd:	01 d0                	add    eax,edx
c0009fdf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fe5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe9:	e9 7c ff ff ff       	jmp    c0009f6a <VAS::VAS(bool)+0xa8>
c0009fee:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fff:	83 e0 10             	and    eax,0x10
c000a002:	84 c0                	test   al,al
c000a004:	74 07                	je     c000a00d <VAS::VAS(bool)+0x14b>
c000a006:	b8 03 41 00 00       	mov    eax,0x4103
c000a00b:	eb 05                	jmp    c000a012 <VAS::VAS(bool)+0x150>
c000a00d:	b8 03 40 00 00       	mov    eax,0x4003
c000a012:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a016:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a019:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a01f:	89 02                	mov    DWORD PTR [edx],eax
c000a021:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a026:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a032:	83 ec 08             	sub    esp,0x8
c000a035:	50                   	push   eax
c000a036:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03a:	e8 b1 fc ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a046:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a049:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a04e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a054:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a05a:	83 e0 10             	and    eax,0x10
c000a05d:	84 c0                	test   al,al
c000a05f:	74 07                	je     c000a068 <VAS::VAS(bool)+0x1a6>
c000a061:	b8 00 01 00 00       	mov    eax,0x100
c000a066:	eb 05                	jmp    c000a06d <VAS::VAS(bool)+0x1ab>
c000a068:	b8 00 00 00 00       	mov    eax,0x0
c000a06d:	09 c2                	or     edx,eax
c000a06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a073:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a076:	05 fc 0f 00 00       	add    eax,0xffc
c000a07b:	83 ca 03             	or     edx,0x3
c000a07e:	89 10                	mov    DWORD PTR [eax],edx
c000a080:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a085:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a08b:	83 ec 0c             	sub    esp,0xc
c000a08e:	50                   	push   eax
c000a08f:	e8 4c 1c 00 00       	call   c000bce0 <Device::getName()>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	83 ec 08             	sub    esp,0x8
c000a09a:	68 33 e3 01 c0       	push   0xc001e333
c000a09f:	50                   	push   eax
c000a0a0:	e8 3b 66 ff ff       	call   c00006e0 <strcmp>
c000a0a5:	83 c4 10             	add    esp,0x10
c000a0a8:	85 c0                	test   eax,eax
c000a0aa:	0f 94 c0             	sete   al
c000a0ad:	84 c0                	test   al,al
c000a0af:	0f 84 87 00 00 00    	je     c000a13c <VAS::VAS(bool)+0x27a>
c000a0b5:	fa                   	cli    
c000a0b6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a0bb:	40                   	inc    eax
c000a0bc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a0c1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a0c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0cc:	05 7c 09 00 00       	add    eax,0x97c
c000a0d1:	83 ec 0c             	sub    esp,0xc
c000a0d4:	50                   	push   eax
c000a0d5:	e8 98 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0da:	83 c4 10             	add    esp,0x10
c000a0dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0e2:	89 c3                	mov    ebx,eax
c000a0e4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a0e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0ef:	05 7c 09 00 00       	add    eax,0x97c
c000a0f4:	83 ec 0c             	sub    esp,0xc
c000a0f7:	50                   	push   eax
c000a0f8:	e8 75 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0fd:	83 c4 10             	add    esp,0x10
c000a100:	83 ec 08             	sub    esp,0x8
c000a103:	50                   	push   eax
c000a104:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a108:	e8 19 f5 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a10d:	83 c4 10             	add    esp,0x10
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a117:	6a 11                	push   0x11
c000a119:	53                   	push   ebx
c000a11a:	50                   	push   eax
c000a11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a11f:	e8 f0 f8 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a124:	83 c4 10             	add    esp,0x10
c000a127:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a12c:	48                   	dec    eax
c000a12d:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a132:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a137:	85 c0                	test   eax,eax
c000a139:	75 01                	jne    c000a13c <VAS::VAS(bool)+0x27a>
c000a13b:	fb                   	sti    
c000a13c:	90                   	nop
c000a13d:	83 c4 28             	add    esp,0x28
c000a140:	5b                   	pop    ebx
c000a141:	c3                   	ret    

c000a142 <VAS::evict(unsigned long)>:
c000a142:	55                   	push   ebp
c000a143:	57                   	push   edi
c000a144:	56                   	push   esi
c000a145:	53                   	push   ebx
c000a146:	83 ec 1c             	sub    esp,0x1c
c000a149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a155:	e8 38 f3 ff ff       	call   c0009492 <Virt::allocateSwapfilePage()>
c000a15a:	8b 0d cc ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffcc
c000a160:	89 c7                	mov    edi,eax
c000a162:	85 c9                	test   ecx,ecx
c000a164:	7e 3e                	jle    c000a1a4 <VAS::evict(unsigned long)+0x62>
c000a166:	89 ee                	mov    esi,ebp
c000a168:	31 db                	xor    ebx,ebx
c000a16a:	83 ec 0c             	sub    esp,0xc
c000a16d:	57                   	push   edi
c000a16e:	e8 0d f3 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a173:	89 34 24             	mov    DWORD PTR [esp],esi
c000a176:	01 d8                	add    eax,ebx
c000a178:	6a 01                	push   0x1
c000a17a:	31 d2                	xor    edx,edx
c000a17c:	43                   	inc    ebx
c000a17d:	52                   	push   edx
c000a17e:	81 c6 00 02 00 00    	add    esi,0x200
c000a184:	50                   	push   eax
c000a185:	0f be 05 d8 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ffd8
c000a18c:	8b 14 85 1c 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdace4]
c000a193:	52                   	push   edx
c000a194:	e8 01 2c 00 00       	call   c000cd9a <LogicalDisk::write(unsigned long long, int, void*)>
c000a199:	83 c4 20             	add    esp,0x20
c000a19c:	39 1d cc ff 01 c0    	cmp    DWORD PTR ds:0xc001ffcc,ebx
c000a1a2:	7f c6                	jg     c000a16a <VAS::evict(unsigned long)+0x28>
c000a1a4:	83 ec 08             	sub    esp,0x8
c000a1a7:	c1 e7 0b             	shl    edi,0xb
c000a1aa:	55                   	push   ebp
c000a1ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1af:	50                   	push   eax
c000a1b0:	e8 71 f4 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a1b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b7:	89 d1                	mov    ecx,edx
c000a1b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1bf:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1c5:	09 cf                	or     edi,ecx
c000a1c7:	89 38                	mov    DWORD PTR [eax],edi
c000a1c9:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1cc:	ff 05 a8 2f 02 c0    	inc    DWORD PTR ds:0xc0022fa8
c000a1d2:	e8 18 d9 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c000a1d7:	0f 20 d8             	mov    eax,cr3
c000a1da:	0f 22 d8             	mov    cr3,eax
c000a1dd:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000a1e2:	c7 44 24 40 41 e3 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e341
c000a1ea:	8d 50 01             	lea    edx,[eax+0x1]
c000a1ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1f1:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c000a1f7:	83 c4 2c             	add    esp,0x2c
c000a1fa:	5b                   	pop    ebx
c000a1fb:	5e                   	pop    esi
c000a1fc:	5f                   	pop    edi
c000a1fd:	5d                   	pop    ebp
c000a1fe:	e9 0b 04 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000a203:	90                   	nop

c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a204:	55                   	push   ebp
c000a205:	57                   	push   edi
c000a206:	56                   	push   esi
c000a207:	53                   	push   ebx
c000a208:	83 ec 14             	sub    esp,0x14
c000a20b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a20f:	53                   	push   ebx
c000a210:	68 52 e3 01 c0       	push   0xc001e352
c000a215:	e8 f4 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a223:	74 21                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a225:	83 ec 08             	sub    esp,0x8
c000a228:	53                   	push   ebx
c000a229:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a22d:	57                   	push   edi
c000a22e:	e8 f3 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	89 c6                	mov    esi,eax
c000a238:	85 c0                	test   eax,eax
c000a23a:	74 0a                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a23c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a23e:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a244:	74 0a                	je     c000a250 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a246:	31 c0                	xor    eax,eax
c000a248:	83 c4 0c             	add    esp,0xc
c000a24b:	5b                   	pop    ebx
c000a24c:	5e                   	pop    esi
c000a24d:	5f                   	pop    edi
c000a24e:	5d                   	pop    ebp
c000a24f:	c3                   	ret    
c000a250:	e8 fc d8 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a255:	c1 ed 0b             	shr    ebp,0xb
c000a258:	8b 16                	mov    edx,DWORD PTR [esi]
c000a25a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a260:	09 c2                	or     edx,eax
c000a262:	81 ca 01 08 00 00    	or     edx,0x801
c000a268:	89 16                	mov    DWORD PTR [esi],edx
c000a26a:	8b 35 cc ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ffcc
c000a270:	85 f6                	test   esi,esi
c000a272:	7e 3e                	jle    c000a2b2 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a274:	89 df                	mov    edi,ebx
c000a276:	31 f6                	xor    esi,esi
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	55                   	push   ebp
c000a27c:	e8 ff f1 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a281:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a284:	01 f0                	add    eax,esi
c000a286:	6a 01                	push   0x1
c000a288:	31 d2                	xor    edx,edx
c000a28a:	46                   	inc    esi
c000a28b:	52                   	push   edx
c000a28c:	81 c7 00 02 00 00    	add    edi,0x200
c000a292:	50                   	push   eax
c000a293:	0f be 05 d8 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ffd8
c000a29a:	8b 0c 85 1c 53 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdace4]
c000a2a1:	51                   	push   ecx
c000a2a2:	e8 87 2a 00 00       	call   c000cd2e <LogicalDisk::read(unsigned long long, int, void*)>
c000a2a7:	83 c4 20             	add    esp,0x20
c000a2aa:	39 35 cc ff 01 c0    	cmp    DWORD PTR ds:0xc001ffcc,esi
c000a2b0:	7f c6                	jg     c000a278 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2b2:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000a2b7:	48                   	dec    eax
c000a2b8:	52                   	push   edx
c000a2b9:	a3 a8 2f 02 c0       	mov    ds:0xc0022fa8,eax
c000a2be:	50                   	push   eax
c000a2bf:	53                   	push   ebx
c000a2c0:	68 65 e3 01 c0       	push   0xc001e365
c000a2c5:	e8 44 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a2ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2cd:	e8 90 f1 ff ff       	call   c0009462 <Virt::freeSwapfilePage(unsigned long)>
c000a2d2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	48                   	dec    eax
c000a2db:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a2e0:	85 c0                	test   eax,eax
c000a2e2:	75 01                	jne    c000a2e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2e4:	fb                   	sti    
c000a2e5:	0f 20 d8             	mov    eax,cr3
c000a2e8:	0f 22 d8             	mov    cr3,eax
c000a2eb:	b0 01                	mov    al,0x1
c000a2ed:	e9 56 ff ff ff       	jmp    c000a248 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2f2 <VAS::scanForEviction()>:
c000a2f2:	57                   	push   edi
c000a2f3:	31 ff                	xor    edi,edi
c000a2f5:	56                   	push   esi
c000a2f6:	53                   	push   ebx
c000a2f7:	83 ec 10             	sub    esp,0x10
c000a2fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2fe:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a301:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a307:	75 0e                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a309:	89 da                	mov    edx,ebx
c000a30b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a30e:	c1 ea 16             	shr    edx,0x16
c000a311:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a315:	74 4e                	je     c000a365 <VAS::scanForEviction()+0x73>
c000a317:	53                   	push   ebx
c000a318:	56                   	push   esi
c000a319:	e8 08 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a31e:	5a                   	pop    edx
c000a31f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a321:	59                   	pop    ecx
c000a322:	89 d1                	mov    ecx,edx
c000a324:	81 e1 01 08 00 00    	and    ecx,0x801
c000a32a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a330:	74 3e                	je     c000a370 <VAS::scanForEviction()+0x7e>
c000a332:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a338:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a33e:	76 2b                	jbe    c000a36b <VAS::scanForEviction()+0x79>
c000a340:	47                   	inc    edi
c000a341:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a348:	83 ff 03             	cmp    edi,0x3
c000a34b:	74 32                	je     c000a37f <VAS::scanForEviction()+0x8d>
c000a34d:	31 db                	xor    ebx,ebx
c000a34f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a355:	75 c0                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a357:	89 da                	mov    edx,ebx
c000a359:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a35c:	c1 ea 16             	shr    edx,0x16
c000a35f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a363:	75 b2                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a365:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a36b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a36e:	eb 91                	jmp    c000a301 <VAS::scanForEviction()+0xf>
c000a370:	f6 c2 20             	test   dl,0x20
c000a373:	74 13                	je     c000a388 <VAS::scanForEviction()+0x96>
c000a375:	83 e2 df             	and    edx,0xffffffdf
c000a378:	89 10                	mov    DWORD PTR [eax],edx
c000a37a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a37d:	eb b3                	jmp    c000a332 <VAS::scanForEviction()+0x40>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	31 c0                	xor    eax,eax
c000a384:	5b                   	pop    ebx
c000a385:	5e                   	pop    esi
c000a386:	5f                   	pop    edi
c000a387:	c3                   	ret    
c000a388:	83 ec 08             	sub    esp,0x8
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a392:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a396:	53                   	push   ebx
c000a397:	68 7a e3 01 c0       	push   0xc001e37a
c000a39c:	e8 6d 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3a1:	58                   	pop    eax
c000a3a2:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3a5:	5a                   	pop    edx
c000a3a6:	51                   	push   ecx
c000a3a7:	56                   	push   esi
c000a3a8:	e8 95 fd ff ff       	call   c000a142 <VAS::evict(unsigned long)>
c000a3ad:	5b                   	pop    ebx
c000a3ae:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3b1:	5f                   	pop    edi
c000a3b2:	50                   	push   eax
c000a3b3:	68 8e e3 01 c0       	push   0xc001e38e
c000a3b8:	e8 51 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3bd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3cb:	83 c4 10             	add    esp,0x10
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	c3                   	ret    

c000a3d2 <mapVASFirstTime>:
c000a3d2:	55                   	push   ebp
c000a3d3:	57                   	push   edi
c000a3d4:	56                   	push   esi
c000a3d5:	53                   	push   ebx
c000a3d6:	83 ec 0c             	sub    esp,0xc
c000a3d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3de:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3e1:	4a                   	dec    edx
c000a3e2:	0f 84 c8 00 00 00    	je     c000a4b0 <mapVASFirstTime+0xde>
c000a3e8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3eb:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3ee:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3f3:	c1 e5 15             	shl    ebp,0x15
c000a3f6:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3fb:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a401:	29 eb                	sub    ebx,ebp
c000a403:	29 ef                	sub    edi,ebp
c000a405:	e8 47 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a40a:	83 ec 0c             	sub    esp,0xc
c000a40d:	68 03 04 00 00       	push   0x403
c000a412:	6a 01                	push   0x1
c000a414:	53                   	push   ebx
c000a415:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a41b:	50                   	push   eax
c000a41c:	56                   	push   esi
c000a41d:	e8 ec f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a422:	83 c4 20             	add    esp,0x20
c000a425:	39 fb                	cmp    ebx,edi
c000a427:	75 dc                	jne    c000a405 <mapVASFirstTime+0x33>
c000a429:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a42e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a433:	29 eb                	sub    ebx,ebp
c000a435:	29 ef                	sub    edi,ebp
c000a437:	e8 15 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a43c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a440:	19 d2                	sbb    edx,edx
c000a442:	83 ec 0c             	sub    esp,0xc
c000a445:	83 e2 04             	and    edx,0x4
c000a448:	81 c2 03 04 00 00    	add    edx,0x403
c000a44e:	52                   	push   edx
c000a44f:	6a 01                	push   0x1
c000a451:	53                   	push   ebx
c000a452:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a458:	50                   	push   eax
c000a459:	56                   	push   esi
c000a45a:	e8 af f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a45f:	83 c4 20             	add    esp,0x20
c000a462:	39 df                	cmp    edi,ebx
c000a464:	75 d1                	jne    c000a437 <mapVASFirstTime+0x65>
c000a466:	83 ec 0c             	sub    esp,0xc
c000a469:	bb 7c 20 02 c0       	mov    ebx,0xc002207c
c000a46e:	6a 04                	push   0x4
c000a470:	81 eb 00 10 02 c0    	sub    ebx,0xc0021000
c000a476:	6a ff                	push   0xffffffff
c000a478:	c1 eb 0c             	shr    ebx,0xc
c000a47b:	53                   	push   ebx
c000a47c:	68 00 10 02 c0       	push   0xc0021000
c000a481:	56                   	push   esi
c000a482:	e8 21 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a487:	83 c4 14             	add    esp,0x14
c000a48a:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000a48f:	6a 04                	push   0x4
c000a491:	6a ff                	push   0xffffffff
c000a493:	53                   	push   ebx
c000a494:	68 00 10 02 c0       	push   0xc0021000
c000a499:	50                   	push   eax
c000a49a:	e8 09 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a49f:	0f 20 d8             	mov    eax,cr3
c000a4a2:	0f 22 d8             	mov    cr3,eax
c000a4a5:	83 c4 20             	add    esp,0x20
c000a4a8:	83 c4 0c             	add    esp,0xc
c000a4ab:	5b                   	pop    ebx
c000a4ac:	5e                   	pop    esi
c000a4ad:	5f                   	pop    edi
c000a4ae:	5d                   	pop    ebp
c000a4af:	c3                   	ret    
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	68 a1 e3 01 c0       	push   0xc001e3a1
c000a4b8:	e8 51 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4bd:	83 c4 10             	add    esp,0x10
c000a4c0:	83 c4 0c             	add    esp,0xc
c000a4c3:	5b                   	pop    ebx
c000a4c4:	5e                   	pop    esi
c000a4c5:	5f                   	pop    edi
c000a4c6:	5d                   	pop    ebp
c000a4c7:	c3                   	ret    

c000a4c8 <__cxa_atexit>:
c000a4c8:	31 c0                	xor    eax,eax
c000a4ca:	c3                   	ret    

c000a4cb <__cxa_finalize>:
c000a4cb:	c3                   	ret    

c000a4cc <__stack_chk_fail>:
c000a4cc:	55                   	push   ebp
c000a4cd:	89 e5                	mov    ebp,esp
c000a4cf:	83 ec 10             	sub    esp,0x10
c000a4d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4d5:	68 ba e3 01 c0       	push   0xc001e3ba
c000a4da:	e8 2f 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4df:	58                   	pop    eax
c000a4e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4e3:	5a                   	pop    edx
c000a4e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4e7:	68 ba e3 01 c0       	push   0xc001e3ba
c000a4ec:	e8 1d 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4f1:	c7 04 24 c2 e3 01 c0 	mov    DWORD PTR [esp],0xc001e3c2
c000a4f8:	e8 26 5e 00 00       	call   c0010323 <KePanic(char const*)>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	c9                   	leave  
c000a501:	c3                   	ret    

c000a502 <__cxa_pure_virtual>:
c000a502:	83 ec 18             	sub    esp,0x18
c000a505:	68 da e3 01 c0       	push   0xc001e3da
c000a50a:	e8 14 5e 00 00       	call   c0010323 <KePanic(char const*)>
c000a50f:	83 c4 1c             	add    esp,0x1c
c000a512:	c3                   	ret    

c000a513 <operator new[](unsigned long)>:
c000a513:	e9 5d d3 ff ff       	jmp    c0007875 <malloc>

c000a518 <operator delete(void*, unsigned long)>:
c000a518:	e9 78 d3 ff ff       	jmp    c0007895 <rfree>

c000a51d <operator delete[](void*)>:
c000a51d:	e9 73 d3 ff ff       	jmp    c0007895 <rfree>

c000a522 <operator delete[](void*, unsigned long)>:
c000a522:	e9 6e d3 ff ff       	jmp    c0007895 <rfree>

c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a527:	55                   	push   ebp
c000a528:	b9 04 00 00 00       	mov    ecx,0x4
c000a52d:	57                   	push   edi
c000a52e:	56                   	push   esi
c000a52f:	be 2f e0 01 c0       	mov    esi,0xc001e02f
c000a534:	53                   	push   ebx
c000a535:	83 ec 20             	sub    esp,0x20
c000a538:	a1 2e e0 01 c0       	mov    eax,ds:0xc001e02e
c000a53d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a541:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a545:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a549:	a1 3b e0 01 c0       	mov    eax,ds:0xc001e03b
c000a54e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a556:	fc                   	cld    
c000a557:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a559:	89 ee                	mov    esi,ebp
c000a55b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a55f:	eb 02                	jmp    c000a563 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a561:	89 c6                	mov    esi,eax
c000a563:	31 d2                	xor    edx,edx
c000a565:	41                   	inc    ecx
c000a566:	89 f0                	mov    eax,esi
c000a568:	f7 f3                	div    ebx
c000a56a:	39 de                	cmp    esi,ebx
c000a56c:	73 f3                	jae    c000a561 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a56e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a571:	eb 02                	jmp    c000a575 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a573:	89 c5                	mov    ebp,eax
c000a575:	31 d2                	xor    edx,edx
c000a577:	49                   	dec    ecx
c000a578:	89 e8                	mov    eax,ebp
c000a57a:	f7 f3                	div    ebx
c000a57c:	39 dd                	cmp    ebp,ebx
c000a57e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a582:	88 11                	mov    BYTE PTR [ecx],dl
c000a584:	73 ed                	jae    c000a573 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a586:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a58a:	83 c4 20             	add    esp,0x20
c000a58d:	5b                   	pop    ebx
c000a58e:	5e                   	pop    esi
c000a58f:	5f                   	pop    edi
c000a590:	5d                   	pop    ebp
c000a591:	c3                   	ret    

c000a592 <Dbg::logc(char)>:
c000a592:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a596:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a59d:	75 12                	jne    c000a5b1 <Dbg::logc(char)+0x1f>
c000a59f:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5a4:	ec                   	in     al,dx
c000a5a5:	a8 20                	test   al,0x20
c000a5a7:	74 fb                	je     c000a5a4 <Dbg::logc(char)+0x12>
c000a5a9:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5ae:	88 c8                	mov    al,cl
c000a5b0:	ee                   	out    dx,al
c000a5b1:	c3                   	ret    

c000a5b2 <Dbg::logs(char*)>:
c000a5b2:	53                   	push   ebx
c000a5b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5ba:	84 c0                	test   al,al
c000a5bc:	74 0f                	je     c000a5cd <Dbg::logs(char*)+0x1b>
c000a5be:	50                   	push   eax
c000a5bf:	43                   	inc    ebx
c000a5c0:	e8 cd ff ff ff       	call   c000a592 <Dbg::logc(char)>
c000a5c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c8:	5a                   	pop    edx
c000a5c9:	84 c0                	test   al,al
c000a5cb:	75 f1                	jne    c000a5be <Dbg::logs(char*)+0xc>
c000a5cd:	5b                   	pop    ebx
c000a5ce:	c3                   	ret    

c000a5cf <Dbg::logWriteInt(unsigned int)>:
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	6a 0a                	push   0xa
c000a5d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d8:	50                   	push   eax
c000a5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dd:	50                   	push   eax
c000a5de:	e8 44 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5e3:	50                   	push   eax
c000a5e4:	e8 c9 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a5e9:	83 c4 20             	add    esp,0x20
c000a5ec:	c3                   	ret    

c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5ed:	83 ec 10             	sub    esp,0x10
c000a5f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5f4:	50                   	push   eax
c000a5f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f9:	50                   	push   eax
c000a5fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5fe:	52                   	push   edx
c000a5ff:	e8 23 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a604:	50                   	push   eax
c000a605:	e8 a8 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a60a:	83 c4 20             	add    esp,0x20
c000a60d:	c3                   	ret    

c000a60e <Dbg::kprintf(char const*, ...)>:
c000a60e:	55                   	push   ebp
c000a60f:	57                   	push   edi
c000a610:	56                   	push   esi
c000a611:	53                   	push   ebx
c000a612:	83 ec 0c             	sub    esp,0xc
c000a615:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a619:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a620:	74 08                	je     c000a62a <Dbg::kprintf(char const*, ...)+0x1c>
c000a622:	83 c4 0c             	add    esp,0xc
c000a625:	5b                   	pop    ebx
c000a626:	5e                   	pop    esi
c000a627:	5f                   	pop    edi
c000a628:	5d                   	pop    ebp
c000a629:	c3                   	ret    
c000a62a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a62e:	31 ff                	xor    edi,edi
c000a630:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a634:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a637:	84 c0                	test   al,al
c000a639:	74 e7                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a63b:	8d 77 01             	lea    esi,[edi+0x1]
c000a63e:	3c 25                	cmp    al,0x25
c000a640:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a643:	75 47                	jne    c000a68c <Dbg::kprintf(char const*, ...)+0x7e>
c000a645:	83 c7 02             	add    edi,0x2
c000a648:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a64b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a64e:	83 e8 25             	sub    eax,0x25
c000a651:	3c 53                	cmp    al,0x53
c000a653:	0f 87 d2 00 00 00    	ja     c000a72b <Dbg::kprintf(char const*, ...)+0x11d>
c000a659:	25 ff 00 00 00       	and    eax,0xff
c000a65e:	ff 24 85 f0 e3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1c10]
c000a665:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a669:	89 c8                	mov    eax,ecx
c000a66b:	83 c1 04             	add    ecx,0x4
c000a66e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a672:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a674:	55                   	push   ebp
c000a675:	e8 55 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a67a:	58                   	pop    eax
c000a67b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a67e:	84 c0                	test   al,al
c000a680:	74 a0                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a682:	8d 77 01             	lea    esi,[edi+0x1]
c000a685:	3c 25                	cmp    al,0x25
c000a687:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a68a:	74 b9                	je     c000a645 <Dbg::kprintf(char const*, ...)+0x37>
c000a68c:	50                   	push   eax
c000a68d:	89 f7                	mov    edi,esi
c000a68f:	e8 fe fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a694:	89 ee                	mov    esi,ebp
c000a696:	58                   	pop    eax
c000a697:	eb e2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a699:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a69d:	89 c8                	mov    eax,ecx
c000a69f:	83 c1 04             	add    ecx,0x4
c000a6a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a8:	50                   	push   eax
c000a6a9:	e8 04 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a6ae:	58                   	pop    eax
c000a6af:	eb ca                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b5:	89 d0                	mov    eax,edx
c000a6b7:	83 c2 04             	add    edx,0x4
c000a6ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6be:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6c0:	50                   	push   eax
c000a6c1:	e8 09 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a6c6:	58                   	pop    eax
c000a6c7:	eb b2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	83 c2 04             	add    edx,0x4
c000a6d2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d9:	50                   	push   eax
c000a6da:	e8 b3 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a6df:	58                   	pop    eax
c000a6e0:	eb 99                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e6:	89 c8                	mov    eax,ecx
c000a6e8:	83 c1 04             	add    ecx,0x4
c000a6eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6ef:	6a 10                	push   0x10
c000a6f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6f3:	51                   	push   ecx
c000a6f4:	e8 f4 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f9:	5d                   	pop    ebp
c000a6fa:	58                   	pop    eax
c000a6fb:	e9 7b ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a704:	89 d0                	mov    eax,edx
c000a706:	83 c2 08             	add    edx,0x8
c000a709:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a70d:	6a 10                	push   0x10
c000a70f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a711:	50                   	push   eax
c000a712:	e8 d6 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a717:	58                   	pop    eax
c000a718:	5a                   	pop    edx
c000a719:	e9 5d ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a71e:	6a 25                	push   0x25
c000a720:	e8 6d fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a725:	5a                   	pop    edx
c000a726:	e9 50 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a72b:	6a 25                	push   0x25
c000a72d:	e8 60 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a732:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a736:	50                   	push   eax
c000a737:	e8 56 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a73c:	5a                   	pop    edx
c000a73d:	59                   	pop    ecx
c000a73e:	e9 38 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a743:	90                   	nop

c000a744 <File::read(unsigned long long, void*, int*)>:
c000a744:	53                   	push   ebx
c000a745:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a749:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a74d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a754:	3c 19                	cmp    al,0x19
c000a756:	77 35                	ja     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a758:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a75f:	85 c0                	test   eax,eax
c000a761:	74 2a                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a763:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a769:	85 c0                	test   eax,eax
c000a76b:	74 20                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a76d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a771:	74 21                	je     c000a794 <File::read(unsigned long long, void*, int*)+0x50>
c000a773:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a775:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a779:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a787:	5b                   	pop    ebx
c000a788:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a78b:	ff e0                	jmp    eax
c000a78d:	b8 0b 00 00 00       	mov    eax,0xb
c000a792:	eb 05                	jmp    c000a799 <File::read(unsigned long long, void*, int*)+0x55>
c000a794:	b8 05 00 00 00       	mov    eax,0x5
c000a799:	5b                   	pop    ebx
c000a79a:	c3                   	ret    
c000a79b:	90                   	nop

c000a79c <File::write(unsigned long long, void*, int*)>:
c000a79c:	53                   	push   ebx
c000a79d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7ac:	3c 19                	cmp    al,0x19
c000a7ae:	77 35                	ja     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b0:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a7b7:	85 c0                	test   eax,eax
c000a7b9:	74 2a                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7bb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7c1:	85 c0                	test   eax,eax
c000a7c3:	74 20                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c9:	74 21                	je     c000a7ec <File::write(unsigned long long, void*, int*)+0x50>
c000a7cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7df:	5b                   	pop    ebx
c000a7e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7e3:	ff e0                	jmp    eax
c000a7e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ea:	eb 05                	jmp    c000a7f1 <File::write(unsigned long long, void*, int*)+0x55>
c000a7ec:	b8 05 00 00 00       	mov    eax,0x5
c000a7f1:	5b                   	pop    ebx
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <Directory::read(unsigned long long, void*, int*)>:
c000a7f4:	53                   	push   ebx
c000a7f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a804:	3c 19                	cmp    al,0x19
c000a806:	77 35                	ja     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a808:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a80f:	85 c0                	test   eax,eax
c000a811:	74 2a                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a813:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a819:	85 c0                	test   eax,eax
c000a81b:	74 20                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a81d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a821:	74 21                	je     c000a844 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a823:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a829:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a833:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a837:	5b                   	pop    ebx
c000a838:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a83b:	ff e0                	jmp    eax
c000a83d:	b8 0b 00 00 00       	mov    eax,0xb
c000a842:	eb 05                	jmp    c000a849 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a844:	b8 05 00 00 00       	mov    eax,0x5
c000a849:	5b                   	pop    ebx
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Directory::write(unsigned long long, void*, int*)>:
c000a84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a850:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a857:	b8 0b 00 00 00       	mov    eax,0xb
c000a85c:	80 fa 19             	cmp    dl,0x19
c000a85f:	77 18                	ja     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a861:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000a868:	85 d2                	test   edx,edx
c000a86a:	74 0d                	je     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a86c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a873:	19 c0                	sbb    eax,eax
c000a875:	83 e0 0a             	and    eax,0xa
c000a878:	40                   	inc    eax
c000a879:	c3                   	ret    

c000a87a <File::isAtty()>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Directory::isAtty()>:
c000a87e:	31 c0                	xor    eax,eax
c000a880:	c3                   	ret    
c000a881:	90                   	nop

c000a882 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a882:	b8 0a 00 00 00       	mov    eax,0xa
c000a887:	c3                   	ret    

c000a888 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a888:	b8 0a 00 00 00       	mov    eax,0xa
c000a88d:	c3                   	ret    

c000a88e <Filesystem::allocateSwapfile(char const*, int)>:
c000a88e:	31 c0                	xor    eax,eax
c000a890:	31 d2                	xor    edx,edx
c000a892:	c3                   	ret    
c000a893:	90                   	nop

c000a894 <File::~File()>:
c000a894:	83 ec 0c             	sub    esp,0xc
c000a897:	ba b0 e5 01 c0       	mov    edx,0xc001e5b0
c000a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a0:	89 10                	mov    DWORD PTR [eax],edx
c000a8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a6:	83 ec 0c             	sub    esp,0xc
c000a8a9:	50                   	push   eax
c000a8aa:	e8 41 e8 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	90                   	nop
c000a8b3:	83 c4 0c             	add    esp,0xc
c000a8b6:	c3                   	ret    
c000a8b7:	90                   	nop

c000a8b8 <File::~File()>:
c000a8b8:	83 ec 0c             	sub    esp,0xc
c000a8bb:	83 ec 0c             	sub    esp,0xc
c000a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c2:	e8 cd ff ff ff       	call   c000a894 <File::~File()>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	83 ec 08             	sub    esp,0x8
c000a8cd:	68 14 01 00 00       	push   0x114
c000a8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d6:	e8 3d fc ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	83 c4 0c             	add    esp,0xc
c000a8e1:	c3                   	ret    

c000a8e2 <Directory::~Directory()>:
c000a8e2:	83 ec 0c             	sub    esp,0xc
c000a8e5:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c000a8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ee:	89 10                	mov    DWORD PTR [eax],edx
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	83 ec 0c             	sub    esp,0xc
c000a8f7:	50                   	push   eax
c000a8f8:	e8 f3 e7 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	90                   	nop
c000a901:	83 c4 0c             	add    esp,0xc
c000a904:	c3                   	ret    
c000a905:	90                   	nop

c000a906 <Directory::~Directory()>:
c000a906:	83 ec 0c             	sub    esp,0xc
c000a909:	83 ec 0c             	sub    esp,0xc
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 cd ff ff ff       	call   c000a8e2 <Directory::~Directory()>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 ec 08             	sub    esp,0x8
c000a91b:	68 14 01 00 00       	push   0x114
c000a920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a924:	e8 ef fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	83 c4 0c             	add    esp,0xc
c000a92f:	c3                   	ret    

c000a930 <Filesystem::Filesystem()>:
c000a930:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c000a935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a939:	89 10                	mov    DWORD PTR [eax],edx
c000a93b:	8b 15 b4 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fb4
c000a941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000a951:	90                   	nop
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <Filesystem::~Filesystem()>:
c000a954:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c000a959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95d:	89 10                	mov    DWORD PTR [eax],edx
c000a95f:	90                   	nop
c000a960:	c3                   	ret    
c000a961:	90                   	nop

c000a962 <Filesystem::~Filesystem()>:
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a969:	e8 e6 ff ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c000a96e:	83 c4 04             	add    esp,0x4
c000a971:	83 ec 08             	sub    esp,0x8
c000a974:	6a 08                	push   0x8
c000a976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a97a:	e8 99 fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a97f:	83 c4 10             	add    esp,0x10
c000a982:	83 c4 0c             	add    esp,0xc
c000a985:	c3                   	ret    

c000a986 <Fs::getcwd(Process*, char*, int)>:
c000a986:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a98a:	31 c0                	xor    eax,eax
c000a98c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a98f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a993:	7d 15                	jge    c000a9aa <Fs::getcwd(Process*, char*, int)+0x24>
c000a995:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a999:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9a3:	84 c9                	test   cl,cl
c000a9a5:	74 06                	je     c000a9ad <Fs::getcwd(Process*, char*, int)+0x27>
c000a9a7:	40                   	inc    eax
c000a9a8:	eb e2                	jmp    c000a98c <Fs::getcwd(Process*, char*, int)+0x6>
c000a9aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9ad:	31 c0                	xor    eax,eax
c000a9af:	c3                   	ret    

c000a9b0 <Fs::initVFS()>:
c000a9b0:	83 ec 18             	sub    esp,0x18
c000a9b3:	6a 08                	push   0x8
c000a9b5:	e8 bb ce ff ff       	call   c0007875 <malloc>
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	e8 9a c7 00 00       	call   c001715c <FAT::FAT()>
c000a9c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c9:	e8 a7 ce ff ff       	call   c0007875 <malloc>
c000a9ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d1:	e8 24 d5 00 00       	call   c0017efa <ISO9660::ISO9660()>
c000a9d6:	83 c4 1c             	add    esp,0x1c
c000a9d9:	c3                   	ret    

c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9da:	55                   	push   ebp
c000a9db:	57                   	push   edi
c000a9dc:	56                   	push   esi
c000a9dd:	53                   	push   ebx
c000a9de:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f9:	68 00 04 00 00       	push   0x400
c000a9fe:	6a 00                	push   0x0
c000aa00:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa04:	56                   	push   esi
c000aa05:	e8 c6 5a ff ff       	call   c00004d0 <memset>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa11:	75 0b                	jne    c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa13:	50                   	push   eax
c000aa14:	50                   	push   eax
c000aa15:	57                   	push   edi
c000aa16:	56                   	push   esi
c000aa17:	e8 e4 5b ff ff       	call   c0000600 <strcpy>
c000aa1c:	eb 41                	jmp    c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa1e:	8a 07                	mov    al,BYTE PTR [edi]
c000aa20:	3c 5c                	cmp    al,0x5c
c000aa22:	74 04                	je     c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa24:	3c 2f                	cmp    al,0x2f
c000aa26:	75 18                	jne    c000aa40 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa28:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa2b:	3c 60                	cmp    al,0x60
c000aa2d:	7e 03                	jle    c000aa32 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa2f:	83 e8 20             	sub    eax,0x20
c000aa32:	88 04 24             	mov    BYTE PTR [esp],al
c000aa35:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	eb 18                	jmp    c000aa58 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa40:	50                   	push   eax
c000aa41:	50                   	push   eax
c000aa42:	55                   	push   ebp
c000aa43:	56                   	push   esi
c000aa44:	e8 b7 5b ff ff       	call   c0000600 <strcpy>
c000aa49:	5a                   	pop    edx
c000aa4a:	59                   	pop    ecx
c000aa4b:	68 e9 f2 01 c0       	push   0xc001f2e9
c000aa50:	56                   	push   esi
c000aa51:	e8 6a 5d ff ff       	call   c00007c0 <strcat>
c000aa56:	5d                   	pop    ebp
c000aa57:	58                   	pop    eax
c000aa58:	57                   	push   edi
c000aa59:	56                   	push   esi
c000aa5a:	e8 61 5d ff ff       	call   c00007c0 <strcat>
c000aa5f:	83 c4 10             	add    esp,0x10
c000aa62:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa65:	3c 60                	cmp    al,0x60
c000aa67:	7e 03                	jle    c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa69:	83 e8 20             	sub    eax,0x20
c000aa6c:	88 04 24             	mov    BYTE PTR [esp],al
c000aa6f:	88 03                	mov    BYTE PTR [ebx],al
c000aa71:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa78:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa7e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa82:	bf 03 00 00 00       	mov    edi,0x3
c000aa87:	b8 03 00 00 00       	mov    eax,0x3
c000aa8c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa8f:	84 d2                	test   dl,dl
c000aa91:	0f 84 91 00 00 00    	je     c000ab28 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa97:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa9a:	80 fa 5c             	cmp    dl,0x5c
c000aa9d:	74 05                	je     c000aaa4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa9f:	80 fa 2f             	cmp    dl,0x2f
c000aaa2:	75 12                	jne    c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa4:	89 c5                	mov    ebp,eax
c000aaa6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaab:	74 09                	je     c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaad:	40                   	inc    eax
c000aaae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aab2:	89 cf                	mov    edi,ecx
c000aab4:	eb d6                	jmp    c000aa8c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aab6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aabb:	75 5b                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aabd:	80 fa 2e             	cmp    dl,0x2e
c000aac0:	75 56                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aac2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aac6:	74 19                	je     c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aacd:	74 53                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aacf:	89 f9                	mov    ecx,edi
c000aad1:	41                   	inc    ecx
c000aad2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad5:	80 fa 2f             	cmp    dl,0x2f
c000aad8:	74 f7                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aada:	80 fa 5c             	cmp    dl,0x5c
c000aadd:	74 f2                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aadf:	eb d1                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aae6:	74 3a                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae8:	83 f8 03             	cmp    eax,0x3
c000aaeb:	74 c5                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaed:	41                   	inc    ecx
c000aaee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aaf1:	80 fa 2f             	cmp    dl,0x2f
c000aaf4:	74 f7                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf6:	80 fa 5c             	cmp    dl,0x5c
c000aaf9:	74 f2                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aafb:	48                   	dec    eax
c000aafc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab00:	75 06                	jne    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab06:	eb f3                	jmp    c000aafb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab08:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab0c:	74 07                	je     c000ab15 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab12:	48                   	dec    eax
c000ab13:	eb f3                	jmp    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab15:	40                   	inc    eax
c000ab16:	eb 9a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab18:	80 fa 2f             	cmp    dl,0x2f
c000ab1b:	74 95                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1d:	80 fa 5c             	cmp    dl,0x5c
c000ab20:	74 90                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab22:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab25:	40                   	inc    eax
c000ab26:	eb 8a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab2c:	83 ec 0c             	sub    esp,0xc
c000ab2f:	53                   	push   ebx
c000ab30:	e8 0b 5a ff ff       	call   c0000540 <strlen>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab3d:	75 26                	jne    c000ab65 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab3f:	83 ec 0c             	sub    esp,0xc
c000ab42:	53                   	push   ebx
c000ab43:	e8 f8 59 ff ff       	call   c0000540 <strlen>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab50:	74 26                	je     c000ab78 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab52:	83 ec 0c             	sub    esp,0xc
c000ab55:	53                   	push   ebx
c000ab56:	e8 e5 59 ff ff       	call   c0000540 <strlen>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab63:	eb c7                	jmp    c000ab2c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab65:	83 ec 0c             	sub    esp,0xc
c000ab68:	53                   	push   ebx
c000ab69:	e8 d2 59 ff ff       	call   c0000540 <strlen>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab76:	74 c7                	je     c000ab3f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab78:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab7e:	5b                   	pop    ebx
c000ab7f:	5e                   	pop    esi
c000ab80:	5f                   	pop    edi
c000ab81:	5d                   	pop    ebp
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <File::File(char const*, Process*)>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	6a 00                	push   0x0
c000ab90:	50                   	push   eax
c000ab91:	e8 78 e3 ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	ba b0 e5 01 c0       	mov    edx,0xc001e5b0
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	89 10                	mov    DWORD PTR [eax],edx
c000aba4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb2:	83 c0 0d             	add    eax,0xd
c000abb5:	83 ec 04             	sub    esp,0x4
c000abb8:	52                   	push   edx
c000abb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbd:	50                   	push   eax
c000abbe:	e8 17 fe ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abcd:	8d 50 bf             	lea    edx,[eax-0x41]
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abec:	25 ff 00 00 00       	and    eax,0xff
c000abf1:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 42                	je     c000ac3e <File::File(char const*, Process*)+0xba>
c000abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac06:	25 ff 00 00 00       	and    eax,0xff
c000ac0b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ac12:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac18:	85 c0                	test   eax,eax
c000ac1a:	75 22                	jne    c000ac3e <File::File(char const*, Process*)+0xba>
c000ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac20:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac26:	25 ff 00 00 00       	and    eax,0xff
c000ac2b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	50                   	push   eax
c000ac36:	e8 31 20 00 00       	call   c000cc6c <LogicalDisk::mount()>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	90                   	nop
c000ac3f:	83 c4 0c             	add    esp,0xc
c000ac42:	c3                   	ret    
c000ac43:	90                   	nop

c000ac44 <File::open(FileOpenMode)>:
c000ac44:	53                   	push   ebx
c000ac45:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4a:	83 ec 08             	sub    esp,0x8
c000ac4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac58:	80 fa 19             	cmp    dl,0x19
c000ac5b:	77 40                	ja     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac5d:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac64:	85 d2                	test   edx,edx
c000ac66:	74 35                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac68:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac6e:	85 d2                	test   edx,edx
c000ac70:	74 2b                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac72:	b8 06 00 00 00       	mov    eax,0x6
c000ac77:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac7b:	75 20                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac89:	51                   	push   ecx
c000ac8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac8d:	51                   	push   ecx
c000ac8e:	52                   	push   edx
c000ac8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	85 c0                	test   eax,eax
c000ac97:	75 04                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac9d:	83 c4 08             	add    esp,0x8
c000aca0:	5b                   	pop    ebx
c000aca1:	c3                   	ret    

c000aca2 <File::close()>:
c000aca2:	53                   	push   ebx
c000aca3:	b8 0b 00 00 00       	mov    eax,0xb
c000aca8:	83 ec 08             	sub    esp,0x8
c000acab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acaf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acb6:	80 fa 19             	cmp    dl,0x19
c000acb9:	77 41                	ja     c000acfc <File::close()+0x5a>
c000acbb:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000acc2:	85 db                	test   ebx,ebx
c000acc4:	74 36                	je     c000acfc <File::close()+0x5a>
c000acc6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000accd:	74 2d                	je     c000acfc <File::close()+0x5a>
c000accf:	b8 05 00 00 00       	mov    eax,0x5
c000acd4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd8:	74 22                	je     c000acfc <File::close()+0x5a>
c000acda:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acde:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000ace5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aceb:	53                   	push   ebx
c000acec:	53                   	push   ebx
c000aced:	8b 10                	mov    edx,DWORD PTR [eax]
c000acef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acf5:	50                   	push   eax
c000acf6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	83 c4 08             	add    esp,0x8
c000acff:	5b                   	pop    ebx
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <File::seek(unsigned long long)>:
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	b8 0b 00 00 00       	mov    eax,0xb
c000ad09:	51                   	push   ecx
c000ad0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad1d:	80 fa 19             	cmp    dl,0x19
c000ad20:	77 31                	ja     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad22:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ad29:	85 d2                	test   edx,edx
c000ad2b:	74 26                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad33:	85 d2                	test   edx,edx
c000ad35:	74 1c                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad37:	b8 05 00 00 00       	mov    eax,0x5
c000ad3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad40:	74 11                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad42:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad44:	53                   	push   ebx
c000ad45:	51                   	push   ecx
c000ad46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad4c:	52                   	push   edx
c000ad4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	5a                   	pop    edx
c000ad54:	5b                   	pop    ebx
c000ad55:	5e                   	pop    esi
c000ad56:	c3                   	ret    
c000ad57:	90                   	nop

c000ad58 <File::tell(unsigned long long*)>:
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad6b:	80 fa 19             	cmp    dl,0x19
c000ad6e:	77 34                	ja     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad70:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ad77:	85 d2                	test   edx,edx
c000ad79:	74 29                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad7b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad81:	85 d2                	test   edx,edx
c000ad83:	74 1f                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad85:	b8 05 00 00 00       	mov    eax,0x5
c000ad8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad8e:	74 14                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad90:	50                   	push   eax
c000ad91:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad9d:	52                   	push   edx
c000ad9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	83 c4 0c             	add    esp,0xc
c000ada7:	c3                   	ret    

c000ada8 <File::rewind()>:
c000ada8:	83 ec 10             	sub    esp,0x10
c000adab:	6a 00                	push   0x0
c000adad:	6a 00                	push   0x0
c000adaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adb3:	e8 4a ff ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c000adb8:	83 c4 1c             	add    esp,0x1c
c000adbb:	c3                   	ret    

c000adbc <File::unlink()>:
c000adbc:	83 ec 0c             	sub    esp,0xc
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adcf:	80 f9 19             	cmp    cl,0x19
c000add2:	77 2f                	ja     c000ae03 <File::unlink()+0x47>
c000add4:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000addb:	85 c9                	test   ecx,ecx
c000addd:	74 24                	je     c000ae03 <File::unlink()+0x47>
c000addf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ade5:	85 c9                	test   ecx,ecx
c000ade7:	74 1a                	je     c000ae03 <File::unlink()+0x47>
c000ade9:	b8 06 00 00 00       	mov    eax,0x6
c000adee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf2:	75 0f                	jne    c000ae03 <File::unlink()+0x47>
c000adf4:	83 c2 0d             	add    edx,0xd
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adfb:	52                   	push   edx
c000adfc:	51                   	push   ecx
c000adfd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	83 c4 0c             	add    esp,0xc
c000ae06:	c3                   	ret    
c000ae07:	90                   	nop

c000ae08 <File::rename(char const*)>:
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae1b:	80 f9 19             	cmp    cl,0x19
c000ae1e:	77 32                	ja     c000ae52 <File::rename(char const*)+0x4a>
c000ae20:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae27:	85 c9                	test   ecx,ecx
c000ae29:	74 27                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae2b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae31:	85 c9                	test   ecx,ecx
c000ae33:	74 1d                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae35:	b8 06 00 00 00       	mov    eax,0x6
c000ae3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae3e:	75 12                	jne    c000ae52 <File::rename(char const*)+0x4a>
c000ae40:	83 c2 0d             	add    edx,0xd
c000ae43:	50                   	push   eax
c000ae44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae4a:	52                   	push   edx
c000ae4b:	51                   	push   ecx
c000ae4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	83 c4 0c             	add    esp,0xc
c000ae55:	c3                   	ret    

c000ae56 <File::chfatattr(unsigned char, unsigned char)>:
c000ae56:	57                   	push   edi
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	56                   	push   esi
c000ae5d:	53                   	push   ebx
c000ae5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae71:	80 f9 19             	cmp    cl,0x19
c000ae74:	77 37                	ja     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae76:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae7d:	85 c9                	test   ecx,ecx
c000ae7f:	74 2c                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae87:	85 c9                	test   ecx,ecx
c000ae89:	74 22                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8b:	b8 06 00 00 00       	mov    eax,0x6
c000ae90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae94:	75 17                	jne    c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae96:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae98:	89 f0                	mov    eax,esi
c000ae9a:	83 c2 0d             	add    edx,0xd
c000ae9d:	0f b6 f0             	movzx  esi,al
c000aea0:	0f b6 db             	movzx  ebx,bl
c000aea3:	56                   	push   esi
c000aea4:	53                   	push   ebx
c000aea5:	52                   	push   edx
c000aea6:	51                   	push   ecx
c000aea7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	5b                   	pop    ebx
c000aeae:	5e                   	pop    esi
c000aeaf:	5f                   	pop    edi
c000aeb0:	c3                   	ret    
c000aeb1:	90                   	nop

c000aeb2 <File::exists()>:
c000aeb2:	83 ec 0c             	sub    esp,0xc
c000aeb5:	31 c0                	xor    eax,eax
c000aeb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aebb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aec2:	80 f9 19             	cmp    cl,0x19
c000aec5:	77 24                	ja     c000aeeb <File::exists()+0x39>
c000aec7:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000aece:	85 c9                	test   ecx,ecx
c000aed0:	74 19                	je     c000aeeb <File::exists()+0x39>
c000aed2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed8:	85 c9                	test   ecx,ecx
c000aeda:	74 0f                	je     c000aeeb <File::exists()+0x39>
c000aedc:	83 c2 0d             	add    edx,0xd
c000aedf:	50                   	push   eax
c000aee0:	50                   	push   eax
c000aee1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aee3:	52                   	push   edx
c000aee4:	51                   	push   ecx
c000aee5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	83 c4 0c             	add    esp,0xc
c000aeee:	c3                   	ret    
c000aeef:	90                   	nop

c000aef0 <File::stat(unsigned long long*, bool*)>:
c000aef0:	56                   	push   esi
c000aef1:	53                   	push   ebx
c000aef2:	50                   	push   eax
c000aef3:	b8 0b 00 00 00       	mov    eax,0xb
c000aef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aefc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af0b:	80 f9 19             	cmp    cl,0x19
c000af0e:	77 3d                	ja     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af10:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000af17:	85 c9                	test   ecx,ecx
c000af19:	74 32                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af21:	85 c9                	test   ecx,ecx
c000af23:	74 28                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af2b:	74 13                	je     c000af40 <File::stat(unsigned long long*, bool*)+0x50>
c000af2d:	83 ec 04             	sub    esp,0x4
c000af30:	56                   	push   esi
c000af31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af37:	51                   	push   ecx
c000af38:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af3e:	eb 0a                	jmp    c000af4a <File::stat(unsigned long long*, bool*)+0x5a>
c000af40:	53                   	push   ebx
c000af41:	83 c2 0d             	add    edx,0xd
c000af44:	56                   	push   esi
c000af45:	52                   	push   edx
c000af46:	51                   	push   ecx
c000af47:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	5a                   	pop    edx
c000af4e:	5b                   	pop    ebx
c000af4f:	5e                   	pop    esi
c000af50:	c3                   	ret    

c000af51 <Fs::setcwd(Process*, char*)>:
c000af51:	55                   	push   ebp
c000af52:	57                   	push   edi
c000af53:	56                   	push   esi
c000af54:	53                   	push   ebx
c000af55:	81 ec 20 02 00 00    	sub    esp,0x220
c000af5b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af62:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af68:	57                   	push   edi
c000af69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af70:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af74:	56                   	push   esi
c000af75:	e8 60 fa ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000af7a:	89 34 24             	mov    DWORD PTR [esp],esi
c000af7d:	e8 be 55 ff ff       	call   c0000540 <strlen>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	83 f8 02             	cmp    eax,0x2
c000af88:	77 15                	ja     c000af9f <Fs::setcwd(Process*, char*)+0x4e>
c000af8a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af8f:	83 eb 41             	sub    ebx,0x41
c000af92:	8b 04 9d 20 54 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c000af99:	85 c0                	test   eax,eax
c000af9b:	75 1c                	jne    c000afb9 <Fs::setcwd(Process*, char*)+0x68>
c000af9d:	eb 2f                	jmp    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000af9f:	83 ec 0c             	sub    esp,0xc
c000afa2:	56                   	push   esi
c000afa3:	e8 98 55 ff ff       	call   c0000540 <strlen>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	83 f8 03             	cmp    eax,0x3
c000afae:	75 57                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afb5:	75 50                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb7:	eb d1                	jmp    c000af8a <Fs::setcwd(Process*, char*)+0x39>
c000afb9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afc0:	75 0c                	jne    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 a1 1c 00 00       	call   c000cc6c <LogicalDisk::mount()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	b8 03 00 00 00       	mov    eax,0x3
c000afd3:	83 fb 19             	cmp    ebx,0x19
c000afd6:	0f 87 c6 00 00 00    	ja     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000afdc:	8b 14 9d 20 54 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdabe0]
c000afe3:	b8 05 00 00 00       	mov    eax,0x5
c000afe8:	85 d2                	test   edx,edx
c000afea:	0f 84 b2 00 00 00    	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000aff0:	b8 06 00 00 00       	mov    eax,0x6
c000aff5:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000affc:	0f 85 92 00 00 00    	jne    c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b002:	e9 9b 00 00 00       	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b007:	83 ec 0c             	sub    esp,0xc
c000b00a:	68 14 01 00 00       	push   0x114
c000b00f:	e8 61 c8 ff ff       	call   c0007875 <malloc>
c000b014:	83 c4 0c             	add    esp,0xc
c000b017:	89 c3                	mov    ebx,eax
c000b019:	55                   	push   ebp
c000b01a:	56                   	push   esi
c000b01b:	50                   	push   eax
c000b01c:	e8 63 fb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b021:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b026:	83 c4 0c             	add    esp,0xc
c000b029:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b02d:	50                   	push   eax
c000b02e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b032:	50                   	push   eax
c000b033:	53                   	push   ebx
c000b034:	e8 b7 fe ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	83 f8 02             	cmp    eax,0x2
c000b03f:	74 27                	je     c000b068 <Fs::setcwd(Process*, char*)+0x117>
c000b041:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b046:	75 1c                	jne    c000b064 <Fs::setcwd(Process*, char*)+0x113>
c000b048:	b8 02 00 00 00       	mov    eax,0x2
c000b04d:	85 db                	test   ebx,ebx
c000b04f:	74 51                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b051:	83 ec 0c             	sub    esp,0xc
c000b054:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b056:	53                   	push   ebx
c000b057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b05a:	83 c4 10             	add    esp,0x10
c000b05d:	b8 02 00 00 00       	mov    eax,0x2
c000b062:	eb 3e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b064:	85 c0                	test   eax,eax
c000b066:	74 1c                	je     c000b084 <Fs::setcwd(Process*, char*)+0x133>
c000b068:	b8 01 00 00 00       	mov    eax,0x1
c000b06d:	85 db                	test   ebx,ebx
c000b06f:	74 31                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b071:	83 ec 0c             	sub    esp,0xc
c000b074:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b076:	53                   	push   ebx
c000b077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	b8 01 00 00 00       	mov    eax,0x1
c000b082:	eb 1e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b084:	85 db                	test   ebx,ebx
c000b086:	74 0c                	je     c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08d:	53                   	push   ebx
c000b08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	50                   	push   eax
c000b095:	50                   	push   eax
c000b096:	56                   	push   esi
c000b097:	57                   	push   edi
c000b098:	e8 63 55 ff ff       	call   c0000600 <strcpy>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	31 c0                	xor    eax,eax
c000b0a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a8:	5b                   	pop    ebx
c000b0a9:	5e                   	pop    esi
c000b0aa:	5f                   	pop    edi
c000b0ab:	5d                   	pop    ebp
c000b0ac:	c3                   	ret    
c000b0ad:	90                   	nop

c000b0ae <Directory::Directory(char const*, Process*)>:
c000b0ae:	83 ec 0c             	sub    esp,0xc
c000b0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b5:	83 ec 08             	sub    esp,0x8
c000b0b8:	6a 00                	push   0x0
c000b0ba:	50                   	push   eax
c000b0bb:	e8 4e de ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	ba cc e5 01 c0       	mov    edx,0xc001e5cc
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	89 10                	mov    DWORD PTR [eax],edx
c000b0ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	83 c0 0d             	add    eax,0xd
c000b0df:	83 ec 04             	sub    esp,0x4
c000b0e2:	52                   	push   edx
c000b0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e7:	50                   	push   eax
c000b0e8:	e8 ed f8 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b110:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b116:	25 ff 00 00 00       	and    eax,0xff
c000b11b:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b122:	85 c0                	test   eax,eax
c000b124:	74 42                	je     c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b130:	25 ff 00 00 00       	and    eax,0xff
c000b135:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b13c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b142:	85 c0                	test   eax,eax
c000b144:	75 22                	jne    c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b14a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b150:	25 ff 00 00 00       	and    eax,0xff
c000b155:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	50                   	push   eax
c000b160:	e8 07 1b 00 00       	call   c000cc6c <LogicalDisk::mount()>
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	90                   	nop
c000b169:	83 c4 0c             	add    esp,0xc
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <Directory::open()>:
c000b16e:	53                   	push   ebx
c000b16f:	b8 0b 00 00 00       	mov    eax,0xb
c000b174:	83 ec 08             	sub    esp,0x8
c000b177:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b17b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b182:	80 fa 19             	cmp    dl,0x19
c000b185:	77 3d                	ja     c000b1c4 <Directory::open()+0x56>
c000b187:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b18e:	85 d2                	test   edx,edx
c000b190:	74 32                	je     c000b1c4 <Directory::open()+0x56>
c000b192:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b198:	85 d2                	test   edx,edx
c000b19a:	74 28                	je     c000b1c4 <Directory::open()+0x56>
c000b19c:	b8 06 00 00 00       	mov    eax,0x6
c000b1a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1a5:	75 1d                	jne    c000b1c4 <Directory::open()+0x56>
c000b1a7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1ad:	50                   	push   eax
c000b1ae:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b0:	51                   	push   ecx
c000b1b1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1b4:	51                   	push   ecx
c000b1b5:	52                   	push   edx
c000b1b6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	75 04                	jne    c000b1c4 <Directory::open()+0x56>
c000b1c0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1c4:	83 c4 08             	add    esp,0x8
c000b1c7:	5b                   	pop    ebx
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <Directory::close()>:
c000b1ca:	53                   	push   ebx
c000b1cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d0:	83 ec 08             	sub    esp,0x8
c000b1d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1de:	80 fa 19             	cmp    dl,0x19
c000b1e1:	77 41                	ja     c000b224 <Directory::close()+0x5a>
c000b1e3:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000b1ea:	85 db                	test   ebx,ebx
c000b1ec:	74 36                	je     c000b224 <Directory::close()+0x5a>
c000b1ee:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1f5:	74 2d                	je     c000b224 <Directory::close()+0x5a>
c000b1f7:	b8 05 00 00 00       	mov    eax,0x5
c000b1fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b200:	74 22                	je     c000b224 <Directory::close()+0x5a>
c000b202:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b206:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000b20d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b213:	53                   	push   ebx
c000b214:	53                   	push   ebx
c000b215:	8b 10                	mov    edx,DWORD PTR [eax]
c000b217:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b21d:	50                   	push   eax
c000b21e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	83 c4 08             	add    esp,0x8
c000b227:	5b                   	pop    ebx
c000b228:	c3                   	ret    
c000b229:	90                   	nop

c000b22a <Directory::unlink()>:
c000b22a:	83 ec 0c             	sub    esp,0xc
c000b22d:	b8 0b 00 00 00       	mov    eax,0xb
c000b232:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b236:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23d:	80 f9 19             	cmp    cl,0x19
c000b240:	77 2f                	ja     c000b271 <Directory::unlink()+0x47>
c000b242:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b249:	85 c9                	test   ecx,ecx
c000b24b:	74 24                	je     c000b271 <Directory::unlink()+0x47>
c000b24d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b253:	85 c9                	test   ecx,ecx
c000b255:	74 1a                	je     c000b271 <Directory::unlink()+0x47>
c000b257:	b8 06 00 00 00       	mov    eax,0x6
c000b25c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b260:	75 0f                	jne    c000b271 <Directory::unlink()+0x47>
c000b262:	83 c2 0d             	add    edx,0xd
c000b265:	50                   	push   eax
c000b266:	50                   	push   eax
c000b267:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b269:	52                   	push   edx
c000b26a:	51                   	push   ecx
c000b26b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b26e:	83 c4 10             	add    esp,0x10
c000b271:	83 c4 0c             	add    esp,0xc
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <Directory::rename(char const*)>:
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	b8 0b 00 00 00       	mov    eax,0xb
c000b27e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b282:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b289:	80 f9 19             	cmp    cl,0x19
c000b28c:	77 32                	ja     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b28e:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b295:	85 c9                	test   ecx,ecx
c000b297:	74 27                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b299:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b29f:	85 c9                	test   ecx,ecx
c000b2a1:	74 1d                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2a3:	b8 06 00 00 00       	mov    eax,0x6
c000b2a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ac:	75 12                	jne    c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2ae:	83 c2 0d             	add    edx,0xd
c000b2b1:	50                   	push   eax
c000b2b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b8:	52                   	push   edx
c000b2b9:	51                   	push   ecx
c000b2ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2bd:	83 c4 10             	add    esp,0x10
c000b2c0:	83 c4 0c             	add    esp,0xc
c000b2c3:	c3                   	ret    

c000b2c4 <Directory::exists()>:
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	31 c0                	xor    eax,eax
c000b2c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2cd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d4:	80 f9 19             	cmp    cl,0x19
c000b2d7:	77 24                	ja     c000b2fd <Directory::exists()+0x39>
c000b2d9:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b2e0:	85 c9                	test   ecx,ecx
c000b2e2:	74 19                	je     c000b2fd <Directory::exists()+0x39>
c000b2e4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2ea:	85 c9                	test   ecx,ecx
c000b2ec:	74 0f                	je     c000b2fd <Directory::exists()+0x39>
c000b2ee:	83 c2 0d             	add    edx,0xd
c000b2f1:	50                   	push   eax
c000b2f2:	50                   	push   eax
c000b2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f5:	52                   	push   edx
c000b2f6:	51                   	push   ecx
c000b2f7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	83 c4 0c             	add    esp,0xc
c000b300:	c3                   	ret    
c000b301:	90                   	nop

c000b302 <Directory::read(dirent*)>:
c000b302:	83 ec 1c             	sub    esp,0x1c
c000b305:	b8 0b 00 00 00       	mov    eax,0xb
c000b30a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b315:	80 fa 19             	cmp    dl,0x19
c000b318:	77 30                	ja     c000b34a <Directory::read(dirent*)+0x48>
c000b31a:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b321:	85 d2                	test   edx,edx
c000b323:	74 25                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b325:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b32c:	74 1c                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b32e:	83 ec 0c             	sub    esp,0xc
c000b331:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b333:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b337:	52                   	push   edx
c000b338:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33c:	6a 00                	push   0x0
c000b33e:	68 10 01 00 00       	push   0x110
c000b343:	51                   	push   ecx
c000b344:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b347:	83 c4 20             	add    esp,0x20
c000b34a:	83 c4 1c             	add    esp,0x1c
c000b34d:	c3                   	ret    

c000b34e <Directory::create()>:
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	b8 0b 00 00 00       	mov    eax,0xb
c000b356:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b35a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b361:	80 f9 19             	cmp    cl,0x19
c000b364:	77 2f                	ja     c000b395 <Directory::create()+0x47>
c000b366:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b36d:	85 c9                	test   ecx,ecx
c000b36f:	74 24                	je     c000b395 <Directory::create()+0x47>
c000b371:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b377:	85 c9                	test   ecx,ecx
c000b379:	74 1a                	je     c000b395 <Directory::create()+0x47>
c000b37b:	b8 06 00 00 00       	mov    eax,0x6
c000b380:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b384:	75 0f                	jne    c000b395 <Directory::create()+0x47>
c000b386:	83 c2 0d             	add    edx,0xd
c000b389:	50                   	push   eax
c000b38a:	50                   	push   eax
c000b38b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b38d:	52                   	push   edx
c000b38e:	51                   	push   ecx
c000b38f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	83 c4 0c             	add    esp,0xc
c000b398:	c3                   	ret    
c000b399:	90                   	nop

c000b39a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b39a:	b8 0a 00 00 00       	mov    eax,0xa
c000b39f:	c3                   	ret    

c000b3a0 <Bus::Bus(char const*)>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a7:	83 ec 08             	sub    esp,0x8
c000b3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ae:	50                   	push   eax
c000b3af:	e8 30 08 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b3b4:	83 c4 10             	add    esp,0x10
c000b3b7:	ba e8 e5 01 c0       	mov    edx,0xc001e5e8
c000b3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c0:	89 10                	mov    DWORD PTR [eax],edx
c000b3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3d0:	90                   	nop
c000b3d1:	83 c4 0c             	add    esp,0xc
c000b3d4:	c3                   	ret    
c000b3d5:	90                   	nop
c000b3d6:	66 90                	xchg   ax,ax

c000b3d8 <Bus::~Bus()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	ba e8 e5 01 c0       	mov    edx,0xc001e5e8
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	50                   	push   eax
c000b3ee:	e8 5b 05 00 00       	call   c000b94e <Device::~Device()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	90                   	nop
c000b3f7:	83 c4 0c             	add    esp,0xc
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <Bus::~Bus()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	83 ec 0c             	sub    esp,0xc
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 cd ff ff ff       	call   c000b3d8 <Bus::~Bus()>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 ec 08             	sub    esp,0x8
c000b411:	68 58 01 00 00       	push   0x158
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	e8 f9 f0 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	83 c4 0c             	add    esp,0xc
c000b425:	c3                   	ret    

c000b426 <beepThread(void*)>:
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b42e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b432:	48                   	dec    eax
c000b433:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000b438:	75 01                	jne    c000b43b <beepThread(void*)+0x15>
c000b43a:	fb                   	sti    
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	6b c2 0a             	imul   eax,edx,0xa
c000b441:	50                   	push   eax
c000b442:	e8 f9 86 00 00       	call   c0013b40 <milliTenthSleep(unsigned int)>
c000b447:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b44e:	e8 9f a4 00 00       	call   c00158f2 <HalMakeBeep(int)>
c000b453:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b45b:	83 c4 1c             	add    esp,0x1c
c000b45e:	e9 d9 85 00 00       	jmp    c0013a3c <blockTask(TaskState)>

c000b463 <Krnl::beep(int, int, bool)>:
c000b463:	56                   	push   esi
c000b464:	53                   	push   ebx
c000b465:	83 ec 10             	sub    esp,0x10
c000b468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b46c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b474:	e8 79 a4 00 00       	call   c00158f2 <HalMakeBeep(int)>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	89 f0                	mov    eax,esi
c000b47e:	84 c0                	test   al,al
c000b480:	74 1e                	je     c000b4a0 <Krnl::beep(int, int, bool)+0x3d>
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	6b db 0a             	imul   ebx,ebx,0xa
c000b488:	53                   	push   ebx
c000b489:	e8 b2 86 00 00       	call   c0013b40 <milliTenthSleep(unsigned int)>
c000b48e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b496:	83 c4 14             	add    esp,0x14
c000b499:	5b                   	pop    ebx
c000b49a:	5e                   	pop    esi
c000b49b:	e9 52 a4 00 00       	jmp    c00158f2 <HalMakeBeep(int)>
c000b4a0:	68 e6 00 00 00       	push   0xe6
c000b4a5:	53                   	push   ebx
c000b4a6:	68 26 b4 00 c0       	push   0xc000b426
c000b4ab:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b4b1:	e8 6a 81 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c000b4b6:	83 c4 14             	add    esp,0x14
c000b4b9:	5b                   	pop    ebx
c000b4ba:	5e                   	pop    esi
c000b4bb:	c3                   	ret    

c000b4bc <User::loadClockSettings(int)>:
c000b4bc:	53                   	push   ebx
c000b4bd:	83 ec 14             	sub    esp,0x14
c000b4c0:	68 14 01 00 00       	push   0x114
c000b4c5:	e8 ab c3 ff ff       	call   c0007875 <malloc>
c000b4ca:	83 c4 0c             	add    esp,0xc
c000b4cd:	89 c3                	mov    ebx,eax
c000b4cf:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b4d5:	68 0c e6 01 c0       	push   0xc001e60c
c000b4da:	50                   	push   eax
c000b4db:	e8 a4 f6 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b4e0:	58                   	pop    eax
c000b4e1:	5a                   	pop    edx
c000b4e2:	6a 01                	push   0x1
c000b4e4:	53                   	push   ebx
c000b4e5:	e8 5a f7 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000b4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4ed:	e8 b0 f7 ff ff       	call   c000aca2 <File::close()>
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	85 db                	test   ebx,ebx
c000b4f7:	74 0f                	je     c000b508 <User::loadClockSettings(int)+0x4c>
c000b4f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b502:	83 c4 08             	add    esp,0x8
c000b505:	5b                   	pop    ebx
c000b506:	ff e0                	jmp    eax
c000b508:	83 c4 08             	add    esp,0x8
c000b50b:	5b                   	pop    ebx
c000b50c:	c3                   	ret    
c000b50d:	90                   	nop

c000b50e <Clock::Clock(char const*)>:
c000b50e:	83 ec 0c             	sub    esp,0xc
c000b511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b515:	83 ec 08             	sub    esp,0x8
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	50                   	push   eax
c000b51d:	e8 c2 06 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	ba 34 e6 01 c0       	mov    edx,0xc001e634
c000b52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52e:	89 10                	mov    DWORD PTR [eax],edx
c000b530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b534:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b53e:	90                   	nop
c000b53f:	83 c4 0c             	add    esp,0xc
c000b542:	c3                   	ret    
c000b543:	90                   	nop

c000b544 <Clock::~Clock()>:
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	ba 34 e6 01 c0       	mov    edx,0xc001e634
c000b54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b550:	89 10                	mov    DWORD PTR [eax],edx
c000b552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	50                   	push   eax
c000b55a:	e8 ef 03 00 00       	call   c000b94e <Device::~Device()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	90                   	nop
c000b563:	83 c4 0c             	add    esp,0xc
c000b566:	c3                   	ret    
c000b567:	90                   	nop

c000b568 <Clock::~Clock()>:
c000b568:	83 ec 0c             	sub    esp,0xc
c000b56b:	83 ec 0c             	sub    esp,0xc
c000b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b572:	e8 cd ff ff ff       	call   c000b544 <Clock::~Clock()>
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	83 ec 08             	sub    esp,0x8
c000b57d:	68 58 01 00 00       	push   0x158
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	e8 8d ef ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	83 c4 0c             	add    esp,0xc
c000b591:	c3                   	ret    

c000b592 <Clock::timeInSecondsLocal()>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 14             	sub    esp,0x14
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b59c:	50                   	push   eax
c000b59d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5a0:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b5a7:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b5ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5b3:	89 cb                	mov    ebx,ecx
c000b5b5:	c1 fb 1f             	sar    ebx,0x1f
c000b5b8:	01 c8                	add    eax,ecx
c000b5ba:	11 da                	adc    edx,ebx
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	31 c9                	xor    ecx,ecx
c000b5c1:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b5c8:	74 05                	je     c000b5cf <Clock::timeInSecondsLocal()+0x3d>
c000b5ca:	b9 08 07 00 00       	mov    ecx,0x708
c000b5cf:	31 db                	xor    ebx,ebx
c000b5d1:	01 c8                	add    eax,ecx
c000b5d3:	11 da                	adc    edx,ebx
c000b5d5:	83 c4 08             	add    esp,0x8
c000b5d8:	5b                   	pop    ebx
c000b5d9:	c3                   	ret    

c000b5da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5da:	57                   	push   edi
c000b5db:	56                   	push   esi
c000b5dc:	53                   	push   ebx
c000b5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5ee:	0f b6 05 b8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fb8
c000b5f5:	03 05 bc 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fbc
c000b5fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b601:	99                   	cdq    
c000b602:	29 c6                	sub    esi,eax
c000b604:	19 d7                	sbb    edi,edx
c000b606:	89 f0                	mov    eax,esi
c000b608:	89 fa                	mov    edx,edi
c000b60a:	31 f6                	xor    esi,esi
c000b60c:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b613:	74 05                	je     c000b61a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b615:	be 08 07 00 00       	mov    esi,0x708
c000b61a:	31 ff                	xor    edi,edi
c000b61c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b620:	29 f0                	sub    eax,esi
c000b622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b626:	19 fa                	sbb    edx,edi
c000b628:	89 d8                	mov    eax,ebx
c000b62a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b62e:	5b                   	pop    ebx
c000b62f:	5e                   	pop    esi
c000b630:	5f                   	pop    edi
c000b631:	ff e0                	jmp    eax

c000b633 <datetimeToSeconds(datetime_t)>:
c000b633:	55                   	push   ebp
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	83 ec 14             	sub    esp,0x14
c000b63a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b63e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b642:	89 d3                	mov    ebx,edx
c000b644:	0f b6 c6             	movzx  eax,dh
c000b647:	c1 eb 10             	shr    ebx,0x10
c000b64a:	48                   	dec    eax
c000b64b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b650:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b654:	0f b6 f5             	movzx  esi,ch
c000b657:	89 cf                	mov    edi,ecx
c000b659:	6b f6 3c             	imul   esi,esi,0x3c
c000b65c:	c1 ef 10             	shr    edi,0x10
c000b65f:	0f b6 c9             	movzx  ecx,cl
c000b662:	89 f8                	mov    eax,edi
c000b664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b66a:	0f b6 f8             	movzx  edi,al
c000b66d:	0f b6 d2             	movzx  edx,dl
c000b670:	01 fe                	add    esi,edi
c000b672:	01 f1                	add    ecx,esi
c000b674:	0f b7 f3             	movzx  esi,bx
c000b677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b67b:	c1 f9 1f             	sar    ecx,0x1f
c000b67e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b687:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b68c:	8b 0c 8d 80 e6 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1980]
c000b693:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b697:	76 29                	jbe    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b699:	f6 c3 03             	test   bl,0x3
c000b69c:	75 24                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b69e:	31 d2                	xor    edx,edx
c000b6a0:	bf 64 00 00 00       	mov    edi,0x64
c000b6a5:	89 d8                	mov    eax,ebx
c000b6a7:	66 f7 f7             	div    di
c000b6aa:	66 85 d2             	test   dx,dx
c000b6ad:	75 12                	jne    c000b6c1 <datetimeToSeconds(datetime_t)+0x8e>
c000b6af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6b5:	bf 90 01 00 00       	mov    edi,0x190
c000b6ba:	99                   	cdq    
c000b6bb:	f7 ff                	idiv   edi
c000b6bd:	85 d2                	test   edx,edx
c000b6bf:	75 01                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b6c1:	41                   	inc    ecx
c000b6c2:	66 83 fb 46          	cmp    bx,0x46
c000b6c6:	76 45                	jbe    c000b70d <datetimeToSeconds(datetime_t)+0xda>
c000b6c8:	bb 46 00 00 00       	mov    ebx,0x46
c000b6cd:	bf 64 00 00 00       	mov    edi,0x64
c000b6d2:	bd 90 01 00 00       	mov    ebp,0x190
c000b6d7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6dc:	f6 c3 03             	test   bl,0x3
c000b6df:	75 23                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6e1:	89 d8                	mov    eax,ebx
c000b6e3:	99                   	cdq    
c000b6e4:	f7 ff                	idiv   edi
c000b6e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6eb:	85 d2                	test   edx,edx
c000b6ed:	75 15                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6f5:	99                   	cdq    
c000b6f6:	f7 fd                	idiv   ebp
c000b6f8:	31 c0                	xor    eax,eax
c000b6fa:	85 d2                	test   edx,edx
c000b6fc:	0f 94 c0             	sete   al
c000b6ff:	05 6d 01 00 00       	add    eax,0x16d
c000b704:	01 c1                	add    ecx,eax
c000b706:	43                   	inc    ebx
c000b707:	39 f3                	cmp    ebx,esi
c000b709:	7c cc                	jl     c000b6d7 <datetimeToSeconds(datetime_t)+0xa4>
c000b70b:	eb 3b                	jmp    c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70d:	74 39                	je     c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70f:	b8 45 00 00 00       	mov    eax,0x45
c000b714:	89 c2                	mov    edx,eax
c000b716:	83 e2 03             	and    edx,0x3
c000b719:	39 f0                	cmp    eax,esi
c000b71b:	7e 13                	jle    c000b730 <datetimeToSeconds(datetime_t)+0xfd>
c000b71d:	85 d2                	test   edx,edx
c000b71f:	0f 94 c2             	sete   dl
c000b722:	48                   	dec    eax
c000b723:	0f b6 d2             	movzx  edx,dl
c000b726:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b72c:	29 d1                	sub    ecx,edx
c000b72e:	eb e4                	jmp    c000b714 <datetimeToSeconds(datetime_t)+0xe1>
c000b730:	b8 6d 01 00 00       	mov    eax,0x16d
c000b735:	85 d2                	test   edx,edx
c000b737:	75 0d                	jne    c000b746 <datetimeToSeconds(datetime_t)+0x113>
c000b739:	31 c0                	xor    eax,eax
c000b73b:	66 85 db             	test   bx,bx
c000b73e:	0f 95 c0             	setne  al
c000b741:	05 6d 01 00 00       	add    eax,0x16d
c000b746:	29 c1                	sub    ecx,eax
c000b748:	b8 80 51 01 00       	mov    eax,0x15180
c000b74d:	f7 e9                	imul   ecx
c000b74f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b753:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b757:	83 c4 14             	add    esp,0x14
c000b75a:	5b                   	pop    ebx
c000b75b:	5e                   	pop    esi
c000b75c:	5f                   	pop    edi
c000b75d:	5d                   	pop    ebp
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b760:	57                   	push   edi
c000b761:	56                   	push   esi
c000b762:	53                   	push   ebx
c000b763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b767:	8b 06                	mov    eax,DWORD PTR [esi]
c000b769:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b774:	e8 ba fe ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c000b779:	59                   	pop    ecx
c000b77a:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b781:	5b                   	pop    ebx
c000b782:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b788:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b78e:	89 cb                	mov    ebx,ecx
c000b790:	c1 fb 1f             	sar    ebx,0x1f
c000b793:	29 c8                	sub    eax,ecx
c000b795:	19 da                	sbb    edx,ebx
c000b797:	31 c9                	xor    ecx,ecx
c000b799:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b7a0:	74 05                	je     c000b7a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7a2:	b9 08 07 00 00       	mov    ecx,0x708
c000b7a7:	31 db                	xor    ebx,ebx
c000b7a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7ad:	29 c8                	sub    eax,ecx
c000b7af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7b3:	19 da                	sbb    edx,ebx
c000b7b5:	89 f8                	mov    eax,edi
c000b7b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7bb:	5b                   	pop    ebx
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	ff e0                	jmp    eax

c000b7c0 <secondsToDatetime(unsigned long long)>:
c000b7c0:	55                   	push   ebp
c000b7c1:	57                   	push   edi
c000b7c2:	56                   	push   esi
c000b7c3:	53                   	push   ebx
c000b7c4:	83 ec 1c             	sub    esp,0x1c
c000b7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7d3:	6a 00                	push   0x0
c000b7d5:	68 80 51 01 00       	push   0x15180
c000b7da:	55                   	push   ebp
c000b7db:	57                   	push   edi
c000b7dc:	e8 2f 11 01 00       	call   c001c910 <__udivdi3>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	6a 00                	push   0x0
c000b7f0:	68 80 51 01 00       	push   0x15180
c000b7f5:	55                   	push   ebp
c000b7f6:	57                   	push   edi
c000b7f7:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7fc:	e8 0f 12 01 00       	call   c001ca10 <__umoddi3>
c000b801:	83 c4 10             	add    esp,0x10
c000b804:	99                   	cdq    
c000b805:	f7 ff                	idiv   edi
c000b807:	bf 3c 00 00 00       	mov    edi,0x3c
c000b80c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b80f:	89 d0                	mov    eax,edx
c000b811:	99                   	cdq    
c000b812:	f7 ff                	idiv   edi
c000b814:	85 db                	test   ebx,ebx
c000b816:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b819:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b81c:	79 11                	jns    c000b82f <secondsToDatetime(unsigned long long)+0x6f>
c000b81e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b822:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b828:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b82d:	eb 07                	jmp    c000b836 <secondsToDatetime(unsigned long long)+0x76>
c000b82f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b834:	89 d8                	mov    eax,ebx
c000b836:	bf b4 05 00 00       	mov    edi,0x5b4
c000b83b:	99                   	cdq    
c000b83c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b841:	f7 f9                	idiv   ecx
c000b843:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	31 d2                	xor    edx,edx
c000b84e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b856:	01 c3                	add    ebx,eax
c000b858:	89 d8                	mov    eax,ebx
c000b85a:	f7 f1                	div    ecx
c000b85c:	31 d2                	xor    edx,edx
c000b85e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b861:	89 d8                	mov    eax,ebx
c000b863:	f7 f7                	div    edi
c000b865:	31 d2                	xor    edx,edx
c000b867:	29 c1                	sub    ecx,eax
c000b869:	89 d8                	mov    eax,ebx
c000b86b:	f7 f5                	div    ebp
c000b86d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b872:	29 c1                	sub    ecx,eax
c000b874:	31 d2                	xor    edx,edx
c000b876:	89 c8                	mov    eax,ecx
c000b878:	f7 f5                	div    ebp
c000b87a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b87f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b883:	31 d2                	xor    edx,edx
c000b885:	89 c8                	mov    eax,ecx
c000b887:	f7 f5                	div    ebp
c000b889:	31 d2                	xor    edx,edx
c000b88b:	01 c3                	add    ebx,eax
c000b88d:	89 c8                	mov    eax,ecx
c000b88f:	f7 f7                	div    edi
c000b891:	bf 99 00 00 00       	mov    edi,0x99
c000b896:	29 c3                	sub    ebx,eax
c000b898:	31 d2                	xor    edx,edx
c000b89a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8a2:	29 c3                	sub    ebx,eax
c000b8a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8aa:	bb 05 00 00 00       	mov    ebx,0x5
c000b8af:	83 c1 02             	add    ecx,0x2
c000b8b2:	89 c8                	mov    eax,ecx
c000b8b4:	f7 f7                	div    edi
c000b8b6:	31 d2                	xor    edx,edx
c000b8b8:	89 c7                	mov    edi,eax
c000b8ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8c0:	83 c0 02             	add    eax,0x2
c000b8c3:	f7 f3                	div    ebx
c000b8c5:	89 eb                	mov    ebx,ebp
c000b8c7:	29 c3                	sub    ebx,eax
c000b8c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8cf:	88 1e                	mov    BYTE PTR [esi],bl
c000b8d1:	19 c0                	sbb    eax,eax
c000b8d3:	31 d2                	xor    edx,edx
c000b8d5:	83 e0 0c             	and    eax,0xc
c000b8d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e8:	83 f9 01             	cmp    ecx,0x1
c000b8eb:	0f 96 c2             	setbe  dl
c000b8ee:	41                   	inc    ecx
c000b8ef:	01 d0                	add    eax,edx
c000b8f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f8:	83 c4 1c             	add    esp,0x1c
c000b8fb:	89 f0                	mov    eax,esi
c000b8fd:	5b                   	pop    ebx
c000b8fe:	5e                   	pop    esi
c000b8ff:	5f                   	pop    edi
c000b900:	5d                   	pop    ebp
c000b901:	c2 04 00             	ret    0x4

c000b904 <Clock::timeInDatetimeLocal()>:
c000b904:	53                   	push   ebx
c000b905:	83 ec 14             	sub    esp,0x14
c000b908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b90c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b910:	e8 7d fc ff ff       	call   c000b592 <Clock::timeInSecondsLocal()>
c000b915:	83 c4 0c             	add    esp,0xc
c000b918:	52                   	push   edx
c000b919:	50                   	push   eax
c000b91a:	53                   	push   ebx
c000b91b:	e8 a0 fe ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c000b920:	89 d8                	mov    eax,ebx
c000b922:	83 c4 14             	add    esp,0x14
c000b925:	5b                   	pop    ebx
c000b926:	c2 04 00             	ret    0x4
c000b929:	90                   	nop

c000b92a <Device::hibernate()>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::wake()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::detect()>:
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Device::disableLegacy()>:
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <Device::powerSaving(PowerSavingLevel)>:
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <DriverlessDevice::close(int, int, void*)>:
c000b934:	31 c0                	xor    eax,eax
c000b936:	c3                   	ret    
c000b937:	90                   	nop

c000b938 <DriverlessDevice::detect()>:
c000b938:	c3                   	ret    
c000b939:	90                   	nop

c000b93a <DriverlessDevice::open(int, int, void*)>:
c000b93a:	83 ec 18             	sub    esp,0x18
c000b93d:	68 b0 e6 01 c0       	push   0xc001e6b0
c000b942:	e8 dc 49 00 00       	call   c0010323 <KePanic(char const*)>
c000b947:	83 c8 ff             	or     eax,0xffffffff
c000b94a:	83 c4 1c             	add    esp,0x1c
c000b94d:	c3                   	ret    

c000b94e <Device::~Device()>:
c000b94e:	ba 10 e7 01 c0       	mov    edx,0xc001e710
c000b953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b957:	89 10                	mov    DWORD PTR [eax],edx
c000b959:	90                   	nop
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::~Device()>:
c000b95c:	83 ec 0c             	sub    esp,0xc
c000b95f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b963:	e8 e6 ff ff ff       	call   c000b94e <Device::~Device()>
c000b968:	83 c4 04             	add    esp,0x4
c000b96b:	83 ec 08             	sub    esp,0x8
c000b96e:	68 58 01 00 00       	push   0x158
c000b973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b977:	e8 9c eb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b97c:	83 c4 10             	add    esp,0x10
c000b97f:	83 c4 0c             	add    esp,0xc
c000b982:	c3                   	ret    
c000b983:	90                   	nop

c000b984 <Device::findAndLoadDriver()>:
c000b984:	c7 44 24 04 ce e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6ce
c000b98c:	e9 7d ec ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000b991:	90                   	nop

c000b992 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b992:	57                   	push   edi
c000b993:	b9 09 00 00 00       	mov    ecx,0x9
c000b998:	56                   	push   esi
c000b999:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b99d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9ab:	81 c7 18 01 00 00    	add    edi,0x118
c000b9b1:	fc                   	cld    
c000b9b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9b4:	5e                   	pop    esi
c000b9b5:	5f                   	pop    edi
c000b9b6:	c3                   	ret    
c000b9b7:	90                   	nop

c000b9b8 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b8:	57                   	push   edi
c000b9b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9be:	56                   	push   esi
c000b9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e3:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9f4:	5e                   	pop    esi
c000b9f5:	5f                   	pop    edi
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f8:	53                   	push   ebx
c000b9f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba09:	0f b6 c0             	movzx  eax,al
c000ba0c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba18:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba1c:	5b                   	pop    ebx
c000ba1d:	e9 a6 05 00 00       	jmp    c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba22 <Device::getParent()>:
c000ba22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba26:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba2c:	c3                   	ret    
c000ba2d:	90                   	nop

c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba36:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba47:	e9 e8 06 00 00       	jmp    c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba4c <Device::addChild(Device*)>:
c000ba4c:	53                   	push   ebx
c000ba4d:	83 ec 08             	sub    esp,0x8
c000ba50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba58:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba5e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba64:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba66:	85 d2                	test   edx,edx
c000ba68:	74 04                	je     c000ba6e <Device::addChild(Device*)+0x22>
c000ba6a:	89 d3                	mov    ebx,edx
c000ba6c:	eb f6                	jmp    c000ba64 <Device::addChild(Device*)+0x18>
c000ba6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba71:	83 ec 0c             	sub    esp,0xc
c000ba74:	6a 08                	push   0x8
c000ba76:	e8 fa bd ff ff       	call   c0007875 <malloc>
c000ba7b:	89 03                	mov    DWORD PTR [ebx],eax
c000ba7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba8a:	83 c4 18             	add    esp,0x18
c000ba8d:	5b                   	pop    ebx
c000ba8e:	c3                   	ret    
c000ba8f:	90                   	nop

c000ba90 <Device::removeAllChildren()>:
c000ba90:	56                   	push   esi
c000ba91:	53                   	push   ebx
c000ba92:	52                   	push   edx
c000ba93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba97:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baa0:	74 17                	je     c000bab9 <Device::removeAllChildren()+0x29>
c000baa2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baa5:	85 c0                	test   eax,eax
c000baa7:	74 0c                	je     c000bab5 <Device::removeAllChildren()+0x25>
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	8b 10                	mov    edx,DWORD PTR [eax]
c000baae:	50                   	push   eax
c000baaf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bab2:	83 c4 10             	add    esp,0x10
c000bab5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab7:	eb e4                	jmp    c000ba9d <Device::removeAllChildren()+0xd>
c000bab9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bacb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad2:	58                   	pop    eax
c000bad3:	5b                   	pop    ebx
c000bad4:	5e                   	pop    esi
c000bad5:	c3                   	ret    

c000bad6 <Device::hibernateAll()>:
c000bad6:	53                   	push   ebx
c000bad7:	83 ec 14             	sub    esp,0x14
c000bada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bade:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bae0:	53                   	push   ebx
c000bae1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bae4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baea:	83 c4 10             	add    esp,0x10
c000baed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baf0:	74 0f                	je     c000bb01 <Device::hibernateAll()+0x2b>
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf8:	e8 d9 ff ff ff       	call   c000bad6 <Device::hibernateAll()>
c000bafd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baff:	eb e9                	jmp    c000baea <Device::hibernateAll()+0x14>
c000bb01:	83 c4 08             	add    esp,0x8
c000bb04:	5b                   	pop    ebx
c000bb05:	c3                   	ret    

c000bb06 <Device::wakeAll()>:
c000bb06:	53                   	push   ebx
c000bb07:	83 ec 14             	sub    esp,0x14
c000bb0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb10:	53                   	push   ebx
c000bb11:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb20:	74 0f                	je     c000bb31 <Device::wakeAll()+0x2b>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb28:	e8 d9 ff ff ff       	call   c000bb06 <Device::wakeAll()>
c000bb2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb2f:	eb e9                	jmp    c000bb1a <Device::wakeAll()+0x14>
c000bb31:	83 c4 08             	add    esp,0x8
c000bb34:	5b                   	pop    ebx
c000bb35:	c3                   	ret    

c000bb36 <Device::detectAll()>:
c000bb36:	53                   	push   ebx
c000bb37:	83 ec 14             	sub    esp,0x14
c000bb3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb40:	53                   	push   ebx
c000bb41:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb50:	74 0f                	je     c000bb61 <Device::detectAll()+0x2b>
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb58:	e8 d9 ff ff ff       	call   c000bb36 <Device::detectAll()>
c000bb5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5f:	eb e9                	jmp    c000bb4a <Device::detectAll()+0x14>
c000bb61:	83 c4 08             	add    esp,0x8
c000bb64:	5b                   	pop    ebx
c000bb65:	c3                   	ret    

c000bb66 <Device::disableLegacyAll()>:
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::loadDriversForAll()>:
c000bb68:	c3                   	ret    
c000bb69:	90                   	nop

c000bb6a <Device::closeAll()>:
c000bb6a:	53                   	push   ebx
c000bb6b:	83 ec 08             	sub    esp,0x8
c000bb6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb74:	6a 00                	push   0x0
c000bb76:	6a 00                	push   0x0
c000bb78:	6a 00                	push   0x0
c000bb7a:	53                   	push   ebx
c000bb7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb84:	83 c4 10             	add    esp,0x10
c000bb87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb8a:	74 0f                	je     c000bb9b <Device::closeAll()+0x31>
c000bb8c:	83 ec 0c             	sub    esp,0xc
c000bb8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb92:	e8 d3 ff ff ff       	call   c000bb6a <Device::closeAll()>
c000bb97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb99:	eb e9                	jmp    c000bb84 <Device::closeAll()+0x1a>
c000bb9b:	83 c4 08             	add    esp,0x8
c000bb9e:	5b                   	pop    ebx
c000bb9f:	c3                   	ret    

c000bba0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bba0:	56                   	push   esi
c000bba1:	53                   	push   ebx
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbaf:	56                   	push   esi
c000bbb0:	53                   	push   ebx
c000bbb1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbba:	83 c4 10             	add    esp,0x10
c000bbbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbc0:	74 0f                	je     c000bbd1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbc2:	52                   	push   edx
c000bbc3:	52                   	push   edx
c000bbc4:	56                   	push   esi
c000bbc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc8:	e8 d3 ff ff ff       	call   c000bba0 <Device::powerSavingAll(PowerSavingLevel)>
c000bbcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcf:	eb e9                	jmp    c000bbba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbd1:	58                   	pop    eax
c000bbd2:	5b                   	pop    ebx
c000bbd3:	5e                   	pop    esi
c000bbd4:	c3                   	ret    
c000bbd5:	90                   	nop

c000bbd6 <Device::setName(char const*)>:
c000bbd6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbde:	e9 1d 4a ff ff       	jmp    c0000600 <strcpy>
c000bbe3:	90                   	nop

c000bbe4 <Device::Device(char const*)>:
c000bbe4:	83 ec 1c             	sub    esp,0x1c
c000bbe7:	ba 10 e7 01 c0       	mov    edx,0xc001e710
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	89 10                	mov    DWORD PTR [eax],edx
c000bbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc04:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc12:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc20:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc2a:	83 ec 08             	sub    esp,0x8
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc35:	e8 9c ff ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc45:	83 ec 0c             	sub    esp,0xc
c000bc48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc4c:	e8 24 bc ff ff       	call   c0007875 <malloc>
c000bc51:	83 c4 10             	add    esp,0x10
c000bc54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc65:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc90:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bcda:	90                   	nop
c000bcdb:	83 c4 1c             	add    esp,0x1c
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <Device::getName()>:
c000bce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce4:	05 d0 00 00 00       	add    eax,0xd0
c000bce9:	c3                   	ret    

c000bcea <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcea:	83 ec 0c             	sub    esp,0xc
c000bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf1:	83 ec 08             	sub    esp,0x8
c000bcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf8:	50                   	push   eax
c000bcf9:	e8 e6 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	ba 3c e7 01 c0       	mov    edx,0xc001e73c
c000bd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0a:	89 10                	mov    DWORD PTR [eax],edx
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd1a:	90                   	nop
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd20:	57                   	push   edi
c000bd21:	56                   	push   esi
c000bd22:	53                   	push   ebx
c000bd23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd2f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd35:	75 0c                	jne    c000bd43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd37:	52                   	push   edx
c000bd38:	52                   	push   edx
c000bd39:	53                   	push   ebx
c000bd3a:	56                   	push   esi
c000bd3b:	e8 82 10 01 00       	call   c001cdc2 <LinkedList<Device>::addElement(Device*)>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd4c:	74 12                	je     c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd4e:	50                   	push   eax
c000bd4f:	57                   	push   edi
c000bd50:	56                   	push   esi
c000bd51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd54:	e8 c7 ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	eb e9                	jmp    c000bd49 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd60:	5b                   	pop    ebx
c000bd61:	5e                   	pop    esi
c000bd62:	5f                   	pop    edi
c000bd63:	c3                   	ret    

c000bd64 <getDevicesOfType(DeviceType)>:
c000bd64:	53                   	push   ebx
c000bd65:	83 ec 14             	sub    esp,0x14
c000bd68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd6c:	53                   	push   ebx
c000bd6d:	e8 2c 11 01 00       	call   c001ce9e <LinkedList<Device>::LinkedList()>
c000bd72:	83 c4 0c             	add    esp,0xc
c000bd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd79:	53                   	push   ebx
c000bd7a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000bd80:	e8 9b ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd85:	89 d8                	mov    eax,ebx
c000bd87:	83 c4 18             	add    esp,0x18
c000bd8a:	5b                   	pop    ebx
c000bd8b:	c2 04 00             	ret    0x4
c000bd8e:	66 90                	xchg   ax,ax

c000bd90 <HardDiskController::HardDiskController(char const*)>:
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd97:	83 ec 08             	sub    esp,0x8
c000bd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9e:	50                   	push   eax
c000bd9f:	e8 40 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bda4:	83 c4 10             	add    esp,0x10
c000bda7:	ba 68 e7 01 c0       	mov    edx,0xc001e768
c000bdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb0:	89 10                	mov    DWORD PTR [eax],edx
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdc0:	90                   	nop
c000bdc1:	83 c4 0c             	add    esp,0xc
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop
c000bdc6:	66 90                	xchg   ax,ax

c000bdc8 <HardDiskController::~HardDiskController()>:
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	ba 68 e7 01 c0       	mov    edx,0xc001e768
c000bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd4:	89 10                	mov    DWORD PTR [eax],edx
c000bdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdda:	83 ec 0c             	sub    esp,0xc
c000bddd:	50                   	push   eax
c000bdde:	e8 6b fb ff ff       	call   c000b94e <Device::~Device()>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	90                   	nop
c000bde7:	83 c4 0c             	add    esp,0xc
c000bdea:	c3                   	ret    
c000bdeb:	90                   	nop

c000bdec <HardDiskController::~HardDiskController()>:
c000bdec:	83 ec 0c             	sub    esp,0xc
c000bdef:	83 ec 0c             	sub    esp,0xc
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	e8 cd ff ff ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 ec 08             	sub    esp,0x8
c000be01:	68 58 01 00 00       	push   0x158
c000be06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0a:	e8 09 e7 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 0c             	add    esp,0xc
c000be15:	c3                   	ret    

c000be16 <PhysicalDisk::eject()>:
c000be16:	83 c8 ff             	or     eax,0xffffffff
c000be19:	c3                   	ret    

c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be21:	83 ec 08             	sub    esp,0x8
c000be24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be28:	50                   	push   eax
c000be29:	e8 b6 fd ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000be2e:	83 c4 10             	add    esp,0x10
c000be31:	ba 94 e7 01 c0       	mov    edx,0xc001e794
c000be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3a:	89 10                	mov    DWORD PTR [eax],edx
c000be3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be7c:	90                   	nop
c000be7d:	83 c4 0c             	add    esp,0xc
c000be80:	c3                   	ret    
c000be81:	90                   	nop

c000be82 <PhysicalDisk::startCache()>:
c000be82:	56                   	push   esi
c000be83:	53                   	push   ebx
c000be84:	83 ec 10             	sub    esp,0x10
c000be87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be8b:	6a 44                	push   0x44
c000be8d:	e8 e3 b9 ff ff       	call   c0007875 <malloc>
c000be92:	89 c6                	mov    esi,eax
c000be94:	58                   	pop    eax
c000be95:	5a                   	pop    edx
c000be96:	53                   	push   ebx
c000be97:	56                   	push   esi
c000be98:	e8 e7 15 00 00       	call   c000d484 <VCache::VCache(PhysicalDisk*)>
c000be9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bea3:	83 c4 14             	add    esp,0x14
c000bea6:	5b                   	pop    ebx
c000bea7:	5e                   	pop    esi
c000bea8:	c3                   	ret    
c000bea9:	90                   	nop

c000beaa <PhysicalDisk::~PhysicalDisk()>:
c000beaa:	83 ec 0c             	sub    esp,0xc
c000bead:	ba 94 e7 01 c0       	mov    edx,0xc001e794
c000beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb6:	89 10                	mov    DWORD PTR [eax],edx
c000beb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bebc:	83 ec 0c             	sub    esp,0xc
c000bebf:	50                   	push   eax
c000bec0:	e8 89 fa ff ff       	call   c000b94e <Device::~Device()>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	90                   	nop
c000bec9:	83 c4 0c             	add    esp,0xc
c000becc:	c3                   	ret    
c000becd:	90                   	nop

c000bece <PhysicalDisk::~PhysicalDisk()>:
c000bece:	83 ec 0c             	sub    esp,0xc
c000bed1:	83 ec 0c             	sub    esp,0xc
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	e8 cd ff ff ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	68 6c 01 00 00       	push   0x16c
c000bee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beec:	e8 27 e6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000bef1:	83 c4 10             	add    esp,0x10
c000bef4:	83 c4 0c             	add    esp,0xc
c000bef7:	c3                   	ret    

c000bef8 <int_handler>:
c000bef8:	55                   	push   ebp
c000bef9:	57                   	push   edi
c000befa:	56                   	push   esi
c000befb:	53                   	push   ebx
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf03:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bf0a:	74 0b                	je     c000bf17 <int_handler+0x1f>
c000bf0c:	fa                   	cli    
c000bf0d:	f4                   	hlt    
c000bf0e:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bf15:	75 f5                	jne    c000bf0c <int_handler+0x14>
c000bf17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf1d:	83 f8 17             	cmp    eax,0x17
c000bf20:	76 3e                	jbe    c000bf60 <int_handler+0x68>
c000bf22:	c1 e6 04             	shl    esi,0x4
c000bf25:	31 db                	xor    ebx,ebx
c000bf27:	8d ae c0 3f 02 c0    	lea    ebp,[esi-0x3ffdc040]
c000bf2d:	81 c6 c0 2f 02 c0    	add    esi,0xc0022fc0
c000bf33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf37:	85 c0                	test   eax,eax
c000bf39:	74 13                	je     c000bf4e <int_handler+0x56>
c000bf3b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf3e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf42:	74 2a                	je     c000bf6e <int_handler+0x76>
c000bf44:	83 ec 08             	sub    esp,0x8
c000bf47:	52                   	push   edx
c000bf48:	57                   	push   edi
c000bf49:	ff d0                	call   eax
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	43                   	inc    ebx
c000bf4f:	83 fb 04             	cmp    ebx,0x4
c000bf52:	75 df                	jne    c000bf33 <int_handler+0x3b>
c000bf54:	83 c4 0c             	add    esp,0xc
c000bf57:	31 c0                	xor    eax,eax
c000bf59:	5b                   	pop    ebx
c000bf5a:	31 d2                	xor    edx,edx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	50                   	push   eax
c000bf64:	e8 c6 99 00 00       	call   c001592f <HalEndOfInterrupt(int)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	eb b4                	jmp    c000bf22 <int_handler+0x2a>
c000bf6e:	83 ec 08             	sub    esp,0x8
c000bf71:	52                   	push   edx
c000bf72:	57                   	push   edi
c000bf73:	ff d0                	call   eax
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	83 c4 0c             	add    esp,0xc
c000bf7b:	5b                   	pop    ebx
c000bf7c:	5e                   	pop    esi
c000bf7d:	5f                   	pop    edi
c000bf7e:	5d                   	pop    ebp
c000bf7f:	c3                   	ret    

c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf80:	56                   	push   esi
c000bf81:	31 c0                	xor    eax,eax
c000bf83:	53                   	push   ebx
c000bf84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf8c:	89 ca                	mov    edx,ecx
c000bf8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf92:	c1 e2 04             	shl    edx,0x4
c000bf95:	83 bc 82 c0 3f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdc040],0x0
c000bf9d:	74 15                	je     c000bfb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf9f:	40                   	inc    eax
c000bfa0:	83 f8 04             	cmp    eax,0x4
c000bfa3:	75 f0                	jne    c000bf95 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfa5:	c7 44 24 0c c4 e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e7c4
c000bfad:	5b                   	pop    ebx
c000bfae:	5e                   	pop    esi
c000bfaf:	e9 6f 43 00 00       	jmp    c0010323 <KePanic(char const*)>
c000bfb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfb7:	89 1c 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],ebx
c000bfbe:	89 34 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],esi
c000bfc5:	5b                   	pop    ebx
c000bfc6:	5e                   	pop    esi
c000bfc7:	c3                   	ret    

c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc8:	57                   	push   edi
c000bfc9:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000bfcf:	56                   	push   esi
c000bfd0:	53                   	push   ebx
c000bfd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfe0:	74 5b                	je     c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfe2:	89 c7                	mov    edi,eax
c000bfe4:	84 c0                	test   al,al
c000bfe6:	74 24                	je     c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe8:	83 fe 0f             	cmp    esi,0xf
c000bfeb:	0f 8f d9 00 00 00    	jg     c000c0ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bff1:	8a 86 e0 ff 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0020]
c000bff7:	25 ff 00 00 00       	and    eax,0xff
c000bffc:	66 8b bc 00 60 57 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffda8a0]
c000c004:	89 c6                	mov    esi,eax
c000c006:	66 d1 ef             	shr    di,1
c000c009:	83 e7 01             	and    edi,0x1
c000c00c:	83 ec 08             	sub    esp,0x8
c000c00f:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000c014:	31 db                	xor    ebx,ebx
c000c016:	50                   	push   eax
c000c017:	68 d1 e7 01 c0       	push   0xc001e7d1
c000c01c:	e8 ed e5 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000c029:	85 c0                	test   eax,eax
c000c02b:	7f 51                	jg     c000c07e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c02d:	83 ec 0c             	sub    esp,0xc
c000c030:	68 e8 e7 01 c0       	push   0xc001e7e8
c000c035:	e8 e9 42 00 00       	call   c0010323 <KePanic(char const*)>
c000c03a:	83 c4 10             	add    esp,0x10
c000c03d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c040:	31 d2                	xor    edx,edx
c000c042:	89 c8                	mov    eax,ecx
c000c044:	c1 e0 04             	shl    eax,0x4
c000c047:	8b 9c 90 c0 3f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdc040]
c000c04e:	85 db                	test   ebx,ebx
c000c050:	0f 84 8b 00 00 00    	je     c000c0e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c056:	42                   	inc    edx
c000c057:	83 fa 04             	cmp    edx,0x4
c000c05a:	75 eb                	jne    c000c047 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	68 3c e8 01 c0       	push   0xc001e83c
c000c064:	e8 ba 42 00 00       	call   c0010323 <KePanic(char const*)>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c071:	5b                   	pop    ebx
c000c072:	5e                   	pop    esi
c000c073:	5f                   	pop    edi
c000c074:	c3                   	ret    
c000c075:	43                   	inc    ebx
c000c076:	39 1d 60 6b 02 c0    	cmp    DWORD PTR ds:0xc0026b60,ebx
c000c07c:	7e af                	jle    c000c02d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c07e:	83 ec 08             	sub    esp,0x8
c000c081:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c088:	56                   	push   esi
c000c089:	50                   	push   eax
c000c08a:	e8 03 fd 00 00       	call   c001bd92 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c08f:	83 c4 10             	add    esp,0x10
c000c092:	84 c0                	test   al,al
c000c094:	74 df                	je     c000c075 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c096:	81 e7 ff 00 00 00    	and    edi,0xff
c000c09c:	50                   	push   eax
c000c09d:	8d 46 20             	lea    eax,[esi+0x20]
c000c0a0:	57                   	push   edi
c000c0a1:	25 ff 00 00 00       	and    eax,0xff
c000c0a6:	6a 00                	push   0x0
c000c0a8:	50                   	push   eax
c000c0a9:	89 f0                	mov    eax,esi
c000c0ab:	6a 00                	push   0x0
c000c0ad:	25 ff 00 00 00       	and    eax,0xff
c000c0b2:	6a 00                	push   0x0
c000c0b4:	50                   	push   eax
c000c0b5:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c0bc:	50                   	push   eax
c000c0bd:	e8 4a fe 00 00       	call   c001bf0c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0c2:	83 c4 20             	add    esp,0x20
c000c0c5:	e9 73 ff ff ff       	jmp    c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0ca:	83 ec 0c             	sub    esp,0xc
c000c0cd:	31 ff                	xor    edi,edi
c000c0cf:	68 04 e8 01 c0       	push   0xc001e804
c000c0d4:	e8 4a 42 00 00       	call   c0010323 <KePanic(char const*)>
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	e9 2b ff ff ff       	jmp    c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0e1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e8:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0f3:	5b                   	pop    ebx
c000c0f4:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0fb:	89 f0                	mov    eax,esi
c000c0fd:	5e                   	pop    esi
c000c0fe:	5f                   	pop    edi
c000c0ff:	c3                   	ret    

c000c100 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c108:	c1 e0 04             	shl    eax,0x4
c000c10b:	8d 50 10             	lea    edx,[eax+0x10]
c000c10e:	39 88 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ecx
c000c114:	74 08                	je     c000c11e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c116:	83 c0 04             	add    eax,0x4
c000c119:	39 d0                	cmp    eax,edx
c000c11b:	75 f1                	jne    c000c10e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c11d:	c3                   	ret    
c000c11e:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c128:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c132:	eb e2                	jmp    c000c116 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c134:	53                   	push   ebx
c000c135:	83 ec 08             	sub    esp,0x8
c000c138:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c13c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c141:	74 0e                	je     c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c143:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000c148:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c14f:	75 37                	jne    c000c188 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c155:	83 c0 20             	add    eax,0x20
c000c158:	c1 e0 04             	shl    eax,0x4
c000c15b:	8d 50 10             	lea    edx,[eax+0x10]
c000c15e:	39 98 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ebx
c000c164:	74 0c                	je     c000c172 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c166:	83 c0 04             	add    eax,0x4
c000c169:	39 d0                	cmp    eax,edx
c000c16b:	75 f1                	jne    c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c16d:	83 c4 08             	add    esp,0x8
c000c170:	5b                   	pop    ebx
c000c171:	c3                   	ret    
c000c172:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c17c:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c186:	eb de                	jmp    c000c166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c188:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c18d:	7f 12                	jg     c000c1a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c18f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c193:	31 c0                	xor    eax,eax
c000c195:	8a 81 e0 ff 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0020]
c000c19b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c19f:	eb b0                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1a1:	83 ec 0c             	sub    esp,0xc
c000c1a4:	68 f5 e7 01 c0       	push   0xc001e7f5
c000c1a9:	e8 75 41 00 00       	call   c0010323 <KePanic(char const*)>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	eb 9e                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1b3 <setupINTS()>:
c000c1b3:	31 c0                	xor    eax,eax
c000c1b5:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1bf:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1c9:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d3:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c1dd:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1e7:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c1f1:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1fb:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c205:	83 c0 10             	add    eax,0x10
c000c208:	3d 00 10 00 00       	cmp    eax,0x1000
c000c20d:	75 a6                	jne    c000c1b5 <setupINTS()+0x2>
c000c20f:	c3                   	ret    

c000c210 <convertLegacyIRQNumber(int)>:
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c224:	74 0f                	je     c000c235 <convertLegacyIRQNumber(int)+0x25>
c000c226:	83 f8 0f             	cmp    eax,0xf
c000c229:	7f 0e                	jg     c000c239 <convertLegacyIRQNumber(int)+0x29>
c000c22b:	31 c9                	xor    ecx,ecx
c000c22d:	8a 88 e0 ff 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0020]
c000c233:	89 c8                	mov    eax,ecx
c000c235:	83 c4 0c             	add    esp,0xc
c000c238:	c3                   	ret    
c000c239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c23d:	83 ec 0c             	sub    esp,0xc
c000c240:	68 04 e8 01 c0       	push   0xc001e804
c000c245:	e8 d9 40 00 00       	call   c0010323 <KePanic(char const*)>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c251:	83 c4 0c             	add    esp,0xc
c000c254:	c3                   	ret    
c000c255:	90                   	nop

c000c256 <startGUI(void*)>:
c000c256:	55                   	push   ebp
c000c257:	89 e5                	mov    ebp,esp
c000c259:	53                   	push   ebx
c000c25a:	83 ec 04             	sub    esp,0x4
c000c25d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c262:	48                   	dec    eax
c000c263:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c268:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c26d:	85 c0                	test   eax,eax
c000c26f:	75 01                	jne    c000c272 <startGUI(void*)+0x1c>
c000c271:	fb                   	sti    
c000c272:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c278:	83 ec 08             	sub    esp,0x8
c000c27b:	6a 01                	push   0x1
c000c27d:	68 61 e8 01 c0       	push   0xc001e861
c000c282:	e8 8f 6b 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	83 ec 08             	sub    esp,0x8
c000c28d:	53                   	push   ebx
c000c28e:	50                   	push   eax
c000c28f:	e8 b3 6d 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c29d:	83 ec 08             	sub    esp,0x8
c000c2a0:	6a 01                	push   0x1
c000c2a2:	68 7b e8 01 c0       	push   0xc001e87b
c000c2a7:	e8 6a 6b 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	83 ec 08             	sub    esp,0x8
c000c2b2:	53                   	push   ebx
c000c2b3:	50                   	push   eax
c000c2b4:	e8 8e 6d 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	90                   	nop
c000c2bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2c0:	c9                   	leave  
c000c2c1:	c3                   	ret    

c000c2c2 <startGUIVESA(void*)>:
c000c2c2:	55                   	push   ebp
c000c2c3:	89 e5                	mov    ebp,esp
c000c2c5:	53                   	push   ebx
c000c2c6:	83 ec 04             	sub    esp,0x4
c000c2c9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2ce:	48                   	dec    eax
c000c2cf:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c2d4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2d9:	85 c0                	test   eax,eax
c000c2db:	75 01                	jne    c000c2de <startGUIVESA(void*)+0x1c>
c000c2dd:	fb                   	sti    
c000c2de:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c2e4:	83 ec 08             	sub    esp,0x8
c000c2e7:	6a 01                	push   0x1
c000c2e9:	68 99 e8 01 c0       	push   0xc001e899
c000c2ee:	e8 23 6b 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	83 ec 08             	sub    esp,0x8
c000c2f9:	53                   	push   ebx
c000c2fa:	50                   	push   eax
c000c2fb:	e8 47 6d 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000c300:	83 c4 10             	add    esp,0x10
c000c303:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	6a 01                	push   0x1
c000c30e:	68 7b e8 01 c0       	push   0xc001e87b
c000c313:	e8 fe 6a 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	83 ec 08             	sub    esp,0x8
c000c31e:	53                   	push   ebx
c000c31f:	50                   	push   eax
c000c320:	e8 22 6d 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000c325:	83 c4 10             	add    esp,0x10
c000c328:	90                   	nop
c000c329:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c32c:	c9                   	leave  
c000c32d:	c3                   	ret    

c000c32e <sendKeyToTerminal(unsigned char)>:
c000c32e:	55                   	push   ebp
c000c32f:	89 e5                	mov    ebp,esp
c000c331:	83 ec 28             	sub    esp,0x28
c000c334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c337:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c33a:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000c340:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c343:	25 ff 00 00 00       	and    eax,0xff
c000c348:	83 ec 08             	sub    esp,0x8
c000c34b:	50                   	push   eax
c000c34c:	52                   	push   edx
c000c34d:	e8 b4 c7 ff ff       	call   c0008b06 <VgaText::receiveKey(unsigned char)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c359:	74 0a                	je     c000c365 <sendKeyToTerminal(unsigned char)+0x37>
c000c35b:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c35f:	0f 85 8f 00 00 00    	jne    c000c3f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c365:	fa                   	cli    
c000c366:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c36b:	40                   	inc    eax
c000c36c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c371:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c376:	40                   	inc    eax
c000c377:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c37c:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c000c381:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c384:	c7 05 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024fc0,0x0
c000c38e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c392:	74 1f                	je     c000c3b3 <sendKeyToTerminal(unsigned char)+0x85>
c000c394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c397:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c39a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c39d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3a3:	83 ec 0c             	sub    esp,0xc
c000c3a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a9:	e8 56 79 00 00       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c000c3ae:	83 c4 10             	add    esp,0x10
c000c3b1:	eb db                	jmp    c000c38e <sendKeyToTerminal(unsigned char)+0x60>
c000c3b3:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c3b8:	48                   	dec    eax
c000c3b9:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c3be:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c3c3:	85 c0                	test   eax,eax
c000c3c5:	75 18                	jne    c000c3df <sendKeyToTerminal(unsigned char)+0xb1>
c000c3c7:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000c3cc:	85 c0                	test   eax,eax
c000c3ce:	74 0f                	je     c000c3df <sendKeyToTerminal(unsigned char)+0xb1>
c000c3d0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000c3da:	e8 61 74 00 00       	call   c0013840 <schedule()>
c000c3df:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3e4:	48                   	dec    eax
c000c3e5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c3ea:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3ef:	85 c0                	test   eax,eax
c000c3f1:	75 01                	jne    c000c3f4 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3f3:	fb                   	sti    
c000c3f4:	90                   	nop
c000c3f5:	c9                   	leave  
c000c3f6:	c3                   	ret    

c000c3f7 <sendKeyboardToken(KeyboardToken)>:
c000c3f7:	55                   	push   ebp
c000c3f8:	89 e5                	mov    ebp,esp
c000c3fa:	83 ec 18             	sub    esp,0x18
c000c3fd:	e8 71 3f 00 00       	call   c0010373 <Krnl::userIOReceived()>
c000c402:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c408:	25 ff ff 00 00       	and    eax,0xffff
c000c40d:	83 f2 01             	xor    edx,0x1
c000c410:	88 90 e0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb020],dl
c000c416:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c41b:	85 c0                	test   eax,eax
c000c41d:	74 24                	je     c000c443 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41f:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c425:	83 ec 04             	sub    esp,0x4
c000c428:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c42d:	83 ec 08             	sub    esp,0x8
c000c430:	89 e2                	mov    edx,esp
c000c432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c435:	89 02                	mov    DWORD PTR [edx],eax
c000c437:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c43a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43e:	ff d1                	call   ecx
c000c440:	83 c4 10             	add    esp,0x10
c000c443:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c447:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c44a:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c44f:	38 c2                	cmp    dl,al
c000c451:	74 1e                	je     c000c471 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c453:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c456:	a2 e8 53 02 c0       	mov    ds:0xc00253e8,al
c000c45b:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c460:	25 ff 00 00 00       	and    eax,0xff
c000c465:	83 ec 0c             	sub    esp,0xc
c000c468:	50                   	push   eax
c000c469:	e8 e6 bd ff ff       	call   c0008254 <setTerminalScrollLock(bool)>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c474:	84 c0                	test   al,al
c000c476:	0f 84 ae 00 00 00    	je     c000c52a <sendKeyboardToken(KeyboardToken)+0x133>
c000c47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47f:	66 3d 10 03          	cmp    ax,0x310
c000c483:	75 06                	jne    c000c48b <sendKeyboardToken(KeyboardToken)+0x94>
c000c485:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48e:	66 3d 11 03          	cmp    ax,0x311
c000c492:	75 06                	jne    c000c49a <sendKeyboardToken(KeyboardToken)+0xa3>
c000c494:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49d:	66 3d 12 03          	cmp    ax,0x312
c000c4a1:	75 06                	jne    c000c4a9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4a3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ac:	66 3d 13 03          	cmp    ax,0x313
c000c4b0:	75 06                	jne    c000c4b8 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4b2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bb:	66 3d 14 03          	cmp    ax,0x314
c000c4bf:	75 06                	jne    c000c4c7 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4c1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ca:	66 3d 15 03          	cmp    ax,0x315
c000c4ce:	75 06                	jne    c000c4d6 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4d0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d9:	66 3d 16 03          	cmp    ax,0x316
c000c4dd:	75 06                	jne    c000c4e5 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4df:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e8:	66 3d 17 03          	cmp    ax,0x317
c000c4ec:	75 06                	jne    c000c4f4 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ee:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f7:	66 3d 18 03          	cmp    ax,0x318
c000c4fb:	75 06                	jne    c000c503 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4fd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c506:	66 3d 19 03          	cmp    ax,0x319
c000c50a:	75 06                	jne    c000c512 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c50c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c515:	66 3d 1a 03          	cmp    ax,0x31a
c000c519:	0f 85 c9 00 00 00    	jne    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c525:	e9 be 00 00 00       	jmp    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52d:	66 3d 10 03          	cmp    ax,0x310
c000c531:	75 0a                	jne    c000c53d <sendKeyboardToken(KeyboardToken)+0x146>
c000c533:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c539:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c540:	66 3d 11 03          	cmp    ax,0x311
c000c544:	75 0a                	jne    c000c550 <sendKeyboardToken(KeyboardToken)+0x159>
c000c546:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c54c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c553:	66 3d 12 03          	cmp    ax,0x312
c000c557:	75 0a                	jne    c000c563 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c559:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c566:	66 3d 13 03          	cmp    ax,0x313
c000c56a:	75 0a                	jne    c000c576 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c56c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c572:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c579:	66 3d 14 03          	cmp    ax,0x314
c000c57d:	75 0a                	jne    c000c589 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c585:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58c:	66 3d 15 03          	cmp    ax,0x315
c000c590:	75 0a                	jne    c000c59c <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c592:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c598:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59f:	66 3d 16 03          	cmp    ax,0x316
c000c5a3:	75 0a                	jne    c000c5af <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b2:	66 3d 17 03          	cmp    ax,0x317
c000c5b6:	75 0a                	jne    c000c5c2 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c5:	66 3d 18 03          	cmp    ax,0x318
c000c5c9:	75 0a                	jne    c000c5d5 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5cb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d8:	66 3d 19 03          	cmp    ax,0x319
c000c5dc:	75 0a                	jne    c000c5e8 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5de:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5eb:	66 3d 00 02          	cmp    ax,0x200
c000c5ef:	75 2c                	jne    c000c61d <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f1:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c5f6:	83 f0 01             	xor    eax,0x1
c000c5f9:	84 c0                	test   al,al
c000c5fb:	74 20                	je     c000c61d <sendKeyboardToken(KeyboardToken)+0x226>
c000c5fd:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c602:	6a 01                	push   0x1
c000c604:	6a 00                	push   0x0
c000c606:	68 56 c2 00 c0       	push   0xc000c256
c000c60b:	50                   	push   eax
c000c60c:	e8 0f 70 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c61b:	eb 33                	jmp    c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c620:	66 3d 01 02          	cmp    ax,0x201
c000c624:	75 2a                	jne    c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c626:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c62b:	83 f0 01             	xor    eax,0x1
c000c62e:	84 c0                	test   al,al
c000c630:	74 1e                	je     c000c650 <sendKeyboardToken(KeyboardToken)+0x259>
c000c632:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c637:	6a 01                	push   0x1
c000c639:	6a 00                	push   0x0
c000c63b:	68 c2 c2 00 c0       	push   0xc000c2c2
c000c640:	50                   	push   eax
c000c641:	e8 da 6f 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c653:	66 3d 1d 03          	cmp    ax,0x31d
c000c657:	75 06                	jne    c000c65f <sendKeyboardToken(KeyboardToken)+0x268>
c000c659:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c662:	66 3d 1c 03          	cmp    ax,0x31c
c000c666:	75 06                	jne    c000c66e <sendKeyboardToken(KeyboardToken)+0x277>
c000c668:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c671:	66 3d 1b 03          	cmp    ax,0x31b
c000c675:	75 06                	jne    c000c67d <sendKeyboardToken(KeyboardToken)+0x286>
c000c677:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c680:	66 3d 1e 03          	cmp    ax,0x31e
c000c684:	75 06                	jne    c000c68c <sendKeyboardToken(KeyboardToken)+0x295>
c000c686:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68f:	66 3d 1f 03          	cmp    ax,0x31f
c000c693:	75 06                	jne    c000c69b <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c695:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69e:	66 3d 1a 03          	cmp    ax,0x31a
c000c6a2:	75 06                	jne    c000c6aa <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6aa:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b1:	83 f0 01             	xor    eax,0x1
c000c6b4:	84 c0                	test   al,al
c000c6b6:	74 7b                	je     c000c733 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b8:	a0 e1 50 02 c0       	mov    al,ds:0xc00250e1
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 43                	je     c000c704 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6c1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c9:	74 2d                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6cb:	8b 15 e4 53 02 c0    	mov    edx,DWORD PTR ds:0xc00253e4
c000c6d1:	89 d0                	mov    eax,edx
c000c6d3:	c1 e0 02             	shl    eax,0x2
c000c6d6:	01 d0                	add    eax,edx
c000c6d8:	01 c0                	add    eax,eax
c000c6da:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e2:	25 ff ff 00 00       	and    eax,0xffff
c000c6e7:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6ea:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6ef:	01 d0                	add    eax,edx
c000c6f1:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c6f6:	eb 71                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f8:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c702:	eb 65                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c704:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c709:	85 c0                	test   eax,eax
c000c70b:	74 1a                	je     c000c727 <sendKeyboardToken(KeyboardToken)+0x330>
c000c70d:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c712:	25 ff 00 00 00       	and    eax,0xff
c000c717:	83 ec 0c             	sub    esp,0xc
c000c71a:	50                   	push   eax
c000c71b:	e8 0e fc ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c720:	83 c4 10             	add    esp,0x10
c000c723:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c727:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c731:	eb 36                	jmp    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c736:	66 3d 01 01          	cmp    ax,0x101
c000c73a:	75 2d                	jne    c000c769 <sendKeyboardToken(KeyboardToken)+0x372>
c000c73c:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c741:	85 c0                	test   eax,eax
c000c743:	74 1a                	je     c000c75f <sendKeyboardToken(KeyboardToken)+0x368>
c000c745:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c74a:	25 ff 00 00 00       	and    eax,0xff
c000c74f:	83 ec 0c             	sub    esp,0xc
c000c752:	50                   	push   eax
c000c753:	e8 d6 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c758:	83 c4 10             	add    esp,0x10
c000c75b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75f:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c769:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c76c:	83 f0 01             	xor    eax,0x1
c000c76f:	84 c0                	test   al,al
c000c771:	74 4e                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c773:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c776:	83 f0 01             	xor    eax,0x1
c000c779:	84 c0                	test   al,al
c000c77b:	74 44                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77d:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c782:	83 f0 01             	xor    eax,0x1
c000c785:	84 c0                	test   al,al
c000c787:	74 38                	je     c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78c:	66 83 f8 1f          	cmp    ax,0x1f
c000c790:	76 09                	jbe    c000c79b <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c795:	66 83 f8 7e          	cmp    ax,0x7e
c000c799:	76 12                	jbe    c000c7ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c79b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79e:	66 83 f8 0a          	cmp    ax,0xa
c000c7a2:	74 09                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a7:	66 83 f8 08          	cmp    ax,0x8
c000c7ab:	75 14                	jne    c000c7c1 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b0:	25 ff 00 00 00       	and    eax,0xff
c000c7b5:	83 ec 0c             	sub    esp,0xc
c000c7b8:	50                   	push   eax
c000c7b9:	e8 70 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c4:	83 f0 01             	xor    eax,0x1
c000c7c7:	84 c0                	test   al,al
c000c7c9:	74 51                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7ce:	83 f0 01             	xor    eax,0x1
c000c7d1:	84 c0                	test   al,al
c000c7d3:	74 47                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d5:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c7da:	84 c0                	test   al,al
c000c7dc:	74 3e                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e1:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e5:	76 35                	jbe    c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ea:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ee:	77 2c                	ja     c000c81c <sendKeyboardToken(KeyboardToken)+0x425>
c000c7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f3:	88 c2                	mov    dl,al
c000c7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f8:	66 83 f8 5f          	cmp    ax,0x5f
c000c7fc:	76 04                	jbe    c000c802 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fe:	b0 20                	mov    al,0x20
c000c800:	eb 02                	jmp    c000c804 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c802:	b0 00                	mov    al,0x0
c000c804:	29 c2                	sub    edx,eax
c000c806:	88 d0                	mov    al,dl
c000c808:	83 e8 40             	sub    eax,0x40
c000c80b:	25 ff 00 00 00       	and    eax,0xff
c000c810:	83 ec 0c             	sub    esp,0xc
c000c813:	50                   	push   eax
c000c814:	e8 15 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c819:	83 c4 10             	add    esp,0x10
c000c81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81f:	66 3d 00 03          	cmp    ax,0x300
c000c823:	75 0f                	jne    c000c834 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c825:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c828:	83 f0 01             	xor    eax,0x1
c000c82b:	84 c0                	test   al,al
c000c82d:	74 05                	je     c000c834 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82f:	e8 21 ba ff ff       	call   c0008255 <doTerminalCycle()>
c000c834:	90                   	nop
c000c835:	c9                   	leave  
c000c836:	c3                   	ret    

c000c837 <clearInternalKeybuffer(VgaText*)>:
c000c837:	55                   	push   ebp
c000c838:	89 e5                	mov    ebp,esp
c000c83a:	83 ec 08             	sub    esp,0x8
c000c83d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c840:	05 02 01 00 00       	add    eax,0x102
c000c845:	83 ec 0c             	sub    esp,0xc
c000c848:	50                   	push   eax
c000c849:	e8 f2 3c ff ff       	call   c0000540 <strlen>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c854:	81 c2 02 01 00 00    	add    edx,0x102
c000c85a:	83 ec 04             	sub    esp,0x4
c000c85d:	50                   	push   eax
c000c85e:	6a 00                	push   0x0
c000c860:	52                   	push   edx
c000c861:	e8 6a 3c ff ff       	call   c00004d0 <memset>
c000c866:	83 c4 10             	add    esp,0x10
c000c869:	90                   	nop
c000c86a:	c9                   	leave  
c000c86b:	c3                   	ret    

c000c86c <readKeyboard(VgaText*, char*, unsigned long)>:
c000c86c:	55                   	push   ebp
c000c86d:	89 e5                	mov    ebp,esp
c000c86f:	83 ec 18             	sub    esp,0x18
c000c872:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c877:	85 c0                	test   eax,eax
c000c879:	74 2a                	je     c000c8a5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c87b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c881:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c887:	83 ec 04             	sub    esp,0x4
c000c88a:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	89 e2                	mov    edx,esp
c000c894:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c897:	89 02                	mov    DWORD PTR [edx],eax
c000c899:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c89c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8a0:	ff d1                	call   ecx
c000c8a2:	83 c4 10             	add    esp,0x10
c000c8a5:	fb                   	sti    
c000c8a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8ad:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8b1:	0f 84 cb 00 00 00    	je     c000c982 <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ba:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8c0:	84 c0                	test   al,al
c000c8c2:	75 28                	jne    c000c8ec <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c4:	fa                   	cli    
c000c8c5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8ca:	40                   	inc    eax
c000c8cb:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c8d0:	e8 6b 6f 00 00       	call   c0013840 <schedule()>
c000c8d5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8da:	48                   	dec    eax
c000c8db:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c8e0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c8e5:	85 c0                	test   eax,eax
c000c8e7:	75 ce                	jne    c000c8b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e9:	fb                   	sti    
c000c8ea:	eb cb                	jmp    c000c8b7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8ef:	8d 50 01             	lea    edx,[eax+0x1]
c000c8f2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f8:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fe:	88 10                	mov    BYTE PTR [eax],dl
c000c900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c903:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c909:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c90c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c910:	75 1e                	jne    c000c930 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c912:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c917:	8b 00                	mov    eax,DWORD PTR [eax]
c000c919:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c91c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c922:	83 ec 08             	sub    esp,0x8
c000c925:	6a 02                	push   0x2
c000c927:	50                   	push   eax
c000c928:	e8 e2 3d 00 00       	call   c001070f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c92d:	83 c4 10             	add    esp,0x10
c000c930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c933:	05 02 01 00 00       	add    eax,0x102
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	50                   	push   eax
c000c93c:	e8 ff 3b ff ff       	call   c0000540 <strlen>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c947:	81 c2 02 01 00 00    	add    edx,0x102
c000c94d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c950:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c953:	81 c2 02 01 00 00    	add    edx,0x102
c000c959:	83 ec 04             	sub    esp,0x4
c000c95c:	50                   	push   eax
c000c95d:	51                   	push   ecx
c000c95e:	52                   	push   edx
c000c95f:	e8 7c 3a ff ff       	call   c00003e0 <memmove>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c96a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c96d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c971:	74 0a                	je     c000c97d <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c973:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c977:	0f 85 30 ff ff ff    	jne    c000c8ad <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c97d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c980:	eb 03                	jmp    c000c985 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c982:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c985:	c9                   	leave  
c000c986:	c3                   	ret    
c000c987:	90                   	nop

c000c988 <Keyboard::Keyboard(char const*)>:
c000c988:	83 ec 0c             	sub    esp,0xc
c000c98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98f:	83 ec 08             	sub    esp,0x8
c000c992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c996:	50                   	push   eax
c000c997:	e8 48 f2 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	ba bc e8 01 c0       	mov    edx,0xc001e8bc
c000c9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a8:	89 10                	mov    DWORD PTR [eax],edx
c000c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ae:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9b8:	c6 05 c4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fc4,0x1
c000c9bf:	90                   	nop
c000c9c0:	83 c4 0c             	add    esp,0xc
c000c9c3:	c3                   	ret    

c000c9c4 <Keyboard::~Keyboard()>:
c000c9c4:	83 ec 0c             	sub    esp,0xc
c000c9c7:	ba bc e8 01 c0       	mov    edx,0xc001e8bc
c000c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d0:	89 10                	mov    DWORD PTR [eax],edx
c000c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d6:	83 ec 0c             	sub    esp,0xc
c000c9d9:	50                   	push   eax
c000c9da:	e8 6f ef ff ff       	call   c000b94e <Device::~Device()>
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	90                   	nop
c000c9e3:	83 c4 0c             	add    esp,0xc
c000c9e6:	c3                   	ret    
c000c9e7:	90                   	nop

c000c9e8 <Keyboard::~Keyboard()>:
c000c9e8:	83 ec 0c             	sub    esp,0xc
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f2:	e8 cd ff ff ff       	call   c000c9c4 <Keyboard::~Keyboard()>
c000c9f7:	83 c4 10             	add    esp,0x10
c000c9fa:	83 ec 08             	sub    esp,0x8
c000c9fd:	68 5c 01 00 00       	push   0x15c
c000ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca06:	e8 0d db ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	83 c4 0c             	add    esp,0xc
c000ca11:	c3                   	ret    

c000ca12 <LogicalDisk::close(int, int, void*)>:
c000ca12:	83 c8 ff             	or     eax,0xffffffff
c000ca15:	c3                   	ret    

c000ca16 <LogicalDisk::~LogicalDisk()>:
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	ba 34 e9 01 c0       	mov    edx,0xc001e934
c000ca1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca22:	89 10                	mov    DWORD PTR [eax],edx
c000ca24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca28:	83 ec 0c             	sub    esp,0xc
c000ca2b:	50                   	push   eax
c000ca2c:	e8 1d ef ff ff       	call   c000b94e <Device::~Device()>
c000ca31:	83 c4 10             	add    esp,0x10
c000ca34:	90                   	nop
c000ca35:	83 c4 0c             	add    esp,0xc
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <LogicalDisk::~LogicalDisk()>:
c000ca3a:	83 ec 0c             	sub    esp,0xc
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca44:	e8 cd ff ff ff       	call   c000ca16 <LogicalDisk::~LogicalDisk()>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	83 ec 08             	sub    esp,0x8
c000ca4f:	68 78 01 00 00       	push   0x178
c000ca54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca58:	e8 bb da ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	83 c4 0c             	add    esp,0xc
c000ca63:	c3                   	ret    

c000ca64 <LogicalDisk::open(int, int, void*)>:
c000ca64:	83 ec 18             	sub    esp,0x18
c000ca67:	68 e8 e8 01 c0       	push   0xc001e8e8
c000ca6c:	e8 b2 38 00 00       	call   c0010323 <KePanic(char const*)>
c000ca71:	83 c8 ff             	or     eax,0xffffffff
c000ca74:	83 c4 1c             	add    esp,0x1c
c000ca77:	c3                   	ret    

c000ca78 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca78:	53                   	push   ebx
c000ca79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca85:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca8b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca91:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca97:	77 10                	ja     c000caa9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca99:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca9f:	89 d3                	mov    ebx,edx
c000caa1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000caa7:	72 05                	jb     c000caae <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caa9:	83 c8 ff             	or     eax,0xffffffff
c000caac:	89 c2                	mov    edx,eax
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cab0:	56                   	push   esi
c000cab1:	83 c8 ff             	or     eax,0xffffffff
c000cab4:	53                   	push   ebx
c000cab5:	89 c2                	mov    edx,eax
c000cab7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cabb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cabf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cac3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cac9:	77 27                	ja     c000caf2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cacb:	89 d8                	mov    eax,ebx
c000cacd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cad3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cad9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cade:	89 c2                	mov    edx,eax
c000cae0:	73 10                	jae    c000caf2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cae2:	89 c8                	mov    eax,ecx
c000cae4:	89 da                	mov    edx,ebx
c000cae6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000caec:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caf2:	5b                   	pop    ebx
c000caf3:	5e                   	pop    esi
c000caf4:	c3                   	ret    
c000caf5:	90                   	nop

c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caf6:	83 ec 1c             	sub    esp,0x1c
c000caf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cafd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb1c:	83 ec 08             	sub    esp,0x8
c000cb1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb23:	50                   	push   eax
c000cb24:	e8 bb f0 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	ba 34 e9 01 c0       	mov    edx,0xc001e934
c000cb31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb35:	89 10                	mov    DWORD PTR [eax],edx
c000cb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb46:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb51:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb66:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb72:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb78:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb7e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb89:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb8f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb9d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbb1:	90                   	nop
c000cbb2:	83 c4 1c             	add    esp,0x1c
c000cbb5:	c3                   	ret    

c000cbb6 <LogicalDisk::assignDriveLetter()>:
c000cbb6:	55                   	push   ebp
c000cbb7:	57                   	push   edi
c000cbb8:	56                   	push   esi
c000cbb9:	53                   	push   ebx
c000cbba:	83 ec 14             	sub    esp,0x14
c000cbbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbc1:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c000cbc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbcd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbd1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbd7:	8b 3d 04 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025404
c000cbdd:	3c 01                	cmp    al,0x1
c000cbdf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbe3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbe7:	19 c0                	sbb    eax,eax
c000cbe9:	83 e0 02             	and    eax,0x2
c000cbec:	83 c0 41             	add    eax,0x41
c000cbef:	0f be e8             	movsx  ebp,al
c000cbf2:	3c 43                	cmp    al,0x43
c000cbf4:	75 10                	jne    c000cc06 <LogicalDisk::assignDriveLetter()+0x50>
c000cbf6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbfd:	75 5d                	jne    c000cc5c <LogicalDisk::assignDriveLetter()+0xa6>
c000cbff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc04:	75 56                	jne    c000cc5c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc06:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc09:	ba 01 00 00 00       	mov    edx,0x1
c000cc0e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc12:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc16:	d3 e2                	shl    edx,cl
c000cc18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc1c:	89 d7                	mov    edi,edx
c000cc1e:	89 d6                	mov    esi,edx
c000cc20:	c1 ff 1f             	sar    edi,0x1f
c000cc23:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc27:	21 f9                	and    ecx,edi
c000cc29:	09 d1                	or     ecx,edx
c000cc2b:	75 2f                	jne    c000cc5c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc2d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc35:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc3b:	09 f2                	or     edx,esi
c000cc3d:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c000cc43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc47:	09 fa                	or     edx,edi
c000cc49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc4d:	89 15 04 54 02 c0    	mov    DWORD PTR ds:0xc0025404,edx
c000cc53:	89 1c bd 20 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabe0],ebx
c000cc5a:	eb 08                	jmp    c000cc64 <LogicalDisk::assignDriveLetter()+0xae>
c000cc5c:	45                   	inc    ebp
c000cc5d:	40                   	inc    eax
c000cc5e:	3c 5b                	cmp    al,0x5b
c000cc60:	75 90                	jne    c000cbf2 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc62:	31 c0                	xor    eax,eax
c000cc64:	83 c4 14             	add    esp,0x14
c000cc67:	5b                   	pop    ebx
c000cc68:	5e                   	pop    esi
c000cc69:	5f                   	pop    edi
c000cc6a:	5d                   	pop    ebp
c000cc6b:	c3                   	ret    

c000cc6c <LogicalDisk::mount()>:
c000cc6c:	56                   	push   esi
c000cc6d:	53                   	push   ebx
c000cc6e:	53                   	push   ebx
c000cc6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc73:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c000cc79:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cc83:	85 db                	test   ebx,ebx
c000cc85:	74 27                	je     c000ccae <LogicalDisk::mount()+0x42>
c000cc87:	51                   	push   ecx
c000cc88:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc91:	83 e8 41             	sub    eax,0x41
c000cc94:	50                   	push   eax
c000cc95:	56                   	push   esi
c000cc96:	53                   	push   ebx
c000cc97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc9a:	83 c4 10             	add    esp,0x10
c000cc9d:	84 c0                	test   al,al
c000cc9f:	74 08                	je     c000cca9 <LogicalDisk::mount()+0x3d>
c000cca1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cca7:	eb 07                	jmp    c000ccb0 <LogicalDisk::mount()+0x44>
c000cca9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccac:	eb d5                	jmp    c000cc83 <LogicalDisk::mount()+0x17>
c000ccae:	31 c0                	xor    eax,eax
c000ccb0:	5a                   	pop    edx
c000ccb1:	5b                   	pop    ebx
c000ccb2:	5e                   	pop    esi
c000ccb3:	c3                   	ret    

c000ccb4 <LogicalDisk::unmount()>:
c000ccb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccc2:	c3                   	ret    
c000ccc3:	90                   	nop

c000ccc4 <LogicalDisk::eject()>:
c000ccc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccce:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccd4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccd7:	90                   	nop

c000ccd8 <LogicalDisk::unassignDriveLetter()>:
c000ccd8:	57                   	push   edi
c000ccd9:	56                   	push   esi
c000ccda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccde:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cce5:	84 c9                	test   cl,cl
c000cce7:	75 0f                	jne    c000ccf8 <LogicalDisk::unassignDriveLetter()+0x20>
c000cce9:	c7 44 24 0c 0c e9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e90c
c000ccf1:	5e                   	pop    esi
c000ccf2:	5f                   	pop    edi
c000ccf3:	e9 2b 36 00 00       	jmp    c0010323 <KePanic(char const*)>
c000ccf8:	83 e9 41             	sub    ecx,0x41
c000ccfb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd02:	b8 01 00 00 00       	mov    eax,0x1
c000cd07:	c7 04 8d 20 54 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdabe0],0x0
c000cd12:	d3 e0                	shl    eax,cl
c000cd14:	89 c7                	mov    edi,eax
c000cd16:	f7 d0                	not    eax
c000cd18:	c1 ff 1f             	sar    edi,0x1f
c000cd1b:	21 05 00 54 02 c0    	and    DWORD PTR ds:0xc0025400,eax
c000cd21:	89 fe                	mov    esi,edi
c000cd23:	f7 d6                	not    esi
c000cd25:	21 35 04 54 02 c0    	and    DWORD PTR ds:0xc0025404,esi
c000cd2b:	5e                   	pop    esi
c000cd2c:	5f                   	pop    edi
c000cd2d:	c3                   	ret    

c000cd2e <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd2e:	57                   	push   edi
c000cd2f:	56                   	push   esi
c000cd30:	53                   	push   ebx
c000cd31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd47:	77 41                	ja     c000cd8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd49:	99                   	cdq    
c000cd4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd50:	01 c8                	add    eax,ecx
c000cd52:	11 da                	adc    edx,ebx
c000cd54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd5a:	19 d7                	sbb    edi,edx
c000cd5c:	72 33                	jb     c000cd91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd82:	5b                   	pop    ebx
c000cd83:	5e                   	pop    esi
c000cd84:	5f                   	pop    edi
c000cd85:	e9 58 0a 00 00       	jmp    c000d7e2 <VCache::read(unsigned long long, int, void*)>
c000cd8a:	b8 05 00 00 00       	mov    eax,0x5
c000cd8f:	eb 05                	jmp    c000cd96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd91:	b8 07 00 00 00       	mov    eax,0x7
c000cd96:	5b                   	pop    ebx
c000cd97:	5e                   	pop    esi
c000cd98:	5f                   	pop    edi
c000cd99:	c3                   	ret    

c000cd9a <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd9a:	57                   	push   edi
c000cd9b:	56                   	push   esi
c000cd9c:	53                   	push   ebx
c000cd9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cda1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cda5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdb3:	77 41                	ja     c000cdf6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdb5:	99                   	cdq    
c000cdb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdbc:	01 c8                	add    eax,ecx
c000cdbe:	11 da                	adc    edx,ebx
c000cdc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc6:	19 d7                	sbb    edi,edx
c000cdc8:	72 33                	jb     c000cdfd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cde4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdee:	5b                   	pop    ebx
c000cdef:	5e                   	pop    esi
c000cdf0:	5f                   	pop    edi
c000cdf1:	e9 d6 08 00 00       	jmp    c000d6cc <VCache::write(unsigned long long, int, void*)>
c000cdf6:	b8 05 00 00 00       	mov    eax,0x5
c000cdfb:	eb 05                	jmp    c000ce02 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdfd:	b8 07 00 00 00       	mov    eax,0x7
c000ce02:	5b                   	pop    ebx
c000ce03:	5e                   	pop    esi
c000ce04:	5f                   	pop    edi
c000ce05:	c3                   	ret    
c000ce06:	66 90                	xchg   ax,ax

c000ce08 <Mouse::Mouse(char const*)>:
c000ce08:	83 ec 0c             	sub    esp,0xc
c000ce0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0f:	83 ec 08             	sub    esp,0x8
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	50                   	push   eax
c000ce17:	e8 c8 ed ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000ce1c:	83 c4 10             	add    esp,0x10
c000ce1f:	ba 60 e9 01 c0       	mov    edx,0xc001e960
c000ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce28:	89 10                	mov    DWORD PTR [eax],edx
c000ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce38:	90                   	nop
c000ce39:	83 c4 0c             	add    esp,0xc
c000ce3c:	c3                   	ret    
c000ce3d:	90                   	nop
c000ce3e:	66 90                	xchg   ax,ax

c000ce40 <Mouse::~Mouse()>:
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	ba 60 e9 01 c0       	mov    edx,0xc001e960
c000ce48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4c:	89 10                	mov    DWORD PTR [eax],edx
c000ce4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce52:	83 ec 0c             	sub    esp,0xc
c000ce55:	50                   	push   eax
c000ce56:	e8 f3 ea ff ff       	call   c000b94e <Device::~Device()>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	90                   	nop
c000ce5f:	83 c4 0c             	add    esp,0xc
c000ce62:	c3                   	ret    
c000ce63:	90                   	nop

c000ce64 <Mouse::~Mouse()>:
c000ce64:	83 ec 0c             	sub    esp,0xc
c000ce67:	83 ec 0c             	sub    esp,0xc
c000ce6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6e:	e8 cd ff ff ff       	call   c000ce40 <Mouse::~Mouse()>
c000ce73:	83 c4 10             	add    esp,0x10
c000ce76:	83 ec 08             	sub    esp,0x8
c000ce79:	68 58 01 00 00       	push   0x158
c000ce7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce82:	e8 91 d6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	83 c4 0c             	add    esp,0xc
c000ce8d:	c3                   	ret    

c000ce8e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce8e:	55                   	push   ebp
c000ce8f:	57                   	push   edi
c000ce90:	56                   	push   esi
c000ce91:	53                   	push   ebx
c000ce92:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce98:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce9f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cea6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cead:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ceb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ceb8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cebc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cec3:	e8 18 ee ff ff       	call   c000bce0 <Device::getName()>
c000cec8:	5a                   	pop    edx
c000cec9:	59                   	pop    ecx
c000ceca:	50                   	push   eax
c000cecb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cecf:	55                   	push   ebp
c000ced0:	e8 2b 37 ff ff       	call   c0000600 <strcpy>
c000ced5:	5b                   	pop    ebx
c000ced6:	58                   	pop    eax
c000ced7:	68 84 e9 01 c0       	push   0xc001e984
c000cedc:	55                   	push   ebp
c000cedd:	e8 de 38 ff ff       	call   c00007c0 <strcat>
c000cee2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cee9:	e8 87 a9 ff ff       	call   c0007875 <malloc>
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	89 c3                	mov    ebx,eax
c000cef3:	57                   	push   edi
c000cef4:	56                   	push   esi
c000cef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cefd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf04:	55                   	push   ebp
c000cf05:	50                   	push   eax
c000cf06:	e8 eb fb ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf0b:	83 c4 14             	add    esp,0x14
c000cf0e:	53                   	push   ebx
c000cf0f:	e8 a2 fc ff ff       	call   c000cbb6 <LogicalDisk::assignDriveLetter()>
c000cf14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf17:	e8 50 fd ff ff       	call   c000cc6c <LogicalDisk::mount()>
c000cf1c:	58                   	pop    eax
c000cf1d:	5a                   	pop    edx
c000cf1e:	53                   	push   ebx
c000cf1f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf26:	e8 21 eb ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000cf2b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf31:	5b                   	pop    ebx
c000cf32:	5e                   	pop    esi
c000cf33:	5f                   	pop    edi
c000cf34:	5d                   	pop    ebp
c000cf35:	c3                   	ret    

c000cf36 <createPartitionsForDisk(PhysicalDisk*)>:
c000cf36:	55                   	push   ebp
c000cf37:	57                   	push   edi
c000cf38:	56                   	push   esi
c000cf39:	53                   	push   ebx
c000cf3a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf40:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf47:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf4d:	3d 00 02 00 00       	cmp    eax,0x200
c000cf52:	74 27                	je     c000cf7b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf54:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf5a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf60:	83 ec 10             	sub    esp,0x10
c000cf63:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf67:	99                   	cdq    
c000cf68:	c1 e6 0a             	shl    esi,0xa
c000cf6b:	52                   	push   edx
c000cf6c:	89 fd                	mov    ebp,edi
c000cf6e:	50                   	push   eax
c000cf6f:	55                   	push   ebp
c000cf70:	56                   	push   esi
c000cf71:	e8 9a f9 00 00       	call   c001c910 <__udivdi3>
c000cf76:	e9 b1 00 00 00       	jmp    c000d02c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf7b:	83 ec 0c             	sub    esp,0xc
c000cf7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf80:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf84:	56                   	push   esi
c000cf85:	6a 01                	push   0x1
c000cf87:	6a 00                	push   0x0
c000cf89:	6a 00                	push   0x0
c000cf8b:	53                   	push   ebx
c000cf8c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf8f:	83 c4 20             	add    esp,0x20
c000cf92:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf9a:	75 0a                	jne    c000cfa6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf9c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cfa4:	74 2c                	je     c000cfd2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cfa6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfb2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfb8:	83 ec 10             	sub    esp,0x10
c000cfbb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfbf:	89 f7                	mov    edi,esi
c000cfc1:	c1 e0 0a             	shl    eax,0xa
c000cfc4:	c1 ff 1f             	sar    edi,0x1f
c000cfc7:	57                   	push   edi
c000cfc8:	56                   	push   esi
c000cfc9:	52                   	push   edx
c000cfca:	50                   	push   eax
c000cfcb:	e8 40 f9 00 00       	call   c001c910 <__udivdi3>
c000cfd0:	eb 5a                	jmp    c000d02c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfd2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfd9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cfe0:	83 e1 7f             	and    ecx,0x7f
c000cfe3:	83 e0 7f             	and    eax,0x7f
c000cfe6:	01 c1                	add    ecx,eax
c000cfe8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfef:	83 e0 7f             	and    eax,0x7f
c000cff2:	01 c1                	add    ecx,eax
c000cff4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cffb:	83 e0 7f             	and    eax,0x7f
c000cffe:	00 c1                	add    cl,al
c000d000:	74 41                	je     c000d043 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d002:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d008:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d00e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d014:	83 ec 10             	sub    esp,0x10
c000d017:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d01b:	89 f7                	mov    edi,esi
c000d01d:	c1 e0 0a             	shl    eax,0xa
c000d020:	c1 ff 1f             	sar    edi,0x1f
c000d023:	57                   	push   edi
c000d024:	56                   	push   esi
c000d025:	52                   	push   edx
c000d026:	50                   	push   eax
c000d027:	e8 e4 f8 00 00       	call   c001c910 <__udivdi3>
c000d02c:	83 c4 14             	add    esp,0x14
c000d02f:	52                   	push   edx
c000d030:	50                   	push   eax
c000d031:	6a 00                	push   0x0
c000d033:	6a 00                	push   0x0
c000d035:	53                   	push   ebx
c000d036:	e8 53 fe ff ff       	call   c000ce8e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d03b:	83 c4 20             	add    esp,0x20
c000d03e:	e9 79 01 00 00       	jmp    c000d1bc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d043:	89 f0                	mov    eax,esi
c000d045:	31 f6                	xor    esi,esi
c000d047:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d04e:	75 02                	jne    c000d052 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d050:	89 f1                	mov    ecx,esi
c000d052:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d059:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d060:	c1 e2 08             	shl    edx,0x8
c000d063:	c1 e7 10             	shl    edi,0x10
c000d066:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d06e:	09 fa                	or     edx,edi
c000d070:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d078:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d07f:	83 c0 10             	add    eax,0x10
c000d082:	09 fa                	or     edx,edi
c000d084:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d08b:	c1 e7 18             	shl    edi,0x18
c000d08e:	09 fa                	or     edx,edi
c000d090:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d097:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d09b:	c1 e7 10             	shl    edi,0x10
c000d09e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d0a5:	c1 e2 08             	shl    edx,0x8
c000d0a8:	09 fa                	or     edx,edi
c000d0aa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d0b1:	09 fa                	or     edx,edi
c000d0b3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0ba:	c1 e7 18             	shl    edi,0x18
c000d0bd:	09 fa                	or     edx,edi
c000d0bf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0c3:	46                   	inc    esi
c000d0c4:	83 fe 04             	cmp    esi,0x4
c000d0c7:	0f 85 7a ff ff ff    	jne    c000d047 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d1:	83 f0 01             	xor    eax,0x1
c000d0d4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0d8:	75 57                	jne    c000d131 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0de:	83 f0 01             	xor    eax,0x1
c000d0e1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0e5:	75 4a                	jne    c000d131 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0e7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d101:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d107:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d10d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d111:	89 f7                	mov    edi,esi
c000d113:	c1 e0 0a             	shl    eax,0xa
c000d116:	c1 ff 1f             	sar    edi,0x1f
c000d119:	57                   	push   edi
c000d11a:	56                   	push   esi
c000d11b:	52                   	push   edx
c000d11c:	50                   	push   eax
c000d11d:	e8 ee f7 00 00       	call   c001c910 <__udivdi3>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d129:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d12d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d131:	84 c9                	test   cl,cl
c000d133:	74 53                	je     c000d188 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d135:	0f b6 c9             	movzx  ecx,cl
c000d138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d140:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d144:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d148:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d14c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d150:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d154:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d15c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d164:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d168:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d16c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d170:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d174:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d178:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d17c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d180:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d184:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d188:	31 ed                	xor    ebp,ebp
c000d18a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d18e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d192:	89 f8                	mov    eax,edi
c000d194:	09 f0                	or     eax,esi
c000d196:	74 1e                	je     c000d1b6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d198:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d19c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d1a0:	89 d1                	mov    ecx,edx
c000d1a2:	09 c1                	or     ecx,eax
c000d1a4:	74 10                	je     c000d1b6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d1a6:	83 ec 0c             	sub    esp,0xc
c000d1a9:	57                   	push   edi
c000d1aa:	56                   	push   esi
c000d1ab:	52                   	push   edx
c000d1ac:	50                   	push   eax
c000d1ad:	53                   	push   ebx
c000d1ae:	e8 db fc ff ff       	call   c000ce8e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1b3:	83 c4 20             	add    esp,0x20
c000d1b6:	45                   	inc    ebp
c000d1b7:	83 fd 04             	cmp    ebp,0x4
c000d1ba:	75 ce                	jne    c000d18a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1bc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1c2:	5b                   	pop    ebx
c000d1c3:	5e                   	pop    esi
c000d1c4:	5f                   	pop    edi
c000d1c5:	5d                   	pop    ebp
c000d1c6:	c3                   	ret    
c000d1c7:	90                   	nop

c000d1c8 <Serial::Serial(char const*)>:
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	83 ec 08             	sub    esp,0x8
c000d1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d6:	50                   	push   eax
c000d1d7:	e8 08 ea ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	ba 98 e9 01 c0       	mov    edx,0xc001e998
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	89 10                	mov    DWORD PTR [eax],edx
c000d1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ee:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d1f8:	90                   	nop
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop
c000d1fe:	66 90                	xchg   ax,ax

c000d200 <Serial::~Serial()>:
c000d200:	83 ec 0c             	sub    esp,0xc
c000d203:	ba 98 e9 01 c0       	mov    edx,0xc001e998
c000d208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20c:	89 10                	mov    DWORD PTR [eax],edx
c000d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	50                   	push   eax
c000d216:	e8 33 e7 ff ff       	call   c000b94e <Device::~Device()>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	83 c4 0c             	add    esp,0xc
c000d222:	c3                   	ret    
c000d223:	90                   	nop

c000d224 <Serial::~Serial()>:
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	83 ec 0c             	sub    esp,0xc
c000d22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22e:	e8 cd ff ff ff       	call   c000d200 <Serial::~Serial()>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	68 58 01 00 00       	push   0x158
c000d23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d242:	e8 d1 d2 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d247:	83 c4 10             	add    esp,0x10
c000d24a:	83 c4 0c             	add    esp,0xc
c000d24d:	c3                   	ret    
c000d24e:	66 90                	xchg   ax,ax

c000d250 <Timer::Timer(char const*)>:
c000d250:	83 ec 0c             	sub    esp,0xc
c000d253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d257:	83 ec 08             	sub    esp,0x8
c000d25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d25e:	50                   	push   eax
c000d25f:	e8 80 e9 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d264:	83 c4 10             	add    esp,0x10
c000d267:	ba dc e9 01 c0       	mov    edx,0xc001e9dc
c000d26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d270:	89 10                	mov    DWORD PTR [eax],edx
c000d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d276:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d280:	90                   	nop
c000d281:	83 c4 0c             	add    esp,0xc
c000d284:	c3                   	ret    
c000d285:	90                   	nop
c000d286:	66 90                	xchg   ax,ax

c000d288 <Timer::~Timer()>:
c000d288:	83 ec 0c             	sub    esp,0xc
c000d28b:	ba dc e9 01 c0       	mov    edx,0xc001e9dc
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	89 10                	mov    DWORD PTR [eax],edx
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	83 ec 0c             	sub    esp,0xc
c000d29d:	50                   	push   eax
c000d29e:	e8 ab e6 ff ff       	call   c000b94e <Device::~Device()>
c000d2a3:	83 c4 10             	add    esp,0x10
c000d2a6:	90                   	nop
c000d2a7:	83 c4 0c             	add    esp,0xc
c000d2aa:	c3                   	ret    
c000d2ab:	90                   	nop

c000d2ac <Timer::~Timer()>:
c000d2ac:	83 ec 0c             	sub    esp,0xc
c000d2af:	83 ec 0c             	sub    esp,0xc
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	e8 cd ff ff ff       	call   c000d288 <Timer::~Timer()>
c000d2bb:	83 c4 10             	add    esp,0x10
c000d2be:	83 ec 08             	sub    esp,0x8
c000d2c1:	68 5c 01 00 00       	push   0x15c
c000d2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ca:	e8 49 d2 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d2cf:	83 c4 10             	add    esp,0x10
c000d2d2:	83 c4 0c             	add    esp,0xc
c000d2d5:	c3                   	ret    

c000d2d6 <Timer::read()>:
c000d2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2e0:	c3                   	ret    

c000d2e1 <setupTimer(int)>:
c000d2e1:	53                   	push   ebx
c000d2e2:	83 ec 14             	sub    esp,0x14
c000d2e5:	68 5c 01 00 00       	push   0x15c
c000d2ea:	e8 86 a5 ff ff       	call   c0007875 <malloc>
c000d2ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2f2:	89 c3                	mov    ebx,eax
c000d2f4:	e8 33 ef 00 00       	call   c001c22c <PIT::PIT()>
c000d2f9:	58                   	pop    eax
c000d2fa:	5a                   	pop    edx
c000d2fb:	53                   	push   ebx
c000d2fc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000d302:	e8 45 e7 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000d307:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d309:	6a 00                	push   0x0
c000d30b:	6a 00                	push   0x0
c000d30d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d311:	53                   	push   ebx
c000d312:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d315:	89 d8                	mov    eax,ebx
c000d317:	83 c4 28             	add    esp,0x28
c000d31a:	5b                   	pop    ebx
c000d31b:	c3                   	ret    

c000d31c <timerHandler(unsigned int)>:
c000d31c:	56                   	push   esi
c000d31d:	53                   	push   ebx
c000d31e:	51                   	push   ecx
c000d31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d323:	01 05 8c 54 02 c0    	add    DWORD PTR ds:0xc002548c,eax
c000d329:	80 3d bd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebd,0x0
c000d330:	0f 84 4a 01 00 00    	je     c000d480 <timerHandler(unsigned int)+0x164>
c000d336:	fa                   	cli    
c000d337:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d33d:	83 ec 0c             	sub    esp,0xc
c000d340:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c000d346:	68 78 61 02 c0       	push   0xc0026178
c000d34b:	e8 90 fb 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	84 c0                	test   al,al
c000d355:	0f 85 a1 00 00 00    	jne    c000d3fc <timerHandler(unsigned int)+0xe0>
c000d35b:	83 ec 0c             	sub    esp,0xc
c000d35e:	68 78 61 02 c0       	push   0xc0026178
c000d363:	e8 94 fb 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d368:	83 c4 10             	add    esp,0x10
c000d36b:	89 c6                	mov    esi,eax
c000d36d:	8d 76 00             	lea    esi,[esi+0x0]
c000d370:	83 ec 0c             	sub    esp,0xc
c000d373:	68 78 61 02 c0       	push   0xc0026178
c000d378:	e8 7f fb 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d37d:	c7 04 24 78 61 02 c0 	mov    DWORD PTR [esp],0xc0026178
c000d384:	89 c3                	mov    ebx,eax
c000d386:	e8 79 fb 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d38b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c000d397:	77 23                	ja     c000d3bc <timerHandler(unsigned int)+0xa0>
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	53                   	push   ebx
c000d39d:	e8 62 69 00 00       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	39 de                	cmp    esi,ebx
c000d3a7:	75 27                	jne    c000d3d0 <timerHandler(unsigned int)+0xb4>
c000d3a9:	83 ec 0c             	sub    esp,0xc
c000d3ac:	68 78 61 02 c0       	push   0xc0026178
c000d3b1:	e8 46 fb 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3b6:	89 c6                	mov    esi,eax
c000d3b8:	eb 12                	jmp    c000d3cc <timerHandler(unsigned int)+0xb0>
c000d3ba:	66 90                	xchg   ax,ax
c000d3bc:	52                   	push   edx
c000d3bd:	52                   	push   edx
c000d3be:	53                   	push   ebx
c000d3bf:	68 78 61 02 c0       	push   0xc0026178
c000d3c4:	e8 f3 fb 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	90                   	nop
c000d3d0:	83 ec 0c             	sub    esp,0xc
c000d3d3:	68 78 61 02 c0       	push   0xc0026178
c000d3d8:	e8 03 fb 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	84 c0                	test   al,al
c000d3e2:	75 18                	jne    c000d3fc <timerHandler(unsigned int)+0xe0>
c000d3e4:	83 ec 0c             	sub    esp,0xc
c000d3e7:	68 78 61 02 c0       	push   0xc0026178
c000d3ec:	e8 0b fb 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3f1:	83 c4 10             	add    esp,0x10
c000d3f4:	39 f0                	cmp    eax,esi
c000d3f6:	0f 85 74 ff ff ff    	jne    c000d370 <timerHandler(unsigned int)+0x54>
c000d3fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d401:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d405:	74 41                	je     c000d448 <timerHandler(unsigned int)+0x12c>
c000d407:	80 3d bc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebc,0x0
c000d40e:	74 38                	je     c000d448 <timerHandler(unsigned int)+0x12c>
c000d410:	fa                   	cli    
c000d411:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d417:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c000d41c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d422:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d425:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d42b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d42e:	72 08                	jb     c000d438 <timerHandler(unsigned int)+0x11c>
c000d430:	e8 0b 64 00 00       	call   c0013840 <schedule()>
c000d435:	8d 76 00             	lea    esi,[esi+0x0]
c000d438:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d43d:	48                   	dec    eax
c000d43e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d443:	75 03                	jne    c000d448 <timerHandler(unsigned int)+0x12c>
c000d445:	fb                   	sti    
c000d446:	66 90                	xchg   ax,ax
c000d448:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d44d:	48                   	dec    eax
c000d44e:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000d453:	75 1b                	jne    c000d470 <timerHandler(unsigned int)+0x154>
c000d455:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c000d45c:	74 12                	je     c000d470 <timerHandler(unsigned int)+0x154>
c000d45e:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000d468:	e8 d3 63 00 00       	call   c0013840 <schedule()>
c000d46d:	8d 76 00             	lea    esi,[esi+0x0]
c000d470:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d475:	48                   	dec    eax
c000d476:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d47b:	75 03                	jne    c000d480 <timerHandler(unsigned int)+0x164>
c000d47d:	fb                   	sti    
c000d47e:	66 90                	xchg   ax,ax
c000d480:	58                   	pop    eax
c000d481:	5b                   	pop    ebx
c000d482:	5e                   	pop    esi
c000d483:	c3                   	ret    

c000d484 <VCache::VCache(PhysicalDisk*)>:
c000d484:	53                   	push   ebx
c000d485:	83 ec 18             	sub    esp,0x18
c000d488:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c000d48d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d491:	89 10                	mov    DWORD PTR [eax],edx
c000d493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d497:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ad:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4eb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fe:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d506:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d515:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d51d:	83 ec 0c             	sub    esp,0xc
c000d520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d524:	e8 4c a3 ff ff       	call   c0007875 <malloc>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	89 c3                	mov    ebx,eax
c000d52e:	83 ec 0c             	sub    esp,0xc
c000d531:	53                   	push   ebx
c000d532:	e8 d5 60 00 00       	call   c001360c <Mutex::Mutex()>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d545:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d549:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d550:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d557:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d55b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d565:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d568:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d56c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d572:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d578:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d57c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d57f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d586:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d58a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d58e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d594:	05 00 02 00 00       	add    eax,0x200
c000d599:	c1 e0 03             	shl    eax,0x3
c000d59c:	83 ec 0c             	sub    esp,0xc
c000d59f:	50                   	push   eax
c000d5a0:	e8 d0 a2 ff ff       	call   c0007875 <malloc>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	89 c2                	mov    edx,eax
c000d5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d5ce:	89 d0                	mov    eax,edx
c000d5d0:	c1 e0 02             	shl    eax,0x2
c000d5d3:	01 d0                	add    eax,edx
c000d5d5:	c1 e0 04             	shl    eax,0x4
c000d5d8:	83 ec 0c             	sub    esp,0xc
c000d5db:	50                   	push   eax
c000d5dc:	e8 94 a2 ff ff       	call   c0007875 <malloc>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 c2                	mov    edx,eax
c000d5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5ed:	90                   	nop
c000d5ee:	83 c4 18             	add    esp,0x18
c000d5f1:	5b                   	pop    ebx
c000d5f2:	c3                   	ret    
c000d5f3:	90                   	nop

c000d5f4 <VCache::invalidateReadBuffer()>:
c000d5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5f8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d5fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d602:	c3                   	ret    
c000d603:	90                   	nop

c000d604 <VCache::writeWriteBuffer()>:
c000d604:	53                   	push   ebx
c000d605:	83 ec 08             	sub    esp,0x8
c000d608:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d60c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d610:	74 1e                	je     c000d630 <VCache::writeWriteBuffer()+0x2c>
c000d612:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d615:	83 ec 0c             	sub    esp,0xc
c000d618:	8b 10                	mov    edx,DWORD PTR [eax]
c000d61a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d61d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d620:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d623:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d626:	50                   	push   eax
c000d627:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d62a:	83 c4 20             	add    esp,0x20
c000d62d:	8d 76 00             	lea    esi,[esi+0x0]
c000d630:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d637:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d63e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d642:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d649:	83 c4 08             	add    esp,0x8
c000d64c:	5b                   	pop    ebx
c000d64d:	c3                   	ret    
c000d64e:	66 90                	xchg   ax,ax

c000d650 <VCache::~VCache()>:
c000d650:	83 ec 0c             	sub    esp,0xc
c000d653:	ba 0c ea 01 c0       	mov    edx,0xc001ea0c
c000d658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65c:	89 10                	mov    DWORD PTR [eax],edx
c000d65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d662:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d665:	84 c0                	test   al,al
c000d667:	74 0f                	je     c000d678 <VCache::~VCache()+0x28>
c000d669:	83 ec 0c             	sub    esp,0xc
c000d66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d670:	e8 8f ff ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c000d675:	83 c4 10             	add    esp,0x10
c000d678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d67f:	83 ec 0c             	sub    esp,0xc
c000d682:	50                   	push   eax
c000d683:	e8 fd a1 ff ff       	call   c0007885 <free>
c000d688:	83 c4 10             	add    esp,0x10
c000d68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d692:	83 ec 0c             	sub    esp,0xc
c000d695:	50                   	push   eax
c000d696:	e8 ea a1 ff ff       	call   c0007885 <free>
c000d69b:	83 c4 10             	add    esp,0x10
c000d69e:	90                   	nop
c000d69f:	83 c4 0c             	add    esp,0xc
c000d6a2:	c3                   	ret    
c000d6a3:	90                   	nop

c000d6a4 <VCache::~VCache()>:
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	83 ec 0c             	sub    esp,0xc
c000d6aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ae:	e8 9d ff ff ff       	call   c000d650 <VCache::~VCache()>
c000d6b3:	83 c4 10             	add    esp,0x10
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 44                	push   0x44
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 54 ce ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	83 c4 0c             	add    esp,0xc
c000d6ca:	c3                   	ret    
c000d6cb:	90                   	nop

c000d6cc <VCache::write(unsigned long long, int, void*)>:
c000d6cc:	55                   	push   ebp
c000d6cd:	57                   	push   edi
c000d6ce:	56                   	push   esi
c000d6cf:	53                   	push   ebx
c000d6d0:	83 ec 1c             	sub    esp,0x1c
c000d6d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6df:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d6e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6e7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6ef:	31 c0                	xor    eax,eax
c000d6f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d6f4:	39 e8                	cmp    eax,ebp
c000d6f6:	7d 18                	jge    c000d710 <VCache::write(unsigned long long, int, void*)+0x44>
c000d6f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6fb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d701:	0f af c8             	imul   ecx,eax
c000d704:	89 ca                	mov    edx,ecx
c000d706:	01 f2                	add    edx,esi
c000d708:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d70a:	40                   	inc    eax
c000d70b:	eb e7                	jmp    c000d6f4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d70d:	8d 76 00             	lea    esi,[esi+0x0]
c000d710:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d714:	74 0a                	je     c000d720 <VCache::write(unsigned long long, int, void*)+0x54>
c000d716:	53                   	push   ebx
c000d717:	e8 d8 fe ff ff       	call   c000d5f4 <VCache::invalidateReadBuffer()>
c000d71c:	58                   	pop    eax
c000d71d:	8d 76 00             	lea    esi,[esi+0x0]
c000d720:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d724:	74 5a                	je     c000d780 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d726:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d729:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d72d:	89 f8                	mov    eax,edi
c000d72f:	99                   	cdq    
c000d730:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d733:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d736:	31 c1                	xor    ecx,eax
c000d738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d73c:	31 d0                	xor    eax,edx
c000d73e:	09 c1                	or     ecx,eax
c000d740:	75 32                	jne    c000d774 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d742:	83 fd 01             	cmp    ebp,0x1
c000d745:	75 2d                	jne    c000d774 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d747:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d74a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d750:	0f af f9             	imul   edi,ecx
c000d753:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d758:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d75b:	40                   	inc    eax
c000d75c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d75f:	83 f8 50             	cmp    eax,0x50
c000d762:	75 74                	jne    c000d7d8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	53                   	push   ebx
c000d768:	e8 97 fe ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	eb 66                	jmp    c000d7d8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d772:	66 90                	xchg   ax,ax
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	53                   	push   ebx
c000d778:	e8 87 fe ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d783:	83 fd 4f             	cmp    ebp,0x4f
c000d786:	7f 24                	jg     c000d7ac <VCache::write(unsigned long long, int, void*)+0xe0>
c000d788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d78c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d78f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d792:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d796:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d79a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d79d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d7a0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d7a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7a8:	eb 2e                	jmp    c000d7d8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d7aa:	66 90                	xchg   ax,ax
c000d7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d7b2:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d7b6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d7ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7be:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d7c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7c6:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d7ca:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7cd:	83 c4 1c             	add    esp,0x1c
c000d7d0:	5b                   	pop    ebx
c000d7d1:	5e                   	pop    esi
c000d7d2:	5f                   	pop    edi
c000d7d3:	5d                   	pop    ebp
c000d7d4:	ff e0                	jmp    eax
c000d7d6:	66 90                	xchg   ax,ax
c000d7d8:	83 c4 1c             	add    esp,0x1c
c000d7db:	31 c0                	xor    eax,eax
c000d7dd:	5b                   	pop    ebx
c000d7de:	5e                   	pop    esi
c000d7df:	5f                   	pop    edi
c000d7e0:	5d                   	pop    ebp
c000d7e1:	c3                   	ret    

c000d7e2 <VCache::read(unsigned long long, int, void*)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	83 ec 1c             	sub    esp,0x1c
c000d7e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d7ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7f5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d7f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d7fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d801:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d805:	74 0d                	je     c000d814 <VCache::read(unsigned long long, int, void*)+0x32>
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	57                   	push   edi
c000d80b:	e8 f4 fd ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c000d810:	83 c4 10             	add    esp,0x10
c000d813:	90                   	nop
c000d814:	83 fd 01             	cmp    ebp,0x1
c000d817:	0f 85 93 00 00 00    	jne    c000d8b0 <VCache::read(unsigned long long, int, void*)+0xce>
c000d81d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d820:	89 04 24             	mov    DWORD PTR [esp],eax
c000d823:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d82a:	0f 85 80 00 00 00    	jne    c000d8b0 <VCache::read(unsigned long long, int, void*)+0xce>
c000d830:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d833:	89 e9                	mov    ecx,ebp
c000d835:	f7 d9                	neg    ecx
c000d837:	89 c8                	mov    eax,ecx
c000d839:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d83d:	c1 f8 1f             	sar    eax,0x1f
c000d840:	21 d9                	and    ecx,ebx
c000d842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d846:	89 c8                	mov    eax,ecx
c000d848:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d84c:	21 f1                	and    ecx,esi
c000d84e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d852:	89 ca                	mov    edx,ecx
c000d854:	74 2e                	je     c000d884 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d856:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d859:	75 29                	jne    c000d884 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d85b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d85e:	75 24                	jne    c000d884 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d860:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d863:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d869:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d86c:	8d 70 ff             	lea    esi,[eax-0x1]
c000d86f:	21 f3                	and    ebx,esi
c000d871:	0f af d9             	imul   ebx,ecx
c000d874:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d877:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d87b:	89 de                	mov    esi,ebx
c000d87d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d87f:	31 c0                	xor    eax,eax
c000d881:	eb 61                	jmp    c000d8e4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d883:	90                   	nop
c000d884:	83 ec 0c             	sub    esp,0xc
c000d887:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d88b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d88f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d892:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d895:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d897:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d89a:	55                   	push   ebp
c000d89b:	52                   	push   edx
c000d89c:	50                   	push   eax
c000d89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d8a4:	83 c4 20             	add    esp,0x20
c000d8a7:	85 c0                	test   eax,eax
c000d8a9:	75 39                	jne    c000d8e4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d8ab:	eb b3                	jmp    c000d860 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d8b0:	83 ec 0c             	sub    esp,0xc
c000d8b3:	57                   	push   edi
c000d8b4:	e8 3b fd ff ff       	call   c000d5f4 <VCache::invalidateReadBuffer()>
c000d8b9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d8c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8c2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d8c6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d8ca:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d8ce:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d8d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d8d9:	83 c4 2c             	add    esp,0x2c
c000d8dc:	5b                   	pop    ebx
c000d8dd:	5e                   	pop    esi
c000d8de:	5f                   	pop    edi
c000d8df:	5d                   	pop    ebp
c000d8e0:	ff e0                	jmp    eax
c000d8e2:	66 90                	xchg   ax,ax
c000d8e4:	83 c4 1c             	add    esp,0x1c
c000d8e7:	5b                   	pop    ebx
c000d8e8:	5e                   	pop    esi
c000d8e9:	5f                   	pop    edi
c000d8ea:	5d                   	pop    ebp
c000d8eb:	c3                   	ret    

c000d8ec <Video::putrect(int, int, int, int, unsigned int)>:
c000d8ec:	55                   	push   ebp
c000d8ed:	57                   	push   edi
c000d8ee:	56                   	push   esi
c000d8ef:	53                   	push   ebx
c000d8f0:	83 ec 1c             	sub    esp,0x1c
c000d8f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d8f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8fb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d8ff:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d903:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d90b:	01 df                	add    edi,ebx
c000d90d:	39 fb                	cmp    ebx,edi
c000d90f:	7d 1f                	jge    c000d930 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d911:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d915:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d919:	7d 12                	jge    c000d92d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d91b:	8b 16                	mov    edx,DWORD PTR [esi]
c000d91d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d921:	53                   	push   ebx
c000d922:	55                   	push   ebp
c000d923:	45                   	inc    ebp
c000d924:	56                   	push   esi
c000d925:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	eb e8                	jmp    c000d915 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d92d:	43                   	inc    ebx
c000d92e:	eb dd                	jmp    c000d90d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d930:	83 c4 1c             	add    esp,0x1c
c000d933:	5b                   	pop    ebx
c000d934:	5e                   	pop    esi
c000d935:	5f                   	pop    edi
c000d936:	5d                   	pop    ebp
c000d937:	c3                   	ret    

c000d938 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d938:	55                   	push   ebp
c000d939:	57                   	push   edi
c000d93a:	31 ff                	xor    edi,edi
c000d93c:	56                   	push   esi
c000d93d:	53                   	push   ebx
c000d93e:	83 ec 1c             	sub    esp,0x1c
c000d941:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d945:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d949:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d950:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d955:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d959:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d95d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d961:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d964:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d968:	01 f9                	add    ecx,edi
c000d96a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d96e:	7d 2f                	jge    c000d99f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d970:	31 f6                	xor    esi,esi
c000d972:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d976:	01 f2                	add    edx,esi
c000d978:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d97c:	7d 1a                	jge    c000d998 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d97e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d981:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d984:	46                   	inc    esi
c000d985:	51                   	push   ecx
c000d986:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d98a:	52                   	push   edx
c000d98b:	55                   	push   ebp
c000d98c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d98f:	83 c4 10             	add    esp,0x10
c000d992:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d996:	eb da                	jmp    c000d972 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d998:	47                   	inc    edi
c000d999:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d99d:	eb c5                	jmp    c000d964 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d99f:	83 c4 1c             	add    esp,0x1c
c000d9a2:	5b                   	pop    ebx
c000d9a3:	5e                   	pop    esi
c000d9a4:	5f                   	pop    edi
c000d9a5:	5d                   	pop    ebp
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <Video::blit(unsigned int*, int, int, int, int)>:
c000d9a8:	55                   	push   ebp
c000d9a9:	57                   	push   edi
c000d9aa:	56                   	push   esi
c000d9ab:	53                   	push   ebx
c000d9ac:	83 ec 1c             	sub    esp,0x1c
c000d9af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9b7:	85 c0                	test   eax,eax
c000d9b9:	79 02                	jns    c000d9bd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d9bb:	31 c0                	xor    eax,eax
c000d9bd:	c1 e0 02             	shl    eax,0x2
c000d9c0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d9c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d9cc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d9d0:	39 d8                	cmp    eax,ebx
c000d9d2:	7e 49                	jle    c000da1d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9d4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9da:	7c 41                	jl     c000da1d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9dc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d9e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9e4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9e8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d9ec:	39 f9                	cmp    ecx,edi
c000d9ee:	7e 22                	jle    c000da12 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d9f0:	83 c5 04             	add    ebp,0x4
c000d9f3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9f9:	7c 14                	jl     c000da0f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d9fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d9fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da00:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da08:	56                   	push   esi
c000da09:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da0c:	83 c4 10             	add    esp,0x10
c000da0f:	47                   	inc    edi
c000da10:	eb d2                	jmp    c000d9e4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000da12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da16:	43                   	inc    ebx
c000da17:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000da1b:	eb ab                	jmp    c000d9c8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000da1d:	83 c4 1c             	add    esp,0x1c
c000da20:	5b                   	pop    ebx
c000da21:	5e                   	pop    esi
c000da22:	5f                   	pop    edi
c000da23:	5d                   	pop    ebp
c000da24:	c3                   	ret    
c000da25:	90                   	nop

c000da26 <Video::clearScreen(unsigned int)>:
c000da26:	57                   	push   edi
c000da27:	56                   	push   esi
c000da28:	53                   	push   ebx
c000da29:	31 db                	xor    ebx,ebx
c000da2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da2f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da35:	7e 1f                	jle    c000da56 <Video::clearScreen(unsigned int)+0x30>
c000da37:	31 ff                	xor    edi,edi
c000da39:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da3f:	7e 12                	jle    c000da53 <Video::clearScreen(unsigned int)+0x2d>
c000da41:	8b 06                	mov    eax,DWORD PTR [esi]
c000da43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da47:	53                   	push   ebx
c000da48:	57                   	push   edi
c000da49:	47                   	inc    edi
c000da4a:	56                   	push   esi
c000da4b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da4e:	83 c4 10             	add    esp,0x10
c000da51:	eb e6                	jmp    c000da39 <Video::clearScreen(unsigned int)+0x13>
c000da53:	43                   	inc    ebx
c000da54:	eb d9                	jmp    c000da2f <Video::clearScreen(unsigned int)+0x9>
c000da56:	5b                   	pop    ebx
c000da57:	5e                   	pop    esi
c000da58:	5f                   	pop    edi
c000da59:	c3                   	ret    

c000da5a <Video::putpixel(int, int, unsigned int)>:
c000da5a:	c7 44 24 04 14 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea14
c000da62:	e9 bc 28 00 00       	jmp    c0010323 <KePanic(char const*)>
c000da67:	90                   	nop

c000da68 <Video::Video(char const*)>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6f:	83 ec 08             	sub    esp,0x8
c000da72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da76:	50                   	push   eax
c000da77:	e8 68 e1 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000da7c:	83 c4 10             	add    esp,0x10
c000da7f:	ba 84 ea 01 c0       	mov    edx,0xc001ea84
c000da84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da88:	89 10                	mov    DWORD PTR [eax],edx
c000da8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da98:	90                   	nop
c000da99:	83 c4 0c             	add    esp,0xc
c000da9c:	c3                   	ret    
c000da9d:	90                   	nop

c000da9e <Video::~Video()>:
c000da9e:	83 ec 0c             	sub    esp,0xc
c000daa1:	ba 84 ea 01 c0       	mov    edx,0xc001ea84
c000daa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daaa:	89 10                	mov    DWORD PTR [eax],edx
c000daac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab0:	83 ec 0c             	sub    esp,0xc
c000dab3:	50                   	push   eax
c000dab4:	e8 95 de ff ff       	call   c000b94e <Device::~Device()>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	90                   	nop
c000dabd:	83 c4 0c             	add    esp,0xc
c000dac0:	c3                   	ret    
c000dac1:	90                   	nop

c000dac2 <Video::~Video()>:
c000dac2:	83 ec 0c             	sub    esp,0xc
c000dac5:	83 ec 0c             	sub    esp,0xc
c000dac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dacc:	e8 cd ff ff ff       	call   c000da9e <Video::~Video()>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	83 ec 08             	sub    esp,0x8
c000dad7:	68 64 01 00 00       	push   0x164
c000dadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae0:	e8 33 ca ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	83 c4 0c             	add    esp,0xc
c000daeb:	c3                   	ret    

c000daec <Video::isMonochrome()>:
c000daec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <Video::getWidth()>:
c000daf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db02:	c3                   	ret    
c000db03:	90                   	nop

c000db04 <Video::getHeight()>:
c000db04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db08:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db0e:	c3                   	ret    
c000db0f:	90                   	nop

c000db10 <Video::drawCursor(int, int, unsigned char*, int)>:
c000db10:	55                   	push   ebp
c000db11:	57                   	push   edi
c000db12:	56                   	push   esi
c000db13:	53                   	push   ebx
c000db14:	83 ec 2c             	sub    esp,0x2c
c000db17:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db1b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db1f:	83 f8 01             	cmp    eax,0x1
c000db22:	19 c9                	sbb    ecx,ecx
c000db24:	31 db                	xor    ebx,ebx
c000db26:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000db2a:	89 cd                	mov    ebp,ecx
c000db2c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000db34:	f7 d5                	not    ebp
c000db36:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000db3c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000db40:	01 d8                	add    eax,ebx
c000db42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db46:	56                   	push   esi
c000db47:	e8 b8 ff ff ff       	call   c000db04 <Video::getHeight()>
c000db4c:	59                   	pop    ecx
c000db4d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000db51:	7e 70                	jle    c000dbc3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000db53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db57:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000db5b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000db5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db62:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db66:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000db6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db71:	89 f8                	mov    eax,edi
c000db73:	83 c0 20             	add    eax,0x20
c000db76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db7a:	56                   	push   esi
c000db7b:	e8 78 ff ff ff       	call   c000daf8 <Video::getWidth()>
c000db80:	5a                   	pop    edx
c000db81:	39 c7                	cmp    edi,eax
c000db83:	7d 34                	jge    c000dbb9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000db85:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db8a:	74 05                	je     c000db91 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db8c:	8b 06                	mov    eax,DWORD PTR [esi]
c000db8e:	55                   	push   ebp
c000db8f:	eb 0d                	jmp    c000db9e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db91:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db96:	74 12                	je     c000dbaa <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db98:	8b 06                	mov    eax,DWORD PTR [esi]
c000db9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dba2:	57                   	push   edi
c000dba3:	56                   	push   esi
c000dba4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dbae:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dbb2:	47                   	inc    edi
c000dbb3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dbb7:	75 c1                	jne    c000db7a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000dbb9:	43                   	inc    ebx
c000dbba:	83 fb 20             	cmp    ebx,0x20
c000dbbd:	0f 85 79 ff ff ff    	jne    c000db3c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000dbc3:	83 c4 2c             	add    esp,0x2c
c000dbc6:	5b                   	pop    ebx
c000dbc7:	5e                   	pop    esi
c000dbc8:	5f                   	pop    edi
c000dbc9:	5d                   	pop    ebp
c000dbca:	c3                   	ret    
c000dbcb:	90                   	nop

c000dbcc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dbcc:	55                   	push   ebp
c000dbcd:	57                   	push   edi
c000dbce:	56                   	push   esi
c000dbcf:	53                   	push   ebx
c000dbd0:	83 ec 28             	sub    esp,0x28
c000dbd3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dbd7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dbdb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dbdf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dbe3:	c1 e6 08             	shl    esi,0x8
c000dbe6:	01 c6                	add    esi,eax
c000dbe8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dbec:	c1 e0 08             	shl    eax,0x8
c000dbef:	01 d0                	add    eax,edx
c000dbf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbf9:	0f af c6             	imul   eax,esi
c000dbfc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dc03:	50                   	push   eax
c000dc04:	e8 6c 9c ff ff       	call   c0007875 <malloc>
c000dc09:	83 c4 10             	add    esp,0x10
c000dc0c:	89 c7                	mov    edi,eax
c000dc0e:	85 c0                	test   eax,eax
c000dc10:	75 10                	jne    c000dc22 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dc12:	83 ec 0c             	sub    esp,0xc
c000dc15:	68 35 ea 01 c0       	push   0xc001ea35
c000dc1a:	e8 04 27 00 00       	call   c0010323 <KePanic(char const*)>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dc25:	ba 12 00 00 00       	mov    edx,0x12
c000dc2a:	84 c0                	test   al,al
c000dc2c:	74 11                	je     c000dc3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dc2e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dc32:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dc36:	c1 fa 03             	sar    edx,0x3
c000dc39:	0f af d1             	imul   edx,ecx
c000dc3c:	83 c2 12             	add    edx,0x12
c000dc3f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dc43:	74 04                	je     c000dc49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dc45:	85 f6                	test   esi,esi
c000dc47:	75 12                	jne    c000dc5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dc49:	83 ec 0c             	sub    esp,0xc
c000dc4c:	68 45 ea 01 c0       	push   0xc001ea45
c000dc51:	e8 b8 c9 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000dc56:	e9 b8 00 00 00       	jmp    c000dd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dc5b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dc5f:	80 f9 02             	cmp    cl,0x2
c000dc62:	0f 85 96 00 00 00    	jne    c000dcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dc68:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dc6d:	75 0e                	jne    c000dc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc6f:	84 c0                	test   al,al
c000dc71:	75 0a                	jne    c000dc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc73:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dc76:	83 e8 18             	sub    eax,0x18
c000dc79:	a8 f7                	test   al,0xf7
c000dc7b:	74 0a                	je     c000dc87 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc7d:	83 ec 0c             	sub    esp,0xc
c000dc80:	68 5a ea 01 c0       	push   0xc001ea5a
c000dc85:	eb 7f                	jmp    c000dd06 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc97:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc9b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dca3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dca7:	75 0c                	jne    c000dcb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dca9:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dcae:	c1 e0 18             	shl    eax,0x18
c000dcb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcb5:	45                   	inc    ebp
c000dcb6:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dcbb:	c1 e1 10             	shl    ecx,0x10
c000dcbe:	89 c8                	mov    eax,ecx
c000dcc0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dcc5:	c1 e1 08             	shl    ecx,0x8
c000dcc8:	09 c1                	or     ecx,eax
c000dcca:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dcce:	09 c1                	or     ecx,eax
c000dcd0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dcd4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dcd8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dcdc:	c1 f8 03             	sar    eax,0x3
c000dcdf:	01 c2                	add    edx,eax
c000dce1:	89 e8                	mov    eax,ebp
c000dce3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dce7:	39 c6                	cmp    esi,eax
c000dce9:	7f b0                	jg     c000dc9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dceb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dcef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcf3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dcf6:	7e 22                	jle    c000dd1a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dcf8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dcfc:	eb 99                	jmp    c000dc97 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dcfe:	50                   	push   eax
c000dcff:	50                   	push   eax
c000dd00:	51                   	push   ecx
c000dd01:	68 68 ea 01 c0       	push   0xc001ea68
c000dd06:	e8 03 c9 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000dd0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dd0e:	e8 72 9b ff ff       	call   c0007885 <free>
c000dd13:	83 c4 10             	add    esp,0x10
c000dd16:	31 ff                	xor    edi,edi
c000dd18:	eb 0f                	jmp    c000dd29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dd1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd1e:	89 30                	mov    DWORD PTR [eax],esi
c000dd20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd24:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd27:	89 30                	mov    DWORD PTR [eax],esi
c000dd29:	83 c4 1c             	add    esp,0x1c
c000dd2c:	89 f8                	mov    eax,edi
c000dd2e:	5b                   	pop    ebx
c000dd2f:	5e                   	pop    esi
c000dd30:	5f                   	pop    edi
c000dd31:	5d                   	pop    ebp
c000dd32:	c3                   	ret    
c000dd33:	90                   	nop

c000dd34 <Video::putTGA(int, int, unsigned char*, int)>:
c000dd34:	55                   	push   ebp
c000dd35:	57                   	push   edi
c000dd36:	56                   	push   esi
c000dd37:	53                   	push   ebx
c000dd38:	83 ec 28             	sub    esp,0x28
c000dd3b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd43:	50                   	push   eax
c000dd44:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd48:	50                   	push   eax
c000dd49:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd4d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd51:	56                   	push   esi
c000dd52:	e8 75 fe ff ff       	call   c000dbcc <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dd57:	83 c4 20             	add    esp,0x20
c000dd5a:	85 c0                	test   eax,eax
c000dd5c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd60:	74 35                	je     c000dd97 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd62:	89 c7                	mov    edi,eax
c000dd64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd68:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd6c:	39 d8                	cmp    eax,ebx
c000dd6e:	7e 27                	jle    c000dd97 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd70:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd78:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd7c:	39 e8                	cmp    eax,ebp
c000dd7e:	7e 14                	jle    c000dd94 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd80:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd82:	83 c7 04             	add    edi,0x4
c000dd85:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd88:	53                   	push   ebx
c000dd89:	55                   	push   ebp
c000dd8a:	45                   	inc    ebp
c000dd8b:	56                   	push   esi
c000dd8c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd8f:	83 c4 10             	add    esp,0x10
c000dd92:	eb e0                	jmp    c000dd74 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd94:	43                   	inc    ebx
c000dd95:	eb cd                	jmp    c000dd64 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd97:	83 c4 1c             	add    esp,0x1c
c000dd9a:	5b                   	pop    ebx
c000dd9b:	5e                   	pop    esi
c000dd9c:	5f                   	pop    edi
c000dd9d:	5d                   	pop    ebp
c000dd9e:	c3                   	ret    
c000dd9f:	90                   	nop

c000dda0 <ACPI::close(int, int, void*)>:
c000dda0:	83 ec 1c             	sub    esp,0x1c
c000dda3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ddab:	74 0b                	je     c000ddb8 <ACPI::close(int, int, void*)+0x18>
c000ddad:	b8 00 00 00 00       	mov    eax,0x0
c000ddb2:	e9 9d 00 00 00       	jmp    c000de54 <ACPI::close(int, int, void*)+0xb4>
c000ddb7:	90                   	nop
c000ddb8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ddbd:	75 29                	jne    c000dde8 <ACPI::close(int, int, void*)+0x48>
c000ddbf:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000ddc4:	85 c0                	test   eax,eax
c000ddc6:	74 08                	je     c000ddd0 <ACPI::close(int, int, void*)+0x30>
c000ddc8:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000ddcd:	ff d0                	call   eax
c000ddcf:	90                   	nop
c000ddd0:	83 ec 0c             	sub    esp,0xc
c000ddd3:	68 c4 ea 01 c0       	push   0xc001eac4
c000ddd8:	e8 46 25 00 00       	call   c0010323 <KePanic(char const*)>
c000dddd:	83 c4 10             	add    esp,0x10
c000dde0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dde5:	eb 6d                	jmp    c000de54 <ACPI::close(int, int, void*)+0xb4>
c000dde7:	90                   	nop
c000dde8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dded:	75 5d                	jne    c000de4c <ACPI::close(int, int, void*)+0xac>
c000ddef:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000ddf4:	85 c0                	test   eax,eax
c000ddf6:	74 08                	je     c000de00 <ACPI::close(int, int, void*)+0x60>
c000ddf8:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000ddfd:	ff d0                	call   eax
c000ddff:	90                   	nop
c000de00:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000de05:	8d 76 00             	lea    esi,[esi+0x0]
c000de08:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de0c:	25 ff 00 00 00       	and    eax,0xff
c000de11:	83 e0 02             	and    eax,0x2
c000de14:	74 1e                	je     c000de34 <ACPI::close(int, int, void*)+0x94>
c000de16:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000de1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de21:	89 c2                	mov    edx,eax
c000de23:	ec                   	in     al,dx
c000de24:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000de28:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000de2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de30:	eb d6                	jmp    c000de08 <ACPI::close(int, int, void*)+0x68>
c000de32:	66 90                	xchg   ax,ax
c000de34:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000de3b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000de40:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000de44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de48:	ee                   	out    dx,al
c000de49:	8d 76 00             	lea    esi,[esi+0x0]
c000de4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de51:	8d 76 00             	lea    esi,[esi+0x0]
c000de54:	83 c4 1c             	add    esp,0x1c
c000de57:	c3                   	ret    

c000de58 <findRSDP()>:
c000de58:	83 ec 1c             	sub    esp,0x1c
c000de5b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de60:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de66:	83 e0 04             	and    eax,0x4
c000de69:	84 c0                	test   al,al
c000de6b:	75 07                	jne    c000de74 <findRSDP()+0x1c>
c000de6d:	b8 00 00 00 00       	mov    eax,0x0
c000de72:	eb 70                	jmp    c000dee4 <findRSDP()+0x8c>
c000de74:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000de79:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de7e:	7f 1c                	jg     c000de9c <findRSDP()+0x44>
c000de80:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de85:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de8b:	83 e2 fb             	and    edx,0xfffffffb
c000de8e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de94:	b8 00 00 00 00       	mov    eax,0x0
c000de99:	eb 49                	jmp    c000dee4 <findRSDP()+0x8c>
c000de9b:	90                   	nop
c000de9c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dea4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000deac:	77 2e                	ja     c000dedc <findRSDP()+0x84>
c000deae:	83 ec 04             	sub    esp,0x4
c000deb1:	6a 08                	push   0x8
c000deb3:	68 5f eb 01 c0       	push   0xc001eb5f
c000deb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000debc:	e8 cf 24 ff ff       	call   c0000390 <memcmp>
c000dec1:	83 c4 10             	add    esp,0x10
c000dec4:	85 c0                	test   eax,eax
c000dec6:	0f 94 c0             	sete   al
c000dec9:	84 c0                	test   al,al
c000decb:	74 07                	je     c000ded4 <findRSDP()+0x7c>
c000decd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded1:	eb 11                	jmp    c000dee4 <findRSDP()+0x8c>
c000ded3:	90                   	nop
c000ded4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ded9:	eb c9                	jmp    c000dea4 <findRSDP()+0x4c>
c000dedb:	90                   	nop
c000dedc:	b8 00 00 00 00       	mov    eax,0x0
c000dee1:	8d 76 00             	lea    esi,[esi+0x0]
c000dee4:	83 c4 1c             	add    esp,0x1c
c000dee7:	c3                   	ret    

c000dee8 <loadACPITables(unsigned char*)>:
c000dee8:	57                   	push   edi
c000dee9:	56                   	push   esi
c000deea:	53                   	push   ebx
c000deeb:	83 ec 60             	sub    esp,0x60
c000deee:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000def3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000def9:	83 e0 04             	and    eax,0x4
c000defc:	84 c0                	test   al,al
c000defe:	0f 84 3c 02 00 00    	je     c000e140 <loadACPITables(unsigned char*)+0x258>
c000df04:	a0 c0 56 02 c0       	mov    al,ds:0xc00256c0
c000df09:	84 c0                	test   al,al
c000df0b:	74 77                	je     c000df84 <loadACPITables(unsigned char*)+0x9c>
c000df0d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000df15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df1c:	83 e8 24             	sub    eax,0x24
c000df1f:	c1 e8 03             	shr    eax,0x3
c000df22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000df26:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000df2e:	66 90                	xchg   ax,ax
c000df30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df34:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000df38:	0f 8d b6 00 00 00    	jge    c000dff4 <loadACPITables(unsigned char*)+0x10c>
c000df3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df42:	83 c0 24             	add    eax,0x24
c000df45:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000df49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df55:	c1 e0 03             	shl    eax,0x3
c000df58:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000df5c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000df63:	8b 00                	mov    eax,DWORD PTR [eax]
c000df65:	89 c1                	mov    ecx,eax
c000df67:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df6c:	8d 50 01             	lea    edx,[eax+0x1]
c000df6f:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df75:	89 ca                	mov    edx,ecx
c000df77:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df7e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df82:	eb ac                	jmp    c000df30 <loadACPITables(unsigned char*)+0x48>
c000df84:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df88:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df93:	83 e8 24             	sub    eax,0x24
c000df96:	c1 e8 02             	shr    eax,0x2
c000df99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df9d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dfa5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfa8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dfac:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dfb0:	7d 42                	jge    c000dff4 <loadACPITables(unsigned char*)+0x10c>
c000dfb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfb6:	83 c0 24             	add    eax,0x24
c000dfb9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfc1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dfc5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dfc9:	c1 e0 02             	shl    eax,0x2
c000dfcc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dfd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dfd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dfd6:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000dfdb:	8d 50 01             	lea    edx,[eax+0x1]
c000dfde:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000dfe4:	89 ca                	mov    edx,ecx
c000dfe6:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000dfed:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dff1:	eb b5                	jmp    c000dfa8 <loadACPITables(unsigned char*)+0xc0>
c000dff3:	90                   	nop
c000dff4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dffc:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e001:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e005:	0f 8d 39 01 00 00    	jge    c000e144 <loadACPITables(unsigned char*)+0x25c>
c000e00b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e00f:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e016:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e01a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e01e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e026:	25 ff 0f 00 00       	and    eax,0xfff
c000e02b:	89 c6                	mov    esi,eax
c000e02d:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e033:	83 ec 0c             	sub    esp,0xc
c000e036:	6a 01                	push   0x1
c000e038:	e8 14 b3 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e044:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e04a:	83 ec 0c             	sub    esp,0xc
c000e04d:	6a 01                	push   0x1
c000e04f:	6a 01                	push   0x1
c000e051:	50                   	push   eax
c000e052:	52                   	push   edx
c000e053:	53                   	push   ebx
c000e054:	e8 b5 bc ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e059:	83 c4 20             	add    esp,0x20
c000e05c:	09 f0                	or     eax,esi
c000e05e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e062:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e066:	c1 e0 03             	shl    eax,0x3
c000e069:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e06e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e07a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e082:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e086:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e08e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e092:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e096:	89 c6                	mov    esi,eax
c000e098:	89 d7                	mov    edi,edx
c000e09a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e09c:	89 c8                	mov    eax,ecx
c000e09e:	89 fa                	mov    edx,edi
c000e0a0:	89 f3                	mov    ebx,esi
c000e0a2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e0a6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e0aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e0b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e0bd:	05 00 10 00 00       	add    eax,0x1000
c000e0c2:	c1 e8 0c             	shr    eax,0xc
c000e0c5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0d5:	25 ff 0f 00 00       	and    eax,0xfff
c000e0da:	89 c6                	mov    esi,eax
c000e0dc:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e0e2:	83 ec 0c             	sub    esp,0xc
c000e0e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e0e9:	e8 63 b2 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0fb:	83 ec 0c             	sub    esp,0xc
c000e0fe:	6a 01                	push   0x1
c000e100:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e104:	50                   	push   eax
c000e105:	52                   	push   edx
c000e106:	53                   	push   ebx
c000e107:	e8 02 bc ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e10c:	83 c4 20             	add    esp,0x20
c000e10f:	09 f0                	or     eax,esi
c000e111:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e119:	83 ec 0c             	sub    esp,0xc
c000e11c:	50                   	push   eax
c000e11d:	e8 23 b5 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c000e122:	83 c4 10             	add    esp,0x10
c000e125:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e129:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e12d:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000e134:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e138:	e9 bf fe ff ff       	jmp    c000dffc <loadACPITables(unsigned char*)+0x114>
c000e13d:	8d 76 00             	lea    esi,[esi+0x0]
c000e140:	90                   	nop
c000e141:	8d 76 00             	lea    esi,[esi+0x0]
c000e144:	83 c4 60             	add    esp,0x60
c000e147:	5b                   	pop    ebx
c000e148:	5e                   	pop    esi
c000e149:	5f                   	pop    edi
c000e14a:	c3                   	ret    
c000e14b:	90                   	nop

c000e14c <findRSDT(unsigned char*)>:
c000e14c:	57                   	push   edi
c000e14d:	56                   	push   esi
c000e14e:	53                   	push   ebx
c000e14f:	83 ec 50             	sub    esp,0x50
c000e152:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e157:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e15d:	83 e0 04             	and    eax,0x4
c000e160:	84 c0                	test   al,al
c000e162:	75 0c                	jne    c000e170 <findRSDT(unsigned char*)+0x24>
c000e164:	b8 00 00 00 00       	mov    eax,0x0
c000e169:	e9 26 01 00 00       	jmp    c000e294 <findRSDT(unsigned char*)+0x148>
c000e16e:	66 90                	xchg   ax,ax
c000e170:	89 e0                	mov    eax,esp
c000e172:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e176:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e17a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e17e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e186:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e18a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e18e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e192:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e196:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e19a:	89 c6                	mov    esi,eax
c000e19c:	89 d7                	mov    edi,edx
c000e19e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1a0:	89 c8                	mov    eax,ecx
c000e1a2:	89 fa                	mov    edx,edi
c000e1a4:	89 f3                	mov    ebx,esi
c000e1a6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e1aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e1ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e1b6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e1ba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e1c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e1ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1da:	25 ff 0f 00 00       	and    eax,0xfff
c000e1df:	89 c6                	mov    esi,eax
c000e1e1:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e1e7:	83 ec 0c             	sub    esp,0xc
c000e1ea:	6a 02                	push   0x2
c000e1ec:	e8 60 b1 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e1f1:	83 c4 10             	add    esp,0x10
c000e1f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e1f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1fe:	83 ec 0c             	sub    esp,0xc
c000e201:	6a 01                	push   0x1
c000e203:	6a 02                	push   0x2
c000e205:	50                   	push   eax
c000e206:	52                   	push   edx
c000e207:	53                   	push   ebx
c000e208:	e8 01 bb ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e20d:	83 c4 20             	add    esp,0x20
c000e210:	09 f0                	or     eax,esi
c000e212:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e216:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e21a:	25 ff 0f 00 00       	and    eax,0xfff
c000e21f:	89 c6                	mov    esi,eax
c000e221:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	6a 02                	push   0x2
c000e22c:	e8 20 b1 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e238:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e23e:	83 ec 0c             	sub    esp,0xc
c000e241:	6a 01                	push   0x1
c000e243:	6a 02                	push   0x2
c000e245:	50                   	push   eax
c000e246:	52                   	push   edx
c000e247:	53                   	push   ebx
c000e248:	e8 c1 ba ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e24d:	83 c4 20             	add    esp,0x20
c000e250:	09 f0                	or     eax,esi
c000e252:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e256:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e25b:	75 13                	jne    c000e270 <findRSDT(unsigned char*)+0x124>
c000e25d:	c6 05 c0 56 02 c0 00 	mov    BYTE PTR ds:0xc00256c0,0x0
c000e264:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e268:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e26c:	eb 22                	jmp    c000e290 <findRSDT(unsigned char*)+0x144>
c000e26e:	66 90                	xchg   ax,ax
c000e270:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e275:	75 11                	jne    c000e288 <findRSDT(unsigned char*)+0x13c>
c000e277:	c6 05 c0 56 02 c0 01 	mov    BYTE PTR ds:0xc00256c0,0x1
c000e27e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e282:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e286:	eb 08                	jmp    c000e290 <findRSDT(unsigned char*)+0x144>
c000e288:	b8 00 00 00 00       	mov    eax,0x0
c000e28d:	eb 05                	jmp    c000e294 <findRSDT(unsigned char*)+0x148>
c000e28f:	90                   	nop
c000e290:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e294:	83 c4 50             	add    esp,0x50
c000e297:	5b                   	pop    ebx
c000e298:	5e                   	pop    esi
c000e299:	5f                   	pop    edi
c000e29a:	c3                   	ret    
c000e29b:	90                   	nop

c000e29c <findDataTable(unsigned char*, char*)>:
c000e29c:	83 ec 1c             	sub    esp,0x1c
c000e29f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2a4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2aa:	83 e0 04             	and    eax,0x4
c000e2ad:	84 c0                	test   al,al
c000e2af:	75 07                	jne    c000e2b8 <findDataTable(unsigned char*, char*)+0x1c>
c000e2b1:	b8 00 00 00 00       	mov    eax,0x0
c000e2b6:	eb 58                	jmp    c000e310 <findDataTable(unsigned char*, char*)+0x74>
c000e2b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e2c0:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e2c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2c9:	7d 3d                	jge    c000e308 <findDataTable(unsigned char*, char*)+0x6c>
c000e2cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2cf:	c1 e0 03             	shl    eax,0x3
c000e2d2:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e2d7:	83 ec 04             	sub    esp,0x4
c000e2da:	6a 04                	push   0x4
c000e2dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2e0:	50                   	push   eax
c000e2e1:	e8 aa 20 ff ff       	call   c0000390 <memcmp>
c000e2e6:	83 c4 10             	add    esp,0x10
c000e2e9:	85 c0                	test   eax,eax
c000e2eb:	0f 94 c0             	sete   al
c000e2ee:	84 c0                	test   al,al
c000e2f0:	74 0e                	je     c000e300 <findDataTable(unsigned char*, char*)+0x64>
c000e2f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f6:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e2fd:	eb 11                	jmp    c000e310 <findDataTable(unsigned char*, char*)+0x74>
c000e2ff:	90                   	nop
c000e300:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e304:	eb ba                	jmp    c000e2c0 <findDataTable(unsigned char*, char*)+0x24>
c000e306:	66 90                	xchg   ax,ax
c000e308:	b8 00 00 00 00       	mov    eax,0x0
c000e30d:	8d 76 00             	lea    esi,[esi+0x0]
c000e310:	83 c4 1c             	add    esp,0x1c
c000e313:	c3                   	ret    

c000e314 <scanMADT()>:
c000e314:	53                   	push   ebx
c000e315:	83 ec 38             	sub    esp,0x38
c000e318:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000e31d:	25 00 04 00 00       	and    eax,0x400
c000e322:	74 14                	je     c000e338 <scanMADT()+0x24>
c000e324:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e329:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e32f:	83 e2 fb             	and    edx,0xfffffffb
c000e332:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e338:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e33d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e343:	83 e0 04             	and    eax,0x4
c000e346:	84 c0                	test   al,al
c000e348:	0f 84 8a 04 00 00    	je     c000e7d8 <scanMADT()+0x4c4>
c000e34e:	e8 05 fb ff ff       	call   c000de58 <findRSDP()>
c000e353:	a3 cc 56 02 c0       	mov    ds:0xc00256cc,eax
c000e358:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e35d:	85 c0                	test   eax,eax
c000e35f:	75 1b                	jne    c000e37c <scanMADT()+0x68>
c000e361:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e366:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e36c:	83 e2 fb             	and    edx,0xfffffffb
c000e36f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e375:	e9 66 04 00 00       	jmp    c000e7e0 <scanMADT()+0x4cc>
c000e37a:	66 90                	xchg   ax,ax
c000e37c:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e381:	83 ec 0c             	sub    esp,0xc
c000e384:	50                   	push   eax
c000e385:	e8 c2 fd ff ff       	call   c000e14c <findRSDT(unsigned char*)>
c000e38a:	83 c4 10             	add    esp,0x10
c000e38d:	a3 c8 56 02 c0       	mov    ds:0xc00256c8,eax
c000e392:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e397:	85 c0                	test   eax,eax
c000e399:	75 19                	jne    c000e3b4 <scanMADT()+0xa0>
c000e39b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e3a0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3a6:	83 e2 fb             	and    edx,0xfffffffb
c000e3a9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3af:	e9 2c 04 00 00       	jmp    c000e7e0 <scanMADT()+0x4cc>
c000e3b4:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e3b9:	83 ec 0c             	sub    esp,0xc
c000e3bc:	50                   	push   eax
c000e3bd:	e8 26 fb ff ff       	call   c000dee8 <loadACPITables(unsigned char*)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e3ca:	83 ec 08             	sub    esp,0x8
c000e3cd:	68 68 eb 01 c0       	push   0xc001eb68
c000e3d2:	50                   	push   eax
c000e3d3:	e8 c4 fe ff ff       	call   c000e29c <findDataTable(unsigned char*, char*)>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3df:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e3e4:	75 1a                	jne    c000e400 <scanMADT()+0xec>
c000e3e6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e3eb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3f1:	83 e2 fe             	and    edx,0xfffffffe
c000e3f4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3fa:	e9 e1 03 00 00       	jmp    c000e7e0 <scanMADT()+0x4cc>
c000e3ff:	90                   	nop
c000e400:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e408:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e40f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e413:	0f 87 c7 03 00 00    	ja     c000e7e0 <scanMADT()+0x4cc>
c000e419:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e421:	0f 87 b9 03 00 00    	ja     c000e7e0 <scanMADT()+0x4cc>
c000e427:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e42f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e433:	8d 50 01             	lea    edx,[eax+0x1]
c000e436:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e43a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e43e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e442:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44a:	8d 50 01             	lea    edx,[eax+0x1]
c000e44d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e451:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e455:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e459:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e45d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e462:	0f 86 74 03 00 00    	jbe    c000e7dc <scanMADT()+0x4c8>
c000e468:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e46d:	75 5d                	jne    c000e4cc <scanMADT()+0x1b8>
c000e46f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e473:	8d 50 01             	lea    edx,[eax+0x1]
c000e476:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e47a:	8a 15 c0 58 02 c0    	mov    dl,BYTE PTR ds:0xc00258c0
c000e480:	81 e2 ff 00 00 00    	and    edx,0xff
c000e486:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e48a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e48e:	88 82 00 59 02 c0    	mov    BYTE PTR [edx-0x3ffda700],al
c000e494:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e498:	8d 42 01             	lea    eax,[edx+0x1]
c000e49b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e49f:	a0 c0 58 02 c0       	mov    al,ds:0xc00258c0
c000e4a4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4a7:	88 0d c0 58 02 c0    	mov    BYTE PTR ds:0xc00258c0,cl
c000e4ad:	25 ff 00 00 00       	and    eax,0xff
c000e4b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4b6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e4ba:	88 90 e0 58 02 c0    	mov    BYTE PTR [eax-0x3ffda720],dl
c000e4c0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4c5:	e9 f6 02 00 00       	jmp    c000e7c0 <scanMADT()+0x4ac>
c000e4ca:	66 90                	xchg   ax,ax
c000e4cc:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e4d1:	0f 85 29 01 00 00    	jne    c000e600 <scanMADT()+0x2ec>
c000e4d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4db:	8d 50 01             	lea    edx,[eax+0x1]
c000e4de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4e2:	8a 15 80 57 02 c0    	mov    dl,BYTE PTR ds:0xc0025780
c000e4e8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4f2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e4f6:	88 82 a0 57 02 c0    	mov    BYTE PTR [edx-0x3ffda860],al
c000e4fc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e500:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e504:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e508:	01 d0                	add    eax,edx
c000e50a:	83 c0 2c             	add    eax,0x2c
c000e50d:	8a 00                	mov    al,BYTE PTR [eax]
c000e50f:	31 d2                	xor    edx,edx
c000e511:	88 c2                	mov    dl,al
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 48 01             	lea    ecx,[eax+0x1]
c000e51a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e522:	25 ff 00 00 00       	and    eax,0xff
c000e527:	c1 e0 08             	shl    eax,0x8
c000e52a:	89 d1                	mov    ecx,edx
c000e52c:	09 c1                	or     ecx,eax
c000e52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e532:	8d 50 02             	lea    edx,[eax+0x2]
c000e535:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e539:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e53d:	25 ff 00 00 00       	and    eax,0xff
c000e542:	c1 e0 10             	shl    eax,0x10
c000e545:	09 c1                	or     ecx,eax
c000e547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54b:	8d 50 03             	lea    edx,[eax+0x3]
c000e54e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e552:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e556:	25 ff 00 00 00       	and    eax,0xff
c000e55b:	c1 e0 18             	shl    eax,0x18
c000e55e:	09 c1                	or     ecx,eax
c000e560:	89 ca                	mov    edx,ecx
c000e562:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e567:	25 ff 00 00 00       	and    eax,0xff
c000e56c:	89 14 85 c0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda840],edx
c000e573:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e578:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e57c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e580:	01 d0                	add    eax,edx
c000e582:	83 c0 2c             	add    eax,0x2c
c000e585:	8a 00                	mov    al,BYTE PTR [eax]
c000e587:	31 d2                	xor    edx,edx
c000e589:	88 c2                	mov    dl,al
c000e58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e596:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e59a:	25 ff 00 00 00       	and    eax,0xff
c000e59f:	c1 e0 08             	shl    eax,0x8
c000e5a2:	89 d1                	mov    ecx,edx
c000e5a4:	09 c1                	or     ecx,eax
c000e5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5aa:	8d 50 02             	lea    edx,[eax+0x2]
c000e5ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5b5:	25 ff 00 00 00       	and    eax,0xff
c000e5ba:	c1 e0 10             	shl    eax,0x10
c000e5bd:	09 c1                	or     ecx,eax
c000e5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c3:	8d 50 03             	lea    edx,[eax+0x3]
c000e5c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ce:	25 ff 00 00 00       	and    eax,0xff
c000e5d3:	c1 e0 18             	shl    eax,0x18
c000e5d6:	09 c1                	or     ecx,eax
c000e5d8:	89 ca                	mov    edx,ecx
c000e5da:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e5df:	25 ff 00 00 00       	and    eax,0xff
c000e5e4:	89 14 85 40 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7c0],edx
c000e5eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5f0:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e5f5:	40                   	inc    eax
c000e5f6:	a2 80 57 02 c0       	mov    ds:0xc0025780,al
c000e5fb:	e9 c0 01 00 00       	jmp    c000e7c0 <scanMADT()+0x4ac>
c000e600:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e605:	0f 85 fd 00 00 00    	jne    c000e708 <scanMADT()+0x3f4>
c000e60b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60f:	8d 50 01             	lea    edx,[eax+0x1]
c000e612:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e61a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e61e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e626:	8d 50 01             	lea    edx,[eax+0x1]
c000e629:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e62d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e631:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e635:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e639:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e63d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e641:	01 d0                	add    eax,edx
c000e643:	83 c0 2c             	add    eax,0x2c
c000e646:	8a 00                	mov    al,BYTE PTR [eax]
c000e648:	31 d2                	xor    edx,edx
c000e64a:	88 c2                	mov    dl,al
c000e64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e650:	8d 48 01             	lea    ecx,[eax+0x1]
c000e653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e657:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e65b:	25 ff 00 00 00       	and    eax,0xff
c000e660:	c1 e0 08             	shl    eax,0x8
c000e663:	89 d1                	mov    ecx,edx
c000e665:	09 c1                	or     ecx,eax
c000e667:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66b:	8d 50 02             	lea    edx,[eax+0x2]
c000e66e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e672:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e676:	25 ff 00 00 00       	and    eax,0xff
c000e67b:	c1 e0 10             	shl    eax,0x10
c000e67e:	09 c1                	or     ecx,eax
c000e680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e684:	8d 50 03             	lea    edx,[eax+0x3]
c000e687:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e68b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e68f:	25 ff 00 00 00       	and    eax,0xff
c000e694:	c1 e0 18             	shl    eax,0x18
c000e697:	09 c8                	or     eax,ecx
c000e699:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e69d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6aa:	01 d0                	add    eax,edx
c000e6ac:	83 c0 2c             	add    eax,0x2c
c000e6af:	8a 00                	mov    al,BYTE PTR [eax]
c000e6b1:	25 ff 00 00 00       	and    eax,0xff
c000e6b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6ba:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e6bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e6c5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e6cb:	c1 e2 08             	shl    edx,0x8
c000e6ce:	09 d0                	or     eax,edx
c000e6d0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e6d5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6da:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6de:	25 ff 00 00 00       	and    eax,0xff
c000e6e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6e7:	88 90 e0 ff 01 c0    	mov    BYTE PTR [eax-0x3ffe0020],dl
c000e6ed:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6f1:	31 d2                	xor    edx,edx
c000e6f3:	88 c2                	mov    dl,al
c000e6f5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e6fa:	66 89 84 12 60 57 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda8a0],ax
c000e702:	e9 b9 00 00 00       	jmp    c000e7c0 <scanMADT()+0x4ac>
c000e707:	90                   	nop
c000e708:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e70d:	0f 85 a1 00 00 00    	jne    c000e7b4 <scanMADT()+0x4a0>
c000e713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e717:	8d 50 01             	lea    edx,[eax+0x1]
c000e71a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e71e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e722:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e726:	25 ff 00 00 00       	and    eax,0xff
c000e72b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e72f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e733:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e737:	01 d0                	add    eax,edx
c000e739:	83 c0 2c             	add    eax,0x2c
c000e73c:	8a 00                	mov    al,BYTE PTR [eax]
c000e73e:	31 d2                	xor    edx,edx
c000e740:	88 c2                	mov    dl,al
c000e742:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e746:	8d 48 01             	lea    ecx,[eax+0x1]
c000e749:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e74d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e751:	25 ff 00 00 00       	and    eax,0xff
c000e756:	c1 e0 08             	shl    eax,0x8
c000e759:	09 d0                	or     eax,edx
c000e75b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e75f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e764:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e768:	8d 50 01             	lea    edx,[eax+0x1]
c000e76b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e76f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e773:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e777:	25 ff 00 00 00       	and    eax,0xff
c000e77c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e784:	c1 e0 08             	shl    eax,0x8
c000e787:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e78b:	89 c1                	mov    ecx,eax
c000e78d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e791:	c1 e0 18             	shl    eax,0x18
c000e794:	89 c3                	mov    ebx,eax
c000e796:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c000e79b:	8d 50 01             	lea    edx,[eax+0x1]
c000e79e:	89 15 d0 56 02 c0    	mov    DWORD PTR ds:0xc00256d0,edx
c000e7a4:	09 d9                	or     ecx,ebx
c000e7a6:	89 ca                	mov    edx,ecx
c000e7a8:	89 14 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],edx
c000e7af:	eb 0f                	jmp    c000e7c0 <scanMADT()+0x4ac>
c000e7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e7b9:	75 05                	jne    c000e7c0 <scanMADT()+0x4ac>
c000e7bb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e7c0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e7c4:	31 d2                	xor    edx,edx
c000e7c6:	88 c2                	mov    dl,al
c000e7c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e7cc:	01 d0                	add    eax,edx
c000e7ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7d2:	e9 31 fc ff ff       	jmp    c000e408 <scanMADT()+0xf4>
c000e7d7:	90                   	nop
c000e7d8:	90                   	nop
c000e7d9:	eb 05                	jmp    c000e7e0 <scanMADT()+0x4cc>
c000e7db:	90                   	nop
c000e7dc:	90                   	nop
c000e7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e7e0:	83 c4 38             	add    esp,0x38
c000e7e3:	5b                   	pop    ebx
c000e7e4:	c3                   	ret    
c000e7e5:	90                   	nop
c000e7e6:	66 90                	xchg   ax,ax

c000e7e8 <ACPI::ACPI()>:
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	83 ec 08             	sub    esp,0x8
c000e7f2:	68 6d eb 01 c0       	push   0xc001eb6d
c000e7f7:	50                   	push   eax
c000e7f8:	e8 e7 d3 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	ba a4 ec 01 c0       	mov    edx,0xc001eca4
c000e805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e809:	89 10                	mov    DWORD PTR [eax],edx
c000e80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e832:	e8 dd fa ff ff       	call   c000e314 <scanMADT()>
c000e837:	90                   	nop
c000e838:	83 c4 0c             	add    esp,0xc
c000e83b:	c3                   	ret    

c000e83c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e83c:	83 ec 2c             	sub    esp,0x2c
c000e83f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e847:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e84b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e84f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e854:	88 d0                	mov    al,dl
c000e856:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e85a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e85f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e867:	90                   	nop
c000e868:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e86c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e872:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e876:	0f 8d 9c 00 00 00    	jge    c000e918 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e87c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e880:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e884:	83 c2 2a             	add    edx,0x2a
c000e887:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e88b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e890:	75 7a                	jne    c000e90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e896:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e89a:	83 c2 2a             	add    edx,0x2a
c000e89d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e8a1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e8a5:	75 65                	jne    c000e90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e8a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8ac:	74 3a                	je     c000e8e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e8ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8b6:	83 c2 2a             	add    edx,0x2a
c000e8b9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e8bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8c4:	39 c2                	cmp    edx,eax
c000e8c6:	74 10                	je     c000e8d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e8c8:	83 ec 0c             	sub    esp,0xc
c000e8cb:	68 e8 ea 01 c0       	push   0xc001eae8
c000e8d0:	e8 4e 1a 00 00       	call   c0010323 <KePanic(char const*)>
c000e8d5:	83 c4 10             	add    esp,0x10
c000e8d8:	83 ec 0c             	sub    esp,0xc
c000e8db:	68 72 eb 01 c0       	push   0xc001eb72
c000e8e0:	e8 3e 1a 00 00       	call   c0010323 <KePanic(char const*)>
c000e8e5:	83 c4 10             	add    esp,0x10
c000e8e8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8f4:	83 c2 2a             	add    edx,0x2a
c000e8f7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e8fb:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8fd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e900:	89 01                	mov    DWORD PTR [ecx],eax
c000e902:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e905:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e90a:	66 90                	xchg   ax,ax
c000e90c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e910:	e9 53 ff ff ff       	jmp    c000e868 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e915:	8d 76 00             	lea    esi,[esi+0x0]
c000e918:	90                   	nop
c000e919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e91d:	83 c4 2c             	add    esp,0x2c
c000e920:	c2 04 00             	ret    0x4
c000e923:	90                   	nop

c000e924 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e924:	83 ec 1c             	sub    esp,0x1c
c000e927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e92b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e92f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e933:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e938:	88 c8                	mov    al,cl
c000e93a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e93e:	88 d0                	mov    al,dl
c000e940:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e948:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e952:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e955:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e959:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e961:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e967:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e96b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e96e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e972:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e97b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e981:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e985:	8d 48 01             	lea    ecx,[eax+0x1]
c000e988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e98c:	83 c2 2a             	add    edx,0x2a
c000e98f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e997:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9a1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9a8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9b0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9bd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9c7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9cd:	3d 00 02 00 00       	cmp    eax,0x200
c000e9d2:	75 10                	jne    c000e9e4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	68 81 eb 01 c0       	push   0xc001eb81
c000e9dc:	e8 42 19 00 00       	call   c0010323 <KePanic(char const*)>
c000e9e1:	83 c4 10             	add    esp,0x10
c000e9e4:	90                   	nop
c000e9e5:	83 c4 1c             	add    esp,0x1c
c000e9e8:	c3                   	ret    
c000e9e9:	90                   	nop
c000e9ea:	66 90                	xchg   ax,ax

c000e9ec <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e9ec:	b8 00 00 00 00       	mov    eax,0x0
c000e9f1:	c3                   	ret    
c000e9f2:	66 90                	xchg   ax,ax

c000e9f4 <ACPI::detectPCI()>:
c000e9f4:	53                   	push   ebx
c000e9f5:	83 ec 28             	sub    esp,0x28
c000e9f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e9fd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ea02:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ea07:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea0d:	83 e0 04             	and    eax,0x4
c000ea10:	84 c0                	test   al,al
c000ea12:	74 2c                	je     c000ea40 <ACPI::detectPCI()+0x4c>
c000ea14:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000ea19:	83 ec 08             	sub    esp,0x8
c000ea1c:	68 9e eb 01 c0       	push   0xc001eb9e
c000ea21:	50                   	push   eax
c000ea22:	e8 75 f8 ff ff       	call   c000e29c <findDataTable(unsigned char*, char*)>
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea2e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ea33:	74 0b                	je     c000ea40 <ACPI::detectPCI()+0x4c>
c000ea35:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea3a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea3f:	90                   	nop
c000ea40:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ea48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea4c:	8a 00                	mov    al,BYTE PTR [eax]
c000ea4e:	3c 01                	cmp    al,0x1
c000ea50:	75 0e                	jne    c000ea60 <ACPI::detectPCI()+0x6c>
c000ea52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea57:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea5c:	eb 2a                	jmp    c000ea88 <ACPI::detectPCI()+0x94>
c000ea5e:	66 90                	xchg   ax,ax
c000ea60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea64:	8a 00                	mov    al,BYTE PTR [eax]
c000ea66:	3c 02                	cmp    al,0x2
c000ea68:	75 1e                	jne    c000ea88 <ACPI::detectPCI()+0x94>
c000ea6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea6f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea74:	74 12                	je     c000ea88 <ACPI::detectPCI()+0x94>
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	68 18 eb 01 c0       	push   0xc001eb18
c000ea7e:	e8 a0 18 00 00       	call   c0010323 <KePanic(char const*)>
c000ea83:	83 c4 10             	add    esp,0x10
c000ea86:	66 90                	xchg   ax,ax
c000ea88:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea8c:	83 f0 01             	xor    eax,0x1
c000ea8f:	84 c0                	test   al,al
c000ea91:	74 41                	je     c000ead4 <ACPI::detectPCI()+0xe0>
c000ea93:	e8 98 16 ff ff       	call   c0000130 <manualPCIProbe>
c000ea98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea9c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eaa1:	75 0d                	jne    c000eab0 <ACPI::detectPCI()+0xbc>
c000eaa3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eaa8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eaad:	eb 25                	jmp    c000ead4 <ACPI::detectPCI()+0xe0>
c000eaaf:	90                   	nop
c000eab0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eab5:	75 1d                	jne    c000ead4 <ACPI::detectPCI()+0xe0>
c000eab7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eabc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eac1:	74 11                	je     c000ead4 <ACPI::detectPCI()+0xe0>
c000eac3:	83 ec 0c             	sub    esp,0xc
c000eac6:	68 18 eb 01 c0       	push   0xc001eb18
c000eacb:	e8 53 18 00 00       	call   c0010323 <KePanic(char const*)>
c000ead0:	83 c4 10             	add    esp,0x10
c000ead3:	90                   	nop
c000ead4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ead9:	0f 84 85 00 00 00    	je     c000eb64 <ACPI::detectPCI()+0x170>
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	68 a3 eb 01 c0       	push   0xc001eba3
c000eae7:	e8 bf 11 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eaf7:	83 ec 0c             	sub    esp,0xc
c000eafa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eafe:	e8 72 8d ff ff       	call   c0007875 <malloc>
c000eb03:	83 c4 10             	add    esp,0x10
c000eb06:	89 c3                	mov    ebx,eax
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	53                   	push   ebx
c000eb0c:	e8 19 9a 00 00       	call   c001852a <PCI::PCI()>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eb18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb1c:	83 ec 08             	sub    esp,0x8
c000eb1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb23:	50                   	push   eax
c000eb24:	e8 23 cf ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000eb29:	83 c4 10             	add    esp,0x10
c000eb2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb30:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb32:	83 c0 08             	add    eax,0x8
c000eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb37:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb3c:	74 0a                	je     c000eb48 <ACPI::detectPCI()+0x154>
c000eb3e:	ba 01 00 00 00       	mov    edx,0x1
c000eb43:	eb 0b                	jmp    c000eb50 <ACPI::detectPCI()+0x15c>
c000eb45:	8d 76 00             	lea    esi,[esi+0x0]
c000eb48:	ba 02 00 00 00       	mov    edx,0x2
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb50:	6a 00                	push   0x0
c000eb52:	6a 00                	push   0x0
c000eb54:	52                   	push   edx
c000eb55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb59:	ff d0                	call   eax
c000eb5b:	83 c4 10             	add    esp,0x10
c000eb5e:	e9 91 00 00 00       	jmp    c000ebf4 <ACPI::detectPCI()+0x200>
c000eb63:	90                   	nop
c000eb64:	83 ec 0c             	sub    esp,0xc
c000eb67:	68 bb eb 01 c0       	push   0xc001ebbb
c000eb6c:	e8 3a 11 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000eb71:	83 c4 10             	add    esp,0x10
c000eb74:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eb7b:	83 ec 0c             	sub    esp,0xc
c000eb7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb82:	e8 ee 8c ff ff       	call   c0007875 <malloc>
c000eb87:	83 c4 10             	add    esp,0x10
c000eb8a:	89 c3                	mov    ebx,eax
c000eb8c:	83 ec 0c             	sub    esp,0xc
c000eb8f:	53                   	push   ebx
c000eb90:	e8 c1 a4 00 00       	call   c0019056 <IDE::IDE()>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba0:	83 ec 08             	sub    esp,0x8
c000eba3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eba7:	50                   	push   eax
c000eba8:	e8 9f ce ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ebbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ebcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebcf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ebd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebdc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebde:	83 c0 08             	add    eax,0x8
c000ebe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebe3:	6a 00                	push   0x0
c000ebe5:	6a 00                	push   0x0
c000ebe7:	6a 00                	push   0x0
c000ebe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebed:	ff d0                	call   eax
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	66 90                	xchg   ax,ax
c000ebf4:	90                   	nop
c000ebf5:	83 c4 28             	add    esp,0x28
c000ebf8:	5b                   	pop    ebx
c000ebf9:	c3                   	ret    
c000ebfa:	66 90                	xchg   ax,ax

c000ebfc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ebfc:	83 ec 1c             	sub    esp,0x1c
c000ebff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec06:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec0a:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ec10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec14:	25 ff 00 00 00       	and    eax,0xff
c000ec19:	83 ec 08             	sub    esp,0x8
c000ec1c:	50                   	push   eax
c000ec1d:	52                   	push   edx
c000ec1e:	e8 3d 83 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ec2a:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ec30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec34:	25 ff 00 00 00       	and    eax,0xff
c000ec39:	83 ec 04             	sub    esp,0x4
c000ec3c:	6a 01                	push   0x1
c000ec3e:	50                   	push   eax
c000ec3f:	52                   	push   edx
c000ec40:	e8 31 84 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	90                   	nop
c000ec49:	83 c4 1c             	add    esp,0x1c
c000ec4c:	c3                   	ret    
c000ec4d:	90                   	nop
c000ec4e:	66 90                	xchg   ax,ax

c000ec50 <ACPI::sleep()>:
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ec58:	85 c0                	test   eax,eax
c000ec5a:	74 08                	je     c000ec64 <ACPI::sleep()+0x14>
c000ec5c:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ec61:	ff d0                	call   eax
c000ec63:	90                   	nop
c000ec64:	90                   	nop
c000ec65:	83 c4 0c             	add    esp,0xc
c000ec68:	c3                   	ret    
c000ec69:	90                   	nop
c000ec6a:	66 90                	xchg   ax,ax

c000ec6c <ACPI::open(int, int, void*)>:
c000ec6c:	57                   	push   edi
c000ec6d:	56                   	push   esi
c000ec6e:	53                   	push   ebx
c000ec6f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ec75:	83 ec 0c             	sub    esp,0xc
c000ec78:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec7f:	e8 70 fd ff ff       	call   c000e9f4 <ACPI::detectPCI()>
c000ec84:	83 c4 10             	add    esp,0x10
c000ec87:	83 ec 0c             	sub    esp,0xc
c000ec8a:	68 40 eb 01 c0       	push   0xc001eb40
c000ec8f:	e8 17 10 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000ec94:	83 c4 10             	add    esp,0x10
c000ec97:	83 ec 0c             	sub    esp,0xc
c000ec9a:	68 d0 eb 01 c0       	push   0xc001ebd0
c000ec9f:	e8 fb 36 00 00       	call   c001239f <Thr::loadKernelSymbolTable(char const*)>
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ecaf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ecba:	83 ec 0c             	sub    esp,0xc
c000ecbd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ecc4:	e8 ac 8b ff ff       	call   c0007875 <malloc>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	89 c3                	mov    ebx,eax
c000ecce:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ecd3:	83 ec 04             	sub    esp,0x4
c000ecd6:	50                   	push   eax
c000ecd7:	68 ee eb 01 c0       	push   0xc001ebee
c000ecdc:	53                   	push   ebx
c000ecdd:	e8 a2 be ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000ece2:	83 c4 10             	add    esp,0x10
c000ece5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ecec:	83 ec 08             	sub    esp,0x8
c000ecef:	6a 01                	push   0x1
c000ecf1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecf8:	e8 47 bf ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ed07:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ed0f:	75 17                	jne    c000ed28 <ACPI::open(int, int, void*)+0xbc>
c000ed11:	83 ec 0c             	sub    esp,0xc
c000ed14:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed1b:	e8 82 bf ff ff       	call   c000aca2 <File::close()>
c000ed20:	83 c4 10             	add    esp,0x10
c000ed23:	eb 0b                	jmp    c000ed30 <ACPI::open(int, int, void*)+0xc4>
c000ed25:	8d 76 00             	lea    esi,[esi+0x0]
c000ed28:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ed30:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ed38:	74 1e                	je     c000ed58 <ACPI::open(int, int, void*)+0xec>
c000ed3a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ed41:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed43:	83 c0 08             	add    eax,0x8
c000ed46:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed52:	ff d0                	call   eax
c000ed54:	83 c4 10             	add    esp,0x10
c000ed57:	90                   	nop
c000ed58:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ed5f:	83 f0 01             	xor    eax,0x1
c000ed62:	84 c0                	test   al,al
c000ed64:	74 42                	je     c000eda8 <ACPI::open(int, int, void*)+0x13c>
c000ed66:	83 ec 0c             	sub    esp,0xc
c000ed69:	68 0c ec 01 c0       	push   0xc001ec0c
c000ed6e:	e8 38 0f 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000ed73:	83 c4 10             	add    esp,0x10
c000ed76:	83 ec 04             	sub    esp,0x4
c000ed79:	6a 0c                	push   0xc
c000ed7b:	68 27 ec 01 c0       	push   0xc001ec27
c000ed80:	68 38 ec 01 c0       	push   0xc001ec38
c000ed85:	e8 17 2c 00 00       	call   c00119a1 <Reg::readIntWithDefault(char*, char*, int)>
c000ed8a:	83 c4 10             	add    esp,0x10
c000ed8d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed9e:	e8 b8 a7 ff ff       	call   c000955b <Virt::setupPageSwapping(int)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	66 90                	xchg   ax,ax
c000eda8:	83 ec 0c             	sub    esp,0xc
c000edab:	68 f5 dc 01 c0       	push   0xc001dcf5
c000edb0:	e8 f6 0e 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000edb5:	83 c4 10             	add    esp,0x10
c000edb8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000edbf:	83 ec 08             	sub    esp,0x8
c000edc2:	6a 12                	push   0x12
c000edc4:	50                   	push   eax
c000edc5:	e8 9a cf ff ff       	call   c000bd64 <getDevicesOfType(DeviceType)>
c000edca:	83 c4 0c             	add    esp,0xc
c000edcd:	8d 76 00             	lea    esi,[esi+0x0]
c000edd0:	83 ec 0c             	sub    esp,0xc
c000edd3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edda:	50                   	push   eax
c000eddb:	e8 0c e3 00 00       	call   c001d0ec <LinkedList<Device>::isEmpty()>
c000ede0:	83 c4 10             	add    esp,0x10
c000ede3:	83 f0 01             	xor    eax,0x1
c000ede6:	84 c0                	test   al,al
c000ede8:	0f 84 46 01 00 00    	je     c000ef34 <ACPI::open(int, int, void*)+0x2c8>
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edf8:	50                   	push   eax
c000edf9:	e8 0a e3 00 00       	call   c001d108 <LinkedList<Device>::getFirstElement()>
c000edfe:	83 c4 10             	add    esp,0x10
c000ee01:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee12:	50                   	push   eax
c000ee13:	e8 f8 e2 00 00       	call   c001d110 <LinkedList<Device>::removeFirst()>
c000ee18:	83 c4 10             	add    esp,0x10
c000ee1b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ee22:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ee29:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ee30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ee34:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ee3a:	ba 09 00 00 00       	mov    edx,0x9
c000ee3f:	fc                   	cld    
c000ee40:	89 c7                	mov    edi,eax
c000ee42:	89 de                	mov    esi,ebx
c000ee44:	89 d1                	mov    ecx,edx
c000ee46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee48:	83 ec 08             	sub    esp,0x8
c000ee4b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ee4f:	50                   	push   eax
c000ee50:	83 ec 24             	sub    esp,0x24
c000ee53:	89 e0                	mov    eax,esp
c000ee55:	89 c3                	mov    ebx,eax
c000ee57:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ee5b:	ba 09 00 00 00       	mov    edx,0x9
c000ee60:	89 df                	mov    edi,ebx
c000ee62:	89 c6                	mov    esi,eax
c000ee64:	89 d1                	mov    ecx,edx
c000ee66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee68:	e8 9f 9b 00 00       	call   c0018a0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ee6d:	83 c4 30             	add    esp,0x30
c000ee70:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ee77:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee7f:	0f 84 4b ff ff ff    	je     c000edd0 <ACPI::open(int, int, void*)+0x164>
c000ee85:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee9a:	e8 d6 89 ff ff       	call   c0007875 <malloc>
c000ee9f:	83 c4 10             	add    esp,0x10
c000eea2:	89 c3                	mov    ebx,eax
c000eea4:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000eea9:	83 ec 04             	sub    esp,0x4
c000eeac:	50                   	push   eax
c000eead:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eeb4:	53                   	push   ebx
c000eeb5:	e8 ca bc ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000eeba:	83 c4 10             	add    esp,0x10
c000eebd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eec4:	83 ec 0c             	sub    esp,0xc
c000eec7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eece:	e8 df bf ff ff       	call   c000aeb2 <File::exists()>
c000eed3:	83 c4 10             	add    esp,0x10
c000eed6:	84 c0                	test   al,al
c000eed8:	74 2a                	je     c000ef04 <ACPI::open(int, int, void*)+0x298>
c000eeda:	83 ec 08             	sub    esp,0x8
c000eedd:	6a 01                	push   0x1
c000eedf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eee6:	e8 2b 3f 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000eeeb:	83 c4 10             	add    esp,0x10
c000eeee:	83 ec 08             	sub    esp,0x8
c000eef1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eef8:	50                   	push   eax
c000eef9:	e8 49 41 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000eefe:	83 c4 10             	add    esp,0x10
c000ef01:	8d 76 00             	lea    esi,[esi+0x0]
c000ef04:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ef0c:	0f 84 be fe ff ff    	je     c000edd0 <ACPI::open(int, int, void*)+0x164>
c000ef12:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ef19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef1b:	83 c0 08             	add    eax,0x8
c000ef1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef2a:	ff d0                	call   eax
c000ef2c:	83 c4 10             	add    esp,0x10
c000ef2f:	e9 9c fe ff ff       	jmp    c000edd0 <ACPI::open(int, int, void*)+0x164>
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef3e:	50                   	push   eax
c000ef3f:	e8 a4 e1 00 00       	call   c001d0e8 <LinkedList<Device>::~LinkedList()>
c000ef44:	83 c4 10             	add    esp,0x10
c000ef47:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000ef4d:	83 ec 08             	sub    esp,0x8
c000ef50:	6a 01                	push   0x1
c000ef52:	68 3f ec 01 c0       	push   0xc001ec3f
c000ef57:	e8 ba 3e 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000ef5c:	83 c4 10             	add    esp,0x10
c000ef5f:	83 ec 08             	sub    esp,0x8
c000ef62:	53                   	push   ebx
c000ef63:	50                   	push   eax
c000ef64:	e8 de 40 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ef71:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef77:	83 e0 04             	and    eax,0x4
c000ef7a:	84 c0                	test   al,al
c000ef7c:	0f 84 16 01 00 00    	je     c000f098 <ACPI::open(int, int, void*)+0x42c>
c000ef82:	83 ec 0c             	sub    esp,0xc
c000ef85:	68 5c ec 01 c0       	push   0xc001ec5c
c000ef8a:	e8 1c 0d 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000ef8f:	83 c4 10             	add    esp,0x10
c000ef92:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef9d:	83 ec 0c             	sub    esp,0xc
c000efa0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000efa7:	e8 c9 88 ff ff       	call   c0007875 <malloc>
c000efac:	83 c4 10             	add    esp,0x10
c000efaf:	89 c3                	mov    ebx,eax
c000efb1:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000efb6:	83 ec 04             	sub    esp,0x4
c000efb9:	50                   	push   eax
c000efba:	68 79 ec 01 c0       	push   0xc001ec79
c000efbf:	53                   	push   ebx
c000efc0:	e8 bf bb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000efcf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efd7:	74 1b                	je     c000eff4 <ACPI::open(int, int, void*)+0x388>
c000efd9:	83 ec 0c             	sub    esp,0xc
c000efdc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efe3:	e8 ca be ff ff       	call   c000aeb2 <File::exists()>
c000efe8:	83 c4 10             	add    esp,0x10
c000efeb:	84 c0                	test   al,al
c000efed:	74 05                	je     c000eff4 <ACPI::open(int, int, void*)+0x388>
c000efef:	b0 01                	mov    al,0x1
c000eff1:	eb 05                	jmp    c000eff8 <ACPI::open(int, int, void*)+0x38c>
c000eff3:	90                   	nop
c000eff4:	b0 00                	mov    al,0x0
c000eff6:	66 90                	xchg   ax,ax
c000eff8:	84 c0                	test   al,al
c000effa:	74 28                	je     c000f024 <ACPI::open(int, int, void*)+0x3b8>
c000effc:	83 ec 08             	sub    esp,0x8
c000efff:	6a 01                	push   0x1
c000f001:	68 79 ec 01 c0       	push   0xc001ec79
c000f006:	e8 0b 3e 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	83 ec 08             	sub    esp,0x8
c000f011:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f018:	50                   	push   eax
c000f019:	e8 29 40 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c000f01e:	83 c4 10             	add    esp,0x10
c000f021:	8d 76 00             	lea    esi,[esi+0x0]
c000f024:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f02c:	74 2a                	je     c000f058 <ACPI::open(int, int, void*)+0x3ec>
c000f02e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f036:	74 20                	je     c000f058 <ACPI::open(int, int, void*)+0x3ec>
c000f038:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f03f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f041:	83 c0 08             	add    eax,0x8
c000f044:	8b 00                	mov    eax,DWORD PTR [eax]
c000f046:	83 ec 0c             	sub    esp,0xc
c000f049:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f050:	ff d0                	call   eax
c000f052:	83 c4 10             	add    esp,0x10
c000f055:	8d 76 00             	lea    esi,[esi+0x0]
c000f058:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000f05d:	83 ec 08             	sub    esp,0x8
c000f060:	68 96 ec 01 c0       	push   0xc001ec96
c000f065:	50                   	push   eax
c000f066:	e8 31 f2 ff ff       	call   c000e29c <findDataTable(unsigned char*, char*)>
c000f06b:	83 c4 10             	add    esp,0x10
c000f06e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f075:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f07d:	74 19                	je     c000f098 <ACPI::open(int, int, void*)+0x42c>
c000f07f:	83 ec 08             	sub    esp,0x8
c000f082:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f089:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f090:	e8 67 fb ff ff       	call   c000ebfc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f095:	83 c4 10             	add    esp,0x10
c000f098:	b8 00 00 00 00       	mov    eax,0x0
c000f09d:	81 c4 70 01 00 00    	add    esp,0x170
c000f0a3:	5b                   	pop    ebx
c000f0a4:	5e                   	pop    esi
c000f0a5:	5f                   	pop    edi
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <CPU::close(int, int, void*)>:
c000f0a8:	31 c0                	xor    eax,eax
c000f0aa:	c3                   	ret    
c000f0ab:	90                   	nop

c000f0ac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f0ac:	60                   	pusha  
c000f0ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f0b9:	9c                   	pushf  
c000f0ba:	fa                   	cli    
c000f0bb:	0f 09                	wbinvd 
c000f0bd:	0f 30                	wrmsr  
c000f0bf:	9d                   	popf   
c000f0c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0c4:	89 02                	mov    DWORD PTR [edx],eax
c000f0c6:	61                   	popa   
c000f0c7:	c3                   	ret    

c000f0c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f0c8:	60                   	pusha  
c000f0c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0cd:	9c                   	pushf  
c000f0ce:	fa                   	cli    
c000f0cf:	0f 09                	wbinvd 
c000f0d1:	31 c0                	xor    eax,eax
c000f0d3:	31 d2                	xor    edx,edx
c000f0d5:	0f 32                	rdmsr  
c000f0d7:	9d                   	popf   
c000f0d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0dc:	89 02                	mov    DWORD PTR [edx],eax
c000f0de:	61                   	popa   
c000f0df:	c3                   	ret    

c000f0e0 <CPU::AMD_K6_writeback(int, int, int)>:
c000f0e0:	56                   	push   esi
c000f0e1:	53                   	push   ebx
c000f0e2:	83 ec 10             	sub    esp,0x10
c000f0e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0e9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f0ee:	75 5d                	jne    c000f14d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0f0:	83 f8 08             	cmp    eax,0x8
c000f0f3:	75 09                	jne    c000f0fe <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f0f5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f0fa:	7e 13                	jle    c000f10f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0fc:	eb 30                	jmp    c000f12e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0fe:	83 f8 06             	cmp    eax,0x6
c000f101:	7c 4a                	jl     c000f14d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f103:	83 f8 07             	cmp    eax,0x7
c000f106:	7e 07                	jle    c000f10f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f108:	83 f8 09             	cmp    eax,0x9
c000f10b:	74 21                	je     c000f12e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f10d:	eb 3e                	jmp    c000f14d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f10f:	89 e6                	mov    esi,esp
c000f111:	8b 1d dc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022edc
c000f117:	56                   	push   esi
c000f118:	c1 eb 15             	shr    ebx,0x15
c000f11b:	68 82 00 00 c0       	push   0xc0000082
c000f120:	83 e3 7e             	and    ebx,0x7e
c000f123:	e8 a0 ff ff ff       	call   c000f0c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f128:	56                   	push   esi
c000f129:	6a 00                	push   0x0
c000f12b:	53                   	push   ebx
c000f12c:	eb 12                	jmp    c000f140 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f12e:	89 e3                	mov    ebx,esp
c000f130:	53                   	push   ebx
c000f131:	68 82 00 00 c0       	push   0xc0000082
c000f136:	e8 8d ff ff ff       	call   c000f0c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f13b:	53                   	push   ebx
c000f13c:	6a 00                	push   0x0
c000f13e:	6a 00                	push   0x0
c000f140:	68 82 00 00 c0       	push   0xc0000082
c000f145:	e8 62 ff ff ff       	call   c000f0ac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f14a:	83 c4 18             	add    esp,0x18
c000f14d:	83 c4 10             	add    esp,0x10
c000f150:	5b                   	pop    ebx
c000f151:	5e                   	pop    esi
c000f152:	c3                   	ret    
c000f153:	90                   	nop

c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f154:	55                   	push   ebp
c000f155:	57                   	push   edi
c000f156:	56                   	push   esi
c000f157:	53                   	push   ebx
c000f158:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f15c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f160:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f164:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f168:	39 05 f0 ff 01 c0    	cmp    DWORD PTR ds:0xc001fff0,eax
c000f16e:	75 23                	jne    c000f193 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f170:	a1 2c 59 02 c0       	mov    eax,ds:0xc002592c
c000f175:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f179:	89 06                	mov    DWORD PTR [esi],eax
c000f17b:	a1 28 59 02 c0       	mov    eax,ds:0xc0025928
c000f180:	89 07                	mov    DWORD PTR [edi],eax
c000f182:	a1 24 59 02 c0       	mov    eax,ds:0xc0025924
c000f187:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f18a:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c000f18f:	89 02                	mov    DWORD PTR [edx],eax
c000f191:	eb 3f                	jmp    c000f1d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f193:	31 c9                	xor    ecx,ecx
c000f195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f199:	0f a2                	cpuid  
c000f19b:	89 06                	mov    DWORD PTR [esi],eax
c000f19d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f19f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1a3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f1a6:	89 10                	mov    DWORD PTR [eax],edx
c000f1a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1ac:	a3 f0 ff 01 c0       	mov    ds:0xc001fff0,eax
c000f1b1:	8b 06                	mov    eax,DWORD PTR [esi]
c000f1b3:	a3 2c 59 02 c0       	mov    ds:0xc002592c,eax
c000f1b8:	8b 07                	mov    eax,DWORD PTR [edi]
c000f1ba:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000f1bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1c2:	a3 24 59 02 c0       	mov    ds:0xc0025924,eax
c000f1c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1cd:	a3 20 59 02 c0       	mov    ds:0xc0025920,eax
c000f1d2:	5b                   	pop    ebx
c000f1d3:	5e                   	pop    esi
c000f1d4:	5f                   	pop    edi
c000f1d5:	5d                   	pop    ebp
c000f1d6:	c3                   	ret    
c000f1d7:	90                   	nop

c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>:
c000f1d8:	83 ec 10             	sub    esp,0x10
c000f1db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1df:	50                   	push   eax
c000f1e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e4:	50                   	push   eax
c000f1e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1e9:	50                   	push   eax
c000f1ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ee:	50                   	push   eax
c000f1ef:	6a 01                	push   0x1
c000f1f1:	e8 5e ff ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1fa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f1fe:	0f 95 c0             	setne  al
c000f201:	83 c4 24             	add    esp,0x24
c000f204:	c3                   	ret    
c000f205:	90                   	nop

c000f206 <CPU::cpuidCheckECX(unsigned int)>:
c000f206:	83 ec 10             	sub    esp,0x10
c000f209:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f20d:	50                   	push   eax
c000f20e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f212:	50                   	push   eax
c000f213:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f217:	50                   	push   eax
c000f218:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f21c:	50                   	push   eax
c000f21d:	6a 01                	push   0x1
c000f21f:	e8 30 ff ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f228:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f22c:	0f 95 c0             	setne  al
c000f22f:	83 c4 24             	add    esp,0x24
c000f232:	c3                   	ret    
c000f233:	90                   	nop

c000f234 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f234:	83 ec 10             	sub    esp,0x10
c000f237:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f23b:	50                   	push   eax
c000f23c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f240:	50                   	push   eax
c000f241:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f245:	50                   	push   eax
c000f246:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f24a:	50                   	push   eax
c000f24b:	6a 07                	push   0x7
c000f24d:	e8 02 ff ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f252:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f256:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f25a:	0f 95 c0             	setne  al
c000f25d:	83 c4 24             	add    esp,0x24
c000f260:	c3                   	ret    
c000f261:	90                   	nop

c000f262 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f262:	83 ec 10             	sub    esp,0x10
c000f265:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f269:	50                   	push   eax
c000f26a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f26e:	50                   	push   eax
c000f26f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f273:	50                   	push   eax
c000f274:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f278:	50                   	push   eax
c000f279:	6a 07                	push   0x7
c000f27b:	e8 d4 fe ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f280:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f284:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f288:	0f 95 c0             	setne  al
c000f28b:	83 c4 24             	add    esp,0x24
c000f28e:	c3                   	ret    
c000f28f:	90                   	nop

c000f290 <CPU::CPU()>:
c000f290:	83 ec 0c             	sub    esp,0xc
c000f293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f297:	83 ec 08             	sub    esp,0x8
c000f29a:	68 b9 ed 01 c0       	push   0xc001edb9
c000f29f:	50                   	push   eax
c000f2a0:	e8 3f c9 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000f2a5:	83 c4 10             	add    esp,0x10
c000f2a8:	ba 40 ee 01 c0       	mov    edx,0xc001ee40
c000f2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2b1:	89 10                	mov    DWORD PTR [eax],edx
c000f2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2b7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f2c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2c5:	05 78 01 00 00       	add    eax,0x178
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	50                   	push   eax
c000f2ce:	e8 61 7e ff ff       	call   c0007134 <GDT::GDT()>
c000f2d3:	83 c4 10             	add    esp,0x10
c000f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2da:	05 7c 09 00 00       	add    eax,0x97c
c000f2df:	83 ec 0c             	sub    esp,0xc
c000f2e2:	50                   	push   eax
c000f2e3:	e8 88 80 ff ff       	call   c0007370 <IDT::IDT()>
c000f2e8:	83 c4 10             	add    esp,0x10
c000f2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ef:	05 7c 11 00 00       	add    eax,0x117c
c000f2f4:	83 ec 0c             	sub    esp,0xc
c000f2f7:	50                   	push   eax
c000f2f8:	e8 97 99 ff ff       	call   c0008c94 <TSS::TSS()>
c000f2fd:	83 c4 10             	add    esp,0x10
c000f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f304:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f30f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f319:	90                   	nop
c000f31a:	83 c4 0c             	add    esp,0xc
c000f31d:	c3                   	ret    

c000f31e <CPU::displayFeatures()>:
c000f31e:	c3                   	ret    
c000f31f:	90                   	nop

c000f320 <CPU::detectFeatures()>:
c000f320:	55                   	push   ebp
c000f321:	57                   	push   edi
c000f322:	56                   	push   esi
c000f323:	53                   	push   ebx
c000f324:	83 ec 30             	sub    esp,0x30
c000f327:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f32b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f335:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f33c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f342:	6a 0d                	push   0xd
c000f344:	6a 00                	push   0x0
c000f346:	55                   	push   ebp
c000f347:	e8 84 11 ff ff       	call   c00004d0 <memset>
c000f34c:	83 c4 10             	add    esp,0x10
c000f34f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f354:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f35b:	0f 84 d5 05 00 00    	je     c000f936 <CPU::detectFeatures()+0x616>
c000f361:	83 ec 0c             	sub    esp,0xc
c000f364:	89 ef                	mov    edi,ebp
c000f366:	6a 10                	push   0x10
c000f368:	e8 6b fe ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f36d:	83 e0 01             	and    eax,0x1
c000f370:	8d 14 00             	lea    edx,[eax+eax*1]
c000f373:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f379:	83 e0 fd             	and    eax,0xfffffffd
c000f37c:	09 d0                	or     eax,edx
c000f37e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f384:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f38b:	e8 48 fe ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f390:	83 e0 01             	and    eax,0x1
c000f393:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f39a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3a0:	83 e0 fb             	and    eax,0xfffffffb
c000f3a3:	09 d0                	or     eax,edx
c000f3a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3b2:	e8 21 fe ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f3b7:	83 e0 01             	and    eax,0x1
c000f3ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f3c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3c7:	83 e0 f7             	and    eax,0xfffffff7
c000f3ca:	09 d0                	or     eax,edx
c000f3cc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3d2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f3d9:	e8 fa fd ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f3de:	83 e0 01             	and    eax,0x1
c000f3e1:	c1 e0 04             	shl    eax,0x4
c000f3e4:	88 c2                	mov    dl,al
c000f3e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3ec:	83 e0 ef             	and    eax,0xffffffef
c000f3ef:	09 d0                	or     eax,edx
c000f3f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3f7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f3fe:	e8 d5 fd ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f403:	83 e0 01             	and    eax,0x1
c000f406:	c1 e0 05             	shl    eax,0x5
c000f409:	88 c2                	mov    dl,al
c000f40b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f411:	83 e0 df             	and    eax,0xffffffdf
c000f414:	09 d0                	or     eax,edx
c000f416:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f41c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f423:	e8 b0 fd ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f428:	83 e0 01             	and    eax,0x1
c000f42b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f42e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f434:	83 e0 fd             	and    eax,0xfffffffd
c000f437:	09 d0                	or     eax,edx
c000f439:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f43f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f446:	e8 8d fd ff ff       	call   c000f1d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f44b:	83 e0 01             	and    eax,0x1
c000f44e:	c1 e0 06             	shl    eax,0x6
c000f451:	88 c2                	mov    dl,al
c000f453:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f459:	83 e0 bf             	and    eax,0xffffffbf
c000f45c:	09 d0                	or     eax,edx
c000f45e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f464:	58                   	pop    eax
c000f465:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f469:	50                   	push   eax
c000f46a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f46e:	50                   	push   eax
c000f46f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f473:	56                   	push   esi
c000f474:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f478:	50                   	push   eax
c000f479:	6a 00                	push   0x0
c000f47b:	e8 d4 fc ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f480:	b8 04 00 00 00       	mov    eax,0x4
c000f485:	89 c1                	mov    ecx,eax
c000f487:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f489:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f48f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f493:	89 c1                	mov    ecx,eax
c000f495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f497:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f49d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f4a1:	89 c1                	mov    ecx,eax
c000f4a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4a5:	83 c4 18             	add    esp,0x18
c000f4a8:	68 c8 ec 01 c0       	push   0xc001ecc8
c000f4ad:	55                   	push   ebp
c000f4ae:	e8 2d 12 ff ff       	call   c00006e0 <strcmp>
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	85 c0                	test   eax,eax
c000f4b8:	75 0f                	jne    c000f4c9 <CPU::detectFeatures()+0x1a9>
c000f4ba:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f4c4:	e9 22 02 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f4c9:	50                   	push   eax
c000f4ca:	50                   	push   eax
c000f4cb:	68 d5 ec 01 c0       	push   0xc001ecd5
c000f4d0:	55                   	push   ebp
c000f4d1:	e8 0a 12 ff ff       	call   c00006e0 <strcmp>
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	85 c0                	test   eax,eax
c000f4db:	74 dd                	je     c000f4ba <CPU::detectFeatures()+0x19a>
c000f4dd:	50                   	push   eax
c000f4de:	50                   	push   eax
c000f4df:	68 e2 ec 01 c0       	push   0xc001ece2
c000f4e4:	55                   	push   ebp
c000f4e5:	e8 f6 11 ff ff       	call   c00006e0 <strcmp>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	85 c0                	test   eax,eax
c000f4ef:	74 2a                	je     c000f51b <CPU::detectFeatures()+0x1fb>
c000f4f1:	50                   	push   eax
c000f4f2:	50                   	push   eax
c000f4f3:	68 ef ec 01 c0       	push   0xc001ecef
c000f4f8:	55                   	push   ebp
c000f4f9:	e8 e2 11 ff ff       	call   c00006e0 <strcmp>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	85 c0                	test   eax,eax
c000f503:	74 16                	je     c000f51b <CPU::detectFeatures()+0x1fb>
c000f505:	50                   	push   eax
c000f506:	50                   	push   eax
c000f507:	68 fc ec 01 c0       	push   0xc001ecfc
c000f50c:	55                   	push   ebp
c000f50d:	e8 ce 11 ff ff       	call   c00006e0 <strcmp>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	85 c0                	test   eax,eax
c000f517:	74 48                	je     c000f561 <CPU::detectFeatures()+0x241>
c000f519:	eb 0f                	jmp    c000f52a <CPU::detectFeatures()+0x20a>
c000f51b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f525:	e9 c1 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f52a:	50                   	push   eax
c000f52b:	50                   	push   eax
c000f52c:	68 09 ed 01 c0       	push   0xc001ed09
c000f531:	55                   	push   ebp
c000f532:	e8 a9 11 ff ff       	call   c00006e0 <strcmp>
c000f537:	83 c4 10             	add    esp,0x10
c000f53a:	85 c0                	test   eax,eax
c000f53c:	74 23                	je     c000f561 <CPU::detectFeatures()+0x241>
c000f53e:	57                   	push   edi
c000f53f:	57                   	push   edi
c000f540:	68 16 ed 01 c0       	push   0xc001ed16
c000f545:	55                   	push   ebp
c000f546:	e8 95 11 ff ff       	call   c00006e0 <strcmp>
c000f54b:	83 c4 10             	add    esp,0x10
c000f54e:	85 c0                	test   eax,eax
c000f550:	75 1e                	jne    c000f570 <CPU::detectFeatures()+0x250>
c000f552:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f55c:	e9 8a 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f561:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f56b:	e9 7b 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f570:	56                   	push   esi
c000f571:	56                   	push   esi
c000f572:	68 23 ed 01 c0       	push   0xc001ed23
c000f577:	55                   	push   ebp
c000f578:	e8 63 11 ff ff       	call   c00006e0 <strcmp>
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	85 c0                	test   eax,eax
c000f582:	75 0f                	jne    c000f593 <CPU::detectFeatures()+0x273>
c000f584:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f58e:	e9 58 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f593:	51                   	push   ecx
c000f594:	51                   	push   ecx
c000f595:	68 e2 ec 01 c0       	push   0xc001ece2
c000f59a:	55                   	push   ebp
c000f59b:	e8 40 11 ff ff       	call   c00006e0 <strcmp>
c000f5a0:	83 c4 10             	add    esp,0x10
c000f5a3:	85 c0                	test   eax,eax
c000f5a5:	75 0f                	jne    c000f5b6 <CPU::detectFeatures()+0x296>
c000f5a7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f5b1:	e9 35 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f5b6:	52                   	push   edx
c000f5b7:	52                   	push   edx
c000f5b8:	68 30 ed 01 c0       	push   0xc001ed30
c000f5bd:	55                   	push   ebp
c000f5be:	e8 1d 11 ff ff       	call   c00006e0 <strcmp>
c000f5c3:	83 c4 10             	add    esp,0x10
c000f5c6:	85 c0                	test   eax,eax
c000f5c8:	75 0f                	jne    c000f5d9 <CPU::detectFeatures()+0x2b9>
c000f5ca:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f5d4:	e9 12 01 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f5d9:	50                   	push   eax
c000f5da:	50                   	push   eax
c000f5db:	68 3d ed 01 c0       	push   0xc001ed3d
c000f5e0:	55                   	push   ebp
c000f5e1:	e8 fa 10 ff ff       	call   c00006e0 <strcmp>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	85 c0                	test   eax,eax
c000f5eb:	75 0f                	jne    c000f5fc <CPU::detectFeatures()+0x2dc>
c000f5ed:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f5f7:	e9 ef 00 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f5fc:	50                   	push   eax
c000f5fd:	50                   	push   eax
c000f5fe:	68 4a ed 01 c0       	push   0xc001ed4a
c000f603:	55                   	push   ebp
c000f604:	e8 d7 10 ff ff       	call   c00006e0 <strcmp>
c000f609:	83 c4 10             	add    esp,0x10
c000f60c:	85 c0                	test   eax,eax
c000f60e:	75 0f                	jne    c000f61f <CPU::detectFeatures()+0x2ff>
c000f610:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f61a:	e9 cc 00 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f61f:	50                   	push   eax
c000f620:	50                   	push   eax
c000f621:	68 57 ed 01 c0       	push   0xc001ed57
c000f626:	55                   	push   ebp
c000f627:	e8 b4 10 ff ff       	call   c00006e0 <strcmp>
c000f62c:	83 c4 10             	add    esp,0x10
c000f62f:	85 c0                	test   eax,eax
c000f631:	75 0f                	jne    c000f642 <CPU::detectFeatures()+0x322>
c000f633:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f63d:	e9 a9 00 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f642:	50                   	push   eax
c000f643:	50                   	push   eax
c000f644:	68 64 ed 01 c0       	push   0xc001ed64
c000f649:	55                   	push   ebp
c000f64a:	e8 91 10 ff ff       	call   c00006e0 <strcmp>
c000f64f:	83 c4 10             	add    esp,0x10
c000f652:	85 c0                	test   eax,eax
c000f654:	75 0f                	jne    c000f665 <CPU::detectFeatures()+0x345>
c000f656:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f660:	e9 86 00 00 00       	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f665:	50                   	push   eax
c000f666:	50                   	push   eax
c000f667:	68 71 ed 01 c0       	push   0xc001ed71
c000f66c:	55                   	push   ebp
c000f66d:	e8 6e 10 ff ff       	call   c00006e0 <strcmp>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	85 c0                	test   eax,eax
c000f677:	75 0c                	jne    c000f685 <CPU::detectFeatures()+0x365>
c000f679:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f683:	eb 66                	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f685:	50                   	push   eax
c000f686:	50                   	push   eax
c000f687:	68 7e ed 01 c0       	push   0xc001ed7e
c000f68c:	55                   	push   ebp
c000f68d:	e8 4e 10 ff ff       	call   c00006e0 <strcmp>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	85 c0                	test   eax,eax
c000f697:	75 0c                	jne    c000f6a5 <CPU::detectFeatures()+0x385>
c000f699:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f6a3:	eb 46                	jmp    c000f6eb <CPU::detectFeatures()+0x3cb>
c000f6a5:	57                   	push   edi
c000f6a6:	57                   	push   edi
c000f6a7:	68 8b ed 01 c0       	push   0xc001ed8b
c000f6ac:	55                   	push   ebp
c000f6ad:	e8 2e 10 ff ff       	call   c00006e0 <strcmp>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	85 c0                	test   eax,eax
c000f6b7:	74 e0                	je     c000f699 <CPU::detectFeatures()+0x379>
c000f6b9:	56                   	push   esi
c000f6ba:	56                   	push   esi
c000f6bb:	68 98 ed 01 c0       	push   0xc001ed98
c000f6c0:	55                   	push   ebp
c000f6c1:	e8 1a 10 ff ff       	call   c00006e0 <strcmp>
c000f6c6:	83 c4 10             	add    esp,0x10
c000f6c9:	85 c0                	test   eax,eax
c000f6cb:	74 cc                	je     c000f699 <CPU::detectFeatures()+0x379>
c000f6cd:	51                   	push   ecx
c000f6ce:	51                   	push   ecx
c000f6cf:	68 a5 ed 01 c0       	push   0xc001eda5
c000f6d4:	55                   	push   ebp
c000f6d5:	e8 06 10 ff ff       	call   c00006e0 <strcmp>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	85 c0                	test   eax,eax
c000f6df:	74 b8                	je     c000f699 <CPU::detectFeatures()+0x379>
c000f6e1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f6eb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f6f0:	0f 86 be 00 00 00    	jbe    c000f7b4 <CPU::detectFeatures()+0x494>
c000f6f6:	83 ec 0c             	sub    esp,0xc
c000f6f9:	68 80 00 00 00       	push   0x80
c000f6fe:	e8 31 fb ff ff       	call   c000f234 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f703:	83 e0 01             	and    eax,0x1
c000f706:	c1 e0 06             	shl    eax,0x6
c000f709:	88 c2                	mov    dl,al
c000f70b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f711:	83 e0 bf             	and    eax,0xffffffbf
c000f714:	09 d0                	or     eax,edx
c000f716:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f71c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f723:	e8 0c fb ff ff       	call   c000f234 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f728:	83 e0 01             	and    eax,0x1
c000f72b:	c1 e0 04             	shl    eax,0x4
c000f72e:	88 c2                	mov    dl,al
c000f730:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f736:	83 e0 ef             	and    eax,0xffffffef
c000f739:	09 d0                	or     eax,edx
c000f73b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f741:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f748:	e8 e7 fa ff ff       	call   c000f234 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f74d:	c1 e0 07             	shl    eax,0x7
c000f750:	88 c2                	mov    dl,al
c000f752:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f758:	83 e0 7f             	and    eax,0x7f
c000f75b:	09 d0                	or     eax,edx
c000f75d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f763:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f76a:	e8 f3 fa ff ff       	call   c000f262 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f76f:	83 e0 01             	and    eax,0x1
c000f772:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f779:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f77f:	83 e0 f7             	and    eax,0xfffffff7
c000f782:	09 d0                	or     eax,edx
c000f784:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f78a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f791:	e8 cc fa ff ff       	call   c000f262 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f796:	83 c4 10             	add    esp,0x10
c000f799:	83 e0 01             	and    eax,0x1
c000f79c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f7a3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7a9:	83 e0 fb             	and    eax,0xfffffffb
c000f7ac:	09 d0                	or     eax,edx
c000f7ae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7bb:	50                   	push   eax
c000f7bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7c0:	50                   	push   eax
c000f7c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f7c5:	56                   	push   esi
c000f7c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7ca:	50                   	push   eax
c000f7cb:	6a 01                	push   0x1
c000f7cd:	e8 82 f9 ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7d6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f7dc:	88 ca                	mov    dl,cl
c000f7de:	83 e0 f0             	and    eax,0xfffffff0
c000f7e1:	83 e2 0f             	and    edx,0xf
c000f7e4:	09 d0                	or     eax,edx
c000f7e6:	88 ca                	mov    dl,cl
c000f7e8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f7ee:	c0 ea 04             	shr    dl,0x4
c000f7f1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f7f5:	0f b6 c2             	movzx  eax,dl
c000f7f8:	83 c4 20             	add    esp,0x20
c000f7fb:	c1 e0 06             	shl    eax,0x6
c000f7fe:	89 c7                	mov    edi,eax
c000f800:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f806:	66 25 3f c0          	and    ax,0xc03f
c000f80a:	09 f8                	or     eax,edi
c000f80c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f813:	89 c8                	mov    eax,ecx
c000f815:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f81c:	c1 e8 08             	shr    eax,0x8
c000f81f:	83 e5 3f             	and    ebp,0x3f
c000f822:	83 e0 0f             	and    eax,0xf
c000f825:	89 c7                	mov    edi,eax
c000f827:	c1 e7 06             	shl    edi,0x6
c000f82a:	09 ef                	or     edi,ebp
c000f82c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f833:	89 fa                	mov    edx,edi
c000f835:	83 e5 c0             	and    ebp,0xffffffc0
c000f838:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f83e:	88 c2                	mov    dl,al
c000f840:	c0 ea 02             	shr    dl,0x2
c000f843:	89 d7                	mov    edi,edx
c000f845:	09 ef                	or     edi,ebp
c000f847:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f84d:	89 fa                	mov    edx,edi
c000f84f:	83 e5 cf             	and    ebp,0xffffffcf
c000f852:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f858:	89 cf                	mov    edi,ecx
c000f85a:	c1 ef 0c             	shr    edi,0xc
c000f85d:	83 e7 03             	and    edi,0x3
c000f860:	c1 e7 04             	shl    edi,0x4
c000f863:	09 ef                	or     edi,ebp
c000f865:	3c 06                	cmp    al,0x6
c000f867:	89 fa                	mov    edx,edi
c000f869:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f86f:	74 04                	je     c000f875 <CPU::detectFeatures()+0x555>
c000f871:	3c 0f                	cmp    al,0xf
c000f873:	75 5c                	jne    c000f8d1 <CPU::detectFeatures()+0x5b1>
c000f875:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f879:	89 cf                	mov    edi,ecx
c000f87b:	c1 ef 10             	shr    edi,0x10
c000f87e:	c1 e7 04             	shl    edi,0x4
c000f881:	09 fa                	or     edx,edi
c000f883:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f889:	0f b6 d2             	movzx  edx,dl
c000f88c:	66 81 e7 3f c0       	and    di,0xc03f
c000f891:	c1 e2 06             	shl    edx,0x6
c000f894:	09 fa                	or     edx,edi
c000f896:	3c 0f                	cmp    al,0xf
c000f898:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f89f:	75 30                	jne    c000f8d1 <CPU::detectFeatures()+0x5b1>
c000f8a1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f8a7:	c1 e9 14             	shr    ecx,0x14
c000f8aa:	83 e0 3f             	and    eax,0x3f
c000f8ad:	83 c1 0f             	add    ecx,0xf
c000f8b0:	88 ca                	mov    dl,cl
c000f8b2:	c0 e9 02             	shr    cl,0x2
c000f8b5:	c1 e2 06             	shl    edx,0x6
c000f8b8:	09 d0                	or     eax,edx
c000f8ba:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f8c0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f8c6:	83 e0 c0             	and    eax,0xffffffc0
c000f8c9:	09 c1                	or     ecx,eax
c000f8cb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f8db:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8df:	50                   	push   eax
c000f8e0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f8e4:	55                   	push   ebp
c000f8e5:	56                   	push   esi
c000f8e6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f8ea:	57                   	push   edi
c000f8eb:	68 00 00 00 80       	push   0x80000000
c000f8f0:	e8 5f f8 ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8f5:	83 c4 20             	add    esp,0x20
c000f8f8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f900:	76 22                	jbe    c000f924 <CPU::detectFeatures()+0x604>
c000f902:	83 ec 0c             	sub    esp,0xc
c000f905:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f909:	50                   	push   eax
c000f90a:	55                   	push   ebp
c000f90b:	56                   	push   esi
c000f90c:	57                   	push   edi
c000f90d:	68 01 00 00 80       	push   0x80000001
c000f912:	e8 3d f8 ff ff       	call   c000f154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f917:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f921:	83 c4 20             	add    esp,0x20
c000f924:	52                   	push   edx
c000f925:	52                   	push   edx
c000f926:	68 b1 ed 01 c0       	push   0xc001edb1
c000f92b:	53                   	push   ebx
c000f92c:	e8 a5 c2 ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000f931:	83 c4 10             	add    esp,0x10
c000f934:	eb 67                	jmp    c000f99d <CPU::detectFeatures()+0x67d>
c000f936:	50                   	push   eax
c000f937:	50                   	push   eax
c000f938:	68 16 ed 01 c0       	push   0xc001ed16
c000f93d:	55                   	push   ebp
c000f93e:	e8 bd 0c ff ff       	call   c0000600 <strcpy>
c000f943:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f94d:	e8 71 08 ff ff       	call   c00001c3 <is486>
c000f952:	83 c4 10             	add    esp,0x10
c000f955:	85 c0                	test   eax,eax
c000f957:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f95d:	74 1d                	je     c000f97c <CPU::detectFeatures()+0x65c>
c000f95f:	83 c8 07             	or     eax,0x7
c000f962:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f968:	0f 20 c0             	mov    eax,cr0
c000f96b:	83 e0 14             	and    eax,0x14
c000f96e:	83 f8 04             	cmp    eax,0x4
c000f971:	75 0e                	jne    c000f981 <CPU::detectFeatures()+0x661>
c000f973:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f97a:	eb 21                	jmp    c000f99d <CPU::detectFeatures()+0x67d>
c000f97c:	83 e0 f8             	and    eax,0xfffffff8
c000f97f:	eb e1                	jmp    c000f962 <CPU::detectFeatures()+0x642>
c000f981:	e8 18 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f986:	83 e0 01             	and    eax,0x1
c000f989:	8d 14 00             	lea    edx,[eax+eax*1]
c000f98c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f992:	83 e0 fd             	and    eax,0xfffffffd
c000f995:	09 d0                	or     eax,edx
c000f997:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f99d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f9a4:	74 0e                	je     c000f9b4 <CPU::detectFeatures()+0x694>
c000f9a6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f9ab:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f9b2:	eb 20                	jmp    c000f9d4 <CPU::detectFeatures()+0x6b4>
c000f9b4:	e8 e5 07 ff ff       	call   c000019e <hasLegacyFPU>
c000f9b9:	83 e0 01             	and    eax,0x1
c000f9bc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9bf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9c5:	83 e0 fd             	and    eax,0xfffffffd
c000f9c8:	09 d0                	or     eax,edx
c000f9ca:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9d0:	a8 02                	test   al,0x2
c000f9d2:	75 d2                	jne    c000f9a6 <CPU::detectFeatures()+0x686>
c000f9d4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f9db:	83 c4 2c             	add    esp,0x2c
c000f9de:	5b                   	pop    ebx
c000f9df:	5e                   	pop    esi
c000f9e0:	5f                   	pop    edi
c000f9e1:	5d                   	pop    ebp
c000f9e2:	c3                   	ret    
c000f9e3:	90                   	nop

c000f9e4 <CPU::setupSMEP()>:
c000f9e4:	0f 20 e0             	mov    eax,cr4
c000f9e7:	0d 00 00 10 00       	or     eax,0x100000
c000f9ec:	0f 22 e0             	mov    cr4,eax
c000f9ef:	c3                   	ret    

c000f9f0 <CPU::setupUMIP()>:
c000f9f0:	0f 20 e0             	mov    eax,cr4
c000f9f3:	80 cc 08             	or     ah,0x8
c000f9f6:	0f 22 e0             	mov    cr4,eax
c000f9f9:	c3                   	ret    

c000f9fa <CPU::setupTSC()>:
c000f9fa:	0f 20 e0             	mov    eax,cr4
c000f9fd:	83 c8 04             	or     eax,0x4
c000fa00:	0f 22 e0             	mov    cr4,eax
c000fa03:	c3                   	ret    

c000fa04 <CPU::setupLargePages()>:
c000fa04:	0f 20 e0             	mov    eax,cr4
c000fa07:	83 c8 10             	or     eax,0x10
c000fa0a:	0f 22 e0             	mov    cr4,eax
c000fa0d:	c3                   	ret    

c000fa0e <CPU::setupPAT()>:
c000fa0e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000fa13:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fa1a:	74 2c                	je     c000fa48 <CPU::setupPAT()+0x3a>
c000fa1c:	53                   	push   ebx
c000fa1d:	83 ec 10             	sub    esp,0x10
c000fa20:	68 77 02 00 00       	push   0x277
c000fa25:	50                   	push   eax
c000fa26:	e8 81 74 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000fa2b:	83 e2 f8             	and    edx,0xfffffff8
c000fa2e:	83 ca 01             	or     edx,0x1
c000fa31:	52                   	push   edx
c000fa32:	50                   	push   eax
c000fa33:	68 77 02 00 00       	push   0x277
c000fa38:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000fa3e:	e8 95 74 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fa43:	83 c4 28             	add    esp,0x28
c000fa46:	5b                   	pop    ebx
c000fa47:	c3                   	ret    
c000fa48:	c3                   	ret    
c000fa49:	90                   	nop

c000fa4a <CPU::setupMTRR()>:
c000fa4a:	c3                   	ret    
c000fa4b:	90                   	nop

c000fa4c <CPU::setupGlobalPages()>:
c000fa4c:	0f 20 e0             	mov    eax,cr4
c000fa4f:	0c 80                	or     al,0x80
c000fa51:	0f 22 e0             	mov    cr4,eax
c000fa54:	c3                   	ret    
c000fa55:	90                   	nop

c000fa56 <CPU::allowUsermodeDataAccess()>:
c000fa56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa5a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa61:	74 03                	je     c000fa66 <CPU::allowUsermodeDataAccess()+0x10>
c000fa63:	0f 01 cb             	stac   
c000fa66:	c3                   	ret    
c000fa67:	90                   	nop

c000fa68 <CPU::prohibitUsermodeDataAccess()>:
c000fa68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa6c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa73:	74 03                	je     c000fa78 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fa75:	0f 01 ca             	clac   
c000fa78:	c3                   	ret    
c000fa79:	90                   	nop

c000fa7a <CPU::setupSMAP()>:
c000fa7a:	0f 20 e0             	mov    eax,cr4
c000fa7d:	0d 00 00 20 00       	or     eax,0x200000
c000fa82:	0f 22 e0             	mov    cr4,eax
c000fa85:	eb e1                	jmp    c000fa68 <CPU::prohibitUsermodeDataAccess()>
c000fa87:	90                   	nop

c000fa88 <CPU::setupFeatures()>:
c000fa88:	53                   	push   ebx
c000fa89:	83 ec 08             	sub    esp,0x8
c000fa8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa90:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa97:	74 18                	je     c000fab1 <CPU::setupFeatures()+0x29>
c000fa99:	83 ec 0c             	sub    esp,0xc
c000fa9c:	68 bd ed 01 c0       	push   0xc001edbd
c000faa1:	e8 68 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000faa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faa9:	e8 42 ff ff ff       	call   c000f9f0 <CPU::setupUMIP()>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fab8:	74 18                	je     c000fad2 <CPU::setupFeatures()+0x4a>
c000faba:	83 ec 0c             	sub    esp,0xc
c000fabd:	68 c7 ed 01 c0       	push   0xc001edc7
c000fac2:	e8 47 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fac7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faca:	e8 2b ff ff ff       	call   c000f9fa <CPU::setupTSC()>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fad9:	74 18                	je     c000faf3 <CPU::setupFeatures()+0x6b>
c000fadb:	83 ec 0c             	sub    esp,0xc
c000fade:	68 d0 ed 01 c0       	push   0xc001edd0
c000fae3:	e8 26 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fae8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faeb:	e8 14 ff ff ff       	call   c000fa04 <CPU::setupLargePages()>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fafa:	74 18                	je     c000fb14 <CPU::setupFeatures()+0x8c>
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	68 d9 ed 01 c0       	push   0xc001edd9
c000fb04:	e8 05 ab ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb0c:	e8 3b ff ff ff       	call   c000fa4c <CPU::setupGlobalPages()>
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fb1b:	74 18                	je     c000fb35 <CPU::setupFeatures()+0xad>
c000fb1d:	83 ec 0c             	sub    esp,0xc
c000fb20:	68 eb ed 01 c0       	push   0xc001edeb
c000fb25:	e8 e4 aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb2d:	e8 dc fe ff ff       	call   c000fa0e <CPU::setupPAT()>
c000fb32:	83 c4 10             	add    esp,0x10
c000fb35:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fb3c:	74 11                	je     c000fb4f <CPU::setupFeatures()+0xc7>
c000fb3e:	c7 44 24 10 f4 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001edf4
c000fb46:	83 c4 08             	add    esp,0x8
c000fb49:	5b                   	pop    ebx
c000fb4a:	e9 bf aa ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000fb4f:	83 c4 08             	add    esp,0x8
c000fb52:	5b                   	pop    ebx
c000fb53:	c3                   	ret    

c000fb54 <CPU::open(int, int, void*)>:
c000fb54:	57                   	push   edi
c000fb55:	56                   	push   esi
c000fb56:	53                   	push   ebx
c000fb57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb5f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fb65:	83 ec 0c             	sub    esp,0xc
c000fb68:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fb6e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fb74:	50                   	push   eax
c000fb75:	e8 1c 76 ff ff       	call   c0007196 <GDT::setup()>
c000fb7a:	83 c4 0c             	add    esp,0xc
c000fb7d:	6a 00                	push   0x0
c000fb7f:	68 ef be ad de       	push   0xdeadbeef
c000fb84:	57                   	push   edi
c000fb85:	e8 4e 91 ff ff       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c000fb8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb8d:	e8 26 91 ff ff       	call   c0008cb8 <TSS::flush()>
c000fb92:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb98:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9b:	e8 46 78 ff ff       	call   c00073e6 <IDT::setup()>
c000fba0:	b8 00 04 00 00       	mov    eax,0x400
c000fba5:	0f 23 f8             	mov    db7,eax
c000fba8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fbb2:	e8 9a 7f ff ff       	call   c0007b51 <Phys::allocatePage()>
c000fbb7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fbbd:	89 30                	mov    DWORD PTR [eax],esi
c000fbbf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fbc5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fbc8:	58                   	pop    eax
c000fbc9:	5a                   	pop    edx
c000fbca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fbd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fbd4:	e8 17 a1 ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000fbd9:	c7 04 24 fe ed 01 c0 	mov    DWORD PTR [esp],0xc001edfe
c000fbe0:	e8 c6 00 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000fbe5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbe8:	e8 33 f7 ff ff       	call   c000f320 <CPU::detectFeatures()>
c000fbed:	c7 04 24 21 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee21
c000fbf4:	e8 b2 00 00 00       	call   c000fcab <KeSetBootMessage(char const*)>
c000fbf9:	e8 4e 5b 00 00       	call   c001574c <HalInitialise()>
c000fbfe:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fc03:	83 e0 10             	and    eax,0x10
c000fc06:	83 f8 01             	cmp    eax,0x1
c000fc09:	19 c0                	sbb    eax,eax
c000fc0b:	83 e0 46             	and    eax,0x46
c000fc0e:	83 c0 1e             	add    eax,0x1e
c000fc11:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc14:	e8 c8 d6 ff ff       	call   c000d2e1 <setupTimer(int)>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fc22:	f6 05 d0 2e 02 c0 20 	test   BYTE PTR ds:0xc0022ed0,0x20
c000fc29:	74 0c                	je     c000fc37 <CPU::open(int, int, void*)+0xe3>
c000fc2b:	83 ec 0c             	sub    esp,0xc
c000fc2e:	53                   	push   ebx
c000fc2f:	e8 54 fe ff ff       	call   c000fa88 <CPU::setupFeatures()>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	5b                   	pop    ebx
c000fc38:	31 c0                	xor    eax,eax
c000fc3a:	5e                   	pop    esi
c000fc3b:	5f                   	pop    edi
c000fc3c:	c3                   	ret    

c000fc3d <KeDisplaySplashScreen()>:
c000fc3d:	55                   	push   ebp
c000fc3e:	bd 05 00 00 00       	mov    ebp,0x5
c000fc43:	57                   	push   edi
c000fc44:	bf 00 00 02 c0       	mov    edi,0xc0020000
c000fc49:	56                   	push   esi
c000fc4a:	be 0a 00 00 00       	mov    esi,0xa
c000fc4f:	53                   	push   ebx
c000fc50:	31 db                	xor    ebx,ebx
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fc58:	84 c0                	test   al,al
c000fc5a:	74 47                	je     c000fca3 <KeDisplaySplashScreen()+0x66>
c000fc5c:	80 bb 36 00 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdffca],0xdb
c000fc63:	75 13                	jne    c000fc78 <KeDisplaySplashScreen()+0x3b>
c000fc65:	0f b6 93 35 00 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdffcb]
c000fc6c:	83 e2 fe             	and    edx,0xfffffffe
c000fc6f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fc75:	75 01                	jne    c000fc78 <KeDisplaySplashScreen()+0x3b>
c000fc77:	46                   	inc    esi
c000fc78:	3c 0d                	cmp    al,0xd
c000fc7a:	74 24                	je     c000fca0 <KeDisplaySplashScreen()+0x63>
c000fc7c:	3c 0a                	cmp    al,0xa
c000fc7e:	75 0a                	jne    c000fc8a <KeDisplaySplashScreen()+0x4d>
c000fc80:	45                   	inc    ebp
c000fc81:	be 0a 00 00 00       	mov    esi,0xa
c000fc86:	31 db                	xor    ebx,ebx
c000fc88:	eb 16                	jmp    c000fca0 <KeDisplaySplashScreen()+0x63>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc90:	55                   	push   ebp
c000fc91:	43                   	inc    ebx
c000fc92:	52                   	push   edx
c000fc93:	6a 00                	push   0x0
c000fc95:	6a 0e                	push   0xe
c000fc97:	50                   	push   eax
c000fc98:	e8 13 67 00 00       	call   c00163b0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc9d:	83 c4 20             	add    esp,0x20
c000fca0:	47                   	inc    edi
c000fca1:	eb b2                	jmp    c000fc55 <KeDisplaySplashScreen()+0x18>
c000fca3:	83 c4 0c             	add    esp,0xc
c000fca6:	5b                   	pop    ebx
c000fca7:	5e                   	pop    esi
c000fca8:	5f                   	pop    edi
c000fca9:	5d                   	pop    ebp
c000fcaa:	c3                   	ret    

c000fcab <KeSetBootMessage(char const*)>:
c000fcab:	57                   	push   edi
c000fcac:	56                   	push   esi
c000fcad:	53                   	push   ebx
c000fcae:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fcb4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fcbb:	68 9e 00 00 00       	push   0x9e
c000fcc0:	6a 00                	push   0x0
c000fcc2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fcc6:	56                   	push   esi
c000fcc7:	e8 04 08 ff ff       	call   c00004d0 <memset>
c000fccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fccf:	e8 6c 08 ff ff       	call   c0000540 <strlen>
c000fcd4:	ba 50 00 00 00       	mov    edx,0x50
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	29 c2                	sub    edx,eax
c000fcde:	31 c9                	xor    ecx,ecx
c000fce0:	83 e2 fe             	and    edx,0xfffffffe
c000fce3:	01 f2                	add    edx,esi
c000fce5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fcea:	84 c0                	test   al,al
c000fcec:	74 0a                	je     c000fcf8 <KeSetBootMessage(char const*)+0x4d>
c000fcee:	80 cc 0f             	or     ah,0xf
c000fcf1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fcf5:	41                   	inc    ecx
c000fcf6:	eb ed                	jmp    c000fce5 <KeSetBootMessage(char const*)+0x3a>
c000fcf8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fcfd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fd02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd04:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fd0a:	5b                   	pop    ebx
c000fd0b:	5e                   	pop    esi
c000fd0c:	5f                   	pop    edi
c000fd0d:	c3                   	ret    

c000fd0e <EnvVarContainer::getEnv(char const*)>:
c000fd0e:	57                   	push   edi
c000fd0f:	56                   	push   esi
c000fd10:	53                   	push   ebx
c000fd11:	31 db                	xor    ebx,ebx
c000fd13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd17:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd19:	7e 2b                	jle    c000fd46 <EnvVarContainer::getEnv(char const*)+0x38>
c000fd1b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd22:	50                   	push   eax
c000fd23:	50                   	push   eax
c000fd24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd27:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fd2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fd2e:	e8 ad 09 ff ff       	call   c00006e0 <strcmp>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	85 c0                	test   eax,eax
c000fd38:	75 09                	jne    c000fd43 <EnvVarContainer::getEnv(char const*)+0x35>
c000fd3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd3d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd41:	eb 05                	jmp    c000fd48 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd43:	43                   	inc    ebx
c000fd44:	eb d1                	jmp    c000fd17 <EnvVarContainer::getEnv(char const*)+0x9>
c000fd46:	31 c0                	xor    eax,eax
c000fd48:	5b                   	pop    ebx
c000fd49:	5e                   	pop    esi
c000fd4a:	5f                   	pop    edi
c000fd4b:	c3                   	ret    

c000fd4c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd4c:	55                   	push   ebp
c000fd4d:	57                   	push   edi
c000fd4e:	56                   	push   esi
c000fd4f:	53                   	push   ebx
c000fd50:	83 ec 28             	sub    esp,0x28
c000fd53:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd57:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd5b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd5f:	56                   	push   esi
c000fd60:	e8 db 07 ff ff       	call   c0000540 <strlen>
c000fd65:	40                   	inc    eax
c000fd66:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd69:	e8 07 7b ff ff       	call   c0007875 <malloc>
c000fd6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd75:	e8 c6 07 ff ff       	call   c0000540 <strlen>
c000fd7a:	40                   	inc    eax
c000fd7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd7e:	e8 f2 7a ff ff       	call   c0007875 <malloc>
c000fd83:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd8a:	e8 b1 07 ff ff       	call   c0000540 <strlen>
c000fd8f:	83 c4 0c             	add    esp,0xc
c000fd92:	40                   	inc    eax
c000fd93:	50                   	push   eax
c000fd94:	6a 00                	push   0x0
c000fd96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd9a:	e8 31 07 ff ff       	call   c00004d0 <memset>
c000fd9f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fda2:	e8 99 07 ff ff       	call   c0000540 <strlen>
c000fda7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fdab:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdb3:	89 de                	mov    esi,ebx
c000fdb5:	e8 86 07 ff ff       	call   c0000540 <strlen>
c000fdba:	83 c4 0c             	add    esp,0xc
c000fdbd:	40                   	inc    eax
c000fdbe:	50                   	push   eax
c000fdbf:	6a 00                	push   0x0
c000fdc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdc5:	e8 06 07 ff ff       	call   c00004d0 <memset>
c000fdca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdcd:	e8 6e 07 ff ff       	call   c0000540 <strlen>
c000fdd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdd6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fddb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdde:	40                   	inc    eax
c000fddf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fde2:	c1 e0 03             	shl    eax,0x3
c000fde5:	5a                   	pop    edx
c000fde6:	59                   	pop    ecx
c000fde7:	50                   	push   eax
c000fde8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fdeb:	e8 71 7a ff ff       	call   c0007861 <realloc>
c000fdf0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdf4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdf7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdfa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdfe:	b9 08 00 00 00       	mov    ecx,0x8
c000fe03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe05:	83 c4 2c             	add    esp,0x2c
c000fe08:	5b                   	pop    ebx
c000fe09:	5e                   	pop    esi
c000fe0a:	5f                   	pop    edi
c000fe0b:	5d                   	pop    ebp
c000fe0c:	c3                   	ret    
c000fe0d:	90                   	nop

c000fe0e <EnvVarContainer::deleteEnv(char const*)>:
c000fe0e:	c3                   	ret    
c000fe0f:	90                   	nop

c000fe10 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fe10:	55                   	push   ebp
c000fe11:	57                   	push   edi
c000fe12:	56                   	push   esi
c000fe13:	53                   	push   ebx
c000fe14:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe1a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe21:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fe28:	68 14 01 00 00       	push   0x114
c000fe2d:	e8 43 7a ff ff       	call   c0007875 <malloc>
c000fe32:	83 c4 0c             	add    esp,0xc
c000fe35:	89 c3                	mov    ebx,eax
c000fe37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe3a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe41:	50                   	push   eax
c000fe42:	e8 3d ad ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000fe47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe4a:	e8 63 b0 ff ff       	call   c000aeb2 <File::exists()>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	84 c0                	test   al,al
c000fe54:	75 31                	jne    c000fe87 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe56:	50                   	push   eax
c000fe57:	50                   	push   eax
c000fe58:	6a 12                	push   0x12
c000fe5a:	53                   	push   ebx
c000fe5b:	e8 e4 ad ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000fe60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe62:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe65:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe68:	e8 d3 06 ff ff       	call   c0000540 <strlen>
c000fe6d:	5a                   	pop    edx
c000fe6e:	31 d2                	xor    edx,edx
c000fe70:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe74:	51                   	push   ecx
c000fe75:	56                   	push   esi
c000fe76:	52                   	push   edx
c000fe77:	50                   	push   eax
c000fe78:	53                   	push   ebx
c000fe79:	ff d7                	call   edi
c000fe7b:	83 c4 14             	add    esp,0x14
c000fe7e:	53                   	push   ebx
c000fe7f:	e8 1e ae ff ff       	call   c000aca2 <File::close()>
c000fe84:	83 c4 10             	add    esp,0x10
c000fe87:	56                   	push   esi
c000fe88:	31 f6                	xor    esi,esi
c000fe8a:	68 00 01 00 00       	push   0x100
c000fe8f:	6a 00                	push   0x0
c000fe91:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe95:	50                   	push   eax
c000fe96:	e8 35 06 ff ff       	call   c00004d0 <memset>
c000fe9b:	5f                   	pop    edi
c000fe9c:	58                   	pop    eax
c000fe9d:	6a 01                	push   0x1
c000fe9f:	53                   	push   ebx
c000fea0:	e8 9f ad ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000feb5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000feb9:	51                   	push   ecx
c000feba:	8d 54 24 23          	lea    edx,[esp+0x23]
c000febe:	52                   	push   edx
c000febf:	6a 00                	push   0x0
c000fec1:	6a 01                	push   0x1
c000fec3:	53                   	push   ebx
c000fec4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fec7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fecb:	83 c4 20             	add    esp,0x20
c000fece:	3c 0d                	cmp    al,0xd
c000fed0:	0f 84 09 01 00 00    	je     c000ffdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fed6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fedb:	0f 84 ef 00 00 00    	je     c000ffd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fee1:	3c 0a                	cmp    al,0xa
c000fee3:	74 13                	je     c000fef8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fee5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000feea:	74 0c                	je     c000fef8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000feec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fef2:	0f 8e d8 00 00 00    	jle    c000ffd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	8d 78 01             	lea    edi,[eax+0x1]
c000ff02:	57                   	push   edi
c000ff03:	e8 6d 79 ff ff       	call   c0007875 <malloc>
c000ff08:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ff0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff10:	8d 56 04             	lea    edx,[esi+0x4]
c000ff13:	89 14 24             	mov    DWORD PTR [esp],edx
c000ff16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff1a:	e8 56 79 ff ff       	call   c0007875 <malloc>
c000ff1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff23:	83 c4 0c             	add    esp,0xc
c000ff26:	57                   	push   edi
c000ff27:	6a 00                	push   0x0
c000ff29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff2d:	e8 9e 05 ff ff       	call   c00004d0 <memset>
c000ff32:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff40:	83 c4 0c             	add    esp,0xc
c000ff43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff47:	52                   	push   edx
c000ff48:	6a 00                	push   0x0
c000ff4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff4e:	e8 7d 05 ff ff       	call   c00004d0 <memset>
c000ff53:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff57:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff5b:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff5e:	e8 dd 05 ff ff       	call   c0000540 <strlen>
c000ff63:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff67:	89 c1                	mov    ecx,eax
c000ff69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff6e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff71:	40                   	inc    eax
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff78:	85 d2                	test   edx,edx
c000ff7a:	75 0c                	jne    c000ff88 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff7c:	83 ec 0c             	sub    esp,0xc
c000ff7f:	6a 08                	push   0x8
c000ff81:	e8 ef 78 ff ff       	call   c0007875 <malloc>
c000ff86:	eb 0c                	jmp    c000ff94 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff88:	c1 e0 03             	shl    eax,0x3
c000ff8b:	51                   	push   ecx
c000ff8c:	51                   	push   ecx
c000ff8d:	50                   	push   eax
c000ff8e:	52                   	push   edx
c000ff8f:	e8 cd 78 ff ff       	call   c0007861 <realloc>
c000ff94:	83 c4 10             	add    esp,0x10
c000ff97:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff9d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ffa0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ffa4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ffa8:	b9 08 00 00 00       	mov    ecx,0x8
c000ffad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffaf:	31 f6                	xor    esi,esi
c000ffb1:	50                   	push   eax
c000ffb2:	68 00 01 00 00       	push   0x100
c000ffb7:	6a 00                	push   0x0
c000ffb9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ffbd:	50                   	push   eax
c000ffbe:	e8 0d 05 ff ff       	call   c00004d0 <memset>
c000ffc3:	83 c4 10             	add    esp,0x10
c000ffc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffce:	eb 0f                	jmp    c000ffdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffd0:	3c 3d                	cmp    al,0x3d
c000ffd2:	74 07                	je     c000ffdb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffd4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ffd8:	46                   	inc    esi
c000ffd9:	eb 04                	jmp    c000ffdf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffdb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ffdf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffe4:	0f 85 c6 fe ff ff    	jne    c000feb0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ffea:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fff0:	5b                   	pop    ebx
c000fff1:	5e                   	pop    esi
c000fff2:	5f                   	pop    edi
c000fff3:	5d                   	pop    ebp
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <EnvVarContainer::__loadSystem()>:
c000fff6:	83 ec 10             	sub    esp,0x10
c000fff9:	68 60 01 02 c0       	push   0xc0020160
c000fffe:	68 64 ee 01 c0       	push   0xc001ee64
c0010003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010007:	e8 04 fe ff ff       	call   c000fe10 <EnvVarContainer::loadFrom(char const*, char const*)>
c001000c:	83 c4 1c             	add    esp,0x1c
c001000f:	c3                   	ret    

c0010010 <EnvVarContainer::__loadUser()>:
c0010010:	c3                   	ret    
c0010011:	90                   	nop

c0010012 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001001c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010024:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010032:	90                   	nop
c0010033:	c3                   	ret    

c0010034 <EnvVarContainer::~EnvVarContainer()>:
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001003e:	85 c0                	test   eax,eax
c0010040:	74 1d                	je     c001005f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010046:	8b 00                	mov    eax,DWORD PTR [eax]
c0010048:	85 c0                	test   eax,eax
c001004a:	74 13                	je     c001005f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001004c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010053:	83 ec 0c             	sub    esp,0xc
c0010056:	50                   	push   eax
c0010057:	e8 29 78 ff ff       	call   c0007885 <free>
c001005c:	83 c4 10             	add    esp,0x10
c001005f:	90                   	nop
c0010060:	83 c4 0c             	add    esp,0xc
c0010063:	c3                   	ret    

c0010064 <Krnl::getEnv(Process*, char const*)>:
c0010064:	53                   	push   ebx
c0010065:	83 ec 08             	sub    esp,0x8
c0010068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010070:	39 05 90 61 02 c0    	cmp    DWORD PTR ds:0xc0026190,eax
c0010076:	74 04                	je     c001007c <Krnl::getEnv(Process*, char const*)+0x18>
c0010078:	85 c0                	test   eax,eax
c001007a:	75 0b                	jne    c0010087 <Krnl::getEnv(Process*, char const*)+0x23>
c001007c:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010081:	85 c0                	test   eax,eax
c0010083:	75 19                	jne    c001009e <Krnl::getEnv(Process*, char const*)+0x3a>
c0010085:	eb 27                	jmp    c00100ae <Krnl::getEnv(Process*, char const*)+0x4a>
c0010087:	52                   	push   edx
c0010088:	52                   	push   edx
c0010089:	53                   	push   ebx
c001008a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010090:	e8 79 fc ff ff       	call   c000fd0e <EnvVarContainer::getEnv(char const*)>
c0010095:	83 c4 10             	add    esp,0x10
c0010098:	85 c0                	test   eax,eax
c001009a:	75 28                	jne    c00100c4 <Krnl::getEnv(Process*, char const*)+0x60>
c001009c:	eb de                	jmp    c001007c <Krnl::getEnv(Process*, char const*)+0x18>
c001009e:	52                   	push   edx
c001009f:	52                   	push   edx
c00100a0:	53                   	push   ebx
c00100a1:	50                   	push   eax
c00100a2:	e8 67 fc ff ff       	call   c000fd0e <EnvVarContainer::getEnv(char const*)>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	85 c0                	test   eax,eax
c00100ac:	75 16                	jne    c00100c4 <Krnl::getEnv(Process*, char const*)+0x60>
c00100ae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00100b2:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c00100b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100bb:	83 c4 08             	add    esp,0x8
c00100be:	5b                   	pop    ebx
c00100bf:	e9 4a fc ff ff       	jmp    c000fd0e <EnvVarContainer::getEnv(char const*)>
c00100c4:	83 c4 08             	add    esp,0x8
c00100c7:	5b                   	pop    ebx
c00100c8:	c3                   	ret    

c00100c9 <Krnl::setEnvSystem(char const*, char const*)>:
c00100c9:	83 ec 10             	sub    esp,0x10
c00100cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d4:	ff 35 34 59 02 c0    	push   DWORD PTR ds:0xc0025934
c00100da:	e8 6d fc ff ff       	call   c000fd4c <EnvVarContainer::setEnv(char const*, char const*)>
c00100df:	83 c4 1c             	add    esp,0x1c
c00100e2:	c3                   	ret    

c00100e3 <Krnl::setEnvUser(char const*, char const*)>:
c00100e3:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c00100e8:	85 c0                	test   eax,eax
c00100ea:	74 15                	je     c0010101 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00100ec:	83 ec 10             	sub    esp,0x10
c00100ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100f7:	50                   	push   eax
c00100f8:	e8 4f fc ff ff       	call   c000fd4c <EnvVarContainer::setEnv(char const*, char const*)>
c00100fd:	83 c4 1c             	add    esp,0x1c
c0010100:	c3                   	ret    
c0010101:	c3                   	ret    

c0010102 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010106:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001010c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010110:	e9 37 fc ff ff       	jmp    c000fd4c <EnvVarContainer::setEnv(char const*, char const*)>

c0010115 <Krnl::deleteEnvSystem(char const*)>:
c0010115:	c3                   	ret    

c0010116 <Krnl::deleteEnvUser(char const*)>:
c0010116:	c3                   	ret    

c0010117 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010117:	c3                   	ret    

c0010118 <Krnl::newProcessEnv(Process*)>:
c0010118:	83 ec 28             	sub    esp,0x28
c001011b:	6a 0c                	push   0xc
c001011d:	e8 53 77 ff ff       	call   c0007875 <malloc>
c0010122:	5a                   	pop    edx
c0010123:	59                   	pop    ecx
c0010124:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010128:	50                   	push   eax
c0010129:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001012d:	e8 e0 fe ff ff       	call   c0010012 <EnvVarContainer::EnvVarContainer(Process*)>
c0010132:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010136:	83 c4 2c             	add    esp,0x2c
c0010139:	c3                   	ret    

c001013a <Krnl::copyProcessEnv(Process*, Process*)>:
c001013a:	57                   	push   edi
c001013b:	56                   	push   esi
c001013c:	53                   	push   ebx
c001013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010141:	83 ec 0c             	sub    esp,0xc
c0010144:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001014a:	6a 0c                	push   0xc
c001014c:	e8 24 77 ff ff       	call   c0007875 <malloc>
c0010151:	89 c3                	mov    ebx,eax
c0010153:	58                   	pop    eax
c0010154:	5a                   	pop    edx
c0010155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010159:	53                   	push   ebx
c001015a:	e8 b3 fe ff ff       	call   c0010012 <EnvVarContainer::EnvVarContainer(Process*)>
c001015f:	8b 07                	mov    eax,DWORD PTR [edi]
c0010161:	89 03                	mov    DWORD PTR [ebx],eax
c0010163:	c1 e0 03             	shl    eax,0x3
c0010166:	89 04 24             	mov    DWORD PTR [esp],eax
c0010169:	e8 07 77 ff ff       	call   c0007875 <malloc>
c001016e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010171:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010173:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010176:	c1 e1 03             	shl    ecx,0x3
c0010179:	89 c7                	mov    edi,eax
c001017b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001017d:	83 c4 10             	add    esp,0x10
c0010180:	89 d8                	mov    eax,ebx
c0010182:	5b                   	pop    ebx
c0010183:	5e                   	pop    esi
c0010184:	5f                   	pop    edi
c0010185:	c3                   	ret    

c0010186 <Krnl::loadSystemEnv()>:
c0010186:	53                   	push   ebx
c0010187:	83 ec 14             	sub    esp,0x14
c001018a:	6a 0c                	push   0xc
c001018c:	e8 e4 76 ff ff       	call   c0007875 <malloc>
c0010191:	89 c3                	mov    ebx,eax
c0010193:	58                   	pop    eax
c0010194:	5a                   	pop    edx
c0010195:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001019b:	53                   	push   ebx
c001019c:	e8 71 fe ff ff       	call   c0010012 <EnvVarContainer::EnvVarContainer(Process*)>
c00101a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101a4:	89 1d 34 59 02 c0    	mov    DWORD PTR ds:0xc0025934,ebx
c00101aa:	e8 47 fe ff ff       	call   c000fff6 <EnvVarContainer::__loadSystem()>
c00101af:	83 c4 18             	add    esp,0x18
c00101b2:	5b                   	pop    ebx
c00101b3:	c3                   	ret    

c00101b4 <Krnl::loadUserEnv()>:
c00101b4:	53                   	push   ebx
c00101b5:	83 ec 14             	sub    esp,0x14
c00101b8:	6a 0c                	push   0xc
c00101ba:	e8 b6 76 ff ff       	call   c0007875 <malloc>
c00101bf:	89 c3                	mov    ebx,eax
c00101c1:	58                   	pop    eax
c00101c2:	5a                   	pop    edx
c00101c3:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00101c9:	53                   	push   ebx
c00101ca:	e8 43 fe ff ff       	call   c0010012 <EnvVarContainer::EnvVarContainer(Process*)>
c00101cf:	89 1d 30 59 02 c0    	mov    DWORD PTR ds:0xc0025930,ebx
c00101d5:	83 c4 18             	add    esp,0x18
c00101d8:	5b                   	pop    ebx
c00101d9:	c3                   	ret    

c00101da <Krnl::flushEnv()>:
c00101da:	c3                   	ret    

c00101db <Krnl::getProcessTotalEnvCount(Process*)>:
c00101db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101df:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c00101e5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101eb:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c00101f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f2:	03 01                	add    eax,DWORD PTR [ecx]
c00101f4:	85 d2                	test   edx,edx
c00101f6:	74 02                	je     c00101fa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00101f8:	03 02                	add    eax,DWORD PTR [edx]
c00101fa:	c3                   	ret    

c00101fb <Krnl::getProcessEnvPair(Process*, int)>:
c00101fb:	57                   	push   edi
c00101fc:	56                   	push   esi
c00101fd:	8b 35 30 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025930
c0010203:	53                   	push   ebx
c0010204:	85 f6                	test   esi,esi
c0010206:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001020a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001020e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010214:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010218:	8b 01                	mov    eax,DWORD PTR [ecx]
c001021a:	75 16                	jne    c0010232 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001021c:	39 c2                	cmp    edx,eax
c001021e:	7c 16                	jl     c0010236 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010220:	8b 0d 34 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025934
c0010226:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010228:	01 c6                	add    esi,eax
c001022a:	39 d6                	cmp    esi,edx
c001022c:	7e 3c                	jle    c001026a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001022e:	29 c2                	sub    edx,eax
c0010230:	eb 04                	jmp    c0010236 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010232:	39 c2                	cmp    edx,eax
c0010234:	7d 05                	jge    c001023b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010236:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010239:	eb 20                	jmp    c001025b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001023b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001023d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010240:	39 d1                	cmp    ecx,edx
c0010242:	7e 04                	jle    c0010248 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010244:	29 c2                	sub    edx,eax
c0010246:	eb 10                	jmp    c0010258 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010248:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c001024e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010250:	39 d1                	cmp    ecx,edx
c0010252:	7e 16                	jle    c001026a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010254:	29 c2                	sub    edx,eax
c0010256:	29 fa                	sub    edx,edi
c0010258:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001025b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001025e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010260:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010263:	89 03                	mov    DWORD PTR [ebx],eax
c0010265:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010268:	eb 1d                	jmp    c0010287 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	68 86 ee 01 c0       	push   0xc001ee86
c0010272:	e8 ac 00 00 00       	call   c0010323 <KePanic(char const*)>
c0010277:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001027d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010284:	83 c4 10             	add    esp,0x10
c0010287:	89 d8                	mov    eax,ebx
c0010289:	5b                   	pop    ebx
c001028a:	5e                   	pop    esi
c001028b:	5f                   	pop    edi
c001028c:	c2 04 00             	ret    0x4

c001028f <CPU::current()>:
c001028f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010294:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001029a:	c3                   	ret    

c001029b <operator new(unsigned long)>:
c001029b:	e9 d5 75 ff ff       	jmp    c0007875 <malloc>

c00102a0 <operator delete(void*)>:
c00102a0:	e9 f0 75 ff ff       	jmp    c0007895 <rfree>

c00102a5 <disableIRQs()>:
c00102a5:	fa                   	cli    
c00102a6:	c3                   	ret    

c00102a7 <enableIRQs()>:
c00102a7:	fb                   	sti    
c00102a8:	c3                   	ret    

c00102a9 <lockScheduler()>:
c00102a9:	fa                   	cli    
c00102aa:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00102b0:	c3                   	ret    

c00102b1 <unlockScheduler()>:
c00102b1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102b6:	48                   	dec    eax
c00102b7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102bc:	75 01                	jne    c00102bf <unlockScheduler()+0xe>
c00102be:	fb                   	sti    
c00102bf:	c3                   	ret    

c00102c0 <lockStuff()>:
c00102c0:	fa                   	cli    
c00102c1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00102c7:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00102cd:	c3                   	ret    

c00102ce <unlockStuff()>:
c00102ce:	83 ec 0c             	sub    esp,0xc
c00102d1:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00102d6:	48                   	dec    eax
c00102d7:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00102dc:	75 18                	jne    c00102f6 <unlockStuff()+0x28>
c00102de:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c00102e5:	74 0f                	je     c00102f6 <unlockStuff()+0x28>
c00102e7:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00102f1:	e8 4a 35 00 00       	call   c0013840 <schedule()>
c00102f6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102fb:	48                   	dec    eax
c00102fc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010301:	75 01                	jne    c0010304 <unlockStuff()+0x36>
c0010303:	fb                   	sti    
c0010304:	83 c4 0c             	add    esp,0xc
c0010307:	c3                   	ret    

c0010308 <Virt::getAKernelVAS()>:
c0010308:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c001030d:	c3                   	ret    

c001030e <__not_memcpy>:
c001030e:	57                   	push   edi
c001030f:	56                   	push   esi
c0010310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010314:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010318:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001031c:	89 c7                	mov    edi,eax
c001031e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010320:	5e                   	pop    esi
c0010321:	5f                   	pop    edi
c0010322:	c3                   	ret    

c0010323 <KePanic(char const*)>:
c0010323:	c6 05 38 59 02 c0 01 	mov    BYTE PTR ds:0xc0025938,0x1
c001032a:	e9 09 53 00 00       	jmp    c0015638 <HalPanic(char const*)>

c001032f <Krnl::powerThread(void*)>:
c001032f:	83 ec 0c             	sub    esp,0xc
c0010332:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010337:	48                   	dec    eax
c0010338:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001033d:	75 01                	jne    c0010340 <Krnl::powerThread(void*)+0x11>
c001033f:	fb                   	sti    
c0010340:	83 ec 0c             	sub    esp,0xc
c0010343:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c001034a:	6a 0a                	push   0xa
c001034c:	e8 ff 37 00 00       	call   c0013b50 <sleep(unsigned int)>
c0010351:	83 05 84 59 02 c0 0a 	add    DWORD PTR ds:0xc0025984,0xa
c0010358:	83 c4 10             	add    esp,0x10
c001035b:	eb e3                	jmp    c0010340 <Krnl::powerThread(void*)+0x11>

c001035d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001035d:	57                   	push   edi
c001035e:	b9 09 00 00 00       	mov    ecx,0x9
c0010363:	56                   	push   esi
c0010364:	bf 60 59 02 c0       	mov    edi,0xc0025960
c0010369:	fc                   	cld    
c001036a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001036e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010370:	5e                   	pop    esi
c0010371:	5f                   	pop    edi
c0010372:	c3                   	ret    

c0010373 <Krnl::userIOReceived()>:
c0010373:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c001037d:	c3                   	ret    

c001037e <Krnl::handlePowerButton()>:
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c0010386:	83 f8 02             	cmp    eax,0x2
c0010389:	75 10                	jne    c001039b <Krnl::handlePowerButton()+0x1d>
c001038b:	83 ec 0c             	sub    esp,0xc
c001038e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010394:	e8 77 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c0010399:	eb 11                	jmp    c00103ac <Krnl::handlePowerButton()+0x2e>
c001039b:	48                   	dec    eax
c001039c:	75 11                	jne    c00103af <Krnl::handlePowerButton()+0x31>
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00103a7:	e8 94 6b ff ff       	call   c0006f40 <Computer::sleep()>
c00103ac:	83 c4 10             	add    esp,0x10
c00103af:	83 c4 0c             	add    esp,0xc
c00103b2:	c3                   	ret    

c00103b3 <Krnl::handleSleepButton()>:
c00103b3:	83 ec 0c             	sub    esp,0xc
c00103b6:	a1 64 59 02 c0       	mov    eax,ds:0xc0025964
c00103bb:	83 f8 02             	cmp    eax,0x2
c00103be:	75 10                	jne    c00103d0 <Krnl::handleSleepButton()+0x1d>
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00103c9:	e8 42 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c00103ce:	eb 11                	jmp    c00103e1 <Krnl::handleSleepButton()+0x2e>
c00103d0:	48                   	dec    eax
c00103d1:	75 11                	jne    c00103e4 <Krnl::handleSleepButton()+0x31>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00103dc:	e8 5f 6b ff ff       	call   c0006f40 <Computer::sleep()>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	83 c4 0c             	add    esp,0xc
c00103e7:	c3                   	ret    

c00103e8 <Krnl::setupPowerManager()>:
c00103e8:	83 ec 0c             	sub    esp,0xc
c00103eb:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c00103f5:	68 f0 00 00 00       	push   0xf0
c00103fa:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c0010401:	6a 00                	push   0x0
c0010403:	68 2f 03 01 c0       	push   0xc001032f
c0010408:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001040e:	e8 0d 32 00 00       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c0010413:	c7 05 60 59 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025960,0x2
c001041d:	c7 05 64 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025964,0x1
c0010427:	c7 05 68 59 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025968,0x3
c0010431:	c7 05 6c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002596c,0x0
c001043b:	c7 05 78 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025978,0x0
c0010445:	c7 05 70 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025970,0x0
c001044f:	c7 05 7c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002597c,0x0
c0010459:	c7 05 74 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025974,0x3c
c0010463:	c7 05 80 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025980,0x3c
c001046d:	83 c4 1c             	add    esp,0x1c
c0010470:	c3                   	ret    
c0010471:	66 90                	xchg   ax,ax
c0010473:	90                   	nop

c0010474 <KeResolveCompatibilitySymbol(char*)>:
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	68 a0 ee 01 c0       	push   0xc001eea0
c001047f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010483:	e8 58 02 ff ff       	call   c00006e0 <strcmp>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	85 c0                	test   eax,eax
c001048d:	0f 94 c0             	sete   al
c0010490:	84 c0                	test   al,al
c0010492:	74 0c                	je     c00104a0 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010494:	b8 b8 2e 02 c0       	mov    eax,0xc0022eb8
c0010499:	e9 62 01 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001049e:	66 90                	xchg   ax,ax
c00104a0:	83 ec 08             	sub    esp,0x8
c00104a3:	68 a9 ee 01 c0       	push   0xc001eea9
c00104a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ac:	e8 2f 02 ff ff       	call   c00006e0 <strcmp>
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	85 c0                	test   eax,eax
c00104b6:	0f 94 c0             	sete   al
c00104b9:	84 c0                	test   al,al
c00104bb:	74 0b                	je     c00104c8 <KeResolveCompatibilitySymbol(char*)+0x54>
c00104bd:	b8 10 c9 01 c0       	mov    eax,0xc001c910
c00104c2:	e9 39 01 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104c7:	90                   	nop
c00104c8:	83 ec 08             	sub    esp,0x8
c00104cb:	68 b3 ee 01 c0       	push   0xc001eeb3
c00104d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104d4:	e8 07 02 ff ff       	call   c00006e0 <strcmp>
c00104d9:	83 c4 10             	add    esp,0x10
c00104dc:	85 c0                	test   eax,eax
c00104de:	0f 94 c0             	sete   al
c00104e1:	84 c0                	test   al,al
c00104e3:	74 0b                	je     c00104f0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00104e5:	b8 44 c6 01 c0       	mov    eax,0xc001c644
c00104ea:	e9 11 01 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104ef:	90                   	nop
c00104f0:	83 ec 08             	sub    esp,0x8
c00104f3:	68 bc ee 01 c0       	push   0xc001eebc
c00104f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104fc:	e8 df 01 ff ff       	call   c00006e0 <strcmp>
c0010501:	83 c4 10             	add    esp,0x10
c0010504:	85 c0                	test   eax,eax
c0010506:	0f 94 c0             	sete   al
c0010509:	84 c0                	test   al,al
c001050b:	74 0b                	je     c0010518 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001050d:	b8 23 03 01 c0       	mov    eax,0xc0010323
c0010512:	e9 e9 00 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010517:	90                   	nop
c0010518:	83 ec 08             	sub    esp,0x8
c001051b:	68 cf ee 01 c0       	push   0xc001eecf
c0010520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010524:	e8 b7 01 ff ff       	call   c00006e0 <strcmp>
c0010529:	83 c4 10             	add    esp,0x10
c001052c:	85 c0                	test   eax,eax
c001052e:	0f 94 c0             	sete   al
c0010531:	84 c0                	test   al,al
c0010533:	74 0b                	je     c0010540 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010535:	b8 ab fc 00 c0       	mov    eax,0xc000fcab
c001053a:	e9 c1 00 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001053f:	90                   	nop
c0010540:	83 ec 08             	sub    esp,0x8
c0010543:	68 ec ee 01 c0       	push   0xc001eeec
c0010548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054c:	e8 8f 01 ff ff       	call   c00006e0 <strcmp>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	85 c0                	test   eax,eax
c0010556:	0f 94 c0             	sete   al
c0010559:	84 c0                	test   al,al
c001055b:	74 0b                	je     c0010568 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001055d:	b8 10 ca 01 c0       	mov    eax,0xc001ca10
c0010562:	e9 99 00 00 00       	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010567:	90                   	nop
c0010568:	83 ec 08             	sub    esp,0x8
c001056b:	68 f6 ee 01 c0       	push   0xc001eef6
c0010570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010574:	e8 67 01 ff ff       	call   c00006e0 <strcmp>
c0010579:	83 c4 10             	add    esp,0x10
c001057c:	85 c0                	test   eax,eax
c001057e:	0f 94 c0             	sete   al
c0010581:	84 c0                	test   al,al
c0010583:	74 07                	je     c001058c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010585:	b8 90 c7 01 c0       	mov    eax,0xc001c790
c001058a:	eb 74                	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001058c:	83 ec 08             	sub    esp,0x8
c001058f:	68 ff ee 01 c0       	push   0xc001eeff
c0010594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010598:	e8 43 01 ff ff       	call   c00006e0 <strcmp>
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	85 c0                	test   eax,eax
c00105a2:	0f 94 c0             	sete   al
c00105a5:	84 c0                	test   al,al
c00105a7:	74 07                	je     c00105b0 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00105a9:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c00105ae:	eb 50                	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105b0:	83 ec 08             	sub    esp,0x8
c00105b3:	68 17 ef 01 c0       	push   0xc001ef17
c00105b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bc:	e8 1f 01 ff ff       	call   c00006e0 <strcmp>
c00105c1:	83 c4 10             	add    esp,0x10
c00105c4:	85 c0                	test   eax,eax
c00105c6:	0f 94 c0             	sete   al
c00105c9:	84 c0                	test   al,al
c00105cb:	74 07                	je     c00105d4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00105cd:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c00105d2:	eb 2c                	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105d4:	83 ec 08             	sub    esp,0x8
c00105d7:	68 24 ef 01 c0       	push   0xc001ef24
c00105dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e0:	e8 fb 00 ff ff       	call   c00006e0 <strcmp>
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	85 c0                	test   eax,eax
c00105ea:	0f 94 c0             	sete   al
c00105ed:	84 c0                	test   al,al
c00105ef:	74 07                	je     c00105f8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00105f1:	b8 bd 2e 02 c0       	mov    eax,0xc0022ebd
c00105f6:	eb 08                	jmp    c0010600 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105f8:	b8 00 00 00 00       	mov    eax,0x0
c00105fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010600:	83 c4 0c             	add    esp,0xc
c0010603:	c3                   	ret    

c0010604 <KiSigKill(int)>:
c0010604:	57                   	push   edi
c0010605:	b9 0a 00 00 00       	mov    ecx,0xa
c001060a:	56                   	push   esi
c001060b:	be 6d ef 01 c0       	mov    esi,0xc001ef6d
c0010610:	83 ec 14             	sub    esp,0x14
c0010613:	8d 7c 24 06          	lea    edi,[esp+0x6]
c0010617:	fc                   	cld    
c0010618:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001061a:	8d 44 24 06          	lea    eax,[esp+0x6]
c001061e:	50                   	push   eax
c001061f:	6a 00                	push   0x0
c0010621:	6a 00                	push   0x0
c0010623:	6a 27                	push   0x27
c0010625:	e8 28 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001062a:	83 c4 24             	add    esp,0x24
c001062d:	5e                   	pop    esi
c001062e:	5f                   	pop    edi
c001062f:	c3                   	ret    

c0010630 <KiDefaultSignalHandlerIgnore(int)>:
c0010630:	c3                   	ret    

c0010631 <KiDefaultSignalHandlerPause(int)>:
c0010631:	57                   	push   edi
c0010632:	b9 07 00 00 00       	mov    ecx,0x7
c0010637:	56                   	push   esi
c0010638:	be 77 ef 01 c0       	mov    esi,0xc001ef77
c001063d:	83 ec 24             	sub    esp,0x24
c0010640:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010644:	fc                   	cld    
c0010645:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010647:	8d 44 24 04          	lea    eax,[esp+0x4]
c001064b:	50                   	push   eax
c001064c:	6a 00                	push   0x0
c001064e:	6a 00                	push   0x0
c0010650:	6a 27                	push   0x27
c0010652:	e8 fb 09 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010657:	83 c4 34             	add    esp,0x34
c001065a:	5e                   	pop    esi
c001065b:	5f                   	pop    edi
c001065c:	c3                   	ret    

c001065d <KiDefaultSignalHandlerResume(int)>:
c001065d:	57                   	push   edi
c001065e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010663:	56                   	push   esi
c0010664:	be 93 ef 01 c0       	mov    esi,0xc001ef93
c0010669:	83 ec 24             	sub    esp,0x24
c001066c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010670:	fc                   	cld    
c0010671:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010673:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010677:	50                   	push   eax
c0010678:	6a 00                	push   0x0
c001067a:	6a 00                	push   0x0
c001067c:	6a 27                	push   0x27
c001067e:	e8 cf 09 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010683:	83 c4 34             	add    esp,0x34
c0010686:	5e                   	pop    esi
c0010687:	5f                   	pop    edi
c0010688:	c3                   	ret    

c0010689 <KeDeinitSignals(SigHandlerBlock*)>:
c0010689:	e9 f7 71 ff ff       	jmp    c0007885 <free>

c001068e <KeInitSignals()>:
c001068e:	53                   	push   ebx
c001068f:	83 ec 14             	sub    esp,0x14
c0010692:	68 c8 00 00 00       	push   0xc8
c0010697:	e8 d9 71 ff ff       	call   c0007875 <malloc>
c001069c:	83 c4 0c             	add    esp,0xc
c001069f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00106a9:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00106b3:	89 c3                	mov    ebx,eax
c00106b5:	6a 20                	push   0x20
c00106b7:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00106bd:	6a 00                	push   0x0
c00106bf:	50                   	push   eax
c00106c0:	e8 0b fe fe ff       	call   c00004d0 <memset>
c00106c5:	83 c4 0c             	add    esp,0xc
c00106c8:	6a 44                	push   0x44
c00106ca:	6a 00                	push   0x0
c00106cc:	53                   	push   ebx
c00106cd:	e8 fe fd fe ff       	call   c00004d0 <memset>
c00106d2:	89 d8                	mov    eax,ebx
c00106d4:	83 c4 18             	add    esp,0x18
c00106d7:	5b                   	pop    ebx
c00106d8:	c3                   	ret    

c00106d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00106d9:	53                   	push   ebx
c00106da:	b8 01 00 00 00       	mov    eax,0x1
c00106df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e7:	83 f9 10             	cmp    ecx,0x10
c00106ea:	7f 21                	jg     c001070d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00106ec:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00106ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f3:	89 03                	mov    DWORD PTR [ebx],eax
c00106f5:	b8 01 00 00 00       	mov    eax,0x1
c00106fa:	d3 e0                	shl    eax,cl
c00106fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010700:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010703:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001070b:	31 c0                	xor    eax,eax
c001070d:	5b                   	pop    ebx
c001070e:	c3                   	ret    

c001070f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001070f:	55                   	push   ebp
c0010710:	57                   	push   edi
c0010711:	bf 08 00 00 00       	mov    edi,0x8
c0010716:	56                   	push   esi
c0010717:	53                   	push   ebx
c0010718:	83 ec 18             	sub    esp,0x18
c001071b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001071f:	68 b0 ef 01 c0       	push   0xc001efb0
c0010724:	e8 e5 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010729:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010730:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010736:	83 c4 10             	add    esp,0x10
c0010739:	31 c9                	xor    ecx,ecx
c001073b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001073f:	99                   	cdq    
c0010740:	f7 ff                	idiv   edi
c0010742:	8d 42 24             	lea    eax,[edx+0x24]
c0010745:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010749:	85 f6                	test   esi,esi
c001074b:	75 1a                	jne    c0010767 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001074d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010751:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010755:	50                   	push   eax
c0010756:	50                   	push   eax
c0010757:	52                   	push   edx
c0010758:	68 c1 ef 01 c0       	push   0xc001efc1
c001075d:	e8 ac 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	eb 1b                	jmp    c0010782 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010767:	41                   	inc    ecx
c0010768:	83 f9 08             	cmp    ecx,0x8
c001076b:	75 ce                	jne    c001073b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001076d:	83 ec 0c             	sub    esp,0xc
c0010770:	be 01 00 00 00       	mov    esi,0x1
c0010775:	68 e2 ef 01 c0       	push   0xc001efe2
c001077a:	e8 8f 9e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001077f:	83 c4 10             	add    esp,0x10
c0010782:	83 c4 0c             	add    esp,0xc
c0010785:	89 f0                	mov    eax,esi
c0010787:	5b                   	pop    ebx
c0010788:	5e                   	pop    esi
c0010789:	5f                   	pop    edi
c001078a:	5d                   	pop    ebp
c001078b:	c3                   	ret    

c001078c <KeCheckSignal(SigHandlerBlock*)>:
c001078c:	55                   	push   ebp
c001078d:	57                   	push   edi
c001078e:	56                   	push   esi
c001078f:	53                   	push   ebx
c0010790:	51                   	push   ecx
c0010791:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010795:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001079c:	75 07                	jne    c00107a5 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001079e:	31 c0                	xor    eax,eax
c00107a0:	e9 cc 00 00 00       	jmp    c0010871 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107a5:	31 c9                	xor    ecx,ecx
c00107a7:	bf 08 00 00 00       	mov    edi,0x8
c00107ac:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00107b2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00107b5:	99                   	cdq    
c00107b6:	f7 ff                	idiv   edi
c00107b8:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c00107bf:	85 d2                	test   edx,edx
c00107c1:	0f 84 94 00 00 00    	je     c001085b <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00107c7:	88 d1                	mov    cl,dl
c00107c9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00107cf:	bf 01 00 00 00       	mov    edi,0x1
c00107d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00107d7:	d3 e7                	shl    edi,cl
c00107d9:	bd 01 00 00 00       	mov    ebp,0x1
c00107de:	31 c9                	xor    ecx,ecx
c00107e0:	89 e8                	mov    eax,ebp
c00107e2:	d3 e0                	shl    eax,cl
c00107e4:	85 04 24             	test   DWORD PTR [esp],eax
c00107e7:	74 06                	je     c00107ef <KeCheckSignal(SigHandlerBlock*)+0x63>
c00107e9:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00107ed:	75 af                	jne    c001079e <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107ef:	41                   	inc    ecx
c00107f0:	83 f9 11             	cmp    ecx,0x11
c00107f3:	75 eb                	jne    c00107e0 <KeCheckSignal(SigHandlerBlock*)+0x54>
c00107f5:	8d 4e 01             	lea    ecx,[esi+0x1]
c00107f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107fb:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010801:	09 f8                	or     eax,edi
c0010803:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001080e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010814:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001081b:	31 c0                	xor    eax,eax
c001081d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010825:	74 09                	je     c0010830 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010827:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001082e:	eb 06                	jmp    c0010836 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010830:	40                   	inc    eax
c0010831:	83 f8 08             	cmp    eax,0x8
c0010834:	75 e7                	jne    c001081d <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010836:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010839:	83 fa 09             	cmp    edx,0x9
c001083c:	75 07                	jne    c0010845 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001083e:	b8 04 06 01 c0       	mov    eax,0xc0010604
c0010843:	eb 2c                	jmp    c0010871 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010845:	83 f8 01             	cmp    eax,0x1
c0010848:	0f 84 50 ff ff ff    	je     c001079e <KeCheckSignal(SigHandlerBlock*)+0x12>
c001084e:	85 c0                	test   eax,eax
c0010850:	75 1f                	jne    c0010871 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010852:	8b 04 95 c0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe40]
c0010859:	eb 16                	jmp    c0010871 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001085b:	46                   	inc    esi
c001085c:	41                   	inc    ecx
c001085d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010863:	83 f9 08             	cmp    ecx,0x8
c0010866:	0f 85 40 ff ff ff    	jne    c00107ac <KeCheckSignal(SigHandlerBlock*)+0x20>
c001086c:	e9 2d ff ff ff       	jmp    c001079e <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010871:	5a                   	pop    edx
c0010872:	5b                   	pop    ebx
c0010873:	5e                   	pop    esi
c0010874:	5f                   	pop    edi
c0010875:	5d                   	pop    ebp
c0010876:	c3                   	ret    

c0010877 <KiCheckSignalZ>:
c0010877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001087c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001087f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010885:	e8 02 ff ff ff       	call   c001078c <KeCheckSignal(SigHandlerBlock*)>
c001088a:	5a                   	pop    edx
c001088b:	c3                   	ret    

c001088c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001088c:	56                   	push   esi
c001088d:	53                   	push   ebx
c001088e:	bb 01 00 00 00       	mov    ebx,0x1
c0010893:	52                   	push   edx
c0010894:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001089c:	d3 e3                	shl    ebx,cl
c001089e:	83 f9 10             	cmp    ecx,0x10
c00108a1:	7f 08                	jg     c00108ab <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00108a3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00108a9:	75 10                	jne    c00108bb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	68 f3 ef 01 c0       	push   0xc001eff3
c00108b3:	e8 6b fa ff ff       	call   c0010323 <KePanic(char const*)>
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	f7 d3                	not    ebx
c00108bd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00108c3:	58                   	pop    eax
c00108c4:	5b                   	pop    ebx
c00108c5:	5e                   	pop    esi
c00108c6:	c3                   	ret    

c00108c7 <SysSeekDir(regs*)>:
c00108c7:	31 c0                	xor    eax,eax
c00108c9:	31 d2                	xor    edx,edx
c00108cb:	c3                   	ret    

c00108cc <SysTellDir(regs*)>:
c00108cc:	31 c0                	xor    eax,eax
c00108ce:	31 d2                	xor    edx,edx
c00108d0:	c3                   	ret    

c00108d1 <SysVerify(regs*)>:
c00108d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d5:	31 d2                	xor    edx,edx
c00108d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108da:	c3                   	ret    

c00108db <SysGetArgc(regs*)>:
c00108db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108e3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00108e9:	99                   	cdq    
c00108ea:	c3                   	ret    

c00108eb <SysTTYName(regs*)>:
c00108eb:	b8 01 00 00 00       	mov    eax,0x1
c00108f0:	31 d2                	xor    edx,edx
c00108f2:	c3                   	ret    

c00108f3 <SysFormatDisk(regs*)>:
c00108f3:	56                   	push   esi
c00108f4:	53                   	push   ebx
c00108f5:	50                   	push   eax
c00108f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108fa:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c0010900:	eb 28                	jmp    c001092a <SysFormatDisk(regs*)+0x37>
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010908:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001090b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001090d:	51                   	push   ecx
c001090e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010911:	51                   	push   ecx
c0010912:	50                   	push   eax
c0010913:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c001091a:	50                   	push   eax
c001091b:	53                   	push   ebx
c001091c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001091f:	83 c4 20             	add    esp,0x20
c0010922:	83 f8 08             	cmp    eax,0x8
c0010925:	75 12                	jne    c0010939 <SysFormatDisk(regs*)+0x46>
c0010927:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001092a:	85 db                	test   ebx,ebx
c001092c:	75 d4                	jne    c0010902 <SysFormatDisk(regs*)+0xf>
c001092e:	59                   	pop    ecx
c001092f:	b8 03 00 00 00       	mov    eax,0x3
c0010934:	31 d2                	xor    edx,edx
c0010936:	5b                   	pop    ebx
c0010937:	5e                   	pop    esi
c0010938:	c3                   	ret    
c0010939:	85 c0                	test   eax,eax
c001093b:	74 1b                	je     c0010958 <SysFormatDisk(regs*)+0x65>
c001093d:	83 f8 09             	cmp    eax,0x9
c0010940:	74 0b                	je     c001094d <SysFormatDisk(regs*)+0x5a>
c0010942:	59                   	pop    ecx
c0010943:	b8 02 00 00 00       	mov    eax,0x2
c0010948:	31 d2                	xor    edx,edx
c001094a:	5b                   	pop    ebx
c001094b:	5e                   	pop    esi
c001094c:	c3                   	ret    
c001094d:	59                   	pop    ecx
c001094e:	b8 01 00 00 00       	mov    eax,0x1
c0010953:	31 d2                	xor    edx,edx
c0010955:	5b                   	pop    ebx
c0010956:	5e                   	pop    esi
c0010957:	c3                   	ret    
c0010958:	59                   	pop    ecx
c0010959:	31 c0                	xor    eax,eax
c001095b:	31 d2                	xor    edx,edx
c001095d:	5b                   	pop    ebx
c001095e:	5e                   	pop    esi
c001095f:	c3                   	ret    

c0010960 <SysSetDiskVolumeLabel(regs*)>:
c0010960:	56                   	push   esi
c0010961:	53                   	push   ebx
c0010962:	53                   	push   ebx
c0010963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010967:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001096a:	83 f8 19             	cmp    eax,0x19
c001096d:	77 2d                	ja     c001099c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001096f:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0010976:	85 c9                	test   ecx,ecx
c0010978:	74 22                	je     c001099c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001097a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001097d:	85 db                	test   ebx,ebx
c001097f:	74 1b                	je     c001099c <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010981:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010987:	85 d2                	test   edx,edx
c0010989:	74 11                	je     c001099c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001098b:	8b 32                	mov    esi,DWORD PTR [edx]
c001098d:	53                   	push   ebx
c001098e:	50                   	push   eax
c001098f:	51                   	push   ecx
c0010990:	52                   	push   edx
c0010991:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010994:	83 c4 10             	add    esp,0x10
c0010997:	99                   	cdq    
c0010998:	59                   	pop    ecx
c0010999:	5b                   	pop    ebx
c001099a:	5e                   	pop    esi
c001099b:	c3                   	ret    
c001099c:	59                   	pop    ecx
c001099d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109a7:	5b                   	pop    ebx
c00109a8:	5e                   	pop    esi
c00109a9:	c3                   	ret    

c00109aa <SysGetDiskVolumeLabel(regs*)>:
c00109aa:	57                   	push   edi
c00109ab:	56                   	push   esi
c00109ac:	53                   	push   ebx
c00109ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00109b4:	83 fa 19             	cmp    edx,0x19
c00109b7:	77 38                	ja     c00109f1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109b9:	8b 0c 95 20 54 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdabe0]
c00109c0:	85 c9                	test   ecx,ecx
c00109c2:	74 2d                	je     c00109f1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109c4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00109c7:	85 db                	test   ebx,ebx
c00109c9:	74 26                	je     c00109f1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109cb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00109ce:	85 f6                	test   esi,esi
c00109d0:	74 1f                	je     c00109f1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109d2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00109d8:	85 c0                	test   eax,eax
c00109da:	74 15                	je     c00109f1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	8b 38                	mov    edi,DWORD PTR [eax]
c00109e1:	56                   	push   esi
c00109e2:	53                   	push   ebx
c00109e3:	52                   	push   edx
c00109e4:	51                   	push   ecx
c00109e5:	50                   	push   eax
c00109e6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00109e9:	83 c4 20             	add    esp,0x20
c00109ec:	99                   	cdq    
c00109ed:	5b                   	pop    ebx
c00109ee:	5e                   	pop    esi
c00109ef:	5f                   	pop    edi
c00109f0:	c3                   	ret    
c00109f1:	5b                   	pop    ebx
c00109f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109fc:	5e                   	pop    esi
c00109fd:	5f                   	pop    edi
c00109fe:	c3                   	ret    

c00109ff <SysShutdown(regs*)>:
c00109ff:	83 ec 0c             	sub    esp,0xc
c0010a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a09:	85 c0                	test   eax,eax
c0010a0b:	74 18                	je     c0010a25 <SysShutdown(regs*)+0x26>
c0010a0d:	83 f8 01             	cmp    eax,0x1
c0010a10:	74 38                	je     c0010a4a <SysShutdown(regs*)+0x4b>
c0010a12:	83 f8 02             	cmp    eax,0x2
c0010a15:	74 24                	je     c0010a3b <SysShutdown(regs*)+0x3c>
c0010a17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a21:	83 c4 0c             	add    esp,0xc
c0010a24:	c3                   	ret    
c0010a25:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010a2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a2c:	6a 00                	push   0x0
c0010a2e:	6a 00                	push   0x0
c0010a30:	6a 00                	push   0x0
c0010a32:	50                   	push   eax
c0010a33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	eb dc                	jmp    c0010a17 <SysShutdown(regs*)+0x18>
c0010a3b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010a40:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a42:	6a 00                	push   0x0
c0010a44:	6a 00                	push   0x0
c0010a46:	6a 01                	push   0x1
c0010a48:	eb e8                	jmp    c0010a32 <SysShutdown(regs*)+0x33>
c0010a4a:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c0010a4f:	85 c0                	test   eax,eax
c0010a51:	74 02                	je     c0010a55 <SysShutdown(regs*)+0x56>
c0010a53:	ff d0                	call   eax
c0010a55:	31 c0                	xor    eax,eax
c0010a57:	31 d2                	xor    edx,edx
c0010a59:	83 c4 0c             	add    esp,0xc
c0010a5c:	c3                   	ret    

c0010a5d <SysRealpath(regs*)>:
c0010a5d:	83 ec 0c             	sub    esp,0xc
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a67:	85 d2                	test   edx,edx
c0010a69:	74 07                	je     c0010a72 <SysRealpath(regs*)+0x15>
c0010a6b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a6e:	85 c0                	test   eax,eax
c0010a70:	75 0b                	jne    c0010a7d <SysRealpath(regs*)+0x20>
c0010a72:	b8 01 00 00 00       	mov    eax,0x1
c0010a77:	31 d2                	xor    edx,edx
c0010a79:	83 c4 0c             	add    esp,0xc
c0010a7c:	c3                   	ret    
c0010a7d:	51                   	push   ecx
c0010a7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a84:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a87:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a8d:	51                   	push   ecx
c0010a8e:	52                   	push   edx
c0010a8f:	50                   	push   eax
c0010a90:	e8 45 9f ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	31 c0                	xor    eax,eax
c0010a9a:	31 d2                	xor    edx,edx
c0010a9c:	83 c4 0c             	add    esp,0xc
c0010a9f:	c3                   	ret    

c0010aa0 <SysReadDir(regs*)>:
c0010aa0:	53                   	push   ebx
c0010aa1:	83 ec 18             	sub    esp,0x18
c0010aa4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010aa8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010aab:	83 f8 02             	cmp    eax,0x2
c0010aae:	76 61                	jbe    c0010b11 <SysReadDir(regs*)+0x71>
c0010ab0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010ab7:	77 49                	ja     c0010b02 <SysReadDir(regs*)+0x62>
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	50                   	push   eax
c0010abd:	e8 39 87 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	85 c0                	test   eax,eax
c0010ac7:	74 39                	je     c0010b02 <SysReadDir(regs*)+0x62>
c0010ac9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ad1:	83 ec 0c             	sub    esp,0xc
c0010ad4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ad6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010ada:	51                   	push   ecx
c0010adb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ade:	51                   	push   ecx
c0010adf:	6a 00                	push   0x0
c0010ae1:	68 10 01 00 00       	push   0x110
c0010ae6:	50                   	push   eax
c0010ae7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010aea:	83 c4 20             	add    esp,0x20
c0010aed:	85 c0                	test   eax,eax
c0010aef:	74 29                	je     c0010b1a <SysReadDir(regs*)+0x7a>
c0010af1:	83 f8 07             	cmp    eax,0x7
c0010af4:	74 1b                	je     c0010b11 <SysReadDir(regs*)+0x71>
c0010af6:	b8 02 00 00 00       	mov    eax,0x2
c0010afb:	31 d2                	xor    edx,edx
c0010afd:	83 c4 18             	add    esp,0x18
c0010b00:	5b                   	pop    ebx
c0010b01:	c3                   	ret    
c0010b02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b0c:	83 c4 18             	add    esp,0x18
c0010b0f:	5b                   	pop    ebx
c0010b10:	c3                   	ret    
c0010b11:	b8 01 00 00 00       	mov    eax,0x1
c0010b16:	31 d2                	xor    edx,edx
c0010b18:	eb e3                	jmp    c0010afd <SysReadDir(regs*)+0x5d>
c0010b1a:	31 c0                	xor    eax,eax
c0010b1c:	31 d2                	xor    edx,edx
c0010b1e:	eb dd                	jmp    c0010afd <SysReadDir(regs*)+0x5d>

c0010b20 <SysIsATTY(regs*)>:
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010b2a:	83 f8 02             	cmp    eax,0x2
c0010b2d:	76 07                	jbe    c0010b36 <SysIsATTY(regs*)+0x16>
c0010b2f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010b34:	75 28                	jne    c0010b5e <SysIsATTY(regs*)+0x3e>
c0010b36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010b44:	85 c0                	test   eax,eax
c0010b46:	74 26                	je     c0010b6e <SysIsATTY(regs*)+0x4e>
c0010b48:	83 ec 0c             	sub    esp,0xc
c0010b4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b4d:	50                   	push   eax
c0010b4e:	ff 12                	call   DWORD PTR [edx]
c0010b50:	31 d2                	xor    edx,edx
c0010b52:	25 ff 00 00 00       	and    eax,0xff
c0010b57:	83 c4 10             	add    esp,0x10
c0010b5a:	83 c4 0c             	add    esp,0xc
c0010b5d:	c3                   	ret    
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	50                   	push   eax
c0010b62:	e8 94 86 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	85 c0                	test   eax,eax
c0010b6c:	75 da                	jne    c0010b48 <SysIsATTY(regs*)+0x28>
c0010b6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b78:	83 c4 0c             	add    esp,0xc
c0010b7b:	c3                   	ret    

c0010b7c <SysSeek(regs*)>:
c0010b7c:	53                   	push   ebx
c0010b7d:	83 ec 08             	sub    esp,0x8
c0010b80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b84:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b87:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b8a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b90:	77 34                	ja     c0010bc6 <SysSeek(regs*)+0x4a>
c0010b92:	83 ec 0c             	sub    esp,0xc
c0010b95:	50                   	push   eax
c0010b96:	e8 60 86 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010b9b:	83 c4 0c             	add    esp,0xc
c0010b9e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010ba1:	31 db                	xor    ebx,ebx
c0010ba3:	53                   	push   ebx
c0010ba4:	51                   	push   ecx
c0010ba5:	50                   	push   eax
c0010ba6:	e8 57 a1 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	85 c0                	test   eax,eax
c0010bb0:	0f 95 c0             	setne  al
c0010bb3:	31 d2                	xor    edx,edx
c0010bb5:	25 ff 00 00 00       	and    eax,0xff
c0010bba:	f7 d8                	neg    eax
c0010bbc:	83 d2 00             	adc    edx,0x0
c0010bbf:	83 c4 08             	add    esp,0x8
c0010bc2:	f7 da                	neg    edx
c0010bc4:	5b                   	pop    ebx
c0010bc5:	c3                   	ret    
c0010bc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bd0:	83 c4 08             	add    esp,0x8
c0010bd3:	5b                   	pop    ebx
c0010bd4:	c3                   	ret    

c0010bd5 <SysTell(regs*)>:
c0010bd5:	53                   	push   ebx
c0010bd6:	83 ec 08             	sub    esp,0x8
c0010bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bdd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010be0:	83 f8 02             	cmp    eax,0x2
c0010be3:	76 50                	jbe    c0010c35 <SysTell(regs*)+0x60>
c0010be5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bea:	76 19                	jbe    c0010c05 <SysTell(regs*)+0x30>
c0010bec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bfe:	31 c0                	xor    eax,eax
c0010c00:	83 c4 08             	add    esp,0x8
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    
c0010c05:	83 ec 0c             	sub    esp,0xc
c0010c08:	50                   	push   eax
c0010c09:	e8 ed 85 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010c0e:	5a                   	pop    edx
c0010c0f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c12:	59                   	pop    ecx
c0010c13:	53                   	push   ebx
c0010c14:	50                   	push   eax
c0010c15:	e8 3e a1 ff ff       	call   c000ad58 <File::tell(unsigned long long*)>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	85 c0                	test   eax,eax
c0010c1f:	0f 95 c0             	setne  al
c0010c22:	31 d2                	xor    edx,edx
c0010c24:	25 ff 00 00 00       	and    eax,0xff
c0010c29:	f7 d8                	neg    eax
c0010c2b:	83 d2 00             	adc    edx,0x0
c0010c2e:	83 c4 08             	add    esp,0x8
c0010c31:	f7 da                	neg    edx
c0010c33:	5b                   	pop    ebx
c0010c34:	c3                   	ret    
c0010c35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c3f:	83 c4 08             	add    esp,0x8
c0010c42:	5b                   	pop    ebx
c0010c43:	c3                   	ret    

c0010c44 <SysSize(regs*)>:
c0010c44:	53                   	push   ebx
c0010c45:	83 ec 18             	sub    esp,0x18
c0010c48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c4c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c4f:	83 f8 02             	cmp    eax,0x2
c0010c52:	76 56                	jbe    c0010caa <SysSize(regs*)+0x66>
c0010c54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c59:	76 19                	jbe    c0010c74 <SysSize(regs*)+0x30>
c0010c5b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c5e:	31 d2                	xor    edx,edx
c0010c60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c6d:	31 c0                	xor    eax,eax
c0010c6f:	83 c4 18             	add    esp,0x18
c0010c72:	5b                   	pop    ebx
c0010c73:	c3                   	ret    
c0010c74:	83 ec 0c             	sub    esp,0xc
c0010c77:	50                   	push   eax
c0010c78:	e8 7e 85 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010c7d:	83 c4 0c             	add    esp,0xc
c0010c80:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c84:	52                   	push   edx
c0010c85:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c88:	52                   	push   edx
c0010c89:	50                   	push   eax
c0010c8a:	e8 61 a2 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	85 c0                	test   eax,eax
c0010c94:	0f 95 c0             	setne  al
c0010c97:	31 d2                	xor    edx,edx
c0010c99:	25 ff 00 00 00       	and    eax,0xff
c0010c9e:	f7 d8                	neg    eax
c0010ca0:	83 d2 00             	adc    edx,0x0
c0010ca3:	83 c4 18             	add    esp,0x18
c0010ca6:	f7 da                	neg    edx
c0010ca8:	5b                   	pop    ebx
c0010ca9:	c3                   	ret    
c0010caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010caf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cb4:	83 c4 18             	add    esp,0x18
c0010cb7:	5b                   	pop    ebx
c0010cb8:	c3                   	ret    

c0010cb9 <SysSizeFromFilename(regs*)>:
c0010cb9:	57                   	push   edi
c0010cba:	56                   	push   esi
c0010cbb:	53                   	push   ebx
c0010cbc:	83 ec 20             	sub    esp,0x20
c0010cbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cc3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010cc6:	83 fb 02             	cmp    ebx,0x2
c0010cc9:	0f 86 8c 00 00 00    	jbe    c0010d5b <SysSizeFromFilename(regs*)+0xa2>
c0010ccf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010cd5:	76 1b                	jbe    c0010cf2 <SysSizeFromFilename(regs*)+0x39>
c0010cd7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010cda:	31 d2                	xor    edx,edx
c0010cdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ce2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ce9:	83 c4 20             	add    esp,0x20
c0010cec:	31 c0                	xor    eax,eax
c0010cee:	5b                   	pop    ebx
c0010cef:	5e                   	pop    esi
c0010cf0:	5f                   	pop    edi
c0010cf1:	c3                   	ret    
c0010cf2:	83 ec 0c             	sub    esp,0xc
c0010cf5:	68 14 01 00 00       	push   0x114
c0010cfa:	e8 76 6b ff ff       	call   c0007875 <malloc>
c0010cff:	83 c4 0c             	add    esp,0xc
c0010d02:	89 c7                	mov    edi,eax
c0010d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d0c:	50                   	push   eax
c0010d0d:	53                   	push   ebx
c0010d0e:	57                   	push   edi
c0010d0f:	e8 70 9e ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010d14:	83 c4 0c             	add    esp,0xc
c0010d17:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010d1b:	50                   	push   eax
c0010d1c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010d1f:	52                   	push   edx
c0010d20:	57                   	push   edi
c0010d21:	e8 ca a1 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	85 ff                	test   edi,edi
c0010d2b:	74 14                	je     c0010d41 <SysSizeFromFilename(regs*)+0x88>
c0010d2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d31:	8b 17                	mov    edx,DWORD PTR [edi]
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	57                   	push   edi
c0010d37:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d41:	85 c0                	test   eax,eax
c0010d43:	0f 95 c0             	setne  al
c0010d46:	31 d2                	xor    edx,edx
c0010d48:	25 ff 00 00 00       	and    eax,0xff
c0010d4d:	f7 d8                	neg    eax
c0010d4f:	83 d2 00             	adc    edx,0x0
c0010d52:	83 c4 20             	add    esp,0x20
c0010d55:	f7 da                	neg    edx
c0010d57:	5b                   	pop    ebx
c0010d58:	5e                   	pop    esi
c0010d59:	5f                   	pop    edi
c0010d5a:	c3                   	ret    
c0010d5b:	83 c4 20             	add    esp,0x20
c0010d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d63:	5b                   	pop    ebx
c0010d64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d69:	5e                   	pop    esi
c0010d6a:	5f                   	pop    edi
c0010d6b:	c3                   	ret    

c0010d6c <SysClose(regs*)>:
c0010d6c:	53                   	push   ebx
c0010d6d:	83 ec 08             	sub    esp,0x8
c0010d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d74:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d77:	83 f8 02             	cmp    eax,0x2
c0010d7a:	76 41                	jbe    c0010dbd <SysClose(regs*)+0x51>
c0010d7c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d82:	83 fa 01             	cmp    edx,0x1
c0010d85:	76 2d                	jbe    c0010db4 <SysClose(regs*)+0x48>
c0010d87:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d8c:	77 2f                	ja     c0010dbd <SysClose(regs*)+0x51>
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	50                   	push   eax
c0010d92:	e8 64 84 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010d97:	89 c3                	mov    ebx,eax
c0010d99:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d9c:	e8 01 9f ff ff       	call   c000aca2 <File::close()>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	85 db                	test   ebx,ebx
c0010da6:	74 0c                	je     c0010db4 <SysClose(regs*)+0x48>
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dad:	53                   	push   ebx
c0010dae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	31 c0                	xor    eax,eax
c0010db6:	31 d2                	xor    edx,edx
c0010db8:	83 c4 08             	add    esp,0x8
c0010dbb:	5b                   	pop    ebx
c0010dbc:	c3                   	ret    
c0010dbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dc2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dc7:	83 c4 08             	add    esp,0x8
c0010dca:	5b                   	pop    ebx
c0010dcb:	c3                   	ret    

c0010dcc <SysOpenDir(regs*)>:
c0010dcc:	56                   	push   esi
c0010dcd:	53                   	push   ebx
c0010dce:	50                   	push   eax
c0010dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 5b                	je     c0010e35 <SysOpenDir(regs*)+0x69>
c0010dda:	83 ec 0c             	sub    esp,0xc
c0010ddd:	68 14 01 00 00       	push   0x114
c0010de2:	e8 8e 6a ff ff       	call   c0007875 <malloc>
c0010de7:	83 c4 0c             	add    esp,0xc
c0010dea:	89 c6                	mov    esi,eax
c0010dec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010df4:	50                   	push   eax
c0010df5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010df8:	50                   	push   eax
c0010df9:	56                   	push   esi
c0010dfa:	e8 af a2 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	85 f6                	test   esi,esi
c0010e04:	74 2f                	je     c0010e35 <SysOpenDir(regs*)+0x69>
c0010e06:	83 ec 0c             	sub    esp,0xc
c0010e09:	56                   	push   esi
c0010e0a:	e8 5f a3 ff ff       	call   c000b16e <Directory::open()>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	85 c0                	test   eax,eax
c0010e14:	75 1f                	jne    c0010e35 <SysOpenDir(regs*)+0x69>
c0010e16:	83 ec 0c             	sub    esp,0xc
c0010e19:	56                   	push   esi
c0010e1a:	e8 e7 80 ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0010e1f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	89 02                	mov    DWORD PTR [edx],eax
c0010e27:	c1 f8 1f             	sar    eax,0x1f
c0010e2a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e2d:	31 c0                	xor    eax,eax
c0010e2f:	59                   	pop    ecx
c0010e30:	31 d2                	xor    edx,edx
c0010e32:	5b                   	pop    ebx
c0010e33:	5e                   	pop    esi
c0010e34:	c3                   	ret    
c0010e35:	59                   	pop    ecx
c0010e36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e40:	5b                   	pop    ebx
c0010e41:	5e                   	pop    esi
c0010e42:	c3                   	ret    

c0010e43 <SysMakeDir(regs*)>:
c0010e43:	56                   	push   esi
c0010e44:	53                   	push   ebx
c0010e45:	83 ec 10             	sub    esp,0x10
c0010e48:	68 14 01 00 00       	push   0x114
c0010e4d:	e8 23 6a ff ff       	call   c0007875 <malloc>
c0010e52:	83 c4 0c             	add    esp,0xc
c0010e55:	89 c3                	mov    ebx,eax
c0010e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e5c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e5f:	56                   	push   esi
c0010e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e64:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e67:	50                   	push   eax
c0010e68:	53                   	push   ebx
c0010e69:	e8 40 a2 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	85 db                	test   ebx,ebx
c0010e73:	74 2a                	je     c0010e9f <SysMakeDir(regs*)+0x5c>
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	53                   	push   ebx
c0010e79:	e8 d0 a4 ff ff       	call   c000b34e <Directory::create()>
c0010e7e:	89 c6                	mov    esi,eax
c0010e80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	31 c0                	xor    eax,eax
c0010e8d:	59                   	pop    ecx
c0010e8e:	85 f6                	test   esi,esi
c0010e90:	5b                   	pop    ebx
c0010e91:	0f 95 c0             	setne  al
c0010e94:	5e                   	pop    esi
c0010e95:	31 d2                	xor    edx,edx
c0010e97:	f7 d8                	neg    eax
c0010e99:	83 d2 00             	adc    edx,0x0
c0010e9c:	f7 da                	neg    edx
c0010e9e:	c3                   	ret    
c0010e9f:	59                   	pop    ecx
c0010ea0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ea5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eaa:	5b                   	pop    ebx
c0010eab:	5e                   	pop    esi
c0010eac:	c3                   	ret    

c0010ead <SysCloseDir(regs*)>:
c0010ead:	53                   	push   ebx
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010eb8:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ebb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ec1:	77 2f                	ja     c0010ef2 <SysCloseDir(regs*)+0x45>
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	50                   	push   eax
c0010ec7:	e8 2f 83 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010ecc:	89 c3                	mov    ebx,eax
c0010ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ed1:	e8 f4 a2 ff ff       	call   c000b1ca <Directory::close()>
c0010ed6:	83 c4 10             	add    esp,0x10
c0010ed9:	85 db                	test   ebx,ebx
c0010edb:	74 0c                	je     c0010ee9 <SysCloseDir(regs*)+0x3c>
c0010edd:	83 ec 0c             	sub    esp,0xc
c0010ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ee2:	53                   	push   ebx
c0010ee3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	31 c0                	xor    eax,eax
c0010eeb:	31 d2                	xor    edx,edx
c0010eed:	83 c4 08             	add    esp,0x8
c0010ef0:	5b                   	pop    ebx
c0010ef1:	c3                   	ret    
c0010ef2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ef7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010efc:	83 c4 08             	add    esp,0x8
c0010eff:	5b                   	pop    ebx
c0010f00:	c3                   	ret    

c0010f01 <SysWait(regs*)>:
c0010f01:	83 ec 10             	sub    esp,0x10
c0010f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f08:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f0b:	52                   	push   edx
c0010f0c:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f0f:	51                   	push   ecx
c0010f10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f13:	50                   	push   eax
c0010f14:	e8 53 2b 00 00       	call   c0013a6c <waitTask(int, int*, int)>
c0010f19:	83 c4 1c             	add    esp,0x1c
c0010f1c:	99                   	cdq    
c0010f1d:	c3                   	ret    

c0010f1e <SysNotImpl(regs*)>:
c0010f1e:	83 ec 18             	sub    esp,0x18
c0010f21:	68 04 f0 01 c0       	push   0xc001f004
c0010f26:	e8 f8 f3 ff ff       	call   c0010323 <KePanic(char const*)>
c0010f2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f35:	83 c4 1c             	add    esp,0x1c
c0010f38:	c3                   	ret    

c0010f39 <SysPanic(regs*)>:
c0010f39:	83 ec 18             	sub    esp,0x18
c0010f3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f40:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f43:	50                   	push   eax
c0010f44:	e8 da f3 ff ff       	call   c0010323 <KePanic(char const*)>
c0010f49:	b8 01 00 00 00       	mov    eax,0x1
c0010f4e:	31 d2                	xor    edx,edx
c0010f50:	83 c4 1c             	add    esp,0x1c
c0010f53:	c3                   	ret    

c0010f54 <SysRmdir(regs*)>:
c0010f54:	56                   	push   esi
c0010f55:	53                   	push   ebx
c0010f56:	83 ec 20             	sub    esp,0x20
c0010f59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f5d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f60:	68 14 01 00 00       	push   0x114
c0010f65:	e8 0b 69 ff ff       	call   c0007875 <malloc>
c0010f6a:	83 c4 0c             	add    esp,0xc
c0010f6d:	89 c3                	mov    ebx,eax
c0010f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f77:	50                   	push   eax
c0010f78:	56                   	push   esi
c0010f79:	53                   	push   ebx
c0010f7a:	e8 05 9c ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f82:	e8 35 9e ff ff       	call   c000adbc <File::unlink()>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	85 db                	test   ebx,ebx
c0010f8c:	74 14                	je     c0010fa2 <SysRmdir(regs*)+0x4e>
c0010f8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f92:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	53                   	push   ebx
c0010f98:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa2:	85 c0                	test   eax,eax
c0010fa4:	0f 95 c0             	setne  al
c0010fa7:	31 d2                	xor    edx,edx
c0010fa9:	25 ff 00 00 00       	and    eax,0xff
c0010fae:	f7 d8                	neg    eax
c0010fb0:	83 d2 00             	adc    edx,0x0
c0010fb3:	83 c4 14             	add    esp,0x14
c0010fb6:	f7 da                	neg    edx
c0010fb8:	5b                   	pop    ebx
c0010fb9:	5e                   	pop    esi
c0010fba:	c3                   	ret    

c0010fbb <SysUnlink(regs*)>:
c0010fbb:	56                   	push   esi
c0010fbc:	53                   	push   ebx
c0010fbd:	83 ec 20             	sub    esp,0x20
c0010fc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fc4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fc7:	68 14 01 00 00       	push   0x114
c0010fcc:	e8 a4 68 ff ff       	call   c0007875 <malloc>
c0010fd1:	83 c4 0c             	add    esp,0xc
c0010fd4:	89 c3                	mov    ebx,eax
c0010fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fde:	50                   	push   eax
c0010fdf:	56                   	push   esi
c0010fe0:	53                   	push   ebx
c0010fe1:	e8 9e 9b ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010fe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fe9:	e8 ce 9d ff ff       	call   c000adbc <File::unlink()>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	85 db                	test   ebx,ebx
c0010ff3:	74 14                	je     c0011009 <SysUnlink(regs*)+0x4e>
c0010ff5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ff9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ffb:	83 ec 0c             	sub    esp,0xc
c0010ffe:	53                   	push   ebx
c0010fff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011009:	85 c0                	test   eax,eax
c001100b:	0f 95 c0             	setne  al
c001100e:	31 d2                	xor    edx,edx
c0011010:	25 ff 00 00 00       	and    eax,0xff
c0011015:	f7 d8                	neg    eax
c0011017:	83 d2 00             	adc    edx,0x0
c001101a:	83 c4 14             	add    esp,0x14
c001101d:	f7 da                	neg    edx
c001101f:	5b                   	pop    ebx
c0011020:	5e                   	pop    esi
c0011021:	c3                   	ret    

c0011022 <SysGetArgv(regs*)>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011029:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001102c:	85 c0                	test   eax,eax
c001102e:	78 2c                	js     c001105c <SysGetArgv(regs*)+0x3a>
c0011030:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011036:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011039:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001103f:	7d 1b                	jge    c001105c <SysGetArgv(regs*)+0x3a>
c0011041:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011048:	85 c0                	test   eax,eax
c001104a:	74 18                	je     c0011064 <SysGetArgv(regs*)+0x42>
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	50                   	push   eax
c0011050:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011053:	50                   	push   eax
c0011054:	e8 a7 f5 fe ff       	call   c0000600 <strcpy>
c0011059:	83 c4 10             	add    esp,0x10
c001105c:	31 c0                	xor    eax,eax
c001105e:	31 d2                	xor    edx,edx
c0011060:	83 c4 0c             	add    esp,0xc
c0011063:	c3                   	ret    
c0011064:	b8 01 00 00 00       	mov    eax,0x1
c0011069:	31 d2                	xor    edx,edx
c001106b:	83 c4 0c             	add    esp,0xc
c001106e:	c3                   	ret    

c001106f <SysUSleep(regs*)>:
c001106f:	83 ec 1c             	sub    esp,0x1c
c0011072:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011076:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011079:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001107c:	6a 00                	push   0x0
c001107e:	6a 64                	push   0x64
c0011080:	52                   	push   edx
c0011081:	50                   	push   eax
c0011082:	e8 89 b8 00 00       	call   c001c910 <__udivdi3>
c0011087:	83 c4 14             	add    esp,0x14
c001108a:	50                   	push   eax
c001108b:	e8 b0 2a 00 00       	call   c0013b40 <milliTenthSleep(unsigned int)>
c0011090:	31 c0                	xor    eax,eax
c0011092:	31 d2                	xor    edx,edx
c0011094:	83 c4 1c             	add    esp,0x1c
c0011097:	c3                   	ret    

c0011098 <SysSpawn(regs*)>:
c0011098:	56                   	push   esi
c0011099:	53                   	push   ebx
c001109a:	50                   	push   eax
c001109b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001109f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00110a2:	85 c0                	test   eax,eax
c00110a4:	75 08                	jne    c00110ae <SysSpawn(regs*)+0x16>
c00110a6:	59                   	pop    ecx
c00110a7:	31 c0                	xor    eax,eax
c00110a9:	31 d2                	xor    edx,edx
c00110ab:	5b                   	pop    ebx
c00110ac:	5e                   	pop    esi
c00110ad:	c3                   	ret    
c00110ae:	83 ec 0c             	sub    esp,0xc
c00110b1:	68 24 07 00 00       	push   0x724
c00110b6:	e8 ba 67 ff ff       	call   c0007875 <malloc>
c00110bb:	83 c4 10             	add    esp,0x10
c00110be:	89 c6                	mov    esi,eax
c00110c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110c6:	85 c0                	test   eax,eax
c00110c8:	75 33                	jne    c00110fd <SysSpawn(regs*)+0x65>
c00110ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d2:	52                   	push   edx
c00110d3:	50                   	push   eax
c00110d4:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110d7:	53                   	push   ebx
c00110d8:	56                   	push   esi
c00110d9:	e8 0e 21 00 00       	call   c00131ec <Process::Process(char const*, Process*, char**)>
c00110de:	83 c4 10             	add    esp,0x10
c00110e1:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00110e8:	75 bc                	jne    c00110a6 <SysSpawn(regs*)+0xe>
c00110ea:	83 ec 0c             	sub    esp,0xc
c00110ed:	56                   	push   esi
c00110ee:	e8 25 26 00 00       	call   c0013718 <Process::createUserThread()>
c00110f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	99                   	cdq    
c00110f9:	59                   	pop    ecx
c00110fa:	5b                   	pop    ebx
c00110fb:	5e                   	pop    esi
c00110fc:	c3                   	ret    
c00110fd:	31 c0                	xor    eax,eax
c00110ff:	eb d1                	jmp    c00110d2 <SysSpawn(regs*)+0x3a>

c0011101 <SysGetEnv(regs*)>:
c0011101:	57                   	push   edi
c0011102:	56                   	push   esi
c0011103:	53                   	push   ebx
c0011104:	83 ec 1c             	sub    esp,0x1c
c0011107:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001110b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011110:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011113:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011116:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011119:	50                   	push   eax
c001111a:	e8 bc f0 ff ff       	call   c00101db <Krnl::getProcessTotalEnvCount(Process*)>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	39 c7                	cmp    edi,eax
c0011124:	7c 14                	jl     c001113a <SysGetEnv(regs*)+0x39>
c0011126:	85 f6                	test   esi,esi
c0011128:	75 0b                	jne    c0011135 <SysGetEnv(regs*)+0x34>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	31 c0                	xor    eax,eax
c001112f:	5b                   	pop    ebx
c0011130:	31 d2                	xor    edx,edx
c0011132:	5e                   	pop    esi
c0011133:	5f                   	pop    edi
c0011134:	c3                   	ret    
c0011135:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011138:	eb f0                	jmp    c001112a <SysGetEnv(regs*)+0x29>
c001113a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001113e:	52                   	push   edx
c001113f:	57                   	push   edi
c0011140:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011146:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011149:	51                   	push   ecx
c001114a:	50                   	push   eax
c001114b:	e8 ab f0 ff ff       	call   c00101fb <Krnl::getProcessEnvPair(Process*, int)>
c0011150:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011157:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001115b:	83 c4 0c             	add    esp,0xc
c001115e:	85 db                	test   ebx,ebx
c0011160:	75 23                	jne    c0011185 <SysGetEnv(regs*)+0x84>
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	50                   	push   eax
c0011166:	e8 d5 f3 fe ff       	call   c0000540 <strlen>
c001116b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001116e:	89 c3                	mov    ebx,eax
c0011170:	e8 cb f3 fe ff       	call   c0000540 <strlen>
c0011175:	31 d2                	xor    edx,edx
c0011177:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	83 c4 10             	add    esp,0x10
c0011181:	5b                   	pop    ebx
c0011182:	5e                   	pop    esi
c0011183:	5f                   	pop    edi
c0011184:	c3                   	ret    
c0011185:	83 ec 08             	sub    esp,0x8
c0011188:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001118b:	50                   	push   eax
c001118c:	56                   	push   esi
c001118d:	e8 6e f4 fe ff       	call   c0000600 <strcpy>
c0011192:	58                   	pop    eax
c0011193:	5a                   	pop    edx
c0011194:	68 1e f0 01 c0       	push   0xc001f01e
c0011199:	56                   	push   esi
c001119a:	e8 21 f6 fe ff       	call   c00007c0 <strcat>
c001119f:	59                   	pop    ecx
c00111a0:	5b                   	pop    ebx
c00111a1:	57                   	push   edi
c00111a2:	56                   	push   esi
c00111a3:	e8 18 f6 fe ff       	call   c00007c0 <strcat>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	e9 7a ff ff ff       	jmp    c001112a <SysGetEnv(regs*)+0x29>

c00111b0 <SysSetFatAttrib(regs*)>:
c00111b0:	57                   	push   edi
c00111b1:	56                   	push   esi
c00111b2:	53                   	push   ebx
c00111b3:	83 ec 1c             	sub    esp,0x1c
c00111b6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111ba:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111bd:	68 14 01 00 00       	push   0x114
c00111c2:	e8 ae 66 ff ff       	call   c0007875 <malloc>
c00111c7:	83 c4 0c             	add    esp,0xc
c00111ca:	89 c3                	mov    ebx,eax
c00111cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111d4:	50                   	push   eax
c00111d5:	57                   	push   edi
c00111d6:	53                   	push   ebx
c00111d7:	e8 a8 99 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00111dc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111df:	83 c4 0c             	add    esp,0xc
c00111e2:	0f b6 d4             	movzx  edx,ah
c00111e5:	25 ff 00 00 00       	and    eax,0xff
c00111ea:	52                   	push   edx
c00111eb:	50                   	push   eax
c00111ec:	53                   	push   ebx
c00111ed:	e8 64 9c ff ff       	call   c000ae56 <File::chfatattr(unsigned char, unsigned char)>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	85 db                	test   ebx,ebx
c00111f7:	74 14                	je     c001120d <SysSetFatAttrib(regs*)+0x5d>
c00111f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111fd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111ff:	83 ec 0c             	sub    esp,0xc
c0011202:	53                   	push   ebx
c0011203:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001120d:	85 c0                	test   eax,eax
c001120f:	0f 95 c0             	setne  al
c0011212:	31 d2                	xor    edx,edx
c0011214:	25 ff 00 00 00       	and    eax,0xff
c0011219:	f7 d8                	neg    eax
c001121b:	83 d2 00             	adc    edx,0x0
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	f7 da                	neg    edx
c0011223:	5b                   	pop    ebx
c0011224:	5e                   	pop    esi
c0011225:	5f                   	pop    edi
c0011226:	c3                   	ret    

c0011227 <SysPipe(regs*)>:
c0011227:	57                   	push   edi
c0011228:	56                   	push   esi
c0011229:	53                   	push   ebx
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	83 ec 0c             	sub    esp,0xc
c0011231:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011234:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011237:	6a 20                	push   0x20
c0011239:	e8 37 66 ff ff       	call   c0007875 <malloc>
c001123e:	89 c3                	mov    ebx,eax
c0011240:	58                   	pop    eax
c0011241:	5a                   	pop    edx
c0011242:	68 00 50 00 00       	push   0x5000
c0011247:	53                   	push   ebx
c0011248:	e8 2d 6f ff ff       	call   c000817a <Pipe::Pipe(int)>
c001124d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011250:	e8 b1 7c ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0011255:	89 07                	mov    DWORD PTR [edi],eax
c0011257:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001125a:	e8 a7 7c ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	89 06                	mov    DWORD PTR [esi],eax
c0011264:	31 d2                	xor    edx,edx
c0011266:	5b                   	pop    ebx
c0011267:	31 c0                	xor    eax,eax
c0011269:	5e                   	pop    esi
c001126a:	5f                   	pop    edi
c001126b:	c3                   	ret    

c001126c <SysGetUnixTime(regs*)>:
c001126c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011271:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001127b:	e9 12 a3 ff ff       	jmp    c000b592 <Clock::timeInSecondsLocal()>

c0011280 <string_ends_with(char const*, char const*)>:
c0011280:	57                   	push   edi
c0011281:	56                   	push   esi
c0011282:	53                   	push   ebx
c0011283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011287:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	53                   	push   ebx
c001128f:	e8 ac f2 fe ff       	call   c0000540 <strlen>
c0011294:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011297:	89 c6                	mov    esi,eax
c0011299:	e8 a2 f2 fe ff       	call   c0000540 <strlen>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	39 c6                	cmp    esi,eax
c00112a3:	7d 06                	jge    c00112ab <string_ends_with(char const*, char const*)+0x2b>
c00112a5:	5b                   	pop    ebx
c00112a6:	31 c0                	xor    eax,eax
c00112a8:	5e                   	pop    esi
c00112a9:	5f                   	pop    edi
c00112aa:	c3                   	ret    
c00112ab:	83 ec 08             	sub    esp,0x8
c00112ae:	29 c6                	sub    esi,eax
c00112b0:	57                   	push   edi
c00112b1:	01 f3                	add    ebx,esi
c00112b3:	53                   	push   ebx
c00112b4:	e8 27 f4 fe ff       	call   c00006e0 <strcmp>
c00112b9:	83 c4 10             	add    esp,0x10
c00112bc:	85 c0                	test   eax,eax
c00112be:	5b                   	pop    ebx
c00112bf:	0f 94 c0             	sete   al
c00112c2:	5e                   	pop    esi
c00112c3:	25 ff 00 00 00       	and    eax,0xff
c00112c8:	5f                   	pop    edi
c00112c9:	c3                   	ret    

c00112ca <SysOpen(regs*)>:
c00112ca:	56                   	push   esi
c00112cb:	53                   	push   ebx
c00112cc:	81 ec 04 01 00 00    	sub    esp,0x104
c00112d2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112d9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00112dc:	85 c9                	test   ecx,ecx
c00112de:	0f 84 b9 01 00 00    	je     c001149d <SysOpen(regs*)+0x1d3>
c00112e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e7:	85 c0                	test   eax,eax
c00112e9:	0f 84 ae 01 00 00    	je     c001149d <SysOpen(regs*)+0x1d3>
c00112ef:	52                   	push   edx
c00112f0:	68 20 f0 01 c0       	push   0xc001f020
c00112f5:	50                   	push   eax
c00112f6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112fa:	56                   	push   esi
c00112fb:	e8 da 96 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c0011300:	89 34 24             	mov    DWORD PTR [esp],esi
c0011303:	e8 38 f2 fe ff       	call   c0000540 <strlen>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	48                   	dec    eax
c001130c:	74 1d                	je     c001132b <SysOpen(regs*)+0x61>
c001130e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011311:	eb 0f                	jmp    c0011322 <SysOpen(regs*)+0x58>
c0011313:	80 fa 3a             	cmp    dl,0x3a
c0011316:	74 0f                	je     c0011327 <SysOpen(regs*)+0x5d>
c0011318:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001131c:	48                   	dec    eax
c001131d:	74 0c                	je     c001132b <SysOpen(regs*)+0x61>
c001131f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011322:	80 fa 2e             	cmp    dl,0x2e
c0011325:	75 ec                	jne    c0011313 <SysOpen(regs*)+0x49>
c0011327:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001132b:	83 ec 08             	sub    esp,0x8
c001132e:	68 24 f0 01 c0       	push   0xc001f024
c0011333:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011336:	50                   	push   eax
c0011337:	e8 44 ff ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	85 c0                	test   eax,eax
c0011341:	74 1d                	je     c0011360 <SysOpen(regs*)+0x96>
c0011343:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011346:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001134c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011353:	81 c4 04 01 00 00    	add    esp,0x104
c0011359:	31 c0                	xor    eax,eax
c001135b:	31 d2                	xor    edx,edx
c001135d:	5b                   	pop    ebx
c001135e:	5e                   	pop    esi
c001135f:	c3                   	ret    
c0011360:	83 ec 08             	sub    esp,0x8
c0011363:	68 29 f0 01 c0       	push   0xc001f029
c0011368:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001136b:	50                   	push   eax
c001136c:	e8 0f ff ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	85 c0                	test   eax,eax
c0011376:	75 cb                	jne    c0011343 <SysOpen(regs*)+0x79>
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	68 25 f0 01 c0       	push   0xc001f025
c0011380:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011383:	50                   	push   eax
c0011384:	e8 57 f3 fe ff       	call   c00006e0 <strcmp>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	85 c0                	test   eax,eax
c001138e:	74 b3                	je     c0011343 <SysOpen(regs*)+0x79>
c0011390:	83 ec 08             	sub    esp,0x8
c0011393:	68 24 f0 01 c0       	push   0xc001f024
c0011398:	56                   	push   esi
c0011399:	e8 e2 fe ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	85 c0                	test   eax,eax
c00113a3:	75 9e                	jne    c0011343 <SysOpen(regs*)+0x79>
c00113a5:	83 ec 08             	sub    esp,0x8
c00113a8:	68 2e f0 01 c0       	push   0xc001f02e
c00113ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113b0:	50                   	push   eax
c00113b1:	e8 ca fe ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	85 c0                	test   eax,eax
c00113bb:	0f 85 ef 00 00 00    	jne    c00114b0 <SysOpen(regs*)+0x1e6>
c00113c1:	83 ec 08             	sub    esp,0x8
c00113c4:	68 33 f0 01 c0       	push   0xc001f033
c00113c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113cc:	50                   	push   eax
c00113cd:	e8 ae fe ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	85 c0                	test   eax,eax
c00113d7:	0f 85 d3 00 00 00    	jne    c00114b0 <SysOpen(regs*)+0x1e6>
c00113dd:	83 ec 08             	sub    esp,0x8
c00113e0:	68 2f f0 01 c0       	push   0xc001f02f
c00113e5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113e8:	51                   	push   ecx
c00113e9:	e8 f2 f2 fe ff       	call   c00006e0 <strcmp>
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	85 c0                	test   eax,eax
c00113f3:	0f 84 b7 00 00 00    	je     c00114b0 <SysOpen(regs*)+0x1e6>
c00113f9:	83 ec 08             	sub    esp,0x8
c00113fc:	68 2e f0 01 c0       	push   0xc001f02e
c0011401:	56                   	push   esi
c0011402:	e8 79 fe ff ff       	call   c0011280 <string_ends_with(char const*, char const*)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	85 c0                	test   eax,eax
c001140c:	0f 85 9e 00 00 00    	jne    c00114b0 <SysOpen(regs*)+0x1e6>
c0011412:	83 ec 0c             	sub    esp,0xc
c0011415:	68 14 01 00 00       	push   0x114
c001141a:	e8 56 64 ff ff       	call   c0007875 <malloc>
c001141f:	83 c4 0c             	add    esp,0xc
c0011422:	89 c6                	mov    esi,eax
c0011424:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011429:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001142c:	50                   	push   eax
c001142d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011430:	52                   	push   edx
c0011431:	56                   	push   esi
c0011432:	e8 4d 97 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	85 f6                	test   esi,esi
c001143c:	74 5f                	je     c001149d <SysOpen(regs*)+0x1d3>
c001143e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011441:	89 d0                	mov    eax,edx
c0011443:	25 ff 00 00 00       	and    eax,0xff
c0011448:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001144b:	89 d0                	mov    eax,edx
c001144d:	83 e0 01             	and    eax,0x1
c0011450:	f6 c2 02             	test   dl,0x2
c0011453:	74 03                	je     c0011458 <SysOpen(regs*)+0x18e>
c0011455:	83 c8 02             	or     eax,0x2
c0011458:	f6 c2 04             	test   dl,0x4
c001145b:	74 03                	je     c0011460 <SysOpen(regs*)+0x196>
c001145d:	83 c8 04             	or     eax,0x4
c0011460:	f6 c2 08             	test   dl,0x8
c0011463:	74 03                	je     c0011468 <SysOpen(regs*)+0x19e>
c0011465:	83 c8 0a             	or     eax,0xa
c0011468:	83 e2 10             	and    edx,0x10
c001146b:	74 03                	je     c0011470 <SysOpen(regs*)+0x1a6>
c001146d:	83 c8 12             	or     eax,0x12
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	50                   	push   eax
c0011474:	56                   	push   esi
c0011475:	e8 ca 97 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c001147a:	83 c4 10             	add    esp,0x10
c001147d:	85 c0                	test   eax,eax
c001147f:	75 1c                	jne    c001149d <SysOpen(regs*)+0x1d3>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	56                   	push   esi
c0011485:	e8 7c 7a ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c001148a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001148d:	83 c4 10             	add    esp,0x10
c0011490:	89 02                	mov    DWORD PTR [edx],eax
c0011492:	c1 f8 1f             	sar    eax,0x1f
c0011495:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011498:	e9 b6 fe ff ff       	jmp    c0011353 <SysOpen(regs*)+0x89>
c001149d:	81 c4 04 01 00 00    	add    esp,0x104
c00114a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ad:	5b                   	pop    ebx
c00114ae:	5e                   	pop    esi
c00114af:	c3                   	ret    
c00114b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114b3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114b9:	e9 8e fe ff ff       	jmp    c001134c <SysOpen(regs*)+0x82>

c00114be <KeSystemCall(regs*, void*)>:
c00114be:	53                   	push   ebx
c00114bf:	83 ec 08             	sub    esp,0x8
c00114c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00114c9:	83 f8 32             	cmp    eax,0x32
c00114cc:	77 16                	ja     c00114e4 <KeSystemCall(regs*, void*)+0x26>
c00114ce:	8b 14 85 20 02 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfde0]
c00114d5:	85 d2                	test   edx,edx
c00114d7:	74 0b                	je     c00114e4 <KeSystemCall(regs*, void*)+0x26>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	53                   	push   ebx
c00114dd:	ff d2                	call   edx
c00114df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00114e2:	eb 0d                	jmp    c00114f1 <KeSystemCall(regs*, void*)+0x33>
c00114e4:	52                   	push   edx
c00114e5:	52                   	push   edx
c00114e6:	50                   	push   eax
c00114e7:	68 38 f0 01 c0       	push   0xc001f038
c00114ec:	e8 1d 91 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00114f9:	31 d2                	xor    edx,edx
c00114fb:	83 c4 08             	add    esp,0x8
c00114fe:	5b                   	pop    ebx
c00114ff:	c3                   	ret    

c0011500 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011500:	55                   	push   ebp
c0011501:	57                   	push   edi
c0011502:	56                   	push   esi
c0011503:	53                   	push   ebx
c0011504:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001150a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011511:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011513:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011516:	80 fb 40             	cmp    bl,0x40
c0011519:	75 1b                	jne    c0011536 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001151b:	8a 16                	mov    dl,BYTE PTR [esi]
c001151d:	84 d2                	test   dl,dl
c001151f:	0f 84 f1 00 00 00    	je     c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011525:	8d 46 01             	lea    eax,[esi+0x1]
c0011528:	80 fa 3a             	cmp    dl,0x3a
c001152b:	74 04                	je     c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001152d:	89 c6                	mov    esi,eax
c001152f:	eb ea                	jmp    c001151b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011531:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011534:	89 c6                	mov    esi,eax
c0011536:	50                   	push   eax
c0011537:	6a 40                	push   0x40
c0011539:	6a 00                	push   0x0
c001153b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001153f:	50                   	push   eax
c0011540:	e8 8b ef fe ff       	call   c00004d0 <memset>
c0011545:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001154c:	31 c0                	xor    eax,eax
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011553:	84 c9                	test   cl,cl
c0011555:	0f 84 bb 00 00 00    	je     c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001155b:	3d c7 00 00 00       	cmp    eax,0xc7
c0011560:	0f 8f b0 00 00 00    	jg     c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011566:	80 f9 0a             	cmp    cl,0xa
c0011569:	0f 85 98 00 00 00    	jne    c0011607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001156f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011574:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011578:	a8 df                	test   al,0xdf
c001157a:	0f 94 c1             	sete   cl
c001157d:	3c 23                	cmp    al,0x23
c001157f:	0f 94 c2             	sete   dl
c0011582:	08 d1                	or     cl,dl
c0011584:	75 4a                	jne    c00115d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011586:	8d 50 f7             	lea    edx,[eax-0x9]
c0011589:	80 fa 01             	cmp    dl,0x1
c001158c:	76 42                	jbe    c00115d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001158e:	3c 5b                	cmp    al,0x5b
c0011590:	75 42                	jne    c00115d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011592:	80 fb 40             	cmp    bl,0x40
c0011595:	75 39                	jne    c00115d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001159e:	52                   	push   edx
c001159f:	e8 9c ef fe ff       	call   c0000540 <strlen>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	83 f8 3f             	cmp    eax,0x3f
c00115aa:	77 6a                	ja     c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115ac:	50                   	push   eax
c00115ad:	50                   	push   eax
c00115ae:	8d 54 24 61          	lea    edx,[esp+0x61]
c00115b2:	52                   	push   edx
c00115b3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115b7:	52                   	push   edx
c00115b8:	e8 43 f0 fe ff       	call   c0000600 <strcpy>
c00115bd:	58                   	pop    eax
c00115be:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115c2:	52                   	push   edx
c00115c3:	e8 78 ef fe ff       	call   c0000540 <strlen>
c00115c8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	31 d2                	xor    edx,edx
c00115d2:	eb 3a                	jmp    c001160e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00115d4:	80 fb 40             	cmp    bl,0x40
c00115d7:	74 06                	je     c00115df <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00115d9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00115dd:	eb 20                	jmp    c00115ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00115df:	50                   	push   eax
c00115e0:	50                   	push   eax
c00115e1:	55                   	push   ebp
c00115e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00115e6:	50                   	push   eax
c00115e7:	e8 f4 f0 fe ff       	call   c00006e0 <strcmp>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	85 c0                	test   eax,eax
c00115f1:	75 dd                	jne    c00115d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115f3:	eb e4                	jmp    c00115d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00115f5:	8d 50 01             	lea    edx,[eax+0x1]
c00115f8:	80 f9 3d             	cmp    cl,0x3d
c00115fb:	74 1d                	je     c001161a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00115fd:	89 d0                	mov    eax,edx
c00115ff:	8a 08                	mov    cl,BYTE PTR [eax]
c0011601:	84 c9                	test   cl,cl
c0011603:	75 f0                	jne    c00115f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011605:	eb 0f                	jmp    c0011616 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011607:	8d 50 01             	lea    edx,[eax+0x1]
c001160a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001160e:	47                   	inc    edi
c001160f:	89 d0                	mov    eax,edx
c0011611:	e9 3b ff ff ff       	jmp    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011616:	31 c0                	xor    eax,eax
c0011618:	eb 33                	jmp    c001164d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001161a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001161e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011621:	50                   	push   eax
c0011622:	50                   	push   eax
c0011623:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011627:	50                   	push   eax
c0011628:	56                   	push   esi
c0011629:	e8 b2 f0 fe ff       	call   c00006e0 <strcmp>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	85 c0                	test   eax,eax
c0011633:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011637:	75 97                	jne    c00115d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011639:	51                   	push   ecx
c001163a:	51                   	push   ecx
c001163b:	52                   	push   edx
c001163c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011643:	e8 b8 ef fe ff       	call   c0000600 <strcpy>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	b0 01                	mov    al,0x1
c001164d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011653:	5b                   	pop    ebx
c0011654:	5e                   	pop    esi
c0011655:	5f                   	pop    edi
c0011656:	5d                   	pop    ebp
c0011657:	c3                   	ret    

c0011658 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011658:	57                   	push   edi
c0011659:	56                   	push   esi
c001165a:	53                   	push   ebx
c001165b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011661:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011668:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001166f:	53                   	push   ebx
c0011670:	e8 cb ee fe ff       	call   c0000540 <strlen>
c0011675:	89 34 24             	mov    DWORD PTR [esp],esi
c0011678:	89 c7                	mov    edi,eax
c001167a:	e8 c1 ee fe ff       	call   c0000540 <strlen>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011686:	3d ff 00 00 00       	cmp    eax,0xff
c001168b:	0f 87 d3 00 00 00    	ja     c0011764 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011691:	57                   	push   edi
c0011692:	57                   	push   edi
c0011693:	56                   	push   esi
c0011694:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011698:	56                   	push   esi
c0011699:	e8 62 ef fe ff       	call   c0000600 <strcpy>
c001169e:	58                   	pop    eax
c001169f:	5a                   	pop    edx
c00116a0:	68 e9 f2 01 c0       	push   0xc001f2e9
c00116a5:	56                   	push   esi
c00116a6:	e8 15 f1 fe ff       	call   c00007c0 <strcat>
c00116ab:	59                   	pop    ecx
c00116ac:	5f                   	pop    edi
c00116ad:	53                   	push   ebx
c00116ae:	56                   	push   esi
c00116af:	e8 0c f1 fe ff       	call   c00007c0 <strcat>
c00116b4:	58                   	pop    eax
c00116b5:	5a                   	pop    edx
c00116b6:	68 4c f0 01 c0       	push   0xc001f04c
c00116bb:	56                   	push   esi
c00116bc:	e8 ff f0 fe ff       	call   c00007c0 <strcat>
c00116c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116c8:	e8 a8 61 ff ff       	call   c0007875 <malloc>
c00116cd:	83 c4 0c             	add    esp,0xc
c00116d0:	89 c3                	mov    ebx,eax
c00116d2:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00116d8:	56                   	push   esi
c00116d9:	50                   	push   eax
c00116da:	e8 a5 94 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	85 db                	test   ebx,ebx
c00116e4:	74 7e                	je     c0011764 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116e6:	51                   	push   ecx
c00116e7:	51                   	push   ecx
c00116e8:	6a 01                	push   0x1
c00116ea:	53                   	push   ebx
c00116eb:	e8 54 95 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	85 c0                	test   eax,eax
c00116f5:	74 08                	je     c00116ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00116f7:	83 ec 0c             	sub    esp,0xc
c00116fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fc:	53                   	push   ebx
c00116fd:	eb 5f                	jmp    c001175e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00116ff:	52                   	push   edx
c0011700:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011704:	50                   	push   eax
c0011705:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011709:	50                   	push   eax
c001170a:	53                   	push   ebx
c001170b:	e8 e0 97 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0011710:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	89 c1                	mov    ecx,eax
c0011719:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001171d:	74 31                	je     c0011750 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	50                   	push   eax
c0011723:	e8 4d 61 ff ff       	call   c0007875 <malloc>
c0011728:	89 c6                	mov    esi,eax
c001172a:	58                   	pop    eax
c001172b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001172d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011731:	52                   	push   edx
c0011732:	56                   	push   esi
c0011733:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011737:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001173b:	53                   	push   ebx
c001173c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001173f:	83 c4 20             	add    esp,0x20
c0011742:	85 c0                	test   eax,eax
c0011744:	75 0a                	jne    c0011750 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001174a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001174e:	74 18                	je     c0011768 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011750:	83 ec 0c             	sub    esp,0xc
c0011753:	53                   	push   ebx
c0011754:	e8 49 95 ff ff       	call   c000aca2 <File::close()>
c0011759:	8b 03                	mov    eax,DWORD PTR [ebx]
c001175b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001175e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	31 c0                	xor    eax,eax
c0011766:	eb 3b                	jmp    c00117a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	53                   	push   ebx
c001176c:	e8 31 95 ff ff       	call   c000aca2 <File::close()>
c0011771:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011773:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011776:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011779:	83 c4 0c             	add    esp,0xc
c001177c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011783:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001178a:	56                   	push   esi
c001178b:	e8 70 fd ff ff       	call   c0011500 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011790:	89 34 24             	mov    DWORD PTR [esp],esi
c0011793:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011797:	e8 e9 60 ff ff       	call   c0007885 <free>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117a3:	81 c4 20 01 00 00    	add    esp,0x120
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	c3                   	ret    

c00117ad <Reg::getLine(char*, char*, char*)>:
c00117ad:	57                   	push   edi
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00117b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117bc:	57                   	push   edi
c00117bd:	56                   	push   esi
c00117be:	53                   	push   ebx
c00117bf:	68 51 f0 01 c0       	push   0xc001f051
c00117c4:	e8 8f fe ff ff       	call   c0011658 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	84 c0                	test   al,al
c00117ce:	75 10                	jne    c00117e0 <Reg::getLine(char*, char*, char*)+0x33>
c00117d0:	57                   	push   edi
c00117d1:	56                   	push   esi
c00117d2:	53                   	push   ebx
c00117d3:	68 76 f0 01 c0       	push   0xc001f076
c00117d8:	e8 7b fe ff ff       	call   c0011658 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	5b                   	pop    ebx
c00117e1:	5e                   	pop    esi
c00117e2:	5f                   	pop    edi
c00117e3:	c3                   	ret    

c00117e4 <Reg::readInt(char*, char*, int*)>:
c00117e4:	55                   	push   ebp
c00117e5:	57                   	push   edi
c00117e6:	56                   	push   esi
c00117e7:	53                   	push   ebx
c00117e8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00117ee:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00117f2:	57                   	push   edi
c00117f3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117fa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011801:	e8 a7 ff ff ff       	call   c00117ad <Reg::getLine(char*, char*, char*)>
c0011806:	83 c4 10             	add    esp,0x10
c0011809:	84 c0                	test   al,al
c001180b:	0f 84 b3 00 00 00    	je     c00118c4 <Reg::readInt(char*, char*, int*)+0xe0>
c0011811:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011815:	80 fa 2b             	cmp    dl,0x2b
c0011818:	74 0c                	je     c0011826 <Reg::readInt(char*, char*, int*)+0x42>
c001181a:	80 fa 2d             	cmp    dl,0x2d
c001181d:	75 0e                	jne    c001182d <Reg::readInt(char*, char*, int*)+0x49>
c001181f:	ba 01 00 00 00       	mov    edx,0x1
c0011824:	eb 0b                	jmp    c0011831 <Reg::readInt(char*, char*, int*)+0x4d>
c0011826:	ba 01 00 00 00       	mov    edx,0x1
c001182b:	eb 02                	jmp    c001182f <Reg::readInt(char*, char*, int*)+0x4b>
c001182d:	31 d2                	xor    edx,edx
c001182f:	31 c0                	xor    eax,eax
c0011831:	be 0a 00 00 00       	mov    esi,0xa
c0011836:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001183b:	75 20                	jne    c001185d <Reg::readInt(char*, char*, int*)+0x79>
c001183d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011841:	80 f9 78             	cmp    cl,0x78
c0011844:	75 0a                	jne    c0011850 <Reg::readInt(char*, char*, int*)+0x6c>
c0011846:	83 c2 02             	add    edx,0x2
c0011849:	be 10 00 00 00       	mov    esi,0x10
c001184e:	eb 0d                	jmp    c001185d <Reg::readInt(char*, char*, int*)+0x79>
c0011850:	80 f9 62             	cmp    cl,0x62
c0011853:	75 08                	jne    c001185d <Reg::readInt(char*, char*, int*)+0x79>
c0011855:	83 c2 02             	add    edx,0x2
c0011858:	be 02 00 00 00       	mov    esi,0x2
c001185d:	01 d7                	add    edi,edx
c001185f:	31 d2                	xor    edx,edx
c0011861:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011863:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011867:	80 fb 0d             	cmp    bl,0xd
c001186a:	0f 94 c3             	sete   bl
c001186d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011872:	0f 94 c1             	sete   cl
c0011875:	08 cb                	or     bl,cl
c0011877:	75 3a                	jne    c00118b3 <Reg::readInt(char*, char*, int*)+0xcf>
c0011879:	0f af d6             	imul   edx,esi
c001187c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011881:	83 fe 10             	cmp    esi,0x10
c0011884:	75 26                	jne    c00118ac <Reg::readInt(char*, char*, int*)+0xc8>
c0011886:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001188a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001188d:	89 e9                	mov    ecx,ebp
c001188f:	80 f9 05             	cmp    cl,0x5
c0011892:	77 06                	ja     c001189a <Reg::readInt(char*, char*, int*)+0xb6>
c0011894:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011898:	eb 16                	jmp    c00118b0 <Reg::readInt(char*, char*, int*)+0xcc>
c001189a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001189e:	83 e9 61             	sub    ecx,0x61
c00118a1:	80 f9 05             	cmp    cl,0x5
c00118a4:	77 06                	ja     c00118ac <Reg::readInt(char*, char*, int*)+0xc8>
c00118a6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00118aa:	eb 04                	jmp    c00118b0 <Reg::readInt(char*, char*, int*)+0xcc>
c00118ac:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00118b0:	47                   	inc    edi
c00118b1:	eb ae                	jmp    c0011861 <Reg::readInt(char*, char*, int*)+0x7d>
c00118b3:	84 c0                	test   al,al
c00118b5:	74 02                	je     c00118b9 <Reg::readInt(char*, char*, int*)+0xd5>
c00118b7:	f7 da                	neg    edx
c00118b9:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00118c0:	89 10                	mov    DWORD PTR [eax],edx
c00118c2:	88 d8                	mov    al,bl
c00118c4:	81 c4 ec 00 00 00    	add    esp,0xec
c00118ca:	5b                   	pop    ebx
c00118cb:	5e                   	pop    esi
c00118cc:	5f                   	pop    edi
c00118cd:	5d                   	pop    ebp
c00118ce:	c3                   	ret    

c00118cf <Reg::readString(char*, char*, char*, int)>:
c00118cf:	57                   	push   edi
c00118d0:	56                   	push   esi
c00118d1:	53                   	push   ebx
c00118d2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00118d8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00118df:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00118e3:	57                   	push   edi
c00118e4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00118eb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00118f2:	e8 b6 fe ff ff       	call   c00117ad <Reg::getLine(char*, char*, char*)>
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	89 c6                	mov    esi,eax
c00118fc:	84 c0                	test   al,al
c00118fe:	74 44                	je     c0011944 <Reg::readString(char*, char*, char*, int)+0x75>
c0011900:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011907:	31 c0                	xor    eax,eax
c0011909:	4a                   	dec    edx
c001190a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001190d:	84 c9                	test   cl,cl
c001190f:	74 0f                	je     c0011920 <Reg::readString(char*, char*, char*, int)+0x51>
c0011911:	39 c2                	cmp    edx,eax
c0011913:	7e 0b                	jle    c0011920 <Reg::readString(char*, char*, char*, int)+0x51>
c0011915:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011918:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001191d:	40                   	inc    eax
c001191e:	eb ea                	jmp    c001190a <Reg::readString(char*, char*, char*, int)+0x3b>
c0011920:	83 ec 0c             	sub    esp,0xc
c0011923:	53                   	push   ebx
c0011924:	e8 17 ec fe ff       	call   c0000540 <strlen>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011931:	75 11                	jne    c0011944 <Reg::readString(char*, char*, char*, int)+0x75>
c0011933:	83 ec 0c             	sub    esp,0xc
c0011936:	53                   	push   ebx
c0011937:	e8 04 ec fe ff       	call   c0000540 <strlen>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011944:	81 c4 d0 00 00 00    	add    esp,0xd0
c001194a:	89 f0                	mov    eax,esi
c001194c:	5b                   	pop    ebx
c001194d:	5e                   	pop    esi
c001194e:	5f                   	pop    edi
c001194f:	c3                   	ret    

c0011950 <Reg::readBool(char*, char*, bool*)>:
c0011950:	83 ec 20             	sub    esp,0x20
c0011953:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011957:	50                   	push   eax
c0011958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001195c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011960:	e8 7f fe ff ff       	call   c00117e4 <Reg::readInt(char*, char*, int*)>
c0011965:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001196a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001196e:	0f 95 02             	setne  BYTE PTR [edx]
c0011971:	83 c4 2c             	add    esp,0x2c
c0011974:	c3                   	ret    

c0011975 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011975:	53                   	push   ebx
c0011976:	83 ec 1c             	sub    esp,0x1c
c0011979:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001197d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011981:	50                   	push   eax
c0011982:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011986:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001198a:	e8 c1 ff ff ff       	call   c0011950 <Reg::readBool(char*, char*, bool*)>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	84 c0                	test   al,al
c0011994:	74 04                	je     c001199a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011996:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001199a:	88 d8                	mov    al,bl
c001199c:	83 c4 18             	add    esp,0x18
c001199f:	5b                   	pop    ebx
c00119a0:	c3                   	ret    

c00119a1 <Reg::readIntWithDefault(char*, char*, int)>:
c00119a1:	53                   	push   ebx
c00119a2:	83 ec 1c             	sub    esp,0x1c
c00119a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119a9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119ad:	50                   	push   eax
c00119ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119b6:	e8 29 fe ff ff       	call   c00117e4 <Reg::readInt(char*, char*, int*)>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	84 c0                	test   al,al
c00119c0:	74 04                	je     c00119c6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00119c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119c6:	89 d8                	mov    eax,ebx
c00119c8:	83 c4 18             	add    esp,0x18
c00119cb:	5b                   	pop    ebx
c00119cc:	c3                   	ret    

c00119cd <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00119cd:	57                   	push   edi
c00119ce:	56                   	push   esi
c00119cf:	56                   	push   esi
c00119d0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119d4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00119d8:	56                   	push   esi
c00119d9:	57                   	push   edi
c00119da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e2:	e8 e8 fe ff ff       	call   c00118cf <Reg::readString(char*, char*, char*, int)>
c00119e7:	83 c4 10             	add    esp,0x10
c00119ea:	84 c0                	test   al,al
c00119ec:	75 1a                	jne    c0011a08 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00119ee:	51                   	push   ecx
c00119ef:	56                   	push   esi
c00119f0:	6a 00                	push   0x0
c00119f2:	57                   	push   edi
c00119f3:	e8 d8 ea fe ff       	call   c00004d0 <memset>
c00119f8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00119fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a08:	89 f8                	mov    eax,edi
c0011a0a:	5a                   	pop    edx
c0011a0b:	5e                   	pop    esi
c0011a0c:	5f                   	pop    edi
c0011a0d:	c3                   	ret    

c0011a0e <SysEject(regs*)>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ca ff             	or     edx,0xffffffff
c0011a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a18:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a1b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a20:	83 e9 41             	sub    ecx,0x41
c0011a23:	83 f9 19             	cmp    ecx,0x19
c0011a26:	77 18                	ja     c0011a40 <SysEject(regs*)+0x32>
c0011a28:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c0011a2f:	85 c9                	test   ecx,ecx
c0011a31:	74 0d                	je     c0011a40 <SysEject(regs*)+0x32>
c0011a33:	83 ec 0c             	sub    esp,0xc
c0011a36:	51                   	push   ecx
c0011a37:	e8 88 b2 ff ff       	call   c000ccc4 <LogicalDisk::eject()>
c0011a3c:	83 c4 10             	add    esp,0x10
c0011a3f:	99                   	cdq    
c0011a40:	83 c4 0c             	add    esp,0xc
c0011a43:	c3                   	ret    

c0011a44 <SysExit(regs*)>:
c0011a44:	83 ec 18             	sub    esp,0x18
c0011a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a4b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a4e:	e8 11 27 00 00       	call   c0014164 <terminateTask(int)>
c0011a53:	83 c8 ff             	or     eax,0xffffffff
c0011a56:	83 c4 1c             	add    esp,0x1c
c0011a59:	89 c2                	mov    edx,eax
c0011a5b:	c3                   	ret    

c0011a5c <SysGetCwd(regs*)>:
c0011a5c:	83 ec 10             	sub    esp,0x10
c0011a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a63:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a66:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a6e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a71:	e8 10 8f ff ff       	call   c000a986 <Fs::getcwd(Process*, char*, int)>
c0011a76:	83 c4 1c             	add    esp,0x1c
c0011a79:	99                   	cdq    
c0011a7a:	c3                   	ret    

c0011a7b <SysGetPID(regs*)>:
c0011a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a85:	99                   	cdq    
c0011a86:	c3                   	ret    

c0011a87 <SysGetRAMData(regs*)>:
c0011a87:	8b 0d e8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ee8
c0011a8d:	69 05 e4 2e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0022ee4,0xc8
c0011a97:	99                   	cdq    
c0011a98:	f7 f9                	idiv   ecx
c0011a9a:	c1 e0 18             	shl    eax,0x18
c0011a9d:	09 c8                	or     eax,ecx
c0011a9f:	99                   	cdq    
c0011aa0:	c3                   	ret    

c0011aa1 <SysGetVGAPtr(regs*)>:
c0011aa1:	55                   	push   ebp
c0011aa2:	57                   	push   edi
c0011aa3:	56                   	push   esi
c0011aa4:	53                   	push   ebx
c0011aa5:	83 ec 18             	sub    esp,0x18
c0011aa8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011aac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011aaf:	e8 b0 21 00 00       	call   c0013c64 <Thr::processFromPID(int)>
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	89 c1                	mov    ecx,eax
c0011ab9:	b8 01 00 00 00       	mov    eax,0x1
c0011abe:	85 c9                	test   ecx,ecx
c0011ac0:	74 57                	je     c0011b19 <SysGetVGAPtr(regs*)+0x78>
c0011ac2:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011ac8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011acc:	74 0c                	je     c0011ada <SysGetVGAPtr(regs*)+0x39>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	55                   	push   ebp
c0011ad2:	e8 dc 69 ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c0011ad7:	83 c4 10             	add    esp,0x10
c0011ada:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011add:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ae0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011ae5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ae7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011aea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aed:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011af3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011af6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011af9:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011aff:	50                   	push   eax
c0011b00:	50                   	push   eax
c0011b01:	68 91 f0 01 c0       	push   0xc001f091
c0011b06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b09:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b0e:	50                   	push   eax
c0011b0f:	e8 ec ea fe ff       	call   c0000600 <strcpy>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	31 c0                	xor    eax,eax
c0011b19:	83 c4 0c             	add    esp,0xc
c0011b1c:	31 d2                	xor    edx,edx
c0011b1e:	5b                   	pop    ebx
c0011b1f:	5e                   	pop    esi
c0011b20:	5f                   	pop    edi
c0011b21:	5d                   	pop    ebp
c0011b22:	c3                   	ret    

c0011b23 <SysLoadDLL(regs*)>:
c0011b23:	56                   	push   esi
c0011b24:	53                   	push   ebx
c0011b25:	31 d2                	xor    edx,edx
c0011b27:	51                   	push   ecx
c0011b28:	b8 01 00 00 00       	mov    eax,0x1
c0011b2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b31:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011b35:	0f 84 8c 00 00 00    	je     c0011bc7 <SysLoadDLL(regs*)+0xa4>
c0011b3b:	83 ec 0c             	sub    esp,0xc
c0011b3e:	68 14 01 00 00       	push   0x114
c0011b43:	e8 2d 5d ff ff       	call   c0007875 <malloc>
c0011b48:	83 c4 0c             	add    esp,0xc
c0011b4b:	89 c3                	mov    ebx,eax
c0011b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b52:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b55:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b58:	53                   	push   ebx
c0011b59:	e8 26 90 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	31 d2                	xor    edx,edx
c0011b63:	b8 02 00 00 00       	mov    eax,0x2
c0011b68:	85 db                	test   ebx,ebx
c0011b6a:	74 5b                	je     c0011bc7 <SysLoadDLL(regs*)+0xa4>
c0011b6c:	83 ec 0c             	sub    esp,0xc
c0011b6f:	53                   	push   ebx
c0011b70:	e8 3d 93 ff ff       	call   c000aeb2 <File::exists()>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	84 c0                	test   al,al
c0011b7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b7c:	75 11                	jne    c0011b8f <SysLoadDLL(regs*)+0x6c>
c0011b7e:	83 ec 0c             	sub    esp,0xc
c0011b81:	53                   	push   ebx
c0011b82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	b8 03 00 00 00       	mov    eax,0x3
c0011b8d:	eb 36                	jmp    c0011bc5 <SysLoadDLL(regs*)+0xa2>
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	53                   	push   ebx
c0011b93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b96:	58                   	pop    eax
c0011b97:	5a                   	pop    edx
c0011b98:	6a 00                	push   0x0
c0011b9a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b9d:	e8 74 12 00 00       	call   c0012e16 <Thr::loadDLL(char const*, bool)>
c0011ba2:	83 c4 10             	add    esp,0x10
c0011ba5:	89 c1                	mov    ecx,eax
c0011ba7:	31 d2                	xor    edx,edx
c0011ba9:	b8 04 00 00 00       	mov    eax,0x4
c0011bae:	85 c9                	test   ecx,ecx
c0011bb0:	74 15                	je     c0011bc7 <SysLoadDLL(regs*)+0xa4>
c0011bb2:	53                   	push   ebx
c0011bb3:	53                   	push   ebx
c0011bb4:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0011bba:	51                   	push   ecx
c0011bbb:	e8 87 14 00 00       	call   c0013047 <Thr::executeDLL(unsigned long, void*)>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	31 c0                	xor    eax,eax
c0011bc5:	31 d2                	xor    edx,edx
c0011bc7:	59                   	pop    ecx
c0011bc8:	5b                   	pop    ebx
c0011bc9:	5e                   	pop    esi
c0011bca:	c3                   	ret    

c0011bcb <SysRead(regs*)>:
c0011bcb:	57                   	push   edi
c0011bcc:	56                   	push   esi
c0011bcd:	53                   	push   ebx
c0011bce:	83 ec 10             	sub    esp,0x10
c0011bd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bd8:	83 f8 02             	cmp    eax,0x2
c0011bdb:	77 10                	ja     c0011bed <SysRead(regs*)+0x22>
c0011bdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011beb:	eb 0e                	jmp    c0011bfb <SysRead(regs*)+0x30>
c0011bed:	83 ec 0c             	sub    esp,0xc
c0011bf0:	50                   	push   eax
c0011bf1:	e8 05 76 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	89 c1                	mov    ecx,eax
c0011bfb:	83 c8 ff             	or     eax,0xffffffff
c0011bfe:	85 c9                	test   ecx,ecx
c0011c00:	89 c2                	mov    edx,eax
c0011c02:	74 28                	je     c0011c2c <SysRead(regs*)+0x61>
c0011c04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c0c:	31 ff                	xor    edi,edi
c0011c0e:	83 ec 0c             	sub    esp,0xc
c0011c11:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011c13:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011c17:	52                   	push   edx
c0011c18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011c1b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011c1e:	57                   	push   edi
c0011c1f:	56                   	push   esi
c0011c20:	51                   	push   ecx
c0011c21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c28:	83 c4 20             	add    esp,0x20
c0011c2b:	99                   	cdq    
c0011c2c:	83 c4 10             	add    esp,0x10
c0011c2f:	5b                   	pop    ebx
c0011c30:	5e                   	pop    esi
c0011c31:	5f                   	pop    edi
c0011c32:	c3                   	ret    

c0011c33 <SysRegisterSignal(regs*)>:
c0011c33:	83 ec 18             	sub    esp,0x18
c0011c36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c3a:	6a 00                	push   0x0
c0011c3c:	6a 00                	push   0x0
c0011c3e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011c41:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c4c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c52:	e8 82 ea ff ff       	call   c00106d9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c57:	83 c4 2c             	add    esp,0x2c
c0011c5a:	99                   	cdq    
c0011c5b:	c3                   	ret    

c0011c5c <SysSbrk(regs*)>:
c0011c5c:	56                   	push   esi
c0011c5d:	53                   	push   ebx
c0011c5e:	50                   	push   eax
c0011c5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c6b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011c6e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c74:	85 db                	test   ebx,ebx
c0011c76:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c79:	74 02                	je     c0011c7d <SysSbrk(regs*)+0x21>
c0011c7b:	79 06                	jns    c0011c83 <SysSbrk(regs*)+0x27>
c0011c7d:	89 f0                	mov    eax,esi
c0011c7f:	31 d2                	xor    edx,edx
c0011c81:	eb 2a                	jmp    c0011cad <SysSbrk(regs*)+0x51>
c0011c83:	83 c8 ff             	or     eax,0xffffffff
c0011c86:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c8c:	89 c2                	mov    edx,eax
c0011c8e:	77 1d                	ja     c0011cad <SysSbrk(regs*)+0x51>
c0011c90:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c96:	50                   	push   eax
c0011c97:	c1 ea 0c             	shr    edx,0xc
c0011c9a:	68 07 0c 00 00       	push   0xc07
c0011c9f:	52                   	push   edx
c0011ca0:	51                   	push   ecx
c0011ca1:	e8 72 7e ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c0011ca6:	89 f0                	mov    eax,esi
c0011ca8:	31 d2                	xor    edx,edx
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	59                   	pop    ecx
c0011cae:	5b                   	pop    ebx
c0011caf:	5e                   	pop    esi
c0011cb0:	c3                   	ret    

c0011cb1 <SysSetCwd(regs*)>:
c0011cb1:	83 ec 14             	sub    esp,0x14
c0011cb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cb8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cc3:	e8 89 92 ff ff       	call   c000af51 <Fs::setcwd(Process*, char*)>
c0011cc8:	83 c4 1c             	add    esp,0x1c
c0011ccb:	99                   	cdq    
c0011ccc:	c3                   	ret    

c0011ccd <SysSetTime(regs*)>:
c0011ccd:	55                   	push   ebp
c0011cce:	31 c9                	xor    ecx,ecx
c0011cd0:	57                   	push   edi
c0011cd1:	bd 0c 00 00 00       	mov    ebp,0xc
c0011cd6:	56                   	push   esi
c0011cd7:	53                   	push   ebx
c0011cd8:	31 db                	xor    ebx,ebx
c0011cda:	83 ec 10             	sub    esp,0x10
c0011cdd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011ce1:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011ce4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011ce7:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011cea:	89 c2                	mov    edx,eax
c0011cec:	66 81 ef 6c 07       	sub    di,0x76c
c0011cf1:	83 e2 1f             	and    edx,0x1f
c0011cf4:	c1 e7 10             	shl    edi,0x10
c0011cf7:	42                   	inc    edx
c0011cf8:	c1 e8 05             	shr    eax,0x5
c0011cfb:	88 d1                	mov    cl,dl
c0011cfd:	31 d2                	xor    edx,edx
c0011cff:	f7 f5                	div    ebp
c0011d01:	89 dd                	mov    ebp,ebx
c0011d03:	88 d5                	mov    ch,dl
c0011d05:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011d0b:	0f b7 c1             	movzx  eax,cx
c0011d0e:	31 d2                	xor    edx,edx
c0011d10:	09 f8                	or     eax,edi
c0011d12:	bf 3c 00 00 00       	mov    edi,0x3c
c0011d17:	89 c1                	mov    ecx,eax
c0011d19:	89 f0                	mov    eax,esi
c0011d1b:	f7 f7                	div    edi
c0011d1d:	c1 e2 10             	shl    edx,0x10
c0011d20:	09 d5                	or     ebp,edx
c0011d22:	31 d2                	xor    edx,edx
c0011d24:	89 eb                	mov    ebx,ebp
c0011d26:	f7 f7                	div    edi
c0011d28:	bf 10 0e 00 00       	mov    edi,0xe10
c0011d2d:	88 d7                	mov    bh,dl
c0011d2f:	89 f0                	mov    eax,esi
c0011d31:	31 d2                	xor    edx,edx
c0011d33:	f7 f7                	div    edi
c0011d35:	bf 18 00 00 00       	mov    edi,0x18
c0011d3a:	31 d2                	xor    edx,edx
c0011d3c:	f7 f7                	div    edi
c0011d3e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011d43:	88 d3                	mov    bl,dl
c0011d45:	53                   	push   ebx
c0011d46:	51                   	push   ecx
c0011d47:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d4d:	e8 0e 9a ff ff       	call   c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d52:	83 c4 1c             	add    esp,0x1c
c0011d55:	83 f0 01             	xor    eax,0x1
c0011d58:	5b                   	pop    ebx
c0011d59:	0f b6 c0             	movzx  eax,al
c0011d5c:	5e                   	pop    esi
c0011d5d:	31 d2                	xor    edx,edx
c0011d5f:	5f                   	pop    edi
c0011d60:	5d                   	pop    ebp
c0011d61:	c3                   	ret    

c0011d62 <SysTimezone(regs*)>:
c0011d62:	53                   	push   ebx
c0011d63:	83 ec 08             	sub    esp,0x8
c0011d66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d6a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d6e:	75 17                	jne    c0011d87 <SysTimezone(regs*)+0x25>
c0011d70:	83 ec 0c             	sub    esp,0xc
c0011d73:	68 9b f0 01 c0       	push   0xc001f09b
c0011d78:	e8 91 88 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0011d7d:	83 c8 ff             	or     eax,0xffffffff
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	89 c2                	mov    edx,eax
c0011d85:	eb 20                	jmp    c0011da7 <SysTimezone(regs*)+0x45>
c0011d87:	83 ec 0c             	sub    esp,0xc
c0011d8a:	68 b0 f0 01 c0       	push   0xc001f0b0
c0011d8f:	e8 7a 88 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0011d94:	58                   	pop    eax
c0011d95:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d98:	e8 1f 97 ff ff       	call   c000b4bc <User::loadClockSettings(int)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	b8 01 00 00 00       	mov    eax,0x1
c0011da5:	31 d2                	xor    edx,edx
c0011da7:	83 c4 08             	add    esp,0x8
c0011daa:	5b                   	pop    ebx
c0011dab:	c3                   	ret    

c0011dac <SysWrite(regs*)>:
c0011dac:	57                   	push   edi
c0011dad:	56                   	push   esi
c0011dae:	53                   	push   ebx
c0011daf:	83 ec 10             	sub    esp,0x10
c0011db2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011db6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011db9:	83 f8 02             	cmp    eax,0x2
c0011dbc:	77 10                	ja     c0011dce <SysWrite(regs*)+0x22>
c0011dbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dc6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011dcc:	eb 0e                	jmp    c0011ddc <SysWrite(regs*)+0x30>
c0011dce:	83 ec 0c             	sub    esp,0xc
c0011dd1:	50                   	push   eax
c0011dd2:	e8 24 74 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	89 c1                	mov    ecx,eax
c0011ddc:	83 c8 ff             	or     eax,0xffffffff
c0011ddf:	85 c9                	test   ecx,ecx
c0011de1:	89 c2                	mov    edx,eax
c0011de3:	74 28                	je     c0011e0d <SysWrite(regs*)+0x61>
c0011de5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ded:	31 ff                	xor    edi,edi
c0011def:	83 ec 0c             	sub    esp,0xc
c0011df2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011df4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011df8:	52                   	push   edx
c0011df9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011dfc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011dff:	57                   	push   edi
c0011e00:	56                   	push   esi
c0011e01:	51                   	push   ecx
c0011e02:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e09:	83 c4 20             	add    esp,0x20
c0011e0c:	99                   	cdq    
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	5b                   	pop    ebx
c0011e11:	5e                   	pop    esi
c0011e12:	5f                   	pop    edi
c0011e13:	c3                   	ret    

c0011e14 <SysWsbe(regs*)>:
c0011e14:	57                   	push   edi
c0011e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0011e1a:	56                   	push   esi
c0011e1b:	be ef f0 01 c0       	mov    esi,0xc001f0ef
c0011e20:	53                   	push   ebx
c0011e21:	83 ec 30             	sub    esp,0x30
c0011e24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e28:	fc                   	cld    
c0011e29:	83 ec 0c             	sub    esp,0xc
c0011e2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e2e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011e32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e3a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011e40:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e42:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e45:	57                   	push   edi
c0011e46:	e8 f5 e6 fe ff       	call   c0000540 <strlen>
c0011e4b:	5a                   	pop    edx
c0011e4c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e50:	52                   	push   edx
c0011e51:	31 d2                	xor    edx,edx
c0011e53:	57                   	push   edi
c0011e54:	52                   	push   edx
c0011e55:	50                   	push   eax
c0011e56:	56                   	push   esi
c0011e57:	ff d3                	call   ebx
c0011e59:	83 c4 14             	add    esp,0x14
c0011e5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e60:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e63:	e8 fc 22 00 00       	call   c0014164 <terminateTask(int)>
c0011e68:	83 c4 40             	add    esp,0x40
c0011e6b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e70:	5b                   	pop    ebx
c0011e71:	31 d2                	xor    edx,edx
c0011e73:	5e                   	pop    esi
c0011e74:	5f                   	pop    edi
c0011e75:	c3                   	ret    

c0011e76 <SysYield(regs*)>:
c0011e76:	83 ec 0c             	sub    esp,0xc
c0011e79:	fa                   	cli    
c0011e7a:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011e80:	e8 bb 19 00 00       	call   c0013840 <schedule()>
c0011e85:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011e8a:	48                   	dec    eax
c0011e8b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011e90:	75 01                	jne    c0011e93 <SysYield(regs*)+0x1d>
c0011e92:	fb                   	sti    
c0011e93:	31 c0                	xor    eax,eax
c0011e95:	31 d2                	xor    edx,edx
c0011e97:	83 c4 0c             	add    esp,0xc
c0011e9a:	c3                   	ret    

c0011e9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e9b:	55                   	push   ebp
c0011e9c:	57                   	push   edi
c0011e9d:	56                   	push   esi
c0011e9e:	53                   	push   ebx
c0011e9f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011ea5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011ead:	0f 95 c2             	setne  dl
c0011eb0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011eb8:	0f 94 c0             	sete   al
c0011ebb:	84 c2                	test   dl,al
c0011ebd:	74 34                	je     c0011ef3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ebf:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011eca:	74 27                	je     c0011ef3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ecc:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011ed3:	05 00 10 00 00       	add    eax,0x1000
c0011ed8:	89 c1                	mov    ecx,eax
c0011eda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011edf:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011ee5:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011eec:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011ef3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011f03:	6a 01                	push   0x1
c0011f05:	e8 47 74 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0011f0a:	83 c4 10             	add    esp,0x10
c0011f0d:	89 c3                	mov    ebx,eax
c0011f0f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f15:	0f 86 25 01 00 00    	jbe    c0012040 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011f1b:	c1 ee 0c             	shr    esi,0xc
c0011f1e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f25:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011f29:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f31:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011f38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f3c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011f43:	29 ef                	sub    edi,ebp
c0011f45:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f49:	0f 83 f8 00 00 00    	jae    c0012047 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f4f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f55:	76 05                	jbe    c0011f5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f57:	bf 00 10 00 00       	mov    edi,0x1000
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	31 d2                	xor    edx,edx
c0011f61:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f6e:	50                   	push   eax
c0011f6f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f73:	56                   	push   esi
c0011f74:	52                   	push   edx
c0011f75:	57                   	push   edi
c0011f76:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f80:	83 c4 20             	add    esp,0x20
c0011f83:	85 c0                	test   eax,eax
c0011f85:	75 06                	jne    c0011f8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f87:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f8b:	74 13                	je     c0011fa0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	53                   	push   ebx
c0011f91:	e8 af 76 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	31 c0                	xor    eax,eax
c0011f9b:	e9 7c 01 00 00       	jmp    c001211c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011fa0:	fa                   	cli    
c0011fa1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011fa7:	e8 a5 5b ff ff       	call   c0007b51 <Phys::allocatePage()>
c0011fac:	6a 07                	push   0x7
c0011fae:	89 c7                	mov    edi,eax
c0011fb0:	53                   	push   ebx
c0011fb1:	50                   	push   eax
c0011fb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fc0:	e8 4f 7a ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fc5:	83 c4 0c             	add    esp,0xc
c0011fc8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fcf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fd5:	6a 00                	push   0x0
c0011fd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fdf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fe5:	e8 9c 78 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c0011fea:	58                   	pop    eax
c0011feb:	5a                   	pop    edx
c0011fec:	68 07 0c 00 00       	push   0xc07
c0011ff1:	55                   	push   ebp
c0011ff2:	57                   	push   edi
c0011ff3:	89 df                	mov    edi,ebx
c0011ff5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ffc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012002:	6a 00                	push   0x0
c0012004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012009:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001200c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012012:	e8 bd 7d ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012017:	b9 00 10 00 00       	mov    ecx,0x1000
c001201c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001201e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012023:	83 c4 20             	add    esp,0x20
c0012026:	48                   	dec    eax
c0012027:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001202c:	85 c0                	test   eax,eax
c001202e:	75 01                	jne    c0012031 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012030:	fb                   	sti    
c0012031:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012037:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001203b:	e9 f1 fe ff ff       	jmp    c0011f31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012040:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012047:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001204e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012054:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001205a:	0f 86 ae 00 00 00    	jbe    c001210e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012060:	fa                   	cli    
c0012061:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0012067:	c1 ee 0c             	shr    esi,0xc
c001206a:	51                   	push   ecx
c001206b:	31 ff                	xor    edi,edi
c001206d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012074:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001207a:	6a 00                	push   0x0
c001207c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012081:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012084:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001208a:	e8 f7 77 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c001208f:	83 c4 10             	add    esp,0x10
c0012092:	e8 ba 5a ff ff       	call   c0007b51 <Phys::allocatePage()>
c0012097:	47                   	inc    edi
c0012098:	6a 07                	push   0x7
c001209a:	53                   	push   ebx
c001209b:	50                   	push   eax
c001209c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120a6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00120a9:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00120af:	e8 60 79 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120b4:	58                   	pop    eax
c00120b5:	5a                   	pop    edx
c00120b6:	68 07 0c 00 00       	push   0xc07
c00120bb:	55                   	push   ebp
c00120bc:	81 c5 00 10 00 00    	add    ebp,0x1000
c00120c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120c6:	50                   	push   eax
c00120c7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00120ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120d4:	6a 00                	push   0x0
c00120d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120e4:	e8 eb 7c ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00120e9:	83 c4 1c             	add    esp,0x1c
c00120ec:	68 00 10 00 00       	push   0x1000
c00120f1:	6a 00                	push   0x0
c00120f3:	53                   	push   ebx
c00120f4:	e8 d7 e3 fe ff       	call   c00004d0 <memset>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	39 fe                	cmp    esi,edi
c00120fe:	77 92                	ja     c0012092 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012100:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012105:	48                   	dec    eax
c0012106:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001210b:	75 01                	jne    c001210e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001210d:	fb                   	sti    
c001210e:	83 ec 0c             	sub    esp,0xc
c0012111:	53                   	push   ebx
c0012112:	e8 2e 75 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0012117:	83 c4 10             	add    esp,0x10
c001211a:	b0 01                	mov    al,0x1
c001211c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012122:	5b                   	pop    ebx
c0012123:	5e                   	pop    esi
c0012124:	5f                   	pop    edi
c0012125:	5d                   	pop    ebp
c0012126:	c3                   	ret    

c0012127 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012127:	55                   	push   ebp
c0012128:	57                   	push   edi
c0012129:	56                   	push   esi
c001212a:	53                   	push   ebx
c001212b:	83 ec 48             	sub    esp,0x48
c001212e:	68 14 01 00 00       	push   0x114
c0012133:	e8 3d 57 ff ff       	call   c0007875 <malloc>
c0012138:	83 c4 0c             	add    esp,0xc
c001213b:	89 c6                	mov    esi,eax
c001213d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012141:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012145:	50                   	push   eax
c0012146:	e8 39 8a ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001214b:	58                   	pop    eax
c001214c:	5a                   	pop    edx
c001214d:	6a 01                	push   0x1
c001214f:	56                   	push   esi
c0012150:	e8 ef 8a ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0012155:	83 c4 10             	add    esp,0x10
c0012158:	85 c0                	test   eax,eax
c001215a:	0f 85 47 01 00 00    	jne    c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012160:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	6a 34                	push   0x34
c001216d:	e8 03 57 ff ff       	call   c0007875 <malloc>
c0012172:	89 c3                	mov    ebx,eax
c0012174:	58                   	pop    eax
c0012175:	8b 06                	mov    eax,DWORD PTR [esi]
c0012177:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001217b:	57                   	push   edi
c001217c:	53                   	push   ebx
c001217d:	6a 00                	push   0x0
c001217f:	6a 34                	push   0x34
c0012181:	56                   	push   esi
c0012182:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012185:	83 c4 20             	add    esp,0x20
c0012188:	85 c0                	test   eax,eax
c001218a:	0f 85 17 01 00 00    	jne    c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012190:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012196:	0f 85 0b 01 00 00    	jne    c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001219c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001219f:	85 c0                	test   eax,eax
c00121a1:	0f 84 00 01 00 00    	je     c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121a7:	31 d2                	xor    edx,edx
c00121a9:	55                   	push   ebp
c00121aa:	52                   	push   edx
c00121ab:	50                   	push   eax
c00121ac:	56                   	push   esi
c00121ad:	e8 50 8b ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00121b2:	83 c4 10             	add    esp,0x10
c00121b5:	85 c0                	test   eax,eax
c00121b7:	0f 85 ea 00 00 00    	jne    c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121bd:	83 ec 0c             	sub    esp,0xc
c00121c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00121cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121cf:	0f af c2             	imul   eax,edx
c00121d2:	50                   	push   eax
c00121d3:	e8 9d 56 ff ff       	call   c0007875 <malloc>
c00121d8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00121de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00121e5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121e9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121ed:	0f af c2             	imul   eax,edx
c00121f0:	99                   	cdq    
c00121f1:	52                   	push   edx
c00121f2:	50                   	push   eax
c00121f3:	56                   	push   esi
c00121f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121f7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00121fa:	83 c4 20             	add    esp,0x20
c00121fd:	85 c0                	test   eax,eax
c00121ff:	0f 84 a2 00 00 00    	je     c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012205:	31 d2                	xor    edx,edx
c0012207:	51                   	push   ecx
c0012208:	52                   	push   edx
c0012209:	50                   	push   eax
c001220a:	56                   	push   esi
c001220b:	e8 f2 8a ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012210:	83 c4 10             	add    esp,0x10
c0012213:	85 c0                	test   eax,eax
c0012215:	0f 85 8c 00 00 00    	jne    c00122a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001221b:	83 ec 0c             	sub    esp,0xc
c001221e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012222:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012226:	31 ed                	xor    ebp,ebp
c0012228:	0f af c2             	imul   eax,edx
c001222b:	50                   	push   eax
c001222c:	e8 44 56 ff ff       	call   c0007875 <malloc>
c0012231:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012233:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012237:	89 3c 24             	mov    DWORD PTR [esp],edi
c001223a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001223e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012242:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012246:	0f af c2             	imul   eax,edx
c0012249:	99                   	cdq    
c001224a:	52                   	push   edx
c001224b:	50                   	push   eax
c001224c:	56                   	push   esi
c001224d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012250:	83 c4 20             	add    esp,0x20
c0012253:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001225b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001225f:	0f 86 80 00 00 00    	jbe    c00122e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012265:	0f b7 fd             	movzx  edi,bp
c0012268:	c1 e7 05             	shl    edi,0x5
c001226b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001226f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012272:	75 6b                	jne    c00122df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012274:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012277:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001227b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001227e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012282:	52                   	push   edx
c0012283:	31 d2                	xor    edx,edx
c0012285:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012288:	52                   	push   edx
c0012289:	50                   	push   eax
c001228a:	56                   	push   esi
c001228b:	e8 72 8a ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012290:	83 c4 10             	add    esp,0x10
c0012293:	85 c0                	test   eax,eax
c0012295:	74 17                	je     c00122ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012297:	83 ec 0c             	sub    esp,0xc
c001229a:	68 1b f1 01 c0       	push   0xc001f11b
c001229f:	e8 6a 83 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00122a4:	83 c4 10             	add    esp,0x10
c00122a7:	31 c0                	xor    eax,eax
c00122a9:	e9 87 00 00 00       	jmp    c0012335 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00122ae:	83 ec 0c             	sub    esp,0xc
c00122b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00122b4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00122b7:	50                   	push   eax
c00122b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122c0:	56                   	push   esi
c00122c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00122c5:	e8 d1 fb ff ff       	call   c0011e9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00122ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122ce:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00122d2:	83 c4 20             	add    esp,0x20
c00122d5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00122d9:	73 04                	jae    c00122df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00122db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122df:	45                   	inc    ebp
c00122e0:	e9 76 ff ff ff       	jmp    c001225b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00122e5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00122e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122f1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00122f7:	83 ec 0c             	sub    esp,0xc
c00122fa:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012300:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012305:	05 00 10 00 00       	add    eax,0x1000
c001230a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001230d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012311:	e8 6f 55 ff ff       	call   c0007885 <free>
c0012316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012319:	e8 67 55 ff ff       	call   c0007885 <free>
c001231e:	58                   	pop    eax
c001231f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012323:	e8 5d 55 ff ff       	call   c0007885 <free>
c0012328:	89 34 24             	mov    DWORD PTR [esp],esi
c001232b:	e8 72 89 ff ff       	call   c000aca2 <File::close()>
c0012330:	83 c4 10             	add    esp,0x10
c0012333:	b0 01                	mov    al,0x1
c0012335:	83 c4 3c             	add    esp,0x3c
c0012338:	5b                   	pop    ebx
c0012339:	5e                   	pop    esi
c001233a:	5f                   	pop    edi
c001233b:	5d                   	pop    ebp
c001233c:	c3                   	ret    

c001233d <Thr::runtimeReferenceHelper()>:
c001233d:	83 ec 18             	sub    esp,0x18
c0012340:	68 23 f1 01 c0       	push   0xc001f123
c0012345:	e8 c4 82 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001234a:	fa                   	cli    
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	eb fe                	jmp    c001234e <Thr::runtimeReferenceHelper()+0x11>

c0012350 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012350:	57                   	push   edi
c0012351:	56                   	push   esi
c0012352:	53                   	push   ebx
c0012353:	31 db                	xor    ebx,ebx
c0012355:	39 1d 40 61 02 c0    	cmp    DWORD PTR ds:0xc0026140,ebx
c001235b:	7e 3c                	jle    c0012399 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001235d:	8b 34 9d c0 60 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9f40]
c0012364:	31 ff                	xor    edi,edi
c0012366:	39 3c 9d c0 5f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda040],edi
c001236d:	7e 27                	jle    c0012396 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001236f:	50                   	push   eax
c0012370:	50                   	push   eax
c0012371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012375:	8b 06                	mov    eax,DWORD PTR [esi]
c0012377:	03 04 9d 40 60 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9fc0]
c001237e:	50                   	push   eax
c001237f:	e8 5c e3 fe ff       	call   c00006e0 <strcmp>
c0012384:	83 c4 10             	add    esp,0x10
c0012387:	85 c0                	test   eax,eax
c0012389:	75 05                	jne    c0012390 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001238b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001238e:	eb 0b                	jmp    c001239b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012390:	83 c6 10             	add    esi,0x10
c0012393:	47                   	inc    edi
c0012394:	eb d0                	jmp    c0012366 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012396:	43                   	inc    ebx
c0012397:	eb bc                	jmp    c0012355 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012399:	31 c0                	xor    eax,eax
c001239b:	5b                   	pop    ebx
c001239c:	5e                   	pop    esi
c001239d:	5f                   	pop    edi
c001239e:	c3                   	ret    

c001239f <Thr::loadKernelSymbolTable(char const*)>:
c001239f:	55                   	push   ebp
c00123a0:	57                   	push   edi
c00123a1:	56                   	push   esi
c00123a2:	53                   	push   ebx
c00123a3:	83 ec 68             	sub    esp,0x68
c00123a6:	8b 35 90 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026190
c00123ac:	68 14 01 00 00       	push   0x114
c00123b1:	e8 bf 54 ff ff       	call   c0007875 <malloc>
c00123b6:	83 c4 0c             	add    esp,0xc
c00123b9:	89 c3                	mov    ebx,eax
c00123bb:	56                   	push   esi
c00123bc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00123c0:	50                   	push   eax
c00123c1:	e8 be 87 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00123c6:	5e                   	pop    esi
c00123c7:	5f                   	pop    edi
c00123c8:	6a 01                	push   0x1
c00123ca:	53                   	push   ebx
c00123cb:	e8 74 88 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	85 c0                	test   eax,eax
c00123d5:	74 0a                	je     c00123e1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00123d7:	83 ec 0c             	sub    esp,0xc
c00123da:	68 45 f1 01 c0       	push   0xc001f145
c00123df:	eb 34                	jmp    c0012415 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00123e1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	6a 34                	push   0x34
c00123ee:	e8 82 54 ff ff       	call   c0007875 <malloc>
c00123f3:	59                   	pop    ecx
c00123f4:	89 c7                	mov    edi,eax
c00123f6:	8d 74 24 34          	lea    esi,[esp+0x34]
c00123fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123fc:	56                   	push   esi
c00123fd:	57                   	push   edi
c00123fe:	6a 00                	push   0x0
c0012400:	6a 34                	push   0x34
c0012402:	53                   	push   ebx
c0012403:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012406:	83 c4 20             	add    esp,0x20
c0012409:	85 c0                	test   eax,eax
c001240b:	74 17                	je     c0012424 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	68 5c f1 01 c0       	push   0xc001f15c
c0012415:	e8 09 df ff ff       	call   c0010323 <KePanic(char const*)>
c001241a:	83 c4 10             	add    esp,0x10
c001241d:	31 c0                	xor    eax,eax
c001241f:	e9 31 02 00 00       	jmp    c0012655 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012424:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001242a:	75 e1                	jne    c001240d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001242c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001242f:	85 c0                	test   eax,eax
c0012431:	74 da                	je     c001240d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012433:	52                   	push   edx
c0012434:	31 d2                	xor    edx,edx
c0012436:	52                   	push   edx
c0012437:	50                   	push   eax
c0012438:	53                   	push   ebx
c0012439:	e8 c4 88 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	85 c0                	test   eax,eax
c0012443:	75 c8                	jne    c001240d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012445:	83 ec 0c             	sub    esp,0xc
c0012448:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001244c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012450:	31 ed                	xor    ebp,ebp
c0012452:	0f af c2             	imul   eax,edx
c0012455:	50                   	push   eax
c0012456:	e8 1a 54 ff ff       	call   c0007875 <malloc>
c001245b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001245d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012461:	89 34 24             	mov    DWORD PTR [esp],esi
c0012464:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012468:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001246c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012470:	0f af c2             	imul   eax,edx
c0012473:	99                   	cdq    
c0012474:	52                   	push   edx
c0012475:	50                   	push   eax
c0012476:	53                   	push   ebx
c0012477:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001247a:	83 c4 20             	add    esp,0x20
c001247d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012485:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001248d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012495:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001249d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00124a1:	0f 86 aa 00 00 00    	jbe    c0012551 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00124a7:	0f b7 f5             	movzx  esi,bp
c00124aa:	6b f6 28             	imul   esi,esi,0x28
c00124ad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00124b1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00124b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124b8:	50                   	push   eax
c00124b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00124bd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00124c1:	8b 16                	mov    edx,DWORD PTR [esi]
c00124c3:	6b c0 28             	imul   eax,eax,0x28
c00124c6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00124ca:	89 d0                	mov    eax,edx
c00124cc:	31 d2                	xor    edx,edx
c00124ce:	52                   	push   edx
c00124cf:	50                   	push   eax
c00124d0:	53                   	push   ebx
c00124d1:	e8 2c 88 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00124d6:	83 c4 0c             	add    esp,0xc
c00124d9:	6a 20                	push   0x20
c00124db:	6a 00                	push   0x0
c00124dd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124e1:	52                   	push   edx
c00124e2:	e8 e9 df fe ff       	call   c00004d0 <memset>
c00124e7:	58                   	pop    eax
c00124e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124ea:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00124ee:	51                   	push   ecx
c00124ef:	8d 54 24 40          	lea    edx,[esp+0x40]
c00124f3:	52                   	push   edx
c00124f4:	6a 00                	push   0x0
c00124f6:	6a 1f                	push   0x1f
c00124f8:	53                   	push   ebx
c00124f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124fc:	83 c4 18             	add    esp,0x18
c00124ff:	68 73 f1 01 c0       	push   0xc001f173
c0012504:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012508:	52                   	push   edx
c0012509:	e8 d2 e1 fe ff       	call   c00006e0 <strcmp>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	85 c0                	test   eax,eax
c0012513:	75 0f                	jne    c0012524 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012515:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012518:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001251c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012524:	50                   	push   eax
c0012525:	50                   	push   eax
c0012526:	68 7b f1 01 c0       	push   0xc001f17b
c001252b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001252f:	50                   	push   eax
c0012530:	e8 ab e1 fe ff       	call   c00006e0 <strcmp>
c0012535:	83 c4 10             	add    esp,0x10
c0012538:	85 c0                	test   eax,eax
c001253a:	75 0f                	jne    c001254b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001253c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001253f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012543:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012547:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001254b:	45                   	inc    ebp
c001254c:	e9 4c ff ff ff       	jmp    c001249d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012551:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012556:	75 10                	jne    c0012568 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012558:	83 ec 0c             	sub    esp,0xc
c001255b:	68 83 f1 01 c0       	push   0xc001f183
c0012560:	e8 be dd ff ff       	call   c0010323 <KePanic(char const*)>
c0012565:	83 c4 10             	add    esp,0x10
c0012568:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001256d:	75 10                	jne    c001257f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	68 83 f1 01 c0       	push   0xc001f183
c0012577:	e8 a7 dd ff ff       	call   c0010323 <KePanic(char const*)>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	31 d2                	xor    edx,edx
c0012581:	50                   	push   eax
c0012582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012586:	52                   	push   edx
c0012587:	50                   	push   eax
c0012588:	53                   	push   ebx
c0012589:	e8 74 87 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c001258e:	5a                   	pop    edx
c001258f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012593:	e8 dd 52 ff ff       	call   c0007875 <malloc>
c0012598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001259c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125a0:	31 c9                	xor    ecx,ecx
c00125a2:	5e                   	pop    esi
c00125a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125a5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00125a9:	55                   	push   ebp
c00125aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ae:	51                   	push   ecx
c00125af:	52                   	push   edx
c00125b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00125b4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00125b8:	53                   	push   ebx
c00125b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125bc:	83 c4 14             	add    esp,0x14
c00125bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00125c3:	e8 ad 52 ff ff       	call   c0007875 <malloc>
c00125c8:	89 c6                	mov    esi,eax
c00125ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125cf:	56                   	push   esi
c00125d0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00125d8:	51                   	push   ecx
c00125d9:	52                   	push   edx
c00125da:	53                   	push   ebx
c00125db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125e2:	8b 15 40 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026140
c00125e8:	83 c4 1c             	add    esp,0x1c
c00125eb:	c1 e8 04             	shr    eax,0x4
c00125ee:	89 04 95 c0 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda040],eax
c00125f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125f9:	31 d2                	xor    edx,edx
c00125fb:	52                   	push   edx
c00125fc:	50                   	push   eax
c00125fd:	53                   	push   ebx
c00125fe:	e8 ff 86 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012603:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012605:	31 d2                	xor    edx,edx
c0012607:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001260a:	56                   	push   esi
c001260b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001260f:	52                   	push   edx
c0012610:	50                   	push   eax
c0012611:	53                   	push   ebx
c0012612:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012615:	83 c4 14             	add    esp,0x14
c0012618:	53                   	push   ebx
c0012619:	e8 84 86 ff ff       	call   c000aca2 <File::close()>
c001261e:	5d                   	pop    ebp
c001261f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012623:	e8 5d 52 ff ff       	call   c0007885 <free>
c0012628:	89 3c 24             	mov    DWORD PTR [esp],edi
c001262b:	e8 55 52 ff ff       	call   c0007885 <free>
c0012630:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c0012635:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012639:	8d 50 01             	lea    edx,[eax+0x1]
c001263c:	89 0c 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],ecx
c0012643:	89 34 85 40 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fc0],esi
c001264a:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c0012650:	83 c4 10             	add    esp,0x10
c0012653:	b0 01                	mov    al,0x1
c0012655:	83 c4 5c             	add    esp,0x5c
c0012658:	5b                   	pop    ebx
c0012659:	5e                   	pop    esi
c001265a:	5f                   	pop    edi
c001265b:	5d                   	pop    ebp
c001265c:	c3                   	ret    

c001265d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001265d:	55                   	push   ebp
c001265e:	57                   	push   edi
c001265f:	56                   	push   esi
c0012660:	53                   	push   ebx
c0012661:	81 ec 68 03 00 00    	sub    esp,0x368
c0012667:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001266e:	8b 1d 90 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026190
c0012674:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012678:	68 14 01 00 00       	push   0x114
c001267d:	e8 f3 51 ff ff       	call   c0007875 <malloc>
c0012682:	83 c4 0c             	add    esp,0xc
c0012685:	89 c5                	mov    ebp,eax
c0012687:	53                   	push   ebx
c0012688:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001268f:	50                   	push   eax
c0012690:	e8 ef 84 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0012695:	5e                   	pop    esi
c0012696:	5f                   	pop    edi
c0012697:	6a 01                	push   0x1
c0012699:	55                   	push   ebp
c001269a:	e8 a5 85 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	85 c0                	test   eax,eax
c00126a4:	0f 85 a7 06 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126aa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00126b2:	83 ec 0c             	sub    esp,0xc
c00126b5:	6a 34                	push   0x34
c00126b7:	e8 b9 51 ff ff       	call   c0007875 <malloc>
c00126bc:	5b                   	pop    ebx
c00126bd:	89 c7                	mov    edi,eax
c00126bf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00126c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126c6:	53                   	push   ebx
c00126c7:	57                   	push   edi
c00126c8:	6a 00                	push   0x0
c00126ca:	6a 34                	push   0x34
c00126cc:	55                   	push   ebp
c00126cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126d0:	83 c4 20             	add    esp,0x20
c00126d3:	85 c0                	test   eax,eax
c00126d5:	0f 85 76 06 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126db:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126e1:	0f 85 6a 06 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126e7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126ea:	85 c0                	test   eax,eax
c00126ec:	0f 84 5f 06 00 00    	je     c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126f2:	31 d2                	xor    edx,edx
c00126f4:	51                   	push   ecx
c00126f5:	52                   	push   edx
c00126f6:	50                   	push   eax
c00126f7:	55                   	push   ebp
c00126f8:	e8 05 86 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00126fd:	83 c4 10             	add    esp,0x10
c0012700:	85 c0                	test   eax,eax
c0012702:	0f 85 49 06 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001270e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012712:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012716:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001271a:	0f af c2             	imul   eax,edx
c001271d:	50                   	push   eax
c001271e:	e8 52 51 ff ff       	call   c0007875 <malloc>
c0012723:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012726:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001272a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001272d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012731:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012735:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012739:	0f af c2             	imul   eax,edx
c001273c:	99                   	cdq    
c001273d:	52                   	push   edx
c001273e:	50                   	push   eax
c001273f:	55                   	push   ebp
c0012740:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012743:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012746:	83 c4 20             	add    esp,0x20
c0012749:	85 c0                	test   eax,eax
c001274b:	0f 84 00 06 00 00    	je     c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012751:	52                   	push   edx
c0012752:	31 d2                	xor    edx,edx
c0012754:	52                   	push   edx
c0012755:	50                   	push   eax
c0012756:	55                   	push   ebp
c0012757:	e8 a6 85 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c001275c:	83 c4 10             	add    esp,0x10
c001275f:	85 c0                	test   eax,eax
c0012761:	0f 85 ea 05 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012767:	83 ec 0c             	sub    esp,0xc
c001276a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001276e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012772:	31 f6                	xor    esi,esi
c0012774:	0f af c2             	imul   eax,edx
c0012777:	50                   	push   eax
c0012778:	e8 f8 50 ff ff       	call   c0007875 <malloc>
c001277d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012780:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012784:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012787:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001278b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001278f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012793:	0f af c2             	imul   eax,edx
c0012796:	99                   	cdq    
c0012797:	52                   	push   edx
c0012798:	50                   	push   eax
c0012799:	55                   	push   ebp
c001279a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001279d:	83 c4 20             	add    esp,0x20
c00127a0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00127a4:	0f 86 8a 00 00 00    	jbe    c0012834 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00127aa:	0f b7 de             	movzx  ebx,si
c00127ad:	c1 e3 05             	shl    ebx,0x5
c00127b0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00127b4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00127b7:	75 75                	jne    c001282e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00127b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127bc:	31 d2                	xor    edx,edx
c00127be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00127c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127c9:	50                   	push   eax
c00127ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00127cd:	52                   	push   edx
c00127ce:	50                   	push   eax
c00127cf:	55                   	push   ebp
c00127d0:	e8 2d 85 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00127d5:	83 c4 10             	add    esp,0x10
c00127d8:	85 c0                	test   eax,eax
c00127da:	0f 85 71 05 00 00    	jne    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127e0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00127e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127ea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00127ee:	31 d2                	xor    edx,edx
c00127f0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00127f4:	83 ec 0c             	sub    esp,0xc
c00127f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012802:	50                   	push   eax
c0012803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001280b:	52                   	push   edx
c001280c:	50                   	push   eax
c001280d:	55                   	push   ebp
c001280e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012811:	83 c4 1c             	add    esp,0x1c
c0012814:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012817:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001281a:	50                   	push   eax
c001281b:	6a 00                	push   0x0
c001281d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012821:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012825:	50                   	push   eax
c0012826:	e8 a5 dc fe ff       	call   c00004d0 <memset>
c001282b:	83 c4 10             	add    esp,0x10
c001282e:	46                   	inc    esi
c001282f:	e9 6c ff ff ff       	jmp    c00127a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012834:	53                   	push   ebx
c0012835:	31 db                	xor    ebx,ebx
c0012837:	68 00 01 00 00       	push   0x100
c001283c:	6a 00                	push   0x0
c001283e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012842:	50                   	push   eax
c0012843:	e8 88 dc fe ff       	call   c00004d0 <memset>
c0012848:	83 c4 0c             	add    esp,0xc
c001284b:	68 00 01 00 00       	push   0x100
c0012850:	6a 00                	push   0x0
c0012852:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012859:	50                   	push   eax
c001285a:	e8 71 dc fe ff       	call   c00004d0 <memset>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001286a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012872:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001287a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012882:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001288a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001288e:	0f 86 30 01 00 00    	jbe    c00129c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012894:	0f b7 f3             	movzx  esi,bx
c0012897:	6b f6 28             	imul   esi,esi,0x28
c001289a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001289e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00128a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128a5:	52                   	push   edx
c00128a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128aa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00128ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00128b0:	6b d2 28             	imul   edx,edx,0x28
c00128b3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00128b7:	31 d2                	xor    edx,edx
c00128b9:	52                   	push   edx
c00128ba:	50                   	push   eax
c00128bb:	55                   	push   ebp
c00128bc:	e8 41 84 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00128c1:	83 c4 0c             	add    esp,0xc
c00128c4:	6a 20                	push   0x20
c00128c6:	6a 00                	push   0x0
c00128c8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128cf:	51                   	push   ecx
c00128d0:	e8 fb db fe ff       	call   c00004d0 <memset>
c00128d5:	59                   	pop    ecx
c00128d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128d9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00128dd:	52                   	push   edx
c00128de:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00128e5:	51                   	push   ecx
c00128e6:	6a 00                	push   0x0
c00128e8:	6a 1f                	push   0x1f
c00128ea:	55                   	push   ebp
c00128eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128ee:	83 c4 1c             	add    esp,0x1c
c00128f1:	6a 09                	push   0x9
c00128f3:	68 9d f1 01 c0       	push   0xc001f19d
c00128f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128ff:	51                   	push   ecx
c0012900:	e8 8b da fe ff       	call   c0000390 <memcmp>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	85 c0                	test   eax,eax
c001290a:	75 21                	jne    c001292d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001290c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012910:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012914:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012918:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001291c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001291f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012926:	89 d0                	mov    eax,edx
c0012928:	40                   	inc    eax
c0012929:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001292d:	50                   	push   eax
c001292e:	6a 09                	push   0x9
c0012930:	68 a7 f1 01 c0       	push   0xc001f1a7
c0012935:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001293c:	50                   	push   eax
c001293d:	e8 4e da fe ff       	call   c0000390 <memcmp>
c0012942:	83 c4 10             	add    esp,0x10
c0012945:	85 c0                	test   eax,eax
c0012947:	75 21                	jne    c001296a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012951:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012955:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012959:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001295c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012963:	89 d0                	mov    eax,edx
c0012965:	40                   	inc    eax
c0012966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001296a:	50                   	push   eax
c001296b:	50                   	push   eax
c001296c:	68 73 f1 01 c0       	push   0xc001f173
c0012971:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012978:	50                   	push   eax
c0012979:	e8 62 dd fe ff       	call   c00006e0 <strcmp>
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	85 c0                	test   eax,eax
c0012983:	75 0f                	jne    c0012994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012985:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012988:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001298c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012990:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012994:	50                   	push   eax
c0012995:	50                   	push   eax
c0012996:	68 7b f1 01 c0       	push   0xc001f17b
c001299b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129a2:	50                   	push   eax
c00129a3:	e8 38 dd fe ff       	call   c00006e0 <strcmp>
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	85 c0                	test   eax,eax
c00129ad:	75 0f                	jne    c00129be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00129af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00129be:	43                   	inc    ebx
c00129bf:	e9 c6 fe ff ff       	jmp    c001288a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00129c4:	31 d2                	xor    edx,edx
c00129c6:	50                   	push   eax
c00129c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129cb:	52                   	push   edx
c00129cc:	50                   	push   eax
c00129cd:	55                   	push   ebp
c00129ce:	e8 2f 83 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00129d3:	58                   	pop    eax
c00129d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129d8:	e8 98 4e ff ff       	call   c0007875 <malloc>
c00129dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129e4:	31 d2                	xor    edx,edx
c00129e6:	58                   	pop    eax
c00129e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00129eb:	53                   	push   ebx
c00129ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	52                   	push   edx
c00129f5:	50                   	push   eax
c00129f6:	55                   	push   ebp
c00129f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129fa:	83 c4 14             	add    esp,0x14
c00129fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a01:	e8 6f 4e ff ff       	call   c0007875 <malloc>
c0012a06:	31 d2                	xor    edx,edx
c0012a08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a0c:	83 c4 0c             	add    esp,0xc
c0012a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a13:	52                   	push   edx
c0012a14:	50                   	push   eax
c0012a15:	55                   	push   ebp
c0012a16:	e8 e7 82 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012a1b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a1e:	31 d2                	xor    edx,edx
c0012a20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a2b:	52                   	push   edx
c0012a2c:	50                   	push   eax
c0012a2d:	55                   	push   ebp
c0012a2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a31:	83 c4 20             	add    esp,0x20
c0012a34:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a40:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012a44:	0f 84 0b 03 00 00    	je     c0012d55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a4a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a51:	31 d2                	xor    edx,edx
c0012a53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a57:	c1 e8 03             	shr    eax,0x3
c0012a5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a5e:	51                   	push   ecx
c0012a5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a63:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a67:	52                   	push   edx
c0012a68:	50                   	push   eax
c0012a69:	55                   	push   ebp
c0012a6a:	e8 93 82 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0012a6f:	5b                   	pop    ebx
c0012a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a74:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a7b:	e8 f5 4d ff ff       	call   c0007875 <malloc>
c0012a80:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a87:	31 d2                	xor    edx,edx
c0012a89:	5e                   	pop    esi
c0012a8a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a8e:	50                   	push   eax
c0012a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a97:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a9e:	52                   	push   edx
c0012a9f:	50                   	push   eax
c0012aa0:	55                   	push   ebp
c0012aa1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012aa4:	83 c4 20             	add    esp,0x20
c0012aa7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012aaf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ab3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012ab7:	0f 8d 7c 02 00 00    	jge    c0012d39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012abd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ac5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012aca:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012acd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ad5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012ad9:	89 d8                	mov    eax,ebx
c0012adb:	c1 e8 08             	shr    eax,0x8
c0012ade:	89 c6                	mov    esi,eax
c0012ae0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ae4:	c1 e6 04             	shl    esi,0x4
c0012ae7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012aeb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012aee:	85 d2                	test   edx,edx
c0012af0:	0f 85 bf 00 00 00    	jne    c0012bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012afd:	03 06                	add    eax,DWORD PTR [esi]
c0012aff:	50                   	push   eax
c0012b00:	e8 4b f8 ff ff       	call   c0012350 <Thr::getAddressOfKernelSymbol(char const*)>
c0012b05:	83 c4 10             	add    esp,0x10
c0012b08:	89 c2                	mov    edx,eax
c0012b0a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012b0f:	85 c0                	test   eax,eax
c0012b11:	0f 85 9e 00 00 00    	jne    c0012bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b17:	83 ec 0c             	sub    esp,0xc
c0012b1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b1e:	03 06                	add    eax,DWORD PTR [esi]
c0012b20:	50                   	push   eax
c0012b21:	e8 4e d9 ff ff       	call   c0010474 <KeResolveCompatibilitySymbol(char*)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	89 c2                	mov    edx,eax
c0012b2b:	85 c0                	test   eax,eax
c0012b2d:	0f 85 82 00 00 00    	jne    c0012bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b33:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012b37:	50                   	push   eax
c0012b38:	50                   	push   eax
c0012b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b3d:	03 06                	add    eax,DWORD PTR [esi]
c0012b3f:	50                   	push   eax
c0012b40:	68 b1 f1 01 c0       	push   0xc001f1b1
c0012b45:	e8 c4 7a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012b4a:	58                   	pop    eax
c0012b4b:	5a                   	pop    edx
c0012b4c:	68 cb f1 01 c0       	push   0xc001f1cb
c0012b51:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b58:	50                   	push   eax
c0012b59:	e8 a2 da fe ff       	call   c0000600 <strcpy>
c0012b5e:	59                   	pop    ecx
c0012b5f:	58                   	pop    eax
c0012b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b64:	03 06                	add    eax,DWORD PTR [esi]
c0012b66:	50                   	push   eax
c0012b67:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b6e:	50                   	push   eax
c0012b6f:	e8 4c dc fe ff       	call   c00007c0 <strcat>
c0012b74:	58                   	pop    eax
c0012b75:	5a                   	pop    edx
c0012b76:	68 61 f2 01 c0       	push   0xc001f261
c0012b7b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b82:	50                   	push   eax
c0012b83:	e8 38 dc fe ff       	call   c00007c0 <strcat>
c0012b88:	83 c4 10             	add    esp,0x10
c0012b8b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b90:	0f 84 5d 01 00 00    	je     c0012cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b96:	83 ec 0c             	sub    esp,0xc
c0012b99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ba0:	50                   	push   eax
c0012ba1:	e8 7d d7 ff ff       	call   c0010323 <KePanic(char const*)>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012bad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012bb1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012bb5:	80 fb 01             	cmp    bl,0x1
c0012bb8:	0f 85 88 00 00 00    	jne    c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012bbe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012bc5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012bc9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012bcd:	01 ce                	add    esi,ecx
c0012bcf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bd5:	0f 94 c0             	sete   al
c0012bd8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bde:	0f 94 c3             	sete   bl
c0012be1:	09 c3                	or     ebx,eax
c0012be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0012be5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012bea:	74 41                	je     c0012c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012bec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bef:	84 db                	test   bl,bl
c0012bf1:	75 15                	jne    c0012c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012bf3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bf7:	66 83 f8 0c          	cmp    ax,0xc
c0012bfb:	76 05                	jbe    c0012c02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012bfd:	b8 0c 00 00 00       	mov    eax,0xc
c0012c02:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c06:	76 37                	jbe    c0012c3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c08:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012c0c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c11:	0f 84 dc 00 00 00    	je     c0012cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c17:	83 ec 0c             	sub    esp,0xc
c0012c1a:	68 e2 f1 01 c0       	push   0xc001f1e2
c0012c1f:	e8 ff d6 ff ff       	call   c0010323 <KePanic(char const*)>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c2b:	eb 12                	jmp    c0012c3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c2d:	01 c1                	add    ecx,eax
c0012c2f:	84 db                	test   bl,bl
c0012c31:	75 0c                	jne    c0012c3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c37:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c3b:	77 02                	ja     c0012c3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c3d:	01 d1                	add    ecx,edx
c0012c3f:	89 0e                	mov    DWORD PTR [esi],ecx
c0012c41:	e9 ea 00 00 00       	jmp    c0012d30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c46:	80 fb 02             	cmp    bl,0x2
c0012c49:	75 7c                	jne    c0012cc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c4b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c52:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c56:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c5a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c60:	74 20                	je     c0012c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c62:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c68:	74 18                	je     c0012c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c6e:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c73:	66 83 f8 0e          	cmp    ax,0xe
c0012c77:	77 03                	ja     c0012c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c79:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c7c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c80:	76 1f                	jbe    c0012ca1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c82:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c86:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c8b:	74 66                	je     c0012cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c8d:	83 ec 0c             	sub    esp,0xc
c0012c90:	68 fe f1 01 c0       	push   0xc001f1fe
c0012c95:	e8 89 d6 ff ff       	call   c0010323 <KePanic(char const*)>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ca1:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ca3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012ca8:	74 13                	je     c0012cbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012caa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012cae:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012cb5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012cb9:	01 c8                	add    eax,ecx
c0012cbb:	eb 04                	jmp    c0012cc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012cbd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012cc1:	01 c2                	add    edx,eax
c0012cc3:	89 16                	mov    DWORD PTR [esi],edx
c0012cc5:	eb 69                	jmp    c0012d30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cc7:	0f b6 db             	movzx  ebx,bl
c0012cca:	50                   	push   eax
c0012ccb:	50                   	push   eax
c0012ccc:	53                   	push   ebx
c0012ccd:	68 1a f2 01 c0       	push   0xc001f21a
c0012cd2:	e8 37 79 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cdf:	74 12                	je     c0012cf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ce1:	83 ec 0c             	sub    esp,0xc
c0012ce4:	68 25 f2 01 c0       	push   0xc001f225
c0012ce9:	e8 35 d6 ff ff       	call   c0010323 <KePanic(char const*)>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	eb 3d                	jmp    c0012d30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cf3:	83 ec 0c             	sub    esp,0xc
c0012cf6:	55                   	push   ebp
c0012cf7:	e8 a6 7f ff ff       	call   c000aca2 <File::close()>
c0012cfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d05:	59                   	pop    ecx
c0012d06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d0a:	e8 76 4b ff ff       	call   c0007885 <free>
c0012d0f:	5b                   	pop    ebx
c0012d10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d14:	e8 6c 4b ff ff       	call   c0007885 <free>
c0012d19:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d1c:	e8 64 4b ff ff       	call   c0007885 <free>
c0012d21:	5e                   	pop    esi
c0012d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d26:	e8 5a 4b ff ff       	call   c0007885 <free>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	eb 21                	jmp    c0012d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012d30:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012d34:	e9 76 fd ff ff       	jmp    c0012aaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012d39:	83 ec 0c             	sub    esp,0xc
c0012d3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d40:	e8 40 4b ff ff       	call   c0007885 <free>
c0012d45:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	e9 eb fc ff ff       	jmp    c0012a3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d51:	31 c0                	xor    eax,eax
c0012d53:	eb 33                	jmp    c0012d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d55:	83 ec 0c             	sub    esp,0xc
c0012d58:	55                   	push   ebp
c0012d59:	e8 44 7f ff ff       	call   c000aca2 <File::close()>
c0012d5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d67:	58                   	pop    eax
c0012d68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d6c:	e8 14 4b ff ff       	call   c0007885 <free>
c0012d71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d74:	e8 0c 4b ff ff       	call   c0007885 <free>
c0012d79:	5a                   	pop    edx
c0012d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d7e:	e8 02 4b ff ff       	call   c0007885 <free>
c0012d83:	83 c4 10             	add    esp,0x10
c0012d86:	b0 01                	mov    al,0x1
c0012d88:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d8e:	5b                   	pop    ebx
c0012d8f:	5e                   	pop    esi
c0012d90:	5f                   	pop    edi
c0012d91:	5d                   	pop    ebp
c0012d92:	c3                   	ret    

c0012d93 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d93:	56                   	push   esi
c0012d94:	31 d2                	xor    edx,edx
c0012d96:	53                   	push   ebx
c0012d97:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012da1:	39 d3                	cmp    ebx,edx
c0012da3:	7e 1b                	jle    c0012dc0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012da5:	8b 04 95 c0 5b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda440]
c0012dac:	39 c8                	cmp    eax,ecx
c0012dae:	77 0d                	ja     c0012dbd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012db0:	8b 34 95 c0 59 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda640]
c0012db7:	01 c6                	add    esi,eax
c0012db9:	39 ce                	cmp    esi,ecx
c0012dbb:	77 05                	ja     c0012dc2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012dbd:	42                   	inc    edx
c0012dbe:	eb e1                	jmp    c0012da1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012dc0:	31 c0                	xor    eax,eax
c0012dc2:	5b                   	pop    ebx
c0012dc3:	5e                   	pop    esi
c0012dc4:	c3                   	ret    

c0012dc5 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012dc5:	53                   	push   ebx
c0012dc6:	31 c0                	xor    eax,eax
c0012dc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012dcc:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012dd2:	39 c3                	cmp    ebx,eax
c0012dd4:	7e 22                	jle    c0012df8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012dd6:	8b 14 85 c0 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda440]
c0012ddd:	39 ca                	cmp    edx,ecx
c0012ddf:	77 14                	ja     c0012df5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012de1:	03 14 85 c0 59 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda640]
c0012de8:	39 ca                	cmp    edx,ecx
c0012dea:	76 09                	jbe    c0012df5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012dec:	8b 04 85 c0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda240]
c0012df3:	eb 05                	jmp    c0012dfa <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012df5:	40                   	inc    eax
c0012df6:	eb da                	jmp    c0012dd2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012df8:	31 c0                	xor    eax,eax
c0012dfa:	5b                   	pop    ebx
c0012dfb:	c3                   	ret    

c0012dfc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012dfc:	53                   	push   ebx
c0012dfd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e01:	53                   	push   ebx
c0012e02:	e8 8c ff ff ff       	call   c0012d93 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012e07:	5a                   	pop    edx
c0012e08:	31 d2                	xor    edx,edx
c0012e0a:	85 c0                	test   eax,eax
c0012e0c:	74 04                	je     c0012e12 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012e0e:	89 da                	mov    edx,ebx
c0012e10:	29 c2                	sub    edx,eax
c0012e12:	89 d0                	mov    eax,edx
c0012e14:	5b                   	pop    ebx
c0012e15:	c3                   	ret    

c0012e16 <Thr::loadDLL(char const*, bool)>:
c0012e16:	55                   	push   ebp
c0012e17:	57                   	push   edi
c0012e18:	56                   	push   esi
c0012e19:	53                   	push   ebx
c0012e1a:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e20:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012e27:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012e2e:	56                   	push   esi
c0012e2f:	68 3d f2 01 c0       	push   0xc001f23d
c0012e34:	e8 d5 77 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012e39:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012e40:	e8 30 4a ff ff       	call   c0007875 <malloc>
c0012e45:	83 c4 0c             	add    esp,0xc
c0012e48:	89 c3                	mov    ebx,eax
c0012e4a:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0012e50:	56                   	push   esi
c0012e51:	50                   	push   eax
c0012e52:	e8 2d 7d ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	85 db                	test   ebx,ebx
c0012e5c:	75 3c                	jne    c0012e9a <Thr::loadDLL(char const*, bool)+0x84>
c0012e5e:	89 f8                	mov    eax,edi
c0012e60:	84 c0                	test   al,al
c0012e62:	0f 84 d2 01 00 00    	je     c001303a <Thr::loadDLL(char const*, bool)+0x224>
c0012e68:	55                   	push   ebp
c0012e69:	55                   	push   ebp
c0012e6a:	68 4e f2 01 c0       	push   0xc001f24e
c0012e6f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e73:	55                   	push   ebp
c0012e74:	e8 87 d7 fe ff       	call   c0000600 <strcpy>
c0012e79:	58                   	pop    eax
c0012e7a:	5a                   	pop    edx
c0012e7b:	56                   	push   esi
c0012e7c:	55                   	push   ebp
c0012e7d:	e8 3e d9 fe ff       	call   c00007c0 <strcat>
c0012e82:	59                   	pop    ecx
c0012e83:	58                   	pop    eax
c0012e84:	68 61 f2 01 c0       	push   0xc001f261
c0012e89:	55                   	push   ebp
c0012e8a:	e8 31 d9 fe ff       	call   c00007c0 <strcat>
c0012e8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e92:	e8 8c d4 ff ff       	call   c0010323 <KePanic(char const*)>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	51                   	push   ecx
c0012e9b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e9f:	50                   	push   eax
c0012ea0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ea4:	50                   	push   eax
c0012ea5:	53                   	push   ebx
c0012ea6:	e8 45 80 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	85 db                	test   ebx,ebx
c0012eb0:	74 0c                	je     c0012ebe <Thr::loadDLL(char const*, bool)+0xa8>
c0012eb2:	83 ec 0c             	sub    esp,0xc
c0012eb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eb7:	53                   	push   ebx
c0012eb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012ec3:	75 0a                	jne    c0012ecf <Thr::loadDLL(char const*, bool)+0xb9>
c0012ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ec9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012ecd:	75 3c                	jne    c0012f0b <Thr::loadDLL(char const*, bool)+0xf5>
c0012ecf:	89 f8                	mov    eax,edi
c0012ed1:	84 c0                	test   al,al
c0012ed3:	0f 84 49 01 00 00    	je     c0013022 <Thr::loadDLL(char const*, bool)+0x20c>
c0012ed9:	51                   	push   ecx
c0012eda:	51                   	push   ecx
c0012edb:	68 4e f2 01 c0       	push   0xc001f24e
c0012ee0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012ee4:	53                   	push   ebx
c0012ee5:	e8 16 d7 fe ff       	call   c0000600 <strcpy>
c0012eea:	5d                   	pop    ebp
c0012eeb:	58                   	pop    eax
c0012eec:	56                   	push   esi
c0012eed:	53                   	push   ebx
c0012eee:	e8 cd d8 fe ff       	call   c00007c0 <strcat>
c0012ef3:	58                   	pop    eax
c0012ef4:	5a                   	pop    edx
c0012ef5:	68 61 f2 01 c0       	push   0xc001f261
c0012efa:	53                   	push   ebx
c0012efb:	e8 c0 d8 fe ff       	call   c00007c0 <strcat>
c0012f00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f03:	e8 1b d4 ff ff       	call   c0010323 <KePanic(char const*)>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	52                   	push   edx
c0012f0c:	6a 03                	push   0x3
c0012f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f12:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f16:	05 ff 0f 00 00       	add    eax,0xfff
c0012f1b:	83 d2 00             	adc    edx,0x0
c0012f1e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f22:	50                   	push   eax
c0012f23:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012f29:	e8 ea 6b ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c0012f2e:	59                   	pop    ecx
c0012f2f:	89 c3                	mov    ebx,eax
c0012f31:	5d                   	pop    ebp
c0012f32:	50                   	push   eax
c0012f33:	68 92 df 01 c0       	push   0xc001df92
c0012f38:	e8 d1 76 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f40:	e8 fb d5 fe ff       	call   c0000540 <strlen>
c0012f45:	8b 2d a0 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259a0
c0012f4b:	40                   	inc    eax
c0012f4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f4f:	e8 21 49 ff ff       	call   c0007875 <malloc>
c0012f54:	89 04 ad c0 5d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffda240],eax
c0012f5b:	58                   	pop    eax
c0012f5c:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f61:	5a                   	pop    edx
c0012f62:	56                   	push   esi
c0012f63:	ff 34 85 c0 5d 02 c0 	push   DWORD PTR [eax*4-0x3ffda240]
c0012f6a:	e8 91 d6 fe ff       	call   c0000600 <strcpy>
c0012f6f:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012f74:	8d 50 01             	lea    edx,[eax+0x1]
c0012f77:	89 1c 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],ebx
c0012f7e:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0012f84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f88:	83 c4 0c             	add    esp,0xc
c0012f8b:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0012f92:	6a 01                	push   0x1
c0012f94:	53                   	push   ebx
c0012f95:	56                   	push   esi
c0012f96:	e8 c2 f6 ff ff       	call   c001265d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f9b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fa7:	0f 85 89 00 00 00    	jne    c0013036 <Thr::loadDLL(char const*, bool)+0x220>
c0012fad:	89 f8                	mov    eax,edi
c0012faf:	84 c0                	test   al,al
c0012fb1:	74 73                	je     c0013026 <Thr::loadDLL(char const*, bool)+0x210>
c0012fb3:	83 ec 0c             	sub    esp,0xc
c0012fb6:	68 63 f2 01 c0       	push   0xc001f263
c0012fbb:	e8 63 d3 ff ff       	call   c0010323 <KePanic(char const*)>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	eb 61                	jmp    c0013026 <Thr::loadDLL(char const*, bool)+0x210>
c0012fc5:	50                   	push   eax
c0012fc6:	50                   	push   eax
c0012fc7:	89 e8                	mov    eax,ebp
c0012fc9:	c1 e0 0c             	shl    eax,0xc
c0012fcc:	01 d8                	add    eax,ebx
c0012fce:	50                   	push   eax
c0012fcf:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012fd5:	e8 4c 66 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0012fda:	83 c4 10             	add    esp,0x10
c0012fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fdf:	a8 60                	test   al,0x60
c0012fe1:	75 11                	jne    c0012ff4 <Thr::loadDLL(char const*, bool)+0x1de>
c0012fe3:	83 ec 0c             	sub    esp,0xc
c0012fe6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012feb:	50                   	push   eax
c0012fec:	e8 fe 4a ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	45                   	inc    ebp
c0012ff5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ffd:	05 ff 0f 00 00       	add    eax,0xfff
c0013002:	bf 00 00 00 00       	mov    edi,0x0
c0013007:	83 d2 00             	adc    edx,0x0
c001300a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001300e:	c1 ea 0c             	shr    edx,0xc
c0013011:	39 c5                	cmp    ebp,eax
c0013013:	89 d1                	mov    ecx,edx
c0013015:	89 f8                	mov    eax,edi
c0013017:	19 c8                	sbb    eax,ecx
c0013019:	72 aa                	jb     c0012fc5 <Thr::loadDLL(char const*, bool)+0x1af>
c001301b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013020:	75 18                	jne    c001303a <Thr::loadDLL(char const*, bool)+0x224>
c0013022:	31 db                	xor    ebx,ebx
c0013024:	eb 14                	jmp    c001303a <Thr::loadDLL(char const*, bool)+0x224>
c0013026:	83 ec 0c             	sub    esp,0xc
c0013029:	68 82 f2 01 c0       	push   0xc001f282
c001302e:	e8 f0 d2 ff ff       	call   c0010323 <KePanic(char const*)>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	31 ed                	xor    ebp,ebp
c0013038:	eb bb                	jmp    c0012ff5 <Thr::loadDLL(char const*, bool)+0x1df>
c001303a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013040:	89 d8                	mov    eax,ebx
c0013042:	5b                   	pop    ebx
c0013043:	5e                   	pop    esi
c0013044:	5f                   	pop    edi
c0013045:	5d                   	pop    ebp
c0013046:	c3                   	ret    

c0013047 <Thr::executeDLL(unsigned long, void*)>:
c0013047:	56                   	push   esi
c0013048:	53                   	push   ebx
c0013049:	52                   	push   edx
c001304a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001304e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013052:	85 db                	test   ebx,ebx
c0013054:	75 10                	jne    c0013066 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	68 9e f2 01 c0       	push   0xc001f29e
c001305e:	e8 c0 d2 ff ff       	call   c0010323 <KePanic(char const*)>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	50                   	push   eax
c0013067:	50                   	push   eax
c0013068:	53                   	push   ebx
c0013069:	68 c8 f2 01 c0       	push   0xc001f2c8
c001306e:	e8 9b 75 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013073:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013077:	89 d8                	mov    eax,ebx
c0013079:	83 c4 14             	add    esp,0x14
c001307c:	5b                   	pop    ebx
c001307d:	5e                   	pop    esi
c001307e:	ff e0                	jmp    eax

c0013080 <userModeEntryPoint(void*)>:
c0013080:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013085:	48                   	dec    eax
c0013086:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001308b:	75 03                	jne    c0013090 <userModeEntryPoint(void*)+0x10>
c001308d:	fb                   	sti    
c001308e:	66 90                	xchg   ax,ax
c0013090:	fb                   	sti    
c0013091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013096:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013099:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001309f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130a3:	e9 97 d1 fe ff       	jmp    c000023f <goToUsermode>

c00130a8 <changeTSS>:
c00130a8:	83 ec 14             	sub    esp,0x14
c00130ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00130b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00130b8:	c1 e2 15             	shl    edx,0x15
c00130bb:	29 d0                	sub    eax,edx
c00130bd:	50                   	push   eax
c00130be:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00130c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130c9:	05 7c 11 00 00       	add    eax,0x117c
c00130ce:	50                   	push   eax
c00130cf:	e8 d0 5b ff ff       	call   c0008ca4 <TSS::setESP(unsigned long)>
c00130d4:	83 c4 1c             	add    esp,0x1c
c00130d7:	c3                   	ret    

c00130d8 <switchToThread(ThreadControlBlock*)>:
c00130d8:	57                   	push   edi
c00130d9:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00130de:	56                   	push   esi
c00130df:	85 c0                	test   eax,eax
c00130e1:	53                   	push   ebx
c00130e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130e6:	0f 85 90 00 00 00    	jne    c001317c <switchToThread(ThreadControlBlock*)+0xa4>
c00130ec:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00130ef:	80 fa ff             	cmp    dl,0xff
c00130f2:	0f 84 80 00 00 00    	je     c0013178 <switchToThread(ThreadControlBlock*)+0xa0>
c00130f8:	81 e2 ff 00 00 00    	and    edx,0xff
c00130fe:	b8 00 04 00 00       	mov    eax,0x400
c0013103:	29 d0                	sub    eax,edx
c0013105:	d1 f8                	sar    eax,1
c0013107:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001310a:	66 90                	xchg   ax,ax
c001310c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001310f:	e8 1d 26 00 00       	call   c0015731 <HalQueryPerformanceCounter()>
c0013114:	a3 a8 61 02 c0       	mov    ds:0xc00261a8,eax
c0013119:	89 15 ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,edx
c001311f:	89 c6                	mov    esi,eax
c0013121:	89 d7                	mov    edi,edx
c0013123:	2b 35 98 61 02 c0    	sub    esi,DWORD PTR ds:0xc0026198
c0013129:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c001312e:	1b 3d 9c 61 02 c0    	sbb    edi,DWORD PTR ds:0xc002619c
c0013134:	89 35 a0 61 02 c0    	mov    DWORD PTR ds:0xc00261a0,esi
c001313a:	89 3d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,edi
c0013140:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013146:	89 15 9c 61 02 c0    	mov    DWORD PTR ds:0xc002619c,edx
c001314c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001314f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013152:	01 c6                	add    esi,eax
c0013154:	11 d7                	adc    edi,edx
c0013156:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013159:	83 ec 0c             	sub    esp,0xc
c001315c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001315f:	53                   	push   ebx
c0013160:	e8 12 d1 fe ff       	call   c0000277 <switchToThreadASM>
c0013165:	0f 20 c0             	mov    eax,cr0
c0013168:	83 c8 08             	or     eax,0x8
c001316b:	0f 22 c0             	mov    cr0,eax
c001316e:	83 c4 10             	add    esp,0x10
c0013171:	5b                   	pop    ebx
c0013172:	5e                   	pop    esi
c0013173:	5f                   	pop    edi
c0013174:	c3                   	ret    
c0013175:	8d 76 00             	lea    esi,[esi+0x0]
c0013178:	31 c0                	xor    eax,eax
c001317a:	eb 90                	jmp    c001310c <switchToThread(ThreadControlBlock*)+0x34>
c001317c:	5b                   	pop    ebx
c001317d:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c0013187:	5e                   	pop    esi
c0013188:	5f                   	pop    edi
c0013189:	c3                   	ret    
c001318a:	66 90                	xchg   ax,ax

c001318c <Process::addArgs(char**)>:
c001318c:	57                   	push   edi
c001318d:	56                   	push   esi
c001318e:	53                   	push   ebx
c001318f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013193:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013197:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00131a1:	85 ff                	test   edi,edi
c00131a3:	74 43                	je     c00131e8 <Process::addArgs(char**)+0x5c>
c00131a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00131a7:	85 c0                	test   eax,eax
c00131a9:	74 3d                	je     c00131e8 <Process::addArgs(char**)+0x5c>
c00131ab:	31 db                	xor    ebx,ebx
c00131ad:	8d 76 00             	lea    esi,[esi+0x0]
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	50                   	push   eax
c00131b4:	e8 87 d3 fe ff       	call   c0000540 <strlen>
c00131b9:	40                   	inc    eax
c00131ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00131bd:	e8 b3 46 ff ff       	call   c0007875 <malloc>
c00131c2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00131c9:	5a                   	pop    edx
c00131ca:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00131cd:	59                   	pop    ecx
c00131ce:	43                   	inc    ebx
c00131cf:	52                   	push   edx
c00131d0:	50                   	push   eax
c00131d1:	e8 2a d4 fe ff       	call   c0000600 <strcpy>
c00131d6:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00131dc:	83 c4 10             	add    esp,0x10
c00131df:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00131e2:	85 c0                	test   eax,eax
c00131e4:	75 ca                	jne    c00131b0 <Process::addArgs(char**)+0x24>
c00131e6:	66 90                	xchg   ax,ax
c00131e8:	5b                   	pop    ebx
c00131e9:	5e                   	pop    esi
c00131ea:	5f                   	pop    edi
c00131eb:	c3                   	ret    

c00131ec <Process::Process(char const*, Process*, char**)>:
c00131ec:	56                   	push   esi
c00131ed:	53                   	push   ebx
c00131ee:	83 ec 14             	sub    esp,0x14
c00131f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f5:	05 0c 02 00 00       	add    eax,0x20c
c00131fa:	bb 07 00 00 00       	mov    ebx,0x7
c00131ff:	89 c6                	mov    esi,eax
c0013201:	8d 76 00             	lea    esi,[esi+0x0]
c0013204:	85 db                	test   ebx,ebx
c0013206:	78 14                	js     c001321c <Process::Process(char const*, Process*, char**)+0x30>
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	56                   	push   esi
c001320c:	e8 0b a0 00 00       	call   c001d21c <ThreadControlBlock::ThreadControlBlock()>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	83 c6 5f             	add    esi,0x5f
c0013217:	4b                   	dec    ebx
c0013218:	eb ea                	jmp    c0013204 <Process::Process(char const*, Process*, char**)+0x18>
c001321a:	66 90                	xchg   ax,ax
c001321c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013220:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001322b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013239:	e8 da ce ff ff       	call   c0010118 <Krnl::newProcessEnv(Process*)>
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	89 c2                	mov    edx,eax
c0013243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013247:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001324d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013251:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001325a:	a1 ec 02 02 c0       	mov    eax,ds:0xc00202ec
c001325f:	8d 50 01             	lea    edx,[eax+0x1]
c0013262:	89 15 ec 02 02 c0    	mov    DWORD PTR ds:0xc00202ec,edx
c0013268:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001326c:	89 02                	mov    DWORD PTR [edx],eax
c001326e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001327d:	e8 f3 45 ff ff       	call   c0007875 <malloc>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	89 c3                	mov    ebx,eax
c0013287:	83 ec 08             	sub    esp,0x8
c001328a:	6a 00                	push   0x0
c001328c:	53                   	push   ebx
c001328d:	e8 30 6c ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013299:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001329f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00132ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132b5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00132bb:	e8 ce d3 ff ff       	call   c001068e <KeInitSignals()>
c00132c0:	89 c2                	mov    edx,eax
c00132c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00132cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132d6:	85 c0                	test   eax,eax
c00132d8:	74 42                	je     c001331c <Process::Process(char const*, Process*, char**)+0x130>
c00132da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132de:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132e4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013308:	05 0c 01 00 00       	add    eax,0x10c
c001330d:	83 ec 08             	sub    esp,0x8
c0013310:	52                   	push   edx
c0013311:	50                   	push   eax
c0013312:	e8 e9 d2 fe ff       	call   c0000600 <strcpy>
c0013317:	83 c4 10             	add    esp,0x10
c001331a:	eb 64                	jmp    c0013380 <Process::Process(char const*, Process*, char**)+0x194>
c001331c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0013324:	83 ec 0c             	sub    esp,0xc
c0013327:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001332b:	e8 45 45 ff ff       	call   c0007875 <malloc>
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	89 c3                	mov    ebx,eax
c0013335:	83 ec 08             	sub    esp,0x8
c0013338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001333c:	53                   	push   ebx
c001333d:	e8 74 56 ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c0013342:	83 c4 10             	add    esp,0x10
c0013345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013349:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001334f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013353:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013359:	83 ec 0c             	sub    esp,0xc
c001335c:	50                   	push   eax
c001335d:	e8 f4 4e ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013369:	05 0c 01 00 00       	add    eax,0x10c
c001336e:	83 ec 08             	sub    esp,0x8
c0013371:	68 e7 f2 01 c0       	push   0xc001f2e7
c0013376:	50                   	push   eax
c0013377:	e8 84 d2 fe ff       	call   c0000600 <strcpy>
c001337c:	83 c4 10             	add    esp,0x10
c001337f:	90                   	nop
c0013380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013384:	83 c0 0c             	add    eax,0xc
c0013387:	83 ec 08             	sub    esp,0x8
c001338a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001338e:	50                   	push   eax
c001338f:	e8 6c d2 fe ff       	call   c0000600 <strcpy>
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	83 ec 08             	sub    esp,0x8
c001339a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001339e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133a2:	e8 e5 fd ff ff       	call   c001318c <Process::addArgs(char**)>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	83 ec 08             	sub    esp,0x8
c00133ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133b5:	e8 6d ed ff ff       	call   c0012127 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133ba:	83 c4 10             	add    esp,0x10
c00133bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00133c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133c5:	83 f0 01             	xor    eax,0x1
c00133c8:	88 c2                	mov    dl,al
c00133ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ce:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00133d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133d8:	25 ff 00 00 00       	and    eax,0xff
c00133dd:	83 ec 08             	sub    esp,0x8
c00133e0:	50                   	push   eax
c00133e1:	68 40 f3 01 c0       	push   0xc001f340
c00133e6:	e8 23 72 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	90                   	nop
c00133ef:	83 c4 14             	add    esp,0x14
c00133f2:	5b                   	pop    ebx
c00133f3:	5e                   	pop    esi
c00133f4:	c3                   	ret    
c00133f5:	90                   	nop
c00133f6:	66 90                	xchg   ax,ax

c00133f8 <Process::Process(bool, char const*, Process*, char**)>:
c00133f8:	56                   	push   esi
c00133f9:	53                   	push   ebx
c00133fa:	83 ec 24             	sub    esp,0x24
c00133fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013401:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013409:	05 0c 02 00 00       	add    eax,0x20c
c001340e:	bb 07 00 00 00       	mov    ebx,0x7
c0013413:	89 c6                	mov    esi,eax
c0013415:	8d 76 00             	lea    esi,[esi+0x0]
c0013418:	85 db                	test   ebx,ebx
c001341a:	78 14                	js     c0013430 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	56                   	push   esi
c0013420:	e8 f7 9d 00 00       	call   c001d21c <ThreadControlBlock::ThreadControlBlock()>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	83 c6 5f             	add    esi,0x5f
c001342b:	4b                   	dec    ebx
c001342c:	eb ea                	jmp    c0013418 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001342e:	66 90                	xchg   ax,ax
c0013430:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013434:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001343b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001343f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001344d:	e8 c6 cc ff ff       	call   c0010118 <Krnl::newProcessEnv(Process*)>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	89 c2                	mov    edx,eax
c0013457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013461:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013465:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001346e:	a1 ec 02 02 c0       	mov    eax,ds:0xc00202ec
c0013473:	8d 50 01             	lea    edx,[eax+0x1]
c0013476:	89 15 ec 02 02 c0    	mov    DWORD PTR ds:0xc00202ec,edx
c001347c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013480:	89 02                	mov    DWORD PTR [edx],eax
c0013482:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001348a:	83 ec 0c             	sub    esp,0xc
c001348d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013491:	e8 df 43 ff ff       	call   c0007875 <malloc>
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	89 c3                	mov    ebx,eax
c001349b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001349f:	25 ff 00 00 00       	and    eax,0xff
c00134a4:	83 ec 08             	sub    esp,0x8
c00134a7:	50                   	push   eax
c00134a8:	53                   	push   ebx
c00134a9:	e8 14 6a ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c00134ae:	83 c4 10             	add    esp,0x10
c00134b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134bf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134cd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00134d1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134d7:	e8 b2 d1 ff ff       	call   c001068e <KeInitSignals()>
c00134dc:	89 c2                	mov    edx,eax
c00134de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00134e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134f2:	85 c0                	test   eax,eax
c00134f4:	74 42                	je     c0013538 <Process::Process(bool, char const*, Process*, char**)+0x140>
c00134f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013500:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013506:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013514:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001351a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013524:	05 0c 01 00 00       	add    eax,0x10c
c0013529:	83 ec 08             	sub    esp,0x8
c001352c:	52                   	push   edx
c001352d:	50                   	push   eax
c001352e:	e8 cd d0 fe ff       	call   c0000600 <strcpy>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	eb 64                	jmp    c001359c <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013538:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013547:	e8 29 43 ff ff       	call   c0007875 <malloc>
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	89 c3                	mov    ebx,eax
c0013551:	83 ec 08             	sub    esp,0x8
c0013554:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013558:	53                   	push   ebx
c0013559:	e8 58 54 ff ff       	call   c00089b6 <VgaText::VgaText(char const*)>
c001355e:	83 c4 10             	add    esp,0x10
c0013561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013565:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001356b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001356f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013575:	83 ec 0c             	sub    esp,0xc
c0013578:	50                   	push   eax
c0013579:	e8 d8 4c ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013585:	05 0c 01 00 00       	add    eax,0x10c
c001358a:	83 ec 08             	sub    esp,0x8
c001358d:	68 e7 f2 01 c0       	push   0xc001f2e7
c0013592:	50                   	push   eax
c0013593:	e8 68 d0 fe ff       	call   c0000600 <strcpy>
c0013598:	83 c4 10             	add    esp,0x10
c001359b:	90                   	nop
c001359c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135a0:	83 c0 0c             	add    eax,0xc
c00135a3:	83 ec 08             	sub    esp,0x8
c00135a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135aa:	50                   	push   eax
c00135ab:	e8 50 d0 fe ff       	call   c0000600 <strcpy>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	83 ec 08             	sub    esp,0x8
c00135b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00135ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135be:	e8 c9 fb ff ff       	call   c001318c <Process::addArgs(char**)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	90                   	nop
c00135c7:	83 c4 24             	add    esp,0x24
c00135ca:	5b                   	pop    ebx
c00135cb:	5e                   	pop    esi
c00135cc:	c3                   	ret    
c00135cd:	8d 76 00             	lea    esi,[esi+0x0]

c00135d0 <taskStartupFunction>:
c00135d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop
c00135da:	66 90                	xchg   ax,ax

c00135dc <Semaphore::Semaphore(int)>:
c00135dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135e4:	89 10                	mov    DWORD PTR [eax],edx
c00135e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013600:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013607:	90                   	nop
c0013608:	c3                   	ret    
c0013609:	90                   	nop
c001360a:	66 90                	xchg   ax,ax

c001360c <Mutex::Mutex()>:
c001360c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013610:	6a 01                	push   0x1
c0013612:	50                   	push   eax
c0013613:	e8 c4 ff ff ff       	call   c00135dc <Semaphore::Semaphore(int)>
c0013618:	83 c4 08             	add    esp,0x8
c001361b:	90                   	nop
c001361c:	c3                   	ret    
c001361d:	90                   	nop
c001361e:	66 90                	xchg   ax,ax

c0013620 <Process::createThread(void (*)(void*), void*, int)>:
c0013620:	57                   	push   edi
c0013621:	31 c9                	xor    ecx,ecx
c0013623:	56                   	push   esi
c0013624:	53                   	push   ebx
c0013625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013629:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013630:	89 f2                	mov    edx,esi
c0013632:	66 90                	xchg   ax,ax
c0013634:	31 c0                	xor    eax,eax
c0013636:	66 89 d0             	mov    ax,dx
c0013639:	83 e2 01             	and    edx,0x1
c001363c:	74 12                	je     c0013650 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001363e:	d1 f8                	sar    eax,1
c0013640:	41                   	inc    ecx
c0013641:	89 c2                	mov    edx,eax
c0013643:	83 f9 10             	cmp    ecx,0x10
c0013646:	75 ec                	jne    c0013634 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013648:	31 db                	xor    ebx,ebx
c001364a:	89 d8                	mov    eax,ebx
c001364c:	5b                   	pop    ebx
c001364d:	5e                   	pop    esi
c001364e:	5f                   	pop    edi
c001364f:	c3                   	ret    
c0013650:	b8 01 00 00 00       	mov    eax,0x1
c0013655:	d3 e0                	shl    eax,cl
c0013657:	09 c6                	or     esi,eax
c0013659:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001365c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013663:	01 c0                	add    eax,eax
c0013665:	01 c8                	add    eax,ecx
c0013667:	8d 04 80             	lea    eax,[eax+eax*4]
c001366a:	01 d8                	add    eax,ebx
c001366c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013673:	75 0b                	jne    c0013680 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013675:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001367f:	90                   	nop
c0013680:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013686:	83 ec 08             	sub    esp,0x8
c0013689:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001368c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001368f:	01 c0                	add    eax,eax
c0013691:	01 c8                	add    eax,ecx
c0013693:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013696:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013699:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001369f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00136a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136a9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00136af:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00136b5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00136bc:	89 ca                	mov    edx,ecx
c00136be:	f7 da                	neg    edx
c00136c0:	c1 e2 15             	shl    edx,0x15
c00136c3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00136c9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00136cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136d3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00136dd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00136e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136e7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136ed:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136f7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013701:	53                   	push   ebx
c0013702:	68 84 61 02 c0       	push   0xc0026184
c0013707:	e8 b0 98 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	89 d8                	mov    eax,ebx
c0013711:	5b                   	pop    ebx
c0013712:	5e                   	pop    esi
c0013713:	5f                   	pop    edi
c0013714:	c3                   	ret    
c0013715:	90                   	nop
c0013716:	66 90                	xchg   ax,ax

c0013718 <Process::createUserThread()>:
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	68 80 00 00 00       	push   0x80
c0013720:	6a 00                	push   0x0
c0013722:	68 80 30 01 c0       	push   0xc0013080
c0013727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001372b:	50                   	push   eax
c001372c:	e8 ef fe ff ff       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c0013731:	83 c4 1c             	add    esp,0x1c
c0013734:	c3                   	ret    
c0013735:	8d 76 00             	lea    esi,[esi+0x0]

c0013738 <setupMultitasking(void (*)())>:
c0013738:	56                   	push   esi
c0013739:	53                   	push   ebx
c001373a:	53                   	push   ebx
c001373b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001373f:	eb 13                	jmp    c0013754 <setupMultitasking(void (*)())+0x1c>
c0013741:	8d 76 00             	lea    esi,[esi+0x0]
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	68 84 61 02 c0       	push   0xc0026184
c001374c:	e8 b3 97 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	83 ec 0c             	sub    esp,0xc
c0013757:	68 84 61 02 c0       	push   0xc0026184
c001375c:	e8 7f 97 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013761:	83 c4 10             	add    esp,0x10
c0013764:	84 c0                	test   al,al
c0013766:	74 dc                	je     c0013744 <setupMultitasking(void (*)())+0xc>
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	68 24 07 00 00       	push   0x724
c0013770:	e8 00 41 ff ff       	call   c0007875 <malloc>
c0013775:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001377c:	89 c3                	mov    ebx,eax
c001377e:	6a 00                	push   0x0
c0013780:	68 eb f2 01 c0       	push   0xc001f2eb
c0013785:	6a 01                	push   0x1
c0013787:	50                   	push   eax
c0013788:	e8 6b fc ff ff       	call   c00133f8 <Process::Process(bool, char const*, Process*, char**)>
c001378d:	83 c4 14             	add    esp,0x14
c0013790:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013796:	89 1d 90 61 02 c0    	mov    DWORD PTR ds:0xc0026190,ebx
c001379c:	50                   	push   eax
c001379d:	e8 11 4d ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c00137a2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00137aa:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00137b4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00137ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137bd:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00137c7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00137cd:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00137d3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00137dd:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00137e7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137f1:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137f7:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137fd:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013807:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001380d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013817:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001381d:	5a                   	pop    edx
c001381e:	59                   	pop    ecx
c001381f:	68 e7 f2 01 c0       	push   0xc001f2e7
c0013824:	50                   	push   eax
c0013825:	e8 d6 cd fe ff       	call   c0000600 <strcpy>
c001382a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013831:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013835:	83 c4 14             	add    esp,0x14
c0013838:	5b                   	pop    ebx
c0013839:	5e                   	pop    esi
c001383a:	e9 2a ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001383f:	90                   	nop

c0013840 <schedule()>:
c0013840:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c0013846:	85 d2                	test   edx,edx
c0013848:	74 0e                	je     c0013858 <schedule()+0x18>
c001384a:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c0013854:	c3                   	ret    
c0013855:	8d 76 00             	lea    esi,[esi+0x0]
c0013858:	53                   	push   ebx
c0013859:	83 ec 14             	sub    esp,0x14
c001385c:	68 84 61 02 c0       	push   0xc0026184
c0013861:	e8 7a 96 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	84 c0                	test   al,al
c001386b:	75 3b                	jne    c00138a8 <schedule()+0x68>
c001386d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013872:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013875:	4a                   	dec    edx
c0013876:	74 38                	je     c00138b0 <schedule()+0x70>
c0013878:	83 ec 0c             	sub    esp,0xc
c001387b:	68 84 61 02 c0       	push   0xc0026184
c0013880:	e8 77 96 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013885:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c001388c:	89 c3                	mov    ebx,eax
c001388e:	e8 71 96 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013893:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001389a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001389d:	e8 36 f8 ff ff       	call   c00130d8 <switchToThread(ThreadControlBlock*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	83 c4 08             	add    esp,0x8
c00138ab:	5b                   	pop    ebx
c00138ac:	c3                   	ret    
c00138ad:	8d 76 00             	lea    esi,[esi+0x0]
c00138b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00138b7:	83 ec 08             	sub    esp,0x8
c00138ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138bf:	50                   	push   eax
c00138c0:	68 84 61 02 c0       	push   0xc0026184
c00138c5:	e8 f2 96 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138ca:	83 c4 10             	add    esp,0x10
c00138cd:	eb a9                	jmp    c0013878 <schedule()+0x38>
c00138cf:	90                   	nop

c00138d0 <Semaphore::tryAcquire()>:
c00138d0:	53                   	push   ebx
c00138d1:	83 ec 08             	sub    esp,0x8
c00138d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138d8:	fa                   	cli    
c00138d9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138de:	8d 50 01             	lea    edx,[eax+0x1]
c00138e1:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c00138e7:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c00138ed:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138f0:	89 1d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ebx
c00138f6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138f9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138fb:	7c 33                	jl     c0013930 <Semaphore::tryAcquire()+0x60>
c00138fd:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c0013903:	85 d2                	test   edx,edx
c0013905:	75 0d                	jne    c0013914 <Semaphore::tryAcquire()+0x44>
c0013907:	8b 15 60 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026160
c001390d:	85 d2                	test   edx,edx
c001390f:	75 6b                	jne    c001397c <Semaphore::tryAcquire()+0xac>
c0013911:	8d 76 00             	lea    esi,[esi+0x0]
c0013914:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013919:	85 c0                	test   eax,eax
c001391b:	74 0b                	je     c0013928 <Semaphore::tryAcquire()+0x58>
c001391d:	8d 76 00             	lea    esi,[esi+0x0]
c0013920:	31 c0                	xor    eax,eax
c0013922:	83 c4 08             	add    esp,0x8
c0013925:	5b                   	pop    ebx
c0013926:	c3                   	ret    
c0013927:	90                   	nop
c0013928:	fb                   	sti    
c0013929:	83 c4 08             	add    esp,0x8
c001392c:	5b                   	pop    ebx
c001392d:	c3                   	ret    
c001392e:	66 90                	xchg   ax,ax
c0013930:	43                   	inc    ebx
c0013931:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c0013937:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001393a:	85 d2                	test   edx,edx
c001393c:	75 22                	jne    c0013960 <Semaphore::tryAcquire()+0x90>
c001393e:	8b 0d 60 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026160
c0013944:	85 c9                	test   ecx,ecx
c0013946:	74 18                	je     c0013960 <Semaphore::tryAcquire()+0x90>
c0013948:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013952:	e8 e9 fe ff ff       	call   c0013840 <schedule()>
c0013957:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001395c:	48                   	dec    eax
c001395d:	8d 76 00             	lea    esi,[esi+0x0]
c0013960:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013965:	85 c0                	test   eax,eax
c0013967:	75 0b                	jne    c0013974 <Semaphore::tryAcquire()+0xa4>
c0013969:	fb                   	sti    
c001396a:	b0 01                	mov    al,0x1
c001396c:	83 c4 08             	add    esp,0x8
c001396f:	5b                   	pop    ebx
c0013970:	c3                   	ret    
c0013971:	8d 76 00             	lea    esi,[esi+0x0]
c0013974:	b0 01                	mov    al,0x1
c0013976:	83 c4 08             	add    esp,0x8
c0013979:	5b                   	pop    ebx
c001397a:	c3                   	ret    
c001397b:	90                   	nop
c001397c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013986:	e8 b5 fe ff ff       	call   c0013840 <schedule()>
c001398b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013990:	48                   	dec    eax
c0013991:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013996:	85 c0                	test   eax,eax
c0013998:	75 86                	jne    c0013920 <Semaphore::tryAcquire()+0x50>
c001399a:	eb 8c                	jmp    c0013928 <Semaphore::tryAcquire()+0x58>

c001399c <Semaphore::assertLocked(char const*)>:
c001399c:	83 ec 0c             	sub    esp,0xc
c001399f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139a3:	fa                   	cli    
c00139a4:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00139aa:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00139af:	8d 48 01             	lea    ecx,[eax+0x1]
c00139b2:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c00139b8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139ba:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00139bd:	7c 29                	jl     c00139e8 <Semaphore::assertLocked(char const*)+0x4c>
c00139bf:	90                   	nop
c00139c0:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00139c5:	85 c0                	test   eax,eax
c00139c7:	75 0b                	jne    c00139d4 <Semaphore::assertLocked(char const*)+0x38>
c00139c9:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c00139ce:	85 c0                	test   eax,eax
c00139d0:	75 2e                	jne    c0013a00 <Semaphore::assertLocked(char const*)+0x64>
c00139d2:	66 90                	xchg   ax,ax
c00139d4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139d9:	48                   	dec    eax
c00139da:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139df:	75 03                	jne    c00139e4 <Semaphore::assertLocked(char const*)+0x48>
c00139e1:	fb                   	sti    
c00139e2:	66 90                	xchg   ax,ax
c00139e4:	83 c4 0c             	add    esp,0xc
c00139e7:	c3                   	ret    
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139ef:	52                   	push   edx
c00139f0:	e8 2e c9 ff ff       	call   c0010323 <KePanic(char const*)>
c00139f5:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	48                   	dec    eax
c00139fe:	eb c0                	jmp    c00139c0 <Semaphore::assertLocked(char const*)+0x24>
c0013a00:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013a0a:	e8 31 fe ff ff       	call   c0013840 <schedule()>
c0013a0f:	eb c3                	jmp    c00139d4 <Semaphore::assertLocked(char const*)+0x38>
c0013a11:	8d 76 00             	lea    esi,[esi+0x0]

c0013a14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a23:	e8 18 fe ff ff       	call   c0013840 <schedule()>
c0013a28:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013a2d:	48                   	dec    eax
c0013a2e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a33:	75 03                	jne    c0013a38 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a35:	fb                   	sti    
c0013a36:	66 90                	xchg   ax,ax
c0013a38:	83 c4 0c             	add    esp,0xc
c0013a3b:	c3                   	ret    

c0013a3c <blockTask(TaskState)>:
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	fa                   	cli    
c0013a40:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013a46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a52:	e8 e9 fd ff ff       	call   c0013840 <schedule()>
c0013a57:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013a5c:	48                   	dec    eax
c0013a5d:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a62:	75 04                	jne    c0013a68 <blockTask(TaskState)+0x2c>
c0013a64:	fb                   	sti    
c0013a65:	8d 76 00             	lea    esi,[esi+0x0]
c0013a68:	83 c4 0c             	add    esp,0xc
c0013a6b:	c3                   	ret    

c0013a6c <waitTask(int, int*, int)>:
c0013a6c:	83 ec 18             	sub    esp,0x18
c0013a6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a78:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a84:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a87:	6a 07                	push   0x7
c0013a89:	e8 ae ff ff ff       	call   c0013a3c <blockTask(TaskState)>
c0013a8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a93:	83 c4 10             	add    esp,0x10
c0013a96:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a99:	85 d2                	test   edx,edx
c0013a9b:	74 0b                	je     c0013aa8 <waitTask(int, int*, int)+0x3c>
c0013a9d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013aa0:	89 02                	mov    DWORD PTR [edx],eax
c0013aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa7:	90                   	nop
c0013aa8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013aab:	83 c4 0c             	add    esp,0xc
c0013aae:	c3                   	ret    
c0013aaf:	90                   	nop

c0013ab0 <milliTenthSleepUntil(unsigned int)>:
c0013ab0:	83 ec 0c             	sub    esp,0xc
c0013ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab7:	39 05 8c 54 02 c0    	cmp    DWORD PTR ds:0xc002548c,eax
c0013abd:	76 05                	jbe    c0013ac4 <milliTenthSleepUntil(unsigned int)+0x14>
c0013abf:	90                   	nop
c0013ac0:	83 c4 0c             	add    esp,0xc
c0013ac3:	c3                   	ret    
c0013ac4:	fa                   	cli    
c0013ac5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013acb:	83 ec 08             	sub    esp,0x8
c0013ace:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0013ad4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ada:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013add:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ae3:	52                   	push   edx
c0013ae4:	68 78 61 02 c0       	push   0xc0026178
c0013ae9:	e8 ce 94 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013aee:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013af5:	e8 42 ff ff ff       	call   c0013a3c <blockTask(TaskState)>
c0013afa:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013aff:	83 c4 10             	add    esp,0x10
c0013b02:	48                   	dec    eax
c0013b03:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013b08:	85 c0                	test   eax,eax
c0013b0a:	75 0c                	jne    c0013b18 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b0c:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013b11:	85 c0                	test   eax,eax
c0013b13:	75 17                	jne    c0013b2c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013b15:	8d 76 00             	lea    esi,[esi+0x0]
c0013b18:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013b1d:	48                   	dec    eax
c0013b1e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013b23:	75 9b                	jne    c0013ac0 <milliTenthSleepUntil(unsigned int)+0x10>
c0013b25:	fb                   	sti    
c0013b26:	83 c4 0c             	add    esp,0xc
c0013b29:	c3                   	ret    
c0013b2a:	66 90                	xchg   ax,ax
c0013b2c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013b36:	e8 05 fd ff ff       	call   c0013840 <schedule()>
c0013b3b:	eb db                	jmp    c0013b18 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b3d:	8d 76 00             	lea    esi,[esi+0x0]

c0013b40 <milliTenthSleep(unsigned int)>:
c0013b40:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c0013b45:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b49:	e9 62 ff ff ff       	jmp    c0013ab0 <milliTenthSleepUntil(unsigned int)>
c0013b4e:	66 90                	xchg   ax,ax

c0013b50 <sleep(unsigned int)>:
c0013b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b54:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b57:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b5a:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b5d:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b60:	c1 e0 04             	shl    eax,0x4
c0013b63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b67:	eb d7                	jmp    c0013b40 <milliTenthSleep(unsigned int)>
c0013b69:	90                   	nop
c0013b6a:	66 90                	xchg   ax,ax

c0013b6c <Semaphore::acquire()>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b73:	fa                   	cli    
c0013b74:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013b79:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013b7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b82:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013b88:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b8b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b8d:	7d 2d                	jge    c0013bbc <Semaphore::acquire()+0x50>
c0013b8f:	41                   	inc    ecx
c0013b90:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b93:	90                   	nop
c0013b94:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013b99:	85 c0                	test   eax,eax
c0013b9b:	75 0b                	jne    c0013ba8 <Semaphore::acquire()+0x3c>
c0013b9d:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013ba2:	85 c0                	test   eax,eax
c0013ba4:	75 62                	jne    c0013c08 <Semaphore::acquire()+0x9c>
c0013ba6:	66 90                	xchg   ax,ax
c0013ba8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013bad:	48                   	dec    eax
c0013bae:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013bb3:	75 03                	jne    c0013bb8 <Semaphore::acquire()+0x4c>
c0013bb5:	fb                   	sti    
c0013bb6:	66 90                	xchg   ax,ax
c0013bb8:	83 c4 0c             	add    esp,0xc
c0013bbb:	c3                   	ret    
c0013bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013bc8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013bcb:	85 c9                	test   ecx,ecx
c0013bcd:	74 4d                	je     c0013c1c <Semaphore::acquire()+0xb0>
c0013bcf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013bd2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013bd8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013bdb:	90                   	nop
c0013bdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be1:	83 ec 0c             	sub    esp,0xc
c0013be4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013be7:	68 68 f3 01 c0       	push   0xc001f368
c0013bec:	e8 1d 6a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013bf1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bf8:	e8 3f fe ff ff       	call   c0013a3c <blockTask(TaskState)>
c0013bfd:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013c02:	83 c4 10             	add    esp,0x10
c0013c05:	48                   	dec    eax
c0013c06:	eb 8c                	jmp    c0013b94 <Semaphore::acquire()+0x28>
c0013c08:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013c12:	e8 29 fc ff ff       	call   c0013840 <schedule()>
c0013c17:	eb 8f                	jmp    c0013ba8 <Semaphore::acquire()+0x3c>
c0013c19:	8d 76 00             	lea    esi,[esi+0x0]
c0013c1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c24:	eb b6                	jmp    c0013bdc <Semaphore::acquire()+0x70>
c0013c26:	66 90                	xchg   ax,ax

c0013c28 <taskReturned>:
c0013c28:	83 ec 18             	sub    esp,0x18
c0013c2b:	68 88 f3 01 c0       	push   0xc001f388
c0013c30:	e8 ee c6 ff ff       	call   c0010323 <KePanic(char const*)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	6a 02                	push   0x2
c0013c3d:	e8 fa fd ff ff       	call   c0013a3c <blockTask(TaskState)>
c0013c42:	fa                   	cli    
c0013c43:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c49:	e8 f2 fb ff ff       	call   c0013840 <schedule()>
c0013c4e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c53:	83 c4 10             	add    esp,0x10
c0013c56:	48                   	dec    eax
c0013c57:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c5c:	85 c0                	test   eax,eax
c0013c5e:	75 d8                	jne    c0013c38 <taskReturned+0x10>
c0013c60:	fb                   	sti    
c0013c61:	eb d5                	jmp    c0013c38 <taskReturned+0x10>
c0013c63:	90                   	nop

c0013c64 <Thr::processFromPID(int)>:
c0013c64:	57                   	push   edi
c0013c65:	56                   	push   esi
c0013c66:	53                   	push   ebx
c0013c67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c6b:	fa                   	cli    
c0013c6c:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	68 84 61 02 c0       	push   0xc0026184
c0013c7a:	e8 7d 92 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	89 c7                	mov    edi,eax
c0013c84:	eb 16                	jmp    c0013c9c <Thr::processFromPID(int)+0x38>
c0013c86:	66 90                	xchg   ax,ax
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	68 84 61 02 c0       	push   0xc0026184
c0013c90:	e8 67 92 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	39 f8                	cmp    eax,edi
c0013c9a:	74 4c                	je     c0013ce8 <Thr::processFromPID(int)+0x84>
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	68 84 61 02 c0       	push   0xc0026184
c0013ca4:	e8 53 92 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ca9:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013cb0:	89 c3                	mov    ebx,eax
c0013cb2:	e8 4d 92 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013cb7:	58                   	pop    eax
c0013cb8:	5a                   	pop    edx
c0013cb9:	53                   	push   ebx
c0013cba:	68 84 61 02 c0       	push   0xc0026184
c0013cbf:	e8 f8 92 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cc4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	39 30                	cmp    DWORD PTR [eax],esi
c0013ccc:	75 ba                	jne    c0013c88 <Thr::processFromPID(int)+0x24>
c0013cce:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013cd3:	48                   	dec    eax
c0013cd4:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013cd9:	74 09                	je     c0013ce4 <Thr::processFromPID(int)+0x80>
c0013cdb:	90                   	nop
c0013cdc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cdf:	5b                   	pop    ebx
c0013ce0:	5e                   	pop    esi
c0013ce1:	5f                   	pop    edi
c0013ce2:	c3                   	ret    
c0013ce3:	90                   	nop
c0013ce4:	fb                   	sti    
c0013ce5:	eb f5                	jmp    c0013cdc <Thr::processFromPID(int)+0x78>
c0013ce7:	90                   	nop
c0013ce8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013ced:	48                   	dec    eax
c0013cee:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013cf3:	75 07                	jne    c0013cfc <Thr::processFromPID(int)+0x98>
c0013cf5:	fb                   	sti    
c0013cf6:	5b                   	pop    ebx
c0013cf7:	5e                   	pop    esi
c0013cf8:	5f                   	pop    edi
c0013cf9:	c3                   	ret    
c0013cfa:	66 90                	xchg   ax,ax
c0013cfc:	5b                   	pop    ebx
c0013cfd:	31 c0                	xor    eax,eax
c0013cff:	5e                   	pop    esi
c0013d00:	5f                   	pop    edi
c0013d01:	c3                   	ret    
c0013d02:	66 90                	xchg   ax,ax

c0013d04 <unblockTask(ThreadControlBlock*)>:
c0013d04:	53                   	push   ebx
c0013d05:	83 ec 08             	sub    esp,0x8
c0013d08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d0c:	fa                   	cli    
c0013d0d:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013d13:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d16:	85 c0                	test   eax,eax
c0013d18:	74 66                	je     c0013d80 <unblockTask(ThreadControlBlock*)+0x7c>
c0013d1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d1d:	48                   	dec    eax
c0013d1e:	74 38                	je     c0013d58 <unblockTask(ThreadControlBlock*)+0x54>
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	68 84 61 02 c0       	push   0xc0026184
c0013d28:	e8 cf 91 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	85 c0                	test   eax,eax
c0013d32:	75 1c                	jne    c0013d50 <unblockTask(ThreadControlBlock*)+0x4c>
c0013d34:	eb 5e                	jmp    c0013d94 <unblockTask(ThreadControlBlock*)+0x90>
c0013d36:	66 90                	xchg   ax,ax
c0013d38:	83 ec 08             	sub    esp,0x8
c0013d3b:	50                   	push   eax
c0013d3c:	68 84 61 02 c0       	push   0xc0026184
c0013d41:	e8 66 95 00 00       	call   c001d2ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d46:	83 c4 10             	add    esp,0x10
c0013d49:	85 c0                	test   eax,eax
c0013d4b:	74 47                	je     c0013d94 <unblockTask(ThreadControlBlock*)+0x90>
c0013d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d50:	39 c3                	cmp    ebx,eax
c0013d52:	75 e4                	jne    c0013d38 <unblockTask(ThreadControlBlock*)+0x34>
c0013d54:	eb 12                	jmp    c0013d68 <unblockTask(ThreadControlBlock*)+0x64>
c0013d56:	66 90                	xchg   ax,ax
c0013d58:	83 ec 0c             	sub    esp,0xc
c0013d5b:	68 09 f3 01 c0       	push   0xc001f309
c0013d60:	e8 a9 68 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013d6d:	48                   	dec    eax
c0013d6e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013d73:	75 03                	jne    c0013d78 <unblockTask(ThreadControlBlock*)+0x74>
c0013d75:	fb                   	sti    
c0013d76:	66 90                	xchg   ax,ax
c0013d78:	83 c4 08             	add    esp,0x8
c0013d7b:	5b                   	pop    ebx
c0013d7c:	c3                   	ret    
c0013d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	68 f2 f2 01 c0       	push   0xc001f2f2
c0013d88:	e8 81 68 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	eb d6                	jmp    c0013d68 <unblockTask(ThreadControlBlock*)+0x64>
c0013d92:	66 90                	xchg   ax,ax
c0013d94:	83 ec 08             	sub    esp,0x8
c0013d97:	53                   	push   ebx
c0013d98:	68 84 61 02 c0       	push   0xc0026184
c0013d9d:	e8 1a 92 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	eb c1                	jmp    c0013d68 <unblockTask(ThreadControlBlock*)+0x64>
c0013da7:	90                   	nop

c0013da8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013da8:	55                   	push   ebp
c0013da9:	57                   	push   edi
c0013daa:	56                   	push   esi
c0013dab:	53                   	push   ebx
c0013dac:	83 ec 1c             	sub    esp,0x1c
c0013daf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013db3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013db6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013dbc:	85 ed                	test   ebp,ebp
c0013dbe:	7e 24                	jle    c0013de4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013dc0:	31 f6                	xor    esi,esi
c0013dc2:	66 90                	xchg   ax,ax
c0013dc4:	83 ec 0c             	sub    esp,0xc
c0013dc7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013dce:	46                   	inc    esi
c0013dcf:	57                   	push   edi
c0013dd0:	e8 b0 3a ff ff       	call   c0007885 <free>
c0013dd5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dd8:	83 c4 10             	add    esp,0x10
c0013ddb:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013de1:	7f e1                	jg     c0013dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013de3:	90                   	nop
c0013de4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013dee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013df3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013df6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013df9:	d3 c0                	rol    eax,cl
c0013dfb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013e02:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e05:	89 f7                	mov    edi,esi
c0013e07:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013e0f:	0f 85 77 01 00 00    	jne    c0013f8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013e15:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013e1b:	85 ed                	test   ebp,ebp
c0013e1d:	74 1d                	je     c0013e3c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	55                   	push   ebp
c0013e23:	e8 0c c2 ff ff       	call   c0010034 <EnvVarContainer::~EnvVarContainer()>
c0013e28:	59                   	pop    ecx
c0013e29:	5e                   	pop    esi
c0013e2a:	6a 0c                	push   0xc
c0013e2c:	55                   	push   ebp
c0013e2d:	e8 e6 66 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0013e32:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	89 f7                	mov    edi,esi
c0013e3a:	66 90                	xchg   ax,ax
c0013e3c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e42:	85 c0                	test   eax,eax
c0013e44:	0f 84 b6 00 00 00    	je     c0013f00 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e4a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e51:	31 c9                	xor    ecx,ecx
c0013e53:	eb 17                	jmp    c0013e6c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e55:	8d 76 00             	lea    esi,[esi+0x0]
c0013e58:	41                   	inc    ecx
c0013e59:	83 f9 10             	cmp    ecx,0x10
c0013e5c:	0f 84 9e 00 00 00    	je     c0013f00 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e6a:	66 90                	xchg   ax,ax
c0013e6c:	31 d2                	xor    edx,edx
c0013e6e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e75:	d3 fa                	sar    edx,cl
c0013e77:	83 e2 01             	and    edx,0x1
c0013e7a:	74 dc                	je     c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e7c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e7f:	01 d2                	add    edx,edx
c0013e81:	01 ca                	add    edx,ecx
c0013e83:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e86:	01 d0                	add    eax,edx
c0013e88:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e8e:	83 fd 07             	cmp    ebp,0x7
c0013e91:	75 c5                	jne    c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e93:	05 40 02 00 00       	add    eax,0x240
c0013e98:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e9b:	83 fd ff             	cmp    ebp,0xffffffff
c0013e9e:	0f 8c f0 00 00 00    	jl     c0013f94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013ea4:	0f 84 ae 01 00 00    	je     c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013eaa:	85 ed                	test   ebp,ebp
c0013eac:	0f 84 92 01 00 00    	je     c0014044 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013eb2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013eb4:	75 a2                	jne    c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013eb6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ebc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ec0:	01 d0                	add    eax,edx
c0013ec2:	66 90                	xchg   ax,ax
c0013ec4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013ed1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ed4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013eda:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013ee1:	50                   	push   eax
c0013ee2:	e8 1d fe ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013eed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ef1:	89 f7                	mov    edi,esi
c0013ef3:	41                   	inc    ecx
c0013ef4:	83 f9 10             	cmp    ecx,0x10
c0013ef7:	0f 85 67 ff ff ff    	jne    c0013e64 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013efd:	8d 76 00             	lea    esi,[esi+0x0]
c0013f00:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013f06:	85 c0                	test   eax,eax
c0013f08:	74 62                	je     c0013f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f0a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013f10:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013f16:	74 54                	je     c0013f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	68 84 61 02 c0       	push   0xc0026184
c0013f20:	e8 d7 8f 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f25:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f2c:	89 c7                	mov    edi,eax
c0013f2e:	e8 ad 8f 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	84 c0                	test   al,al
c0013f38:	0f 84 ce 00 00 00    	je     c001400c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f43:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f49:	85 d2                	test   edx,edx
c0013f4b:	74 0f                	je     c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f52:	52                   	push   edx
c0013f53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f56:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f66:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f69:	8d 76 00             	lea    esi,[esi+0x0]
c0013f6c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f72:	85 db                	test   ebx,ebx
c0013f74:	74 16                	je     c0013f8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	53                   	push   ebx
c0013f7a:	e8 31 59 ff ff       	call   c00098b0 <VAS::~VAS()>
c0013f7f:	58                   	pop    eax
c0013f80:	5a                   	pop    edx
c0013f81:	6a 14                	push   0x14
c0013f83:	53                   	push   ebx
c0013f84:	e8 8f 65 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	83 c4 1c             	add    esp,0x1c
c0013f8f:	5b                   	pop    ebx
c0013f90:	5e                   	pop    esi
c0013f91:	5f                   	pop    edi
c0013f92:	5d                   	pop    ebp
c0013f93:	c3                   	ret    
c0013f94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f98:	83 ec 0c             	sub    esp,0xc
c0013f9b:	68 bc f3 01 c0       	push   0xc001f3bc
c0013fa0:	e8 7e c3 ff ff       	call   c0010323 <KePanic(char const*)>
c0013fa5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fa8:	83 c4 10             	add    esp,0x10
c0013fab:	89 f7                	mov    edi,esi
c0013fad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fb1:	e9 a2 fe ff ff       	jmp    c0013e58 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013fb6:	66 90                	xchg   ax,ax
c0013fb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fbe:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013fc4:	75 1e                	jne    c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	68 24 f4 01 c0       	push   0xc001f424
c0013fce:	e8 3b 66 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013fd3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013fda:	e8 5d fa ff ff       	call   c0013a3c <blockTask(TaskState)>
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	83 ec 08             	sub    esp,0x8
c0013fe7:	56                   	push   esi
c0013fe8:	68 84 61 02 c0       	push   0xc0026184
c0013fed:	e8 ca 8f 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ff2:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013ff9:	e8 fe 8e 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	39 f8                	cmp    eax,edi
c0014003:	0f 84 37 ff ff ff    	je     c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014009:	8d 76 00             	lea    esi,[esi+0x0]
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	68 84 61 02 c0       	push   0xc0026184
c0014014:	e8 e3 8e 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014019:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0014020:	89 c6                	mov    esi,eax
c0014022:	e8 dd 8e 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	39 f3                	cmp    ebx,esi
c001402c:	74 b6                	je     c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001402e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014031:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014034:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001403a:	75 a8                	jne    c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001403c:	e9 77 ff ff ff       	jmp    c0013fb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014041:	8d 76 00             	lea    esi,[esi+0x0]
c0014044:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	68 f0 f3 01 c0       	push   0xc001f3f0
c0014050:	e9 4b ff ff ff       	jmp    c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014055:	8d 76 00             	lea    esi,[esi+0x0]
c0014058:	8b 36                	mov    esi,DWORD PTR [esi]
c001405a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001405e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014061:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014064:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001406a:	01 d7                	add    edi,edx
c001406c:	89 f8                	mov    eax,edi
c001406e:	e9 51 fe ff ff       	jmp    c0013ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014073:	90                   	nop

c0014074 <cleanerTaskFunction(void*)>:
c0014074:	53                   	push   ebx
c0014075:	83 ec 08             	sub    esp,0x8
c0014078:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001407d:	48                   	dec    eax
c001407e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014083:	75 03                	jne    c0014088 <cleanerTaskFunction(void*)+0x14>
c0014085:	fb                   	sti    
c0014086:	66 90                	xchg   ax,ax
c0014088:	fa                   	cli    
c0014089:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001408e:	80 3d 4c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002614c,0x0
c0014095:	8d 50 01             	lea    edx,[eax+0x1]
c0014098:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001409e:	0f 84 ac 00 00 00    	je     c0014150 <cleanerTaskFunction(void*)+0xdc>
c00140a4:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00140a9:	85 c0                	test   eax,eax
c00140ab:	75 03                	jne    c00140b0 <cleanerTaskFunction(void*)+0x3c>
c00140ad:	fb                   	sti    
c00140ae:	66 90                	xchg   ax,ax
c00140b0:	c6 05 4c 61 02 c0 00 	mov    BYTE PTR ds:0xc002614c,0x0
c00140b7:	fa                   	cli    
c00140b8:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140be:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00140c4:	fa                   	cli    
c00140c5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140cb:	eb 2b                	jmp    c00140f8 <cleanerTaskFunction(void*)+0x84>
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	68 6c 61 02 c0       	push   0xc002616c
c00140d8:	e8 1f 8e 00 00       	call   c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140dd:	c7 04 24 6c 61 02 c0 	mov    DWORD PTR [esp],0xc002616c
c00140e4:	89 c3                	mov    ebx,eax
c00140e6:	e8 19 8e 00 00       	call   c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140ee:	e8 b5 fc ff ff       	call   c0013da8 <cleanupTerminatedTask(ThreadControlBlock*)>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	66 90                	xchg   ax,ax
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	68 6c 61 02 c0       	push   0xc002616c
c0014100:	e8 db 8d 00 00       	call   c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	84 c0                	test   al,al
c001410a:	74 c4                	je     c00140d0 <cleanerTaskFunction(void*)+0x5c>
c001410c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014111:	48                   	dec    eax
c0014112:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014117:	75 03                	jne    c001411c <cleanerTaskFunction(void*)+0xa8>
c0014119:	fb                   	sti    
c001411a:	66 90                	xchg   ax,ax
c001411c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014121:	48                   	dec    eax
c0014122:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014127:	0f 85 4b ff ff ff    	jne    c0014078 <cleanerTaskFunction(void*)+0x4>
c001412d:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0014132:	85 c0                	test   eax,eax
c0014134:	0f 84 3e ff ff ff    	je     c0014078 <cleanerTaskFunction(void*)+0x4>
c001413a:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014144:	e8 f7 f6 ff ff       	call   c0013840 <schedule()>
c0014149:	e9 2a ff ff ff       	jmp    c0014078 <cleanerTaskFunction(void*)+0x4>
c001414e:	66 90                	xchg   ax,ax
c0014150:	83 ec 0c             	sub    esp,0xc
c0014153:	6a 02                	push   0x2
c0014155:	e8 ba f8 ff ff       	call   c0013a14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	e9 4e ff ff ff       	jmp    c00140b0 <cleanerTaskFunction(void*)+0x3c>
c0014162:	66 90                	xchg   ax,ax

c0014164 <terminateTask(int)>:
c0014164:	83 ec 14             	sub    esp,0x14
c0014167:	fa                   	cli    
c0014168:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001416e:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014174:	fa                   	cli    
c0014175:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001417b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001417f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014184:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014187:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001418c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001418f:	50                   	push   eax
c0014190:	68 6c 61 02 c0       	push   0xc002616c
c0014195:	e8 22 8e 00 00       	call   c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001419a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00141a9:	a1 48 61 02 c0       	mov    eax,ds:0xc0026148
c00141ae:	85 c0                	test   eax,eax
c00141b0:	74 5e                	je     c0014210 <terminateTask(int)+0xac>
c00141b2:	83 ec 0c             	sub    esp,0xc
c00141b5:	c6 05 4c 61 02 c0 01 	mov    BYTE PTR ds:0xc002614c,0x1
c00141bc:	50                   	push   eax
c00141bd:	e8 42 fb ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c00141c2:	83 c4 10             	add    esp,0x10
c00141c5:	8d 76 00             	lea    esi,[esi+0x0]
c00141c8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00141cd:	48                   	dec    eax
c00141ce:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00141d3:	75 03                	jne    c00141d8 <terminateTask(int)+0x74>
c00141d5:	fb                   	sti    
c00141d6:	66 90                	xchg   ax,ax
c00141d8:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141dd:	48                   	dec    eax
c00141de:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00141e3:	75 0b                	jne    c00141f0 <terminateTask(int)+0x8c>
c00141e5:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c00141ec:	75 36                	jne    c0014224 <terminateTask(int)+0xc0>
c00141ee:	66 90                	xchg   ax,ax
c00141f0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00141f5:	48                   	dec    eax
c00141f6:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00141fb:	75 03                	jne    c0014200 <terminateTask(int)+0x9c>
c00141fd:	fb                   	sti    
c00141fe:	66 90                	xchg   ax,ax
c0014200:	fa                   	cli    
c0014201:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014207:	90                   	nop
c0014208:	e8 33 f6 ff ff       	call   c0013840 <schedule()>
c001420d:	eb e1                	jmp    c00141f0 <terminateTask(int)+0x8c>
c001420f:	90                   	nop
c0014210:	83 ec 0c             	sub    esp,0xc
c0014213:	68 20 f3 01 c0       	push   0xc001f320
c0014218:	e8 f1 63 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001421d:	83 c4 10             	add    esp,0x10
c0014220:	eb a6                	jmp    c00141c8 <terminateTask(int)+0x64>
c0014222:	66 90                	xchg   ax,ax
c0014224:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001422e:	eb d8                	jmp    c0014208 <terminateTask(int)+0xa4>

c0014230 <Thr::terminateFromIRQ(int)>:
c0014230:	83 ec 18             	sub    esp,0x18
c0014233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014237:	50                   	push   eax
c0014238:	e8 27 ff ff ff       	call   c0014164 <terminateTask(int)>
c001423d:	90                   	nop
c001423e:	66 90                	xchg   ax,ax

c0014240 <Semaphore::release()>:
c0014240:	83 ec 0c             	sub    esp,0xc
c0014243:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014247:	fa                   	cli    
c0014248:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001424d:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014253:	8d 48 01             	lea    ecx,[eax+0x1]
c0014256:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c001425c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001425f:	85 c9                	test   ecx,ecx
c0014261:	74 41                	je     c00142a4 <Semaphore::release()+0x64>
c0014263:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001426c:	51                   	push   ecx
c001426d:	e8 92 fa ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c0014272:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	48                   	dec    eax
c001427b:	90                   	nop
c001427c:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014281:	85 c0                	test   eax,eax
c0014283:	75 0b                	jne    c0014290 <Semaphore::release()+0x50>
c0014285:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c001428a:	85 c0                	test   eax,eax
c001428c:	75 1e                	jne    c00142ac <Semaphore::release()+0x6c>
c001428e:	66 90                	xchg   ax,ax
c0014290:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014295:	48                   	dec    eax
c0014296:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001429b:	75 03                	jne    c00142a0 <Semaphore::release()+0x60>
c001429d:	fb                   	sti    
c001429e:	66 90                	xchg   ax,ax
c00142a0:	83 c4 0c             	add    esp,0xc
c00142a3:	c3                   	ret    
c00142a4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00142a7:	eb d3                	jmp    c001427c <Semaphore::release()+0x3c>
c00142a9:	8d 76 00             	lea    esi,[esi+0x0]
c00142ac:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00142b6:	e8 85 f5 ff ff       	call   c0013840 <schedule()>
c00142bb:	eb d3                	jmp    c0014290 <Semaphore::release()+0x50>
c00142bd:	8d 76 00             	lea    esi,[esi+0x0]

c00142c0 <__static_initialization_and_destruction_0(int, int)>:
c00142c0:	83 ec 0c             	sub    esp,0xc
c00142c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00142c8:	0f 85 8e 00 00 00    	jne    c001435c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142ce:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00142d6:	0f 85 80 00 00 00    	jne    c001435c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142dc:	83 ec 0c             	sub    esp,0xc
c00142df:	68 84 61 02 c0       	push   0xc0026184
c00142e4:	e8 7f 8f 00 00       	call   c001d268 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142e9:	83 c4 10             	add    esp,0x10
c00142ec:	83 ec 04             	sub    esp,0x4
c00142ef:	68 40 ff 01 c0       	push   0xc001ff40
c00142f4:	68 84 61 02 c0       	push   0xc0026184
c00142f9:	68 18 d2 01 c0       	push   0xc001d218
c00142fe:	e8 c5 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c0014303:	83 c4 10             	add    esp,0x10
c0014306:	83 ec 0c             	sub    esp,0xc
c0014309:	68 78 61 02 c0       	push   0xc0026178
c001430e:	e8 55 8f 00 00       	call   c001d268 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	83 ec 04             	sub    esp,0x4
c0014319:	68 40 ff 01 c0       	push   0xc001ff40
c001431e:	68 78 61 02 c0       	push   0xc0026178
c0014323:	68 18 d2 01 c0       	push   0xc001d218
c0014328:	e8 9b 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c001432d:	83 c4 10             	add    esp,0x10
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	68 6c 61 02 c0       	push   0xc002616c
c0014338:	e8 2b 8f 00 00       	call   c001d268 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	83 ec 04             	sub    esp,0x4
c0014343:	68 40 ff 01 c0       	push   0xc001ff40
c0014348:	68 6c 61 02 c0       	push   0xc002616c
c001434d:	68 18 d2 01 c0       	push   0xc001d218
c0014352:	e8 71 61 ff ff       	call   c000a4c8 <__cxa_atexit>
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	66 90                	xchg   ax,ax
c001435c:	90                   	nop
c001435d:	83 c4 0c             	add    esp,0xc
c0014360:	c3                   	ret    
c0014361:	8d 76 00             	lea    esi,[esi+0x0]

c0014364 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014364:	83 ec 0c             	sub    esp,0xc
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	68 ff ff 00 00       	push   0xffff
c001436f:	6a 01                	push   0x1
c0014371:	e8 4a ff ff ff       	call   c00142c0 <__static_initialization_and_destruction_0(int, int)>
c0014376:	83 c4 10             	add    esp,0x10
c0014379:	83 c4 0c             	add    esp,0xc
c001437c:	c3                   	ret    

c001437d <Vm::inbv(unsigned short)>:
c001437d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014381:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014386:	75 06                	jne    c001438e <Vm::inbv(unsigned short)+0x11>
c0014388:	a0 cc 61 02 c0       	mov    al,ds:0xc00261cc
c001438d:	c3                   	ret    
c001438e:	ec                   	in     al,dx
c001438f:	c3                   	ret    

c0014390 <Vm::outbv(unsigned short, unsigned char)>:
c0014390:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014398:	66 81 fa fe fe       	cmp    dx,0xfefe
c001439d:	75 25                	jne    c00143c4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001439f:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c00143a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00143a8:	88 81 e0 61 02 c0    	mov    BYTE PTR [ecx-0x3ffd9e20],al
c00143ae:	89 15 cc 61 02 c0    	mov    DWORD PTR ds:0xc00261cc,edx
c00143b4:	83 fa 20             	cmp    edx,0x20
c00143b7:	75 0c                	jne    c00143c5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00143b9:	c7 05 cc 61 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x1f
c00143c3:	c3                   	ret    
c00143c4:	ee                   	out    dx,al
c00143c5:	c3                   	ret    

c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00143c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00143d0:	c1 e0 04             	shl    eax,0x4
c00143d3:	01 d0                	add    eax,edx
c00143d5:	c3                   	ret    

c00143d6 <Vm::getSegment(unsigned int)>:
c00143d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143da:	c1 e8 10             	shr    eax,0x10
c00143dd:	c3                   	ret    

c00143de <Vm::getOffset(unsigned int)>:
c00143de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143e2:	c3                   	ret    

c00143e3 <Vm::mainloop2()>:
c00143e3:	83 ec 18             	sub    esp,0x18
c00143e6:	fa                   	cli    
c00143e7:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00143ed:	6a 02                	push   0x2
c00143ef:	c6 05 c5 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c5,0x1
c00143f6:	e8 19 f6 ff ff       	call   c0013a14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014400:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014404:	52                   	push   edx
c0014405:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014409:	52                   	push   edx
c001440a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001440e:	52                   	push   edx
c001440f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014413:	50                   	push   eax
c0014414:	e8 f6 bd fe ff       	call   c000020f <goToVM86>
c0014419:	83 c4 2c             	add    esp,0x2c
c001441c:	c3                   	ret    

c001441d <Vm::mainVm8086Loop(void*)>:
c001441d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014422:	48                   	dec    eax
c0014423:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014428:	75 01                	jne    c001442b <Vm::mainVm8086Loop(void*)+0xe>
c001442a:	fb                   	sti    
c001442b:	eb b6                	jmp    c00143e3 <Vm::mainloop2()>

c001442d <Vm::mainloop3(unsigned long)>:
c001442d:	83 ec 18             	sub    esp,0x18
c0014430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014434:	fa                   	cli    
c0014435:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001443b:	6a 02                	push   0x2
c001443d:	c6 05 c4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c4,0x1
c0014444:	a3 c0 61 02 c0       	mov    ds:0xc00261c0,eax
c0014449:	e8 c6 f5 ff ff       	call   c0013a14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001444e:	83 c4 1c             	add    esp,0x1c
c0014451:	eb 90                	jmp    c00143e3 <Vm::mainloop2()>

c0014453 <Vm::initialise8086()>:
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	68 80 00 00 00       	push   0x80
c001445b:	6a 00                	push   0x0
c001445d:	68 1d 44 01 c0       	push   0xc001441d
c0014462:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0014468:	e8 b3 f1 ff ff       	call   c0013620 <Process::createThread(void (*)(void*), void*, int)>
c001446d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014474:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c0014479:	68 00 01 00 00       	push   0x100
c001447e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014483:	6a 00                	push   0x0
c0014485:	6a 00                	push   0x0
c0014487:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001448d:	e8 7c 58 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014492:	83 c4 2c             	add    esp,0x2c
c0014495:	c3                   	ret    

c0014496 <Vm::finish8086()>:
c0014496:	53                   	push   ebx
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	fa                   	cli    
c001449b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00144a1:	80 3d c4 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c4,0x0
c00144a8:	75 15                	jne    c00144bf <Vm::finish8086()+0x29>
c00144aa:	e8 91 f3 ff ff       	call   c0013840 <schedule()>
c00144af:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144b4:	48                   	dec    eax
c00144b5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00144ba:	75 de                	jne    c001449a <Vm::finish8086()+0x4>
c00144bc:	fb                   	sti    
c00144bd:	eb db                	jmp    c001449a <Vm::finish8086()+0x4>
c00144bf:	83 ec 0c             	sub    esp,0xc
c00144c2:	8b 1d c0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261c0
c00144c8:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00144ce:	c6 05 c4 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c4,0x0
c00144d5:	e8 2a f8 ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c00144da:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144df:	83 c4 10             	add    esp,0x10
c00144e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00144e5:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c00144eb:	85 d2                	test   edx,edx
c00144ed:	75 01                	jne    c00144f0 <Vm::finish8086()+0x5a>
c00144ef:	fb                   	sti    
c00144f0:	89 d8                	mov    eax,ebx
c00144f2:	83 c4 08             	add    esp,0x8
c00144f5:	5b                   	pop    ebx
c00144f6:	c3                   	ret    

c00144f7 <Vm::getOutput8086(unsigned char*)>:
c00144f7:	57                   	push   edi
c00144f8:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c00144fe:	56                   	push   esi
c00144ff:	be e0 61 02 c0       	mov    esi,0xc00261e0
c0014504:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014508:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001450a:	a1 cc 61 02 c0       	mov    eax,ds:0xc00261cc
c001450f:	5e                   	pop    esi
c0014510:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001451a:	5f                   	pop    edi
c001451b:	c3                   	ret    

c001451c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001451c:	55                   	push   ebp
c001451d:	57                   	push   edi
c001451e:	56                   	push   esi
c001451f:	53                   	push   ebx
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014527:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001452b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001452f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014533:	fa                   	cli    
c0014534:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001453a:	80 3d c5 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c5,0x0
c0014541:	75 15                	jne    c0014558 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014543:	e8 f8 f2 ff ff       	call   c0013840 <schedule()>
c0014548:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001454d:	48                   	dec    eax
c001454e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014553:	75 de                	jne    c0014533 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014555:	fb                   	sti    
c0014556:	eb db                	jmp    c0014533 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014558:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c001455d:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c0014567:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001456b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001456f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014573:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014577:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001457b:	0f b7 ff             	movzx  edi,di
c001457e:	0f b7 f6             	movzx  esi,si
c0014581:	50                   	push   eax
c0014582:	6a 20                	push   0x20
c0014584:	6a 00                	push   0x0
c0014586:	68 e0 61 02 c0       	push   0xc00261e0
c001458b:	e8 40 bf fe ff       	call   c00004d0 <memset>
c0014590:	5a                   	pop    edx
c0014591:	59                   	pop    ecx
c0014592:	57                   	push   edi
c0014593:	56                   	push   esi
c0014594:	e8 2d fe ff ff       	call   c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0014599:	83 c4 10             	add    esp,0x10
c001459c:	89 c7                	mov    edi,eax
c001459e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145a8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00145ad:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c00145b4:	48                   	dec    eax
c00145b5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00145ba:	75 01                	jne    c00145bd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00145bc:	fb                   	sti    
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00145c6:	e8 39 f7 ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c00145cb:	83 c4 1c             	add    esp,0x1c
c00145ce:	b0 01                	mov    al,0x1
c00145d0:	5b                   	pop    ebx
c00145d1:	5e                   	pop    esi
c00145d2:	5f                   	pop    edi
c00145d3:	5d                   	pop    ebp
c00145d4:	c3                   	ret    

c00145d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145d5:	55                   	push   ebp
c00145d6:	57                   	push   edi
c00145d7:	56                   	push   esi
c00145d8:	53                   	push   ebx
c00145d9:	83 ec 2c             	sub    esp,0x2c
c00145dc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00145e0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00145e4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00145e8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145ec:	fa                   	cli    
c00145ed:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00145f3:	0f b6 35 c5 61 02 c0 	movzx  esi,BYTE PTR ds:0xc00261c5
c00145fa:	89 f0                	mov    eax,esi
c00145fc:	84 c0                	test   al,al
c00145fe:	75 1d                	jne    c001461d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014600:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014604:	e8 37 f2 ff ff       	call   c0013840 <schedule()>
c0014609:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001460e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014612:	48                   	dec    eax
c0014613:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014618:	75 d2                	jne    c00145ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001461a:	fb                   	sti    
c001461b:	eb cf                	jmp    c00145ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001461d:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c0014622:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001462c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014630:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014634:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014638:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001463c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014640:	50                   	push   eax
c0014641:	6a 20                	push   0x20
c0014643:	6a 00                	push   0x0
c0014645:	68 e0 61 02 c0       	push   0xc00261e0
c001464a:	e8 81 be fe ff       	call   c00004d0 <memset>
c001464f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014656:	e8 1a 32 ff ff       	call   c0007875 <malloc>
c001465b:	83 c4 0c             	add    esp,0xc
c001465e:	89 c3                	mov    ebx,eax
c0014660:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0014666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001466a:	50                   	push   eax
c001466b:	e8 14 65 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	85 db                	test   ebx,ebx
c0014675:	75 0a                	jne    c0014681 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014677:	83 ec 0c             	sub    esp,0xc
c001467a:	68 4c f4 01 c0       	push   0xc001f44c
c001467f:	eb 3e                	jmp    c00146bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014681:	50                   	push   eax
c0014682:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014686:	50                   	push   eax
c0014687:	8d 44 24 20          	lea    eax,[esp+0x20]
c001468b:	50                   	push   eax
c001468c:	53                   	push   ebx
c001468d:	e8 5e 68 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0014692:	83 c4 10             	add    esp,0x10
c0014695:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001469a:	74 0a                	je     c00146a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	68 60 f4 01 c0       	push   0xc001f460
c00146a4:	eb 19                	jmp    c00146bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146a6:	51                   	push   ecx
c00146a7:	51                   	push   ecx
c00146a8:	6a 01                	push   0x1
c00146aa:	53                   	push   ebx
c00146ab:	e8 94 65 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	85 c0                	test   eax,eax
c00146b5:	74 24                	je     c00146db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	68 79 f4 01 c0       	push   0xc001f479
c00146bf:	e8 5f bc ff ff       	call   c0010323 <KePanic(char const*)>
c00146c4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	48                   	dec    eax
c00146cd:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00146d2:	85 c0                	test   eax,eax
c00146d4:	75 01                	jne    c00146d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00146d6:	fb                   	sti    
c00146d7:	31 f6                	xor    esi,esi
c00146d9:	eb 58                	jmp    c0014733 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00146db:	0f b7 ed             	movzx  ebp,bp
c00146de:	50                   	push   eax
c00146df:	0f b7 ff             	movzx  edi,di
c00146e2:	50                   	push   eax
c00146e3:	55                   	push   ebp
c00146e4:	57                   	push   edi
c00146e5:	e8 dc fc ff ff       	call   c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>
c00146ea:	5a                   	pop    edx
c00146eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146ed:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146f1:	51                   	push   ecx
c00146f2:	50                   	push   eax
c00146f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146fb:	53                   	push   ebx
c00146fc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146ff:	83 c4 14             	add    esp,0x14
c0014702:	53                   	push   ebx
c0014703:	e8 9a 65 ff ff       	call   c000aca2 <File::close()>
c0014708:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	48                   	dec    eax
c0014711:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c0014718:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001471d:	85 c0                	test   eax,eax
c001471f:	75 01                	jne    c0014722 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014721:	fb                   	sti    
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001472b:	e8 d4 f5 ff ff       	call   c0013d04 <unblockTask(ThreadControlBlock*)>
c0014730:	83 c4 10             	add    esp,0x10
c0014733:	83 c4 2c             	add    esp,0x2c
c0014736:	89 f0                	mov    eax,esi
c0014738:	5b                   	pop    ebx
c0014739:	5e                   	pop    esi
c001473a:	5f                   	pop    edi
c001473b:	5d                   	pop    ebp
c001473c:	c3                   	ret    

c001473d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001473d:	57                   	push   edi
c001473e:	56                   	push   esi
c001473f:	53                   	push   ebx
c0014740:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014748:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001474c:	83 e8 06             	sub    eax,0x6
c001474f:	0f b7 c0             	movzx  eax,ax
c0014752:	50                   	push   eax
c0014753:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014758:	50                   	push   eax
c0014759:	e8 68 fc ff ff       	call   c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001475e:	5a                   	pop    edx
c001475f:	5e                   	pop    esi
c0014760:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014763:	8d 56 fa             	lea    edx,[esi-0x6]
c0014766:	81 e2 ff ff 00 00    	and    edx,0xffff
c001476c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001476f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014772:	83 c2 02             	add    edx,0x2
c0014775:	66 89 10             	mov    WORD PTR [eax],dx
c0014778:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001477b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001477f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014782:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014786:	89 d6                	mov    esi,edx
c0014788:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001478e:	66 81 e6 ff fd       	and    si,0xfdff
c0014793:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014797:	74 07                	je     c00147a0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014799:	89 d6                	mov    esi,edx
c001479b:	66 81 ce 00 02       	or     si,0x200
c00147a0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00147a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147a9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00147ad:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00147b5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00147b8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00147c0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00147c3:	5b                   	pop    ebx
c00147c4:	5e                   	pop    esi
c00147c5:	5f                   	pop    edi
c00147c6:	c3                   	ret    

c00147c7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00147c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d1:	c1 e0 04             	shl    eax,0x4
c00147d4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00147d7:	c3                   	ret    

c00147d8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00147d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147e2:	c1 e0 04             	shl    eax,0x4
c00147e5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00147e9:	c3                   	ret    

c00147ea <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00147ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147f4:	c1 e0 04             	shl    eax,0x4
c00147f7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147fa:	c3                   	ret    

c00147fb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014800:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014805:	c1 e0 04             	shl    eax,0x4
c0014808:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001480c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001480f:	c3                   	ret    

c0014810 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014810:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014815:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001481a:	c1 e0 04             	shl    eax,0x4
c001481d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014821:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014825:	c3                   	ret    

c0014826 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014826:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001482b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014830:	c1 e0 04             	shl    eax,0x4
c0014833:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014837:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001483a:	c3                   	ret    

c001483b <Vm::faultHandler(regs*)>:
c001483b:	55                   	push   ebp
c001483c:	57                   	push   edi
c001483d:	56                   	push   esi
c001483e:	53                   	push   ebx
c001483f:	83 ec 1c             	sub    esp,0x1c
c0014842:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014846:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014849:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001484d:	0f b7 f8             	movzx  edi,ax
c0014850:	52                   	push   edx
c0014851:	0f b7 c0             	movzx  eax,ax
c0014854:	50                   	push   eax
c0014855:	e8 6c fb ff ff       	call   c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001485a:	5a                   	pop    edx
c001485b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001485e:	59                   	pop    ecx
c001485f:	89 c1                	mov    ecx,eax
c0014861:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014864:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014868:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001486d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014871:	0f b7 c5             	movzx  eax,bp
c0014874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014878:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001487c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014880:	e8 41 fb ff ff       	call   c00143c6 <Vm::realToLinear(unsigned short, unsigned short)>
c0014885:	5e                   	pop    esi
c0014886:	be 06 00 00 00       	mov    esi,0x6
c001488b:	5a                   	pop    edx
c001488c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014891:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014896:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014899:	80 fa 9d             	cmp    dl,0x9d
c001489c:	0f 84 2c 02 00 00    	je     c0014ace <Vm::faultHandler(regs*)+0x293>
c00148a2:	0f 87 91 00 00 00    	ja     c0014939 <Vm::faultHandler(regs*)+0xfe>
c00148a8:	80 fa 66             	cmp    dl,0x66
c00148ab:	0f 84 98 01 00 00    	je     c0014a49 <Vm::faultHandler(regs*)+0x20e>
c00148b1:	77 47                	ja     c00148fa <Vm::faultHandler(regs*)+0xbf>
c00148b3:	80 fa 36             	cmp    dl,0x36
c00148b6:	0f 84 80 01 00 00    	je     c0014a3c <Vm::faultHandler(regs*)+0x201>
c00148bc:	77 1a                	ja     c00148d8 <Vm::faultHandler(regs*)+0x9d>
c00148be:	80 fa 26             	cmp    dl,0x26
c00148c1:	0f 84 4e 01 00 00    	je     c0014a15 <Vm::faultHandler(regs*)+0x1da>
c00148c7:	80 fa 2e             	cmp    dl,0x2e
c00148ca:	0f 85 e2 05 00 00    	jne    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c00148d0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148d3:	31 f6                	xor    esi,esi
c00148d5:	41                   	inc    ecx
c00148d6:	eb be                	jmp    c0014896 <Vm::faultHandler(regs*)+0x5b>
c00148d8:	80 fa 64             	cmp    dl,0x64
c00148db:	0f 84 41 01 00 00    	je     c0014a22 <Vm::faultHandler(regs*)+0x1e7>
c00148e1:	0f 87 48 01 00 00    	ja     c0014a2f <Vm::faultHandler(regs*)+0x1f4>
c00148e7:	80 fa 3e             	cmp    dl,0x3e
c00148ea:	0f 85 c2 05 00 00    	jne    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c00148f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148f3:	be 01 00 00 00       	mov    esi,0x1
c00148f8:	eb db                	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c00148fa:	80 fa 6d             	cmp    dl,0x6d
c00148fd:	0f 84 ec 02 00 00    	je     c0014bef <Vm::faultHandler(regs*)+0x3b4>
c0014903:	77 17                	ja     c001491c <Vm::faultHandler(regs*)+0xe1>
c0014905:	80 fa 67             	cmp    dl,0x67
c0014908:	0f 84 48 01 00 00    	je     c0014a56 <Vm::faultHandler(regs*)+0x21b>
c001490e:	80 fa 6c             	cmp    dl,0x6c
c0014911:	0f 84 69 02 00 00    	je     c0014b80 <Vm::faultHandler(regs*)+0x345>
c0014917:	e9 96 05 00 00       	jmp    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c001491c:	80 fa 6f             	cmp    dl,0x6f
c001491f:	0f 84 f4 03 00 00    	je     c0014d19 <Vm::faultHandler(regs*)+0x4de>
c0014925:	0f 82 59 03 00 00    	jb     c0014c84 <Vm::faultHandler(regs*)+0x449>
c001492b:	80 fa 9c             	cmp    dl,0x9c
c001492e:	0f 84 2f 01 00 00    	je     c0014a63 <Vm::faultHandler(regs*)+0x228>
c0014934:	e9 79 05 00 00       	jmp    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c0014939:	80 fa ec             	cmp    dl,0xec
c001493c:	0f 84 14 05 00 00    	je     c0014e56 <Vm::faultHandler(regs*)+0x61b>
c0014942:	77 7b                	ja     c00149bf <Vm::faultHandler(regs*)+0x184>
c0014944:	80 fa e4             	cmp    dl,0xe4
c0014947:	0f 84 93 04 00 00    	je     c0014de0 <Vm::faultHandler(regs*)+0x5a5>
c001494d:	77 53                	ja     c00149a2 <Vm::faultHandler(regs*)+0x167>
c001494f:	80 fa cd             	cmp    dl,0xcd
c0014952:	0f 84 d9 01 00 00    	je     c0014b31 <Vm::faultHandler(regs*)+0x2f6>
c0014958:	80 fa cf             	cmp    dl,0xcf
c001495b:	0f 85 51 05 00 00    	jne    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c0014961:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014964:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014967:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001496b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001496e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014972:	81 ca 00 02 02 00    	or     edx,0x20200
c0014978:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001497b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001497f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014985:	66 c1 e8 09          	shr    ax,0x9
c0014989:	83 e0 01             	and    eax,0x1
c001498c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001498f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014992:	83 c0 06             	add    eax,0x6
c0014995:	25 ff ff 00 00       	and    eax,0xffff
c001499a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001499d:	e9 0c 05 00 00       	jmp    c0014eae <Vm::faultHandler(regs*)+0x673>
c00149a2:	80 fa e6             	cmp    dl,0xe6
c00149a5:	0f 84 7f 04 00 00    	je     c0014e2a <Vm::faultHandler(regs*)+0x5ef>
c00149ab:	0f 82 4b 04 00 00    	jb     c0014dfc <Vm::faultHandler(regs*)+0x5c1>
c00149b1:	80 fa e7             	cmp    dl,0xe7
c00149b4:	0f 84 87 04 00 00    	je     c0014e41 <Vm::faultHandler(regs*)+0x606>
c00149ba:	e9 f3 04 00 00       	jmp    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c00149bf:	80 fa ef             	cmp    dl,0xef
c00149c2:	0f 84 d1 04 00 00    	je     c0014e99 <Vm::faultHandler(regs*)+0x65e>
c00149c8:	77 28                	ja     c00149f2 <Vm::faultHandler(regs*)+0x1b7>
c00149ca:	80 fa ed             	cmp    dl,0xed
c00149cd:	0f 84 9f 04 00 00    	je     c0014e72 <Vm::faultHandler(regs*)+0x637>
c00149d3:	80 fa ee             	cmp    dl,0xee
c00149d6:	0f 85 d6 04 00 00    	jne    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c00149dc:	50                   	push   eax
c00149dd:	50                   	push   eax
c00149de:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00149e2:	50                   	push   eax
c00149e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149e7:	50                   	push   eax
c00149e8:	e8 a3 f9 ff ff       	call   c0014390 <Vm::outbv(unsigned short, unsigned char)>
c00149ed:	e9 9f 04 00 00       	jmp    c0014e91 <Vm::faultHandler(regs*)+0x656>
c00149f2:	80 fa fa             	cmp    dl,0xfa
c00149f5:	0f 84 69 01 00 00    	je     c0014b64 <Vm::faultHandler(regs*)+0x329>
c00149fb:	80 fa fb             	cmp    dl,0xfb
c00149fe:	0f 84 6e 01 00 00    	je     c0014b72 <Vm::faultHandler(regs*)+0x337>
c0014a04:	80 fa f3             	cmp    dl,0xf3
c0014a07:	0f 85 a5 04 00 00    	jne    c0014eb2 <Vm::faultHandler(regs*)+0x677>
c0014a0d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a10:	e9 c0 fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a18:	be 02 00 00 00       	mov    esi,0x2
c0014a1d:	e9 b3 fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a22:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a25:	be 03 00 00 00       	mov    esi,0x3
c0014a2a:	e9 a6 fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a32:	be 04 00 00 00       	mov    esi,0x4
c0014a37:	e9 99 fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a3c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a3f:	be 05 00 00 00       	mov    esi,0x5
c0014a44:	e9 8c fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a4c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a51:	e9 7f fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a59:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a5e:	e9 72 fe ff ff       	jmp    c00148d5 <Vm::faultHandler(regs*)+0x9a>
c0014a63:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a66:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a6f:	74 30                	je     c0014aa1 <Vm::faultHandler(regs*)+0x266>
c0014a71:	83 e9 04             	sub    ecx,0x4
c0014a74:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a7a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a80:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a83:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a86:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a8c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a90:	0f 84 15 04 00 00    	je     c0014eab <Vm::faultHandler(regs*)+0x670>
c0014a96:	80 ce 02             	or     dh,0x2
c0014a99:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a9c:	e9 0a 04 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014aa1:	83 e9 02             	sub    ecx,0x2
c0014aa4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014aaa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014aad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014ab1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ab7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014abb:	74 05                	je     c0014ac2 <Vm::faultHandler(regs*)+0x287>
c0014abd:	80 ce 02             	or     dh,0x2
c0014ac0:	eb 03                	jmp    c0014ac5 <Vm::faultHandler(regs*)+0x28a>
c0014ac2:	80 e6 fd             	and    dh,0xfd
c0014ac5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014ac9:	e9 dd 03 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014ace:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ad3:	74 2a                	je     c0014aff <Vm::faultHandler(regs*)+0x2c4>
c0014ad5:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ad7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014add:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ae3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ae8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014aee:	c1 e8 09             	shr    eax,0x9
c0014af1:	83 e0 01             	and    eax,0x1
c0014af4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014af7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014afa:	83 c0 04             	add    eax,0x4
c0014afd:	eb 25                	jmp    c0014b24 <Vm::faultHandler(regs*)+0x2e9>
c0014aff:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b02:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b08:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b0b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b0e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b14:	66 c1 e8 09          	shr    ax,0x9
c0014b18:	83 e0 01             	and    eax,0x1
c0014b1b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b1e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b21:	83 c0 02             	add    eax,0x2
c0014b24:	25 ff ff 00 00       	and    eax,0xffff
c0014b29:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b2c:	e9 7a 03 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014b31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b35:	3c ee                	cmp    al,0xee
c0014b37:	75 10                	jne    c0014b49 <Vm::faultHandler(regs*)+0x30e>
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b3f:	e8 e9 f8 ff ff       	call   c001442d <Vm::mainloop3(unsigned long)>
c0014b44:	e9 4b 03 00 00       	jmp    c0014e94 <Vm::faultHandler(regs*)+0x659>
c0014b49:	83 ec 0c             	sub    esp,0xc
c0014b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b54:	51                   	push   ecx
c0014b55:	50                   	push   eax
c0014b56:	53                   	push   ebx
c0014b57:	e8 e1 fb ff ff       	call   c001473d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b5c:	83 c4 20             	add    esp,0x20
c0014b5f:	e9 4a 03 00 00       	jmp    c0014eae <Vm::faultHandler(regs*)+0x673>
c0014b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b69:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b6d:	e9 39 03 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014b72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b77:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b7b:	e9 2b 03 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014b80:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b83:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b88:	74 2b                	je     c0014bb5 <Vm::faultHandler(regs*)+0x37a>
c0014b8a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b91:	76 22                	jbe    c0014bb5 <Vm::faultHandler(regs*)+0x37a>
c0014b93:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b97:	50                   	push   eax
c0014b98:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b9c:	50                   	push   eax
c0014b9d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ba1:	50                   	push   eax
c0014ba2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ba6:	50                   	push   eax
c0014ba7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bab:	50                   	push   eax
c0014bac:	6a 6c                	push   0x6c
c0014bae:	6a 6c                	push   0x6c
c0014bb0:	e9 b9 01 00 00       	jmp    c0014d6e <Vm::faultHandler(regs*)+0x533>
c0014bb5:	83 ec 0c             	sub    esp,0xc
c0014bb8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bbc:	0f b7 f6             	movzx  esi,si
c0014bbf:	50                   	push   eax
c0014bc0:	e8 b8 f7 ff ff       	call   c001437d <Vm::inbv(unsigned short)>
c0014bc5:	83 c4 0c             	add    esp,0xc
c0014bc8:	0f b6 c0             	movzx  eax,al
c0014bcb:	50                   	push   eax
c0014bcc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014bd0:	50                   	push   eax
c0014bd1:	56                   	push   esi
c0014bd2:	e8 24 fc ff ff       	call   c00147fb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bdd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014be1:	74 03                	je     c0014be6 <Vm::faultHandler(regs*)+0x3ab>
c0014be3:	48                   	dec    eax
c0014be4:	eb 01                	jmp    c0014be7 <Vm::faultHandler(regs*)+0x3ac>
c0014be6:	40                   	inc    eax
c0014be7:	0f b7 c0             	movzx  eax,ax
c0014bea:	e9 8d 00 00 00       	jmp    c0014c7c <Vm::faultHandler(regs*)+0x441>
c0014bef:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014bf2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bf5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bfa:	74 29                	je     c0014c25 <Vm::faultHandler(regs*)+0x3ea>
c0014bfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c01:	76 22                	jbe    c0014c25 <Vm::faultHandler(regs*)+0x3ea>
c0014c03:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c07:	50                   	push   eax
c0014c08:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c0c:	50                   	push   eax
c0014c0d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c11:	50                   	push   eax
c0014c12:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c16:	50                   	push   eax
c0014c17:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c1b:	50                   	push   eax
c0014c1c:	6a 6d                	push   0x6d
c0014c1e:	6a 6d                	push   0x6d
c0014c20:	e9 49 01 00 00       	jmp    c0014d6e <Vm::faultHandler(regs*)+0x533>
c0014c25:	0f b7 c8             	movzx  ecx,ax
c0014c28:	0f b7 f6             	movzx  esi,si
c0014c2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c33:	74 20                	je     c0014c55 <Vm::faultHandler(regs*)+0x41a>
c0014c35:	ed                   	in     eax,dx
c0014c36:	55                   	push   ebp
c0014c37:	50                   	push   eax
c0014c38:	51                   	push   ecx
c0014c39:	56                   	push   esi
c0014c3a:	e8 e7 fb ff ff       	call   c0014826 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c3f:	83 c4 10             	add    esp,0x10
c0014c42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c49:	74 05                	je     c0014c50 <Vm::faultHandler(regs*)+0x415>
c0014c4b:	83 e8 04             	sub    eax,0x4
c0014c4e:	eb 27                	jmp    c0014c77 <Vm::faultHandler(regs*)+0x43c>
c0014c50:	83 c0 04             	add    eax,0x4
c0014c53:	eb 22                	jmp    c0014c77 <Vm::faultHandler(regs*)+0x43c>
c0014c55:	66 ed                	in     ax,dx
c0014c57:	0f b7 c0             	movzx  eax,ax
c0014c5a:	57                   	push   edi
c0014c5b:	50                   	push   eax
c0014c5c:	51                   	push   ecx
c0014c5d:	56                   	push   esi
c0014c5e:	e8 ad fb ff ff       	call   c0014810 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c6d:	74 05                	je     c0014c74 <Vm::faultHandler(regs*)+0x439>
c0014c6f:	83 e8 02             	sub    eax,0x2
c0014c72:	eb 03                	jmp    c0014c77 <Vm::faultHandler(regs*)+0x43c>
c0014c74:	83 c0 02             	add    eax,0x2
c0014c77:	25 ff ff 00 00       	and    eax,0xffff
c0014c7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c7f:	e9 27 02 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014c84:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c87:	3c 05                	cmp    al,0x5
c0014c89:	77 24                	ja     c0014caf <Vm::faultHandler(regs*)+0x474>
c0014c8b:	0f b6 c0             	movzx  eax,al
c0014c8e:	ff 24 85 ec f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b14]
c0014c95:	0f b7 fd             	movzx  edi,bp
c0014c98:	eb 15                	jmp    c0014caf <Vm::faultHandler(regs*)+0x474>
c0014c9a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c9e:	eb 0f                	jmp    c0014caf <Vm::faultHandler(regs*)+0x474>
c0014ca0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ca4:	eb 09                	jmp    c0014caf <Vm::faultHandler(regs*)+0x474>
c0014ca6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014caa:	eb 03                	jmp    c0014caf <Vm::faultHandler(regs*)+0x474>
c0014cac:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014caf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cb2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cb7:	74 29                	je     c0014ce2 <Vm::faultHandler(regs*)+0x4a7>
c0014cb9:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cbe:	76 22                	jbe    c0014ce2 <Vm::faultHandler(regs*)+0x4a7>
c0014cc0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cc4:	50                   	push   eax
c0014cc5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cc9:	50                   	push   eax
c0014cca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cce:	50                   	push   eax
c0014ccf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cd3:	50                   	push   eax
c0014cd4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cd8:	50                   	push   eax
c0014cd9:	6a 6e                	push   0x6e
c0014cdb:	6a 6e                	push   0x6e
c0014cdd:	e9 8c 00 00 00       	jmp    c0014d6e <Vm::faultHandler(regs*)+0x533>
c0014ce2:	0f b7 c0             	movzx  eax,ax
c0014ce5:	52                   	push   edx
c0014ce6:	52                   	push   edx
c0014ce7:	50                   	push   eax
c0014ce8:	57                   	push   edi
c0014ce9:	e8 d9 fa ff ff       	call   c00147c7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014cee:	59                   	pop    ecx
c0014cef:	0f b6 c0             	movzx  eax,al
c0014cf2:	5e                   	pop    esi
c0014cf3:	50                   	push   eax
c0014cf4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cf8:	50                   	push   eax
c0014cf9:	e8 92 f6 ff ff       	call   c0014390 <Vm::outbv(unsigned short, unsigned char)>
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d04:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d08:	74 03                	je     c0014d0d <Vm::faultHandler(regs*)+0x4d2>
c0014d0a:	48                   	dec    eax
c0014d0b:	eb 01                	jmp    c0014d0e <Vm::faultHandler(regs*)+0x4d3>
c0014d0d:	40                   	inc    eax
c0014d0e:	0f b7 c0             	movzx  eax,ax
c0014d11:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014d14:	e9 92 01 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014d19:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d1c:	3c 05                	cmp    al,0x5
c0014d1e:	77 1f                	ja     c0014d3f <Vm::faultHandler(regs*)+0x504>
c0014d20:	0f b6 c0             	movzx  eax,al
c0014d23:	ff 24 85 04 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0afc]
c0014d2a:	89 ef                	mov    edi,ebp
c0014d2c:	eb 11                	jmp    c0014d3f <Vm::faultHandler(regs*)+0x504>
c0014d2e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d31:	eb 0c                	jmp    c0014d3f <Vm::faultHandler(regs*)+0x504>
c0014d33:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d36:	eb 07                	jmp    c0014d3f <Vm::faultHandler(regs*)+0x504>
c0014d38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d3b:	eb 02                	jmp    c0014d3f <Vm::faultHandler(regs*)+0x504>
c0014d3d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d3f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d42:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d47:	74 37                	je     c0014d80 <Vm::faultHandler(regs*)+0x545>
c0014d49:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d4f:	76 2f                	jbe    c0014d80 <Vm::faultHandler(regs*)+0x545>
c0014d51:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d55:	50                   	push   eax
c0014d56:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d5a:	50                   	push   eax
c0014d5b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d5f:	50                   	push   eax
c0014d60:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d64:	50                   	push   eax
c0014d65:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d69:	50                   	push   eax
c0014d6a:	6a 6f                	push   0x6f
c0014d6c:	6a 6f                	push   0x6f
c0014d6e:	68 92 f4 01 c0       	push   0xc001f492
c0014d73:	e8 96 58 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014d78:	83 c4 20             	add    esp,0x20
c0014d7b:	e9 86 01 00 00       	jmp    c0014f06 <Vm::faultHandler(regs*)+0x6cb>
c0014d80:	0f b7 d7             	movzx  edx,di
c0014d83:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d86:	0f b7 c6             	movzx  eax,si
c0014d89:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d8f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d92:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d97:	74 1d                	je     c0014db6 <Vm::faultHandler(regs*)+0x57b>
c0014d99:	55                   	push   ebp
c0014d9a:	55                   	push   ebp
c0014d9b:	50                   	push   eax
c0014d9c:	52                   	push   edx
c0014d9d:	e8 48 fa ff ff       	call   c00147ea <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	89 fa                	mov    edx,edi
c0014da7:	ef                   	out    dx,eax
c0014da8:	85 c9                	test   ecx,ecx
c0014daa:	74 05                	je     c0014db1 <Vm::faultHandler(regs*)+0x576>
c0014dac:	83 ee 04             	sub    esi,0x4
c0014daf:	eb 21                	jmp    c0014dd2 <Vm::faultHandler(regs*)+0x597>
c0014db1:	83 c6 04             	add    esi,0x4
c0014db4:	eb 1c                	jmp    c0014dd2 <Vm::faultHandler(regs*)+0x597>
c0014db6:	55                   	push   ebp
c0014db7:	55                   	push   ebp
c0014db8:	50                   	push   eax
c0014db9:	52                   	push   edx
c0014dba:	e8 19 fa ff ff       	call   c00147d8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	89 fa                	mov    edx,edi
c0014dc4:	66 ef                	out    dx,ax
c0014dc6:	85 c9                	test   ecx,ecx
c0014dc8:	74 05                	je     c0014dcf <Vm::faultHandler(regs*)+0x594>
c0014dca:	83 ee 02             	sub    esi,0x2
c0014dcd:	eb 03                	jmp    c0014dd2 <Vm::faultHandler(regs*)+0x597>
c0014dcf:	83 c6 02             	add    esi,0x2
c0014dd2:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014dd8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014ddb:	e9 cb 00 00 00       	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014de0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014de7:	83 ec 0c             	sub    esp,0xc
c0014dea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dee:	50                   	push   eax
c0014def:	e8 89 f5 ff ff       	call   c001437d <Vm::inbv(unsigned short)>
c0014df4:	0f b6 c0             	movzx  eax,al
c0014df7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dfa:	eb 3f                	jmp    c0014e3b <Vm::faultHandler(regs*)+0x600>
c0014dfc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e01:	74 07                	je     c0014e0a <Vm::faultHandler(regs*)+0x5cf>
c0014e03:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e07:	ed                   	in     eax,dx
c0014e08:	eb 14                	jmp    c0014e1e <Vm::faultHandler(regs*)+0x5e3>
c0014e0a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014e0d:	66 31 f6             	xor    si,si
c0014e10:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014e13:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e17:	66 ed                	in     ax,dx
c0014e19:	0f b7 c0             	movzx  eax,ax
c0014e1c:	09 f0                	or     eax,esi
c0014e1e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e21:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e25:	e9 84 00 00 00       	jmp    c0014eae <Vm::faultHandler(regs*)+0x673>
c0014e2a:	52                   	push   edx
c0014e2b:	52                   	push   edx
c0014e2c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e30:	50                   	push   eax
c0014e31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e35:	50                   	push   eax
c0014e36:	e8 55 f5 ff ff       	call   c0014390 <Vm::outbv(unsigned short, unsigned char)>
c0014e3b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e3f:	eb 53                	jmp    c0014e94 <Vm::faultHandler(regs*)+0x659>
c0014e41:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e44:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e48:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e4d:	74 03                	je     c0014e52 <Vm::faultHandler(regs*)+0x617>
c0014e4f:	ef                   	out    dx,eax
c0014e50:	eb cf                	jmp    c0014e21 <Vm::faultHandler(regs*)+0x5e6>
c0014e52:	66 ef                	out    dx,ax
c0014e54:	eb cb                	jmp    c0014e21 <Vm::faultHandler(regs*)+0x5e6>
c0014e56:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e5d:	83 ec 0c             	sub    esp,0xc
c0014e60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e64:	50                   	push   eax
c0014e65:	e8 13 f5 ff ff       	call   c001437d <Vm::inbv(unsigned short)>
c0014e6a:	0f b6 c0             	movzx  eax,al
c0014e6d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e70:	eb 1f                	jmp    c0014e91 <Vm::faultHandler(regs*)+0x656>
c0014e72:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e7a:	74 03                	je     c0014e7f <Vm::faultHandler(regs*)+0x644>
c0014e7c:	ed                   	in     eax,dx
c0014e7d:	eb 0d                	jmp    c0014e8c <Vm::faultHandler(regs*)+0x651>
c0014e7f:	66 ed                	in     ax,dx
c0014e81:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e84:	0f b7 c0             	movzx  eax,ax
c0014e87:	66 31 d2             	xor    dx,dx
c0014e8a:	09 d0                	or     eax,edx
c0014e8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e8f:	eb 1a                	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014e91:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e94:	83 c4 10             	add    esp,0x10
c0014e97:	eb 15                	jmp    c0014eae <Vm::faultHandler(regs*)+0x673>
c0014e99:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e9c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e9f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ea4:	74 03                	je     c0014ea9 <Vm::faultHandler(regs*)+0x66e>
c0014ea6:	ef                   	out    dx,eax
c0014ea7:	eb 02                	jmp    c0014eab <Vm::faultHandler(regs*)+0x670>
c0014ea9:	66 ef                	out    dx,ax
c0014eab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014eae:	b0 01                	mov    al,0x1
c0014eb0:	eb 56                	jmp    c0014f08 <Vm::faultHandler(regs*)+0x6cd>
c0014eb2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014eb6:	50                   	push   eax
c0014eb7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ebb:	50                   	push   eax
c0014ebc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ec0:	50                   	push   eax
c0014ec1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ec5:	50                   	push   eax
c0014ec6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eca:	50                   	push   eax
c0014ecb:	52                   	push   edx
c0014ecc:	52                   	push   edx
c0014ecd:	68 bf f4 01 c0       	push   0xc001f4bf
c0014ed2:	e8 37 57 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014ed7:	83 c4 20             	add    esp,0x20
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	6a 60                	push   0x60
c0014edf:	e8 99 f4 ff ff       	call   c001437d <Vm::inbv(unsigned short)>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	3c 1c                	cmp    al,0x1c
c0014ee9:	74 04                	je     c0014eef <Vm::faultHandler(regs*)+0x6b4>
c0014eeb:	3c 5a                	cmp    al,0x5a
c0014eed:	75 eb                	jne    c0014eda <Vm::faultHandler(regs*)+0x69f>
c0014eef:	3c 5a                	cmp    al,0x5a
c0014ef1:	74 04                	je     c0014ef7 <Vm::faultHandler(regs*)+0x6bc>
c0014ef3:	3c 1c                	cmp    al,0x1c
c0014ef5:	75 0f                	jne    c0014f06 <Vm::faultHandler(regs*)+0x6cb>
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	6a 60                	push   0x60
c0014efc:	e8 7c f4 ff ff       	call   c001437d <Vm::inbv(unsigned short)>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	eb e9                	jmp    c0014eef <Vm::faultHandler(regs*)+0x6b4>
c0014f06:	31 c0                	xor    eax,eax
c0014f08:	83 c4 1c             	add    esp,0x1c
c0014f0b:	5b                   	pop    ebx
c0014f0c:	5e                   	pop    esi
c0014f0d:	5f                   	pop    edi
c0014f0e:	5d                   	pop    ebp
c0014f0f:	c3                   	ret    

c0014f10 <noCopro(unsigned long)>:
c0014f10:	c3                   	ret    

c0014f11 <nmiHandler(regs*, void*)>:
c0014f11:	83 ec 0c             	sub    esp,0xc
c0014f14:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0014f19:	83 ec 0c             	sub    esp,0xc
c0014f1c:	50                   	push   eax
c0014f1d:	e8 72 21 ff ff       	call   c0007094 <Computer::handleNMI()>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	90                   	nop
c0014f26:	83 c4 0c             	add    esp,0xc
c0014f29:	c3                   	ret    

c0014f2a <doubleFault(regs*, void*)>:
c0014f2a:	55                   	push   ebp
c0014f2b:	89 e5                	mov    ebp,esp
c0014f2d:	83 ec 08             	sub    esp,0x8
c0014f30:	83 ec 0c             	sub    esp,0xc
c0014f33:	68 1c f5 01 c0       	push   0xc001f51c
c0014f38:	e8 e6 b3 ff ff       	call   c0010323 <KePanic(char const*)>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	90                   	nop
c0014f41:	c9                   	leave  
c0014f42:	c3                   	ret    

c0014f43 <displayDebugInfo(regs*)>:
c0014f43:	83 ec 1c             	sub    esp,0x1c
c0014f46:	0f 20 c0             	mov    eax,cr0
c0014f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f4d:	0f 20 d0             	mov    eax,cr2
c0014f50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f54:	0f 20 d8             	mov    eax,cr3
c0014f57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f5b:	0f 20 e0             	mov    eax,cr4
c0014f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f65:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f68:	83 ec 08             	sub    esp,0x8
c0014f6b:	50                   	push   eax
c0014f6c:	68 38 f5 01 c0       	push   0xc001f538
c0014f71:	e8 98 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f7d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f80:	83 ec 08             	sub    esp,0x8
c0014f83:	50                   	push   eax
c0014f84:	68 29 f5 01 c0       	push   0xc001f529
c0014f89:	e8 80 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f95:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f98:	83 ec 08             	sub    esp,0x8
c0014f9b:	50                   	push   eax
c0014f9c:	68 34 f5 01 c0       	push   0xc001f534
c0014fa1:	e8 68 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fb0:	83 ec 08             	sub    esp,0x8
c0014fb3:	50                   	push   eax
c0014fb4:	68 43 f5 01 c0       	push   0xc001f543
c0014fb9:	e8 50 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014fc8:	83 ec 08             	sub    esp,0x8
c0014fcb:	50                   	push   eax
c0014fcc:	68 4e f5 01 c0       	push   0xc001f54e
c0014fd1:	e8 38 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fd6:	83 c4 10             	add    esp,0x10
c0014fd9:	83 ec 08             	sub    esp,0x8
c0014fdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fe0:	68 59 f5 01 c0       	push   0xc001f559
c0014fe5:	e8 24 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014fea:	83 c4 10             	add    esp,0x10
c0014fed:	83 ec 08             	sub    esp,0x8
c0014ff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014ff4:	68 64 f5 01 c0       	push   0xc001f564
c0014ff9:	e8 10 56 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015006:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	50                   	push   eax
c0015010:	e8 9e 34 ff ff       	call   c00084b3 <setActiveTerminal(VgaText*)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001501d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015023:	83 ec 08             	sub    esp,0x8
c0015026:	68 6f f5 01 c0       	push   0xc001f56f
c001502b:	50                   	push   eax
c001502c:	e8 c1 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015039:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015044:	8b 12                	mov    edx,DWORD PTR [edx]
c0015046:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015049:	83 c2 0c             	add    edx,0xc
c001504c:	83 ec 08             	sub    esp,0x8
c001504f:	52                   	push   edx
c0015050:	50                   	push   eax
c0015051:	e8 9c 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015056:	83 c4 10             	add    esp,0x10
c0015059:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001505e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015064:	83 ec 08             	sub    esp,0x8
c0015067:	68 78 f5 01 c0       	push   0xc001f578
c001506c:	50                   	push   eax
c001506d:	e8 80 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015072:	83 c4 10             	add    esp,0x10
c0015075:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001507a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015080:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015084:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015087:	83 ec 08             	sub    esp,0x8
c001508a:	52                   	push   edx
c001508b:	50                   	push   eax
c001508c:	e8 1b 37 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015099:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001509f:	83 ec 08             	sub    esp,0x8
c00150a2:	68 80 f5 01 c0       	push   0xc001f580
c00150a7:	50                   	push   eax
c00150a8:	e8 45 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00150ad:	83 c4 10             	add    esp,0x10
c00150b0:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150bf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00150c2:	83 ec 08             	sub    esp,0x8
c00150c5:	52                   	push   edx
c00150c6:	50                   	push   eax
c00150c7:	e8 e0 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150da:	83 ec 08             	sub    esp,0x8
c00150dd:	68 88 f5 01 c0       	push   0xc001f588
c00150e2:	50                   	push   eax
c00150e3:	e8 0a 37 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150fa:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150fd:	83 ec 08             	sub    esp,0x8
c0015100:	52                   	push   edx
c0015101:	50                   	push   eax
c0015102:	e8 a5 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015107:	83 c4 10             	add    esp,0x10
c001510a:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001510f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015115:	83 ec 08             	sub    esp,0x8
c0015118:	68 90 f5 01 c0       	push   0xc001f590
c001511d:	50                   	push   eax
c001511e:	e8 cf 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001512b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015131:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015135:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015138:	83 ec 08             	sub    esp,0x8
c001513b:	52                   	push   edx
c001513c:	50                   	push   eax
c001513d:	e8 6a 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001514a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015150:	83 ec 08             	sub    esp,0x8
c0015153:	68 98 f5 01 c0       	push   0xc001f598
c0015158:	50                   	push   eax
c0015159:	e8 94 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015166:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001516c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015170:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015173:	83 ec 08             	sub    esp,0x8
c0015176:	52                   	push   edx
c0015177:	50                   	push   eax
c0015178:	e8 2f 36 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001518b:	83 ec 08             	sub    esp,0x8
c001518e:	68 a0 f5 01 c0       	push   0xc001f5a0
c0015193:	50                   	push   eax
c0015194:	e8 59 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151ab:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151ae:	83 ec 08             	sub    esp,0x8
c00151b1:	52                   	push   edx
c00151b2:	50                   	push   eax
c00151b3:	e8 f4 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151c6:	83 ec 08             	sub    esp,0x8
c00151c9:	68 a8 f5 01 c0       	push   0xc001f5a8
c00151ce:	50                   	push   eax
c00151cf:	e8 1e 36 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e2:	83 ec 08             	sub    esp,0x8
c00151e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151e9:	50                   	push   eax
c00151ea:	e8 bd 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fd:	83 ec 08             	sub    esp,0x8
c0015200:	68 b1 f5 01 c0       	push   0xc001f5b1
c0015205:	50                   	push   eax
c0015206:	e8 e7 35 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015213:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015219:	83 ec 08             	sub    esp,0x8
c001521c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015220:	50                   	push   eax
c0015221:	e8 86 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001522e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015234:	83 ec 08             	sub    esp,0x8
c0015237:	68 b9 f5 01 c0       	push   0xc001f5b9
c001523c:	50                   	push   eax
c001523d:	e8 b0 35 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001524a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015250:	83 ec 08             	sub    esp,0x8
c0015253:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015257:	50                   	push   eax
c0015258:	e8 4f 35 ff ff       	call   c00087ac <VgaText::putx(unsigned int)>
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	fa                   	cli    
c0015261:	f4                   	hlt    
c0015262:	eb fe                	jmp    c0015262 <displayDebugInfo(regs*)+0x31f>

c0015264 <HalSystemIdle()>:
c0015264:	56                   	push   esi
c0015265:	53                   	push   ebx
c0015266:	83 ec 14             	sub    esp,0x14
c0015269:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001526e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015274:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001527a:	83 e0 04             	and    eax,0x4
c001527d:	84 c0                	test   al,al
c001527f:	0f 95 c0             	setne  al
c0015282:	84 c0                	test   al,al
c0015284:	74 4c                	je     c00152d2 <HalSystemIdle()+0x6e>
c0015286:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001528b:	83 ec 08             	sub    esp,0x8
c001528e:	68 e1 00 00 00       	push   0xe1
c0015293:	50                   	push   eax
c0015294:	e8 13 1c ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152a4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00152a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152ad:	83 e2 02             	and    edx,0x2
c00152b0:	89 d3                	mov    ebx,edx
c00152b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152b6:	83 e2 00             	and    edx,0x0
c00152b9:	89 d6                	mov    esi,edx
c00152bb:	56                   	push   esi
c00152bc:	53                   	push   ebx
c00152bd:	68 e1 00 00 00       	push   0xe1
c00152c2:	50                   	push   eax
c00152c3:	e8 10 1c ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	e8 c4 ae fe ff       	call   c0000194 <doTPAUSE>
c00152d0:	eb 01                	jmp    c00152d3 <HalSystemIdle()+0x6f>
c00152d2:	f4                   	hlt    
c00152d3:	90                   	nop
c00152d4:	83 c4 14             	add    esp,0x14
c00152d7:	5b                   	pop    ebx
c00152d8:	5e                   	pop    esi
c00152d9:	c3                   	ret    

c00152da <displayProgramFault(char const*)>:
c00152da:	83 ec 0c             	sub    esp,0xc
c00152dd:	83 ec 0c             	sub    esp,0xc
c00152e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e4:	e8 25 53 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152fc:	85 c0                	test   eax,eax
c00152fe:	74 21                	je     c0015321 <displayProgramFault(char const*)+0x47>
c0015300:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015305:	8b 00                	mov    eax,DWORD PTR [eax]
c0015307:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001530a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015310:	6a 04                	push   0x4
c0015312:	6a 0f                	push   0xf
c0015314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015318:	50                   	push   eax
c0015319:	e8 46 35 ff ff       	call   c0008864 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	90                   	nop
c0015322:	83 c4 0c             	add    esp,0xc
c0015325:	c3                   	ret    

c0015326 <gpFault(regs*, void*)>:
c0015326:	83 ec 1c             	sub    esp,0x1c
c0015329:	c7 05 10 62 02 c0 3b 48 01 c0 	mov    DWORD PTR ds:0xc0026210,0xc001483b
c0015333:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c0015338:	85 c0                	test   eax,eax
c001533a:	74 1c                	je     c0015358 <gpFault(regs*, void*)+0x32>
c001533c:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c0015341:	83 ec 0c             	sub    esp,0xc
c0015344:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015348:	ff d0                	call   eax
c001534a:	83 c4 10             	add    esp,0x10
c001534d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015351:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015356:	75 2e                	jne    c0015386 <gpFault(regs*, void*)+0x60>
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001535f:	e8 df fb ff ff       	call   c0014f43 <displayDebugInfo(regs*)>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	83 ec 0c             	sub    esp,0xc
c001536a:	68 c1 f5 01 c0       	push   0xc001f5c1
c001536f:	e8 66 ff ff ff       	call   c00152da <displayProgramFault(char const*)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	83 ec 0c             	sub    esp,0xc
c001537a:	6a 00                	push   0x0
c001537c:	e8 af ee ff ff       	call   c0014230 <Thr::terminateFromIRQ(int)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	eb 01                	jmp    c0015387 <gpFault(regs*, void*)+0x61>
c0015386:	90                   	nop
c0015387:	83 c4 1c             	add    esp,0x1c
c001538a:	c3                   	ret    

c001538b <pgFault(regs*, void*)>:
c001538b:	83 ec 1c             	sub    esp,0x1c
c001538e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015392:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015395:	0f 20 d0             	mov    eax,cr2
c0015398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001539c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153a0:	83 ec 04             	sub    esp,0x4
c00153a3:	52                   	push   edx
c00153a4:	50                   	push   eax
c00153a5:	68 a0 f6 01 c0       	push   0xc001f6a0
c00153aa:	e8 5f 52 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153bc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153c2:	0f 20 d2             	mov    edx,cr2
c00153c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153cd:	83 ec 08             	sub    esp,0x8
c00153d0:	52                   	push   edx
c00153d1:	50                   	push   eax
c00153d2:	e8 2d 4e ff ff       	call   c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	84 c0                	test   al,al
c00153dc:	75 2e                	jne    c001540c <pgFault(regs*, void*)+0x81>
c00153de:	83 ec 0c             	sub    esp,0xc
c00153e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153e5:	e8 59 fb ff ff       	call   c0014f43 <displayDebugInfo(regs*)>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	83 ec 0c             	sub    esp,0xc
c00153f0:	68 da f5 01 c0       	push   0xc001f5da
c00153f5:	e8 e0 fe ff ff       	call   c00152da <displayProgramFault(char const*)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	83 ec 0c             	sub    esp,0xc
c0015400:	6a 00                	push   0x0
c0015402:	e8 29 ee ff ff       	call   c0014230 <Thr::terminateFromIRQ(int)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	eb 01                	jmp    c001540d <pgFault(regs*, void*)+0x82>
c001540c:	90                   	nop
c001540d:	83 c4 1c             	add    esp,0x1c
c0015410:	c3                   	ret    

c0015411 <otherISRHandler(regs*, void*)>:
c0015411:	83 ec 0c             	sub    esp,0xc
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001541b:	e8 23 fb ff ff       	call   c0014f43 <displayDebugInfo(regs*)>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	83 ec 0c             	sub    esp,0xc
c0015426:	68 c8 f6 01 c0       	push   0xc001f6c8
c001542b:	e8 aa fe ff ff       	call   c00152da <displayProgramFault(char const*)>
c0015430:	83 c4 10             	add    esp,0x10
c0015433:	83 ec 0c             	sub    esp,0xc
c0015436:	6a 00                	push   0x0
c0015438:	e8 f3 ed ff ff       	call   c0014230 <Thr::terminateFromIRQ(int)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	90                   	nop
c0015441:	83 c4 0c             	add    esp,0xc
c0015444:	c3                   	ret    

c0015445 <opcodeFault(regs*, void*)>:
c0015445:	55                   	push   ebp
c0015446:	89 e5                	mov    ebp,esp
c0015448:	83 ec 08             	sub    esp,0x8
c001544b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015451:	83 ec 08             	sub    esp,0x8
c0015454:	50                   	push   eax
c0015455:	68 e5 f5 01 c0       	push   0xc001f5e5
c001545a:	e8 af 51 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015467:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001546d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015473:	84 c0                	test   al,al
c0015475:	74 21                	je     c0015498 <opcodeFault(regs*, void*)+0x53>
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	68 f0 f6 01 c0       	push   0xc001f6f0
c001547f:	e8 8a 51 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015484:	83 c4 10             	add    esp,0x10
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548d:	8d 50 19             	lea    edx,[eax+0x19]
c0015490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015493:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015496:	eb 2b                	jmp    c00154c3 <opcodeFault(regs*, void*)+0x7e>
c0015498:	83 ec 0c             	sub    esp,0xc
c001549b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001549e:	e8 a0 fa ff ff       	call   c0014f43 <displayDebugInfo(regs*)>
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	68 f3 f5 01 c0       	push   0xc001f5f3
c00154ae:	e8 27 fe ff ff       	call   c00152da <displayProgramFault(char const*)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	83 ec 0c             	sub    esp,0xc
c00154b9:	6a 00                	push   0x0
c00154bb:	e8 70 ed ff ff       	call   c0014230 <Thr::terminateFromIRQ(int)>
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	c9                   	leave  
c00154c4:	c3                   	ret    

c00154c5 <i386SaveCoprocessor(void*)>:
c00154c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154c9:	83 c0 3f             	add    eax,0x3f
c00154cc:	83 e0 c0             	and    eax,0xffffffc0
c00154cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154d3:	ff 25 0c 62 02 c0    	jmp    DWORD PTR ds:0xc002620c

c00154d9 <i386LoadCoprocessor(void*)>:
c00154d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154dd:	83 c0 3f             	add    eax,0x3f
c00154e0:	83 e0 c0             	and    eax,0xffffffc0
c00154e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154e7:	ff 25 08 62 02 c0    	jmp    DWORD PTR ds:0xc0026208

c00154ed <x87EmulHandler(regs*, void*)>:
c00154ed:	53                   	push   ebx
c00154ee:	83 ec 08             	sub    esp,0x8
c00154f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154fa:	74 10                	je     c001550c <x87EmulHandler(regs*, void*)+0x1f>
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	68 00 f6 01 c0       	push   0xc001f600
c0015504:	e8 1a ae ff ff       	call   c0010323 <KePanic(char const*)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	0f 20 c0             	mov    eax,cr0
c001550f:	a8 08                	test   al,0x8
c0015511:	74 59                	je     c001556c <x87EmulHandler(regs*, void*)+0x7f>
c0015513:	0f 06                	clts   
c0015515:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c001551a:	85 c0                	test   eax,eax
c001551c:	74 0e                	je     c001552c <x87EmulHandler(regs*, void*)+0x3f>
c001551e:	83 ec 0c             	sub    esp,0xc
c0015521:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015524:	e8 9c ff ff ff       	call   c00154c5 <i386SaveCoprocessor(void*)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015532:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015536:	75 12                	jne    c001554a <x87EmulHandler(regs*, void*)+0x5d>
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	68 40 02 00 00       	push   0x240
c0015540:	e8 30 23 ff ff       	call   c0007875 <malloc>
c0015545:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015548:	eb 10                	jmp    c001555a <x87EmulHandler(regs*, void*)+0x6d>
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c0015552:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015555:	e8 7f ff ff ff       	call   c00154d9 <i386LoadCoprocessor(void*)>
c001555a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	a3 04 62 02 c0       	mov    ds:0xc0026204,eax
c0015567:	83 c4 08             	add    esp,0x8
c001556a:	5b                   	pop    ebx
c001556b:	c3                   	ret    
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	68 14 f6 01 c0       	push   0xc001f614
c0015574:	e8 95 50 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015579:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015581:	83 c4 18             	add    esp,0x18
c0015584:	5b                   	pop    ebx
c0015585:	e9 a6 ec ff ff       	jmp    c0014230 <Thr::terminateFromIRQ(int)>

c001558a <HalInitialiseCoprocessor()>:
c001558a:	83 ec 10             	sub    esp,0x10
c001558d:	c7 05 04 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026204,0x0
c0015597:	6a 00                	push   0x0
c0015599:	68 ed 54 01 c0       	push   0xc00154ed
c001559e:	6a 07                	push   0x7
c00155a0:	e8 db 69 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155a5:	e8 06 6d 00 00       	call   c001c2b0 <avxDetect>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	85 c0                	test   eax,eax
c00155af:	74 1c                	je     c00155cd <HalInitialiseCoprocessor()+0x43>
c00155b1:	c7 05 0c 62 02 c0 da c2 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c2da
c00155bb:	c7 05 08 62 02 c0 eb c2 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c2eb
c00155c5:	83 c4 0c             	add    esp,0xc
c00155c8:	e9 2f 6d 00 00       	jmp    c001c2fc <avxInit>
c00155cd:	e8 be 6f 00 00       	call   c001c590 <absolutelyNoChanceInHell>
c00155d2:	85 c0                	test   eax,eax
c00155d4:	74 1c                	je     c00155f2 <HalInitialiseCoprocessor()+0x68>
c00155d6:	c7 05 0c 62 02 c0 a8 c5 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c5a8
c00155e0:	c7 05 08 62 02 c0 b0 c5 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c5b0
c00155ea:	83 c4 0c             	add    esp,0xc
c00155ed:	e9 c6 6f 00 00       	jmp    c001c5b8 <sseInit>
c00155f2:	e8 df 6f 00 00       	call   c001c5d6 <x87Detect>
c00155f7:	85 c0                	test   eax,eax
c00155f9:	74 1c                	je     c0015617 <HalInitialiseCoprocessor()+0x8d>
c00155fb:	c7 05 0c 62 02 c0 f1 c5 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c5f1
c0015605:	c7 05 08 62 02 c0 f8 c5 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c5f8
c001560f:	83 c4 0c             	add    esp,0xc
c0015612:	e9 e8 6f 00 00       	jmp    c001c5ff <x87Init>
c0015617:	c7 05 0c 62 02 c0 10 4f 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc0014f10
c0015621:	c7 05 08 62 02 c0 10 4f 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc0014f10
c001562b:	0f 20 c0             	mov    eax,cr0
c001562e:	83 c8 04             	or     eax,0x4
c0015631:	0f 22 c0             	mov    cr0,eax
c0015634:	83 c4 0c             	add    esp,0xc
c0015637:	c3                   	ret    

c0015638 <HalPanic(char const*)>:
c0015638:	53                   	push   ebx
c0015639:	83 ec 10             	sub    esp,0x10
c001563c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015640:	fa                   	cli    
c0015641:	53                   	push   ebx
c0015642:	68 2a f6 01 c0       	push   0xc001f62a
c0015647:	e8 c2 4f ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001564c:	83 c4 0c             	add    esp,0xc
c001564f:	6a 01                	push   0x1
c0015651:	6a 0f                	push   0xf
c0015653:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015659:	e8 a8 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001565e:	58                   	pop    eax
c001565f:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015665:	e8 94 2e ff ff       	call   c00084fe <VgaText::clearScreen()>
c001566a:	5a                   	pop    edx
c001566b:	59                   	pop    ecx
c001566c:	68 44 e0 01 c0       	push   0xc001e044
c0015671:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015677:	e8 c2 2c ff ff       	call   c000833e <VgaText::setTitle(char*)>
c001567c:	83 c4 0c             	add    esp,0xc
c001567f:	6a 01                	push   0x1
c0015681:	6a 0f                	push   0xf
c0015683:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015689:	e8 78 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001568e:	58                   	pop    eax
c001568f:	5a                   	pop    edx
c0015690:	68 43 f6 01 c0       	push   0xc001f643
c0015695:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001569b:	e8 52 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156a0:	83 c4 0c             	add    esp,0xc
c00156a3:	6a 0f                	push   0xf
c00156a5:	6a 01                	push   0x1
c00156a7:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156ad:	e8 54 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156b2:	59                   	pop    ecx
c00156b3:	58                   	pop    eax
c00156b4:	68 4c f6 01 c0       	push   0xc001f64c
c00156b9:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156bf:	e8 2e 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156c4:	83 c4 0c             	add    esp,0xc
c00156c7:	6a 01                	push   0x1
c00156c9:	6a 0f                	push   0xf
c00156cb:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156d1:	e8 30 2c ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156d6:	58                   	pop    eax
c00156d7:	5a                   	pop    edx
c00156d8:	68 90 f6 01 c0       	push   0xc001f690
c00156dd:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156e3:	e8 0a 31 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156e8:	59                   	pop    ecx
c00156e9:	58                   	pop    eax
c00156ea:	68 59 f6 01 c0       	push   0xc001f659
c00156ef:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156f5:	e8 f8 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c00156fa:	58                   	pop    eax
c00156fb:	5a                   	pop    edx
c00156fc:	68 93 f6 01 c0       	push   0xc001f693
c0015701:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015707:	e8 e6 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001570c:	59                   	pop    ecx
c001570d:	58                   	pop    eax
c001570e:	53                   	push   ebx
c001570f:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015715:	e8 d8 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001571a:	58                   	pop    eax
c001571b:	5a                   	pop    edx
c001571c:	68 90 f6 01 c0       	push   0xc001f690
c0015721:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015727:	e8 c6 30 ff ff       	call   c00087f2 <VgaText::puts(char const*)>
c001572c:	83 c4 10             	add    esp,0x10
c001572f:	eb fe                	jmp    c001572f <HalPanic(char const*)+0xf7>

c0015731 <HalQueryPerformanceCounter()>:
c0015731:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015736:	31 d2                	xor    edx,edx
c0015738:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001573e:	31 c0                	xor    eax,eax
c0015740:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015747:	74 02                	je     c001574b <HalQueryPerformanceCounter()+0x1a>
c0015749:	0f 31                	rdtsc  
c001574b:	c3                   	ret    

c001574c <HalInitialise()>:
c001574c:	53                   	push   ebx
c001574d:	83 ec 08             	sub    esp,0x8
c0015750:	e8 5e 6a ff ff       	call   c000c1b3 <setupINTS()>
c0015755:	80 3d 80 57 02 c0 00 	cmp    BYTE PTR ds:0xc0025780,0x0
c001575c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015761:	75 07                	jne    c001576a <HalInitialise()+0x1e>
c0015763:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001576a:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015771:	c6 05 00 62 02 c0 00 	mov    BYTE PTR ds:0xc0026200,0x0
c0015778:	e8 a7 02 00 00       	call   c0015a24 <picOpen()>
c001577d:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c0015784:	74 0a                	je     c0015790 <HalInitialise()+0x44>
c0015786:	e8 e1 01 00 00       	call   c001596c <picDisable()>
c001578b:	e8 9c 64 00 00       	call   c001bc2c <apicOpen()>
c0015790:	bb 0f 00 00 00       	mov    ebx,0xf
c0015795:	50                   	push   eax
c0015796:	6a 00                	push   0x0
c0015798:	68 11 54 01 c0       	push   0xc0015411
c001579d:	6a 00                	push   0x0
c001579f:	e8 dc 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a4:	83 c4 0c             	add    esp,0xc
c00157a7:	6a 00                	push   0x0
c00157a9:	68 11 54 01 c0       	push   0xc0015411
c00157ae:	6a 01                	push   0x1
c00157b0:	e8 cb 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b5:	83 c4 0c             	add    esp,0xc
c00157b8:	6a 00                	push   0x0
c00157ba:	68 11 4f 01 c0       	push   0xc0014f11
c00157bf:	6a 02                	push   0x2
c00157c1:	e8 ba 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c6:	83 c4 0c             	add    esp,0xc
c00157c9:	6a 00                	push   0x0
c00157cb:	68 11 54 01 c0       	push   0xc0015411
c00157d0:	6a 03                	push   0x3
c00157d2:	e8 a9 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d7:	83 c4 0c             	add    esp,0xc
c00157da:	6a 00                	push   0x0
c00157dc:	68 11 54 01 c0       	push   0xc0015411
c00157e1:	6a 04                	push   0x4
c00157e3:	e8 98 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e8:	83 c4 0c             	add    esp,0xc
c00157eb:	6a 00                	push   0x0
c00157ed:	68 11 54 01 c0       	push   0xc0015411
c00157f2:	6a 05                	push   0x5
c00157f4:	e8 87 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f9:	83 c4 0c             	add    esp,0xc
c00157fc:	6a 00                	push   0x0
c00157fe:	68 45 54 01 c0       	push   0xc0015445
c0015803:	6a 06                	push   0x6
c0015805:	e8 76 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001580a:	83 c4 0c             	add    esp,0xc
c001580d:	6a 00                	push   0x0
c001580f:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015814:	6a 08                	push   0x8
c0015816:	e8 65 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001581b:	83 c4 0c             	add    esp,0xc
c001581e:	6a 00                	push   0x0
c0015820:	68 11 54 01 c0       	push   0xc0015411
c0015825:	6a 09                	push   0x9
c0015827:	e8 54 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001582c:	83 c4 0c             	add    esp,0xc
c001582f:	6a 00                	push   0x0
c0015831:	68 11 54 01 c0       	push   0xc0015411
c0015836:	6a 0a                	push   0xa
c0015838:	e8 43 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001583d:	83 c4 0c             	add    esp,0xc
c0015840:	6a 00                	push   0x0
c0015842:	68 11 54 01 c0       	push   0xc0015411
c0015847:	6a 0b                	push   0xb
c0015849:	e8 32 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001584e:	83 c4 0c             	add    esp,0xc
c0015851:	6a 00                	push   0x0
c0015853:	68 26 53 01 c0       	push   0xc0015326
c0015858:	6a 0d                	push   0xd
c001585a:	e8 21 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001585f:	83 c4 0c             	add    esp,0xc
c0015862:	6a 00                	push   0x0
c0015864:	68 8b 53 01 c0       	push   0xc001538b
c0015869:	6a 0e                	push   0xe
c001586b:	e8 10 67 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	50                   	push   eax
c0015874:	6a 00                	push   0x0
c0015876:	68 11 54 01 c0       	push   0xc0015411
c001587b:	53                   	push   ebx
c001587c:	43                   	inc    ebx
c001587d:	e8 fe 66 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	83 fb 1e             	cmp    ebx,0x1e
c0015888:	75 e9                	jne    c0015873 <HalInitialise()+0x127>
c001588a:	50                   	push   eax
c001588b:	6a 00                	push   0x0
c001588d:	68 be 14 01 c0       	push   0xc00114be
c0015892:	6a 60                	push   0x60
c0015894:	e8 e7 66 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015899:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001589e:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00158a8:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00158af:	e8 c1 1f ff ff       	call   c0007875 <malloc>
c00158b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00158b7:	89 c3                	mov    ebx,eax
c00158b9:	e8 2e 09 00 00       	call   c00161ec <RTC::RTC()>
c00158be:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00158c8:	5a                   	pop    edx
c00158c9:	59                   	pop    ecx
c00158ca:	53                   	push   ebx
c00158cb:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00158d1:	e8 76 61 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c00158d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158d8:	6a 00                	push   0x0
c00158da:	6a 00                	push   0x0
c00158dc:	6a 00                	push   0x0
c00158de:	53                   	push   ebx
c00158df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158e2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00158e7:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158ed:	83 c4 28             	add    esp,0x28
c00158f0:	5b                   	pop    ebx
c00158f1:	c3                   	ret    

c00158f2 <HalMakeBeep(int)>:
c00158f2:	53                   	push   ebx
c00158f3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158f7:	85 db                	test   ebx,ebx
c00158f9:	75 07                	jne    c0015902 <HalMakeBeep(int)+0x10>
c00158fb:	e4 61                	in     al,0x61
c00158fd:	83 e0 fc             	and    eax,0xfffffffc
c0015900:	eb 26                	jmp    c0015928 <HalMakeBeep(int)+0x36>
c0015902:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015907:	99                   	cdq    
c0015908:	f7 fb                	idiv   ebx
c001590a:	89 c1                	mov    ecx,eax
c001590c:	b0 b6                	mov    al,0xb6
c001590e:	e6 43                	out    0x43,al
c0015910:	88 c8                	mov    al,cl
c0015912:	e6 42                	out    0x42,al
c0015914:	89 c8                	mov    eax,ecx
c0015916:	c1 e8 08             	shr    eax,0x8
c0015919:	e6 42                	out    0x42,al
c001591b:	e4 61                	in     al,0x61
c001591d:	88 c2                	mov    dl,al
c001591f:	83 ca 03             	or     edx,0x3
c0015922:	38 c2                	cmp    dl,al
c0015924:	74 04                	je     c001592a <HalMakeBeep(int)+0x38>
c0015926:	88 d0                	mov    al,dl
c0015928:	e6 61                	out    0x61,al
c001592a:	5b                   	pop    ebx
c001592b:	c3                   	ret    

c001592c <HalGetRand()>:
c001592c:	31 c0                	xor    eax,eax
c001592e:	c3                   	ret    

c001592f <HalEndOfInterrupt(int)>:
c001592f:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c0015936:	74 23                	je     c001595b <HalEndOfInterrupt(int)+0x2c>
c0015938:	83 ec 14             	sub    esp,0x14
c001593b:	6a 1b                	push   0x1b
c001593d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015943:	e8 64 15 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0015948:	25 00 f0 ff ff       	and    eax,0xfffff000
c001594d:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015957:	83 c4 1c             	add    esp,0x1c
c001595a:	c3                   	ret    
c001595b:	e9 54 02 00 00       	jmp    c0015bb4 <picEOI(int)>

c0015960 <HalRestart()>:
c0015960:	c3                   	ret    

c0015961 <HalShutdown()>:
c0015961:	c3                   	ret    

c0015962 <HalSleep()>:
c0015962:	c3                   	ret    
c0015963:	90                   	nop

c0015964 <picIoWait()>:
c0015964:	eb 00                	jmp    c0015966 <picIoWait()+0x2>
c0015966:	eb 00                	jmp    c0015968 <picIoWait()+0x4>
c0015968:	90                   	nop
c0015969:	c3                   	ret    
c001596a:	66 90                	xchg   ax,ax

c001596c <picDisable()>:
c001596c:	83 ec 10             	sub    esp,0x10
c001596f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015976:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001597b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001597f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015984:	ee                   	out    dx,al
c0015985:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001598c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015991:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015995:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001599a:	ee                   	out    dx,al
c001599b:	90                   	nop
c001599c:	83 c4 10             	add    esp,0x10
c001599f:	c3                   	ret    

c00159a0 <picGetIRQReg(int)>:
c00159a0:	83 ec 10             	sub    esp,0x10
c00159a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159a7:	25 ff 00 00 00       	and    eax,0xff
c00159ac:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00159b3:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00159b7:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00159bb:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00159c0:	ee                   	out    dx,al
c00159c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159c5:	25 ff 00 00 00       	and    eax,0xff
c00159ca:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00159d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00159d5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00159d9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00159de:	ee                   	out    dx,al
c00159df:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00159e6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00159eb:	89 c2                	mov    edx,eax
c00159ed:	ec                   	in     al,dx
c00159ee:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159f2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159f6:	25 ff 00 00 00       	and    eax,0xff
c00159fb:	c1 e0 08             	shl    eax,0x8
c00159fe:	89 c1                	mov    ecx,eax
c0015a00:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a07:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a0c:	89 c2                	mov    edx,eax
c0015a0e:	ec                   	in     al,dx
c0015a0f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a13:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a17:	25 ff 00 00 00       	and    eax,0xff
c0015a1c:	09 c8                	or     eax,ecx
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	c3                   	ret    
c0015a22:	66 90                	xchg   ax,ax

c0015a24 <picOpen()>:
c0015a24:	83 ec 50             	sub    esp,0x50
c0015a27:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a3b:	ee                   	out    dx,al
c0015a3c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a48:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a50:	ee                   	out    dx,al
c0015a51:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a59:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a61:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a6c:	89 c2                	mov    edx,eax
c0015a6e:	ec                   	in     al,dx
c0015a6f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a77:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a7b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a86:	89 c2                	mov    edx,eax
c0015a88:	ec                   	in     al,dx
c0015a89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a91:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a95:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a9c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015aa1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015aa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015aa9:	ee                   	out    dx,al
c0015aaa:	e8 b5 fe ff ff       	call   c0015964 <picIoWait()>
c0015aaf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015ab6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015abb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015abf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ac3:	ee                   	out    dx,al
c0015ac4:	e8 9b fe ff ff       	call   c0015964 <picIoWait()>
c0015ac9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015acd:	25 ff 00 00 00       	and    eax,0xff
c0015ad2:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015ad9:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015add:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015ae1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ae5:	ee                   	out    dx,al
c0015ae6:	e8 79 fe ff ff       	call   c0015964 <picIoWait()>
c0015aeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015aef:	25 ff 00 00 00       	and    eax,0xff
c0015af4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015afb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015aff:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b03:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b07:	ee                   	out    dx,al
c0015b08:	e8 57 fe ff ff       	call   c0015964 <picIoWait()>
c0015b0d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b14:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b19:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b21:	ee                   	out    dx,al
c0015b22:	e8 3d fe ff ff       	call   c0015964 <picIoWait()>
c0015b27:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b2e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b33:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b37:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b3b:	ee                   	out    dx,al
c0015b3c:	e8 23 fe ff ff       	call   c0015964 <picIoWait()>
c0015b41:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b48:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b4d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b51:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b55:	ee                   	out    dx,al
c0015b56:	e8 09 fe ff ff       	call   c0015964 <picIoWait()>
c0015b5b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b62:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b67:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b6b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b6f:	ee                   	out    dx,al
c0015b70:	e8 ef fd ff ff       	call   c0015964 <picIoWait()>
c0015b75:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b79:	25 ff 00 00 00       	and    eax,0xff
c0015b7e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b85:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b89:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b91:	ee                   	out    dx,al
c0015b92:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b96:	25 ff 00 00 00       	and    eax,0xff
c0015b9b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015ba2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015ba6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015baa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015bae:	ee                   	out    dx,al
c0015baf:	90                   	nop
c0015bb0:	83 c4 50             	add    esp,0x50
c0015bb3:	c3                   	ret    

c0015bb4 <picEOI(int)>:
c0015bb4:	83 ec 10             	sub    esp,0x10
c0015bb7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bbc:	75 22                	jne    c0015be0 <picEOI(int)+0x2c>
c0015bbe:	6a 0b                	push   0xb
c0015bc0:	e8 db fd ff ff       	call   c00159a0 <picGetIRQReg(int)>
c0015bc5:	83 c4 04             	add    esp,0x4
c0015bc8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015bcd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015bd2:	25 ff ff 00 00       	and    eax,0xffff
c0015bd7:	25 80 00 00 00       	and    eax,0x80
c0015bdc:	74 72                	je     c0015c50 <picEOI(int)+0x9c>
c0015bde:	66 90                	xchg   ax,ax
c0015be0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015be5:	75 31                	jne    c0015c18 <picEOI(int)+0x64>
c0015be7:	6a 0b                	push   0xb
c0015be9:	e8 b2 fd ff ff       	call   c00159a0 <picGetIRQReg(int)>
c0015bee:	83 c4 04             	add    esp,0x4
c0015bf1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015bf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bfa:	66 85 c0             	test   ax,ax
c0015bfd:	78 19                	js     c0015c18 <picEOI(int)+0x64>
c0015bff:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c06:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c0f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c14:	ee                   	out    dx,al
c0015c15:	eb 3d                	jmp    c0015c54 <picEOI(int)+0xa0>
c0015c17:	90                   	nop
c0015c18:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c1d:	7e 19                	jle    c0015c38 <picEOI(int)+0x84>
c0015c1f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c26:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c2b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c2f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c34:	ee                   	out    dx,al
c0015c35:	8d 76 00             	lea    esi,[esi+0x0]
c0015c38:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c3f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c44:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c48:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c4d:	ee                   	out    dx,al
c0015c4e:	eb 04                	jmp    c0015c54 <picEOI(int)+0xa0>
c0015c50:	90                   	nop
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	c3                   	ret    

c0015c58 <RTC::open(int, int, void*)>:
c0015c58:	31 c0                	xor    eax,eax
c0015c5a:	c3                   	ret    
c0015c5b:	90                   	nop

c0015c5c <RTC::close(int, int, void*)>:
c0015c5c:	31 c0                	xor    eax,eax
c0015c5e:	c3                   	ret    
c0015c5f:	90                   	nop

c0015c60 <RTC::timeInSecondsUTC()>:
c0015c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c64:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c6a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c70:	c3                   	ret    
c0015c71:	90                   	nop

c0015c72 <RTC::timeInDatetimeUTC()>:
c0015c72:	53                   	push   ebx
c0015c73:	83 ec 14             	sub    esp,0x14
c0015c76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c80:	50                   	push   eax
c0015c81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	52                   	push   edx
c0015c88:	50                   	push   eax
c0015c89:	53                   	push   ebx
c0015c8a:	e8 31 5b ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0015c8f:	89 d8                	mov    eax,ebx
c0015c91:	83 c4 14             	add    esp,0x14
c0015c94:	5b                   	pop    ebx
c0015c95:	c2 04 00             	ret    0x4

c0015c98 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c98:	56                   	push   esi
c0015c99:	53                   	push   ebx
c0015c9a:	83 ec 14             	sub    esp,0x14
c0015c9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ca1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ca3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015ca6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015caa:	52                   	push   edx
c0015cab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb3:	50                   	push   eax
c0015cb4:	e8 07 5b ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0015cb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015cc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cc5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015cc9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015ccd:	89 f0                	mov    eax,esi
c0015ccf:	83 c4 20             	add    esp,0x20
c0015cd2:	5b                   	pop    ebx
c0015cd3:	5e                   	pop    esi
c0015cd4:	ff e0                	jmp    eax

c0015cd6 <RTC::~RTC()>:
c0015cd6:	83 ec 0c             	sub    esp,0xc
c0015cd9:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c0015cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce2:	89 10                	mov    DWORD PTR [eax],edx
c0015ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	50                   	push   eax
c0015cec:	e8 53 58 ff ff       	call   c000b544 <Clock::~Clock()>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	90                   	nop
c0015cf5:	83 c4 0c             	add    esp,0xc
c0015cf8:	c3                   	ret    
c0015cf9:	90                   	nop

c0015cfa <RTC::~RTC()>:
c0015cfa:	83 ec 0c             	sub    esp,0xc
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d04:	e8 cd ff ff ff       	call   c0015cd6 <RTC::~RTC()>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	83 ec 08             	sub    esp,0x8
c0015d0f:	68 60 01 00 00       	push   0x160
c0015d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d18:	e8 fb 47 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	83 c4 0c             	add    esp,0xc
c0015d23:	c3                   	ret    

c0015d24 <RTC::get_update_in_progress_flag()>:
c0015d24:	83 ec 14             	sub    esp,0x14
c0015d27:	6a 0a                	push   0xa
c0015d29:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d2f:	e8 2c 12 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d34:	83 c4 1c             	add    esp,0x1c
c0015d37:	c0 e8 07             	shr    al,0x7
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <RTC::completeRTCRefresh()>:
c0015d3c:	55                   	push   ebp
c0015d3d:	57                   	push   edi
c0015d3e:	56                   	push   esi
c0015d3f:	53                   	push   ebx
c0015d40:	83 ec 2c             	sub    esp,0x2c
c0015d43:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015d49:	83 ec 0c             	sub    esp,0xc
c0015d4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d50:	e8 cf ff ff ff       	call   c0015d24 <RTC::get_update_in_progress_flag()>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	84 c0                	test   al,al
c0015d5a:	74 0e                	je     c0015d6a <RTC::completeRTCRefresh()+0x2e>
c0015d5c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d62:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015d68:	73 df                	jae    c0015d49 <RTC::completeRTCRefresh()+0xd>
c0015d6a:	55                   	push   ebp
c0015d6b:	55                   	push   ebp
c0015d6c:	6a 00                	push   0x0
c0015d6e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d74:	e8 e7 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d79:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d7d:	58                   	pop    eax
c0015d7e:	5a                   	pop    edx
c0015d7f:	6a 02                	push   0x2
c0015d81:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d87:	e8 d4 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d8c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d90:	59                   	pop    ecx
c0015d91:	5b                   	pop    ebx
c0015d92:	6a 04                	push   0x4
c0015d94:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d9a:	e8 c1 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015d9f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015da3:	5e                   	pop    esi
c0015da4:	5f                   	pop    edi
c0015da5:	6a 07                	push   0x7
c0015da7:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dad:	e8 ae 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015db2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015db6:	5d                   	pop    ebp
c0015db7:	58                   	pop    eax
c0015db8:	6a 08                	push   0x8
c0015dba:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dc0:	e8 9b 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015dc5:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015dc9:	58                   	pop    eax
c0015dca:	5a                   	pop    edx
c0015dcb:	6a 09                	push   0x9
c0015dcd:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dd3:	e8 88 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015dd8:	83 c4 10             	add    esp,0x10
c0015ddb:	0f b6 e8             	movzx  ebp,al
c0015dde:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015deb:	e8 34 ff ff ff       	call   c0015d24 <RTC::get_update_in_progress_flag()>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	84 c0                	test   al,al
c0015df5:	74 0e                	je     c0015e05 <RTC::completeRTCRefresh()+0xc9>
c0015df7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015dfd:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015e03:	73 df                	jae    c0015de4 <RTC::completeRTCRefresh()+0xa8>
c0015e05:	50                   	push   eax
c0015e06:	50                   	push   eax
c0015e07:	6a 00                	push   0x0
c0015e09:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e0f:	e8 4c 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e14:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e18:	58                   	pop    eax
c0015e19:	5a                   	pop    edx
c0015e1a:	6a 02                	push   0x2
c0015e1c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e22:	e8 39 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e27:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e2b:	59                   	pop    ecx
c0015e2c:	5b                   	pop    ebx
c0015e2d:	6a 04                	push   0x4
c0015e2f:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e35:	e8 26 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e3a:	5e                   	pop    esi
c0015e3b:	88 c3                	mov    bl,al
c0015e3d:	5f                   	pop    edi
c0015e3e:	6a 07                	push   0x7
c0015e40:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e46:	e8 15 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e4b:	89 c6                	mov    esi,eax
c0015e4d:	58                   	pop    eax
c0015e4e:	5a                   	pop    edx
c0015e4f:	6a 08                	push   0x8
c0015e51:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e57:	e8 04 11 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e5c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e60:	59                   	pop    ecx
c0015e61:	5f                   	pop    edi
c0015e62:	6a 09                	push   0x9
c0015e64:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e6a:	e8 f1 10 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015e6f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e73:	0f b6 f8             	movzx  edi,al
c0015e76:	83 c4 10             	add    esp,0x10
c0015e79:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e7d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e81:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e85:	89 f1                	mov    ecx,esi
c0015e87:	0f 94 c0             	sete   al
c0015e8a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e8e:	0f 94 c2             	sete   dl
c0015e91:	21 d0                	and    eax,edx
c0015e93:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e97:	0f 94 c2             	sete   dl
c0015e9a:	21 c2                	and    edx,eax
c0015e9c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015ea0:	0f 94 c0             	sete   al
c0015ea3:	21 d0                	and    eax,edx
c0015ea5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ea9:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015ead:	0f 94 c1             	sete   cl
c0015eb0:	84 c8                	test   al,cl
c0015eb2:	75 29                	jne    c0015edd <RTC::completeRTCRefresh()+0x1a1>
c0015eb4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015eb8:	89 fd                	mov    ebp,edi
c0015eba:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015ebe:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015ec2:	89 f0                	mov    eax,esi
c0015ec4:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015ec8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ecc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ed0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ed4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ed8:	e9 01 ff ff ff       	jmp    c0015dde <RTC::completeRTCRefresh()+0xa2>
c0015edd:	39 fd                	cmp    ebp,edi
c0015edf:	75 d3                	jne    c0015eb4 <RTC::completeRTCRefresh()+0x178>
c0015ee1:	55                   	push   ebp
c0015ee2:	55                   	push   ebp
c0015ee3:	6a 0b                	push   0xb
c0015ee5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015eeb:	e8 70 10 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0015ef0:	83 c4 10             	add    esp,0x10
c0015ef3:	89 c5                	mov    ebp,eax
c0015ef5:	a8 04                	test   al,0x4
c0015ef7:	75 78                	jne    c0015f71 <RTC::completeRTCRefresh()+0x235>
c0015ef9:	b1 0a                	mov    cl,0xa
c0015efb:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015eff:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f03:	83 e2 0f             	and    edx,0xf
c0015f06:	c0 e8 04             	shr    al,0x4
c0015f09:	c1 ef 04             	shr    edi,0x4
c0015f0c:	f6 e1                	mul    cl
c0015f0e:	6b ff 0a             	imul   edi,edi,0xa
c0015f11:	01 d0                	add    eax,edx
c0015f13:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f17:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f1b:	83 e2 0f             	and    edx,0xf
c0015f1e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f22:	c0 e8 04             	shr    al,0x4
c0015f25:	f6 e1                	mul    cl
c0015f27:	01 d0                	add    eax,edx
c0015f29:	88 da                	mov    dl,bl
c0015f2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f2f:	83 e2 0f             	and    edx,0xf
c0015f32:	88 d8                	mov    al,bl
c0015f34:	83 e3 80             	and    ebx,0xffffff80
c0015f37:	c0 e8 04             	shr    al,0x4
c0015f3a:	83 e0 07             	and    eax,0x7
c0015f3d:	f6 e1                	mul    cl
c0015f3f:	01 d0                	add    eax,edx
c0015f41:	89 f2                	mov    edx,esi
c0015f43:	09 c3                	or     ebx,eax
c0015f45:	83 e2 0f             	and    edx,0xf
c0015f48:	89 f0                	mov    eax,esi
c0015f4a:	c0 e8 04             	shr    al,0x4
c0015f4d:	f6 e1                	mul    cl
c0015f4f:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f52:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f56:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f5a:	83 e2 0f             	and    edx,0xf
c0015f5d:	c0 e8 04             	shr    al,0x4
c0015f60:	f6 e1                	mul    cl
c0015f62:	01 d0                	add    eax,edx
c0015f64:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f6c:	83 e0 0f             	and    eax,0xf
c0015f6f:	01 c7                	add    edi,eax
c0015f71:	83 e5 02             	and    ebp,0x2
c0015f74:	75 14                	jne    c0015f8a <RTC::completeRTCRefresh()+0x24e>
c0015f76:	84 db                	test   bl,bl
c0015f78:	79 10                	jns    c0015f8a <RTC::completeRTCRefresh()+0x24e>
c0015f7a:	83 e3 7f             	and    ebx,0x7f
c0015f7d:	b9 18 00 00 00       	mov    ecx,0x18
c0015f82:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f85:	99                   	cdq    
c0015f86:	f7 f9                	idiv   ecx
c0015f88:	88 d3                	mov    bl,dl
c0015f8a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f90:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f96:	77 06                	ja     c0015f9e <RTC::completeRTCRefresh()+0x262>
c0015f98:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f9e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015fa3:	31 d2                	xor    edx,edx
c0015fa5:	c1 e1 10             	shl    ecx,0x10
c0015fa8:	89 d7                	mov    edi,edx
c0015faa:	c1 e5 10             	shl    ebp,0x10
c0015fad:	31 c0                	xor    eax,eax
c0015faf:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015fb5:	09 cf                	or     edi,ecx
c0015fb7:	89 fa                	mov    edx,edi
c0015fb9:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015fbd:	88 da                	mov    dl,bl
c0015fbf:	89 f3                	mov    ebx,esi
c0015fc1:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015fc5:	88 d8                	mov    al,bl
c0015fc7:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015fcb:	0f b7 c8             	movzx  ecx,ax
c0015fce:	09 e9                	or     ecx,ebp
c0015fd0:	89 c8                	mov    eax,ecx
c0015fd2:	51                   	push   ecx
c0015fd3:	51                   	push   ecx
c0015fd4:	52                   	push   edx
c0015fd5:	50                   	push   eax
c0015fd6:	e8 58 56 ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c0015fdb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015fdf:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015fe5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015feb:	83 c4 3c             	add    esp,0x3c
c0015fee:	5b                   	pop    ebx
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	5d                   	pop    ebp
c0015ff2:	c3                   	ret    
c0015ff3:	90                   	nop

c0015ff4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015ff4:	55                   	push   ebp
c0015ff5:	57                   	push   edi
c0015ff6:	56                   	push   esi
c0015ff7:	53                   	push   ebx
c0015ff8:	83 ec 30             	sub    esp,0x30
c0015ffb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fff:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016003:	6a 00                	push   0x0
c0016005:	6a 00                	push   0x0
c0016007:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001600d:	e8 64 10 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016012:	83 c4 0c             	add    esp,0xc
c0016015:	6a 00                	push   0x0
c0016017:	6a 02                	push   0x2
c0016019:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001601f:	e8 52 10 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016024:	31 d2                	xor    edx,edx
c0016026:	89 f9                	mov    ecx,edi
c0016028:	89 f8                	mov    eax,edi
c001602a:	c1 e9 10             	shr    ecx,0x10
c001602d:	0f b6 c4             	movzx  eax,ah
c0016030:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016034:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016038:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001603c:	b9 64 00 00 00       	mov    ecx,0x64
c0016041:	89 f0                	mov    eax,esi
c0016043:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016047:	89 f0                	mov    eax,esi
c0016049:	0f b6 c4             	movzx  eax,ah
c001604c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016050:	89 f0                	mov    eax,esi
c0016052:	c1 e8 10             	shr    eax,0x10
c0016055:	66 f7 f1             	div    cx
c0016058:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c001605d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016062:	59                   	pop    ecx
c0016063:	5b                   	pop    ebx
c0016064:	89 fb                	mov    ebx,edi
c0016066:	6a 0b                	push   0xb
c0016068:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001606e:	e8 ed 0e ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016073:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016077:	83 c4 10             	add    esp,0x10
c001607a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001607f:	75 74                	jne    c00160f5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016081:	b2 0a                	mov    dl,0xa
c0016083:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016087:	0f b6 c1             	movzx  eax,cl
c001608a:	f6 f2                	div    dl
c001608c:	88 c3                	mov    bl,al
c001608e:	88 e0                	mov    al,ah
c0016090:	c1 e3 04             	shl    ebx,0x4
c0016093:	09 c3                	or     ebx,eax
c0016095:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001609a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001609e:	f6 f2                	div    dl
c00160a0:	88 c1                	mov    cl,al
c00160a2:	88 e0                	mov    al,ah
c00160a4:	c1 e1 04             	shl    ecx,0x4
c00160a7:	09 c1                	or     ecx,eax
c00160a9:	89 f8                	mov    eax,edi
c00160ab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00160af:	0f b6 c0             	movzx  eax,al
c00160b2:	f6 f2                	div    dl
c00160b4:	88 c3                	mov    bl,al
c00160b6:	88 e0                	mov    al,ah
c00160b8:	c1 e3 04             	shl    ebx,0x4
c00160bb:	09 c3                	or     ebx,eax
c00160bd:	89 f0                	mov    eax,esi
c00160bf:	0f b6 c0             	movzx  eax,al
c00160c2:	f6 f2                	div    dl
c00160c4:	88 c1                	mov    cl,al
c00160c6:	88 e0                	mov    al,ah
c00160c8:	c1 e1 04             	shl    ecx,0x4
c00160cb:	09 c1                	or     ecx,eax
c00160cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160d2:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00160d6:	f6 f2                	div    dl
c00160d8:	88 c1                	mov    cl,al
c00160da:	88 e0                	mov    al,ah
c00160dc:	c1 e1 04             	shl    ecx,0x4
c00160df:	09 c1                	or     ecx,eax
c00160e1:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00160e6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00160ea:	f6 f2                	div    dl
c00160ec:	89 c5                	mov    ebp,eax
c00160ee:	88 e0                	mov    al,ah
c00160f0:	c1 e5 04             	shl    ebp,0x4
c00160f3:	09 c5                	or     ebp,eax
c00160f5:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160fa:	75 17                	jne    c0016113 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160fc:	80 fb 0b             	cmp    bl,0xb
c00160ff:	76 0c                	jbe    c001610d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016101:	80 eb 0c             	sub    bl,0xc
c0016104:	75 02                	jne    c0016108 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016106:	b3 0c                	mov    bl,0xc
c0016108:	83 cb 80             	or     ebx,0xffffff80
c001610b:	eb 06                	jmp    c0016113 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001610d:	84 db                	test   bl,bl
c001610f:	75 02                	jne    c0016113 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016111:	b3 0c                	mov    bl,0xc
c0016113:	0f b6 db             	movzx  ebx,bl
c0016116:	50                   	push   eax
c0016117:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001611c:	50                   	push   eax
c001611d:	6a 00                	push   0x0
c001611f:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016125:	e8 4c 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001612a:	83 c4 0c             	add    esp,0xc
c001612d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016132:	50                   	push   eax
c0016133:	6a 02                	push   0x2
c0016135:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001613b:	e8 36 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016140:	83 c4 0c             	add    esp,0xc
c0016143:	53                   	push   ebx
c0016144:	6a 04                	push   0x4
c0016146:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001614c:	e8 25 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016151:	83 c4 0c             	add    esp,0xc
c0016154:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016159:	50                   	push   eax
c001615a:	6a 07                	push   0x7
c001615c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016162:	e8 0f 0f ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016167:	83 c4 0c             	add    esp,0xc
c001616a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001616f:	50                   	push   eax
c0016170:	6a 08                	push   0x8
c0016172:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016178:	e8 f9 0e ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001617d:	83 c4 0c             	add    esp,0xc
c0016180:	89 e8                	mov    eax,ebp
c0016182:	0f b6 e8             	movzx  ebp,al
c0016185:	55                   	push   ebp
c0016186:	6a 09                	push   0x9
c0016188:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001618e:	e8 e3 0e ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016193:	5a                   	pop    edx
c0016194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016198:	e8 9f fb ff ff       	call   c0015d3c <RTC::completeRTCRefresh()>
c001619d:	83 c4 3c             	add    esp,0x3c
c00161a0:	b0 01                	mov    al,0x1
c00161a2:	5b                   	pop    ebx
c00161a3:	5e                   	pop    esi
c00161a4:	5f                   	pop    edi
c00161a5:	5d                   	pop    ebp
c00161a6:	c3                   	ret    

c00161a7 <rtcIRQHandler(regs*, void*)>:
c00161a7:	53                   	push   ebx
c00161a8:	83 ec 10             	sub    esp,0x10
c00161ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00161af:	6a 0c                	push   0xc
c00161b1:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00161b7:	e8 a4 0d ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	84 c0                	test   al,al
c00161c1:	79 24                	jns    c00161e7 <rtcIRQHandler(regs*, void*)+0x40>
c00161c3:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00161ca:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00161d1:	66 ff 05 14 62 02 c0 	inc    WORD PTR ds:0xc0026214
c00161d8:	75 0d                	jne    c00161e7 <rtcIRQHandler(regs*, void*)+0x40>
c00161da:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00161de:	83 c4 08             	add    esp,0x8
c00161e1:	5b                   	pop    ebx
c00161e2:	e9 55 fb ff ff       	jmp    c0015d3c <RTC::completeRTCRefresh()>
c00161e7:	83 c4 08             	add    esp,0x8
c00161ea:	5b                   	pop    ebx
c00161eb:	c3                   	ret    

c00161ec <RTC::RTC()>:
c00161ec:	83 ec 1c             	sub    esp,0x1c
c00161ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161f3:	83 ec 08             	sub    esp,0x8
c00161f6:	68 13 f7 01 c0       	push   0xc001f713
c00161fb:	50                   	push   eax
c00161fc:	e8 0d 53 ff ff       	call   c000b50e <Clock::Clock(char const*)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c0016209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001620d:	89 10                	mov    DWORD PTR [eax],edx
c001620f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621a:	6a 01                	push   0x1
c001621c:	68 a7 61 01 c0       	push   0xc00161a7
c0016221:	6a 08                	push   0x8
c0016223:	50                   	push   eax
c0016224:	e8 cf 57 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016229:	83 c4 20             	add    esp,0x20
c001622c:	89 c2                	mov    edx,eax
c001622e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016232:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016238:	fa                   	cli    
c0016239:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001623e:	40                   	inc    eax
c001623f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0016244:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0016249:	83 ec 08             	sub    esp,0x8
c001624c:	6a 0b                	push   0xb
c001624e:	50                   	push   eax
c001624f:	e8 0c 0d ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001625b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0016260:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016264:	83 ca 10             	or     edx,0x10
c0016267:	81 e2 ff 00 00 00    	and    edx,0xff
c001626d:	83 ec 04             	sub    esp,0x4
c0016270:	52                   	push   edx
c0016271:	6a 0b                	push   0xb
c0016273:	50                   	push   eax
c0016274:	e8 fd 0d ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016283:	e8 b4 fa ff ff       	call   c0015d3c <RTC::completeRTCRefresh()>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016290:	48                   	dec    eax
c0016291:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0016296:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001629b:	85 c0                	test   eax,eax
c001629d:	75 01                	jne    c00162a0 <RTC::RTC()+0xb4>
c001629f:	fb                   	sti    
c00162a0:	90                   	nop
c00162a1:	83 c4 1c             	add    esp,0x1c
c00162a4:	c3                   	ret    
c00162a5:	66 90                	xchg   ax,ax
c00162a7:	90                   	nop

c00162a8 <HalConsoleScroll(int, int)>:
c00162a8:	83 ec 10             	sub    esp,0x10
c00162ab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00162b3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00162bb:	90                   	nop
c00162bc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162c1:	0f 8f e1 00 00 00    	jg     c00163a8 <HalConsoleScroll(int, int)+0x100>
c00162c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162cf:	90                   	nop
c00162d0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00162d8:	0f 8f be 00 00 00    	jg     c001639c <HalConsoleScroll(int, int)+0xf4>
c00162de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162e2:	89 d0                	mov    eax,edx
c00162e4:	c1 e0 02             	shl    eax,0x2
c00162e7:	01 d0                	add    eax,edx
c00162e9:	c1 e0 05             	shl    eax,0x5
c00162ec:	89 c2                	mov    edx,eax
c00162ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162f2:	01 d0                	add    eax,edx
c00162f4:	89 c2                	mov    edx,eax
c00162f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016301:	89 d0                	mov    eax,edx
c0016303:	c1 e0 02             	shl    eax,0x2
c0016306:	01 d0                	add    eax,edx
c0016308:	c1 e0 05             	shl    eax,0x5
c001630b:	89 c2                	mov    edx,eax
c001630d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016311:	01 d0                	add    eax,edx
c0016313:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001631d:	01 c2                	add    edx,eax
c001631f:	8a 01                	mov    al,BYTE PTR [ecx]
c0016321:	88 02                	mov    BYTE PTR [edx],al
c0016323:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016328:	75 66                	jne    c0016390 <HalConsoleScroll(int, int)+0xe8>
c001632a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001632e:	83 e0 01             	and    eax,0x1
c0016331:	74 39                	je     c001636c <HalConsoleScroll(int, int)+0xc4>
c0016333:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016337:	83 e0 0f             	and    eax,0xf
c001633a:	88 c2                	mov    dl,al
c001633c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016340:	c1 e0 04             	shl    eax,0x4
c0016343:	88 d1                	mov    cl,dl
c0016345:	09 c1                	or     ecx,eax
c0016347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001634b:	89 d0                	mov    eax,edx
c001634d:	c1 e0 02             	shl    eax,0x2
c0016350:	01 d0                	add    eax,edx
c0016352:	c1 e0 05             	shl    eax,0x5
c0016355:	89 c2                	mov    edx,eax
c0016357:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001635b:	01 d0                	add    eax,edx
c001635d:	89 c2                	mov    edx,eax
c001635f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016363:	01 d0                	add    eax,edx
c0016365:	88 ca                	mov    dl,cl
c0016367:	88 10                	mov    BYTE PTR [eax],dl
c0016369:	eb 25                	jmp    c0016390 <HalConsoleScroll(int, int)+0xe8>
c001636b:	90                   	nop
c001636c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016370:	89 d0                	mov    eax,edx
c0016372:	c1 e0 02             	shl    eax,0x2
c0016375:	01 d0                	add    eax,edx
c0016377:	c1 e0 05             	shl    eax,0x5
c001637a:	89 c2                	mov    edx,eax
c001637c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016380:	01 d0                	add    eax,edx
c0016382:	89 c2                	mov    edx,eax
c0016384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016388:	01 d0                	add    eax,edx
c001638a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001638d:	8d 76 00             	lea    esi,[esi+0x0]
c0016390:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016394:	e9 37 ff ff ff       	jmp    c00162d0 <HalConsoleScroll(int, int)+0x28>
c0016399:	8d 76 00             	lea    esi,[esi+0x0]
c001639c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163a0:	e9 17 ff ff ff       	jmp    c00162bc <HalConsoleScroll(int, int)+0x14>
c00163a5:	8d 76 00             	lea    esi,[esi+0x0]
c00163a8:	90                   	nop
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	c3                   	ret    
c00163ad:	8d 76 00             	lea    esi,[esi+0x0]

c00163b0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00163b0:	83 ec 14             	sub    esp,0x14
c00163b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163b7:	88 04 24             	mov    BYTE PTR [esp],al
c00163ba:	8a 04 24             	mov    al,BYTE PTR [esp]
c00163bd:	25 ff 00 00 00       	and    eax,0xff
c00163c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163c6:	89 d1                	mov    ecx,edx
c00163c8:	83 e1 0f             	and    ecx,0xf
c00163cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163cf:	c1 e2 04             	shl    edx,0x4
c00163d2:	81 e2 ff 00 00 00    	and    edx,0xff
c00163d8:	09 ca                	or     edx,ecx
c00163da:	c1 e2 08             	shl    edx,0x8
c00163dd:	09 d0                	or     eax,edx
c00163df:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00163e4:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163f0:	89 d0                	mov    eax,edx
c00163f2:	c1 e0 02             	shl    eax,0x2
c00163f5:	01 d0                	add    eax,edx
c00163f7:	c1 e0 04             	shl    eax,0x4
c00163fa:	89 c2                	mov    edx,eax
c00163fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016400:	01 d0                	add    eax,edx
c0016402:	01 c0                	add    eax,eax
c0016404:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016408:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001640c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016411:	66 89 02             	mov    WORD PTR [edx],ax
c0016414:	90                   	nop
c0016415:	83 c4 14             	add    esp,0x14
c0016418:	c3                   	ret    
c0016419:	8d 76 00             	lea    esi,[esi+0x0]

c001641c <HalConsoleCursorUpdate(int, int)>:
c001641c:	83 ec 20             	sub    esp,0x20
c001641f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016423:	89 c2                	mov    edx,eax
c0016425:	89 d0                	mov    eax,edx
c0016427:	c1 e0 02             	shl    eax,0x2
c001642a:	01 d0                	add    eax,edx
c001642c:	c1 e0 04             	shl    eax,0x4
c001642f:	89 c2                	mov    edx,eax
c0016431:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016435:	01 d0                	add    eax,edx
c0016437:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001643c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016443:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016448:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001644c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016450:	ee                   	out    dx,al
c0016451:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016456:	25 ff 00 00 00       	and    eax,0xff
c001645b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016462:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016466:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001646a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001646e:	ee                   	out    dx,al
c001646f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016476:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001647b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001647f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016483:	ee                   	out    dx,al
c0016484:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016489:	66 c1 e8 08          	shr    ax,0x8
c001648d:	25 ff 00 00 00       	and    eax,0xff
c0016492:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016499:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001649d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00164a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164a5:	ee                   	out    dx,al
c00164a6:	90                   	nop
c00164a7:	83 c4 20             	add    esp,0x20
c00164aa:	c3                   	ret    
c00164ab:	90                   	nop

c00164ac <FAT::getName()>:
c00164ac:	b8 64 f7 01 c0       	mov    eax,0xc001f764
c00164b1:	c3                   	ret    
c00164b2:	66 90                	xchg   ax,ax

c00164b4 <FAT::tell(void*, unsigned long long*)>:
c00164b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164b9:	75 09                	jne    c00164c4 <FAT::tell(void*, unsigned long long*)+0x10>
c00164bb:	b8 04 00 00 00       	mov    eax,0x4
c00164c0:	c3                   	ret    
c00164c1:	8d 76 00             	lea    esi,[esi+0x0]
c00164c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164c9:	75 09                	jne    c00164d4 <FAT::tell(void*, unsigned long long*)+0x20>
c00164cb:	b8 04 00 00 00       	mov    eax,0x4
c00164d0:	c3                   	ret    
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00164db:	ba 00 00 00 00       	mov    edx,0x0
c00164e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164e4:	89 01                	mov    DWORD PTR [ecx],eax
c00164e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164e9:	b8 00 00 00 00       	mov    eax,0x0
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <FAT::stat(void*, unsigned long long*)>:
c00164f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164f5:	75 09                	jne    c0016500 <FAT::stat(void*, unsigned long long*)+0x10>
c00164f7:	b8 04 00 00 00       	mov    eax,0x4
c00164fc:	c3                   	ret    
c00164fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016500:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016505:	75 09                	jne    c0016510 <FAT::stat(void*, unsigned long long*)+0x20>
c0016507:	b8 04 00 00 00       	mov    eax,0x4
c001650c:	c3                   	ret    
c001650d:	8d 76 00             	lea    esi,[esi+0x0]
c0016510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016514:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016517:	ba 00 00 00 00       	mov    edx,0x0
c001651c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016520:	89 01                	mov    DWORD PTR [ecx],eax
c0016522:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016525:	b8 00 00 00 00       	mov    eax,0x0
c001652a:	c3                   	ret    
c001652b:	90                   	nop

c001652c <FAT::~FAT()>:
c001652c:	83 ec 0c             	sub    esp,0xc
c001652f:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c0016534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016538:	89 10                	mov    DWORD PTR [eax],edx
c001653a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653e:	83 ec 0c             	sub    esp,0xc
c0016541:	50                   	push   eax
c0016542:	e8 0d 44 ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	90                   	nop
c001654b:	83 c4 0c             	add    esp,0xc
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <FAT::~FAT()>:
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	83 ec 0c             	sub    esp,0xc
c0016556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655a:	e8 cd ff ff ff       	call   c001652c <FAT::~FAT()>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	83 ec 08             	sub    esp,0x8
c0016565:	6a 08                	push   0x8
c0016567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001656b:	e8 a8 3f ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	83 c4 0c             	add    esp,0xc
c0016576:	c3                   	ret    
c0016577:	90                   	nop

c0016578 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016578:	83 ec 1c             	sub    esp,0x1c
c001657b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016582:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016587:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001658b:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016592:	83 f8 ff             	cmp    eax,0xffffffff
c0016595:	75 35                	jne    c00165cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016597:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001659b:	88 c2                	mov    dl,al
c001659d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165a2:	01 d0                	add    eax,edx
c00165a4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165a8:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00165ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165b2:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00165b9:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165c2:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00165c9:	eb 19                	jmp    c00165e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00165cb:	90                   	nop
c00165cc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165d0:	88 c2                	mov    dl,al
c00165d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d6:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00165dd:	01 d0                	add    eax,edx
c00165df:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165e3:	90                   	nop
c00165e4:	83 ec 04             	sub    esp,0x4
c00165e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165ef:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165f3:	50                   	push   eax
c00165f4:	e8 5b e8 fe ff       	call   c0004e54 <f_getlabel>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016600:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016605:	75 09                	jne    c0016610 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016607:	b8 00 00 00 00       	mov    eax,0x0
c001660c:	eb 0a                	jmp    c0016618 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001660e:	66 90                	xchg   ax,ax
c0016610:	b8 01 00 00 00       	mov    eax,0x1
c0016615:	8d 76 00             	lea    esi,[esi+0x0]
c0016618:	83 c4 1c             	add    esp,0x1c
c001661b:	c3                   	ret    

c001661c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001661c:	57                   	push   edi
c001661d:	83 ec 58             	sub    esp,0x58
c0016620:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016628:	8d 54 24 10          	lea    edx,[esp+0x10]
c001662c:	b8 00 00 00 00       	mov    eax,0x0
c0016631:	b9 0f 00 00 00       	mov    ecx,0xf
c0016636:	fc                   	cld    
c0016637:	89 d7                	mov    edi,edx
c0016639:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001663b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001663f:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016646:	83 f8 ff             	cmp    eax,0xffffffff
c0016649:	75 35                	jne    c0016680 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001664b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001664f:	88 c2                	mov    dl,al
c0016651:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016656:	01 d0                	add    eax,edx
c0016658:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001665c:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016662:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016666:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001666d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016672:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016676:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001667d:	eb 19                	jmp    c0016698 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001667f:	90                   	nop
c0016680:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016684:	88 c2                	mov    dl,al
c0016686:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001668a:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016691:	01 d0                	add    eax,edx
c0016693:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016697:	90                   	nop
c0016698:	83 ec 08             	sub    esp,0x8
c001669b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001669f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166a3:	50                   	push   eax
c00166a4:	e8 17 a1 fe ff       	call   c00007c0 <strcat>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	83 ec 0c             	sub    esp,0xc
c00166af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166b3:	50                   	push   eax
c00166b4:	e8 ec e8 fe ff       	call   c0004fa5 <f_setlabel>
c00166b9:	83 c4 10             	add    esp,0x10
c00166bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00166c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00166c5:	75 09                	jne    c00166d0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00166c7:	b8 00 00 00 00       	mov    eax,0x0
c00166cc:	eb 0a                	jmp    c00166d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00166ce:	66 90                	xchg   ax,ax
c00166d0:	b8 01 00 00 00       	mov    eax,0x1
c00166d5:	8d 76 00             	lea    esi,[esi+0x0]
c00166d8:	83 c4 58             	add    esp,0x58
c00166db:	5f                   	pop    edi
c00166dc:	c3                   	ret    
c00166dd:	90                   	nop
c00166de:	66 90                	xchg   ax,ax

c00166e0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00166e0:	83 ec 2c             	sub    esp,0x2c
c00166e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00166eb:	83 ec 08             	sub    esp,0x8
c00166ee:	68 88 f7 01 c0       	push   0xc001f788
c00166f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f7:	e8 e4 9f fe ff       	call   c00006e0 <strcmp>
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	85 c0                	test   eax,eax
c0016701:	0f 94 c0             	sete   al
c0016704:	84 c0                	test   al,al
c0016706:	74 10                	je     c0016718 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016708:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016710:	e9 b3 00 00 00       	jmp    c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016715:	8d 76 00             	lea    esi,[esi+0x0]
c0016718:	83 ec 08             	sub    esp,0x8
c001671b:	68 7a f7 01 c0       	push   0xc001f77a
c0016720:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016724:	e8 b7 9f fe ff       	call   c00006e0 <strcmp>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	85 c0                	test   eax,eax
c001672e:	0f 94 c0             	sete   al
c0016731:	84 c0                	test   al,al
c0016733:	74 0f                	je     c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016735:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001673d:	e9 86 00 00 00       	jmp    c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016742:	66 90                	xchg   ax,ax
c0016744:	83 ec 08             	sub    esp,0x8
c0016747:	68 80 f7 01 c0       	push   0xc001f780
c001674c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016750:	e8 8b 9f fe ff       	call   c00006e0 <strcmp>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	85 c0                	test   eax,eax
c001675a:	0f 94 c0             	sete   al
c001675d:	84 c0                	test   al,al
c001675f:	74 0b                	je     c001676c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016761:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016769:	eb 5d                	jmp    c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001676b:	90                   	nop
c001676c:	83 ec 08             	sub    esp,0x8
c001676f:	68 fc d6 01 c0       	push   0xc001d6fc
c0016774:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016778:	e8 63 9f fe ff       	call   c00006e0 <strcmp>
c001677d:	83 c4 10             	add    esp,0x10
c0016780:	85 c0                	test   eax,eax
c0016782:	0f 94 c0             	sete   al
c0016785:	84 c0                	test   al,al
c0016787:	74 0b                	je     c0016794 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016789:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016791:	eb 35                	jmp    c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016793:	90                   	nop
c0016794:	83 ec 08             	sub    esp,0x8
c0016797:	68 86 f7 01 c0       	push   0xc001f786
c001679c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167a0:	e8 3b 9f fe ff       	call   c00006e0 <strcmp>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	85 c0                	test   eax,eax
c00167aa:	0f 94 c0             	sete   al
c00167ad:	84 c0                	test   al,al
c00167af:	74 0b                	je     c00167bc <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00167b1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00167b9:	eb 0d                	jmp    c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167bb:	90                   	nop
c00167bc:	b8 08 00 00 00       	mov    eax,0x8
c00167c1:	e9 ea 00 00 00       	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167c6:	66 90                	xchg   ax,ax
c00167c8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00167cf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00167d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167d8:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00167df:	83 f8 ff             	cmp    eax,0xffffffff
c00167e2:	75 34                	jne    c0016818 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00167e4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167e8:	88 c2                	mov    dl,al
c00167ea:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00167ef:	01 d0                	add    eax,edx
c00167f1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167f5:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00167fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167ff:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016806:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001680b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001680f:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016816:	eb 18                	jmp    c0016830 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016818:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001681c:	88 c2                	mov    dl,al
c001681e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016822:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016829:	01 d0                	add    eax,edx
c001682b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001682f:	90                   	nop
c0016830:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016834:	88 04 24             	mov    BYTE PTR [esp],al
c0016837:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001683b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001683f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016847:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001684c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	68 00 20 00 00       	push   0x2000
c001685c:	e8 14 10 ff ff       	call   c0007875 <malloc>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016868:	68 00 20 00 00       	push   0x2000
c001686d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016871:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016875:	50                   	push   eax
c0016876:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001687a:	50                   	push   eax
c001687b:	e8 15 ea fe ff       	call   c0005295 <f_mkfs>
c0016880:	83 c4 10             	add    esp,0x10
c0016883:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016887:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001688c:	75 0a                	jne    c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001688e:	b8 00 00 00 00       	mov    eax,0x0
c0016893:	eb 1b                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016895:	8d 76 00             	lea    esi,[esi+0x0]
c0016898:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001689d:	75 09                	jne    c00168a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001689f:	b8 09 00 00 00       	mov    eax,0x9
c00168a4:	eb 0a                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168a6:	66 90                	xchg   ax,ax
c00168a8:	b8 01 00 00 00       	mov    eax,0x1
c00168ad:	8d 76 00             	lea    esi,[esi+0x0]
c00168b0:	83 c4 2c             	add    esp,0x2c
c00168b3:	c3                   	ret    

c00168b4 <FAT::tryMount(LogicalDisk*, int)>:
c00168b4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00168ba:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168bf:	83 f8 14             	cmp    eax,0x14
c00168c2:	75 18                	jne    c00168dc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00168c4:	83 ec 0c             	sub    esp,0xc
c00168c7:	68 8c f7 01 c0       	push   0xc001f78c
c00168cc:	e8 52 9a ff ff       	call   c0010323 <KePanic(char const*)>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	b0 00                	mov    al,0x0
c00168d6:	e9 e9 01 00 00       	jmp    c0016ac4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168db:	90                   	nop
c00168dc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00168e3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00168e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168ef:	3d 00 02 00 00       	cmp    eax,0x200
c00168f4:	74 0a                	je     c0016900 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168f6:	b0 00                	mov    al,0x0
c00168f8:	e9 c7 01 00 00       	jmp    c0016ac4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016908:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001690f:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016916:	83 f8 ff             	cmp    eax,0xffffffff
c0016919:	74 09                	je     c0016924 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001691b:	b0 01                	mov    al,0x1
c001691d:	e9 a2 01 00 00       	jmp    c0016ac4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016922:	66 90                	xchg   ax,ax
c0016924:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001692e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016936:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001693d:	88 c2                	mov    dl,al
c001693f:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016944:	01 d0                	add    eax,edx
c0016946:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001694d:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016953:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001695a:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c0016961:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016966:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001696d:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	68 34 02 00 00       	push   0x234
c001697c:	e8 f4 0e ff ff       	call   c0007875 <malloc>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001698b:	83 ec 04             	sub    esp,0x4
c001698e:	6a 00                	push   0x0
c0016990:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016997:	50                   	push   eax
c0016998:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001699f:	e8 17 d1 fe ff       	call   c0003abb <f_mount>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169ae:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00169b6:	74 1c                	je     c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169c2:	e8 ce 0e ff ff       	call   c0007895 <rfree>
c00169c7:	83 c4 10             	add    esp,0x10
c00169ca:	b0 00                	mov    al,0x0
c00169cc:	e9 f3 00 00 00       	jmp    c0016ac4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	83 ec 04             	sub    esp,0x4
c00169d7:	68 00 01 00 00       	push   0x100
c00169dc:	6a 00                	push   0x0
c00169de:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169e5:	50                   	push   eax
c00169e6:	e8 e5 9a fe ff       	call   c00004d0 <memset>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	83 ec 08             	sub    esp,0x8
c00169f1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169f8:	50                   	push   eax
c00169f9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a00:	50                   	push   eax
c0016a01:	e8 ba 9d fe ff       	call   c00007c0 <strcat>
c0016a06:	83 c4 10             	add    esp,0x10
c0016a09:	83 ec 08             	sub    esp,0x8
c0016a0c:	68 9a f7 01 c0       	push   0xc001f79a
c0016a11:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a18:	50                   	push   eax
c0016a19:	e8 a2 9d fe ff       	call   c00007c0 <strcat>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	83 ec 04             	sub    esp,0x4
c0016a24:	6a 01                	push   0x1
c0016a26:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a2d:	50                   	push   eax
c0016a2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a32:	50                   	push   eax
c0016a33:	e8 e5 d0 fe ff       	call   c0003b1d <f_open>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a42:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a49:	85 c0                	test   eax,eax
c0016a4b:	74 0b                	je     c0016a58 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a4d:	78 31                	js     c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a4f:	83 e8 04             	sub    eax,0x4
c0016a52:	83 f8 01             	cmp    eax,0x1
c0016a55:	77 29                	ja     c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a57:	90                   	nop
c0016a58:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a67:	50                   	push   eax
c0016a68:	e8 63 d8 fe ff       	call   c00042d0 <f_close>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	90                   	nop
c0016a71:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a79:	74 41                	je     c0016abc <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a7b:	eb 33                	jmp    c0016ab0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a8a:	e8 06 0e ff ff       	call   c0007895 <rfree>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	83 ec 04             	sub    esp,0x4
c0016a95:	6a 00                	push   0x0
c0016a97:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a9e:	50                   	push   eax
c0016a9f:	6a 00                	push   0x0
c0016aa1:	e8 15 d0 fe ff       	call   c0003abb <f_mount>
c0016aa6:	83 c4 10             	add    esp,0x10
c0016aa9:	b0 00                	mov    al,0x0
c0016aab:	eb 17                	jmp    c0016ac4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016aad:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab0:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016ab5:	40                   	inc    eax
c0016ab6:	a3 20 62 02 c0       	mov    ds:0xc0026220,eax
c0016abb:	90                   	nop
c0016abc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016ac3:	90                   	nop
c0016ac4:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016aca:	c3                   	ret    
c0016acb:	90                   	nop

c0016acc <FAT::allocateSwapfile(char const*, int)>:
c0016acc:	55                   	push   ebp
c0016acd:	57                   	push   edi
c0016ace:	56                   	push   esi
c0016acf:	53                   	push   ebx
c0016ad0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016ad6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016ae1:	83 ec 0c             	sub    esp,0xc
c0016ae4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016aeb:	e8 85 0d ff ff       	call   c0007875 <malloc>
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	89 c7                	mov    edi,eax
c0016af5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0016afa:	83 ec 04             	sub    esp,0x4
c0016afd:	50                   	push   eax
c0016afe:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b05:	57                   	push   edi
c0016b06:	e8 79 40 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b15:	83 ec 04             	sub    esp,0x4
c0016b18:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b1c:	50                   	push   eax
c0016b1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b21:	50                   	push   eax
c0016b22:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b29:	e8 c2 43 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b38:	c1 e0 14             	shl    eax,0x14
c0016b3b:	89 c7                	mov    edi,eax
c0016b3d:	89 c5                	mov    ebp,eax
c0016b3f:	c1 fd 1f             	sar    ebp,0x1f
c0016b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b4a:	89 f9                	mov    ecx,edi
c0016b4c:	31 c1                	xor    ecx,eax
c0016b4e:	89 cb                	mov    ebx,ecx
c0016b50:	89 e9                	mov    ecx,ebp
c0016b52:	31 d1                	xor    ecx,edx
c0016b54:	89 ce                	mov    esi,ecx
c0016b56:	89 f0                	mov    eax,esi
c0016b58:	09 d8                	or     eax,ebx
c0016b5a:	0f 84 9c 00 00 00    	je     c0016bfc <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b60:	83 ec 0c             	sub    esp,0xc
c0016b63:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b6a:	e8 4d 42 ff ff       	call   c000adbc <File::unlink()>
c0016b6f:	83 c4 10             	add    esp,0x10
c0016b72:	83 ec 08             	sub    esp,0x8
c0016b75:	6a 12                	push   0x12
c0016b77:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b7e:	e8 c1 40 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0016b83:	83 c4 10             	add    esp,0x10
c0016b86:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b8d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b93:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b9a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ba1:	c1 e0 14             	shl    eax,0x14
c0016ba4:	83 ec 04             	sub    esp,0x4
c0016ba7:	6a 01                	push   0x1
c0016ba9:	50                   	push   eax
c0016baa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016bb1:	e8 7f e5 fe ff       	call   c0005135 <f_expand>
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bc2:	83 c0 10             	add    eax,0x10
c0016bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bc7:	83 ec 0c             	sub    esp,0xc
c0016bca:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bce:	52                   	push   edx
c0016bcf:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016bd3:	52                   	push   edx
c0016bd4:	6a 00                	push   0x0
c0016bd6:	68 00 04 00 00       	push   0x400
c0016bdb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016be2:	ff d0                	call   eax
c0016be4:	83 c4 20             	add    esp,0x20
c0016be7:	83 ec 0c             	sub    esp,0xc
c0016bea:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bf1:	e8 ac 40 ff ff       	call   c000aca2 <File::close()>
c0016bf6:	83 c4 10             	add    esp,0x10
c0016bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bfc:	83 ec 08             	sub    esp,0x8
c0016bff:	6a 01                	push   0x1
c0016c01:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c08:	e8 37 40 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c19:	83 c0 0c             	add    eax,0xc
c0016c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c25:	52                   	push   edx
c0016c26:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c2a:	52                   	push   edx
c0016c2b:	6a 00                	push   0x0
c0016c2d:	6a 04                	push   0x4
c0016c2f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c36:	ff d0                	call   eax
c0016c38:	83 c4 20             	add    esp,0x20
c0016c3b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c42:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c48:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c4f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c59:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c6a:	e8 33 40 ff ff       	call   c000aca2 <File::close()>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c79:	ba 00 00 00 00       	mov    edx,0x0
c0016c7e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c84:	5b                   	pop    ebx
c0016c85:	5e                   	pop    esi
c0016c86:	5f                   	pop    edi
c0016c87:	5d                   	pop    ebp
c0016c88:	c3                   	ret    
c0016c89:	90                   	nop
c0016c8a:	66 90                	xchg   ax,ax

c0016c8c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c8c:	57                   	push   edi
c0016c8d:	56                   	push   esi
c0016c8e:	53                   	push   ebx
c0016c8f:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c95:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c9d:	74 0d                	je     c0016cac <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c9f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016ca7:	75 0f                	jne    c0016cb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cac:	b8 04 00 00 00       	mov    eax,0x4
c0016cb1:	e9 36 01 00 00       	jmp    c0016dec <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016cb6:	66 90                	xchg   ax,ax
c0016cb8:	83 ec 08             	sub    esp,0x8
c0016cbb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cc2:	50                   	push   eax
c0016cc3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016cca:	e8 c4 d8 fe ff       	call   c0004593 <f_readdir>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016cd9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016cea:	83 c0 16             	add    eax,0x16
c0016ced:	50                   	push   eax
c0016cee:	e8 4d 98 fe ff       	call   c0000540 <strlen>
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	ba 00 00 00 00       	mov    edx,0x0
c0016cfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d03:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d0a:	25 ff 00 00 00       	and    eax,0xff
c0016d0f:	83 e0 10             	and    eax,0x10
c0016d12:	74 08                	je     c0016d1c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d14:	b8 02 00 00 00       	mov    eax,0x2
c0016d19:	eb 09                	jmp    c0016d24 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d1b:	90                   	nop
c0016d1c:	b8 01 00 00 00       	mov    eax,0x1
c0016d21:	8d 76 00             	lea    esi,[esi+0x0]
c0016d24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d28:	83 ec 08             	sub    esp,0x8
c0016d2b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d32:	83 c0 16             	add    eax,0x16
c0016d35:	50                   	push   eax
c0016d36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d3a:	83 c0 10             	add    eax,0x10
c0016d3d:	50                   	push   eax
c0016d3e:	e8 bd 98 fe ff       	call   c0000600 <strcpy>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d4d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d58:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d5f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d66:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d6d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d74:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d7b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d82:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d89:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d90:	89 c6                	mov    esi,eax
c0016d92:	89 d7                	mov    edi,edx
c0016d94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d96:	89 c8                	mov    eax,ecx
c0016d98:	89 fa                	mov    edx,edi
c0016d9a:	89 f3                	mov    ebx,esi
c0016d9c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016da3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016daa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016db1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016db8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016dbe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016dc5:	84 c0                	test   al,al
c0016dc7:	75 07                	jne    c0016dd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016dc9:	b8 07 00 00 00       	mov    eax,0x7
c0016dce:	eb 1c                	jmp    c0016dec <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dd0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016dd7:	85 c0                	test   eax,eax
c0016dd9:	75 09                	jne    c0016de4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ddb:	b8 00 00 00 00       	mov    eax,0x0
c0016de0:	eb 0a                	jmp    c0016dec <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016de2:	66 90                	xchg   ax,ax
c0016de4:	b8 01 00 00 00       	mov    eax,0x1
c0016de9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dec:	81 c4 50 02 00 00    	add    esp,0x250
c0016df2:	5b                   	pop    ebx
c0016df3:	5e                   	pop    esi
c0016df4:	5f                   	pop    edi
c0016df5:	c3                   	ret    
c0016df6:	66 90                	xchg   ax,ax

c0016df8 <FAT::read(void*, unsigned long, void*, int*)>:
c0016df8:	83 ec 1c             	sub    esp,0x1c
c0016dfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e00:	74 0a                	je     c0016e0c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e02:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e07:	75 0b                	jne    c0016e14 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e09:	8d 76 00             	lea    esi,[esi+0x0]
c0016e0c:	b8 04 00 00 00       	mov    eax,0x4
c0016e11:	eb 41                	jmp    c0016e54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e13:	90                   	nop
c0016e14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e18:	50                   	push   eax
c0016e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e25:	e8 be cf fe ff       	call   c0003de8 <f_read>
c0016e2a:	83 c4 10             	add    esp,0x10
c0016e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e35:	89 c2                	mov    edx,eax
c0016e37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e3b:	89 10                	mov    DWORD PTR [eax],edx
c0016e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e41:	85 c0                	test   eax,eax
c0016e43:	75 07                	jne    c0016e4c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e45:	b8 00 00 00 00       	mov    eax,0x0
c0016e4a:	eb 08                	jmp    c0016e54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e4c:	b8 01 00 00 00       	mov    eax,0x1
c0016e51:	8d 76 00             	lea    esi,[esi+0x0]
c0016e54:	83 c4 1c             	add    esp,0x1c
c0016e57:	c3                   	ret    

c0016e58 <FAT::write(void*, unsigned long, void*, int*)>:
c0016e58:	83 ec 1c             	sub    esp,0x1c
c0016e5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e60:	74 0a                	je     c0016e6c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e67:	75 0b                	jne    c0016e74 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e69:	8d 76 00             	lea    esi,[esi+0x0]
c0016e6c:	b8 04 00 00 00       	mov    eax,0x4
c0016e71:	eb 41                	jmp    c0016eb4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e73:	90                   	nop
c0016e74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e78:	50                   	push   eax
c0016e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e85:	e8 5d d1 fe ff       	call   c0003fe7 <f_write>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e95:	89 c2                	mov    edx,eax
c0016e97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e9b:	89 10                	mov    DWORD PTR [eax],edx
c0016e9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea1:	85 c0                	test   eax,eax
c0016ea3:	75 07                	jne    c0016eac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016ea5:	b8 00 00 00 00       	mov    eax,0x0
c0016eaa:	eb 08                	jmp    c0016eb4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016eac:	b8 01 00 00 00       	mov    eax,0x1
c0016eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb4:	83 c4 1c             	add    esp,0x1c
c0016eb7:	c3                   	ret    

c0016eb8 <FAT::close(void*)>:
c0016eb8:	83 ec 1c             	sub    esp,0x1c
c0016ebb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ec0:	75 0a                	jne    c0016ecc <FAT::close(void*)+0x14>
c0016ec2:	b8 04 00 00 00       	mov    eax,0x4
c0016ec7:	eb 3f                	jmp    c0016f08 <FAT::close(void*)+0x50>
c0016ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ecc:	83 ec 0c             	sub    esp,0xc
c0016ecf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ed3:	e8 f8 d3 fe ff       	call   c00042d0 <f_close>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ee6:	e8 9a 09 ff ff       	call   c0007885 <free>
c0016eeb:	83 c4 10             	add    esp,0x10
c0016eee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ef2:	85 c0                	test   eax,eax
c0016ef4:	75 0a                	jne    c0016f00 <FAT::close(void*)+0x48>
c0016ef6:	b8 00 00 00 00       	mov    eax,0x0
c0016efb:	eb 0b                	jmp    c0016f08 <FAT::close(void*)+0x50>
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]
c0016f00:	b8 01 00 00 00       	mov    eax,0x1
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	83 c4 1c             	add    esp,0x1c
c0016f0b:	c3                   	ret    

c0016f0c <FAT::closeDir(void*)>:
c0016f0c:	83 ec 1c             	sub    esp,0x1c
c0016f0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f14:	75 0a                	jne    c0016f20 <FAT::closeDir(void*)+0x14>
c0016f16:	b8 04 00 00 00       	mov    eax,0x4
c0016f1b:	eb 3f                	jmp    c0016f5c <FAT::closeDir(void*)+0x50>
c0016f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f20:	83 ec 0c             	sub    esp,0xc
c0016f23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f27:	e8 45 d6 fe ff       	call   c0004571 <f_closedir>
c0016f2c:	83 c4 10             	add    esp,0x10
c0016f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f33:	83 ec 0c             	sub    esp,0xc
c0016f36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f3a:	e8 46 09 ff ff       	call   c0007885 <free>
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f46:	85 c0                	test   eax,eax
c0016f48:	75 0a                	jne    c0016f54 <FAT::closeDir(void*)+0x48>
c0016f4a:	b8 00 00 00 00       	mov    eax,0x0
c0016f4f:	eb 0b                	jmp    c0016f5c <FAT::closeDir(void*)+0x50>
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]
c0016f54:	b8 01 00 00 00       	mov    eax,0x1
c0016f59:	8d 76 00             	lea    esi,[esi+0x0]
c0016f5c:	83 c4 1c             	add    esp,0x1c
c0016f5f:	c3                   	ret    

c0016f60 <FAT::seek(void*, unsigned long long)>:
c0016f60:	83 ec 2c             	sub    esp,0x2c
c0016f63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f73:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f78:	75 0a                	jne    c0016f84 <FAT::seek(void*, unsigned long long)+0x24>
c0016f7a:	b8 04 00 00 00       	mov    eax,0x4
c0016f7f:	eb 33                	jmp    c0016fb4 <FAT::seek(void*, unsigned long long)+0x54>
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]
c0016f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f88:	83 ec 08             	sub    esp,0x8
c0016f8b:	50                   	push   eax
c0016f8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f90:	e8 6a d3 fe ff       	call   c00042ff <f_lseek>
c0016f95:	83 c4 10             	add    esp,0x10
c0016f98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fa0:	85 c0                	test   eax,eax
c0016fa2:	75 08                	jne    c0016fac <FAT::seek(void*, unsigned long long)+0x4c>
c0016fa4:	b8 00 00 00 00       	mov    eax,0x0
c0016fa9:	eb 09                	jmp    c0016fb4 <FAT::seek(void*, unsigned long long)+0x54>
c0016fab:	90                   	nop
c0016fac:	b8 01 00 00 00       	mov    eax,0x1
c0016fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb4:	83 c4 2c             	add    esp,0x2c
c0016fb7:	c3                   	ret    

c0016fb8 <fatWrapperReadDisk>:
c0016fb8:	53                   	push   ebx
c0016fb9:	83 ec 18             	sub    esp,0x18
c0016fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc8:	25 ff 00 00 00       	and    eax,0xff
c0016fcd:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016fd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fdc:	ba 00 00 00 00       	mov    edx,0x0
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fe8:	53                   	push   ebx
c0016fe9:	52                   	push   edx
c0016fea:	50                   	push   eax
c0016feb:	51                   	push   ecx
c0016fec:	e8 3d 5d ff ff       	call   c000cd2e <LogicalDisk::read(unsigned long long, int, void*)>
c0016ff1:	83 c4 20             	add    esp,0x20
c0016ff4:	83 c4 18             	add    esp,0x18
c0016ff7:	5b                   	pop    ebx
c0016ff8:	c3                   	ret    
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0016ffc <fatWrapperWriteDisk>:
c0016ffc:	53                   	push   ebx
c0016ffd:	83 ec 18             	sub    esp,0x18
c0017000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017004:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017008:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001700c:	25 ff 00 00 00       	and    eax,0xff
c0017011:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0017018:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001701c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017020:	ba 00 00 00 00       	mov    edx,0x0
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001702c:	53                   	push   ebx
c001702d:	52                   	push   edx
c001702e:	50                   	push   eax
c001702f:	51                   	push   ecx
c0017030:	e8 65 5d ff ff       	call   c000cd9a <LogicalDisk::write(unsigned long long, int, void*)>
c0017035:	83 c4 20             	add    esp,0x20
c0017038:	83 c4 18             	add    esp,0x18
c001703b:	5b                   	pop    ebx
c001703c:	c3                   	ret    
c001703d:	8d 76 00             	lea    esi,[esi+0x0]

c0017040 <fatWrapperIoctl>:
c0017040:	53                   	push   ebx
c0017041:	83 ec 28             	sub    esp,0x28
c0017044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001704c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017050:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017054:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017059:	75 35                	jne    c0017090 <fatWrapperIoctl+0x50>
c001705b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001705f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017063:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017067:	25 ff 00 00 00       	and    eax,0xff
c001706c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0017073:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017079:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001707f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017083:	66 89 02             	mov    WORD PTR [edx],ax
c0017086:	b8 00 00 00 00       	mov    eax,0x0
c001708b:	e9 c4 00 00 00       	jmp    c0017154 <fatWrapperIoctl+0x114>
c0017090:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017095:	75 75                	jne    c001710c <fatWrapperIoctl+0xcc>
c0017097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001709b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001709f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a3:	25 ff 00 00 00       	and    eax,0xff
c00170a8:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c00170af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170b5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170bb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00170c1:	89 c8                	mov    eax,ecx
c00170c3:	89 da                	mov    edx,ebx
c00170c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00170c9:	c1 e0 0a             	shl    eax,0xa
c00170cc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170d0:	81 e1 ff 00 00 00    	and    ecx,0xff
c00170d6:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c00170dd:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00170e3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00170e9:	89 cb                	mov    ebx,ecx
c00170eb:	c1 fb 1f             	sar    ebx,0x1f
c00170ee:	53                   	push   ebx
c00170ef:	51                   	push   ecx
c00170f0:	52                   	push   edx
c00170f1:	50                   	push   eax
c00170f2:	e8 19 58 00 00       	call   c001c910 <__udivdi3>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	89 c2                	mov    edx,eax
c00170fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017100:	89 10                	mov    DWORD PTR [eax],edx
c0017102:	b8 00 00 00 00       	mov    eax,0x0
c0017107:	eb 4b                	jmp    c0017154 <fatWrapperIoctl+0x114>
c0017109:	8d 76 00             	lea    esi,[esi+0x0]
c001710c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017111:	75 09                	jne    c001711c <fatWrapperIoctl+0xdc>
c0017113:	b8 00 00 00 00       	mov    eax,0x0
c0017118:	eb 3a                	jmp    c0017154 <fatWrapperIoctl+0x114>
c001711a:	66 90                	xchg   ax,ax
c001711c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017121:	75 19                	jne    c001713c <fatWrapperIoctl+0xfc>
c0017123:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001712b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001712f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017135:	b8 00 00 00 00       	mov    eax,0x0
c001713a:	eb 18                	jmp    c0017154 <fatWrapperIoctl+0x114>
c001713c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017141:	75 09                	jne    c001714c <fatWrapperIoctl+0x10c>
c0017143:	b8 00 00 00 00       	mov    eax,0x0
c0017148:	eb 0a                	jmp    c0017154 <fatWrapperIoctl+0x114>
c001714a:	66 90                	xchg   ax,ax
c001714c:	b8 04 00 00 00       	mov    eax,0x4
c0017151:	8d 76 00             	lea    esi,[esi+0x0]
c0017154:	83 c4 28             	add    esp,0x28
c0017157:	5b                   	pop    ebx
c0017158:	c3                   	ret    
c0017159:	90                   	nop
c001715a:	66 90                	xchg   ax,ax

c001715c <FAT::FAT()>:
c001715c:	83 ec 1c             	sub    esp,0x1c
c001715f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017163:	83 ec 0c             	sub    esp,0xc
c0017166:	50                   	push   eax
c0017167:	e8 c4 37 ff ff       	call   c000a930 <Filesystem::Filesystem()>
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c0017174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017178:	89 10                	mov    DWORD PTR [eax],edx
c001717a:	c7 05 20 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026220,0x0
c0017184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001718c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017191:	7f 15                	jg     c00171a8 <FAT::FAT()+0x4c>
c0017193:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017197:	c7 04 85 40 62 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9dc0],0xffffffff
c00171a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171a6:	eb e4                	jmp    c001718c <FAT::FAT()+0x30>
c00171a8:	90                   	nop
c00171a9:	83 c4 1c             	add    esp,0x1c
c00171ac:	c3                   	ret    
c00171ad:	90                   	nop
c00171ae:	66 90                	xchg   ax,ax

c00171b0 <FAT::fixFilepath(char*)>:
c00171b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b4:	8a 00                	mov    al,BYTE PTR [eax]
c00171b6:	3c 40                	cmp    al,0x40
c00171b8:	7e 2e                	jle    c00171e8 <FAT::fixFilepath(char*)+0x38>
c00171ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171be:	8a 00                	mov    al,BYTE PTR [eax]
c00171c0:	83 e8 41             	sub    eax,0x41
c00171c3:	88 c2                	mov    dl,al
c00171c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171c9:	88 10                	mov    BYTE PTR [eax],dl
c00171cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171cf:	8a 00                	mov    al,BYTE PTR [eax]
c00171d1:	0f be c0             	movsx  eax,al
c00171d4:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00171db:	83 c0 30             	add    eax,0x30
c00171de:	88 c2                	mov    dl,al
c00171e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171e4:	88 10                	mov    BYTE PTR [eax],dl
c00171e6:	66 90                	xchg   ax,ax
c00171e8:	90                   	nop
c00171e9:	c3                   	ret    
c00171ea:	66 90                	xchg   ax,ax

c00171ec <FAT::open(char const*, void**, FileOpenMode)>:
c00171ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171fa:	74 0c                	je     c0017208 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171fc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017204:	75 0e                	jne    c0017214 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017206:	66 90                	xchg   ax,ax
c0017208:	b8 04 00 00 00       	mov    eax,0x4
c001720d:	e9 0a 01 00 00       	jmp    c001731c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017212:	66 90                	xchg   ax,ax
c0017214:	83 ec 08             	sub    esp,0x8
c0017217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001721e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017222:	50                   	push   eax
c0017223:	e8 d8 93 fe ff       	call   c0000600 <strcpy>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	83 ec 08             	sub    esp,0x8
c001722e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017232:	50                   	push   eax
c0017233:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001723a:	e8 71 ff ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c001723f:	83 c4 10             	add    esp,0x10
c0017242:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001724a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017251:	83 e0 01             	and    eax,0x1
c0017254:	74 0a                	je     c0017260 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017256:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001725e:	66 90                	xchg   ax,ax
c0017260:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017267:	83 e0 04             	and    eax,0x4
c001726a:	74 10                	je     c001727c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001726c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017274:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001727c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017283:	83 e0 02             	and    eax,0x2
c0017286:	74 08                	je     c0017290 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017288:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017290:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017297:	83 e0 08             	and    eax,0x8
c001729a:	74 08                	je     c00172a4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001729c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00172a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172ab:	83 e0 10             	and    eax,0x10
c00172ae:	74 08                	je     c00172b8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00172b0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00172b8:	83 ec 0c             	sub    esp,0xc
c00172bb:	68 28 02 00 00       	push   0x228
c00172c0:	e8 b0 05 ff ff       	call   c0007875 <malloc>
c00172c5:	83 c4 10             	add    esp,0x10
c00172c8:	89 c2                	mov    edx,eax
c00172ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172d1:	89 10                	mov    DWORD PTR [eax],edx
c00172d3:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00172da:	31 d2                	xor    edx,edx
c00172dc:	88 c2                	mov    dl,al
c00172de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00172e7:	83 ec 04             	sub    esp,0x4
c00172ea:	52                   	push   edx
c00172eb:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172ef:	52                   	push   edx
c00172f0:	50                   	push   eax
c00172f1:	e8 27 c8 fe ff       	call   c0003b1d <f_open>
c00172f6:	83 c4 10             	add    esp,0x10
c00172f9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017300:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017308:	74 0a                	je     c0017314 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001730a:	b8 01 00 00 00       	mov    eax,0x1
c001730f:	eb 0b                	jmp    c001731c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017311:	8d 76 00             	lea    esi,[esi+0x0]
c0017314:	b8 00 00 00 00       	mov    eax,0x0
c0017319:	8d 76 00             	lea    esi,[esi+0x0]
c001731c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017322:	c3                   	ret    
c0017323:	90                   	nop

c0017324 <FAT::openDir(char const*, void**)>:
c0017324:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001732a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017332:	74 0c                	je     c0017340 <FAT::openDir(char const*, void**)+0x1c>
c0017334:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001733c:	75 0e                	jne    c001734c <FAT::openDir(char const*, void**)+0x28>
c001733e:	66 90                	xchg   ax,ax
c0017340:	b8 04 00 00 00       	mov    eax,0x4
c0017345:	e9 82 00 00 00       	jmp    c00173cc <FAT::openDir(char const*, void**)+0xa8>
c001734a:	66 90                	xchg   ax,ax
c001734c:	83 ec 08             	sub    esp,0x8
c001734f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017356:	8d 44 24 18          	lea    eax,[esp+0x18]
c001735a:	50                   	push   eax
c001735b:	e8 a0 92 fe ff       	call   c0000600 <strcpy>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	83 ec 08             	sub    esp,0x8
c0017366:	8d 44 24 14          	lea    eax,[esp+0x14]
c001736a:	50                   	push   eax
c001736b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017372:	e8 39 fe ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	83 ec 0c             	sub    esp,0xc
c001737d:	6a 30                	push   0x30
c001737f:	e8 f1 04 ff ff       	call   c0007875 <malloc>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	89 c2                	mov    edx,eax
c0017389:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017390:	89 10                	mov    DWORD PTR [eax],edx
c0017392:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017399:	8b 00                	mov    eax,DWORD PTR [eax]
c001739b:	83 ec 08             	sub    esp,0x8
c001739e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00173a2:	52                   	push   edx
c00173a3:	50                   	push   eax
c00173a4:	e8 fd d0 fe ff       	call   c00044a6 <f_opendir>
c00173a9:	83 c4 10             	add    esp,0x10
c00173ac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00173b3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00173bb:	74 07                	je     c00173c4 <FAT::openDir(char const*, void**)+0xa0>
c00173bd:	b8 01 00 00 00       	mov    eax,0x1
c00173c2:	eb 08                	jmp    c00173cc <FAT::openDir(char const*, void**)+0xa8>
c00173c4:	b8 00 00 00 00       	mov    eax,0x0
c00173c9:	8d 76 00             	lea    esi,[esi+0x0]
c00173cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173d2:	c3                   	ret    
c00173d3:	90                   	nop

c00173d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00173d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00173da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00173e2:	75 0c                	jne    c00173f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00173e4:	b8 04 00 00 00       	mov    eax,0x4
c00173e9:	e9 d6 00 00 00       	jmp    c00174c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173ee:	66 90                	xchg   ax,ax
c00173f0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173f8:	75 0a                	jne    c0017404 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173fa:	b8 04 00 00 00       	mov    eax,0x4
c00173ff:	e9 c0 00 00 00       	jmp    c00174c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017404:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001740c:	75 0a                	jne    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001740e:	b8 04 00 00 00       	mov    eax,0x4
c0017413:	e9 ac 00 00 00       	jmp    c00174c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017418:	83 ec 08             	sub    esp,0x8
c001741b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017422:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017429:	50                   	push   eax
c001742a:	e8 d1 91 fe ff       	call   c0000600 <strcpy>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	83 ec 08             	sub    esp,0x8
c0017435:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001743c:	50                   	push   eax
c001743d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017444:	e8 67 fd ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	83 ec 08             	sub    esp,0x8
c001744f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017453:	50                   	push   eax
c0017454:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001745b:	50                   	push   eax
c001745c:	e8 c4 d1 fe ff       	call   c0004625 <f_stat>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001746b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017472:	85 c0                	test   eax,eax
c0017474:	74 0a                	je     c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017476:	83 f8 04             	cmp    eax,0x4
c0017479:	74 39                	je     c00174b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001747b:	eb 3f                	jmp    c00174bc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001747d:	8d 76 00             	lea    esi,[esi+0x0]
c0017480:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017484:	25 ff 00 00 00       	and    eax,0xff
c0017489:	83 e0 10             	and    eax,0x10
c001748c:	0f 95 c2             	setne  dl
c001748f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017496:	88 10                	mov    BYTE PTR [eax],dl
c0017498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001749c:	ba 00 00 00 00       	mov    edx,0x0
c00174a1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00174a8:	89 01                	mov    DWORD PTR [ecx],eax
c00174aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174ad:	b8 00 00 00 00       	mov    eax,0x0
c00174b2:	eb 10                	jmp    c00174c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174b4:	b8 02 00 00 00       	mov    eax,0x2
c00174b9:	eb 09                	jmp    c00174c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174bb:	90                   	nop
c00174bc:	b8 01 00 00 00       	mov    eax,0x1
c00174c1:	8d 76 00             	lea    esi,[esi+0x0]
c00174c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174ca:	c3                   	ret    
c00174cb:	90                   	nop

c00174cc <FAT::unlink(char const*)>:
c00174cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00174d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00174da:	75 08                	jne    c00174e4 <FAT::unlink(char const*)+0x18>
c00174dc:	b8 04 00 00 00       	mov    eax,0x4
c00174e1:	eb 61                	jmp    c0017544 <FAT::unlink(char const*)+0x78>
c00174e3:	90                   	nop
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174f2:	50                   	push   eax
c00174f3:	e8 08 91 fe ff       	call   c0000600 <strcpy>
c00174f8:	83 c4 10             	add    esp,0x10
c00174fb:	83 ec 08             	sub    esp,0x8
c00174fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017502:	50                   	push   eax
c0017503:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001750a:	e8 a1 fc ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c001750f:	83 c4 10             	add    esp,0x10
c0017512:	83 ec 0c             	sub    esp,0xc
c0017515:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017519:	50                   	push   eax
c001751a:	e8 6b d3 fe ff       	call   c000488a <f_unlink>
c001751f:	83 c4 10             	add    esp,0x10
c0017522:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017529:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017530:	85 c0                	test   eax,eax
c0017532:	75 08                	jne    c001753c <FAT::unlink(char const*)+0x70>
c0017534:	b8 00 00 00 00       	mov    eax,0x0
c0017539:	eb 09                	jmp    c0017544 <FAT::unlink(char const*)+0x78>
c001753b:	90                   	nop
c001753c:	b8 01 00 00 00       	mov    eax,0x1
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	81 c4 1c 01 00 00    	add    esp,0x11c
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001754c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017552:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017559:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017560:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017564:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017568:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017570:	75 0a                	jne    c001757c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017572:	b8 04 00 00 00       	mov    eax,0x4
c0017577:	e9 54 01 00 00       	jmp    c00176d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017586:	8d 44 24 24          	lea    eax,[esp+0x24]
c001758a:	50                   	push   eax
c001758b:	e8 70 90 fe ff       	call   c0000600 <strcpy>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	83 ec 08             	sub    esp,0x8
c0017596:	8d 44 24 20          	lea    eax,[esp+0x20]
c001759a:	50                   	push   eax
c001759b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175a2:	e8 09 fc ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00175b2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00175ba:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175be:	25 ff 00 00 00       	and    eax,0xff
c00175c3:	83 e0 01             	and    eax,0x1
c00175c6:	74 08                	je     c00175d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00175c8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00175d0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175d4:	25 ff 00 00 00       	and    eax,0xff
c00175d9:	83 e0 02             	and    eax,0x2
c00175dc:	74 0a                	je     c00175e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00175de:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00175e6:	66 90                	xchg   ax,ax
c00175e8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175ec:	25 ff 00 00 00       	and    eax,0xff
c00175f1:	83 e0 04             	and    eax,0x4
c00175f4:	74 0a                	je     c0017600 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175f6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175fe:	66 90                	xchg   ax,ax
c0017600:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017604:	25 ff 00 00 00       	and    eax,0xff
c0017609:	83 e0 08             	and    eax,0x8
c001760c:	74 0a                	je     c0017618 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001760e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017616:	66 90                	xchg   ax,ax
c0017618:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001761c:	25 ff 00 00 00       	and    eax,0xff
c0017621:	83 e0 01             	and    eax,0x1
c0017624:	74 0a                	je     c0017630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017626:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001762e:	66 90                	xchg   ax,ax
c0017630:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017634:	25 ff 00 00 00       	and    eax,0xff
c0017639:	83 e0 02             	and    eax,0x2
c001763c:	74 0a                	je     c0017648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001763e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017646:	66 90                	xchg   ax,ax
c0017648:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001764c:	25 ff 00 00 00       	and    eax,0xff
c0017651:	83 e0 04             	and    eax,0x4
c0017654:	74 0a                	je     c0017660 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017656:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001765e:	66 90                	xchg   ax,ax
c0017660:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017664:	25 ff 00 00 00       	and    eax,0xff
c0017669:	83 e0 08             	and    eax,0x8
c001766c:	74 0a                	je     c0017678 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001766e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017676:	66 90                	xchg   ax,ax
c0017678:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001767f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017686:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001768d:	31 d2                	xor    edx,edx
c001768f:	88 c2                	mov    dl,al
c0017691:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017698:	25 ff 00 00 00       	and    eax,0xff
c001769d:	83 ec 04             	sub    esp,0x4
c00176a0:	52                   	push   edx
c00176a1:	50                   	push   eax
c00176a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176a6:	50                   	push   eax
c00176a7:	e8 51 d6 fe ff       	call   c0004cfd <f_chmod>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00176b6:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00176bd:	85 c0                	test   eax,eax
c00176bf:	75 07                	jne    c00176c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00176c1:	b8 00 00 00 00       	mov    eax,0x0
c00176c6:	eb 08                	jmp    c00176d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00176c8:	b8 01 00 00 00       	mov    eax,0x1
c00176cd:	8d 76 00             	lea    esi,[esi+0x0]
c00176d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00176d6:	c3                   	ret    
c00176d7:	90                   	nop

c00176d8 <FAT::rename(char const*, char const*)>:
c00176d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00176de:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00176e6:	74 0c                	je     c00176f4 <FAT::rename(char const*, char const*)+0x1c>
c00176e8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176f0:	75 0e                	jne    c0017700 <FAT::rename(char const*, char const*)+0x28>
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	b8 04 00 00 00       	mov    eax,0x4
c00176f9:	e9 9e 00 00 00       	jmp    c001779c <FAT::rename(char const*, char const*)+0xc4>
c00176fe:	66 90                	xchg   ax,ax
c0017700:	83 ec 08             	sub    esp,0x8
c0017703:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001770a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017711:	50                   	push   eax
c0017712:	e8 e9 8e fe ff       	call   c0000600 <strcpy>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	83 ec 08             	sub    esp,0x8
c001771d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017724:	50                   	push   eax
c0017725:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001772c:	e8 7f fa ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001773e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017742:	50                   	push   eax
c0017743:	e8 b8 8e fe ff       	call   c0000600 <strcpy>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017752:	50                   	push   eax
c0017753:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001775a:	e8 51 fa ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c001775f:	83 c4 10             	add    esp,0x10
c0017762:	83 ec 08             	sub    esp,0x8
c0017765:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017769:	50                   	push   eax
c001776a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017771:	50                   	push   eax
c0017772:	e8 d0 d3 fe ff       	call   c0004b47 <f_rename>
c0017777:	83 c4 10             	add    esp,0x10
c001777a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017781:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017788:	85 c0                	test   eax,eax
c001778a:	75 08                	jne    c0017794 <FAT::rename(char const*, char const*)+0xbc>
c001778c:	b8 00 00 00 00       	mov    eax,0x0
c0017791:	eb 09                	jmp    c001779c <FAT::rename(char const*, char const*)+0xc4>
c0017793:	90                   	nop
c0017794:	b8 01 00 00 00       	mov    eax,0x1
c0017799:	8d 76 00             	lea    esi,[esi+0x0]
c001779c:	81 c4 1c 02 00 00    	add    esp,0x21c
c00177a2:	c3                   	ret    
c00177a3:	90                   	nop

c00177a4 <FAT::mkdir(char const*)>:
c00177a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00177b2:	75 08                	jne    c00177bc <FAT::mkdir(char const*)+0x18>
c00177b4:	b8 04 00 00 00       	mov    eax,0x4
c00177b9:	eb 61                	jmp    c001781c <FAT::mkdir(char const*)+0x78>
c00177bb:	90                   	nop
c00177bc:	83 ec 08             	sub    esp,0x8
c00177bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ca:	50                   	push   eax
c00177cb:	e8 30 8e fe ff       	call   c0000600 <strcpy>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	83 ec 08             	sub    esp,0x8
c00177d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177da:	50                   	push   eax
c00177db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177e2:	e8 c9 f9 ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	83 ec 0c             	sub    esp,0xc
c00177ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177f1:	50                   	push   eax
c00177f2:	e8 b5 d1 fe ff       	call   c00049ac <f_mkdir>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017801:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017808:	85 c0                	test   eax,eax
c001780a:	75 08                	jne    c0017814 <FAT::mkdir(char const*)+0x70>
c001780c:	b8 00 00 00 00       	mov    eax,0x0
c0017811:	eb 09                	jmp    c001781c <FAT::mkdir(char const*)+0x78>
c0017813:	90                   	nop
c0017814:	b8 01 00 00 00       	mov    eax,0x1
c0017819:	8d 76 00             	lea    esi,[esi+0x0]
c001781c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017822:	c3                   	ret    
c0017823:	90                   	nop

c0017824 <FAT::exists(char const*)>:
c0017824:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001782a:	83 ec 08             	sub    esp,0x8
c001782d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017834:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017838:	50                   	push   eax
c0017839:	e8 c2 8d fe ff       	call   c0000600 <strcpy>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	83 ec 08             	sub    esp,0x8
c0017844:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017848:	50                   	push   eax
c0017849:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017850:	e8 5b f9 ff ff       	call   c00171b0 <FAT::fixFilepath(char*)>
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	83 ec 08             	sub    esp,0x8
c001785b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017862:	50                   	push   eax
c0017863:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017867:	50                   	push   eax
c0017868:	e8 b8 cd fe ff       	call   c0004625 <f_stat>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017877:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001787e:	85 c0                	test   eax,eax
c0017880:	75 06                	jne    c0017888 <FAT::exists(char const*)+0x64>
c0017882:	b0 01                	mov    al,0x1
c0017884:	eb 06                	jmp    c001788c <FAT::exists(char const*)+0x68>
c0017886:	66 90                	xchg   ax,ax
c0017888:	b0 00                	mov    al,0x0
c001788a:	66 90                	xchg   ax,ax
c001788c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017892:	c3                   	ret    
c0017893:	90                   	nop

c0017894 <isoReadDiscSectorHelper>:
c0017894:	83 ec 2c             	sub    esp,0x2c
c0017897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001789b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001789f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00178a4:	83 e8 41             	sub    eax,0x41
c00178a7:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c00178ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b2:	ba 00 00 00 00       	mov    edx,0x0
c00178b7:	83 ec 0c             	sub    esp,0xc
c00178ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178c2:	52                   	push   edx
c00178c3:	50                   	push   eax
c00178c4:	51                   	push   ecx
c00178c5:	e8 64 54 ff ff       	call   c000cd2e <LogicalDisk::read(unsigned long long, int, void*)>
c00178ca:	83 c4 20             	add    esp,0x20
c00178cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00178d6:	74 0c                	je     c00178e4 <isoReadDiscSectorHelper+0x50>
c00178d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178dc:	c1 e0 0b             	shl    eax,0xb
c00178df:	eb 0b                	jmp    c00178ec <isoReadDiscSectorHelper+0x58>
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	b8 00 00 00 00       	mov    eax,0x0
c00178e9:	8d 76 00             	lea    esi,[esi+0x0]
c00178ec:	83 c4 2c             	add    esp,0x2c
c00178ef:	c3                   	ret    

c00178f0 <iso_kprintf>:
c00178f0:	83 ec 0c             	sub    esp,0xc
c00178f3:	83 ec 08             	sub    esp,0x8
c00178f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178fa:	68 c7 f1 01 c0       	push   0xc001f1c7
c00178ff:	e8 0a 2d ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	90                   	nop
c0017908:	83 c4 0c             	add    esp,0xc
c001790b:	c3                   	ret    

c001790c <iso_kprintfd>:
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	83 ec 08             	sub    esp,0x8
c0017912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017916:	68 9b e3 01 c0       	push   0xc001e39b
c001791b:	e8 ee 2c ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017920:	83 c4 10             	add    esp,0x10
c0017923:	90                   	nop
c0017924:	83 c4 0c             	add    esp,0xc
c0017927:	c3                   	ret    

c0017928 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017928:	b8 08 00 00 00       	mov    eax,0x8
c001792d:	c3                   	ret    

c001792e <ISO9660::getName()>:
c001792e:	b8 10 f8 01 c0       	mov    eax,0xc001f810
c0017933:	c3                   	ret    

c0017934 <ISO9660::closeDir(void*)>:
c0017934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017938:	8b 00                	mov    eax,DWORD PTR [eax]
c001793a:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001793d:	90                   	nop

c001793e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001793e:	b8 01 00 00 00       	mov    eax,0x1
c0017943:	c3                   	ret    

c0017944 <ISO9660::unlink(char const*)>:
c0017944:	b8 01 00 00 00       	mov    eax,0x1
c0017949:	c3                   	ret    

c001794a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001794a:	b8 03 00 00 00       	mov    eax,0x3
c001794f:	c3                   	ret    

c0017950 <ISO9660::rename(char const*, char const*)>:
c0017950:	b8 01 00 00 00       	mov    eax,0x1
c0017955:	c3                   	ret    

c0017956 <ISO9660::mkdir(char const*)>:
c0017956:	b8 01 00 00 00       	mov    eax,0x1
c001795b:	c3                   	ret    

c001795c <ISO9660::~ISO9660()>:
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	ba f8 f8 01 c0       	mov    edx,0xc001f8f8
c0017964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017968:	89 10                	mov    DWORD PTR [eax],edx
c001796a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	50                   	push   eax
c0017972:	e8 dd 2f ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	90                   	nop
c001797b:	83 c4 0c             	add    esp,0xc
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <ISO9660::~ISO9660()>:
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001798a:	e8 cd ff ff ff       	call   c001795c <ISO9660::~ISO9660()>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	83 ec 08             	sub    esp,0x8
c0017995:	6a 08                	push   0x8
c0017997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001799b:	e8 78 2b ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	83 c4 0c             	add    esp,0xc
c00179a6:	c3                   	ret    
c00179a7:	90                   	nop

c00179a8 <ISO9660::exists(char const*)>:
c00179a8:	83 ec 18             	sub    esp,0x18
c00179ab:	68 2b f8 01 c0       	push   0xc001f82b
c00179b0:	e8 6e 89 ff ff       	call   c0010323 <KePanic(char const*)>
c00179b5:	31 c0                	xor    eax,eax
c00179b7:	83 c4 1c             	add    esp,0x1c
c00179ba:	c3                   	ret    
c00179bb:	90                   	nop

c00179bc <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179bc:	56                   	push   esi
c00179bd:	53                   	push   ebx
c00179be:	50                   	push   eax
c00179bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00179c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179c7:	85 f6                	test   esi,esi
c00179c9:	74 6b                	je     c0017a36 <ISO9660::open(char const*, void**, FileOpenMode)+0x7a>
c00179cb:	85 db                	test   ebx,ebx
c00179cd:	74 67                	je     c0017a36 <ISO9660::open(char const*, void**, FileOpenMode)+0x7a>
c00179cf:	b8 03 00 00 00       	mov    eax,0x3
c00179d4:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179d9:	75 60                	jne    c0017a3b <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c00179db:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c00179e0:	38 06                	cmp    BYTE PTR [esi],al
c00179e2:	74 1b                	je     c00179ff <ISO9660::open(char const*, void**, FileOpenMode)+0x43>
c00179e4:	84 c0                	test   al,al
c00179e6:	74 10                	je     c00179f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	68 49 f8 01 c0       	push   0xc001f849
c00179f0:	e8 2e 89 ff ff       	call   c0010323 <KePanic(char const*)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	8a 06                	mov    al,BYTE PTR [esi]
c00179fa:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c00179ff:	83 ec 0c             	sub    esp,0xc
c0017a02:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017a09:	83 c6 03             	add    esi,0x3
c0017a0c:	50                   	push   eax
c0017a0d:	e8 49 ee fe ff       	call   c000685b <init_percd>
c0017a12:	59                   	pop    ecx
c0017a13:	58                   	pop    eax
c0017a14:	6a 00                	push   0x0
c0017a16:	56                   	push   esi
c0017a17:	e8 07 e9 fe ff       	call   c0006323 <iso_open>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	89 c2                	mov    edx,eax
c0017a21:	b8 01 00 00 00       	mov    eax,0x1
c0017a26:	83 fa ff             	cmp    edx,0xffffffff
c0017a29:	74 10                	je     c0017a3b <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c0017a2b:	83 c2 32             	add    edx,0x32
c0017a2e:	31 c0                	xor    eax,eax
c0017a30:	01 d2                	add    edx,edx
c0017a32:	89 13                	mov    DWORD PTR [ebx],edx
c0017a34:	eb 05                	jmp    c0017a3b <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c0017a36:	b8 04 00 00 00       	mov    eax,0x4
c0017a3b:	5a                   	pop    edx
c0017a3c:	5b                   	pop    ebx
c0017a3d:	5e                   	pop    esi
c0017a3e:	c3                   	ret    
c0017a3f:	90                   	nop

c0017a40 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a40:	53                   	push   ebx
c0017a41:	83 ec 08             	sub    esp,0x8
c0017a44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a4c:	85 c0                	test   eax,eax
c0017a4e:	74 2d                	je     c0017a7d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a50:	85 db                	test   ebx,ebx
c0017a52:	74 29                	je     c0017a7d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a54:	b9 02 00 00 00       	mov    ecx,0x2
c0017a59:	52                   	push   edx
c0017a5a:	99                   	cdq    
c0017a5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a5f:	f7 f9                	idiv   ecx
c0017a61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a65:	83 e8 32             	sub    eax,0x32
c0017a68:	50                   	push   eax
c0017a69:	e8 5d e9 fe ff       	call   c00063cb <iso_read>
c0017a6e:	83 c4 10             	add    esp,0x10
c0017a71:	89 03                	mov    DWORD PTR [ebx],eax
c0017a73:	09 d0                	or     eax,edx
c0017a75:	0f 94 c0             	sete   al
c0017a78:	0f b6 c0             	movzx  eax,al
c0017a7b:	eb 05                	jmp    c0017a82 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0017a7d:	b8 04 00 00 00       	mov    eax,0x4
c0017a82:	83 c4 08             	add    esp,0x8
c0017a85:	5b                   	pop    ebx
c0017a86:	c3                   	ret    
c0017a87:	90                   	nop

c0017a88 <ISO9660::seek(void*, unsigned long long)>:
c0017a88:	57                   	push   edi
c0017a89:	56                   	push   esi
c0017a8a:	b8 04 00 00 00       	mov    eax,0x4
c0017a8f:	51                   	push   ecx
c0017a90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017a9c:	85 d2                	test   edx,edx
c0017a9e:	74 26                	je     c0017ac6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0017aa0:	6a 00                	push   0x0
c0017aa2:	b9 02 00 00 00       	mov    ecx,0x2
c0017aa7:	57                   	push   edi
c0017aa8:	89 d0                	mov    eax,edx
c0017aaa:	56                   	push   esi
c0017aab:	99                   	cdq    
c0017aac:	f7 f9                	idiv   ecx
c0017aae:	83 e8 32             	sub    eax,0x32
c0017ab1:	50                   	push   eax
c0017ab2:	e8 2a ea fe ff       	call   c00064e1 <iso_seek>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	31 f0                	xor    eax,esi
c0017abc:	31 fa                	xor    edx,edi
c0017abe:	09 d0                	or     eax,edx
c0017ac0:	0f 95 c0             	setne  al
c0017ac3:	0f b6 c0             	movzx  eax,al
c0017ac6:	5a                   	pop    edx
c0017ac7:	5e                   	pop    esi
c0017ac8:	5f                   	pop    edi
c0017ac9:	c3                   	ret    

c0017aca <ISO9660::tell(void*, unsigned long long*)>:
c0017aca:	53                   	push   ebx
c0017acb:	83 ec 08             	sub    esp,0x8
c0017ace:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ad2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ad6:	85 c0                	test   eax,eax
c0017ad8:	74 24                	je     c0017afe <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ada:	85 db                	test   ebx,ebx
c0017adc:	74 20                	je     c0017afe <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	b9 02 00 00 00       	mov    ecx,0x2
c0017ae6:	99                   	cdq    
c0017ae7:	f7 f9                	idiv   ecx
c0017ae9:	83 e8 32             	sub    eax,0x32
c0017aec:	50                   	push   eax
c0017aed:	e8 73 ea fe ff       	call   c0006565 <iso_tell>
c0017af2:	83 c4 10             	add    esp,0x10
c0017af5:	89 03                	mov    DWORD PTR [ebx],eax
c0017af7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017afa:	31 c0                	xor    eax,eax
c0017afc:	eb 05                	jmp    c0017b03 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0017afe:	b8 04 00 00 00       	mov    eax,0x4
c0017b03:	83 c4 08             	add    esp,0x8
c0017b06:	5b                   	pop    ebx
c0017b07:	c3                   	ret    

c0017b08 <ISO9660::openDir(char const*, void**)>:
c0017b08:	57                   	push   edi
c0017b09:	56                   	push   esi
c0017b0a:	53                   	push   ebx
c0017b0b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017b13:	85 db                	test   ebx,ebx
c0017b15:	0f 84 99 00 00 00    	je     c0017bb4 <ISO9660::openDir(char const*, void**)+0xac>
c0017b1b:	85 ff                	test   edi,edi
c0017b1d:	0f 84 91 00 00 00    	je     c0017bb4 <ISO9660::openDir(char const*, void**)+0xac>
c0017b23:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c0017b28:	38 03                	cmp    BYTE PTR [ebx],al
c0017b2a:	74 1b                	je     c0017b47 <ISO9660::openDir(char const*, void**)+0x3f>
c0017b2c:	84 c0                	test   al,al
c0017b2e:	74 10                	je     c0017b40 <ISO9660::openDir(char const*, void**)+0x38>
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	68 49 f8 01 c0       	push   0xc001f849
c0017b38:	e8 e6 87 ff ff       	call   c0010323 <KePanic(char const*)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b42:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	68 59 f8 01 c0       	push   0xc001f859
c0017b4f:	e8 ba 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017b54:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b57:	ff 34 85 20 54 02 c0 	push   DWORD PTR [eax*4-0x3ffdabe0]
c0017b5e:	50                   	push   eax
c0017b5f:	53                   	push   ebx
c0017b60:	68 64 f8 01 c0       	push   0xc001f864
c0017b65:	e8 a4 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017b6a:	83 c4 18             	add    esp,0x18
c0017b6d:	8d 43 03             	lea    eax,[ebx+0x3]
c0017b70:	6a 01                	push   0x1
c0017b72:	50                   	push   eax
c0017b73:	e8 ab e7 fe ff       	call   c0006323 <iso_open>
c0017b78:	83 c4 10             	add    esp,0x10
c0017b7b:	89 c6                	mov    esi,eax
c0017b7d:	83 f8 ff             	cmp    eax,0xffffffff
c0017b80:	75 17                	jne    c0017b99 <ISO9660::openDir(char const*, void**)+0x91>
c0017b82:	52                   	push   edx
c0017b83:	52                   	push   edx
c0017b84:	53                   	push   ebx
c0017b85:	68 78 f8 01 c0       	push   0xc001f878
c0017b8a:	e8 7f 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	b8 01 00 00 00       	mov    eax,0x1
c0017b97:	eb 20                	jmp    c0017bb9 <ISO9660::openDir(char const*, void**)+0xb1>
c0017b99:	01 f6                	add    esi,esi
c0017b9b:	50                   	push   eax
c0017b9c:	83 c6 65             	add    esi,0x65
c0017b9f:	50                   	push   eax
c0017ba0:	53                   	push   ebx
c0017ba1:	68 8e f8 01 c0       	push   0xc001f88e
c0017ba6:	e8 63 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017bab:	89 37                	mov    DWORD PTR [edi],esi
c0017bad:	83 c4 10             	add    esp,0x10
c0017bb0:	31 c0                	xor    eax,eax
c0017bb2:	eb 05                	jmp    c0017bb9 <ISO9660::openDir(char const*, void**)+0xb1>
c0017bb4:	b8 04 00 00 00       	mov    eax,0x4
c0017bb9:	5b                   	pop    ebx
c0017bba:	5e                   	pop    esi
c0017bbb:	5f                   	pop    edi
c0017bbc:	c3                   	ret    
c0017bbd:	90                   	nop

c0017bbe <ISO9660::stat(void*, unsigned long long*)>:
c0017bbe:	53                   	push   ebx
c0017bbf:	83 ec 14             	sub    esp,0x14
c0017bc2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bc6:	68 a4 f8 01 c0       	push   0xc001f8a4
c0017bcb:	e8 3e 2a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017bd8:	74 2c                	je     c0017c06 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017bda:	85 db                	test   ebx,ebx
c0017bdc:	74 28                	je     c0017c06 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017bde:	83 ec 0c             	sub    esp,0xc
c0017be1:	b9 02 00 00 00       	mov    ecx,0x2
c0017be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bea:	99                   	cdq    
c0017beb:	f7 f9                	idiv   ecx
c0017bed:	83 e8 32             	sub    eax,0x32
c0017bf0:	50                   	push   eax
c0017bf1:	e8 a0 e9 fe ff       	call   c0006596 <iso_total>
c0017bf6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017bfd:	89 03                	mov    DWORD PTR [ebx],eax
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	31 c0                	xor    eax,eax
c0017c04:	eb 05                	jmp    c0017c0b <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0017c06:	b8 04 00 00 00       	mov    eax,0x4
c0017c0b:	83 c4 08             	add    esp,0x8
c0017c0e:	5b                   	pop    ebx
c0017c0f:	c3                   	ret    

c0017c10 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c10:	55                   	push   ebp
c0017c11:	57                   	push   edi
c0017c12:	56                   	push   esi
c0017c13:	53                   	push   ebx
c0017c14:	83 ec 18             	sub    esp,0x18
c0017c17:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0017c1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017c1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c23:	68 ac f8 01 c0       	push   0xc001f8ac
c0017c28:	e8 e1 29 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	85 f6                	test   esi,esi
c0017c32:	0f 94 c2             	sete   dl
c0017c35:	85 ff                	test   edi,edi
c0017c37:	0f 94 c0             	sete   al
c0017c3a:	08 c2                	or     dl,al
c0017c3c:	75 69                	jne    c0017ca7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x97>
c0017c3e:	85 db                	test   ebx,ebx
c0017c40:	74 65                	je     c0017ca7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x97>
c0017c42:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017c45:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0017c4b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0017c52:	a0 20 63 02 c0       	mov    al,ds:0xc0026320
c0017c57:	38 03                	cmp    BYTE PTR [ebx],al
c0017c59:	74 1b                	je     c0017c76 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x66>
c0017c5b:	84 c0                	test   al,al
c0017c5d:	74 10                	je     c0017c6f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x5f>
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	68 49 f8 01 c0       	push   0xc001f849
c0017c67:	e8 b7 86 ff ff       	call   c0010323 <KePanic(char const*)>
c0017c6c:	83 c4 10             	add    esp,0x10
c0017c6f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c71:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017c76:	83 c3 03             	add    ebx,0x3
c0017c79:	52                   	push   edx
c0017c7a:	52                   	push   edx
c0017c7b:	6a 00                	push   0x0
c0017c7d:	53                   	push   ebx
c0017c7e:	e8 a0 e6 fe ff       	call   c0006323 <iso_open>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	89 c5                	mov    ebp,eax
c0017c88:	83 f8 ff             	cmp    eax,0xffffffff
c0017c8b:	75 21                	jne    c0017cae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x9e>
c0017c8d:	50                   	push   eax
c0017c8e:	50                   	push   eax
c0017c8f:	6a 01                	push   0x1
c0017c91:	53                   	push   ebx
c0017c92:	e8 8c e6 fe ff       	call   c0006323 <iso_open>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	ba 02 00 00 00       	mov    edx,0x2
c0017c9f:	40                   	inc    eax
c0017ca0:	74 2b                	je     c0017ccd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbd>
c0017ca2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0017ca5:	eb 24                	jmp    c0017ccb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbb>
c0017ca7:	ba 04 00 00 00       	mov    edx,0x4
c0017cac:	eb 1f                	jmp    c0017ccd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbd>
c0017cae:	83 ec 0c             	sub    esp,0xc
c0017cb1:	50                   	push   eax
c0017cb2:	e8 df e8 fe ff       	call   c0006596 <iso_total>
c0017cb7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0017cbe:	89 07                	mov    DWORD PTR [edi],eax
c0017cc0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cc3:	e8 e5 e6 fe ff       	call   c00063ad <iso_close>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	31 d2                	xor    edx,edx
c0017ccd:	83 c4 0c             	add    esp,0xc
c0017cd0:	89 d0                	mov    eax,edx
c0017cd2:	5b                   	pop    ebx
c0017cd3:	5e                   	pop    esi
c0017cd4:	5f                   	pop    edi
c0017cd5:	5d                   	pop    ebp
c0017cd6:	c3                   	ret    
c0017cd7:	90                   	nop

c0017cd8 <ISO9660::close(void*)>:
c0017cd8:	83 ec 0c             	sub    esp,0xc
c0017cdb:	b8 04 00 00 00       	mov    eax,0x4
c0017ce0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ce4:	85 d2                	test   edx,edx
c0017ce6:	74 1b                	je     c0017d03 <ISO9660::close(void*)+0x2b>
c0017ce8:	83 ec 0c             	sub    esp,0xc
c0017ceb:	b9 02 00 00 00       	mov    ecx,0x2
c0017cf0:	89 d0                	mov    eax,edx
c0017cf2:	99                   	cdq    
c0017cf3:	f7 f9                	idiv   ecx
c0017cf5:	83 e8 32             	sub    eax,0x32
c0017cf8:	50                   	push   eax
c0017cf9:	e8 af e6 fe ff       	call   c00063ad <iso_close>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	31 c0                	xor    eax,eax
c0017d03:	83 c4 0c             	add    esp,0xc
c0017d06:	c3                   	ret    
c0017d07:	90                   	nop

c0017d08 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d08:	55                   	push   ebp
c0017d09:	57                   	push   edi
c0017d0a:	56                   	push   esi
c0017d0b:	53                   	push   ebx
c0017d0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d12:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0017d19:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d20:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0017d27:	85 db                	test   ebx,ebx
c0017d29:	0f 84 ce 00 00 00    	je     c0017dfd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017d2f:	85 ed                	test   ebp,ebp
c0017d31:	0f 84 c6 00 00 00    	je     c0017dfd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xf5>
c0017d37:	83 ec 0c             	sub    esp,0xc
c0017d3a:	68 b4 f8 01 c0       	push   0xc001f8b4
c0017d3f:	e8 ca 28 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017d44:	b9 02 00 00 00       	mov    ecx,0x2
c0017d49:	89 d8                	mov    eax,ebx
c0017d4b:	99                   	cdq    
c0017d4c:	f7 f9                	idiv   ecx
c0017d4e:	83 e8 32             	sub    eax,0x32
c0017d51:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d54:	e8 8e e8 fe ff       	call   c00065e7 <iso_readdir>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	89 c6                	mov    esi,eax
c0017d5e:	85 c0                	test   eax,eax
c0017d60:	75 27                	jne    c0017d89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x81>
c0017d62:	83 ec 0c             	sub    esp,0xc
c0017d65:	68 bf f8 01 c0       	push   0xc001f8bf
c0017d6a:	e8 9f 28 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017d6f:	83 c4 0c             	add    esp,0xc
c0017d72:	68 10 01 00 00       	push   0x110
c0017d77:	6a 00                	push   0x0
c0017d79:	57                   	push   edi
c0017d7a:	e8 51 87 fe ff       	call   c00004d0 <memset>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	b8 01 00 00 00       	mov    eax,0x1
c0017d87:	eb 79                	jmp    c0017e02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017d89:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d8f:	8d 58 08             	lea    ebx,[eax+0x8]
c0017d92:	83 ec 0c             	sub    esp,0xc
c0017d95:	53                   	push   ebx
c0017d96:	e8 a5 87 fe ff       	call   c0000540 <strlen>
c0017d9b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017da3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017dae:	75 0a                	jne    c0017dba <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb2>
c0017db0:	b8 02 00 00 00       	mov    eax,0x2
c0017db5:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017db8:	74 05                	je     c0017dbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0xb7>
c0017dba:	b8 01 00 00 00       	mov    eax,0x1
c0017dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dc3:	50                   	push   eax
c0017dc4:	50                   	push   eax
c0017dc5:	53                   	push   ebx
c0017dc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dce:	50                   	push   eax
c0017dcf:	e8 2c 88 fe ff       	call   c0000600 <strcpy>
c0017dd4:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017ddb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ddd:	83 c4 0c             	add    esp,0xc
c0017de0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0017de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017deb:	53                   	push   ebx
c0017dec:	68 d2 f8 01 c0       	push   0xc001f8d2
c0017df1:	e8 18 28 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0017df6:	83 c4 10             	add    esp,0x10
c0017df9:	31 c0                	xor    eax,eax
c0017dfb:	eb 05                	jmp    c0017e02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xfa>
c0017dfd:	b8 04 00 00 00       	mov    eax,0x4
c0017e02:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e08:	5b                   	pop    ebx
c0017e09:	5e                   	pop    esi
c0017e0a:	5f                   	pop    edi
c0017e0b:	5d                   	pop    ebp
c0017e0c:	c3                   	ret    

c0017e0d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e0d:	57                   	push   edi
c0017e0e:	56                   	push   esi
c0017e0f:	53                   	push   ebx
c0017e10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e14:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e18:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e1c:	39 35 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,esi
c0017e22:	75 08                	jne    c0017e2c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e24:	38 1d f0 02 02 c0    	cmp    BYTE PTR ds:0xc00202f0,bl
c0017e2a:	74 4a                	je     c0017e76 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e2c:	83 ec 0c             	sub    esp,0xc
c0017e2f:	31 d2                	xor    edx,edx
c0017e31:	68 40 63 02 c0       	push   0xc0026340
c0017e36:	0f be c3             	movsx  eax,bl
c0017e39:	6a 01                	push   0x1
c0017e3b:	52                   	push   edx
c0017e3c:	56                   	push   esi
c0017e3d:	ff 34 85 1c 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdace4]
c0017e44:	e8 e5 4e ff ff       	call   c000cd2e <LogicalDisk::read(unsigned long long, int, void*)>
c0017e49:	83 c4 20             	add    esp,0x20
c0017e4c:	85 c0                	test   eax,eax
c0017e4e:	75 0e                	jne    c0017e5e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e50:	89 35 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,esi
c0017e56:	88 1d f0 02 02 c0    	mov    BYTE PTR ds:0xc00202f0,bl
c0017e5c:	eb 18                	jmp    c0017e76 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e5e:	50                   	push   eax
c0017e5f:	68 00 08 00 00       	push   0x800
c0017e64:	6a 00                	push   0x0
c0017e66:	57                   	push   edi
c0017e67:	e8 64 86 fe ff       	call   c00004d0 <memset>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	b8 01 00 00 00       	mov    eax,0x1
c0017e74:	eb 0e                	jmp    c0017e84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e76:	be 40 63 02 c0       	mov    esi,0xc0026340
c0017e7b:	b9 00 08 00 00       	mov    ecx,0x800
c0017e80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e82:	31 c0                	xor    eax,eax
c0017e84:	5b                   	pop    ebx
c0017e85:	5e                   	pop    esi
c0017e86:	5f                   	pop    edi
c0017e87:	c3                   	ret    

c0017e88 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e88:	53                   	push   ebx
c0017e89:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e8f:	c7 05 24 63 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0026324,0xdeadbeef
c0017e99:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ea0:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ea3:	0f be db             	movsx  ebx,bl
c0017ea6:	53                   	push   ebx
c0017ea7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017eab:	50                   	push   eax
c0017eac:	6a 10                	push   0x10
c0017eae:	e8 5a ff ff ff       	call   c0017e0d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017eb3:	83 c4 10             	add    esp,0x10
c0017eb6:	31 d2                	xor    edx,edx
c0017eb8:	85 c0                	test   eax,eax
c0017eba:	75 33                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ebc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ec1:	75 2c                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ec8:	75 25                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eca:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017ecf:	75 1e                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ed1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ed6:	75 17                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ed8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017edd:	75 10                	jne    c0017eef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	53                   	push   ebx
c0017ee3:	e8 73 e9 fe ff       	call   c000685b <init_percd>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	40                   	inc    eax
c0017eec:	0f 95 c2             	setne  dl
c0017eef:	88 d0                	mov    al,dl
c0017ef1:	81 c4 08 08 00 00    	add    esp,0x808
c0017ef7:	5b                   	pop    ebx
c0017ef8:	c3                   	ret    
c0017ef9:	90                   	nop

c0017efa <ISO9660::ISO9660()>:
c0017efa:	83 ec 0c             	sub    esp,0xc
c0017efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f01:	83 ec 0c             	sub    esp,0xc
c0017f04:	50                   	push   eax
c0017f05:	e8 26 2a ff ff       	call   c000a930 <Filesystem::Filesystem()>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	ba f8 f8 01 c0       	mov    edx,0xc001f8f8
c0017f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f16:	89 10                	mov    DWORD PTR [eax],edx
c0017f18:	e8 50 ea fe ff       	call   c000696d <fs_iso9660_init>
c0017f1d:	90                   	nop
c0017f1e:	83 c4 0c             	add    esp,0xc
c0017f21:	c3                   	ret    

c0017f22 <SoundCard::beginPlayback()>:
c0017f22:	c7 44 24 04 58 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f958
c0017f2a:	e9 f4 83 ff ff       	jmp    c0010323 <KePanic(char const*)>
c0017f2f:	90                   	nop

c0017f30 <SoundCard::stopPlayback()>:
c0017f30:	c7 44 24 04 58 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f958
c0017f38:	e9 e6 83 ff ff       	jmp    c0010323 <KePanic(char const*)>
c0017f3d:	90                   	nop

c0017f3e <SoundCard::SoundCard(char const*)>:
c0017f3e:	83 ec 1c             	sub    esp,0x1c
c0017f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f45:	83 ec 08             	sub    esp,0x8
c0017f48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f4c:	50                   	push   eax
c0017f4d:	e8 92 3c ff ff       	call   c000bbe4 <Device::Device(char const*)>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	ba a4 f9 01 c0       	mov    edx,0xc001f9a4
c0017f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5e:	89 10                	mov    DWORD PTR [eax],edx
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f99:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fa3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fab:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fb0:	7f 19                	jg     c0017fcb <SoundCard::SoundCard(char const*)+0x8d>
c0017fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fba:	83 c2 54             	add    edx,0x54
c0017fbd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fc9:	eb e0                	jmp    c0017fab <SoundCard::SoundCard(char const*)+0x6d>
c0017fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcf:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fd6:	90                   	nop
c0017fd7:	83 c4 1c             	add    esp,0x1c
c0017fda:	c3                   	ret    
c0017fdb:	90                   	nop

c0017fdc <SoundCard::~SoundCard()>:
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	ba a4 f9 01 c0       	mov    edx,0xc001f9a4
c0017fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe8:	89 10                	mov    DWORD PTR [eax],edx
c0017fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fee:	83 ec 0c             	sub    esp,0xc
c0017ff1:	50                   	push   eax
c0017ff2:	e8 57 39 ff ff       	call   c000b94e <Device::~Device()>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	90                   	nop
c0017ffb:	83 c4 0c             	add    esp,0xc
c0017ffe:	c3                   	ret    
c0017fff:	90                   	nop

c0018000 <SoundCard::~SoundCard()>:
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	83 ec 0c             	sub    esp,0xc
c0018006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001800a:	e8 cd ff ff ff       	call   c0017fdc <SoundCard::~SoundCard()>
c001800f:	83 c4 10             	add    esp,0x10
c0018012:	83 ec 08             	sub    esp,0x8
c0018015:	68 e8 01 00 00       	push   0x1e8
c001801a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001801e:	e8 f5 24 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	83 c4 0c             	add    esp,0xc
c0018029:	c3                   	ret    

c001802a <SoundCard::configureRates(int, int, int)>:
c001802a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001802e:	31 c0                	xor    eax,eax
c0018030:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018037:	75 20                	jne    c0018059 <SoundCard::configureRates(int, int, int)+0x2f>
c0018039:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001803d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018047:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001804d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018051:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018057:	b0 01                	mov    al,0x1
c0018059:	c3                   	ret    

c001805a <SoundCard::getSamples16(int, short*)>:
c001805a:	55                   	push   ebp
c001805b:	57                   	push   edi
c001805c:	31 ff                	xor    edi,edi
c001805e:	56                   	push   esi
c001805f:	53                   	push   ebx
c0018060:	31 db                	xor    ebx,ebx
c0018062:	83 ec 10             	sub    esp,0x10
c0018065:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018069:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001806d:	8d 04 36             	lea    eax,[esi+esi*1]
c0018070:	50                   	push   eax
c0018071:	6a 00                	push   0x0
c0018073:	55                   	push   ebp
c0018074:	e8 57 84 fe ff       	call   c00004d0 <memset>
c0018079:	83 c4 10             	add    esp,0x10
c001807c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018080:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018087:	85 c0                	test   eax,eax
c0018089:	74 1b                	je     c00180a6 <SoundCard::getSamples16(int, short*)+0x4c>
c001808b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001808f:	75 15                	jne    c00180a6 <SoundCard::getSamples16(int, short*)+0x4c>
c0018091:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018095:	55                   	push   ebp
c0018096:	56                   	push   esi
c0018097:	50                   	push   eax
c0018098:	e8 ef 02 00 00       	call   c001838c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	39 c7                	cmp    edi,eax
c00180a2:	7d 02                	jge    c00180a6 <SoundCard::getSamples16(int, short*)+0x4c>
c00180a4:	89 c7                	mov    edi,eax
c00180a6:	43                   	inc    ebx
c00180a7:	83 fb 20             	cmp    ebx,0x20
c00180aa:	75 d0                	jne    c001807c <SoundCard::getSamples16(int, short*)+0x22>
c00180ac:	83 c4 0c             	add    esp,0xc
c00180af:	89 f8                	mov    eax,edi
c00180b1:	5b                   	pop    ebx
c00180b2:	5e                   	pop    esi
c00180b3:	5f                   	pop    edi
c00180b4:	5d                   	pop    ebp
c00180b5:	c3                   	ret    

c00180b6 <SoundCard::getSamples32(int, int*)>:
c00180b6:	55                   	push   ebp
c00180b7:	57                   	push   edi
c00180b8:	31 ff                	xor    edi,edi
c00180ba:	56                   	push   esi
c00180bb:	31 f6                	xor    esi,esi
c00180bd:	53                   	push   ebx
c00180be:	83 ec 10             	sub    esp,0x10
c00180c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180c9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180cd:	c1 e0 02             	shl    eax,0x2
c00180d0:	50                   	push   eax
c00180d1:	6a 00                	push   0x0
c00180d3:	55                   	push   ebp
c00180d4:	e8 f7 83 fe ff       	call   c00004d0 <memset>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180e3:	85 c0                	test   eax,eax
c00180e5:	74 1b                	je     c0018102 <SoundCard::getSamples32(int, int*)+0x4c>
c00180e7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180eb:	75 15                	jne    c0018102 <SoundCard::getSamples32(int, int*)+0x4c>
c00180ed:	53                   	push   ebx
c00180ee:	55                   	push   ebp
c00180ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180f3:	50                   	push   eax
c00180f4:	e8 57 03 00 00       	call   c0018450 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180f9:	83 c4 10             	add    esp,0x10
c00180fc:	39 c6                	cmp    esi,eax
c00180fe:	7d 02                	jge    c0018102 <SoundCard::getSamples32(int, int*)+0x4c>
c0018100:	89 c6                	mov    esi,eax
c0018102:	47                   	inc    edi
c0018103:	83 ff 20             	cmp    edi,0x20
c0018106:	75 d4                	jne    c00180dc <SoundCard::getSamples32(int, int*)+0x26>
c0018108:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001810e:	85 f6                	test   esi,esi
c0018110:	75 0f                	jne    c0018121 <SoundCard::getSamples32(int, int*)+0x6b>
c0018112:	84 c0                	test   al,al
c0018114:	74 1b                	je     c0018131 <SoundCard::getSamples32(int, int*)+0x7b>
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	8b 03                	mov    eax,DWORD PTR [ebx]
c001811b:	53                   	push   ebx
c001811c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001811f:	eb 0d                	jmp    c001812e <SoundCard::getSamples32(int, int*)+0x78>
c0018121:	84 c0                	test   al,al
c0018123:	75 0c                	jne    c0018131 <SoundCard::getSamples32(int, int*)+0x7b>
c0018125:	83 ec 0c             	sub    esp,0xc
c0018128:	8b 03                	mov    eax,DWORD PTR [ebx]
c001812a:	53                   	push   ebx
c001812b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001812e:	83 c4 10             	add    esp,0x10
c0018131:	83 c4 0c             	add    esp,0xc
c0018134:	89 f0                	mov    eax,esi
c0018136:	5b                   	pop    ebx
c0018137:	5e                   	pop    esi
c0018138:	5f                   	pop    edi
c0018139:	5d                   	pop    ebp
c001813a:	c3                   	ret    
c001813b:	90                   	nop

c001813c <SoundCard::addChannel(SoundPort*)>:
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	31 c0                	xor    eax,eax
c0018141:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018145:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001814d:	74 1b                	je     c001816a <SoundCard::addChannel(SoundPort*)+0x2e>
c001814f:	40                   	inc    eax
c0018150:	83 f8 20             	cmp    eax,0x20
c0018153:	75 f0                	jne    c0018145 <SoundCard::addChannel(SoundPort*)+0x9>
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	68 7d f9 01 c0       	push   0xc001f97d
c001815d:	e8 c1 81 ff ff       	call   c0010323 <KePanic(char const*)>
c0018162:	83 c4 10             	add    esp,0x10
c0018165:	83 c8 ff             	or     eax,0xffffffff
c0018168:	eb 0b                	jmp    c0018175 <SoundCard::addChannel(SoundPort*)+0x39>
c001816a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001816e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018175:	83 c4 0c             	add    esp,0xc
c0018178:	c3                   	ret    
c0018179:	90                   	nop

c001817a <SoundCard::removeChannel(int)>:
c001817a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001817e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018182:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001818d:	c3                   	ret    
c001818e:	66 90                	xchg   ax,ax

c0018190 <SoundPort::SoundPort(int, int, int, int)>:
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018197:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181ae:	89 10                	mov    DWORD PTR [eax],edx
c00181b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181c6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181cb:	75 13                	jne    c00181e0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d3:	05 a0 0f 00 00       	add    eax,0xfa0
c00181d8:	01 c0                	add    eax,eax
c00181da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181de:	66 90                	xchg   ax,ax
c00181e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ef:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181fd:	c1 e0 02             	shl    eax,0x2
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	50                   	push   eax
c0018204:	e8 6c f6 fe ff       	call   c0007875 <malloc>
c0018209:	83 c4 10             	add    esp,0x10
c001820c:	89 c2                	mov    edx,eax
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018215:	90                   	nop
c0018216:	83 c4 0c             	add    esp,0xc
c0018219:	c3                   	ret    
c001821a:	66 90                	xchg   ax,ax

c001821c <SoundPort::~SoundPort()>:
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018223:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018226:	85 c0                	test   eax,eax
c0018228:	74 1e                	je     c0018248 <SoundPort::~SoundPort()+0x2c>
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018231:	83 ec 0c             	sub    esp,0xc
c0018234:	50                   	push   eax
c0018235:	e8 4b f6 fe ff       	call   c0007885 <free>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018241:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018248:	90                   	nop
c0018249:	83 c4 0c             	add    esp,0xc
c001824c:	c3                   	ret    
c001824d:	90                   	nop
c001824e:	66 90                	xchg   ax,ax

c0018250 <SoundPort::unpause()>:
c0018250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018254:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018258:	c3                   	ret    
c0018259:	90                   	nop
c001825a:	66 90                	xchg   ax,ax

c001825c <SoundPort::pause()>:
c001825c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018260:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018264:	c3                   	ret    
c0018265:	90                   	nop
c0018266:	66 90                	xchg   ax,ax

c0018268 <SoundPort::getBufferUsed()>:
c0018268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001826c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001826f:	c3                   	ret    

c0018270 <SoundPort::getBufferSize()>:
c0018270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018274:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018277:	c3                   	ret    

c0018278 <SoundPort::buffer16(short*, int)>:
c0018278:	55                   	push   ebp
c0018279:	57                   	push   edi
c001827a:	56                   	push   esi
c001827b:	53                   	push   ebx
c001827c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018280:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018284:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018287:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001828a:	74 68                	je     c00182f4 <SoundPort::buffer16(short*, int)+0x7c>
c001828c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018290:	85 c9                	test   ecx,ecx
c0018292:	7e 60                	jle    c00182f4 <SoundPort::buffer16(short*, int)+0x7c>
c0018294:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018298:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001829b:	c1 e1 0f             	shl    ecx,0xf
c001829e:	8d 70 01             	lea    esi,[eax+0x1]
c00182a1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182a4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182a7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ad:	74 4d                	je     c00182fc <SoundPort::buffer16(short*, int)+0x84>
c00182af:	31 f6                	xor    esi,esi
c00182b1:	eb 21                	jmp    c00182d4 <SoundPort::buffer16(short*, int)+0x5c>
c00182b3:	90                   	nop
c00182b4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182b9:	8d 79 01             	lea    edi,[ecx+0x1]
c00182bc:	c1 e3 0f             	shl    ebx,0xf
c00182bf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182c2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182c5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ce:	74 1c                	je     c00182ec <SoundPort::buffer16(short*, int)+0x74>
c00182d0:	89 c6                	mov    esi,eax
c00182d2:	66 90                	xchg   ax,ax
c00182d4:	8d 46 01             	lea    eax,[esi+0x1]
c00182d7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182db:	75 d7                	jne    c00182b4 <SoundPort::buffer16(short*, int)+0x3c>
c00182dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182e1:	8d 76 00             	lea    esi,[esi+0x0]
c00182e4:	5b                   	pop    ebx
c00182e5:	5e                   	pop    esi
c00182e6:	5f                   	pop    edi
c00182e7:	5d                   	pop    ebp
c00182e8:	c3                   	ret    
c00182e9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ec:	5b                   	pop    ebx
c00182ed:	8d 46 02             	lea    eax,[esi+0x2]
c00182f0:	5e                   	pop    esi
c00182f1:	5f                   	pop    edi
c00182f2:	5d                   	pop    ebp
c00182f3:	c3                   	ret    
c00182f4:	5b                   	pop    ebx
c00182f5:	31 c0                	xor    eax,eax
c00182f7:	5e                   	pop    esi
c00182f8:	5f                   	pop    edi
c00182f9:	5d                   	pop    ebp
c00182fa:	c3                   	ret    
c00182fb:	90                   	nop
c00182fc:	b8 01 00 00 00       	mov    eax,0x1
c0018301:	eb e1                	jmp    c00182e4 <SoundPort::buffer16(short*, int)+0x6c>
c0018303:	90                   	nop

c0018304 <SoundPort::buffer32(int*, int)>:
c0018304:	55                   	push   ebp
c0018305:	57                   	push   edi
c0018306:	56                   	push   esi
c0018307:	53                   	push   ebx
c0018308:	51                   	push   ecx
c0018309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018311:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018314:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018318:	89 04 24             	mov    DWORD PTR [esp],eax
c001831b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001831e:	74 5c                	je     c001837c <SoundPort::buffer32(int*, int)+0x78>
c0018320:	85 c0                	test   eax,eax
c0018322:	7e 58                	jle    c001837c <SoundPort::buffer32(int*, int)+0x78>
c0018324:	8d 71 01             	lea    esi,[ecx+0x1]
c0018327:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001832a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001832d:	8b 37                	mov    esi,DWORD PTR [edi]
c001832f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018332:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018335:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018338:	74 4a                	je     c0018384 <SoundPort::buffer32(int*, int)+0x80>
c001833a:	31 f6                	xor    esi,esi
c001833c:	eb 1e                	jmp    c001835c <SoundPort::buffer32(int*, int)+0x58>
c001833e:	66 90                	xchg   ax,ax
c0018340:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018343:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018346:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018349:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001834c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018350:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018353:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018356:	74 18                	je     c0018370 <SoundPort::buffer32(int*, int)+0x6c>
c0018358:	89 de                	mov    esi,ebx
c001835a:	66 90                	xchg   ax,ax
c001835c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001835f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018362:	75 dc                	jne    c0018340 <SoundPort::buffer32(int*, int)+0x3c>
c0018364:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018367:	90                   	nop
c0018368:	5a                   	pop    edx
c0018369:	5b                   	pop    ebx
c001836a:	5e                   	pop    esi
c001836b:	5f                   	pop    edi
c001836c:	5d                   	pop    ebp
c001836d:	c3                   	ret    
c001836e:	66 90                	xchg   ax,ax
c0018370:	5a                   	pop    edx
c0018371:	8d 46 02             	lea    eax,[esi+0x2]
c0018374:	5b                   	pop    ebx
c0018375:	5e                   	pop    esi
c0018376:	5f                   	pop    edi
c0018377:	5d                   	pop    ebp
c0018378:	c3                   	ret    
c0018379:	8d 76 00             	lea    esi,[esi+0x0]
c001837c:	5a                   	pop    edx
c001837d:	31 c0                	xor    eax,eax
c001837f:	5b                   	pop    ebx
c0018380:	5e                   	pop    esi
c0018381:	5f                   	pop    edi
c0018382:	5d                   	pop    ebp
c0018383:	c3                   	ret    
c0018384:	b8 01 00 00 00       	mov    eax,0x1
c0018389:	eb dd                	jmp    c0018368 <SoundPort::buffer32(int*, int)+0x64>
c001838b:	90                   	nop

c001838c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001838c:	57                   	push   edi
c001838d:	56                   	push   esi
c001838e:	53                   	push   ebx
c001838f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018393:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018397:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001839d:	39 03                	cmp    DWORD PTR [ebx],eax
c001839f:	74 13                	je     c00183b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	68 d0 f9 01 c0       	push   0xc001f9d0
c00183a9:	e8 75 7f ff ff       	call   c0010323 <KePanic(char const*)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	8d 76 00             	lea    esi,[esi+0x0]
c00183b4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183ba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183bd:	74 11                	je     c00183d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 0f fa 01 c0       	push   0xc001fa0f
c00183c7:	e8 57 7f ff ff       	call   c0010323 <KePanic(char const*)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	90                   	nop
c00183d0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183d6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183d9:	74 11                	je     c00183ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 0f fa 01 c0       	push   0xc001fa0f
c00183e3:	e8 3b 7f ff ff       	call   c0010323 <KePanic(char const*)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	90                   	nop
c00183ec:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183ef:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183f3:	7e 07                	jle    c00183fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183f9:	8d 76 00             	lea    esi,[esi+0x0]
c00183fc:	85 f6                	test   esi,esi
c00183fe:	7e 2c                	jle    c001842c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018400:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018404:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018407:	31 c9                	xor    ecx,ecx
c0018409:	01 d7                	add    edi,edx
c001840b:	90                   	nop
c001840c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001840f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018412:	85 c0                	test   eax,eax
c0018414:	79 06                	jns    c001841c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018416:	05 ff 7f 00 00       	add    eax,0x7fff
c001841b:	90                   	nop
c001841c:	c1 f8 0f             	sar    eax,0xf
c001841f:	83 c1 04             	add    ecx,0x4
c0018422:	66 01 02             	add    WORD PTR [edx],ax
c0018425:	83 c2 02             	add    edx,0x2
c0018428:	39 d7                	cmp    edi,edx
c001842a:	75 e0                	jne    c001840c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001842c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001842f:	50                   	push   eax
c0018430:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018433:	29 f0                	sub    eax,esi
c0018435:	c1 e0 02             	shl    eax,0x2
c0018438:	50                   	push   eax
c0018439:	8d 04 b2             	lea    eax,[edx+esi*4]
c001843c:	50                   	push   eax
c001843d:	52                   	push   edx
c001843e:	e8 9d 7f fe ff       	call   c00003e0 <memmove>
c0018443:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	89 f0                	mov    eax,esi
c001844b:	5b                   	pop    ebx
c001844c:	5e                   	pop    esi
c001844d:	5f                   	pop    edi
c001844e:	c3                   	ret    
c001844f:	90                   	nop

c0018450 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018450:	57                   	push   edi
c0018451:	56                   	push   esi
c0018452:	53                   	push   ebx
c0018453:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018457:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001845b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001845f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018465:	39 06                	cmp    DWORD PTR [esi],eax
c0018467:	74 13                	je     c001847c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	68 f0 f9 01 c0       	push   0xc001f9f0
c0018471:	e8 ad 7e ff ff       	call   c0010323 <KePanic(char const*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	8d 76 00             	lea    esi,[esi+0x0]
c001847c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018482:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018485:	74 11                	je     c0018498 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018487:	83 ec 0c             	sub    esp,0xc
c001848a:	68 2b fa 01 c0       	push   0xc001fa2b
c001848f:	e8 8f 7e ff ff       	call   c0010323 <KePanic(char const*)>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	90                   	nop
c0018498:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001849e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184a1:	74 11                	je     c00184b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184a3:	83 ec 0c             	sub    esp,0xc
c00184a6:	68 2b fa 01 c0       	push   0xc001fa2b
c00184ab:	e8 73 7e ff ff       	call   c0010323 <KePanic(char const*)>
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	90                   	nop
c00184b4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184b7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184bb:	7e 07                	jle    c00184c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184bd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184c1:	8d 76 00             	lea    esi,[esi+0x0]
c00184c4:	85 ff                	test   edi,edi
c00184c6:	7e 1c                	jle    c00184e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184c8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184cf:	31 c0                	xor    eax,eax
c00184d1:	8d 76 00             	lea    esi,[esi+0x0]
c00184d4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184d7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184da:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184dd:	83 c0 04             	add    eax,0x4
c00184e0:	39 c1                	cmp    ecx,eax
c00184e2:	75 f0                	jne    c00184d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184e7:	50                   	push   eax
c00184e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184eb:	29 f8                	sub    eax,edi
c00184ed:	c1 e0 02             	shl    eax,0x2
c00184f0:	50                   	push   eax
c00184f1:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184f4:	50                   	push   eax
c00184f5:	52                   	push   edx
c00184f6:	e8 e5 7e fe ff       	call   c00003e0 <memmove>
c00184fb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	89 f8                	mov    eax,edi
c0018503:	5b                   	pop    ebx
c0018504:	5e                   	pop    esi
c0018505:	5f                   	pop    edi
c0018506:	c3                   	ret    
c0018507:	90                   	nop

c0018508 <PCI::open(int, int, void*)>:
c0018508:	83 ec 18             	sub    esp,0x18
c001850b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001850f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018513:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018519:	8b 10                	mov    edx,DWORD PTR [eax]
c001851b:	50                   	push   eax
c001851c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001851f:	31 c0                	xor    eax,eax
c0018521:	83 c4 1c             	add    esp,0x1c
c0018524:	c3                   	ret    
c0018525:	90                   	nop

c0018526 <PCI::close(int, int, void*)>:
c0018526:	31 c0                	xor    eax,eax
c0018528:	c3                   	ret    
c0018529:	90                   	nop

c001852a <PCI::PCI()>:
c001852a:	83 ec 0c             	sub    esp,0xc
c001852d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018531:	83 ec 08             	sub    esp,0x8
c0018534:	68 47 fa 01 c0       	push   0xc001fa47
c0018539:	50                   	push   eax
c001853a:	e8 61 2e ff ff       	call   c000b3a0 <Bus::Bus(char const*)>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c0018547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854b:	89 10                	mov    DWORD PTR [eax],edx
c001854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018551:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001855b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855f:	a3 40 6b 02 c0       	mov    ds:0xc0026b40,eax
c0018564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018568:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001856e:	31 d2                	xor    edx,edx
c0018570:	88 c2                	mov    dl,al
c0018572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018576:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001857d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018581:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018587:	31 d2                	xor    edx,edx
c0018589:	88 c2                	mov    dl,al
c001858b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018598:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001859e:	8d 50 01             	lea    edx,[eax+0x1]
c00185a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185a5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185ab:	31 d2                	xor    edx,edx
c00185ad:	88 c2                	mov    dl,al
c00185af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185b7:	83 c9 c0             	or     ecx,0xffffffc0
c00185ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185be:	90                   	nop
c00185bf:	83 c4 0c             	add    esp,0xc
c00185c2:	c3                   	ret    
c00185c3:	90                   	nop

c00185c4 <PCI::readBAR8(unsigned int, int)>:
c00185c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185cc:	f6 c2 01             	test   dl,0x1
c00185cf:	74 07                	je     c00185d8 <PCI::readBAR8(unsigned int, int)+0x14>
c00185d1:	83 e2 fc             	and    edx,0xfffffffc
c00185d4:	01 c2                	add    edx,eax
c00185d6:	ec                   	in     al,dx
c00185d7:	c3                   	ret    
c00185d8:	83 e2 f0             	and    edx,0xfffffff0
c00185db:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185de:	c3                   	ret    
c00185df:	90                   	nop

c00185e0 <PCI::readBAR16(unsigned int, int)>:
c00185e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185e8:	f6 c2 01             	test   dl,0x1
c00185eb:	74 08                	je     c00185f5 <PCI::readBAR16(unsigned int, int)+0x15>
c00185ed:	83 e2 fc             	and    edx,0xfffffffc
c00185f0:	01 c2                	add    edx,eax
c00185f2:	66 ed                	in     ax,dx
c00185f4:	c3                   	ret    
c00185f5:	83 e2 f0             	and    edx,0xfffffff0
c00185f8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185fc:	c3                   	ret    
c00185fd:	90                   	nop

c00185fe <PCI::readBAR32(unsigned int, int)>:
c00185fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018606:	f6 c2 01             	test   dl,0x1
c0018609:	74 07                	je     c0018612 <PCI::readBAR32(unsigned int, int)+0x14>
c001860b:	83 e2 fc             	and    edx,0xfffffffc
c001860e:	01 c2                	add    edx,eax
c0018610:	ed                   	in     eax,dx
c0018611:	c3                   	ret    
c0018612:	83 e2 f0             	and    edx,0xfffffff0
c0018615:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018618:	c3                   	ret    
c0018619:	90                   	nop

c001861a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001861a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001861e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018622:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018626:	f6 c2 01             	test   dl,0x1
c0018629:	74 07                	je     c0018632 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001862b:	83 e2 fc             	and    edx,0xfffffffc
c001862e:	01 ca                	add    edx,ecx
c0018630:	ee                   	out    dx,al
c0018631:	c3                   	ret    
c0018632:	83 e2 f0             	and    edx,0xfffffff0
c0018635:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018638:	c3                   	ret    
c0018639:	90                   	nop

c001863a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001863a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001863e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018642:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018646:	f6 c2 01             	test   dl,0x1
c0018649:	74 08                	je     c0018653 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001864b:	83 e2 fc             	and    edx,0xfffffffc
c001864e:	01 ca                	add    edx,ecx
c0018650:	66 ef                	out    dx,ax
c0018652:	c3                   	ret    
c0018653:	83 e2 f0             	and    edx,0xfffffff0
c0018656:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001865c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018664:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018668:	f6 c2 01             	test   dl,0x1
c001866b:	74 07                	je     c0018674 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001866d:	83 e2 fc             	and    edx,0xfffffffc
c0018670:	01 ca                	add    edx,ecx
c0018672:	ef                   	out    dx,eax
c0018673:	c3                   	ret    
c0018674:	83 e2 f0             	and    edx,0xfffffff0
c0018677:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001867c:	55                   	push   ebp
c001867d:	57                   	push   edi
c001867e:	56                   	push   esi
c001867f:	53                   	push   ebx
c0018680:	83 ec 0c             	sub    esp,0xc
c0018683:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018687:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001868b:	89 f0                	mov    eax,esi
c001868d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018691:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018695:	3c 07                	cmp    al,0x7
c0018697:	76 10                	jbe    c00186a9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018699:	83 ec 0c             	sub    esp,0xc
c001869c:	68 4f fa 01 c0       	push   0xc001fa4f
c00186a1:	e8 7d 7c ff ff       	call   c0010323 <KePanic(char const*)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	80 fb 0f             	cmp    bl,0xf
c00186ac:	76 10                	jbe    c00186be <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186ae:	83 ec 0c             	sub    esp,0xc
c00186b1:	68 7f fa 01 c0       	push   0xc001fa7f
c00186b6:	e8 68 7c ff ff       	call   c0010323 <KePanic(char const*)>
c00186bb:	83 c4 10             	add    esp,0x10
c00186be:	8d 04 36             	lea    eax,[esi+esi*1]
c00186c1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186c6:	83 c8 f0             	or     eax,0xfffffff0
c00186c9:	ee                   	out    dx,al
c00186ca:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186cf:	89 e8                	mov    eax,ebp
c00186d1:	ee                   	out    dx,al
c00186d2:	83 c4 0c             	add    esp,0xc
c00186d5:	89 d8                	mov    eax,ebx
c00186d7:	66 81 e7 fc 00       	and    di,0xfc
c00186dc:	5b                   	pop    ebx
c00186dd:	c1 e0 08             	shl    eax,0x8
c00186e0:	5e                   	pop    esi
c00186e1:	09 f8                	or     eax,edi
c00186e3:	5f                   	pop    edi
c00186e4:	66 0d 00 c0          	or     ax,0xc000
c00186e8:	5d                   	pop    ebp
c00186e9:	c3                   	ret    

c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186ea:	57                   	push   edi
c00186eb:	56                   	push   esi
c00186ec:	53                   	push   ebx
c00186ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018703:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018707:	83 ff 01             	cmp    edi,0x1
c001870a:	75 3e                	jne    c001874a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001870c:	89 de                	mov    esi,ebx
c001870e:	0f b6 c0             	movzx  eax,al
c0018711:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018717:	c1 e0 10             	shl    eax,0x10
c001871a:	0f b6 c9             	movzx  ecx,cl
c001871d:	09 f0                	or     eax,esi
c001871f:	c1 e1 08             	shl    ecx,0x8
c0018722:	0f b6 d2             	movzx  edx,dl
c0018725:	09 c8                	or     eax,ecx
c0018727:	c1 e2 0b             	shl    edx,0xb
c001872a:	09 d0                	or     eax,edx
c001872c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018731:	0d 00 00 00 80       	or     eax,0x80000000
c0018736:	ef                   	out    dx,eax
c0018737:	ba fc 0c 00 00       	mov    edx,0xcfc
c001873c:	ed                   	in     eax,dx
c001873d:	83 e3 02             	and    ebx,0x2
c0018740:	0f b6 cb             	movzx  ecx,bl
c0018743:	c1 e1 03             	shl    ecx,0x3
c0018746:	d3 e8                	shr    eax,cl
c0018748:	eb 43                	jmp    c001878d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001874a:	83 ff 02             	cmp    edi,0x2
c001874d:	75 2c                	jne    c001877b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001874f:	83 ec 0c             	sub    esp,0xc
c0018752:	0f b6 c9             	movzx  ecx,cl
c0018755:	0f b6 d2             	movzx  edx,dl
c0018758:	0f b6 fb             	movzx  edi,bl
c001875b:	0f b6 c0             	movzx  eax,al
c001875e:	57                   	push   edi
c001875f:	51                   	push   ecx
c0018760:	52                   	push   edx
c0018761:	50                   	push   eax
c0018762:	56                   	push   esi
c0018763:	e8 14 ff ff ff       	call   c001867c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018768:	89 c2                	mov    edx,eax
c001876a:	ed                   	in     eax,dx
c001876b:	83 e3 02             	and    ebx,0x2
c001876e:	83 c4 20             	add    esp,0x20
c0018771:	0f b6 cb             	movzx  ecx,bl
c0018774:	c1 e1 03             	shl    ecx,0x3
c0018777:	d3 e8                	shr    eax,cl
c0018779:	eb 12                	jmp    c001878d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	68 af fa 01 c0       	push   0xc001faaf
c0018783:	e8 9b 7b ff ff       	call   c0010323 <KePanic(char const*)>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	31 c0                	xor    eax,eax
c001878d:	5b                   	pop    ebx
c001878e:	5e                   	pop    esi
c001878f:	5f                   	pop    edi
c0018790:	c3                   	ret    
c0018791:	90                   	nop

c0018792 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018792:	83 ec 18             	sub    esp,0x18
c0018795:	6a 00                	push   0x0
c0018797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879c:	50                   	push   eax
c001879d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ad:	e8 38 ff ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b2:	83 c4 2c             	add    esp,0x2c
c00187b5:	c3                   	ret    

c00187b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187b6:	83 ec 18             	sub    esp,0x18
c00187b9:	6a 0e                	push   0xe
c00187bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c0:	50                   	push   eax
c00187c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c6:	50                   	push   eax
c00187c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187cc:	50                   	push   eax
c00187cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d1:	e8 14 ff ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187d6:	83 c4 2c             	add    esp,0x2c
c00187d9:	0f b6 c0             	movzx  eax,al
c00187dc:	c3                   	ret    
c00187dd:	90                   	nop

c00187de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187de:	55                   	push   ebp
c00187df:	57                   	push   edi
c00187e0:	56                   	push   esi
c00187e1:	53                   	push   ebx
c00187e2:	83 ec 18             	sub    esp,0x18
c00187e5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187ea:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187ef:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187f4:	6a 0a                	push   0xa
c00187f6:	56                   	push   esi
c00187f7:	55                   	push   ebp
c00187f8:	57                   	push   edi
c00187f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187fd:	e8 e8 fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018802:	83 c4 14             	add    esp,0x14
c0018805:	89 c3                	mov    ebx,eax
c0018807:	6a 0a                	push   0xa
c0018809:	0f b6 db             	movzx  ebx,bl
c001880c:	56                   	push   esi
c001880d:	55                   	push   ebp
c001880e:	57                   	push   edi
c001880f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018813:	e8 d2 fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018818:	83 c4 2c             	add    esp,0x2c
c001881b:	25 00 ff 00 00       	and    eax,0xff00
c0018820:	09 d8                	or     eax,ebx
c0018822:	5b                   	pop    ebx
c0018823:	5e                   	pop    esi
c0018824:	5f                   	pop    edi
c0018825:	5d                   	pop    ebp
c0018826:	c3                   	ret    
c0018827:	90                   	nop

c0018828 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018828:	83 ec 18             	sub    esp,0x18
c001882b:	6a 08                	push   0x8
c001882d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018832:	50                   	push   eax
c0018833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018838:	50                   	push   eax
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018843:	e8 a2 fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018848:	83 c4 2c             	add    esp,0x2c
c001884b:	0f b6 c4             	movzx  eax,ah
c001884e:	c3                   	ret    
c001884f:	90                   	nop

c0018850 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018850:	83 ec 18             	sub    esp,0x18
c0018853:	6a 08                	push   0x8
c0018855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885a:	50                   	push   eax
c001885b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018860:	50                   	push   eax
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	50                   	push   eax
c0018867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886b:	e8 7a fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018870:	83 c4 2c             	add    esp,0x2c
c0018873:	c3                   	ret    

c0018874 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018874:	83 ec 18             	sub    esp,0x18
c0018877:	6a 3c                	push   0x3c
c0018879:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887e:	50                   	push   eax
c001887f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018884:	50                   	push   eax
c0018885:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888a:	50                   	push   eax
c001888b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001888f:	e8 56 fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018894:	83 c4 2c             	add    esp,0x2c
c0018897:	c3                   	ret    

c0018898 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018898:	83 ec 18             	sub    esp,0x18
c001889b:	6a 18                	push   0x18
c001889d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a2:	50                   	push   eax
c00188a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a8:	50                   	push   eax
c00188a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ae:	50                   	push   eax
c00188af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188b3:	e8 32 fe ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b8:	83 c4 2c             	add    esp,0x2c
c00188bb:	0f b6 c4             	movzx  eax,ah
c00188be:	c3                   	ret    
c00188bf:	90                   	nop

c00188c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188c0:	55                   	push   ebp
c00188c1:	57                   	push   edi
c00188c2:	56                   	push   esi
c00188c3:	53                   	push   ebx
c00188c4:	83 ec 28             	sub    esp,0x28
c00188c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188cb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188d0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188d5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188e1:	8d 43 12             	lea    eax,[ebx+0x12]
c00188e4:	83 c3 10             	add    ebx,0x10
c00188e7:	0f b6 c0             	movzx  eax,al
c00188ea:	0f b6 db             	movzx  ebx,bl
c00188ed:	50                   	push   eax
c00188ee:	51                   	push   ecx
c00188ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188f3:	57                   	push   edi
c00188f4:	55                   	push   ebp
c00188f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188f9:	e8 ec fd ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188fe:	83 c4 14             	add    esp,0x14
c0018901:	89 c6                	mov    esi,eax
c0018903:	53                   	push   ebx
c0018904:	c1 e6 10             	shl    esi,0x10
c0018907:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001890b:	51                   	push   ecx
c001890c:	57                   	push   edi
c001890d:	55                   	push   ebp
c001890e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018912:	e8 d3 fd ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018917:	83 c4 3c             	add    esp,0x3c
c001891a:	0f b7 c0             	movzx  eax,ax
c001891d:	5b                   	pop    ebx
c001891e:	09 f0                	or     eax,esi
c0018920:	5e                   	pop    esi
c0018921:	5f                   	pop    edi
c0018922:	5d                   	pop    ebp
c0018923:	c3                   	ret    

c0018924 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018924:	55                   	push   ebp
c0018925:	57                   	push   edi
c0018926:	56                   	push   esi
c0018927:	53                   	push   ebx
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001892f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018933:	89 f5                	mov    ebp,esi
c0018935:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001893b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001893f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018943:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018947:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001894b:	83 f9 01             	cmp    ecx,0x1
c001894e:	75 5d                	jne    c00189ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018950:	0f b6 c8             	movzx  ecx,al
c0018953:	0f b6 d2             	movzx  edx,dl
c0018956:	c1 e1 10             	shl    ecx,0x10
c0018959:	c1 e2 0b             	shl    edx,0xb
c001895c:	89 f0                	mov    eax,esi
c001895e:	25 fc 00 00 00       	and    eax,0xfc
c0018963:	09 c1                	or     ecx,eax
c0018965:	89 e8                	mov    eax,ebp
c0018967:	0f b6 c0             	movzx  eax,al
c001896a:	c1 e0 08             	shl    eax,0x8
c001896d:	09 c1                	or     ecx,eax
c001896f:	09 d1                	or     ecx,edx
c0018971:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018976:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001897c:	89 c8                	mov    eax,ecx
c001897e:	ef                   	out    dx,eax
c001897f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018984:	ed                   	in     eax,dx
c0018985:	0f b7 db             	movzx  ebx,bx
c0018988:	83 e6 02             	and    esi,0x2
c001898b:	74 0a                	je     c0018997 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001898d:	0f b7 d0             	movzx  edx,ax
c0018990:	c1 e3 10             	shl    ebx,0x10
c0018993:	09 d3                	or     ebx,edx
c0018995:	eb 05                	jmp    c001899c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018997:	66 31 c0             	xor    ax,ax
c001899a:	09 c3                	or     ebx,eax
c001899c:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189a1:	89 c8                	mov    eax,ecx
c00189a3:	ef                   	out    dx,eax
c00189a4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189a9:	89 d8                	mov    eax,ebx
c00189ab:	eb 41                	jmp    c00189ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189ad:	83 f9 02             	cmp    ecx,0x2
c00189b0:	75 45                	jne    c00189f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189b2:	83 ec 0c             	sub    esp,0xc
c00189b5:	0f b6 d2             	movzx  edx,dl
c00189b8:	89 f1                	mov    ecx,esi
c00189ba:	0f b6 c0             	movzx  eax,al
c00189bd:	0f b6 f1             	movzx  esi,cl
c00189c0:	89 e9                	mov    ecx,ebp
c00189c2:	56                   	push   esi
c00189c3:	0f b6 c9             	movzx  ecx,cl
c00189c6:	51                   	push   ecx
c00189c7:	52                   	push   edx
c00189c8:	50                   	push   eax
c00189c9:	57                   	push   edi
c00189ca:	e8 ad fc ff ff       	call   c001867c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189cf:	89 c2                	mov    edx,eax
c00189d1:	ed                   	in     eax,dx
c00189d2:	83 c4 20             	add    esp,0x20
c00189d5:	0f b7 db             	movzx  ebx,bx
c00189d8:	f6 c2 02             	test   dl,0x2
c00189db:	74 0c                	je     c00189e9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189dd:	0f b7 c8             	movzx  ecx,ax
c00189e0:	89 d8                	mov    eax,ebx
c00189e2:	c1 e0 10             	shl    eax,0x10
c00189e5:	09 c8                	or     eax,ecx
c00189e7:	eb 05                	jmp    c00189ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189e9:	66 31 c0             	xor    ax,ax
c00189ec:	09 d8                	or     eax,ebx
c00189ee:	ef                   	out    dx,eax
c00189ef:	83 c4 0c             	add    esp,0xc
c00189f2:	5b                   	pop    ebx
c00189f3:	5e                   	pop    esi
c00189f4:	5f                   	pop    edi
c00189f5:	5d                   	pop    ebp
c00189f6:	c3                   	ret    
c00189f7:	c7 44 24 20 af fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001faaf
c00189ff:	83 c4 0c             	add    esp,0xc
c0018a02:	5b                   	pop    ebx
c0018a03:	5e                   	pop    esi
c0018a04:	5f                   	pop    edi
c0018a05:	5d                   	pop    ebp
c0018a06:	e9 18 79 ff ff       	jmp    c0010323 <KePanic(char const*)>
c0018a0b:	90                   	nop

c0018a0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a0c:	55                   	push   ebp
c0018a0d:	57                   	push   edi
c0018a0e:	56                   	push   esi
c0018a0f:	53                   	push   ebx
c0018a10:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a16:	80 3d 4c 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b4c,0x0
c0018a1d:	0f 85 84 00 00 00    	jne    c0018aa7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a23:	83 ec 0c             	sub    esp,0xc
c0018a26:	68 14 01 00 00       	push   0x114
c0018a2b:	e8 45 ee fe ff       	call   c0007875 <malloc>
c0018a30:	83 c4 0c             	add    esp,0xc
c0018a33:	89 c3                	mov    ebx,eax
c0018a35:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0018a3b:	68 b5 fa 01 c0       	push   0xc001fab5
c0018a40:	50                   	push   eax
c0018a41:	e8 3e 21 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0018a46:	5a                   	pop    edx
c0018a47:	59                   	pop    ecx
c0018a48:	6a 01                	push   0x1
c0018a4a:	53                   	push   ebx
c0018a4b:	e8 f4 21 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0018a50:	83 c4 0c             	add    esp,0xc
c0018a53:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a57:	50                   	push   eax
c0018a58:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a5c:	50                   	push   eax
c0018a5d:	53                   	push   ebx
c0018a5e:	e8 8d 24 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0018a63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a67:	40                   	inc    eax
c0018a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a6b:	e8 05 ee fe ff       	call   c0007875 <malloc>
c0018a70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a74:	a3 48 6b 02 c0       	mov    ds:0xc0026b48,eax
c0018a79:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a7d:	5e                   	pop    esi
c0018a7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a80:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a84:	51                   	push   ecx
c0018a85:	50                   	push   eax
c0018a86:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a8a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a8e:	53                   	push   ebx
c0018a8f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a92:	83 c4 14             	add    esp,0x14
c0018a95:	53                   	push   ebx
c0018a96:	e8 07 22 ff ff       	call   c000aca2 <File::close()>
c0018a9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	a3 44 6b 02 c0       	mov    ds:0xc0026b44,eax
c0018aa7:	a1 44 6b 02 c0       	mov    eax,ds:0xc0026b44
c0018aac:	8b 15 48 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b48
c0018ab2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ab5:	31 ff                	xor    edi,edi
c0018ab7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018abf:	31 f6                	xor    esi,esi
c0018ac1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018ac6:	31 db                	xor    ebx,ebx
c0018ac8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018ad0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ad5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018adc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ae0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018ae7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018aeb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018aee:	0f 8e 6b 01 00 00    	jle    c0018c5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018af4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018af7:	d4 40                	aam    0x40
c0018af9:	d5 39                	aad    0x39
c0018afb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018aff:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b03:	d4 40                	aam    0x40
c0018b05:	d5 39                	aad    0x39
c0018b07:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b0b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b0f:	d4 40                	aam    0x40
c0018b11:	d5 39                	aad    0x39
c0018b13:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b17:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b1b:	d4 40                	aam    0x40
c0018b1d:	d5 39                	aad    0x39
c0018b1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b23:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b27:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b2b:	3c 56                	cmp    al,0x56
c0018b2d:	74 45                	je     c0018b74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b2f:	d4 40                	aam    0x40
c0018b31:	d5 39                	aad    0x39
c0018b33:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b36:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b3a:	0f b6 c9             	movzx  ecx,cl
c0018b3d:	c1 e1 04             	shl    ecx,0x4
c0018b40:	d4 40                	aam    0x40
c0018b42:	d5 39                	aad    0x39
c0018b44:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b47:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b4b:	0f b6 db             	movzx  ebx,bl
c0018b4e:	09 cb                	or     ebx,ecx
c0018b50:	c1 e3 04             	shl    ebx,0x4
c0018b53:	d4 40                	aam    0x40
c0018b55:	d5 39                	aad    0x39
c0018b57:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b5a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b5e:	0f b6 c9             	movzx  ecx,cl
c0018b61:	09 cb                	or     ebx,ecx
c0018b63:	c1 e3 04             	shl    ebx,0x4
c0018b66:	89 d9                	mov    ecx,ebx
c0018b68:	d4 40                	aam    0x40
c0018b6a:	d5 39                	aad    0x39
c0018b6c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b6f:	0f b6 db             	movzx  ebx,bl
c0018b72:	09 cb                	or     ebx,ecx
c0018b74:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b78:	80 f9 44             	cmp    cl,0x44
c0018b7b:	74 47                	je     c0018bc4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b7d:	88 c8                	mov    al,cl
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	83 e8 30             	sub    eax,0x30
c0018b86:	0f b6 e8             	movzx  ebp,al
c0018b89:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b8d:	c1 e5 04             	shl    ebp,0x4
c0018b90:	d4 40                	aam    0x40
c0018b92:	d5 39                	aad    0x39
c0018b94:	83 e8 30             	sub    eax,0x30
c0018b97:	0f b6 f0             	movzx  esi,al
c0018b9a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b9e:	09 ee                	or     esi,ebp
c0018ba0:	c1 e6 04             	shl    esi,0x4
c0018ba3:	d4 40                	aam    0x40
c0018ba5:	d5 39                	aad    0x39
c0018ba7:	83 e8 30             	sub    eax,0x30
c0018baa:	0f b6 e8             	movzx  ebp,al
c0018bad:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018bb1:	09 ee                	or     esi,ebp
c0018bb3:	c1 e6 04             	shl    esi,0x4
c0018bb6:	89 f5                	mov    ebp,esi
c0018bb8:	d4 40                	aam    0x40
c0018bba:	d5 39                	aad    0x39
c0018bbc:	83 e8 30             	sub    eax,0x30
c0018bbf:	0f b6 f0             	movzx  esi,al
c0018bc2:	09 ee                	or     esi,ebp
c0018bc4:	83 c7 10             	add    edi,0x10
c0018bc7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bcb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bce:	3c 0a                	cmp    al,0xa
c0018bd0:	74 09                	je     c0018bdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bd2:	45                   	inc    ebp
c0018bd3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bd6:	75 16                	jne    c0018bee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bd8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bdb:	3c 0a                	cmp    al,0xa
c0018bdd:	0f 94 c0             	sete   al
c0018be0:	0f b6 c0             	movzx  eax,al
c0018be3:	01 c7                	add    edi,eax
c0018be5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bea:	75 0c                	jne    c0018bf8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bec:	eb 15                	jmp    c0018c03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bee:	47                   	inc    edi
c0018bef:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bf2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bf6:	eb d3                	jmp    c0018bcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bf8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018bfd:	0f 85 e8 fe ff ff    	jne    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c03:	80 f9 44             	cmp    cl,0x44
c0018c06:	74 0b                	je     c0018c13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c08:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c0d:	0f 85 d8 fe ff ff    	jne    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c13:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c17:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c1b:	c1 e1 04             	shl    ecx,0x4
c0018c1e:	83 e8 30             	sub    eax,0x30
c0018c21:	09 c8                	or     eax,ecx
c0018c23:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c27:	0f 85 be fe ff ff    	jne    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c2d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c35:	c1 e1 04             	shl    ecx,0x4
c0018c38:	83 e8 30             	sub    eax,0x30
c0018c3b:	09 c8                	or     eax,ecx
c0018c3d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c41:	0f 85 a4 fe ff ff    	jne    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c47:	50                   	push   eax
c0018c48:	50                   	push   eax
c0018c49:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c4d:	50                   	push   eax
c0018c4e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c55:	e8 a6 79 fe ff       	call   c0000600 <strcpy>
c0018c5a:	83 c4 10             	add    esp,0x10
c0018c5d:	eb 15                	jmp    c0018c74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c5f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c66:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c74:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c81:	5b                   	pop    ebx
c0018c82:	5e                   	pop    esi
c0018c83:	5f                   	pop    edi
c0018c84:	5d                   	pop    ebp
c0018c85:	c3                   	ret    

c0018c86 <PCI::checkBus(unsigned char)>:
c0018c86:	56                   	push   esi
c0018c87:	53                   	push   ebx
c0018c88:	31 f6                	xor    esi,esi
c0018c8a:	51                   	push   ecx
c0018c8b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c8f:	0f b6 c3             	movzx  eax,bl
c0018c92:	52                   	push   edx
c0018c93:	56                   	push   esi
c0018c94:	46                   	inc    esi
c0018c95:	50                   	push   eax
c0018c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c9a:	e8 f3 02 00 00       	call   c0018f92 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	83 fe 20             	cmp    esi,0x20
c0018ca5:	75 e8                	jne    c0018c8f <PCI::checkBus(unsigned char)+0x9>
c0018ca7:	58                   	pop    eax
c0018ca8:	5b                   	pop    ebx
c0018ca9:	5e                   	pop    esi
c0018caa:	c3                   	ret    
c0018cab:	90                   	nop

c0018cac <PCI::foundDevice(PCIDeviceInfo)>:
c0018cac:	55                   	push   ebp
c0018cad:	57                   	push   edi
c0018cae:	56                   	push   esi
c0018caf:	53                   	push   ebx
c0018cb0:	83 ec 1c             	sub    esp,0x1c
c0018cb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cb7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018cbd:	0f 84 52 01 00 00    	je     c0018e15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cc3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cc7:	66 81 f9 06 04       	cmp    cx,0x406
c0018ccc:	75 2c                	jne    c0018cfa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cd3:	50                   	push   eax
c0018cd4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cd9:	50                   	push   eax
c0018cda:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cdf:	50                   	push   eax
c0018ce0:	56                   	push   esi
c0018ce1:	e8 b2 fb ff ff       	call   c0018898 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018ce6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cea:	0f b6 c0             	movzx  eax,al
c0018ced:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cf1:	83 c4 2c             	add    esp,0x2c
c0018cf4:	5b                   	pop    ebx
c0018cf5:	5e                   	pop    esi
c0018cf6:	5f                   	pop    edi
c0018cf7:	5d                   	pop    ebp
c0018cf8:	eb 8c                	jmp    c0018c86 <PCI::checkBus(unsigned char)>
c0018cfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cfe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d10:	88 d3                	mov    bl,dl
c0018d12:	85 c0                	test   eax,eax
c0018d14:	74 33                	je     c0018d49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d19:	85 d2                	test   edx,edx
c0018d1b:	74 28                	je     c0018d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d23:	31 ef                	xor    edi,ebp
c0018d25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d2b:	75 18                	jne    c0018d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d37:	75 0c                	jne    c0018d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d3f:	0f 84 d0 00 00 00    	je     c0018e15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d47:	eb c9                	jmp    c0018d12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d49:	66 81 f9 01 06       	cmp    cx,0x601
c0018d4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d52:	75 19                	jne    c0018d6d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d54:	83 ec 0c             	sub    esp,0xc
c0018d57:	68 64 01 00 00       	push   0x164
c0018d5c:	e8 14 eb fe ff       	call   c0007875 <malloc>
c0018d61:	89 c5                	mov    ebp,eax
c0018d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d66:	e8 47 0e 00 00       	call   c0019bb2 <SATABus::SATABus()>
c0018d6b:	eb 1e                	jmp    c0018d8b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d6d:	66 81 f9 01 01       	cmp    cx,0x101
c0018d72:	75 60                	jne    c0018dd4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	68 70 02 00 00       	push   0x270
c0018d7c:	e8 f4 ea fe ff       	call   c0007875 <malloc>
c0018d81:	89 c5                	mov    ebp,eax
c0018d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d86:	e8 cb 02 00 00       	call   c0019056 <IDE::IDE()>
c0018d8b:	58                   	pop    eax
c0018d8c:	5a                   	pop    edx
c0018d8d:	55                   	push   ebp
c0018d8e:	56                   	push   esi
c0018d8f:	e8 b8 2c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0018d94:	83 ec 1c             	sub    esp,0x1c
c0018d97:	b9 09 00 00 00       	mov    ecx,0x9
c0018d9c:	fc                   	cld    
c0018d9d:	89 e7                	mov    edi,esp
c0018d9f:	89 de                	mov    esi,ebx
c0018da1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018da3:	55                   	push   ebp
c0018da4:	e8 e9 2b ff ff       	call   c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c0018da9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018db0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018db8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018dc0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018dc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018dcb:	83 c4 4c             	add    esp,0x4c
c0018dce:	5b                   	pop    ebx
c0018dcf:	5e                   	pop    esi
c0018dd0:	5f                   	pop    edi
c0018dd1:	5d                   	pop    ebp
c0018dd2:	ff e0                	jmp    eax
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	68 58 01 00 00       	push   0x158
c0018ddc:	e8 94 ea fe ff       	call   c0007875 <malloc>
c0018de1:	89 c5                	mov    ebp,eax
c0018de3:	58                   	pop    eax
c0018de4:	5a                   	pop    edx
c0018de5:	68 ce fa 01 c0       	push   0xc001face
c0018dea:	55                   	push   ebp
c0018deb:	e8 fa 2e ff ff       	call   c000bcea <DriverlessDevice::DriverlessDevice(char const*)>
c0018df0:	59                   	pop    ecx
c0018df1:	5f                   	pop    edi
c0018df2:	55                   	push   ebp
c0018df3:	56                   	push   esi
c0018df4:	e8 53 2c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0018df9:	b9 09 00 00 00       	mov    ecx,0x9
c0018dfe:	fc                   	cld    
c0018dff:	89 df                	mov    edi,ebx
c0018e01:	89 de                	mov    esi,ebx
c0018e03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e05:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e09:	83 c4 2c             	add    esp,0x2c
c0018e0c:	5b                   	pop    ebx
c0018e0d:	5e                   	pop    esi
c0018e0e:	5f                   	pop    edi
c0018e0f:	5d                   	pop    ebp
c0018e10:	e9 7d 2b ff ff       	jmp    c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e15:	83 c4 1c             	add    esp,0x1c
c0018e18:	5b                   	pop    ebx
c0018e19:	5e                   	pop    esi
c0018e1a:	5f                   	pop    edi
c0018e1b:	5d                   	pop    ebp
c0018e1c:	c3                   	ret    
c0018e1d:	90                   	nop

c0018e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e1e:	55                   	push   ebp
c0018e1f:	57                   	push   edi
c0018e20:	56                   	push   esi
c0018e21:	53                   	push   ebx
c0018e22:	83 ec 68             	sub    esp,0x68
c0018e25:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e29:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e34:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e3b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e4b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e54:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e59:	6a 0c                	push   0xc
c0018e5b:	57                   	push   edi
c0018e5c:	53                   	push   ebx
c0018e5d:	56                   	push   esi
c0018e5e:	55                   	push   ebp
c0018e5f:	e8 86 f8 ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e64:	83 c4 20             	add    esp,0x20
c0018e67:	57                   	push   edi
c0018e68:	53                   	push   ebx
c0018e69:	56                   	push   esi
c0018e6a:	55                   	push   ebp
c0018e6b:	e8 6e f9 ff ff       	call   c00187de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e70:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e75:	57                   	push   edi
c0018e76:	53                   	push   ebx
c0018e77:	56                   	push   esi
c0018e78:	55                   	push   ebp
c0018e79:	e8 f6 f9 ff ff       	call   c0018874 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e7e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e82:	83 c4 14             	add    esp,0x14
c0018e85:	6a 3c                	push   0x3c
c0018e87:	57                   	push   edi
c0018e88:	53                   	push   ebx
c0018e89:	56                   	push   esi
c0018e8a:	55                   	push   ebp
c0018e8b:	e8 5a f8 ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e90:	0f b6 c4             	movzx  eax,ah
c0018e93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e97:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e9b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e9f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0018ea4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018eaa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018eb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018eb4:	83 c4 20             	add    esp,0x20
c0018eb7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ebc:	74 30                	je     c0018eee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ebe:	31 c0                	xor    eax,eax
c0018ec0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ec4:	7e 28                	jle    c0018eee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ec6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018ece:	39 cb                	cmp    ebx,ecx
c0018ed0:	75 19                	jne    c0018eeb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ed2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018eda:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018ede:	75 0b                	jne    c0018eeb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ee0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ee7:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018eeb:	40                   	inc    eax
c0018eec:	eb d2                	jmp    c0018ec0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018eee:	31 d2                	xor    edx,edx
c0018ef0:	83 ec 0c             	sub    esp,0xc
c0018ef3:	57                   	push   edi
c0018ef4:	53                   	push   ebx
c0018ef5:	56                   	push   esi
c0018ef6:	52                   	push   edx
c0018ef7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018efb:	55                   	push   ebp
c0018efc:	e8 bf f9 ff ff       	call   c00188c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f05:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f09:	42                   	inc    edx
c0018f0a:	83 c4 20             	add    esp,0x20
c0018f0d:	83 fa 06             	cmp    edx,0x6
c0018f10:	75 de                	jne    c0018ef0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f12:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f17:	83 ec 0c             	sub    esp,0xc
c0018f1a:	86 e0                	xchg   al,ah
c0018f1c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f21:	6a 02                	push   0x2
c0018f23:	57                   	push   edi
c0018f24:	53                   	push   ebx
c0018f25:	56                   	push   esi
c0018f26:	55                   	push   ebp
c0018f27:	e8 be f7 ff ff       	call   c00186ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f2c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f31:	83 c4 20             	add    esp,0x20
c0018f34:	57                   	push   edi
c0018f35:	53                   	push   ebx
c0018f36:	56                   	push   esi
c0018f37:	55                   	push   ebp
c0018f38:	e8 eb f8 ff ff       	call   c0018828 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f3d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f41:	57                   	push   edi
c0018f42:	53                   	push   ebx
c0018f43:	56                   	push   esi
c0018f44:	55                   	push   ebp
c0018f45:	e8 48 f8 ff ff       	call   c0018792 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f4a:	b9 09 00 00 00       	mov    ecx,0x9
c0018f4f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f54:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f58:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f5c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f60:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f64:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f68:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f6c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f70:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f74:	83 ec 0c             	sub    esp,0xc
c0018f77:	fc                   	cld    
c0018f78:	89 e7                	mov    edi,esp
c0018f7a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f80:	55                   	push   ebp
c0018f81:	e8 26 fd ff ff       	call   c0018cac <PCI::foundDevice(PCIDeviceInfo)>
c0018f86:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f8c:	5b                   	pop    ebx
c0018f8d:	5e                   	pop    esi
c0018f8e:	5f                   	pop    edi
c0018f8f:	5d                   	pop    ebp
c0018f90:	c3                   	ret    
c0018f91:	90                   	nop

c0018f92 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f92:	55                   	push   ebp
c0018f93:	57                   	push   edi
c0018f94:	56                   	push   esi
c0018f95:	53                   	push   ebx
c0018f96:	83 ec 0c             	sub    esp,0xc
c0018f99:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f9d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fa2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018fa7:	6a 00                	push   0x0
c0018fa9:	56                   	push   esi
c0018faa:	57                   	push   edi
c0018fab:	55                   	push   ebp
c0018fac:	e8 e1 f7 ff ff       	call   c0018792 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fb1:	6a 00                	push   0x0
c0018fb3:	56                   	push   esi
c0018fb4:	57                   	push   edi
c0018fb5:	55                   	push   ebp
c0018fb6:	e8 63 fe ff ff       	call   c0018e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fbb:	83 c4 20             	add    esp,0x20
c0018fbe:	6a 00                	push   0x0
c0018fc0:	56                   	push   esi
c0018fc1:	57                   	push   edi
c0018fc2:	55                   	push   ebp
c0018fc3:	e8 ee f7 ff ff       	call   c00187b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fc8:	83 c4 10             	add    esp,0x10
c0018fcb:	84 c0                	test   al,al
c0018fcd:	79 27                	jns    c0018ff6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fcf:	bb 01 00 00 00       	mov    ebx,0x1
c0018fd4:	53                   	push   ebx
c0018fd5:	56                   	push   esi
c0018fd6:	57                   	push   edi
c0018fd7:	55                   	push   ebp
c0018fd8:	e8 b5 f7 ff ff       	call   c0018792 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	66 40                	inc    ax
c0018fe2:	74 0c                	je     c0018ff0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fe4:	53                   	push   ebx
c0018fe5:	56                   	push   esi
c0018fe6:	57                   	push   edi
c0018fe7:	55                   	push   ebp
c0018fe8:	e8 31 fe ff ff       	call   c0018e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	43                   	inc    ebx
c0018ff1:	83 fb 08             	cmp    ebx,0x8
c0018ff4:	75 de                	jne    c0018fd4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018ff6:	83 c4 0c             	add    esp,0xc
c0018ff9:	5b                   	pop    ebx
c0018ffa:	5e                   	pop    esi
c0018ffb:	5f                   	pop    edi
c0018ffc:	5d                   	pop    ebp
c0018ffd:	c3                   	ret    

c0018ffe <PCI::detect()>:
c0018ffe:	56                   	push   esi
c0018fff:	53                   	push   ebx
c0019000:	53                   	push   ebx
c0019001:	31 db                	xor    ebx,ebx
c0019003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019007:	6a 00                	push   0x0
c0019009:	6a 00                	push   0x0
c001900b:	6a 00                	push   0x0
c001900d:	56                   	push   esi
c001900e:	e8 a3 f7 ff ff       	call   c00187b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	a8 80                	test   al,0x80
c0019018:	75 21                	jne    c001903b <PCI::detect()+0x3d>
c001901a:	51                   	push   ecx
c001901b:	51                   	push   ecx
c001901c:	6a 00                	push   0x0
c001901e:	56                   	push   esi
c001901f:	e8 62 fc ff ff       	call   c0018c86 <PCI::checkBus(unsigned char)>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	eb 24                	jmp    c001904d <PCI::detect()+0x4f>
c0019029:	52                   	push   edx
c001902a:	52                   	push   edx
c001902b:	53                   	push   ebx
c001902c:	43                   	inc    ebx
c001902d:	56                   	push   esi
c001902e:	e8 53 fc ff ff       	call   c0018c86 <PCI::checkBus(unsigned char)>
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	83 fb 08             	cmp    ebx,0x8
c0019039:	74 12                	je     c001904d <PCI::detect()+0x4f>
c001903b:	53                   	push   ebx
c001903c:	6a 00                	push   0x0
c001903e:	6a 00                	push   0x0
c0019040:	56                   	push   esi
c0019041:	e8 4c f7 ff ff       	call   c0018792 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	66 40                	inc    ax
c001904b:	74 dc                	je     c0019029 <PCI::detect()+0x2b>
c001904d:	58                   	pop    eax
c001904e:	5b                   	pop    ebx
c001904f:	5e                   	pop    esi
c0019050:	c3                   	ret    
c0019051:	90                   	nop

c0019052 <IDE::close(int, int, void*)>:
c0019052:	83 c8 ff             	or     eax,0xffffffff
c0019055:	c3                   	ret    

c0019056 <IDE::IDE()>:
c0019056:	83 ec 0c             	sub    esp,0xc
c0019059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905d:	83 ec 08             	sub    esp,0x8
c0019060:	68 14 fb 01 c0       	push   0xc001fb14
c0019065:	50                   	push   eax
c0019066:	e8 25 2d ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c001906b:	83 c4 10             	add    esp,0x10
c001906e:	ba a4 fb 01 c0       	mov    edx,0xc001fba4
c0019073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019077:	89 10                	mov    DWORD PTR [eax],edx
c0019079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019084:	90                   	nop
c0019085:	83 c4 0c             	add    esp,0xc
c0019088:	c3                   	ret    
c0019089:	90                   	nop

c001908a <IDE::prepareInterrupt(unsigned char)>:
c001908a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001908f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019093:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001909b:	c3                   	ret    

c001909c <selectDrive(unsigned char, unsigned char)>:
c001909c:	c3                   	ret    
c001909d:	90                   	nop

c001909e <IDE::getBase(unsigned char)>:
c001909e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190a7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190af:	c3                   	ret    

c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190b0:	55                   	push   ebp
c00190b1:	57                   	push   edi
c00190b2:	56                   	push   esi
c00190b3:	53                   	push   ebx
c00190b4:	83 ec 1c             	sub    esp,0x1c
c00190b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190bf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190ca:	80 f9 03             	cmp    cl,0x3
c00190cd:	77 51                	ja     c0019120 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190d3:	0f b6 f2             	movzx  esi,dl
c00190d6:	0f b6 db             	movzx  ebx,bl
c00190d9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190dc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190e0:	83 ca 80             	or     edx,0xffffff80
c00190e3:	0f b6 d2             	movzx  edx,dl
c00190e6:	52                   	push   edx
c00190e7:	6a 0c                	push   0xc
c00190e9:	56                   	push   esi
c00190ea:	57                   	push   edi
c00190eb:	e8 c0 ff ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190f0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190f9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190fd:	ee                   	out    dx,al
c00190fe:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019103:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019107:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001910b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001910f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019117:	83 c4 2c             	add    esp,0x2c
c001911a:	5b                   	pop    ebx
c001911b:	5e                   	pop    esi
c001911c:	5f                   	pop    edi
c001911d:	5d                   	pop    ebp
c001911e:	eb 90                	jmp    c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019120:	80 fb 07             	cmp    bl,0x7
c0019123:	77 12                	ja     c0019137 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019125:	0f b6 d2             	movzx  edx,dl
c0019128:	0f b6 db             	movzx  ebx,bl
c001912b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019133:	89 da                	mov    edx,ebx
c0019135:	eb 2f                	jmp    c0019166 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019137:	80 fb 0d             	cmp    bl,0xd
c001913a:	77 13                	ja     c001914f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001913c:	0f b6 d2             	movzx  edx,dl
c001913f:	0f b6 db             	movzx  ebx,bl
c0019142:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019149:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001914d:	eb 17                	jmp    c0019166 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001914f:	80 fb 15             	cmp    bl,0x15
c0019152:	77 13                	ja     c0019167 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019154:	0f b6 d2             	movzx  edx,dl
c0019157:	0f b6 db             	movzx  ebx,bl
c001915a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019162:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019166:	ee                   	out    dx,al
c0019167:	83 c4 1c             	add    esp,0x1c
c001916a:	5b                   	pop    ebx
c001916b:	5e                   	pop    esi
c001916c:	5f                   	pop    edi
c001916d:	5d                   	pop    ebp
c001916e:	c3                   	ret    
c001916f:	90                   	nop

c0019170 <IDE::read(unsigned char, unsigned char)>:
c0019170:	55                   	push   ebp
c0019171:	57                   	push   edi
c0019172:	56                   	push   esi
c0019173:	53                   	push   ebx
c0019174:	83 ec 1c             	sub    esp,0x1c
c0019177:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001917b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001917f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019182:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019186:	3c 03                	cmp    al,0x3
c0019188:	77 43                	ja     c00191cd <IDE::read(unsigned char, unsigned char)+0x5d>
c001918a:	0f b6 f2             	movzx  esi,dl
c001918d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019190:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019194:	83 c8 80             	or     eax,0xffffff80
c0019197:	0f b6 c0             	movzx  eax,al
c001919a:	50                   	push   eax
c001919b:	6a 0c                	push   0xc
c001919d:	56                   	push   esi
c001919e:	57                   	push   edi
c001919f:	e8 0c ff ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191a9:	0f b6 c3             	movzx  eax,bl
c00191ac:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191b0:	ec                   	in     al,dx
c00191b1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191b5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191ba:	52                   	push   edx
c00191bb:	6a 0c                	push   0xc
c00191bd:	56                   	push   esi
c00191be:	57                   	push   edi
c00191bf:	e8 ec fe ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191c4:	83 c4 20             	add    esp,0x20
c00191c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191cb:	eb 49                	jmp    c0019216 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191cd:	80 fb 07             	cmp    bl,0x7
c00191d0:	77 12                	ja     c00191e4 <IDE::read(unsigned char, unsigned char)+0x74>
c00191d2:	0f b6 d2             	movzx  edx,dl
c00191d5:	0f b6 c3             	movzx  eax,bl
c00191d8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191e0:	89 c2                	mov    edx,eax
c00191e2:	eb 31                	jmp    c0019215 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191e4:	80 fb 0d             	cmp    bl,0xd
c00191e7:	77 13                	ja     c00191fc <IDE::read(unsigned char, unsigned char)+0x8c>
c00191e9:	0f b6 d2             	movzx  edx,dl
c00191ec:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191f3:	0f b6 d3             	movzx  edx,bl
c00191f6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191fa:	eb 19                	jmp    c0019215 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191fc:	31 c0                	xor    eax,eax
c00191fe:	80 fb 15             	cmp    bl,0x15
c0019201:	77 13                	ja     c0019216 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019203:	0f b6 d2             	movzx  edx,dl
c0019206:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001920e:	0f b6 d3             	movzx  edx,bl
c0019211:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019215:	ec                   	in     al,dx
c0019216:	83 c4 1c             	add    esp,0x1c
c0019219:	5b                   	pop    ebx
c001921a:	5e                   	pop    esi
c001921b:	5f                   	pop    edi
c001921c:	5d                   	pop    ebp
c001921d:	c3                   	ret    

c001921e <IDE::waitInterrupt(unsigned char)>:
c001921e:	57                   	push   edi
c001921f:	56                   	push   esi
c0019220:	31 f6                	xor    esi,esi
c0019222:	53                   	push   ebx
c0019223:	83 ec 10             	sub    esp,0x10
c0019226:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001922a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001922e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019232:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019237:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001923e:	84 db                	test   bl,bl
c0019240:	75 33                	jne    c0019275 <IDE::waitInterrupt(unsigned char)+0x57>
c0019242:	52                   	push   edx
c0019243:	6a 0c                	push   0xc
c0019245:	50                   	push   eax
c0019246:	57                   	push   edi
c0019247:	e8 24 ff ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	a8 01                	test   al,0x1
c0019251:	75 2a                	jne    c001927d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019253:	f7 c6 04 00 00 00    	test   esi,0x4
c0019259:	75 12                	jne    c001926d <IDE::waitInterrupt(unsigned char)+0x4f>
c001925b:	83 fe 32             	cmp    esi,0x32
c001925e:	7e 0d                	jle    c001926d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019260:	83 ec 0c             	sub    esp,0xc
c0019263:	6a 64                	push   0x64
c0019265:	e8 d6 a8 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c001926a:	83 c4 10             	add    esp,0x10
c001926d:	83 fe 3c             	cmp    esi,0x3c
c0019270:	74 0b                	je     c001927d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019272:	46                   	inc    esi
c0019273:	eb bd                	jmp    c0019232 <IDE::waitInterrupt(unsigned char)+0x14>
c0019275:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001927d:	83 c4 10             	add    esp,0x10
c0019280:	88 d8                	mov    al,bl
c0019282:	5b                   	pop    ebx
c0019283:	5e                   	pop    esi
c0019284:	5f                   	pop    edi
c0019285:	c3                   	ret    

c0019286 <ideChannel0IRQHandler(regs*, void*)>:
c0019286:	83 ec 10             	sub    esp,0x10
c0019289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001928d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019294:	6a 07                	push   0x7
c0019296:	6a 00                	push   0x0
c0019298:	50                   	push   eax
c0019299:	e8 d2 fe ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001929e:	83 c4 1c             	add    esp,0x1c
c00192a1:	c3                   	ret    

c00192a2 <ideChannel1IRQHandler(regs*, void*)>:
c00192a2:	83 ec 10             	sub    esp,0x10
c00192a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192a9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192b0:	6a 07                	push   0x7
c00192b2:	6a 01                	push   0x1
c00192b4:	50                   	push   eax
c00192b5:	e8 b6 fe ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00192ba:	83 c4 1c             	add    esp,0x1c
c00192bd:	c3                   	ret    

c00192be <IDE::enableIRQs(unsigned char, bool)>:
c00192be:	57                   	push   edi
c00192bf:	56                   	push   esi
c00192c0:	be 04 00 00 00       	mov    esi,0x4
c00192c5:	53                   	push   ebx
c00192c6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192cf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192d4:	0f 94 c0             	sete   al
c00192d7:	01 c0                	add    eax,eax
c00192d9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192e0:	0f b6 c0             	movzx  eax,al
c00192e3:	50                   	push   eax
c00192e4:	6a 0c                	push   0xc
c00192e6:	57                   	push   edi
c00192e7:	53                   	push   ebx
c00192e8:	e8 c3 fd ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	50                   	push   eax
c00192f1:	6a 0c                	push   0xc
c00192f3:	57                   	push   edi
c00192f4:	53                   	push   ebx
c00192f5:	e8 76 fe ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	4e                   	dec    esi
c00192fe:	75 f0                	jne    c00192f0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019300:	5b                   	pop    ebx
c0019301:	5e                   	pop    esi
c0019302:	5f                   	pop    edi
c0019303:	c3                   	ret    

c0019304 <IDE::open(int, int, void*)>:
c0019304:	55                   	push   ebp
c0019305:	57                   	push   edi
c0019306:	56                   	push   esi
c0019307:	53                   	push   ebx
c0019308:	83 ec 1c             	sub    esp,0x1c
c001930b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001930f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019318:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019321:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019328:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001932f:	0f 85 b0 02 00 00    	jne    c00195e5 <IDE::open(int, int, void*)+0x2e1>
c0019335:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001933b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001933f:	83 e0 7f             	and    eax,0x7f
c0019342:	3c 05                	cmp    al,0x5
c0019344:	74 04                	je     c001934a <IDE::open(int, int, void*)+0x46>
c0019346:	3c 0f                	cmp    al,0xf
c0019348:	75 32                	jne    c001937c <IDE::open(int, int, void*)+0x78>
c001934a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019350:	83 e0 fc             	and    eax,0xfffffffc
c0019353:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001935a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019360:	83 e0 fc             	and    eax,0xfffffffc
c0019363:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001936a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019370:	83 e0 fc             	and    eax,0xfffffffc
c0019373:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001937a:	eb 14                	jmp    c0019390 <IDE::open(int, int, void*)+0x8c>
c001937c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019386:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019390:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0019397:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001939e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193a2:	89 c6                	mov    esi,eax
c00193a4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193a9:	c1 e6 10             	shl    esi,0x10
c00193ac:	89 e8                	mov    eax,ebp
c00193ae:	89 fa                	mov    edx,edi
c00193b0:	c1 e0 0b             	shl    eax,0xb
c00193b3:	09 f0                	or     eax,esi
c00193b5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193bc:	c1 e6 08             	shl    esi,0x8
c00193bf:	09 c6                	or     esi,eax
c00193c1:	89 f0                	mov    eax,esi
c00193c3:	0d 08 00 00 80       	or     eax,0x80000008
c00193c8:	ef                   	out    dx,eax
c00193c9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193ce:	89 ca                	mov    edx,ecx
c00193d0:	ed                   	in     eax,dx
c00193d1:	c1 e8 10             	shr    eax,0x10
c00193d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00193d9:	0f 84 f5 00 00 00    	je     c00194d4 <IDE::open(int, int, void*)+0x1d0>
c00193df:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193e5:	89 fa                	mov    edx,edi
c00193e7:	89 f0                	mov    eax,esi
c00193e9:	ef                   	out    dx,eax
c00193ea:	b0 fe                	mov    al,0xfe
c00193ec:	89 ca                	mov    edx,ecx
c00193ee:	ee                   	out    dx,al
c00193ef:	89 f0                	mov    eax,esi
c00193f1:	89 fa                	mov    edx,edi
c00193f3:	ef                   	out    dx,eax
c00193f4:	89 ca                	mov    edx,ecx
c00193f6:	ed                   	in     eax,dx
c00193f7:	3c fe                	cmp    al,0xfe
c00193f9:	0f 85 a9 00 00 00    	jne    c00194a8 <IDE::open(int, int, void*)+0x1a4>
c00193ff:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c0019405:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001940c:	74 33                	je     c0019441 <IDE::open(int, int, void*)+0x13d>
c001940e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019414:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019418:	40                   	inc    eax
c0019419:	83 ec 0c             	sub    esp,0xc
c001941c:	0f b6 c0             	movzx  eax,al
c001941f:	50                   	push   eax
c0019420:	55                   	push   ebp
c0019421:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019425:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001942b:	51                   	push   ecx
c001942c:	e8 0b 54 ff ff       	call   c000e83c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019431:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019436:	83 c4 1c             	add    esp,0x1c
c0019439:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001943f:	eb 0a                	jmp    c001944b <IDE::open(int, int, void*)+0x147>
c0019441:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001944b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019452:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019459:	c1 e1 10             	shl    ecx,0x10
c001945c:	c1 e0 08             	shl    eax,0x8
c001945f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019464:	09 c1                	or     ecx,eax
c0019466:	89 fa                	mov    edx,edi
c0019468:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001946f:	c1 e0 0b             	shl    eax,0xb
c0019472:	09 c1                	or     ecx,eax
c0019474:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001947a:	89 c8                	mov    eax,ecx
c001947c:	ef                   	out    dx,eax
c001947d:	be fc 0c 00 00       	mov    esi,0xcfc
c0019482:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019488:	89 f2                	mov    edx,esi
c001948a:	ee                   	out    dx,al
c001948b:	89 c8                	mov    eax,ecx
c001948d:	89 fa                	mov    edx,edi
c001948f:	ef                   	out    dx,eax
c0019490:	89 f2                	mov    edx,esi
c0019492:	ed                   	in     eax,dx
c0019493:	0f b6 c0             	movzx  eax,al
c0019496:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001949c:	74 46                	je     c00194e4 <IDE::open(int, int, void*)+0x1e0>
c001949e:	83 ec 0c             	sub    esp,0xc
c00194a1:	68 2c fb 01 c0       	push   0xc001fb2c
c00194a6:	eb 34                	jmp    c00194dc <IDE::open(int, int, void*)+0x1d8>
c00194a8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194b1:	75 17                	jne    c00194ca <IDE::open(int, int, void*)+0x1c6>
c00194b3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194b8:	74 07                	je     c00194c1 <IDE::open(int, int, void*)+0x1bd>
c00194ba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194bf:	75 09                	jne    c00194ca <IDE::open(int, int, void*)+0x1c6>
c00194c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194c8:	eb 1a                	jmp    c00194e4 <IDE::open(int, int, void*)+0x1e0>
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	68 34 fb 01 c0       	push   0xc001fb34
c00194d2:	eb 08                	jmp    c00194dc <IDE::open(int, int, void*)+0x1d8>
c00194d4:	83 ec 0c             	sub    esp,0xc
c00194d7:	68 65 fb 01 c0       	push   0xc001fb65
c00194dc:	e8 42 6e ff ff       	call   c0010323 <KePanic(char const*)>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194eb:	79 1a                	jns    c0019507 <IDE::open(int, int, void*)+0x203>
c00194ed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194f3:	83 e0 fc             	and    eax,0xfffffffc
c00194f6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194fd:	83 c0 08             	add    eax,0x8
c0019500:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019507:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001950d:	89 c2                	mov    edx,eax
c001950f:	83 e2 0f             	and    edx,0xf
c0019512:	66 83 fa 08          	cmp    dx,0x8
c0019516:	75 0a                	jne    c0019522 <IDE::open(int, int, void*)+0x21e>
c0019518:	83 e8 02             	sub    eax,0x2
c001951b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019522:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019528:	89 c2                	mov    edx,eax
c001952a:	83 e2 0f             	and    edx,0xf
c001952d:	66 83 fa 08          	cmp    dx,0x8
c0019531:	75 0a                	jne    c001953d <IDE::open(int, int, void*)+0x239>
c0019533:	83 e8 02             	sub    eax,0x2
c0019536:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001953d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019544:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001954b:	89 d0                	mov    eax,edx
c001954d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019550:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019554:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019558:	8d 4a 01             	lea    ecx,[edx+0x1]
c001955b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019560:	0f b6 c9             	movzx  ecx,cl
c0019563:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001956a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001956d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019571:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019575:	8d 50 02             	lea    edx,[eax+0x2]
c0019578:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001957d:	0f b6 d2             	movzx  edx,dl
c0019580:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019586:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019589:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001958d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019591:	8d 48 03             	lea    ecx,[eax+0x3]
c0019594:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019599:	0f b6 c9             	movzx  ecx,cl
c001959c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195ad:	8d 50 04             	lea    edx,[eax+0x4]
c00195b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195c2:	66 85 f6             	test   si,si
c00195c5:	74 5b                	je     c0019622 <IDE::open(int, int, void*)+0x31e>
c00195c7:	0f b6 d2             	movzx  edx,dl
c00195ca:	83 c0 05             	add    eax,0x5
c00195cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195e3:	eb 3d                	jmp    c0019622 <IDE::open(int, int, void*)+0x31e>
c00195e5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195f2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195f9:	66 05 06 02          	add    ax,0x206
c00195fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019604:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001960b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019612:	66 05 06 02          	add    ax,0x206
c0019616:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001961d:	e9 e5 fe ff ff       	jmp    c0019507 <IDE::open(int, int, void*)+0x203>
c0019622:	50                   	push   eax
c0019623:	50                   	push   eax
c0019624:	6a 00                	push   0x0
c0019626:	53                   	push   ebx
c0019627:	e8 5e fa ff ff       	call   c001908a <IDE::prepareInterrupt(unsigned char)>
c001962c:	5a                   	pop    edx
c001962d:	59                   	pop    ecx
c001962e:	6a 01                	push   0x1
c0019630:	53                   	push   ebx
c0019631:	e8 54 fa ff ff       	call   c001908a <IDE::prepareInterrupt(unsigned char)>
c0019636:	83 c4 0c             	add    esp,0xc
c0019639:	6a 00                	push   0x0
c001963b:	6a 00                	push   0x0
c001963d:	53                   	push   ebx
c001963e:	e8 7b fc ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c0019643:	83 c4 0c             	add    esp,0xc
c0019646:	6a 00                	push   0x0
c0019648:	6a 01                	push   0x1
c001964a:	53                   	push   ebx
c001964b:	e8 6e fc ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001965a:	74 34                	je     c0019690 <IDE::open(int, int, void*)+0x38c>
c001965c:	83 ec 0c             	sub    esp,0xc
c001965f:	53                   	push   ebx
c0019660:	6a 01                	push   0x1
c0019662:	68 86 92 01 c0       	push   0xc0019286
c0019667:	6a 0e                	push   0xe
c0019669:	53                   	push   ebx
c001966a:	e8 89 23 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001966f:	83 c4 14             	add    esp,0x14
c0019672:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019678:	53                   	push   ebx
c0019679:	6a 01                	push   0x1
c001967b:	68 a2 92 01 c0       	push   0xc00192a2
c0019680:	6a 0f                	push   0xf
c0019682:	53                   	push   ebx
c0019683:	e8 70 23 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019688:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001968e:	eb 38                	jmp    c00196c8 <IDE::open(int, int, void*)+0x3c4>
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001969d:	53                   	push   ebx
c001969e:	6a 00                	push   0x0
c00196a0:	68 86 92 01 c0       	push   0xc0019286
c00196a5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196ab:	53                   	push   ebx
c00196ac:	e8 47 23 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196b1:	83 c4 14             	add    esp,0x14
c00196b4:	53                   	push   ebx
c00196b5:	6a 00                	push   0x0
c00196b7:	68 a2 92 01 c0       	push   0xc00192a2
c00196bc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196c2:	53                   	push   ebx
c00196c3:	e8 30 23 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196ca:	83 c4 20             	add    esp,0x20
c00196cd:	83 ec 0c             	sub    esp,0xc
c00196d0:	53                   	push   ebx
c00196d1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196d4:	83 c4 0c             	add    esp,0xc
c00196d7:	6a 07                	push   0x7
c00196d9:	6a 00                	push   0x0
c00196db:	53                   	push   ebx
c00196dc:	e8 8f fa ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00196e1:	83 c4 0c             	add    esp,0xc
c00196e4:	6a 07                	push   0x7
c00196e6:	6a 01                	push   0x1
c00196e8:	53                   	push   ebx
c00196e9:	e8 82 fa ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00196ee:	83 c4 0c             	add    esp,0xc
c00196f1:	6a 01                	push   0x1
c00196f3:	6a 00                	push   0x0
c00196f5:	53                   	push   ebx
c00196f6:	e8 c3 fb ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c00196fb:	83 c4 0c             	add    esp,0xc
c00196fe:	6a 01                	push   0x1
c0019700:	6a 01                	push   0x1
c0019702:	53                   	push   ebx
c0019703:	e8 b6 fb ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c0019708:	83 c4 2c             	add    esp,0x2c
c001970b:	31 c0                	xor    eax,eax
c001970d:	5b                   	pop    ebx
c001970e:	5e                   	pop    esi
c001970f:	5f                   	pop    edi
c0019710:	5d                   	pop    ebp
c0019711:	c3                   	ret    

c0019712 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019712:	55                   	push   ebp
c0019713:	57                   	push   edi
c0019714:	56                   	push   esi
c0019715:	53                   	push   ebx
c0019716:	83 ec 1c             	sub    esp,0x1c
c0019719:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001971d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019721:	8d 50 f8             	lea    edx,[eax-0x8]
c0019724:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019728:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001972c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019730:	80 fa 03             	cmp    dl,0x3
c0019733:	77 5d                	ja     c0019792 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019735:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001973d:	0f b6 db             	movzx  ebx,bl
c0019740:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019743:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019747:	83 ca 80             	or     edx,0xffffff80
c001974a:	0f b6 d2             	movzx  edx,dl
c001974d:	52                   	push   edx
c001974e:	6a 0c                	push   0xc
c0019750:	53                   	push   ebx
c0019751:	56                   	push   esi
c0019752:	e8 59 f9 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019757:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001975c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019760:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019764:	0f b6 c0             	movzx  eax,al
c0019767:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001976b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001976d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019772:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019776:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001977a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001977e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019786:	83 c4 2c             	add    esp,0x2c
c0019789:	5b                   	pop    ebx
c001978a:	5e                   	pop    esi
c001978b:	5f                   	pop    edi
c001978c:	5d                   	pop    ebp
c001978d:	e9 1e f9 ff ff       	jmp    c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019792:	3c 07                	cmp    al,0x7
c0019794:	77 10                	ja     c00197a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019796:	0f b6 db             	movzx  ebx,bl
c0019799:	0f b6 d0             	movzx  edx,al
c001979c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197a4:	eb 2d                	jmp    c00197d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197a6:	3c 0d                	cmp    al,0xd
c00197a8:	77 13                	ja     c00197bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197aa:	0f b6 db             	movzx  ebx,bl
c00197ad:	0f b6 c0             	movzx  eax,al
c00197b0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197b7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197bb:	eb 16                	jmp    c00197d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197bd:	3c 15                	cmp    al,0x15
c00197bf:	77 14                	ja     c00197d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197c1:	0f b6 db             	movzx  ebx,bl
c00197c4:	0f b6 c0             	movzx  eax,al
c00197c7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197cf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197d5:	83 c4 1c             	add    esp,0x1c
c00197d8:	5b                   	pop    ebx
c00197d9:	5e                   	pop    esi
c00197da:	5f                   	pop    edi
c00197db:	5d                   	pop    ebp
c00197dc:	c3                   	ret    
c00197dd:	90                   	nop

c00197de <IDE::detect()>:
c00197de:	55                   	push   ebp
c00197df:	57                   	push   edi
c00197e0:	56                   	push   esi
c00197e1:	53                   	push   ebx
c00197e2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197e8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197ef:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197f6:	0f 85 97 02 00 00    	jne    c0019a93 <IDE::detect()+0x2b5>
c00197fc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019803:	31 f6                	xor    esi,esi
c0019805:	31 ed                	xor    ebp,ebp
c0019807:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001980f:	89 e8                	mov    eax,ebp
c0019811:	c1 e0 06             	shl    eax,0x6
c0019814:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001981c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019820:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019824:	c1 e0 04             	shl    eax,0x4
c0019827:	83 c8 a0             	or     eax,0xffffffa0
c001982a:	0f b6 c0             	movzx  eax,al
c001982d:	50                   	push   eax
c001982e:	6a 06                	push   0x6
c0019830:	56                   	push   esi
c0019831:	53                   	push   ebx
c0019832:	e8 79 f8 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019837:	83 c4 0c             	add    esp,0xc
c001983a:	6a 0c                	push   0xc
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	e8 2d f9 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019843:	83 c4 0c             	add    esp,0xc
c0019846:	6a 0c                	push   0xc
c0019848:	56                   	push   esi
c0019849:	53                   	push   ebx
c001984a:	e8 21 f9 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001984f:	83 c4 0c             	add    esp,0xc
c0019852:	6a 0c                	push   0xc
c0019854:	56                   	push   esi
c0019855:	53                   	push   ebx
c0019856:	e8 15 f9 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001985b:	83 c4 0c             	add    esp,0xc
c001985e:	6a 0c                	push   0xc
c0019860:	56                   	push   esi
c0019861:	53                   	push   ebx
c0019862:	e8 09 f9 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019867:	68 ec 00 00 00       	push   0xec
c001986c:	6a 07                	push   0x7
c001986e:	56                   	push   esi
c001986f:	53                   	push   ebx
c0019870:	e8 3b f8 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019875:	83 c4 1c             	add    esp,0x1c
c0019878:	6a 0c                	push   0xc
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	e8 ef f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019881:	83 c4 0c             	add    esp,0xc
c0019884:	6a 0c                	push   0xc
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	e8 e3 f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	6a 0c                	push   0xc
c0019892:	56                   	push   esi
c0019893:	53                   	push   ebx
c0019894:	e8 d7 f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019899:	83 c4 0c             	add    esp,0xc
c001989c:	6a 0c                	push   0xc
c001989e:	56                   	push   esi
c001989f:	53                   	push   ebx
c00198a0:	e8 cb f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00198a5:	83 c4 0c             	add    esp,0xc
c00198a8:	6a 0c                	push   0xc
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	e8 bf f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	84 c0                	test   al,al
c00198b6:	0f 84 5f 01 00 00    	je     c0019a1b <IDE::detect()+0x23d>
c00198bc:	31 ff                	xor    edi,edi
c00198be:	50                   	push   eax
c00198bf:	6a 0c                	push   0xc
c00198c1:	56                   	push   esi
c00198c2:	53                   	push   ebx
c00198c3:	e8 a8 f8 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c00198c8:	83 c4 10             	add    esp,0x10
c00198cb:	a8 01                	test   al,0x1
c00198cd:	0f 85 69 01 00 00    	jne    c0019a3c <IDE::detect()+0x25e>
c00198d3:	84 c0                	test   al,al
c00198d5:	78 04                	js     c00198db <IDE::detect()+0xfd>
c00198d7:	a8 08                	test   al,0x8
c00198d9:	75 23                	jne    c00198fe <IDE::detect()+0x120>
c00198db:	47                   	inc    edi
c00198dc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198e2:	7e da                	jle    c00198be <IDE::detect()+0xe0>
c00198e4:	83 ec 0c             	sub    esp,0xc
c00198e7:	6a 32                	push   0x32
c00198e9:	e8 52 a2 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c00198ee:	83 c4 10             	add    esp,0x10
c00198f1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198f7:	75 c5                	jne    c00198be <IDE::detect()+0xe0>
c00198f9:	e9 3e 01 00 00       	jmp    c0019a3c <IDE::detect()+0x25e>
c00198fe:	31 c9                	xor    ecx,ecx
c0019900:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019904:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019908:	83 ec 0c             	sub    esp,0xc
c001990b:	68 80 00 00 00       	push   0x80
c0019910:	57                   	push   edi
c0019911:	6a 00                	push   0x0
c0019913:	56                   	push   esi
c0019914:	53                   	push   ebx
c0019915:	e8 f8 fd ff ff       	call   c0019712 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001991a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001991f:	89 e8                	mov    eax,ebp
c0019921:	89 d1                	mov    ecx,edx
c0019923:	c1 e0 06             	shl    eax,0x6
c0019926:	01 d8                	add    eax,ebx
c0019928:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001992f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019936:	89 f2                	mov    edx,esi
c0019938:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001993e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019942:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019948:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001994c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019953:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001995b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019962:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001996a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019970:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019977:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001997d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019981:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019985:	83 c4 20             	add    esp,0x20
c0019988:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001998b:	83 c0 02             	add    eax,0x2
c001998e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019994:	83 c7 02             	add    edi,0x2
c0019997:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001999a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199a4:	75 e2                	jne    c0019988 <IDE::detect()+0x1aa>
c00199a6:	89 e8                	mov    eax,ebp
c00199a8:	c1 e0 06             	shl    eax,0x6
c00199ab:	01 d8                	add    eax,ebx
c00199ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199ba:	66 c1 ea 09          	shr    dx,0x9
c00199be:	83 e2 01             	and    edx,0x1
c00199c1:	84 c9                	test   cl,cl
c00199c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199c9:	75 22                	jne    c00199ed <IDE::detect()+0x20f>
c00199cb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199d2:	74 46                	je     c0019a1a <IDE::detect()+0x23c>
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	68 7c 01 00 00       	push   0x17c
c00199dc:	e8 94 de fe ff       	call   c0007875 <malloc>
c00199e1:	89 c7                	mov    edi,eax
c00199e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00199e6:	e8 11 05 00 00       	call   c0019efc <ATA::ATA()>
c00199eb:	eb 17                	jmp    c0019a04 <IDE::detect()+0x226>
c00199ed:	83 ec 0c             	sub    esp,0xc
c00199f0:	68 84 01 00 00       	push   0x184
c00199f5:	e8 7b de fe ff       	call   c0007875 <malloc>
c00199fa:	89 c7                	mov    edi,eax
c00199fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ff:	e8 1e 0e 00 00       	call   c001a822 <ATAPI::ATAPI()>
c0019a04:	5a                   	pop    edx
c0019a05:	59                   	pop    ecx
c0019a06:	57                   	push   edi
c0019a07:	53                   	push   ebx
c0019a08:	e8 3f 20 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0019a0d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a0f:	53                   	push   ebx
c0019a10:	55                   	push   ebp
c0019a11:	6a 00                	push   0x0
c0019a13:	57                   	push   edi
c0019a14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a17:	83 c4 20             	add    esp,0x20
c0019a1a:	45                   	inc    ebp
c0019a1b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a20:	74 0d                	je     c0019a2f <IDE::detect()+0x251>
c0019a22:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a2a:	e9 e0 fd ff ff       	jmp    c001980f <IDE::detect()+0x31>
c0019a2f:	4e                   	dec    esi
c0019a30:	74 61                	je     c0019a93 <IDE::detect()+0x2b5>
c0019a32:	be 01 00 00 00       	mov    esi,0x1
c0019a37:	e9 cb fd ff ff       	jmp    c0019807 <IDE::detect()+0x29>
c0019a3c:	50                   	push   eax
c0019a3d:	6a 04                	push   0x4
c0019a3f:	56                   	push   esi
c0019a40:	53                   	push   ebx
c0019a41:	e8 2a f7 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019a46:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a4a:	83 c4 0c             	add    esp,0xc
c0019a4d:	6a 05                	push   0x5
c0019a4f:	56                   	push   esi
c0019a50:	53                   	push   ebx
c0019a51:	e8 1a f7 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a5d:	80 fa 14             	cmp    dl,0x14
c0019a60:	75 04                	jne    c0019a66 <IDE::detect()+0x288>
c0019a62:	3c eb                	cmp    al,0xeb
c0019a64:	eb 07                	jmp    c0019a6d <IDE::detect()+0x28f>
c0019a66:	3c 96                	cmp    al,0x96
c0019a68:	75 b1                	jne    c0019a1b <IDE::detect()+0x23d>
c0019a6a:	80 fa 69             	cmp    dl,0x69
c0019a6d:	75 ac                	jne    c0019a1b <IDE::detect()+0x23d>
c0019a6f:	68 a1 00 00 00       	push   0xa1
c0019a74:	6a 07                	push   0x7
c0019a76:	56                   	push   esi
c0019a77:	53                   	push   ebx
c0019a78:	e8 33 f6 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a7d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a84:	e8 b7 a0 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c0019a89:	83 c4 10             	add    esp,0x10
c0019a8c:	b1 01                	mov    cl,0x1
c0019a8e:	e9 6d fe ff ff       	jmp    c0019900 <IDE::detect()+0x122>
c0019a93:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a99:	5b                   	pop    ebx
c0019a9a:	5e                   	pop    esi
c0019a9b:	5f                   	pop    edi
c0019a9c:	5d                   	pop    ebp
c0019a9d:	c3                   	ret    

c0019a9e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a9e:	55                   	push   ebp
c0019a9f:	57                   	push   edi
c0019aa0:	56                   	push   esi
c0019aa1:	53                   	push   ebx
c0019aa2:	83 ec 1c             	sub    esp,0x1c
c0019aa5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019aa9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019aad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ab1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ab5:	88 c3                	mov    bl,al
c0019ab7:	84 c0                	test   al,al
c0019ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019abd:	0f 84 81 00 00 00    	je     c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ac3:	83 ec 0c             	sub    esp,0xc
c0019ac6:	68 8f fb 01 c0       	push   0xc001fb8f
c0019acb:	e8 3e 0b ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ad7:	3c 01                	cmp    al,0x1
c0019ad9:	74 63                	je     c0019b3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019adb:	3c 02                	cmp    al,0x2
c0019add:	75 53                	jne    c0019b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019adf:	01 f6                	add    esi,esi
c0019ae1:	09 ee                	or     esi,ebp
c0019ae3:	50                   	push   eax
c0019ae4:	89 f0                	mov    eax,esi
c0019ae6:	6a 01                	push   0x1
c0019ae8:	0f b6 f0             	movzx  esi,al
c0019aeb:	c1 e6 06             	shl    esi,0x6
c0019aee:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019af6:	50                   	push   eax
c0019af7:	57                   	push   edi
c0019af8:	e8 73 f6 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	a8 01                	test   al,0x1
c0019b02:	74 02                	je     c0019b06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b04:	b3 07                	mov    bl,0x7
c0019b06:	a8 02                	test   al,0x2
c0019b08:	74 02                	je     c0019b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b0a:	b3 03                	mov    bl,0x3
c0019b0c:	a8 04                	test   al,0x4
c0019b0e:	74 02                	je     c0019b12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b10:	b3 14                	mov    bl,0x14
c0019b12:	a8 08                	test   al,0x8
c0019b14:	74 02                	je     c0019b18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b16:	b3 03                	mov    bl,0x3
c0019b18:	a8 10                	test   al,0x10
c0019b1a:	74 02                	je     c0019b1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b1c:	b3 15                	mov    bl,0x15
c0019b1e:	a8 20                	test   al,0x20
c0019b20:	74 02                	je     c0019b24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b22:	b3 03                	mov    bl,0x3
c0019b24:	a8 40                	test   al,0x40
c0019b26:	74 02                	je     c0019b2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b28:	b3 16                	mov    bl,0x16
c0019b2a:	84 c0                	test   al,al
c0019b2c:	79 16                	jns    c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b2e:	b3 0d                	mov    bl,0xd
c0019b30:	eb 12                	jmp    c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b32:	3c 03                	cmp    al,0x3
c0019b34:	74 0c                	je     c0019b42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b36:	3c 04                	cmp    al,0x4
c0019b38:	75 0a                	jne    c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3a:	b3 08                	mov    bl,0x8
c0019b3c:	eb 06                	jmp    c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b3e:	b3 13                	mov    bl,0x13
c0019b40:	eb 02                	jmp    c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b42:	b3 17                	mov    bl,0x17
c0019b44:	83 c4 1c             	add    esp,0x1c
c0019b47:	88 d8                	mov    al,bl
c0019b49:	5b                   	pop    ebx
c0019b4a:	5e                   	pop    esi
c0019b4b:	5f                   	pop    edi
c0019b4c:	5d                   	pop    ebp
c0019b4d:	c3                   	ret    

c0019b4e <IDE::polling(unsigned char, unsigned int)>:
c0019b4e:	55                   	push   ebp
c0019b4f:	bd 04 00 00 00       	mov    ebp,0x4
c0019b54:	57                   	push   edi
c0019b55:	56                   	push   esi
c0019b56:	53                   	push   ebx
c0019b57:	83 ec 0c             	sub    esp,0xc
c0019b5a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b5e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b62:	0f b6 f3             	movzx  esi,bl
c0019b65:	52                   	push   edx
c0019b66:	6a 0c                	push   0xc
c0019b68:	56                   	push   esi
c0019b69:	57                   	push   edi
c0019b6a:	e8 01 f6 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	4d                   	dec    ebp
c0019b73:	75 ed                	jne    c0019b62 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b75:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b7a:	50                   	push   eax
c0019b7b:	6a 0c                	push   0xc
c0019b7d:	56                   	push   esi
c0019b7e:	57                   	push   edi
c0019b7f:	e8 ec f5 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	a8 01                	test   al,0x1
c0019b89:	75 17                	jne    c0019ba2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b8b:	a8 20                	test   al,0x20
c0019b8d:	75 0f                	jne    c0019b9e <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b8f:	4b                   	dec    ebx
c0019b90:	74 10                	je     c0019ba2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b92:	84 c0                	test   al,al
c0019b94:	78 e4                	js     c0019b7a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b96:	a8 08                	test   al,0x8
c0019b98:	74 e0                	je     c0019b7a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b9a:	31 c0                	xor    eax,eax
c0019b9c:	eb 06                	jmp    c0019ba4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b9e:	b0 01                	mov    al,0x1
c0019ba0:	eb 02                	jmp    c0019ba4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ba2:	b0 02                	mov    al,0x2
c0019ba4:	83 c4 0c             	add    esp,0xc
c0019ba7:	5b                   	pop    ebx
c0019ba8:	5e                   	pop    esi
c0019ba9:	5f                   	pop    edi
c0019baa:	5d                   	pop    ebp
c0019bab:	c3                   	ret    

c0019bac <SATABus::close(int, int, void*)>:
c0019bac:	31 c0                	xor    eax,eax
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <SATABus::detect()>:
c0019bb0:	c3                   	ret    
c0019bb1:	90                   	nop

c0019bb2 <SATABus::SATABus()>:
c0019bb2:	83 ec 0c             	sub    esp,0xc
c0019bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb9:	83 ec 08             	sub    esp,0x8
c0019bbc:	68 c8 fb 01 c0       	push   0xc001fbc8
c0019bc1:	50                   	push   eax
c0019bc2:	e8 c9 21 ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c0019bc7:	83 c4 10             	add    esp,0x10
c0019bca:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c0019bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd3:	89 10                	mov    DWORD PTR [eax],edx
c0019bd5:	83 ec 0c             	sub    esp,0xc
c0019bd8:	6a 50                	push   0x50
c0019bda:	e8 30 e0 fe ff       	call   c0007c0f <Phys::allocateContiguousPages(int)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	89 c2                	mov    edx,eax
c0019be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bee:	83 ec 0c             	sub    esp,0xc
c0019bf1:	6a 50                	push   0x50
c0019bf3:	e8 59 f7 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0019bf8:	83 c4 10             	add    esp,0x10
c0019bfb:	89 c2                	mov    edx,eax
c0019bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c07:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0019c0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c10:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c1a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c20:	83 ec 0c             	sub    esp,0xc
c0019c23:	6a 03                	push   0x3
c0019c25:	6a 50                	push   0x50
c0019c27:	51                   	push   ecx
c0019c28:	52                   	push   edx
c0019c29:	50                   	push   eax
c0019c2a:	e8 df 00 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c2f:	83 c4 20             	add    esp,0x20
c0019c32:	90                   	nop
c0019c33:	83 c4 0c             	add    esp,0xc
c0019c36:	c3                   	ret    
c0019c37:	90                   	nop

c0019c38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c42:	09 c2                	or     edx,eax
c0019c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c50:	31 c0                	xor    eax,eax
c0019c52:	c1 e9 08             	shr    ecx,0x8
c0019c55:	83 e1 0f             	and    ecx,0xf
c0019c58:	39 c8                	cmp    eax,ecx
c0019c5a:	74 0a                	je     c0019c66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c5c:	f6 c2 01             	test   dl,0x1
c0019c5f:	74 08                	je     c0019c69 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c61:	d1 ea                	shr    edx,1
c0019c63:	40                   	inc    eax
c0019c64:	eb f2                	jmp    c0019c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c66:	83 c8 ff             	or     eax,0xffffffff
c0019c69:	c3                   	ret    

c0019c6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c6e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c71:	89 c2                	mov    edx,eax
c0019c73:	c1 ea 08             	shr    edx,0x8
c0019c76:	83 e2 0f             	and    edx,0xf
c0019c79:	fe ca                	dec    dl
c0019c7b:	75 31                	jne    c0019cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c7d:	83 e0 0f             	and    eax,0xf
c0019c80:	3c 03                	cmp    al,0x3
c0019c82:	75 2a                	jne    c0019cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c84:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c87:	b8 02 00 00 00       	mov    eax,0x2
c0019c8c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c92:	74 1c                	je     c0019cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c94:	b8 04 00 00 00       	mov    eax,0x4
c0019c99:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c9f:	74 0f                	je     c0019cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ca1:	31 c0                	xor    eax,eax
c0019ca3:	83 fa 03             	cmp    edx,0x3
c0019ca6:	0f 94 c0             	sete   al
c0019ca9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019cad:	c3                   	ret    
c0019cae:	31 c0                	xor    eax,eax
c0019cb0:	c3                   	ret    
c0019cb1:	90                   	nop

c0019cb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb9:	0f ba e2 0f          	bt     edx,0xf
c0019cbd:	72 f7                	jb     c0019cb6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019cbf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc2:	83 ca 10             	or     edx,0x10
c0019cc5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ccb:	83 ca 01             	or     edx,0x1
c0019cce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cd1:	c3                   	ret    

c0019cd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd9:	83 e2 fe             	and    edx,0xfffffffe
c0019cdc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cdf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce2:	83 e2 ef             	and    edx,0xffffffef
c0019ce5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ce8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ceb:	0f ba e2 0e          	bt     edx,0xe
c0019cef:	72 f7                	jb     c0019ce8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cf4:	0f ba e2 0f          	bt     edx,0xf
c0019cf8:	72 ee                	jb     c0019ce8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cfa:	c3                   	ret    
c0019cfb:	90                   	nop

c0019cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019cfc:	55                   	push   ebp
c0019cfd:	57                   	push   edi
c0019cfe:	56                   	push   esi
c0019cff:	53                   	push   ebx
c0019d00:	83 ec 1c             	sub    esp,0x1c
c0019d03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d0b:	53                   	push   ebx
c0019d0c:	56                   	push   esi
c0019d0d:	e8 c0 ff ff ff       	call   c0019cd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d16:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d1c:	83 ec 0c             	sub    esp,0xc
c0019d1f:	c1 e5 0a             	shl    ebp,0xa
c0019d22:	01 e8                	add    eax,ebp
c0019d24:	89 03                	mov    DWORD PTR [ebx],eax
c0019d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d28:	68 00 04 00 00       	push   0x400
c0019d2d:	6a 00                	push   0x0
c0019d2f:	50                   	push   eax
c0019d30:	e8 9b 67 fe ff       	call   c00004d0 <memset>
c0019d35:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d3b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d3f:	01 e8                	add    eax,ebp
c0019d41:	83 c4 1c             	add    esp,0x1c
c0019d44:	89 03                	mov    DWORD PTR [ebx],eax
c0019d46:	c1 e2 08             	shl    edx,0x8
c0019d49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d50:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d56:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d5c:	01 f8                	add    eax,edi
c0019d5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d64:	68 00 01 00 00       	push   0x100
c0019d69:	6a 00                	push   0x0
c0019d6b:	50                   	push   eax
c0019d6c:	e8 5f 67 fe ff       	call   c00004d0 <memset>
c0019d71:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d77:	01 fa                	add    edx,edi
c0019d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d7d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d80:	c1 e7 0d             	shl    edi,0xd
c0019d83:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d8a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d90:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d9a:	31 ff                	xor    edi,edi
c0019d9c:	83 c4 10             	add    esp,0x10
c0019d9f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019da9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019daf:	83 c5 20             	add    ebp,0x20
c0019db2:	01 f8                	add    eax,edi
c0019db4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019db7:	52                   	push   edx
c0019db8:	68 00 01 00 00       	push   0x100
c0019dbd:	6a 00                	push   0x0
c0019dbf:	50                   	push   eax
c0019dc0:	e8 0b 67 fe ff       	call   c00004d0 <memset>
c0019dc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dd2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019dd9:	01 f8                	add    eax,edi
c0019ddb:	81 c7 00 01 00 00    	add    edi,0x100
c0019de1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019de4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dea:	75 b3                	jne    c0019d9f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dec:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019df3:	50                   	push   eax
c0019df4:	50                   	push   eax
c0019df5:	53                   	push   ebx
c0019df6:	56                   	push   esi
c0019df7:	e8 b6 fe ff ff       	call   c0019cb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019dfc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e03:	83 c4 2c             	add    esp,0x2c
c0019e06:	5b                   	pop    ebx
c0019e07:	5e                   	pop    esi
c0019e08:	5f                   	pop    edi
c0019e09:	5d                   	pop    ebp
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop

c0019e0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e0c:	55                   	push   ebp
c0019e0d:	57                   	push   edi
c0019e0e:	56                   	push   esi
c0019e0f:	53                   	push   ebx
c0019e10:	31 db                	xor    ebx,ebx
c0019e12:	83 ec 0c             	sub    esp,0xc
c0019e15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e19:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e1d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e20:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e26:	74 7a                	je     c0019ea2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e28:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e2c:	89 d8                	mov    eax,ebx
c0019e2e:	c1 e0 07             	shl    eax,0x7
c0019e31:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e38:	55                   	push   ebp
c0019e39:	56                   	push   esi
c0019e3a:	e8 2b fe ff ff       	call   c0019c6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e3f:	5a                   	pop    edx
c0019e40:	83 f8 01             	cmp    eax,0x1
c0019e43:	59                   	pop    ecx
c0019e44:	75 21                	jne    c0019e67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e46:	50                   	push   eax
c0019e47:	53                   	push   ebx
c0019e48:	55                   	push   ebp
c0019e49:	56                   	push   esi
c0019e4a:	e8 ad fe ff ff       	call   c0019cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e4f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e56:	e8 1a da fe ff       	call   c0007875 <malloc>
c0019e5b:	89 c5                	mov    ebp,eax
c0019e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e60:	e8 71 10 00 00       	call   c001aed6 <SATA::SATA()>
c0019e65:	eb 24                	jmp    c0019e8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e67:	83 f8 04             	cmp    eax,0x4
c0019e6a:	75 36                	jne    c0019ea2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e6c:	51                   	push   ecx
c0019e6d:	53                   	push   ebx
c0019e6e:	55                   	push   ebp
c0019e6f:	56                   	push   esi
c0019e70:	e8 87 fe ff ff       	call   c0019cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e75:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e7c:	e8 f4 d9 fe ff       	call   c0007875 <malloc>
c0019e81:	89 c5                	mov    ebp,eax
c0019e83:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e86:	e8 a5 17 00 00       	call   c001b630 <SATAPI::SATAPI()>
c0019e8b:	58                   	pop    eax
c0019e8c:	5a                   	pop    edx
c0019e8d:	55                   	push   ebp
c0019e8e:	56                   	push   esi
c0019e8f:	e8 b8 1b ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0019e94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e97:	56                   	push   esi
c0019e98:	6a 00                	push   0x0
c0019e9a:	53                   	push   ebx
c0019e9b:	55                   	push   ebp
c0019e9c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e9f:	83 c4 20             	add    esp,0x20
c0019ea2:	d1 ef                	shr    edi,1
c0019ea4:	43                   	inc    ebx
c0019ea5:	83 fb 20             	cmp    ebx,0x20
c0019ea8:	0f 85 72 ff ff ff    	jne    c0019e20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019eae:	83 c4 0c             	add    esp,0xc
c0019eb1:	5b                   	pop    ebx
c0019eb2:	5e                   	pop    esi
c0019eb3:	5f                   	pop    edi
c0019eb4:	5d                   	pop    ebp
c0019eb5:	c3                   	ret    

c0019eb6 <SATABus::open(int, int, void*)>:
c0019eb6:	83 ec 14             	sub    esp,0x14
c0019eb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ebd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ec3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ec9:	52                   	push   edx
c0019eca:	50                   	push   eax
c0019ecb:	e8 3c ff ff ff       	call   c0019e0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019ed0:	31 c0                	xor    eax,eax
c0019ed2:	83 c4 1c             	add    esp,0x1c
c0019ed5:	c3                   	ret    

c0019ed6 <ATA::close(int, int, void*)>:
c0019ed6:	83 ec 0c             	sub    esp,0xc
c0019ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019edd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ee3:	85 c0                	test   eax,eax
c0019ee5:	74 0c                	je     c0019ef3 <ATA::close(int, int, void*)+0x1d>
c0019ee7:	83 ec 0c             	sub    esp,0xc
c0019eea:	8b 10                	mov    edx,DWORD PTR [eax]
c0019eec:	50                   	push   eax
c0019eed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	31 c0                	xor    eax,eax
c0019ef5:	83 c4 0c             	add    esp,0xc
c0019ef8:	c3                   	ret    
c0019ef9:	90                   	nop

c0019efa <ATA::powerSaving(PowerSavingLevel)>:
c0019efa:	c3                   	ret    
c0019efb:	90                   	nop

c0019efc <ATA::ATA()>:
c0019efc:	83 ec 0c             	sub    esp,0xc
c0019eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f03:	83 ec 04             	sub    esp,0x4
c0019f06:	68 00 02 00 00       	push   0x200
c0019f0b:	68 c1 fc 01 c0       	push   0xc001fcc1
c0019f10:	50                   	push   eax
c0019f11:	e8 04 1f ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f16:	83 c4 10             	add    esp,0x10
c0019f19:	ba 34 fc 01 c0       	mov    edx,0xc001fc34
c0019f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f22:	89 10                	mov    DWORD PTR [eax],edx
c0019f24:	90                   	nop
c0019f25:	83 c4 0c             	add    esp,0xc
c0019f28:	c3                   	ret    
c0019f29:	90                   	nop

c0019f2a <ATA::flush(bool)>:
c0019f2a:	53                   	push   ebx
c0019f2b:	83 ec 08             	sub    esp,0x8
c0019f2e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f37:	19 c0                	sbb    eax,eax
c0019f39:	83 e0 fd             	and    eax,0xfffffffd
c0019f3c:	05 ea 00 00 00       	add    eax,0xea
c0019f41:	50                   	push   eax
c0019f42:	6a 07                	push   0x7
c0019f44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f4b:	50                   	push   eax
c0019f4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f52:	e8 59 f1 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f57:	83 c4 0c             	add    esp,0xc
c0019f5a:	6a 00                	push   0x0
c0019f5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f63:	50                   	push   eax
c0019f64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f6a:	e8 df fb ff ff       	call   c0019b4e <IDE::polling(unsigned char, unsigned int)>
c0019f6f:	83 c4 18             	add    esp,0x18
c0019f72:	5b                   	pop    ebx
c0019f73:	c3                   	ret    

c0019f74 <ATA::readyForCommand()>:
c0019f74:	56                   	push   esi
c0019f75:	53                   	push   ebx
c0019f76:	53                   	push   ebx
c0019f77:	31 db                	xor    ebx,ebx
c0019f79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f7d:	51                   	push   ecx
c0019f7e:	6a 0c                	push   0xc
c0019f80:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f87:	50                   	push   eax
c0019f88:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f8e:	e8 dd f1 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c0019f93:	83 c4 10             	add    esp,0x10
c0019f96:	a8 88                	test   al,0x88
c0019f98:	74 1f                	je     c0019fb9 <ATA::readyForCommand()+0x45>
c0019f9a:	43                   	inc    ebx
c0019f9b:	83 fb 63             	cmp    ebx,0x63
c0019f9e:	7e dd                	jle    c0019f7d <ATA::readyForCommand()+0x9>
c0019fa0:	83 ec 0c             	sub    esp,0xc
c0019fa3:	6a 0a                	push   0xa
c0019fa5:	e8 96 9b ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c0019faa:	83 c4 10             	add    esp,0x10
c0019fad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fb3:	75 c8                	jne    c0019f7d <ATA::readyForCommand()+0x9>
c0019fb5:	31 c0                	xor    eax,eax
c0019fb7:	eb 02                	jmp    c0019fbb <ATA::readyForCommand()+0x47>
c0019fb9:	b0 01                	mov    al,0x1
c0019fbb:	5a                   	pop    edx
c0019fbc:	5b                   	pop    ebx
c0019fbd:	5e                   	pop    esi
c0019fbe:	c3                   	ret    
c0019fbf:	90                   	nop

c0019fc0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019fc0:	55                   	push   ebp
c0019fc1:	57                   	push   edi
c0019fc2:	56                   	push   esi
c0019fc3:	53                   	push   ebx
c0019fc4:	83 ec 2c             	sub    esp,0x2c
c0019fc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fcb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fcf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fd7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fdb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fdf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fe3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ff3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ff7:	c1 e0 06             	shl    eax,0x6
c0019ffa:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a002:	74 5d                	je     c001a061 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a004:	89 fa                	mov    edx,edi
c001a006:	89 f0                	mov    eax,esi
c001a008:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a00c:	c1 ea 1c             	shr    edx,0x1c
c001a00f:	89 d1                	mov    ecx,edx
c001a011:	09 c1                	or     ecx,eax
c001a013:	74 25                	je     c001a03a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a015:	31 ed                	xor    ebp,ebp
c001a017:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a01e:	89 fa                	mov    edx,edi
c001a020:	89 f0                	mov    eax,esi
c001a022:	0f ad d0             	shrd   eax,edx,cl
c001a025:	d3 ea                	shr    edx,cl
c001a027:	f6 c1 20             	test   cl,0x20
c001a02a:	74 02                	je     c001a02e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a02c:	89 d0                	mov    eax,edx
c001a02e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a032:	45                   	inc    ebp
c001a033:	83 fd 06             	cmp    ebp,0x6
c001a036:	75 df                	jne    c001a017 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a038:	eb 76                	jmp    c001a0b0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a03a:	89 f0                	mov    eax,esi
c001a03c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a041:	89 fa                	mov    edx,edi
c001a043:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a04a:	0f ac d0 10          	shrd   eax,edx,0x10
c001a04e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a053:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a057:	c1 ee 18             	shr    esi,0x18
c001a05a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a05f:	eb 56                	jmp    c001a0b7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a061:	6a 00                	push   0x0
c001a063:	6a 3f                	push   0x3f
c001a065:	57                   	push   edi
c001a066:	56                   	push   esi
c001a067:	e8 a4 29 00 00       	call   c001ca10 <__umoddi3>
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	40                   	inc    eax
c001a070:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a074:	6a 00                	push   0x0
c001a076:	68 f0 03 00 00       	push   0x3f0
c001a07b:	57                   	push   edi
c001a07c:	56                   	push   esi
c001a07d:	e8 8e 28 00 00       	call   c001c910 <__udivdi3>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a08a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a091:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a096:	6a 00                	push   0x0
c001a098:	6a 3f                	push   0x3f
c001a09a:	57                   	push   edi
c001a09b:	56                   	push   esi
c001a09c:	e8 6f 28 00 00       	call   c001c910 <__udivdi3>
c001a0a1:	83 c4 10             	add    esp,0x10
c001a0a4:	89 c6                	mov    esi,eax
c001a0a6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0ab:	83 e6 0f             	and    esi,0xf
c001a0ae:	eb 07                	jmp    c001a0b7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0b0:	31 f6                	xor    esi,esi
c001a0b2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0b7:	bf 01 00 00 00       	mov    edi,0x1
c001a0bc:	50                   	push   eax
c001a0bd:	6a 00                	push   0x0
c001a0bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c6:	50                   	push   eax
c001a0c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0cb:	e8 ee f1 ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c001a0d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0d3:	e8 9c fe ff ff       	call   c0019f74 <ATA::readyForCommand()>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	84 c0                	test   al,al
c001a0dd:	0f 84 4e 02 00 00    	je     c001a331 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0e3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0e9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0ef:	c1 e0 04             	shl    eax,0x4
c001a0f2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0f9:	09 c6                	or     esi,eax
c001a0fb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a100:	75 05                	jne    c001a107 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a102:	83 ce a0             	or     esi,0xffffffa0
c001a105:	eb 03                	jmp    c001a10a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a107:	83 ce e0             	or     esi,0xffffffe0
c001a10a:	89 f0                	mov    eax,esi
c001a10c:	0f b6 f0             	movzx  esi,al
c001a10f:	56                   	push   esi
c001a110:	6a 06                	push   0x6
c001a112:	51                   	push   ecx
c001a113:	52                   	push   edx
c001a114:	e8 97 ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a119:	83 c4 10             	add    esp,0x10
c001a11c:	6a 00                	push   0x0
c001a11e:	6a 01                	push   0x1
c001a120:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a127:	50                   	push   eax
c001a128:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a12e:	e8 7d ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a133:	83 c4 10             	add    esp,0x10
c001a136:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a13b:	75 6e                	jne    c001a1ab <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a13d:	6a 00                	push   0x0
c001a13f:	6a 08                	push   0x8
c001a141:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a148:	50                   	push   eax
c001a149:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a14f:	e8 5c ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a154:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a159:	50                   	push   eax
c001a15a:	6a 09                	push   0x9
c001a15c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a163:	50                   	push   eax
c001a164:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16a:	e8 41 ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a16f:	83 c4 20             	add    esp,0x20
c001a172:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a177:	50                   	push   eax
c001a178:	6a 0a                	push   0xa
c001a17a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a181:	50                   	push   eax
c001a182:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a188:	e8 23 ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a192:	50                   	push   eax
c001a193:	6a 0b                	push   0xb
c001a195:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a19c:	50                   	push   eax
c001a19d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a3:	e8 08 ef ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1a8:	83 c4 20             	add    esp,0x20
c001a1ab:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1b0:	50                   	push   eax
c001a1b1:	6a 02                	push   0x2
c001a1b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ba:	50                   	push   eax
c001a1bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c1:	e8 ea ee ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1cb:	50                   	push   eax
c001a1cc:	6a 03                	push   0x3
c001a1ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d5:	50                   	push   eax
c001a1d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1dc:	e8 cf ee ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e1:	83 c4 20             	add    esp,0x20
c001a1e4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1e9:	50                   	push   eax
c001a1ea:	6a 04                	push   0x4
c001a1ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f3:	50                   	push   eax
c001a1f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1fa:	e8 b1 ee ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a204:	50                   	push   eax
c001a205:	6a 05                	push   0x5
c001a207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a20e:	50                   	push   eax
c001a20f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a215:	e8 96 ee ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a21a:	83 c4 20             	add    esp,0x20
c001a21d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a222:	0f 94 c0             	sete   al
c001a225:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a22a:	74 09                	je     c001a235 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a22c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a233:	eb 07                	jmp    c001a23c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a235:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a23c:	0f b6 c0             	movzx  eax,al
c001a23f:	50                   	push   eax
c001a240:	6a 07                	push   0x7
c001a242:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a249:	50                   	push   eax
c001a24a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a250:	e8 5b ee ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a255:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a259:	83 c4 10             	add    esp,0x10
c001a25c:	85 f6                	test   esi,esi
c001a25e:	0f 84 ae 00 00 00    	je     c001a312 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a264:	50                   	push   eax
c001a265:	6a 01                	push   0x1
c001a267:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26e:	50                   	push   eax
c001a26f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a275:	e8 d4 f8 ff ff       	call   c0019b4e <IDE::polling(unsigned char, unsigned int)>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a283:	84 c0                	test   al,al
c001a285:	74 20                	je     c001a2a7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a287:	0f b6 f8             	movzx  edi,al
c001a28a:	0f b6 d2             	movzx  edx,dl
c001a28d:	57                   	push   edi
c001a28e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a295:	50                   	push   eax
c001a296:	52                   	push   edx
c001a297:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a29d:	e8 fc f7 ff ff       	call   c0019a9e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2a2:	e9 87 00 00 00       	jmp    c001a32e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2a7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2ac:	74 33                	je     c001a2e1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2ae:	31 ed                	xor    ebp,ebp
c001a2b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2b4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2b8:	50                   	push   eax
c001a2b9:	50                   	push   eax
c001a2ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2c1:	50                   	push   eax
c001a2c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2c8:	e8 d1 ed ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001a2cd:	89 c2                	mov    edx,eax
c001a2cf:	89 f8                	mov    eax,edi
c001a2d1:	66 ef                	out    dx,ax
c001a2d3:	45                   	inc    ebp
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2dd:	75 d1                	jne    c001a2b0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2df:	eb 23                	jmp    c001a304 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2e1:	0f b6 d2             	movzx  edx,dl
c001a2e4:	51                   	push   ecx
c001a2e5:	51                   	push   ecx
c001a2e6:	52                   	push   edx
c001a2e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2ed:	e8 ac ed ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001a2f2:	b9 00 01 00 00       	mov    ecx,0x100
c001a2f7:	89 c2                	mov    edx,eax
c001a2f9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2fd:	fc                   	cld    
c001a2fe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a301:	83 c4 10             	add    esp,0x10
c001a304:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a30c:	4e                   	dec    esi
c001a30d:	e9 4a ff ff ff       	jmp    c001a25c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a312:	31 ff                	xor    edi,edi
c001a314:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a319:	74 16                	je     c001a331 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a31b:	50                   	push   eax
c001a31c:	50                   	push   eax
c001a31d:	31 c0                	xor    eax,eax
c001a31f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a324:	0f 94 c0             	sete   al
c001a327:	50                   	push   eax
c001a328:	53                   	push   ebx
c001a329:	e8 fc fb ff ff       	call   c0019f2a <ATA::flush(bool)>
c001a32e:	83 c4 10             	add    esp,0x10
c001a331:	83 c4 2c             	add    esp,0x2c
c001a334:	89 f8                	mov    eax,edi
c001a336:	5b                   	pop    ebx
c001a337:	5e                   	pop    esi
c001a338:	5f                   	pop    edi
c001a339:	5d                   	pop    ebp
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <ATA::detectCHS()>:
c001a33c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a340:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a346:	c1 e0 06             	shl    eax,0x6
c001a349:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a34f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a359:	c7 44 24 04 18 fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fc18
c001a361:	e9 bd 5f ff ff       	jmp    c0010323 <KePanic(char const*)>

c001a366 <ATA::open(int, int, void*)>:
c001a366:	53                   	push   ebx
c001a367:	83 ec 08             	sub    esp,0x8
c001a36a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a36e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a372:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a376:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a37c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a382:	c1 e0 06             	shl    eax,0x6
c001a385:	01 d0                	add    eax,edx
c001a387:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a38e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a394:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a39b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3a5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3ab:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3b2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3b9:	75 0c                	jne    c001a3c7 <ATA::open(int, int, void*)+0x61>
c001a3bb:	83 ec 0c             	sub    esp,0xc
c001a3be:	53                   	push   ebx
c001a3bf:	e8 78 ff ff ff       	call   c001a33c <ATA::detectCHS()>
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3cd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3d3:	c1 e0 06             	shl    eax,0x6
c001a3d6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3dd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3e7:	d1 e8                	shr    eax,1
c001a3e9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3ef:	6a 04                	push   0x4
c001a3f1:	6a 0c                	push   0xc
c001a3f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3fa:	50                   	push   eax
c001a3fb:	52                   	push   edx
c001a3fc:	e8 af ec ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a401:	90                   	nop
c001a402:	90                   	nop
c001a403:	6a 00                	push   0x0
c001a405:	6a 0c                	push   0xc
c001a407:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a40e:	50                   	push   eax
c001a40f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a415:	e8 96 ec ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a41a:	83 c4 14             	add    esp,0x14
c001a41d:	53                   	push   ebx
c001a41e:	e8 5f 1a ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001a423:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a426:	e8 0b 2b ff ff       	call   c000cf36 <createPartitionsForDisk(PhysicalDisk*)>
c001a42b:	31 c0                	xor    eax,eax
c001a42d:	83 c4 18             	add    esp,0x18
c001a430:	5b                   	pop    ebx
c001a431:	c3                   	ret    

c001a432 <combineCharAndColour(char, unsigned char)>:
c001a432:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a437:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001a43d:	c1 e0 08             	shl    eax,0x8
c001a440:	09 d0                	or     eax,edx
c001a442:	c3                   	ret    

c001a443 <combineColours(unsigned char, unsigned char)>:
c001a443:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a448:	c1 e0 04             	shl    eax,0x4
c001a44b:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001a44f:	c3                   	ret    

c001a450 <ATA::read(unsigned long long, int, void*)>:
c001a450:	55                   	push   ebp
c001a451:	57                   	push   edi
c001a452:	56                   	push   esi
c001a453:	be 04 00 00 00       	mov    esi,0x4
c001a458:	53                   	push   ebx
c001a459:	83 ec 0c             	sub    esp,0xc
c001a45c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a460:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a464:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a467:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a46b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a46f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a475:	0f 87 a1 01 00 00    	ja     c001a61c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a47b:	be 06 00 00 00       	mov    esi,0x6
c001a480:	85 c9                	test   ecx,ecx
c001a482:	0f 84 94 01 00 00    	je     c001a61c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a488:	55                   	push   ebp
c001a489:	55                   	push   ebp
c001a48a:	6a 00                	push   0x0
c001a48c:	51                   	push   ecx
c001a48d:	53                   	push   ebx
c001a48e:	52                   	push   edx
c001a48f:	50                   	push   eax
c001a490:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a494:	e8 27 fb ff ff       	call   c0019fc0 <ATA::access(unsigned long long, int, void*, bool)>
c001a499:	83 c4 20             	add    esp,0x20
c001a49c:	89 c6                	mov    esi,eax
c001a49e:	85 c0                	test   eax,eax
c001a4a0:	0f 85 71 01 00 00    	jne    c001a617 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001a4a6:	03 1d 54 6b 02 c0    	add    ebx,DWORD PTR ds:0xc0026b54
c001a4ac:	89 da                	mov    edx,ebx
c001a4ae:	50                   	push   eax
c001a4af:	bd 10 27 00 00       	mov    ebp,0x2710
c001a4b4:	50                   	push   eax
c001a4b5:	89 1d 54 6b 02 c0    	mov    DWORD PTR ds:0xc0026b54,ebx
c001a4bb:	6a 0f                	push   0xf
c001a4bd:	6a 00                	push   0x0
c001a4bf:	e8 7f ff ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001a4c4:	59                   	pop    ecx
c001a4c5:	b9 0a 00 00 00       	mov    ecx,0xa
c001a4ca:	5b                   	pop    ebx
c001a4cb:	0f b6 d8             	movzx  ebx,al
c001a4ce:	89 d0                	mov    eax,edx
c001a4d0:	53                   	push   ebx
c001a4d1:	99                   	cdq    
c001a4d2:	f7 fd                	idiv   ebp
c001a4d4:	99                   	cdq    
c001a4d5:	f7 f9                	idiv   ecx
c001a4d7:	83 c2 30             	add    edx,0x30
c001a4da:	0f b6 d2             	movzx  edx,dl
c001a4dd:	52                   	push   edx
c001a4de:	e8 4f ff ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a4e3:	5f                   	pop    edi
c001a4e4:	bf e8 03 00 00       	mov    edi,0x3e8
c001a4e9:	5a                   	pop    edx
c001a4ea:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a4f0:	53                   	push   ebx
c001a4f1:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a4f6:	99                   	cdq    
c001a4f7:	f7 ff                	idiv   edi
c001a4f9:	99                   	cdq    
c001a4fa:	f7 f9                	idiv   ecx
c001a4fc:	8d 42 30             	lea    eax,[edx+0x30]
c001a4ff:	0f b6 c0             	movzx  eax,al
c001a502:	50                   	push   eax
c001a503:	e8 2a ff ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a508:	5f                   	pop    edi
c001a509:	bf 64 00 00 00       	mov    edi,0x64
c001a50e:	5a                   	pop    edx
c001a50f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a515:	53                   	push   ebx
c001a516:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a51b:	99                   	cdq    
c001a51c:	f7 ff                	idiv   edi
c001a51e:	99                   	cdq    
c001a51f:	f7 f9                	idiv   ecx
c001a521:	8d 42 30             	lea    eax,[edx+0x30]
c001a524:	0f b6 c0             	movzx  eax,al
c001a527:	50                   	push   eax
c001a528:	e8 05 ff ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a52d:	5a                   	pop    edx
c001a52e:	5a                   	pop    edx
c001a52f:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a535:	53                   	push   ebx
c001a536:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a53b:	99                   	cdq    
c001a53c:	f7 f9                	idiv   ecx
c001a53e:	99                   	cdq    
c001a53f:	f7 f9                	idiv   ecx
c001a541:	8d 42 30             	lea    eax,[edx+0x30]
c001a544:	0f b6 c0             	movzx  eax,al
c001a547:	50                   	push   eax
c001a548:	e8 e5 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a54d:	5a                   	pop    edx
c001a54e:	5a                   	pop    edx
c001a54f:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a555:	53                   	push   ebx
c001a556:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a55b:	99                   	cdq    
c001a55c:	f7 f9                	idiv   ecx
c001a55e:	83 c2 30             	add    edx,0x30
c001a561:	0f b6 d2             	movzx  edx,dl
c001a564:	52                   	push   edx
c001a565:	e8 c8 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a56a:	5a                   	pop    edx
c001a56b:	5a                   	pop    edx
c001a56c:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a572:	53                   	push   ebx
c001a573:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a578:	99                   	cdq    
c001a579:	f7 fd                	idiv   ebp
c001a57b:	99                   	cdq    
c001a57c:	f7 f9                	idiv   ecx
c001a57e:	8d 42 30             	lea    eax,[edx+0x30]
c001a581:	0f b6 c0             	movzx  eax,al
c001a584:	50                   	push   eax
c001a585:	e8 a8 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a58a:	5d                   	pop    ebp
c001a58b:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a590:	5a                   	pop    edx
c001a591:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a597:	53                   	push   ebx
c001a598:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a59d:	99                   	cdq    
c001a59e:	f7 fd                	idiv   ebp
c001a5a0:	99                   	cdq    
c001a5a1:	f7 f9                	idiv   ecx
c001a5a3:	8d 42 30             	lea    eax,[edx+0x30]
c001a5a6:	0f b6 c0             	movzx  eax,al
c001a5a9:	50                   	push   eax
c001a5aa:	e8 83 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a5af:	5d                   	pop    ebp
c001a5b0:	5a                   	pop    edx
c001a5b1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a5b7:	53                   	push   ebx
c001a5b8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5bd:	99                   	cdq    
c001a5be:	f7 ff                	idiv   edi
c001a5c0:	99                   	cdq    
c001a5c1:	f7 f9                	idiv   ecx
c001a5c3:	8d 42 30             	lea    eax,[edx+0x30]
c001a5c6:	0f b6 c0             	movzx  eax,al
c001a5c9:	50                   	push   eax
c001a5ca:	e8 63 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a5cf:	5f                   	pop    edi
c001a5d0:	5d                   	pop    ebp
c001a5d1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a5d7:	53                   	push   ebx
c001a5d8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5dd:	99                   	cdq    
c001a5de:	f7 f9                	idiv   ecx
c001a5e0:	99                   	cdq    
c001a5e1:	f7 f9                	idiv   ecx
c001a5e3:	8d 42 30             	lea    eax,[edx+0x30]
c001a5e6:	0f b6 c0             	movzx  eax,al
c001a5e9:	50                   	push   eax
c001a5ea:	e8 43 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a5ef:	5a                   	pop    edx
c001a5f0:	5f                   	pop    edi
c001a5f1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a5f7:	53                   	push   ebx
c001a5f8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5fd:	99                   	cdq    
c001a5fe:	f7 f9                	idiv   ecx
c001a600:	83 c2 30             	add    edx,0x30
c001a603:	0f b6 d2             	movzx  edx,dl
c001a606:	52                   	push   edx
c001a607:	e8 26 fe ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a60c:	83 c4 10             	add    esp,0x10
c001a60f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a615:	eb 05                	jmp    c001a61c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a617:	be 01 00 00 00       	mov    esi,0x1
c001a61c:	83 c4 0c             	add    esp,0xc
c001a61f:	89 f0                	mov    eax,esi
c001a621:	5b                   	pop    ebx
c001a622:	5e                   	pop    esi
c001a623:	5f                   	pop    edi
c001a624:	5d                   	pop    ebp
c001a625:	c3                   	ret    

c001a626 <ATA::write(unsigned long long, int, void*)>:
c001a626:	55                   	push   ebp
c001a627:	57                   	push   edi
c001a628:	56                   	push   esi
c001a629:	be 04 00 00 00       	mov    esi,0x4
c001a62e:	53                   	push   ebx
c001a62f:	83 ec 0c             	sub    esp,0xc
c001a632:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a636:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a63a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a641:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a645:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a64b:	0f 87 9c 01 00 00    	ja     c001a7ed <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a651:	be 06 00 00 00       	mov    esi,0x6
c001a656:	85 c9                	test   ecx,ecx
c001a658:	0f 84 8f 01 00 00    	je     c001a7ed <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a65e:	55                   	push   ebp
c001a65f:	55                   	push   ebp
c001a660:	6a 01                	push   0x1
c001a662:	51                   	push   ecx
c001a663:	53                   	push   ebx
c001a664:	52                   	push   edx
c001a665:	50                   	push   eax
c001a666:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a66a:	e8 51 f9 ff ff       	call   c0019fc0 <ATA::access(unsigned long long, int, void*, bool)>
c001a66f:	83 c4 20             	add    esp,0x20
c001a672:	89 c6                	mov    esi,eax
c001a674:	85 c0                	test   eax,eax
c001a676:	0f 85 6c 01 00 00    	jne    c001a7e8 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001a67c:	01 1d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebx
c001a682:	bd 10 27 00 00       	mov    ebp,0x2710
c001a687:	50                   	push   eax
c001a688:	50                   	push   eax
c001a689:	6a 0f                	push   0xf
c001a68b:	6a 00                	push   0x0
c001a68d:	e8 b1 fd ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001a692:	5a                   	pop    edx
c001a693:	0f b6 d8             	movzx  ebx,al
c001a696:	59                   	pop    ecx
c001a697:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a69c:	53                   	push   ebx
c001a69d:	b9 0a 00 00 00       	mov    ecx,0xa
c001a6a2:	99                   	cdq    
c001a6a3:	f7 fd                	idiv   ebp
c001a6a5:	99                   	cdq    
c001a6a6:	f7 f9                	idiv   ecx
c001a6a8:	8d 42 30             	lea    eax,[edx+0x30]
c001a6ab:	0f b6 c0             	movzx  eax,al
c001a6ae:	50                   	push   eax
c001a6af:	e8 7e fd ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a6b4:	5f                   	pop    edi
c001a6b5:	bf e8 03 00 00       	mov    edi,0x3e8
c001a6ba:	5a                   	pop    edx
c001a6bb:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a6c1:	53                   	push   ebx
c001a6c2:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6c7:	99                   	cdq    
c001a6c8:	f7 ff                	idiv   edi
c001a6ca:	99                   	cdq    
c001a6cb:	f7 f9                	idiv   ecx
c001a6cd:	8d 42 30             	lea    eax,[edx+0x30]
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	50                   	push   eax
c001a6d4:	e8 59 fd ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a6d9:	5f                   	pop    edi
c001a6da:	bf 64 00 00 00       	mov    edi,0x64
c001a6df:	5a                   	pop    edx
c001a6e0:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a6e6:	53                   	push   ebx
c001a6e7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6ec:	99                   	cdq    
c001a6ed:	f7 ff                	idiv   edi
c001a6ef:	99                   	cdq    
c001a6f0:	f7 f9                	idiv   ecx
c001a6f2:	8d 42 30             	lea    eax,[edx+0x30]
c001a6f5:	0f b6 c0             	movzx  eax,al
c001a6f8:	50                   	push   eax
c001a6f9:	e8 34 fd ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a6fe:	5a                   	pop    edx
c001a6ff:	5a                   	pop    edx
c001a700:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a706:	53                   	push   ebx
c001a707:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a70c:	99                   	cdq    
c001a70d:	f7 f9                	idiv   ecx
c001a70f:	99                   	cdq    
c001a710:	f7 f9                	idiv   ecx
c001a712:	8d 42 30             	lea    eax,[edx+0x30]
c001a715:	0f b6 c0             	movzx  eax,al
c001a718:	50                   	push   eax
c001a719:	e8 14 fd ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a71e:	5a                   	pop    edx
c001a71f:	5a                   	pop    edx
c001a720:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a726:	53                   	push   ebx
c001a727:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a72c:	99                   	cdq    
c001a72d:	f7 f9                	idiv   ecx
c001a72f:	8d 42 30             	lea    eax,[edx+0x30]
c001a732:	0f b6 c0             	movzx  eax,al
c001a735:	50                   	push   eax
c001a736:	e8 f7 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a73b:	5a                   	pop    edx
c001a73c:	5a                   	pop    edx
c001a73d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a743:	53                   	push   ebx
c001a744:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a749:	99                   	cdq    
c001a74a:	f7 fd                	idiv   ebp
c001a74c:	99                   	cdq    
c001a74d:	f7 f9                	idiv   ecx
c001a74f:	8d 42 30             	lea    eax,[edx+0x30]
c001a752:	0f b6 c0             	movzx  eax,al
c001a755:	50                   	push   eax
c001a756:	e8 d7 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a75b:	5d                   	pop    ebp
c001a75c:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a761:	5a                   	pop    edx
c001a762:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a768:	53                   	push   ebx
c001a769:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a76e:	99                   	cdq    
c001a76f:	f7 fd                	idiv   ebp
c001a771:	99                   	cdq    
c001a772:	f7 f9                	idiv   ecx
c001a774:	8d 42 30             	lea    eax,[edx+0x30]
c001a777:	0f b6 c0             	movzx  eax,al
c001a77a:	50                   	push   eax
c001a77b:	e8 b2 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a780:	5d                   	pop    ebp
c001a781:	5a                   	pop    edx
c001a782:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a788:	53                   	push   ebx
c001a789:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a78e:	99                   	cdq    
c001a78f:	f7 ff                	idiv   edi
c001a791:	99                   	cdq    
c001a792:	f7 f9                	idiv   ecx
c001a794:	8d 42 30             	lea    eax,[edx+0x30]
c001a797:	0f b6 c0             	movzx  eax,al
c001a79a:	50                   	push   eax
c001a79b:	e8 92 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a7a0:	5f                   	pop    edi
c001a7a1:	5d                   	pop    ebp
c001a7a2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a7a8:	53                   	push   ebx
c001a7a9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7ae:	99                   	cdq    
c001a7af:	f7 f9                	idiv   ecx
c001a7b1:	99                   	cdq    
c001a7b2:	f7 f9                	idiv   ecx
c001a7b4:	8d 42 30             	lea    eax,[edx+0x30]
c001a7b7:	0f b6 c0             	movzx  eax,al
c001a7ba:	50                   	push   eax
c001a7bb:	e8 72 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a7c0:	5a                   	pop    edx
c001a7c1:	5f                   	pop    edi
c001a7c2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a7c8:	53                   	push   ebx
c001a7c9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7ce:	99                   	cdq    
c001a7cf:	f7 f9                	idiv   ecx
c001a7d1:	83 c2 30             	add    edx,0x30
c001a7d4:	0f b6 d2             	movzx  edx,dl
c001a7d7:	52                   	push   edx
c001a7d8:	e8 55 fc ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a7e6:	eb 05                	jmp    c001a7ed <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a7e8:	be 01 00 00 00       	mov    esi,0x1
c001a7ed:	83 c4 0c             	add    esp,0xc
c001a7f0:	89 f0                	mov    eax,esi
c001a7f2:	5b                   	pop    ebx
c001a7f3:	5e                   	pop    esi
c001a7f4:	5f                   	pop    edi
c001a7f5:	5d                   	pop    ebp
c001a7f6:	c3                   	ret    
c001a7f7:	90                   	nop

c001a7f8 <ATAPI::write(unsigned long long, int, void*)>:
c001a7f8:	b8 03 00 00 00       	mov    eax,0x3
c001a7fd:	c3                   	ret    

c001a7fe <ATAPI::close(int, int, void*)>:
c001a7fe:	83 ec 0c             	sub    esp,0xc
c001a801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a805:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a80b:	85 c0                	test   eax,eax
c001a80d:	74 0c                	je     c001a81b <ATAPI::close(int, int, void*)+0x1d>
c001a80f:	83 ec 0c             	sub    esp,0xc
c001a812:	8b 10                	mov    edx,DWORD PTR [eax]
c001a814:	50                   	push   eax
c001a815:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	31 c0                	xor    eax,eax
c001a81d:	83 c4 0c             	add    esp,0xc
c001a820:	c3                   	ret    
c001a821:	90                   	nop

c001a822 <ATAPI::ATAPI()>:
c001a822:	83 ec 0c             	sub    esp,0xc
c001a825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a829:	83 ec 04             	sub    esp,0x4
c001a82c:	68 00 08 00 00       	push   0x800
c001a831:	68 61 fd 01 c0       	push   0xc001fd61
c001a836:	50                   	push   eax
c001a837:	e8 de 15 ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a83c:	83 c4 10             	add    esp,0x10
c001a83f:	ba 7c fc 01 c0       	mov    edx,0xc001fc7c
c001a844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a848:	89 10                	mov    DWORD PTR [eax],edx
c001a84a:	90                   	nop
c001a84b:	83 c4 0c             	add    esp,0xc
c001a84e:	c3                   	ret    
c001a84f:	90                   	nop

c001a850 <ATAPI::readyForCommand()>:
c001a850:	56                   	push   esi
c001a851:	53                   	push   ebx
c001a852:	53                   	push   ebx
c001a853:	31 db                	xor    ebx,ebx
c001a855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a859:	51                   	push   ecx
c001a85a:	6a 0c                	push   0xc
c001a85c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a863:	50                   	push   eax
c001a864:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a86a:	e8 01 e9 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	a8 88                	test   al,0x88
c001a874:	74 25                	je     c001a89b <ATAPI::readyForCommand()+0x4b>
c001a876:	43                   	inc    ebx
c001a877:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a87d:	7e da                	jle    c001a859 <ATAPI::readyForCommand()+0x9>
c001a87f:	83 ec 0c             	sub    esp,0xc
c001a882:	68 5e 01 00 00       	push   0x15e
c001a887:	e8 b4 92 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a895:	75 c2                	jne    c001a859 <ATAPI::readyForCommand()+0x9>
c001a897:	31 c0                	xor    eax,eax
c001a899:	eb 02                	jmp    c001a89d <ATAPI::readyForCommand()+0x4d>
c001a89b:	b0 01                	mov    al,0x1
c001a89d:	5a                   	pop    edx
c001a89e:	5b                   	pop    ebx
c001a89f:	5e                   	pop    esi
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop

c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a8a2:	55                   	push   ebp
c001a8a3:	57                   	push   edi
c001a8a4:	56                   	push   esi
c001a8a5:	53                   	push   ebx
c001a8a6:	83 ec 20             	sub    esp,0x20
c001a8a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a8ad:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a8b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a8b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a8b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a8bd:	6a 01                	push   0x1
c001a8bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8c6:	50                   	push   eax
c001a8c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8cd:	e8 ec e9 ff ff       	call   c00192be <IDE::enableIRQs(unsigned char, bool)>
c001a8d2:	5e                   	pop    esi
c001a8d3:	58                   	pop    eax
c001a8d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8db:	50                   	push   eax
c001a8dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8e2:	e8 a3 e7 ff ff       	call   c001908a <IDE::prepareInterrupt(unsigned char)>
c001a8e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a8ea:	e8 61 ff ff ff       	call   c001a850 <ATAPI::readyForCommand()>
c001a8ef:	83 c4 10             	add    esp,0x10
c001a8f2:	84 c0                	test   al,al
c001a8f4:	75 0a                	jne    c001a900 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a8f6:	bb 01 00 00 00       	mov    ebx,0x1
c001a8fb:	e9 57 02 00 00       	jmp    c001ab57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a900:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a906:	c1 e0 04             	shl    eax,0x4
c001a909:	0f b6 c0             	movzx  eax,al
c001a90c:	50                   	push   eax
c001a90d:	6a 06                	push   0x6
c001a90f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a916:	50                   	push   eax
c001a917:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a91d:	e8 8e e7 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a922:	6a 00                	push   0x0
c001a924:	6a 01                	push   0x1
c001a926:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a92d:	50                   	push   eax
c001a92e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a934:	e8 77 e7 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a939:	83 c4 20             	add    esp,0x20
c001a93c:	0f b6 c3             	movzx  eax,bl
c001a93f:	0f b6 df             	movzx  ebx,bh
c001a942:	50                   	push   eax
c001a943:	6a 04                	push   0x4
c001a945:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a94c:	50                   	push   eax
c001a94d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a953:	e8 58 e7 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a958:	53                   	push   ebx
c001a959:	6a 05                	push   0x5
c001a95b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a962:	50                   	push   eax
c001a963:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a969:	e8 42 e7 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a96e:	83 c4 20             	add    esp,0x20
c001a971:	68 a0 00 00 00       	push   0xa0
c001a976:	6a 07                	push   0x7
c001a978:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a97f:	50                   	push   eax
c001a980:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a986:	e8 25 e7 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a98b:	83 c4 0c             	add    esp,0xc
c001a98e:	6a 01                	push   0x1
c001a990:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a997:	50                   	push   eax
c001a998:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a99e:	e8 ab f1 ff ff       	call   c0019b4e <IDE::polling(unsigned char, unsigned int)>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a9ac:	84 c0                	test   al,al
c001a9ae:	74 23                	je     c001a9d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a9b0:	0f b6 d8             	movzx  ebx,al
c001a9b3:	0f b6 d2             	movzx  edx,dl
c001a9b6:	53                   	push   ebx
c001a9b7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a9be:	50                   	push   eax
c001a9bf:	52                   	push   edx
c001a9c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9c6:	e8 d3 f0 ff ff       	call   c0019a9e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a9cb:	83 c4 10             	add    esp,0x10
c001a9ce:	e9 84 01 00 00       	jmp    c001ab57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a9d3:	0f b6 d2             	movzx  edx,dl
c001a9d6:	53                   	push   ebx
c001a9d7:	53                   	push   ebx
c001a9d8:	52                   	push   edx
c001a9d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9df:	e8 ba e6 ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001a9e4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a9e8:	b9 06 00 00 00       	mov    ecx,0x6
c001a9ed:	89 c2                	mov    edx,eax
c001a9ef:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a9f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a9f6:	83 c4 10             	add    esp,0x10
c001a9f9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a9ff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa06:	85 db                	test   ebx,ebx
c001aa08:	0f 84 ec 00 00 00    	je     c001aafa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001aa0e:	51                   	push   ecx
c001aa0f:	51                   	push   ecx
c001aa10:	52                   	push   edx
c001aa11:	50                   	push   eax
c001aa12:	e8 07 e8 ff ff       	call   c001921e <IDE::waitInterrupt(unsigned char)>
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	84 c0                	test   al,al
c001aa1c:	0f 84 d4 fe ff ff    	je     c001a8f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aa22:	56                   	push   esi
c001aa23:	56                   	push   esi
c001aa24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa2b:	50                   	push   eax
c001aa2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa32:	e8 53 e6 ff ff       	call   c001908a <IDE::prepareInterrupt(unsigned char)>
c001aa37:	83 c4 0c             	add    esp,0xc
c001aa3a:	6a 04                	push   0x4
c001aa3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa43:	50                   	push   eax
c001aa44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa4a:	e8 21 e7 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001aa4f:	83 c4 0c             	add    esp,0xc
c001aa52:	89 c6                	mov    esi,eax
c001aa54:	6a 05                	push   0x5
c001aa56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa5d:	50                   	push   eax
c001aa5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa64:	e8 07 e7 ff ff       	call   c0019170 <IDE::read(unsigned char, unsigned char)>
c001aa69:	89 f1                	mov    ecx,esi
c001aa6b:	0f b6 c0             	movzx  eax,al
c001aa6e:	0f b6 f1             	movzx  esi,cl
c001aa71:	c1 e0 08             	shl    eax,0x8
c001aa74:	09 c6                	or     esi,eax
c001aa76:	d1 fe                	sar    esi,1
c001aa78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001aa84:	74 41                	je     c001aac7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001aa86:	31 c9                	xor    ecx,ecx
c001aa88:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa8e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa95:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001aa99:	75 0a                	jne    c001aaa5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001aa9b:	01 c9                	add    ecx,ecx
c001aa9d:	01 cd                	add    ebp,ecx
c001aa9f:	4b                   	dec    ebx
c001aaa0:	e9 54 ff ff ff       	jmp    c001a9f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001aaa5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001aaaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aaae:	51                   	push   ecx
c001aaaf:	51                   	push   ecx
c001aab0:	52                   	push   edx
c001aab1:	50                   	push   eax
c001aab2:	e8 e7 e5 ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001aab7:	89 c2                	mov    edx,eax
c001aab9:	89 f0                	mov    eax,esi
c001aabb:	66 ef                	out    dx,ax
c001aabd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	41                   	inc    ecx
c001aac5:	eb c1                	jmp    c001aa88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001aac7:	31 f6                	xor    esi,esi
c001aac9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aacf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aad6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001aada:	75 06                	jne    c001aae2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001aadc:	01 f6                	add    esi,esi
c001aade:	01 f5                	add    ebp,esi
c001aae0:	eb bd                	jmp    c001aa9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001aae2:	51                   	push   ecx
c001aae3:	51                   	push   ecx
c001aae4:	52                   	push   edx
c001aae5:	50                   	push   eax
c001aae6:	e8 b3 e5 ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001aaeb:	89 c2                	mov    edx,eax
c001aaed:	66 ed                	in     ax,dx
c001aaef:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	46                   	inc    esi
c001aaf8:	eb cf                	jmp    c001aac9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aafa:	51                   	push   ecx
c001aafb:	51                   	push   ecx
c001aafc:	52                   	push   edx
c001aafd:	50                   	push   eax
c001aafe:	e8 1b e7 ff ff       	call   c001921e <IDE::waitInterrupt(unsigned char)>
c001ab03:	83 c4 10             	add    esp,0x10
c001ab06:	84 c0                	test   al,al
c001ab08:	0f 84 e8 fd ff ff    	je     c001a8f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ab0e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ab13:	52                   	push   edx
c001ab14:	52                   	push   edx
c001ab15:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab1c:	50                   	push   eax
c001ab1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab23:	e8 62 e5 ff ff       	call   c001908a <IDE::prepareInterrupt(unsigned char)>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	50                   	push   eax
c001ab2c:	50                   	push   eax
c001ab2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab34:	50                   	push   eax
c001ab35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab3b:	e8 5e e5 ff ff       	call   c001909e <IDE::getBase(unsigned char)>
c001ab40:	8d 50 07             	lea    edx,[eax+0x7]
c001ab43:	ec                   	in     al,dx
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	a8 88                	test   al,0x88
c001ab49:	74 0a                	je     c001ab55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ab4b:	4b                   	dec    ebx
c001ab4c:	75 dd                	jne    c001ab2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ab4e:	bb 02 00 00 00       	mov    ebx,0x2
c001ab53:	eb 02                	jmp    c001ab57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ab55:	31 db                	xor    ebx,ebx
c001ab57:	83 c4 1c             	add    esp,0x1c
c001ab5a:	89 d8                	mov    eax,ebx
c001ab5c:	5b                   	pop    ebx
c001ab5d:	5e                   	pop    esi
c001ab5e:	5f                   	pop    edi
c001ab5f:	5d                   	pop    ebp
c001ab60:	c3                   	ret    
c001ab61:	90                   	nop

c001ab62 <ATAPI::diskRemoved()>:
c001ab62:	53                   	push   ebx
c001ab63:	83 ec 14             	sub    esp,0x14
c001ab66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ab6a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ab71:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ab77:	e8 38 21 ff ff       	call   c000ccb4 <LogicalDisk::unmount()>
c001ab7c:	58                   	pop    eax
c001ab7d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ab83:	e8 7c 2a ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c001ab88:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ab8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab92:	83 c4 18             	add    esp,0x18
c001ab95:	5b                   	pop    ebx
c001ab96:	e9 59 2a ff ff       	jmp    c000d5f4 <VCache::invalidateReadBuffer()>
c001ab9b:	90                   	nop

c001ab9c <ATAPI::eject()>:
c001ab9c:	57                   	push   edi
c001ab9d:	b9 03 00 00 00       	mov    ecx,0x3
c001aba2:	53                   	push   ebx
c001aba3:	83 ec 14             	sub    esp,0x14
c001aba6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abaa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001abae:	fc                   	cld    
c001abaf:	31 c0                	xor    eax,eax
c001abb1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001abb3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001abb8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001abbd:	50                   	push   eax
c001abbe:	50                   	push   eax
c001abbf:	6a 00                	push   0x0
c001abc1:	6a 00                	push   0x0
c001abc3:	6a 00                	push   0x0
c001abc5:	6a 02                	push   0x2
c001abc7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001abcb:	50                   	push   eax
c001abcc:	53                   	push   ebx
c001abcd:	e8 d0 fc ff ff       	call   c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abd2:	83 c4 14             	add    esp,0x14
c001abd5:	53                   	push   ebx
c001abd6:	e8 87 ff ff ff       	call   c001ab62 <ATAPI::diskRemoved()>
c001abdb:	83 c4 24             	add    esp,0x24
c001abde:	31 c0                	xor    eax,eax
c001abe0:	5b                   	pop    ebx
c001abe1:	5f                   	pop    edi
c001abe2:	c3                   	ret    
c001abe3:	90                   	nop

c001abe4 <ATAPI::diskInserted()>:
c001abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe8:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001abef:	c3                   	ret    

c001abf0 <ATAPI::detectMedia()>:
c001abf0:	56                   	push   esi
c001abf1:	53                   	push   ebx
c001abf2:	83 ec 28             	sub    esp,0x28
c001abf5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001abf9:	6a 0c                	push   0xc
c001abfb:	6a 00                	push   0x0
c001abfd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ac01:	56                   	push   esi
c001ac02:	e8 c9 58 fe ff       	call   c00004d0 <memset>
c001ac07:	58                   	pop    eax
c001ac08:	5a                   	pop    edx
c001ac09:	6a 00                	push   0x0
c001ac0b:	6a 00                	push   0x0
c001ac0d:	6a 00                	push   0x0
c001ac0f:	6a 00                	push   0x0
c001ac11:	56                   	push   esi
c001ac12:	53                   	push   ebx
c001ac13:	e8 8a fc ff ff       	call   c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac18:	83 c4 1c             	add    esp,0x1c
c001ac1b:	6a 0c                	push   0xc
c001ac1d:	6a 00                	push   0x0
c001ac1f:	56                   	push   esi
c001ac20:	e8 ab 58 fe ff       	call   c00004d0 <memset>
c001ac25:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ac2a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ac2f:	59                   	pop    ecx
c001ac30:	58                   	pop    eax
c001ac31:	6a 01                	push   0x1
c001ac33:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ac37:	50                   	push   eax
c001ac38:	6a 00                	push   0x0
c001ac3a:	6a 12                	push   0x12
c001ac3c:	56                   	push   esi
c001ac3d:	53                   	push   ebx
c001ac3e:	e8 5f fc ff ff       	call   c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac43:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ac47:	83 c4 20             	add    esp,0x20
c001ac4a:	83 e0 7f             	and    eax,0x7f
c001ac4d:	3c 70                	cmp    al,0x70
c001ac4f:	74 15                	je     c001ac66 <ATAPI::detectMedia()+0x76>
c001ac51:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac58:	75 0c                	jne    c001ac66 <ATAPI::detectMedia()+0x76>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	53                   	push   ebx
c001ac5e:	e8 81 ff ff ff       	call   c001abe4 <ATAPI::diskInserted()>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ac6a:	83 e0 0f             	and    eax,0xf
c001ac6d:	3c 02                	cmp    al,0x2
c001ac6f:	75 1b                	jne    c001ac8c <ATAPI::detectMedia()+0x9c>
c001ac71:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ac76:	75 2d                	jne    c001aca5 <ATAPI::detectMedia()+0xb5>
c001ac78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac7f:	74 24                	je     c001aca5 <ATAPI::detectMedia()+0xb5>
c001ac81:	83 ec 0c             	sub    esp,0xc
c001ac84:	53                   	push   ebx
c001ac85:	e8 d8 fe ff ff       	call   c001ab62 <ATAPI::diskRemoved()>
c001ac8a:	eb 16                	jmp    c001aca2 <ATAPI::detectMedia()+0xb2>
c001ac8c:	84 c0                	test   al,al
c001ac8e:	75 15                	jne    c001aca5 <ATAPI::detectMedia()+0xb5>
c001ac90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac97:	75 0c                	jne    c001aca5 <ATAPI::detectMedia()+0xb5>
c001ac99:	83 ec 0c             	sub    esp,0xc
c001ac9c:	53                   	push   ebx
c001ac9d:	e8 42 ff ff ff       	call   c001abe4 <ATAPI::diskInserted()>
c001aca2:	83 c4 10             	add    esp,0x10
c001aca5:	83 c4 24             	add    esp,0x24
c001aca8:	5b                   	pop    ebx
c001aca9:	5e                   	pop    esi
c001acaa:	c3                   	ret    
c001acab:	90                   	nop

c001acac <ATAPI::open(int, int, void*)>:
c001acac:	56                   	push   esi
c001acad:	53                   	push   ebx
c001acae:	50                   	push   eax
c001acaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acbb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001acc1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001acc7:	c1 e0 06             	shl    eax,0x6
c001acca:	01 d0                	add    eax,edx
c001accc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001acd3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001acd9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ace0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001acea:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001acf0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001acf7:	6a 04                	push   0x4
c001acf9:	6a 0c                	push   0xc
c001acfb:	51                   	push   ecx
c001acfc:	52                   	push   edx
c001acfd:	e8 ae e3 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad02:	90                   	nop
c001ad03:	90                   	nop
c001ad04:	6a 00                	push   0x0
c001ad06:	6a 0c                	push   0xc
c001ad08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ad0f:	50                   	push   eax
c001ad10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ad16:	e8 95 e3 ff ff       	call   c00190b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad1b:	83 c4 14             	add    esp,0x14
c001ad1e:	68 78 01 00 00       	push   0x178
c001ad23:	e8 4d cb fe ff       	call   c0007875 <malloc>
c001ad28:	83 c4 0c             	add    esp,0xc
c001ad2b:	89 c6                	mov    esi,eax
c001ad2d:	6a 00                	push   0x0
c001ad2f:	68 ff ff ff 7f       	push   0x7fffffff
c001ad34:	6a 00                	push   0x0
c001ad36:	6a 00                	push   0x0
c001ad38:	53                   	push   ebx
c001ad39:	68 fe fd 01 c0       	push   0xc001fdfe
c001ad3e:	50                   	push   eax
c001ad3f:	e8 b2 1d ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ad44:	83 c4 14             	add    esp,0x14
c001ad47:	56                   	push   esi
c001ad48:	e8 69 1e ff ff       	call   c000cbb6 <LogicalDisk::assignDriveLetter()>
c001ad4d:	5a                   	pop    edx
c001ad4e:	0f be c0             	movsx  eax,al
c001ad51:	59                   	pop    ecx
c001ad52:	50                   	push   eax
c001ad53:	68 64 fc 01 c0       	push   0xc001fc64
c001ad58:	e8 b1 f8 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001ad5d:	58                   	pop    eax
c001ad5e:	5a                   	pop    edx
c001ad5f:	56                   	push   esi
c001ad60:	53                   	push   ebx
c001ad61:	e8 e6 0c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001ad66:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ad6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad6f:	e8 0e 11 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001ad74:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ad7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad7e:	e8 6d fe ff ff       	call   c001abf0 <ATAPI::detectMedia()>
c001ad83:	83 c4 14             	add    esp,0x14
c001ad86:	31 c0                	xor    eax,eax
c001ad88:	5b                   	pop    ebx
c001ad89:	5e                   	pop    esi
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <ATAPI::read(unsigned long long, int, void*)>:
c001ad8c:	55                   	push   ebp
c001ad8d:	57                   	push   edi
c001ad8e:	56                   	push   esi
c001ad8f:	53                   	push   ebx
c001ad90:	83 ec 1c             	sub    esp,0x1c
c001ad93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ad97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad9b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ad9f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ada6:	74 3c                	je     c001ade4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ada8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001adac:	b9 03 00 00 00       	mov    ecx,0x3
c001adb1:	fc                   	cld    
c001adb2:	31 c0                	xor    eax,eax
c001adb4:	0f ce                	bswap  esi
c001adb6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001adb8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001adbd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001adc1:	89 e8                	mov    eax,ebp
c001adc3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001adc7:	50                   	push   eax
c001adc8:	50                   	push   eax
c001adc9:	55                   	push   ebp
c001adca:	c1 e5 0b             	shl    ebp,0xb
c001adcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001add1:	6a 00                	push   0x0
c001add3:	55                   	push   ebp
c001add4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001add8:	50                   	push   eax
c001add9:	53                   	push   ebx
c001adda:	e8 c3 fa ff ff       	call   c001a8a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001addf:	83 c4 20             	add    esp,0x20
c001ade2:	eb 1a                	jmp    c001adfe <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	53                   	push   ebx
c001ade8:	e8 03 fe ff ff       	call   c001abf0 <ATAPI::detectMedia()>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001adf7:	75 af                	jne    c001ada8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001adf9:	b8 02 00 00 00       	mov    eax,0x2
c001adfe:	83 c4 1c             	add    esp,0x1c
c001ae01:	5b                   	pop    ebx
c001ae02:	5e                   	pop    esi
c001ae03:	5f                   	pop    edi
c001ae04:	5d                   	pop    ebp
c001ae05:	c3                   	ret    

c001ae06 <SATA::close(int, int, void*)>:
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae13:	85 c0                	test   eax,eax
c001ae15:	74 0c                	je     c001ae23 <SATA::close(int, int, void*)+0x1d>
c001ae17:	83 ec 0c             	sub    esp,0xc
c001ae1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae1c:	50                   	push   eax
c001ae1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	31 c0                	xor    eax,eax
c001ae25:	83 c4 0c             	add    esp,0xc
c001ae28:	c3                   	ret    
c001ae29:	90                   	nop

c001ae2a <SATA::powerSaving(PowerSavingLevel)>:
c001ae2a:	c3                   	ret    
c001ae2b:	90                   	nop

c001ae2c <SATA::open(int, int, void*)>:
c001ae2c:	56                   	push   esi
c001ae2d:	53                   	push   ebx
c001ae2e:	50                   	push   eax
c001ae2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae37:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ae41:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ae47:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ae51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ae5f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ae65:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ae6c:	e8 e0 cc fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ae71:	89 c6                	mov    esi,eax
c001ae73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ae79:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae7f:	e8 cd cc fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ae84:	39 c6                	cmp    esi,eax
c001ae86:	74 10                	je     c001ae98 <SATA::open(int, int, void*)+0x6c>
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	68 ac fc 01 c0       	push   0xc001fcac
c001ae90:	e8 8e 54 ff ff       	call   c0010323 <KePanic(char const*)>
c001ae95:	83 c4 10             	add    esp,0x10
c001ae98:	83 ec 0c             	sub    esp,0xc
c001ae9b:	6a 02                	push   0x2
c001ae9d:	e8 af e4 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001aea2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aea8:	6a 03                	push   0x3
c001aeaa:	50                   	push   eax
c001aeab:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aeb1:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001aeb7:	e8 58 eb fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aebc:	83 c4 14             	add    esp,0x14
c001aebf:	53                   	push   ebx
c001aec0:	e8 bd 0f ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001aec5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aec8:	e8 69 20 ff ff       	call   c000cf36 <createPartitionsForDisk(PhysicalDisk*)>
c001aecd:	83 c4 14             	add    esp,0x14
c001aed0:	31 c0                	xor    eax,eax
c001aed2:	5b                   	pop    ebx
c001aed3:	5e                   	pop    esi
c001aed4:	c3                   	ret    
c001aed5:	90                   	nop

c001aed6 <SATA::SATA()>:
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedd:	83 ec 04             	sub    esp,0x4
c001aee0:	68 00 02 00 00       	push   0x200
c001aee5:	68 c0 fc 01 c0       	push   0xc001fcc0
c001aeea:	50                   	push   eax
c001aeeb:	e8 2a 0f ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aef0:	83 c4 10             	add    esp,0x10
c001aef3:	ba 30 fd 01 c0       	mov    edx,0xc001fd30
c001aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefc:	89 10                	mov    DWORD PTR [eax],edx
c001aefe:	90                   	nop
c001aeff:	83 c4 0c             	add    esp,0xc
c001af02:	c3                   	ret    
c001af03:	90                   	nop

c001af04 <SATA::access(unsigned long long, int, void*, bool)>:
c001af04:	55                   	push   ebp
c001af05:	57                   	push   edi
c001af06:	56                   	push   esi
c001af07:	53                   	push   ebx
c001af08:	83 ec 2c             	sub    esp,0x2c
c001af0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001af0f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001af13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af17:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001af1b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af1f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001af24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af28:	7e 10                	jle    c001af3a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	68 d0 fc 01 c0       	push   0xc001fcd0
c001af32:	e8 ec 53 ff ff       	call   c0010323 <KePanic(char const*)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001af40:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001af46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af50:	89 d0                	mov    eax,edx
c001af52:	c1 e0 07             	shl    eax,0x7
c001af55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001af59:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af63:	51                   	push   ecx
c001af64:	8d 42 02             	lea    eax,[edx+0x2]
c001af67:	51                   	push   ecx
c001af68:	c1 e0 07             	shl    eax,0x7
c001af6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af6f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001af73:	50                   	push   eax
c001af74:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001af7a:	e8 b9 ec ff ff       	call   c0019c38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af7f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af8f:	0f 84 4f 01 00 00    	je     c001b0e4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001af95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af99:	c1 e0 09             	shl    eax,0x9
c001af9c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001afa1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afa5:	74 0e                	je     c001afb5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001afa7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001afad:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001afb1:	89 c1                	mov    ecx,eax
c001afb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001afb9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001afbf:	8d 42 02             	lea    eax,[edx+0x2]
c001afc2:	c1 e0 07             	shl    eax,0x7
c001afc5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001afc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001afcb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afd1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afdb:	c1 e1 05             	shl    ecx,0x5
c001afde:	01 c8                	add    eax,ecx
c001afe0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001afe4:	83 e1 01             	and    ecx,0x1
c001afe7:	89 ce                	mov    esi,ecx
c001afe9:	8a 08                	mov    cl,BYTE PTR [eax]
c001afeb:	c1 e6 06             	shl    esi,0x6
c001afee:	83 e1 bf             	and    ecx,0xffffffbf
c001aff1:	09 f1                	or     ecx,esi
c001aff3:	88 08                	mov    BYTE PTR [eax],cl
c001aff5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aff7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001affd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001b003:	89 08                	mov    DWORD PTR [eax],ecx
c001b005:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001b00b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001b011:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001b017:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001b01a:	50                   	push   eax
c001b01b:	68 90 00 00 00       	push   0x90
c001b020:	6a 00                	push   0x0
c001b022:	56                   	push   esi
c001b023:	e8 a8 54 fe ff       	call   c00004d0 <memset>
c001b028:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b02e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b032:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b038:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b03c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	48                   	dec    eax
c001b044:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b049:	89 c1                	mov    ecx,eax
c001b04b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b051:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b056:	09 c8                	or     eax,ecx
c001b058:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b05e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b061:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b068:	66 25 00 7f          	and    ax,0x7f00
c001b06c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b070:	66 0d 27 80          	or     ax,0x8027
c001b074:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b079:	66 89 06             	mov    WORD PTR [esi],ax
c001b07c:	19 c0                	sbb    eax,eax
c001b07e:	83 e0 f0             	and    eax,0xfffffff0
c001b081:	83 c0 35             	add    eax,0x35
c001b084:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b087:	89 e8                	mov    eax,ebp
c001b089:	c1 e8 10             	shr    eax,0x10
c001b08c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b08f:	89 e8                	mov    eax,ebp
c001b091:	c1 e8 18             	shr    eax,0x18
c001b094:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b097:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b09b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b09e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0a2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b0a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0a9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b0ad:	89 d6                	mov    esi,edx
c001b0af:	31 c0                	xor    eax,eax
c001b0b1:	c1 e6 07             	shl    esi,0x7
c001b0b4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b0b8:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b0be:	80 e1 88             	and    cl,0x88
c001b0c1:	74 0a                	je     c001b0cd <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b0c3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0c8:	74 0a                	je     c001b0d4 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b0ca:	40                   	inc    eax
c001b0cb:	eb eb                	jmp    c001b0b8 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b0cd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0d2:	75 17                	jne    c001b0eb <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	68 09 fd 01 c0       	push   0xc001fd09
c001b0dc:	e8 2d f5 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	b8 01 00 00 00       	mov    eax,0x1
c001b0e9:	eb 5d                	jmp    c001b148 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b0eb:	b8 01 00 00 00       	mov    eax,0x1
c001b0f0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0f4:	c1 e2 07             	shl    edx,0x7
c001b0f7:	d3 e0                	shl    eax,cl
c001b0f9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b0fd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b103:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b109:	85 c8                	test   eax,ecx
c001b10b:	74 16                	je     c001b123 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b10d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b113:	0f ba e1 1e          	bt     ecx,0x1e
c001b117:	73 ea                	jae    c001b103 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b119:	83 ec 0c             	sub    esp,0xc
c001b11c:	68 17 fd 01 c0       	push   0xc001fd17
c001b121:	eb b9                	jmp    c001b0dc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b123:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b129:	0f ba e0 1e          	bt     eax,0x1e
c001b12d:	72 b5                	jb     c001b0e4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b12f:	31 c0                	xor    eax,eax
c001b131:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b136:	75 10                	jne    c001b148 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b138:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b13e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b142:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b146:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b148:	83 c4 2c             	add    esp,0x2c
c001b14b:	5b                   	pop    ebx
c001b14c:	5e                   	pop    esi
c001b14d:	5f                   	pop    edi
c001b14e:	5d                   	pop    ebp
c001b14f:	c3                   	ret    

c001b150 <SATA::read(unsigned long long, int, void*)>:
c001b150:	55                   	push   ebp
c001b151:	57                   	push   edi
c001b152:	56                   	push   esi
c001b153:	be 04 00 00 00       	mov    esi,0x4
c001b158:	53                   	push   ebx
c001b159:	83 ec 0c             	sub    esp,0xc
c001b15c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b160:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b164:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b167:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b16b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b16f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b175:	0f 87 1a 02 00 00    	ja     c001b395 <SATA::read(unsigned long long, int, void*)+0x245>
c001b17b:	be 06 00 00 00       	mov    esi,0x6
c001b180:	85 c9                	test   ecx,ecx
c001b182:	0f 84 0d 02 00 00    	je     c001b395 <SATA::read(unsigned long long, int, void*)+0x245>
c001b188:	56                   	push   esi
c001b189:	56                   	push   esi
c001b18a:	6a 00                	push   0x0
c001b18c:	51                   	push   ecx
c001b18d:	53                   	push   ebx
c001b18e:	52                   	push   edx
c001b18f:	50                   	push   eax
c001b190:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b194:	e8 6b fd ff ff       	call   c001af04 <SATA::access(unsigned long long, int, void*, bool)>
c001b199:	83 c4 20             	add    esp,0x20
c001b19c:	89 c6                	mov    esi,eax
c001b19e:	85 c0                	test   eax,eax
c001b1a0:	0f 85 ea 01 00 00    	jne    c001b390 <SATA::read(unsigned long long, int, void*)+0x240>
c001b1a6:	01 1d 54 6b 02 c0    	add    DWORD PTR ds:0xc0026b54,ebx
c001b1ac:	bb 0a 00 00 00       	mov    ebx,0xa
c001b1b1:	50                   	push   eax
c001b1b2:	50                   	push   eax
c001b1b3:	6a 0f                	push   0xf
c001b1b5:	6a 00                	push   0x0
c001b1b7:	e8 87 f2 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b1bc:	5a                   	pop    edx
c001b1bd:	0f b6 c0             	movzx  eax,al
c001b1c0:	59                   	pop    ecx
c001b1c1:	b9 10 27 00 00       	mov    ecx,0x2710
c001b1c6:	50                   	push   eax
c001b1c7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b1cc:	99                   	cdq    
c001b1cd:	f7 f9                	idiv   ecx
c001b1cf:	99                   	cdq    
c001b1d0:	f7 fb                	idiv   ebx
c001b1d2:	8d 42 30             	lea    eax,[edx+0x30]
c001b1d5:	0f b6 c0             	movzx  eax,al
c001b1d8:	50                   	push   eax
c001b1d9:	e8 54 f2 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b1de:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b1e4:	5f                   	pop    edi
c001b1e5:	5d                   	pop    ebp
c001b1e6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b1eb:	6a 0f                	push   0xf
c001b1ed:	6a 00                	push   0x0
c001b1ef:	e8 4f f2 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b1f4:	5a                   	pop    edx
c001b1f5:	0f b6 c0             	movzx  eax,al
c001b1f8:	59                   	pop    ecx
c001b1f9:	50                   	push   eax
c001b1fa:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b1ff:	99                   	cdq    
c001b200:	f7 fd                	idiv   ebp
c001b202:	99                   	cdq    
c001b203:	f7 fb                	idiv   ebx
c001b205:	8d 42 30             	lea    eax,[edx+0x30]
c001b208:	0f b6 c0             	movzx  eax,al
c001b20b:	50                   	push   eax
c001b20c:	e8 21 f2 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b211:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b217:	5f                   	pop    edi
c001b218:	bf 64 00 00 00       	mov    edi,0x64
c001b21d:	58                   	pop    eax
c001b21e:	6a 0f                	push   0xf
c001b220:	6a 00                	push   0x0
c001b222:	e8 1c f2 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b227:	5a                   	pop    edx
c001b228:	0f b6 c0             	movzx  eax,al
c001b22b:	59                   	pop    ecx
c001b22c:	50                   	push   eax
c001b22d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b232:	99                   	cdq    
c001b233:	f7 ff                	idiv   edi
c001b235:	99                   	cdq    
c001b236:	f7 fb                	idiv   ebx
c001b238:	8d 42 30             	lea    eax,[edx+0x30]
c001b23b:	0f b6 c0             	movzx  eax,al
c001b23e:	50                   	push   eax
c001b23f:	e8 ee f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b244:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b24a:	58                   	pop    eax
c001b24b:	5a                   	pop    edx
c001b24c:	6a 0f                	push   0xf
c001b24e:	6a 00                	push   0x0
c001b250:	e8 ee f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b255:	59                   	pop    ecx
c001b256:	0f b6 c0             	movzx  eax,al
c001b259:	5a                   	pop    edx
c001b25a:	50                   	push   eax
c001b25b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b260:	99                   	cdq    
c001b261:	f7 fb                	idiv   ebx
c001b263:	99                   	cdq    
c001b264:	f7 fb                	idiv   ebx
c001b266:	8d 42 30             	lea    eax,[edx+0x30]
c001b269:	0f b6 c0             	movzx  eax,al
c001b26c:	50                   	push   eax
c001b26d:	e8 c0 f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b272:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b278:	59                   	pop    ecx
c001b279:	58                   	pop    eax
c001b27a:	6a 0f                	push   0xf
c001b27c:	6a 00                	push   0x0
c001b27e:	e8 c0 f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b283:	5a                   	pop    edx
c001b284:	0f b6 c0             	movzx  eax,al
c001b287:	59                   	pop    ecx
c001b288:	50                   	push   eax
c001b289:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b28e:	99                   	cdq    
c001b28f:	f7 fb                	idiv   ebx
c001b291:	8d 42 30             	lea    eax,[edx+0x30]
c001b294:	0f b6 c0             	movzx  eax,al
c001b297:	50                   	push   eax
c001b298:	e8 95 f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b29d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b2a3:	58                   	pop    eax
c001b2a4:	5a                   	pop    edx
c001b2a5:	6a 0f                	push   0xf
c001b2a7:	6a 00                	push   0x0
c001b2a9:	e8 95 f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b2ae:	59                   	pop    ecx
c001b2af:	0f b6 c0             	movzx  eax,al
c001b2b2:	5a                   	pop    edx
c001b2b3:	b9 10 27 00 00       	mov    ecx,0x2710
c001b2b8:	50                   	push   eax
c001b2b9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2be:	99                   	cdq    
c001b2bf:	f7 f9                	idiv   ecx
c001b2c1:	99                   	cdq    
c001b2c2:	f7 fb                	idiv   ebx
c001b2c4:	8d 42 30             	lea    eax,[edx+0x30]
c001b2c7:	0f b6 c0             	movzx  eax,al
c001b2ca:	50                   	push   eax
c001b2cb:	e8 62 f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b2d0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b2d6:	59                   	pop    ecx
c001b2d7:	58                   	pop    eax
c001b2d8:	6a 0f                	push   0xf
c001b2da:	6a 00                	push   0x0
c001b2dc:	e8 62 f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b2e1:	5a                   	pop    edx
c001b2e2:	0f b6 c0             	movzx  eax,al
c001b2e5:	59                   	pop    ecx
c001b2e6:	50                   	push   eax
c001b2e7:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2ec:	99                   	cdq    
c001b2ed:	f7 fd                	idiv   ebp
c001b2ef:	99                   	cdq    
c001b2f0:	f7 fb                	idiv   ebx
c001b2f2:	8d 42 30             	lea    eax,[edx+0x30]
c001b2f5:	0f b6 c0             	movzx  eax,al
c001b2f8:	50                   	push   eax
c001b2f9:	e8 34 f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b2fe:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b304:	5d                   	pop    ebp
c001b305:	58                   	pop    eax
c001b306:	6a 0f                	push   0xf
c001b308:	6a 00                	push   0x0
c001b30a:	e8 34 f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b30f:	5a                   	pop    edx
c001b310:	0f b6 c0             	movzx  eax,al
c001b313:	59                   	pop    ecx
c001b314:	50                   	push   eax
c001b315:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b31a:	99                   	cdq    
c001b31b:	f7 ff                	idiv   edi
c001b31d:	99                   	cdq    
c001b31e:	f7 fb                	idiv   ebx
c001b320:	8d 42 30             	lea    eax,[edx+0x30]
c001b323:	0f b6 c0             	movzx  eax,al
c001b326:	50                   	push   eax
c001b327:	e8 06 f1 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b32c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b332:	5f                   	pop    edi
c001b333:	5d                   	pop    ebp
c001b334:	6a 0f                	push   0xf
c001b336:	6a 00                	push   0x0
c001b338:	e8 06 f1 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b33d:	5a                   	pop    edx
c001b33e:	0f b6 c0             	movzx  eax,al
c001b341:	59                   	pop    ecx
c001b342:	50                   	push   eax
c001b343:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b348:	99                   	cdq    
c001b349:	f7 fb                	idiv   ebx
c001b34b:	99                   	cdq    
c001b34c:	f7 fb                	idiv   ebx
c001b34e:	8d 42 30             	lea    eax,[edx+0x30]
c001b351:	0f b6 c0             	movzx  eax,al
c001b354:	50                   	push   eax
c001b355:	e8 d8 f0 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b35a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b360:	5f                   	pop    edi
c001b361:	5d                   	pop    ebp
c001b362:	6a 0f                	push   0xf
c001b364:	6a 00                	push   0x0
c001b366:	e8 d8 f0 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b36b:	5a                   	pop    edx
c001b36c:	0f b6 c0             	movzx  eax,al
c001b36f:	59                   	pop    ecx
c001b370:	50                   	push   eax
c001b371:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b376:	99                   	cdq    
c001b377:	f7 fb                	idiv   ebx
c001b379:	83 c2 30             	add    edx,0x30
c001b37c:	0f b6 d2             	movzx  edx,dl
c001b37f:	52                   	push   edx
c001b380:	e8 ad f0 ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b385:	83 c4 10             	add    esp,0x10
c001b388:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b38e:	eb 05                	jmp    c001b395 <SATA::read(unsigned long long, int, void*)+0x245>
c001b390:	be 01 00 00 00       	mov    esi,0x1
c001b395:	83 c4 0c             	add    esp,0xc
c001b398:	89 f0                	mov    eax,esi
c001b39a:	5b                   	pop    ebx
c001b39b:	5e                   	pop    esi
c001b39c:	5f                   	pop    edi
c001b39d:	5d                   	pop    ebp
c001b39e:	c3                   	ret    
c001b39f:	90                   	nop

c001b3a0 <SATA::write(unsigned long long, int, void*)>:
c001b3a0:	55                   	push   ebp
c001b3a1:	b8 04 00 00 00       	mov    eax,0x4
c001b3a6:	57                   	push   edi
c001b3a7:	56                   	push   esi
c001b3a8:	53                   	push   ebx
c001b3a9:	83 ec 1c             	sub    esp,0x1c
c001b3ac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b3b0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b3b4:	8d 75 ff             	lea    esi,[ebp-0x1]
c001b3b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b3bb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b3bf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b3c5:	0f 87 32 02 00 00    	ja     c001b5fd <SATA::write(unsigned long long, int, void*)+0x25d>
c001b3cb:	b8 06 00 00 00       	mov    eax,0x6
c001b3d0:	85 ff                	test   edi,edi
c001b3d2:	0f 84 25 02 00 00    	je     c001b5fd <SATA::write(unsigned long long, int, void*)+0x25d>
c001b3d8:	89 ee                	mov    esi,ebp
c001b3da:	c1 e6 09             	shl    esi,0x9
c001b3dd:	01 fe                	add    esi,edi
c001b3df:	89 c8                	mov    eax,ecx
c001b3e1:	89 da                	mov    edx,ebx
c001b3e3:	83 c0 01             	add    eax,0x1
c001b3e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3ea:	83 d2 00             	adc    edx,0x0
c001b3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3f1:	50                   	push   eax
c001b3f2:	50                   	push   eax
c001b3f3:	6a 01                	push   0x1
c001b3f5:	57                   	push   edi
c001b3f6:	81 c7 00 02 00 00    	add    edi,0x200
c001b3fc:	6a 01                	push   0x1
c001b3fe:	53                   	push   ebx
c001b3ff:	51                   	push   ecx
c001b400:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b404:	e8 fb fa ff ff       	call   c001af04 <SATA::access(unsigned long long, int, void*, bool)>
c001b409:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b40d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b411:	83 c4 20             	add    esp,0x20
c001b414:	39 f7                	cmp    edi,esi
c001b416:	75 c7                	jne    c001b3df <SATA::write(unsigned long long, int, void*)+0x3f>
c001b418:	bb 0a 00 00 00       	mov    ebx,0xa
c001b41d:	01 2d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebp
c001b423:	bd 10 27 00 00       	mov    ebp,0x2710
c001b428:	50                   	push   eax
c001b429:	50                   	push   eax
c001b42a:	6a 0f                	push   0xf
c001b42c:	6a 00                	push   0x0
c001b42e:	e8 10 f0 ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b433:	5a                   	pop    edx
c001b434:	0f b6 c0             	movzx  eax,al
c001b437:	59                   	pop    ecx
c001b438:	50                   	push   eax
c001b439:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b43e:	99                   	cdq    
c001b43f:	f7 fd                	idiv   ebp
c001b441:	99                   	cdq    
c001b442:	f7 fb                	idiv   ebx
c001b444:	8d 42 30             	lea    eax,[edx+0x30]
c001b447:	0f b6 c0             	movzx  eax,al
c001b44a:	50                   	push   eax
c001b44b:	e8 e2 ef ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b450:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b456:	5e                   	pop    esi
c001b457:	5f                   	pop    edi
c001b458:	bf e8 03 00 00       	mov    edi,0x3e8
c001b45d:	6a 0f                	push   0xf
c001b45f:	6a 00                	push   0x0
c001b461:	e8 dd ef ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b466:	5a                   	pop    edx
c001b467:	0f b6 c0             	movzx  eax,al
c001b46a:	59                   	pop    ecx
c001b46b:	50                   	push   eax
c001b46c:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b471:	99                   	cdq    
c001b472:	f7 ff                	idiv   edi
c001b474:	99                   	cdq    
c001b475:	f7 fb                	idiv   ebx
c001b477:	8d 42 30             	lea    eax,[edx+0x30]
c001b47a:	0f b6 c0             	movzx  eax,al
c001b47d:	50                   	push   eax
c001b47e:	e8 af ef ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b483:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b489:	5e                   	pop    esi
c001b48a:	be 64 00 00 00       	mov    esi,0x64
c001b48f:	58                   	pop    eax
c001b490:	6a 0f                	push   0xf
c001b492:	6a 00                	push   0x0
c001b494:	e8 aa ef ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b499:	5a                   	pop    edx
c001b49a:	0f b6 c0             	movzx  eax,al
c001b49d:	59                   	pop    ecx
c001b49e:	50                   	push   eax
c001b49f:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4a4:	99                   	cdq    
c001b4a5:	f7 fe                	idiv   esi
c001b4a7:	99                   	cdq    
c001b4a8:	f7 fb                	idiv   ebx
c001b4aa:	8d 42 30             	lea    eax,[edx+0x30]
c001b4ad:	0f b6 c0             	movzx  eax,al
c001b4b0:	50                   	push   eax
c001b4b1:	e8 7c ef ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b4b6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b4bc:	58                   	pop    eax
c001b4bd:	5a                   	pop    edx
c001b4be:	6a 0f                	push   0xf
c001b4c0:	6a 00                	push   0x0
c001b4c2:	e8 7c ef ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b4c7:	59                   	pop    ecx
c001b4c8:	0f b6 c0             	movzx  eax,al
c001b4cb:	5a                   	pop    edx
c001b4cc:	50                   	push   eax
c001b4cd:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4d2:	99                   	cdq    
c001b4d3:	f7 fb                	idiv   ebx
c001b4d5:	99                   	cdq    
c001b4d6:	f7 fb                	idiv   ebx
c001b4d8:	8d 42 30             	lea    eax,[edx+0x30]
c001b4db:	0f b6 c0             	movzx  eax,al
c001b4de:	50                   	push   eax
c001b4df:	e8 4e ef ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b4e4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b4ea:	59                   	pop    ecx
c001b4eb:	58                   	pop    eax
c001b4ec:	6a 0f                	push   0xf
c001b4ee:	6a 00                	push   0x0
c001b4f0:	e8 4e ef ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b4f5:	5a                   	pop    edx
c001b4f6:	0f b6 c0             	movzx  eax,al
c001b4f9:	59                   	pop    ecx
c001b4fa:	50                   	push   eax
c001b4fb:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b500:	99                   	cdq    
c001b501:	f7 fb                	idiv   ebx
c001b503:	83 c2 30             	add    edx,0x30
c001b506:	0f b6 d2             	movzx  edx,dl
c001b509:	52                   	push   edx
c001b50a:	e8 23 ef ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b50f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b515:	58                   	pop    eax
c001b516:	5a                   	pop    edx
c001b517:	6a 0f                	push   0xf
c001b519:	6a 00                	push   0x0
c001b51b:	e8 23 ef ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b520:	59                   	pop    ecx
c001b521:	0f b6 c0             	movzx  eax,al
c001b524:	5a                   	pop    edx
c001b525:	50                   	push   eax
c001b526:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b52b:	99                   	cdq    
c001b52c:	f7 fd                	idiv   ebp
c001b52e:	99                   	cdq    
c001b52f:	f7 fb                	idiv   ebx
c001b531:	8d 42 30             	lea    eax,[edx+0x30]
c001b534:	0f b6 c0             	movzx  eax,al
c001b537:	50                   	push   eax
c001b538:	e8 f5 ee ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b53d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b543:	59                   	pop    ecx
c001b544:	5d                   	pop    ebp
c001b545:	6a 0f                	push   0xf
c001b547:	6a 00                	push   0x0
c001b549:	e8 f5 ee ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b54e:	5a                   	pop    edx
c001b54f:	0f b6 c0             	movzx  eax,al
c001b552:	59                   	pop    ecx
c001b553:	50                   	push   eax
c001b554:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b559:	99                   	cdq    
c001b55a:	f7 ff                	idiv   edi
c001b55c:	99                   	cdq    
c001b55d:	f7 fb                	idiv   ebx
c001b55f:	8d 42 30             	lea    eax,[edx+0x30]
c001b562:	0f b6 c0             	movzx  eax,al
c001b565:	50                   	push   eax
c001b566:	e8 c7 ee ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b56b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b571:	5f                   	pop    edi
c001b572:	5d                   	pop    ebp
c001b573:	6a 0f                	push   0xf
c001b575:	6a 00                	push   0x0
c001b577:	e8 c7 ee ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b57c:	5a                   	pop    edx
c001b57d:	0f b6 c0             	movzx  eax,al
c001b580:	59                   	pop    ecx
c001b581:	50                   	push   eax
c001b582:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b587:	99                   	cdq    
c001b588:	f7 fe                	idiv   esi
c001b58a:	99                   	cdq    
c001b58b:	f7 fb                	idiv   ebx
c001b58d:	8d 42 30             	lea    eax,[edx+0x30]
c001b590:	0f b6 c0             	movzx  eax,al
c001b593:	50                   	push   eax
c001b594:	e8 99 ee ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b599:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b59f:	5e                   	pop    esi
c001b5a0:	5f                   	pop    edi
c001b5a1:	6a 0f                	push   0xf
c001b5a3:	6a 00                	push   0x0
c001b5a5:	e8 99 ee ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b5aa:	5d                   	pop    ebp
c001b5ab:	0f b6 c0             	movzx  eax,al
c001b5ae:	5a                   	pop    edx
c001b5af:	50                   	push   eax
c001b5b0:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5b5:	99                   	cdq    
c001b5b6:	f7 fb                	idiv   ebx
c001b5b8:	99                   	cdq    
c001b5b9:	f7 fb                	idiv   ebx
c001b5bb:	8d 42 30             	lea    eax,[edx+0x30]
c001b5be:	0f b6 c0             	movzx  eax,al
c001b5c1:	50                   	push   eax
c001b5c2:	e8 6b ee ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b5c7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b5cd:	59                   	pop    ecx
c001b5ce:	5e                   	pop    esi
c001b5cf:	6a 0f                	push   0xf
c001b5d1:	6a 00                	push   0x0
c001b5d3:	e8 6b ee ff ff       	call   c001a443 <combineColours(unsigned char, unsigned char)>
c001b5d8:	5f                   	pop    edi
c001b5d9:	0f b6 c0             	movzx  eax,al
c001b5dc:	5d                   	pop    ebp
c001b5dd:	50                   	push   eax
c001b5de:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5e3:	99                   	cdq    
c001b5e4:	f7 fb                	idiv   ebx
c001b5e6:	83 c2 30             	add    edx,0x30
c001b5e9:	0f b6 d2             	movzx  edx,dl
c001b5ec:	52                   	push   edx
c001b5ed:	e8 40 ee ff ff       	call   c001a432 <combineCharAndColour(char, unsigned char)>
c001b5f2:	83 c4 10             	add    esp,0x10
c001b5f5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b5fb:	31 c0                	xor    eax,eax
c001b5fd:	83 c4 1c             	add    esp,0x1c
c001b600:	5b                   	pop    ebx
c001b601:	5e                   	pop    esi
c001b602:	5f                   	pop    edi
c001b603:	5d                   	pop    ebp
c001b604:	c3                   	ret    
c001b605:	90                   	nop

c001b606 <SATAPI::write(unsigned long long, int, void*)>:
c001b606:	b8 03 00 00 00       	mov    eax,0x3
c001b60b:	c3                   	ret    

c001b60c <SATAPI::close(int, int, void*)>:
c001b60c:	83 ec 0c             	sub    esp,0xc
c001b60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b613:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b619:	85 c0                	test   eax,eax
c001b61b:	74 0c                	je     c001b629 <SATAPI::close(int, int, void*)+0x1d>
c001b61d:	83 ec 0c             	sub    esp,0xc
c001b620:	8b 10                	mov    edx,DWORD PTR [eax]
c001b622:	50                   	push   eax
c001b623:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b626:	83 c4 10             	add    esp,0x10
c001b629:	31 c0                	xor    eax,eax
c001b62b:	83 c4 0c             	add    esp,0xc
c001b62e:	c3                   	ret    
c001b62f:	90                   	nop

c001b630 <SATAPI::SATAPI()>:
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b637:	83 ec 04             	sub    esp,0x4
c001b63a:	68 00 08 00 00       	push   0x800
c001b63f:	68 60 fd 01 c0       	push   0xc001fd60
c001b644:	50                   	push   eax
c001b645:	e8 d0 07 ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	ba 40 fe 01 c0       	mov    edx,0xc001fe40
c001b652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b656:	89 10                	mov    DWORD PTR [eax],edx
c001b658:	90                   	nop
c001b659:	83 c4 0c             	add    esp,0xc
c001b65c:	c3                   	ret    
c001b65d:	90                   	nop

c001b65e <SATAPI::diskRemoved()>:
c001b65e:	c3                   	ret    
c001b65f:	90                   	nop

c001b660 <SATAPI::diskInserted()>:
c001b660:	83 ec 18             	sub    esp,0x18
c001b663:	68 6c fd 01 c0       	push   0xc001fd6c
c001b668:	e8 a1 ef fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b671:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b678:	83 c4 1c             	add    esp,0x1c
c001b67b:	c3                   	ret    

c001b67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b67c:	55                   	push   ebp
c001b67d:	57                   	push   edi
c001b67e:	56                   	push   esi
c001b67f:	53                   	push   ebx
c001b680:	83 ec 34             	sub    esp,0x34
c001b683:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b687:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b68b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b68f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b693:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001b697:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b69d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b6a7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b6ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6b1:	83 c0 02             	add    eax,0x2
c001b6b4:	c1 e0 07             	shl    eax,0x7
c001b6b7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b6bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6c3:	c1 e0 07             	shl    eax,0x7
c001b6c6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b6ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6ce:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b6dc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b6e2:	e8 51 e5 ff ff       	call   c0019c38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b6e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	b8 01 00 00 00       	mov    eax,0x1
c001b6f3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b6f8:	0f 84 49 02 00 00    	je     c001b947 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b6fe:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b708:	8b 00                	mov    eax,DWORD PTR [eax]
c001b70a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b710:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b716:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b71a:	c1 e1 05             	shl    ecx,0x5
c001b71d:	01 c8                	add    eax,ecx
c001b71f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b721:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b727:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b72d:	89 08                	mov    DWORD PTR [eax],ecx
c001b72f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b735:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b73b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b741:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b744:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b747:	50                   	push   eax
c001b748:	68 90 00 00 00       	push   0x90
c001b74d:	6a 00                	push   0x0
c001b74f:	53                   	push   ebx
c001b750:	e8 7b 4d fe ff       	call   c00004d0 <memset>
c001b755:	b9 0c 00 00 00       	mov    ecx,0xc
c001b75a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b75e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b760:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b766:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b76a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b770:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b774:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b778:	48                   	dec    eax
c001b779:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b77e:	89 c1                	mov    ecx,eax
c001b780:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b786:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b78b:	09 c8                	or     eax,ecx
c001b78d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b793:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b796:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b79d:	66 25 00 7f          	and    ax,0x7f00
c001b7a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b7a5:	66 0d 27 80          	or     ax,0x8027
c001b7a9:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b7ad:	66 89 03             	mov    WORD PTR [ebx],ax
c001b7b0:	89 d0                	mov    eax,edx
c001b7b2:	c1 ea 18             	shr    edx,0x18
c001b7b5:	c1 e8 10             	shr    eax,0x10
c001b7b8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b7bb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b7be:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7c2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b7c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7c9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b7cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b7d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7db:	31 c0                	xor    eax,eax
c001b7dd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b7e3:	80 e1 88             	and    cl,0x88
c001b7e6:	74 0a                	je     c001b7f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001b7e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7ed:	74 0a                	je     c001b7f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001b7ef:	40                   	inc    eax
c001b7f0:	eb eb                	jmp    c001b7dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001b7f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7f7:	75 43                	jne    c001b83c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	68 84 fd 01 c0       	push   0xc001fd84
c001b801:	e8 08 ee fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b806:	58                   	pop    eax
c001b807:	5a                   	pop    edx
c001b808:	68 99 fd 01 c0       	push   0xc001fd99
c001b80d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001b813:	e8 da cf fe ff       	call   c00087f2 <VgaText::puts(char const*)>
c001b818:	59                   	pop    ecx
c001b819:	5b                   	pop    ebx
c001b81a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b81e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b824:	e8 a9 e4 ff ff       	call   c0019cd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b829:	5e                   	pop    esi
c001b82a:	5f                   	pop    edi
c001b82b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b82f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b835:	e8 78 e4 ff ff       	call   c0019cb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b83a:	eb 48                	jmp    c001b884 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001b83c:	be 01 00 00 00       	mov    esi,0x1
c001b841:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b845:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b849:	d3 e6                	shl    esi,cl
c001b84b:	c1 e7 07             	shl    edi,0x7
c001b84e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b854:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b859:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b85d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b863:	85 c6                	test   esi,eax
c001b865:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b86b:	0f 84 a3 00 00 00    	je     c001b914 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001b871:	0f ba e0 1e          	bt     eax,0x1e
c001b875:	73 1a                	jae    c001b891 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001b877:	83 ec 0c             	sub    esp,0xc
c001b87a:	68 ab fd 01 c0       	push   0xc001fdab
c001b87f:	e8 8a ed fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	b8 01 00 00 00       	mov    eax,0x1
c001b88c:	e9 b6 00 00 00       	jmp    c001b947 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b891:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b897:	83 f8 0d             	cmp    eax,0xd
c001b89a:	77 0a                	ja     c001b8a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	68 c8 00 00 00       	push   0xc8
c001b8a4:	eb 28                	jmp    c001b8ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b8a6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b8ac:	83 f8 0d             	cmp    eax,0xd
c001b8af:	77 0a                	ja     c001b8bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001b8b1:	83 ec 0c             	sub    esp,0xc
c001b8b4:	68 58 02 00 00       	push   0x258
c001b8b9:	eb 13                	jmp    c001b8ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b8bb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b8c1:	83 f8 06             	cmp    eax,0x6
c001b8c4:	77 10                	ja     c001b8d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	68 dc 05 00 00       	push   0x5dc
c001b8ce:	e8 6d 82 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c001b8d3:	83 c4 10             	add    esp,0x10
c001b8d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b8da:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b8dd:	75 06                	jne    c001b8e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001b8df:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b8e3:	74 15                	je     c001b8fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b8e5:	83 fb 06             	cmp    ebx,0x6
c001b8e8:	77 10                	ja     c001b8fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b8ea:	83 ec 0c             	sub    esp,0xc
c001b8ed:	68 c4 09 00 00       	push   0x9c4
c001b8f2:	e8 49 82 ff ff       	call   c0013b40 <milliTenthSleep(unsigned int)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	43                   	inc    ebx
c001b8fb:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b901:	0f 85 56 ff ff ff    	jne    c001b85d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001b907:	83 ec 0c             	sub    esp,0xc
c001b90a:	68 be fd 01 c0       	push   0xc001fdbe
c001b90f:	e9 6b ff ff ff       	jmp    c001b87f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b914:	0f ba e0 1e          	bt     eax,0x1e
c001b918:	73 0d                	jae    c001b927 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001b91a:	83 ec 0c             	sub    esp,0xc
c001b91d:	68 d2 fd 01 c0       	push   0xc001fdd2
c001b922:	e9 58 ff ff ff       	jmp    c001b87f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b927:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b92c:	74 17                	je     c001b945 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b92e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b933:	74 10                	je     c001b945 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b935:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b93b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b93f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b945:	31 c0                	xor    eax,eax
c001b947:	83 c4 2c             	add    esp,0x2c
c001b94a:	5b                   	pop    ebx
c001b94b:	5e                   	pop    esi
c001b94c:	5f                   	pop    edi
c001b94d:	5d                   	pop    ebp
c001b94e:	c3                   	ret    
c001b94f:	90                   	nop

c001b950 <SATAPI::eject()>:
c001b950:	57                   	push   edi
c001b951:	b9 03 00 00 00       	mov    ecx,0x3
c001b956:	83 ec 18             	sub    esp,0x18
c001b959:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b95d:	fc                   	cld    
c001b95e:	31 c0                	xor    eax,eax
c001b960:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b962:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b967:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b96c:	50                   	push   eax
c001b96d:	6a 00                	push   0x0
c001b96f:	6a 00                	push   0x0
c001b971:	6a 00                	push   0x0
c001b973:	6a 00                	push   0x0
c001b975:	6a 02                	push   0x2
c001b977:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b97b:	50                   	push   eax
c001b97c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b980:	e8 f7 fc ff ff       	call   c001b67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b985:	31 c0                	xor    eax,eax
c001b987:	83 c4 38             	add    esp,0x38
c001b98a:	5f                   	pop    edi
c001b98b:	c3                   	ret    

c001b98c <SATAPI::detectMedia()>:
c001b98c:	53                   	push   ebx
c001b98d:	83 ec 14             	sub    esp,0x14
c001b990:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b994:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b99a:	e8 65 1c ff ff       	call   c000d604 <VCache::writeWriteBuffer()>
c001b99f:	59                   	pop    ecx
c001b9a0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b9a6:	e8 49 1c ff ff       	call   c000d5f4 <VCache::invalidateReadBuffer()>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	31 c0                	xor    eax,eax
c001b9b0:	8b 14 85 20 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdabe0]
c001b9b7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001b9bd:	75 07                	jne    c001b9c6 <SATAPI::detectMedia()+0x3a>
c001b9bf:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001b9c6:	40                   	inc    eax
c001b9c7:	83 f8 1a             	cmp    eax,0x1a
c001b9ca:	75 e4                	jne    c001b9b0 <SATAPI::detectMedia()+0x24>
c001b9cc:	83 c4 08             	add    esp,0x8
c001b9cf:	5b                   	pop    ebx
c001b9d0:	c3                   	ret    
c001b9d1:	90                   	nop

c001b9d2 <SATAPI::open(int, int, void*)>:
c001b9d2:	56                   	push   esi
c001b9d3:	53                   	push   ebx
c001b9d4:	51                   	push   ecx
c001b9d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9dd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b9e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b9ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b9f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9fb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ba05:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ba0b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ba12:	e8 3a c1 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ba17:	89 c6                	mov    esi,eax
c001ba19:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ba1f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ba25:	e8 27 c1 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001ba2a:	39 c6                	cmp    esi,eax
c001ba2c:	74 10                	je     c001ba3e <SATAPI::open(int, int, void*)+0x6c>
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	68 e7 fd 01 c0       	push   0xc001fde7
c001ba36:	e8 e8 48 ff ff       	call   c0010323 <KePanic(char const*)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	6a 02                	push   0x2
c001ba43:	e8 09 d9 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001ba48:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ba4e:	6a 03                	push   0x3
c001ba50:	50                   	push   eax
c001ba51:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ba57:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001ba5d:	e8 b2 df fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ba62:	83 c4 14             	add    esp,0x14
c001ba65:	68 78 01 00 00       	push   0x178
c001ba6a:	e8 06 be fe ff       	call   c0007875 <malloc>
c001ba6f:	83 c4 0c             	add    esp,0xc
c001ba72:	89 c6                	mov    esi,eax
c001ba74:	6a 00                	push   0x0
c001ba76:	68 ff ff ff 7f       	push   0x7fffffff
c001ba7b:	6a 00                	push   0x0
c001ba7d:	6a 00                	push   0x0
c001ba7f:	53                   	push   ebx
c001ba80:	68 fd fd 01 c0       	push   0xc001fdfd
c001ba85:	50                   	push   eax
c001ba86:	e8 6b 10 ff ff       	call   c000caf6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ba8b:	83 c4 14             	add    esp,0x14
c001ba8e:	56                   	push   esi
c001ba8f:	e8 22 11 ff ff       	call   c000cbb6 <LogicalDisk::assignDriveLetter()>
c001ba94:	5a                   	pop    edx
c001ba95:	0f be c0             	movsx  eax,al
c001ba98:	59                   	pop    ecx
c001ba99:	50                   	push   eax
c001ba9a:	68 64 fc 01 c0       	push   0xc001fc64
c001ba9f:	e8 6a eb fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001baa4:	58                   	pop    eax
c001baa5:	5a                   	pop    edx
c001baa6:	56                   	push   esi
c001baa7:	53                   	push   ebx
c001baa8:	e8 9f ff fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001baad:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001bab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bab6:	e8 c7 03 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001babb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001bac2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac5:	e8 c2 fe ff ff       	call   c001b98c <SATAPI::detectMedia()>
c001baca:	83 c4 14             	add    esp,0x14
c001bacd:	31 c0                	xor    eax,eax
c001bacf:	5b                   	pop    ebx
c001bad0:	5e                   	pop    esi
c001bad1:	c3                   	ret    

c001bad2 <SATAPI::read(unsigned long long, int, void*)>:
c001bad2:	57                   	push   edi
c001bad3:	56                   	push   esi
c001bad4:	53                   	push   ebx
c001bad5:	83 ec 30             	sub    esp,0x30
c001bad8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001badc:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001bae0:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001bae4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001baec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001baf0:	83 fe 04             	cmp    esi,0x4
c001baf3:	7e 10                	jle    c001bb05 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	68 0b fe 01 c0       	push   0xc001fe0b
c001bafd:	e8 21 48 ff ff       	call   c0010323 <KePanic(char const*)>
c001bb02:	83 c4 10             	add    esp,0x10
c001bb05:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bb0b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb11:	51                   	push   ecx
c001bb12:	50                   	push   eax
c001bb13:	83 c0 02             	add    eax,0x2
c001bb16:	c1 e0 07             	shl    eax,0x7
c001bb19:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001bb1f:	50                   	push   eax
c001bb20:	52                   	push   edx
c001bb21:	e8 d6 e1 ff ff       	call   c0019cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bb26:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001bb2a:	b9 03 00 00 00       	mov    ecx,0x3
c001bb2f:	fc                   	cld    
c001bb30:	31 c0                	xor    eax,eax
c001bb32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb34:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001bb39:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001bb3e:	83 c4 0c             	add    esp,0xc
c001bb41:	6a 00                	push   0x0
c001bb43:	6a 00                	push   0x0
c001bb45:	6a 00                	push   0x0
c001bb47:	6a 00                	push   0x0
c001bb49:	6a 02                	push   0x2
c001bb4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001bb4f:	50                   	push   eax
c001bb50:	53                   	push   ebx
c001bb51:	e8 26 fb ff ff       	call   c001b67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bb56:	83 c4 20             	add    esp,0x20
c001bb59:	85 c0                	test   eax,eax
c001bb5b:	75 44                	jne    c001bba1 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001bb5d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001bb61:	b9 03 00 00 00       	mov    ecx,0x3
c001bb66:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb6c:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001bb71:	0f c8                	bswap  eax
c001bb73:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001bb77:	89 f0                	mov    eax,esi
c001bb79:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bb7d:	50                   	push   eax
c001bb7e:	56                   	push   esi
c001bb7f:	c1 e6 0b             	shl    esi,0xb
c001bb82:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bb86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb8e:	56                   	push   esi
c001bb8f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bb93:	50                   	push   eax
c001bb94:	53                   	push   ebx
c001bb95:	e8 e2 fa ff ff       	call   c001b67c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bb9a:	83 c4 20             	add    esp,0x20
c001bb9d:	85 c0                	test   eax,eax
c001bb9f:	74 14                	je     c001bbb5 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001bba1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bba5:	83 ec 0c             	sub    esp,0xc
c001bba8:	53                   	push   ebx
c001bba9:	e8 de fd ff ff       	call   c001b98c <SATAPI::detectMedia()>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbb5:	83 c4 30             	add    esp,0x30
c001bbb8:	5b                   	pop    ebx
c001bbb9:	5e                   	pop    esi
c001bbba:	5f                   	pop    edi
c001bbbb:	c3                   	ret    

c001bbbc <IOAPIC::close(int, int, void*)>:
c001bbbc:	b8 00 00 00 00       	mov    eax,0x0
c001bbc1:	c3                   	ret    

c001bbc2 <apicGetBase()>:
c001bbc2:	55                   	push   ebp
c001bbc3:	89 e5                	mov    ebp,esp
c001bbc5:	83 ec 18             	sub    esp,0x18
c001bbc8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bbcd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001bbd3:	83 e0 08             	and    eax,0x8
c001bbd6:	84 c0                	test   al,al
c001bbd8:	75 07                	jne    c001bbe1 <apicGetBase()+0x1f>
c001bbda:	b8 00 00 00 00       	mov    eax,0x0
c001bbdf:	eb 21                	jmp    c001bc02 <apicGetBase()+0x40>
c001bbe1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bbe6:	83 ec 08             	sub    esp,0x8
c001bbe9:	6a 1b                	push   0x1b
c001bbeb:	50                   	push   eax
c001bbec:	e8 bb b2 fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bbf7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001bbfa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bbfd:	25 00 00 ff ff       	and    eax,0xffff0000
c001bc02:	c9                   	leave  
c001bc03:	c3                   	ret    

c001bc04 <IOAPIC::IOAPIC()>:
c001bc04:	83 ec 0c             	sub    esp,0xc
c001bc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0b:	83 ec 08             	sub    esp,0x8
c001bc0e:	68 70 fe 01 c0       	push   0xc001fe70
c001bc13:	50                   	push   eax
c001bc14:	e8 cb ff fe ff       	call   c000bbe4 <Device::Device(char const*)>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	ba 80 fe 01 c0       	mov    edx,0xc001fe80
c001bc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc25:	89 10                	mov    DWORD PTR [eax],edx
c001bc27:	90                   	nop
c001bc28:	83 c4 0c             	add    esp,0xc
c001bc2b:	c3                   	ret    

c001bc2c <apicOpen()>:
c001bc2c:	55                   	push   ebp
c001bc2d:	89 e5                	mov    ebp,esp
c001bc2f:	53                   	push   ebx
c001bc30:	83 ec 34             	sub    esp,0x34
c001bc33:	a0 a0 6b 02 c0       	mov    al,ds:0xc0026ba0
c001bc38:	83 f0 01             	xor    eax,0x1
c001bc3b:	84 c0                	test   al,al
c001bc3d:	0f 84 9d 00 00 00    	je     c001bce0 <apicOpen()+0xb4>
c001bc43:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc47:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c001bc4c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bc4f:	0f 83 84 00 00 00    	jae    c001bcd9 <apicOpen()+0xad>
c001bc55:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bc62:	e8 0e bc fe ff       	call   c0007875 <malloc>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	89 c3                	mov    ebx,eax
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	53                   	push   ebx
c001bc70:	e8 8f ff ff ff       	call   c001bc04 <IOAPIC::IOAPIC()>
c001bc75:	83 c4 10             	add    esp,0x10
c001bc78:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bc7b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bc7e:	25 ff 00 00 00       	and    eax,0xff
c001bc83:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bc86:	89 14 85 80 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9480],edx
c001bc8d:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c001bc92:	40                   	inc    eax
c001bc93:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c001bc98:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bc9d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001bca3:	83 ec 08             	sub    esp,0x8
c001bca6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bca9:	50                   	push   eax
c001bcaa:	e8 9d fd fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001bcaf:	83 c4 10             	add    esp,0x10
c001bcb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bcb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb7:	83 c0 08             	add    eax,0x8
c001bcba:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcbc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bcbf:	25 ff 00 00 00       	and    eax,0xff
c001bcc4:	6a 00                	push   0x0
c001bcc6:	6a 00                	push   0x0
c001bcc8:	50                   	push   eax
c001bcc9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bccc:	ff d2                	call   edx
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bcd4:	e9 6e ff ff ff       	jmp    c001bc47 <apicOpen()+0x1b>
c001bcd9:	c6 05 a0 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026ba0,0x1
c001bce0:	e8 dd fe ff ff       	call   c001bbc2 <apicGetBase()>
c001bce5:	05 f0 00 00 00       	add    eax,0xf0
c001bcea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bced:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcf2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bcf5:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bcfc:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bd03:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bd06:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bd09:	89 10                	mov    DWORD PTR [eax],edx
c001bd0b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bd12:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c001bd17:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bd1a:	7d 70                	jge    c001bd8c <apicOpen()+0x160>
c001bd1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd1f:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd26:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bd29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd2c:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd33:	c1 e8 08             	shr    eax,0x8
c001bd36:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bd3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd3d:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd44:	c1 e8 18             	shr    eax,0x18
c001bd47:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bd4a:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bd4e:	75 37                	jne    c001bd87 <apicOpen()+0x15b>
c001bd50:	e8 6d fe ff ff       	call   c001bbc2 <apicGetBase()>
c001bd55:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bd59:	75 07                	jne    c001bd62 <apicOpen()+0x136>
c001bd5b:	ba 60 03 00 00       	mov    edx,0x360
c001bd60:	eb 05                	jmp    c001bd67 <apicOpen()+0x13b>
c001bd62:	ba 50 03 00 00       	mov    edx,0x350
c001bd67:	01 d0                	add    eax,edx
c001bd69:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bd6c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd71:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bd74:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bd7b:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bd7f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd82:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bd85:	89 10                	mov    DWORD PTR [eax],edx
c001bd87:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bd8a:	eb 86                	jmp    c001bd12 <apicOpen()+0xe6>
c001bd8c:	90                   	nop
c001bd8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bd90:	c9                   	leave  
c001bd91:	c3                   	ret    

c001bd92 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bd92:	55                   	push   ebp
c001bd93:	89 e5                	mov    ebp,esp
c001bd95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bd9e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bda1:	72 1d                	jb     c001bdc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bda3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001bdac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdaf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001bdb5:	01 d0                	add    eax,edx
c001bdb7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bdba:	73 04                	jae    c001bdc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bdbc:	b0 01                	mov    al,0x1
c001bdbe:	eb 02                	jmp    c001bdc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001bdc0:	b0 00                	mov    al,0x0
c001bdc2:	5d                   	pop    ebp
c001bdc3:	c3                   	ret    

c001bdc4 <IOAPIC::read(int)>:
c001bdc4:	55                   	push   ebp
c001bdc5:	89 e5                	mov    ebp,esp
c001bdc7:	83 ec 10             	sub    esp,0x10
c001bdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bdd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bdd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bdd9:	31 d2                	xor    edx,edx
c001bddb:	88 c2                	mov    dl,al
c001bddd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bde0:	89 10                	mov    DWORD PTR [eax],edx
c001bde2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bde5:	83 c0 10             	add    eax,0x10
c001bde8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdea:	c9                   	leave  
c001bdeb:	c3                   	ret    

c001bdec <IOAPIC::open(int, int, void*)>:
c001bdec:	55                   	push   ebp
c001bded:	89 e5                	mov    ebp,esp
c001bdef:	57                   	push   edi
c001bdf0:	56                   	push   esi
c001bdf1:	53                   	push   ebx
c001bdf2:	83 ec 04             	sub    esp,0x4
c001bdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bdfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001be01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be0a:	8b 14 85 c0 57 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda840]
c001be11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001be1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be23:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c001be2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be36:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001be3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be45:	89 c6                	mov    esi,eax
c001be47:	81 e6 ff 00 00 00    	and    esi,0xff
c001be4d:	89 d0                	mov    eax,edx
c001be4f:	ba 00 00 00 00       	mov    edx,0x0
c001be54:	89 c7                	mov    edi,eax
c001be56:	83 e7 ff             	and    edi,0xffffffff
c001be59:	89 f9                	mov    ecx,edi
c001be5b:	89 d0                	mov    eax,edx
c001be5d:	25 ff 00 00 00       	and    eax,0xff
c001be62:	89 c3                	mov    ebx,eax
c001be64:	89 c8                	mov    eax,ecx
c001be66:	89 da                	mov    edx,ebx
c001be68:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be6b:	8d 5e 08             	lea    ebx,[esi+0x8]
c001be6e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001be72:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001be76:	83 e0 00             	and    eax,0x0
c001be79:	09 d0                	or     eax,edx
c001be7b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001be7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be82:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be88:	8d 50 01             	lea    edx,[eax+0x1]
c001be8b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be8e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001be94:	31 d2                	xor    edx,edx
c001be96:	88 c2                	mov    dl,al
c001be98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9b:	83 c2 08             	add    edx,0x8
c001be9e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bea2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001bea8:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001beae:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001beb2:	6a 01                	push   0x1
c001beb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001beb7:	e8 08 ff ff ff       	call   c001bdc4 <IOAPIC::read(int)>
c001bebc:	83 c4 08             	add    esp,0x8
c001bebf:	c1 f8 10             	sar    eax,0x10
c001bec2:	25 ff 00 00 00       	and    eax,0xff
c001bec7:	8d 50 01             	lea    edx,[eax+0x1]
c001beca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001becd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bed3:	b8 00 00 00 00       	mov    eax,0x0
c001bed8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bedb:	5b                   	pop    ebx
c001bedc:	5e                   	pop    esi
c001bedd:	5f                   	pop    edi
c001bede:	5d                   	pop    ebp
c001bedf:	c3                   	ret    

c001bee0 <IOAPIC::write(int, int)>:
c001bee0:	55                   	push   ebp
c001bee1:	89 e5                	mov    ebp,esp
c001bee3:	83 ec 10             	sub    esp,0x10
c001bee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001beef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bef2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bef5:	31 d2                	xor    edx,edx
c001bef7:	88 c2                	mov    dl,al
c001bef9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001befc:	89 10                	mov    DWORD PTR [eax],edx
c001befe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bf01:	8d 50 10             	lea    edx,[eax+0x10]
c001bf04:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf07:	89 02                	mov    DWORD PTR [edx],eax
c001bf09:	90                   	nop
c001bf0a:	c9                   	leave  
c001bf0b:	c3                   	ret    

c001bf0c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bf0c:	55                   	push   ebp
c001bf0d:	89 e5                	mov    ebp,esp
c001bf0f:	53                   	push   ebx
c001bf10:	83 ec 2c             	sub    esp,0x2c
c001bf13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf16:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bf19:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bf1c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bf1f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf25:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bf28:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001bf2b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bf2e:	88 d8                	mov    al,bl
c001bf30:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bf33:	88 c8                	mov    al,cl
c001bf35:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001bf38:	88 d0                	mov    al,dl
c001bf3a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bf3d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf40:	25 ff 00 00 00       	and    eax,0xff
c001bf45:	83 c0 08             	add    eax,0x8
c001bf48:	01 c0                	add    eax,eax
c001bf4a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf4d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf50:	25 ff 00 00 00       	and    eax,0xff
c001bf55:	83 c0 08             	add    eax,0x8
c001bf58:	01 c0                	add    eax,eax
c001bf5a:	40                   	inc    eax
c001bf5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bf5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf61:	50                   	push   eax
c001bf62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf65:	e8 5a fe ff ff       	call   c001bdc4 <IOAPIC::read(int)>
c001bf6a:	83 c4 08             	add    esp,0x8
c001bf6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bf70:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bf77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bf7a:	c1 e0 18             	shl    eax,0x18
c001bf7d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bf80:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bf83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf86:	52                   	push   edx
c001bf87:	50                   	push   eax
c001bf88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf8b:	e8 50 ff ff ff       	call   c001bee0 <IOAPIC::write(int, int)>
c001bf90:	83 c4 0c             	add    esp,0xc
c001bf93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf96:	50                   	push   eax
c001bf97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf9a:	e8 25 fe ff ff       	call   c001bdc4 <IOAPIC::read(int)>
c001bf9f:	83 c4 08             	add    esp,0x8
c001bfa2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bfa5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bfac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bfb3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bfba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bfbe:	74 09                	je     c001bfc9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001bfc0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001bfc7:	eb 07                	jmp    c001bfd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001bfc9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bfd0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bfd4:	74 09                	je     c001bfdf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001bfd6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001bfdd:	eb 07                	jmp    c001bfe6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001bfdf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bfe6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bfed:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001bff0:	25 ff 00 00 00       	and    eax,0xff
c001bff5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bff8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001bffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bffe:	52                   	push   edx
c001bfff:	50                   	push   eax
c001c000:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001c003:	e8 d8 fe ff ff       	call   c001bee0 <IOAPIC::write(int, int)>
c001c008:	83 c4 0c             	add    esp,0xc
c001c00b:	90                   	nop
c001c00c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001c00f:	c9                   	leave  
c001c010:	c3                   	ret    
c001c011:	66 90                	xchg   ax,ax
c001c013:	90                   	nop

c001c014 <APICTimer::close(int, int, void*)>:
c001c014:	b8 00 00 00 00       	mov    eax,0x0
c001c019:	c3                   	ret    
c001c01a:	66 90                	xchg   ax,ax

c001c01c <apicTimerHandler(regs*, void*)>:
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c023:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c025:	b8 10 27 00 00       	mov    eax,0x2710
c001c02a:	ba 00 00 00 00       	mov    edx,0x0
c001c02f:	f7 f1                	div    ecx
c001c031:	83 ec 0c             	sub    esp,0xc
c001c034:	50                   	push   eax
c001c035:	e8 e2 12 ff ff       	call   c000d31c <timerHandler(unsigned int)>
c001c03a:	83 c4 10             	add    esp,0x10
c001c03d:	90                   	nop
c001c03e:	83 c4 0c             	add    esp,0xc
c001c041:	c3                   	ret    
c001c042:	66 90                	xchg   ax,ax

c001c044 <APICTimer::open(int, int, void*)>:
c001c044:	83 ec 0c             	sub    esp,0xc
c001c047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c04d:	83 c0 24             	add    eax,0x24
c001c050:	8b 00                	mov    eax,DWORD PTR [eax]
c001c052:	83 ec 08             	sub    esp,0x8
c001c055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c05d:	ff d0                	call   eax
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c066:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c06a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c078:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001c07e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c082:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c088:	83 ec 0c             	sub    esp,0xc
c001c08b:	51                   	push   ecx
c001c08c:	6a 01                	push   0x1
c001c08e:	68 1c c0 01 c0       	push   0xc001c01c
c001c093:	52                   	push   edx
c001c094:	50                   	push   eax
c001c095:	e8 5e f9 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c09a:	83 c4 20             	add    esp,0x20
c001c09d:	89 c2                	mov    edx,eax
c001c09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c0a9:	b8 00 00 00 00       	mov    eax,0x0
c001c0ae:	83 c4 0c             	add    esp,0xc
c001c0b1:	c3                   	ret    
c001c0b2:	66 90                	xchg   ax,ax

c001c0b4 <APICTimer::write(int)>:
c001c0b4:	83 ec 0c             	sub    esp,0xc
c001c0b7:	83 ec 0c             	sub    esp,0xc
c001c0ba:	68 a4 fe 01 c0       	push   0xc001fea4
c001c0bf:	e8 5f 42 ff ff       	call   c0010323 <KePanic(char const*)>
c001c0c4:	83 c4 10             	add    esp,0x10
c001c0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c0d5:	90                   	nop
c001c0d6:	83 c4 0c             	add    esp,0xc
c001c0d9:	c3                   	ret    
c001c0da:	66 90                	xchg   ax,ax

c001c0dc <APICTimer::APICTimer()>:
c001c0dc:	83 ec 0c             	sub    esp,0xc
c001c0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e3:	83 ec 08             	sub    esp,0x8
c001c0e6:	68 b4 fe 01 c0       	push   0xc001feb4
c001c0eb:	50                   	push   eax
c001c0ec:	e8 5f 11 ff ff       	call   c000d250 <Timer::Timer(char const*)>
c001c0f1:	83 c4 10             	add    esp,0x10
c001c0f4:	ba c8 fe 01 c0       	mov    edx,0xc001fec8
c001c0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fd:	89 10                	mov    DWORD PTR [eax],edx
c001c0ff:	90                   	nop
c001c100:	83 c4 0c             	add    esp,0xc
c001c103:	c3                   	ret    

c001c104 <PIT::write(int)>:
c001c104:	83 ec 10             	sub    esp,0x10
c001c107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c10b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c10f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c119:	a3 a4 6b 02 c0       	mov    ds:0xc0026ba4,eax
c001c11e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c123:	99                   	cdq    
c001c124:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c12c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c133:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c138:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c13c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c141:	ee                   	out    dx,al
c001c142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c146:	25 ff 00 00 00       	and    eax,0xff
c001c14b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c152:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c156:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c15a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c15f:	ee                   	out    dx,al
c001c160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c164:	c1 f8 08             	sar    eax,0x8
c001c167:	25 ff 00 00 00       	and    eax,0xff
c001c16c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c173:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c177:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c17b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c180:	ee                   	out    dx,al
c001c181:	90                   	nop
c001c182:	83 c4 10             	add    esp,0x10
c001c185:	c3                   	ret    
c001c186:	66 90                	xchg   ax,ax

c001c188 <pitHandler(regs*, void*)>:
c001c188:	83 ec 0c             	sub    esp,0xc
c001c18b:	8b 0d a4 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ba4
c001c191:	b8 10 27 00 00       	mov    eax,0x2710
c001c196:	99                   	cdq    
c001c197:	f7 f9                	idiv   ecx
c001c199:	83 ec 0c             	sub    esp,0xc
c001c19c:	50                   	push   eax
c001c19d:	e8 7a 11 ff ff       	call   c000d31c <timerHandler(unsigned int)>
c001c1a2:	83 c4 10             	add    esp,0x10
c001c1a5:	90                   	nop
c001c1a6:	83 c4 0c             	add    esp,0xc
c001c1a9:	c3                   	ret    
c001c1aa:	66 90                	xchg   ax,ax

c001c1ac <PIT::open(int, int, void*)>:
c001c1ac:	83 ec 0c             	sub    esp,0xc
c001c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1b5:	83 c0 24             	add    eax,0x24
c001c1b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1ba:	83 ec 08             	sub    esp,0x8
c001c1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1c5:	ff d0                	call   eax
c001c1c7:	83 c4 10             	add    esp,0x10
c001c1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	6a 00                	push   0x0
c001c1d3:	6a 01                	push   0x1
c001c1d5:	68 88 c1 01 c0       	push   0xc001c188
c001c1da:	6a 00                	push   0x0
c001c1dc:	50                   	push   eax
c001c1dd:	e8 16 f8 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1e2:	83 c4 20             	add    esp,0x20
c001c1e5:	89 c2                	mov    edx,eax
c001c1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c1f1:	b8 00 00 00 00       	mov    eax,0x0
c001c1f6:	83 c4 0c             	add    esp,0xc
c001c1f9:	c3                   	ret    
c001c1fa:	66 90                	xchg   ax,ax

c001c1fc <PIT::close(int, int, void*)>:
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c203:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c211:	6a 01                	push   0x1
c001c213:	68 88 c1 01 c0       	push   0xc001c188
c001c218:	6a 00                	push   0x0
c001c21a:	50                   	push   eax
c001c21b:	e8 0e f8 fe ff       	call   c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	b8 00 00 00 00       	mov    eax,0x0
c001c228:	83 c4 0c             	add    esp,0xc
c001c22b:	c3                   	ret    

c001c22c <PIT::PIT()>:
c001c22c:	83 ec 0c             	sub    esp,0xc
c001c22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c233:	83 ec 08             	sub    esp,0x8
c001c236:	68 f0 fe 01 c0       	push   0xc001fef0
c001c23b:	50                   	push   eax
c001c23c:	e8 0f 10 ff ff       	call   c000d250 <Timer::Timer(char const*)>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c001c249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24d:	89 10                	mov    DWORD PTR [eax],edx
c001c24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c253:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c259:	31 d2                	xor    edx,edx
c001c25b:	88 c2                	mov    dl,al
c001c25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c261:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c272:	31 d2                	xor    edx,edx
c001c274:	88 c2                	mov    dl,al
c001c276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c283:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c289:	8d 50 01             	lea    edx,[eax+0x1]
c001c28c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c290:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c296:	31 d2                	xor    edx,edx
c001c298:	88 c2                	mov    dl,al
c001c29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c2a2:	83 e1 3f             	and    ecx,0x3f
c001c2a5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c2a9:	90                   	nop
c001c2aa:	83 c4 0c             	add    esp,0xc
c001c2ad:	c3                   	ret    
c001c2ae:	66 90                	xchg   ax,ax

c001c2b0 <avxDetect>:
c001c2b0:	b8 01 00 00 00       	mov    eax,0x1
c001c2b5:	0f a2                	cpuid  
c001c2b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c2bd:	74 15                	je     c001c2d4 <avxDetect.noAVX>
c001c2bf:	b8 01 00 00 00       	mov    eax,0x1
c001c2c4:	0f a2                	cpuid  
c001c2c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c2cc:	74 06                	je     c001c2d4 <avxDetect.noAVX>
c001c2ce:	b8 01 00 00 00       	mov    eax,0x1
c001c2d3:	c3                   	ret    

c001c2d4 <avxDetect.noAVX>:
c001c2d4:	b8 00 00 00 00       	mov    eax,0x0
c001c2d9:	c3                   	ret    

c001c2da <avxSave>:
c001c2da:	53                   	push   ebx
c001c2db:	52                   	push   edx
c001c2dc:	31 c0                	xor    eax,eax
c001c2de:	48                   	dec    eax
c001c2df:	89 c2                	mov    edx,eax
c001c2e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2e5:	0f ae 23             	xsave  [ebx]
c001c2e8:	5a                   	pop    edx
c001c2e9:	5b                   	pop    ebx
c001c2ea:	c3                   	ret    

c001c2eb <avxLoad>:
c001c2eb:	53                   	push   ebx
c001c2ec:	52                   	push   edx
c001c2ed:	31 c0                	xor    eax,eax
c001c2ef:	48                   	dec    eax
c001c2f0:	89 c2                	mov    edx,eax
c001c2f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2f6:	0f ae 2b             	xrstor [ebx]
c001c2f9:	5a                   	pop    edx
c001c2fa:	5b                   	pop    ebx
c001c2fb:	c3                   	ret    

c001c2fc <avxInit>:
c001c2fc:	e8 b7 02 00 00       	call   c001c5b8 <sseInit>
c001c301:	50                   	push   eax
c001c302:	51                   	push   ecx
c001c303:	0f 20 e0             	mov    eax,cr4
c001c306:	0d 00 00 04 00       	or     eax,0x40000
c001c30b:	0f 22 e0             	mov    cr4,eax
c001c30e:	31 c9                	xor    ecx,ecx
c001c310:	0f 01 d0             	xgetbv 
c001c313:	0d 07 00 00 00       	or     eax,0x7
c001c318:	0f 01 d1             	xsetbv 
c001c31b:	59                   	pop    ecx
c001c31c:	58                   	pop    eax
c001c31d:	c3                   	ret    

c001c31e <avxClose>:
c001c31e:	c3                   	ret    

c001c31f <wouldSheSayYes>:
c001c31f:	c3                   	ret    
c001c320:	49                   	dec    ecx
c001c321:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c325:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c329:	75 20                	jne    c001c34b <isr0+0xb>
c001c32b:	4e                   	dec    esi
c001c32c:	79 61                	jns    c001c38f <isr7+0x3>
c001c32e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c333:	66 90                	xchg   ax,ax
c001c335:	66 90                	xchg   ax,ax
c001c337:	66 90                	xchg   ax,ax
c001c339:	66 90                	xchg   ax,ax
c001c33b:	66 90                	xchg   ax,ax
c001c33d:	66 90                	xchg   ax,ax
c001c33f:	90                   	nop

c001c340 <isr0>:
c001c340:	fa                   	cli    
c001c341:	68 00 00 00 00       	push   0x0
c001c346:	68 00 00 00 00       	push   0x0
c001c34b:	e9 44 01 00 00       	jmp    c001c494 <int_common_stub>

c001c350 <isr1>:
c001c350:	fa                   	cli    
c001c351:	6a 00                	push   0x0
c001c353:	6a 01                	push   0x1
c001c355:	e9 3a 01 00 00       	jmp    c001c494 <int_common_stub>

c001c35a <isr2>:
c001c35a:	fa                   	cli    
c001c35b:	6a 00                	push   0x0
c001c35d:	6a 02                	push   0x2
c001c35f:	e9 30 01 00 00       	jmp    c001c494 <int_common_stub>

c001c364 <isr3>:
c001c364:	fa                   	cli    
c001c365:	6a 00                	push   0x0
c001c367:	6a 03                	push   0x3
c001c369:	e9 26 01 00 00       	jmp    c001c494 <int_common_stub>

c001c36e <isr4>:
c001c36e:	fa                   	cli    
c001c36f:	6a 00                	push   0x0
c001c371:	6a 04                	push   0x4
c001c373:	e9 1c 01 00 00       	jmp    c001c494 <int_common_stub>

c001c378 <isr5>:
c001c378:	fa                   	cli    
c001c379:	6a 00                	push   0x0
c001c37b:	6a 05                	push   0x5
c001c37d:	e9 12 01 00 00       	jmp    c001c494 <int_common_stub>

c001c382 <isr6>:
c001c382:	fa                   	cli    
c001c383:	6a 00                	push   0x0
c001c385:	6a 06                	push   0x6
c001c387:	e9 08 01 00 00       	jmp    c001c494 <int_common_stub>

c001c38c <isr7>:
c001c38c:	fa                   	cli    
c001c38d:	6a 00                	push   0x0
c001c38f:	6a 07                	push   0x7
c001c391:	e9 fe 00 00 00       	jmp    c001c494 <int_common_stub>

c001c396 <isr8>:
c001c396:	fa                   	cli    
c001c397:	6a 08                	push   0x8
c001c399:	e9 f6 00 00 00       	jmp    c001c494 <int_common_stub>

c001c39e <isr9>:
c001c39e:	fa                   	cli    
c001c39f:	6a 00                	push   0x0
c001c3a1:	6a 09                	push   0x9
c001c3a3:	e9 ec 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3a8 <isr10>:
c001c3a8:	fa                   	cli    
c001c3a9:	6a 0a                	push   0xa
c001c3ab:	e9 e4 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3b0 <isr11>:
c001c3b0:	fa                   	cli    
c001c3b1:	6a 0b                	push   0xb
c001c3b3:	e9 dc 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3b8 <isr12>:
c001c3b8:	fa                   	cli    
c001c3b9:	6a 0c                	push   0xc
c001c3bb:	e9 d4 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3c0 <isr13>:
c001c3c0:	fa                   	cli    
c001c3c1:	6a 0d                	push   0xd
c001c3c3:	e9 cc 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3c8 <isr14>:
c001c3c8:	fa                   	cli    
c001c3c9:	6a 0e                	push   0xe
c001c3cb:	e9 c4 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3d0 <isr15>:
c001c3d0:	fa                   	cli    
c001c3d1:	6a 00                	push   0x0
c001c3d3:	6a 0f                	push   0xf
c001c3d5:	e9 ba 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3da <isr16>:
c001c3da:	fa                   	cli    
c001c3db:	6a 00                	push   0x0
c001c3dd:	6a 10                	push   0x10
c001c3df:	e9 b0 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3e4 <isr17>:
c001c3e4:	fa                   	cli    
c001c3e5:	6a 00                	push   0x0
c001c3e7:	6a 11                	push   0x11
c001c3e9:	e9 a6 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3ee <isr18>:
c001c3ee:	fa                   	cli    
c001c3ef:	6a 00                	push   0x0
c001c3f1:	6a 12                	push   0x12
c001c3f3:	e9 9c 00 00 00       	jmp    c001c494 <int_common_stub>

c001c3f8 <irq3>:
c001c3f8:	fa                   	cli    
c001c3f9:	6a 00                	push   0x0
c001c3fb:	6a 23                	push   0x23
c001c3fd:	e9 92 00 00 00       	jmp    c001c494 <int_common_stub>

c001c402 <irq4>:
c001c402:	fa                   	cli    
c001c403:	6a 00                	push   0x0
c001c405:	6a 24                	push   0x24
c001c407:	e9 88 00 00 00       	jmp    c001c494 <int_common_stub>

c001c40c <irq5>:
c001c40c:	fa                   	cli    
c001c40d:	6a 00                	push   0x0
c001c40f:	6a 25                	push   0x25
c001c411:	e9 7e 00 00 00       	jmp    c001c494 <int_common_stub>

c001c416 <irq6>:
c001c416:	fa                   	cli    
c001c417:	6a 00                	push   0x0
c001c419:	6a 26                	push   0x26
c001c41b:	e9 74 00 00 00       	jmp    c001c494 <int_common_stub>

c001c420 <irq7>:
c001c420:	fa                   	cli    
c001c421:	6a 00                	push   0x0
c001c423:	6a 27                	push   0x27
c001c425:	e9 6a 00 00 00       	jmp    c001c494 <int_common_stub>

c001c42a <irq8>:
c001c42a:	fa                   	cli    
c001c42b:	6a 00                	push   0x0
c001c42d:	6a 28                	push   0x28
c001c42f:	e9 60 00 00 00       	jmp    c001c494 <int_common_stub>

c001c434 <irq9>:
c001c434:	fa                   	cli    
c001c435:	6a 00                	push   0x0
c001c437:	6a 29                	push   0x29
c001c439:	e9 56 00 00 00       	jmp    c001c494 <int_common_stub>

c001c43e <irq10>:
c001c43e:	fa                   	cli    
c001c43f:	6a 00                	push   0x0
c001c441:	6a 2a                	push   0x2a
c001c443:	e9 4c 00 00 00       	jmp    c001c494 <int_common_stub>

c001c448 <irq11>:
c001c448:	fa                   	cli    
c001c449:	6a 00                	push   0x0
c001c44b:	6a 2b                	push   0x2b
c001c44d:	e9 42 00 00 00       	jmp    c001c494 <int_common_stub>

c001c452 <irq12>:
c001c452:	fa                   	cli    
c001c453:	6a 00                	push   0x0
c001c455:	6a 2c                	push   0x2c
c001c457:	e9 38 00 00 00       	jmp    c001c494 <int_common_stub>

c001c45c <irq13>:
c001c45c:	fa                   	cli    
c001c45d:	6a 00                	push   0x0
c001c45f:	6a 2d                	push   0x2d
c001c461:	e9 2e 00 00 00       	jmp    c001c494 <int_common_stub>

c001c466 <irq14>:
c001c466:	fa                   	cli    
c001c467:	6a 00                	push   0x0
c001c469:	6a 2e                	push   0x2e
c001c46b:	e9 24 00 00 00       	jmp    c001c494 <int_common_stub>

c001c470 <irq15>:
c001c470:	fa                   	cli    
c001c471:	6a 00                	push   0x0
c001c473:	6a 2f                	push   0x2f
c001c475:	e9 1a 00 00 00       	jmp    c001c494 <int_common_stub>

c001c47a <irq1>:
c001c47a:	fa                   	cli    
c001c47b:	6a 00                	push   0x0
c001c47d:	6a 21                	push   0x21
c001c47f:	eb 13                	jmp    c001c494 <int_common_stub>

c001c481 <irq2>:
c001c481:	fa                   	cli    
c001c482:	6a 00                	push   0x0
c001c484:	6a 22                	push   0x22
c001c486:	eb 0c                	jmp    c001c494 <int_common_stub>

c001c488 <isr96>:
c001c488:	6a 00                	push   0x0
c001c48a:	6a 60                	push   0x60
c001c48c:	fb                   	sti    
c001c48d:	eb 37                	jmp    c001c4c6 <syscall_common_stub>

c001c48f <irq0>:
c001c48f:	fa                   	cli    
c001c490:	6a 00                	push   0x0
c001c492:	6a 20                	push   0x20

c001c494 <int_common_stub>:
c001c494:	60                   	pusha  
c001c495:	1e                   	push   ds
c001c496:	06                   	push   es
c001c497:	0f a0                	push   fs
c001c499:	0f a8                	push   gs
c001c49b:	66 b8 10 00          	mov    ax,0x10
c001c49f:	66 8e d8             	mov    ds,ax
c001c4a2:	66 8e c0             	mov    es,ax
c001c4a5:	66 8e e0             	mov    fs,ax
c001c4a8:	66 8e e8             	mov    gs,ax
c001c4ab:	54                   	push   esp
c001c4ac:	fc                   	cld    
c001c4ad:	e8 46 fa fe ff       	call   c000bef8 <int_handler>
c001c4b2:	81 c4 04 00 00 00    	add    esp,0x4
c001c4b8:	0f a9                	pop    gs
c001c4ba:	0f a1                	pop    fs
c001c4bc:	07                   	pop    es
c001c4bd:	1f                   	pop    ds
c001c4be:	61                   	popa   
c001c4bf:	81 c4 08 00 00 00    	add    esp,0x8
c001c4c5:	cf                   	iret   

c001c4c6 <syscall_common_stub>:
c001c4c6:	60                   	pusha  
c001c4c7:	1e                   	push   ds
c001c4c8:	06                   	push   es
c001c4c9:	0f a0                	push   fs
c001c4cb:	0f a8                	push   gs
c001c4cd:	66 b8 10 00          	mov    ax,0x10
c001c4d1:	66 8e d8             	mov    ds,ax
c001c4d4:	66 8e c0             	mov    es,ax
c001c4d7:	66 8e e0             	mov    fs,ax
c001c4da:	66 8e e8             	mov    gs,ax
c001c4dd:	54                   	push   esp
c001c4de:	fc                   	cld    
c001c4df:	e8 14 fa fe ff       	call   c000bef8 <int_handler>
c001c4e4:	81 c4 04 00 00 00    	add    esp,0x4
c001c4ea:	0f a9                	pop    gs
c001c4ec:	0f a1                	pop    fs
c001c4ee:	07                   	pop    es
c001c4ef:	1f                   	pop    ds
c001c4f0:	e8 82 43 ff ff       	call   c0010877 <KiCheckSignalZ>
c001c4f5:	3d 00 00 00 00       	cmp    eax,0x0
c001c4fa:	74 1d                	je     c001c519 <syscall_common_stub.skipSignals>
c001c4fc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c504:	89 e3                	mov    ebx,esp
c001c506:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001c509:	51                   	push   ecx
c001c50a:	68 21 c5 01 c0       	push   0xc001c521
c001c50f:	89 dc                	mov    esp,ebx
c001c511:	61                   	popa   
c001c512:	81 c4 08 00 00 00    	add    esp,0x8
c001c518:	cf                   	iret   

c001c519 <syscall_common_stub.skipSignals>:
c001c519:	61                   	popa   
c001c51a:	81 c4 08 00 00 00    	add    esp,0x8
c001c520:	cf                   	iret   

c001c521 <irq16>:
c001c521:	fa                   	cli    
c001c522:	6a 00                	push   0x0
c001c524:	6a 30                	push   0x30
c001c526:	e9 69 ff ff ff       	jmp    c001c494 <int_common_stub>

c001c52b <irq17>:
c001c52b:	fa                   	cli    
c001c52c:	6a 00                	push   0x0
c001c52e:	6a 31                	push   0x31
c001c530:	e9 5f ff ff ff       	jmp    c001c494 <int_common_stub>

c001c535 <irq18>:
c001c535:	fa                   	cli    
c001c536:	6a 00                	push   0x0
c001c538:	6a 32                	push   0x32
c001c53a:	e9 55 ff ff ff       	jmp    c001c494 <int_common_stub>

c001c53f <irq19>:
c001c53f:	fa                   	cli    
c001c540:	6a 00                	push   0x0
c001c542:	6a 33                	push   0x33
c001c544:	e9 4b ff ff ff       	jmp    c001c494 <int_common_stub>

c001c549 <irq20>:
c001c549:	fa                   	cli    
c001c54a:	6a 00                	push   0x0
c001c54c:	6a 34                	push   0x34
c001c54e:	e9 41 ff ff ff       	jmp    c001c494 <int_common_stub>

c001c553 <irq21>:
c001c553:	fa                   	cli    
c001c554:	6a 00                	push   0x0
c001c556:	6a 35                	push   0x35
c001c558:	e9 37 ff ff ff       	jmp    c001c494 <int_common_stub>

c001c55d <irq22>:
c001c55d:	fa                   	cli    
c001c55e:	6a 00                	push   0x0
c001c560:	6a 36                	push   0x36
c001c562:	e9 2d ff ff ff       	jmp    c001c494 <int_common_stub>

c001c567 <irq23>:
c001c567:	fa                   	cli    
c001c568:	6a 00                	push   0x0
c001c56a:	6a 37                	push   0x37
c001c56c:	e9 23 ff ff ff       	jmp    c001c494 <int_common_stub>
c001c571:	66 90                	xchg   ax,ax
c001c573:	66 90                	xchg   ax,ax
c001c575:	66 90                	xchg   ax,ax
c001c577:	66 90                	xchg   ax,ax
c001c579:	66 90                	xchg   ax,ax
c001c57b:	66 90                	xchg   ax,ax
c001c57d:	66 90                	xchg   ax,ax
c001c57f:	90                   	nop

c001c580 <i386GetRDRAND>:
c001c580:	b9 64 00 00 00       	mov    ecx,0x64

c001c585 <retry>:
c001c585:	0f c7 f0             	rdrand eax
c001c588:	72 05                	jb     c001c58f <retry.done>
c001c58a:	e2 f9                	loop   c001c585 <retry>

c001c58c <retry.fail>:
c001c58c:	31 c0                	xor    eax,eax
c001c58e:	c3                   	ret    

c001c58f <retry.done>:
c001c58f:	c3                   	ret    

c001c590 <absolutelyNoChanceInHell>:
c001c590:	b8 01 00 00 00       	mov    eax,0x1
c001c595:	0f a2                	cpuid  
c001c597:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c59d:	74 06                	je     c001c5a5 <sseDetect.noSSE>
c001c59f:	b8 01 00 00 00       	mov    eax,0x1
c001c5a4:	c3                   	ret    

c001c5a5 <sseDetect.noSSE>:
c001c5a5:	31 c0                	xor    eax,eax
c001c5a7:	c3                   	ret    

c001c5a8 <sseSave>:
c001c5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ac:	0f ae 00             	fxsave [eax]
c001c5af:	c3                   	ret    

c001c5b0 <sseLoad>:
c001c5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b4:	0f ae 08             	fxrstor [eax]
c001c5b7:	c3                   	ret    

c001c5b8 <sseInit>:
c001c5b8:	e8 42 00 00 00       	call   c001c5ff <x87Init>
c001c5bd:	0f 20 e0             	mov    eax,cr4
c001c5c0:	66 0d 00 06          	or     ax,0x600
c001c5c4:	0f 22 e0             	mov    cr4,eax
c001c5c7:	c3                   	ret    

c001c5c8 <sseClose>:
c001c5c8:	c3                   	ret    
c001c5c9:	66 90                	xchg   ax,ax
c001c5cb:	66 90                	xchg   ax,ax
c001c5cd:	66 90                	xchg   ax,ax
c001c5cf:	90                   	nop

c001c5d0 <value_37F>:
c001c5d0:	7f 03                	jg     c001c5d5 <value_37A+0x1>

c001c5d2 <value_37E>:
c001c5d2:	7e 03                	jle    c001c5d7 <x87Detect+0x1>

c001c5d4 <value_37A>:
c001c5d4:	7a 03                	jp     c001c5d9 <x87Detect+0x3>

c001c5d6 <x87Detect>:
c001c5d6:	b8 01 00 00 00       	mov    eax,0x1
c001c5db:	0f a2                	cpuid  
c001c5dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001c5e3:	74 06                	je     c001c5eb <x87Detect.nox87>
c001c5e5:	b8 01 00 00 00       	mov    eax,0x1
c001c5ea:	c3                   	ret    

c001c5eb <x87Detect.nox87>:
c001c5eb:	b8 00 00 00 00       	mov    eax,0x0
c001c5f0:	c3                   	ret    

c001c5f1 <x87Save>:
c001c5f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f5:	dd 30                	fnsave [eax]
c001c5f7:	c3                   	ret    

c001c5f8 <x87Load>:
c001c5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5fc:	dd 20                	frstor [eax]
c001c5fe:	c3                   	ret    

c001c5ff <x87Init>:
c001c5ff:	0f 20 c0             	mov    eax,cr0
c001c602:	66 25 fb ff          	and    ax,0xfffb
c001c606:	66 0d 22 00          	or     ax,0x22
c001c60a:	0f 22 c0             	mov    cr0,eax
c001c60d:	db e3                	fninit 
c001c60f:	0f 06                	clts   
c001c611:	d9 2d d4 c5 01 c0    	fldcw  WORD PTR ds:0xc001c5d4
c001c617:	c3                   	ret    

c001c618 <x87Close>:
c001c618:	c3                   	ret    
c001c619:	66 90                	xchg   ax,ax
c001c61b:	90                   	nop

c001c61c <__do_global_ctors_aux>:
c001c61c:	a1 cc d5 01 c0       	mov    eax,ds:0xc001d5cc
c001c621:	83 f8 ff             	cmp    eax,0xffffffff
c001c624:	74 1a                	je     c001c640 <__do_global_ctors_aux+0x24>
c001c626:	55                   	push   ebp
c001c627:	89 e5                	mov    ebp,esp
c001c629:	53                   	push   ebx
c001c62a:	52                   	push   edx
c001c62b:	bb cc d5 01 c0       	mov    ebx,0xc001d5cc
c001c630:	ff d0                	call   eax
c001c632:	83 eb 04             	sub    ebx,0x4
c001c635:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c637:	83 f8 ff             	cmp    eax,0xffffffff
c001c63a:	75 f4                	jne    c001c630 <__do_global_ctors_aux+0x14>
c001c63c:	58                   	pop    eax
c001c63d:	5b                   	pop    ebx
c001c63e:	5d                   	pop    ebp
c001c63f:	c3                   	ret    
c001c640:	c3                   	ret    
c001c641:	66 90                	xchg   ax,ax
c001c643:	90                   	nop

c001c644 <__divdi3>:
c001c644:	55                   	push   ebp
c001c645:	57                   	push   edi
c001c646:	56                   	push   esi
c001c647:	53                   	push   ebx
c001c648:	83 ec 1c             	sub    esp,0x1c
c001c64b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c64f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c653:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c656:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c65a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c65e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c662:	85 db                	test   ebx,ebx
c001c664:	0f 88 8e 00 00 00    	js     c001c6f8 <__divdi3+0xb4>
c001c66a:	89 dd                	mov    ebp,ebx
c001c66c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c674:	89 d3                	mov    ebx,edx
c001c676:	85 d2                	test   edx,edx
c001c678:	79 0d                	jns    c001c687 <__divdi3+0x43>
c001c67a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c67e:	f7 d8                	neg    eax
c001c680:	83 d2 00             	adc    edx,0x0
c001c683:	f7 da                	neg    edx
c001c685:	89 d3                	mov    ebx,edx
c001c687:	89 c7                	mov    edi,eax
c001c689:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c68c:	85 db                	test   ebx,ebx
c001c68e:	75 48                	jne    c001c6d8 <__divdi3+0x94>
c001c690:	39 ef                	cmp    edi,ebp
c001c692:	76 24                	jbe    c001c6b8 <__divdi3+0x74>
c001c694:	89 ea                	mov    edx,ebp
c001c696:	f7 f7                	div    edi
c001c698:	89 c1                	mov    ecx,eax
c001c69a:	31 f6                	xor    esi,esi
c001c69c:	89 c8                	mov    eax,ecx
c001c69e:	89 f2                	mov    edx,esi
c001c6a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6a4:	85 c9                	test   ecx,ecx
c001c6a6:	74 07                	je     c001c6af <__divdi3+0x6b>
c001c6a8:	f7 d8                	neg    eax
c001c6aa:	83 d2 00             	adc    edx,0x0
c001c6ad:	f7 da                	neg    edx
c001c6af:	83 c4 1c             	add    esp,0x1c
c001c6b2:	5b                   	pop    ebx
c001c6b3:	5e                   	pop    esi
c001c6b4:	5f                   	pop    edi
c001c6b5:	5d                   	pop    ebp
c001c6b6:	c3                   	ret    
c001c6b7:	90                   	nop
c001c6b8:	85 ff                	test   edi,edi
c001c6ba:	75 0b                	jne    c001c6c7 <__divdi3+0x83>
c001c6bc:	b8 01 00 00 00       	mov    eax,0x1
c001c6c1:	31 d2                	xor    edx,edx
c001c6c3:	f7 f3                	div    ebx
c001c6c5:	89 c7                	mov    edi,eax
c001c6c7:	31 d2                	xor    edx,edx
c001c6c9:	89 e8                	mov    eax,ebp
c001c6cb:	f7 f7                	div    edi
c001c6cd:	89 c6                	mov    esi,eax
c001c6cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6d2:	f7 f7                	div    edi
c001c6d4:	89 c1                	mov    ecx,eax
c001c6d6:	eb c4                	jmp    c001c69c <__divdi3+0x58>
c001c6d8:	39 eb                	cmp    ebx,ebp
c001c6da:	77 3c                	ja     c001c718 <__divdi3+0xd4>
c001c6dc:	0f bd f3             	bsr    esi,ebx
c001c6df:	83 f6 1f             	xor    esi,0x1f
c001c6e2:	75 40                	jne    c001c724 <__divdi3+0xe0>
c001c6e4:	39 eb                	cmp    ebx,ebp
c001c6e6:	72 09                	jb     c001c6f1 <__divdi3+0xad>
c001c6e8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c6eb:	0f 87 97 00 00 00    	ja     c001c788 <__divdi3+0x144>
c001c6f1:	b9 01 00 00 00       	mov    ecx,0x1
c001c6f6:	eb a4                	jmp    c001c69c <__divdi3+0x58>
c001c6f8:	f7 d9                	neg    ecx
c001c6fa:	83 d3 00             	adc    ebx,0x0
c001c6fd:	f7 db                	neg    ebx
c001c6ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c702:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c706:	89 dd                	mov    ebp,ebx
c001c708:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c710:	e9 5f ff ff ff       	jmp    c001c674 <__divdi3+0x30>
c001c715:	8d 76 00             	lea    esi,[esi+0x0]
c001c718:	31 f6                	xor    esi,esi
c001c71a:	31 c9                	xor    ecx,ecx
c001c71c:	e9 7b ff ff ff       	jmp    c001c69c <__divdi3+0x58>
c001c721:	8d 76 00             	lea    esi,[esi+0x0]
c001c724:	b8 20 00 00 00       	mov    eax,0x20
c001c729:	29 f0                	sub    eax,esi
c001c72b:	89 f1                	mov    ecx,esi
c001c72d:	d3 e3                	shl    ebx,cl
c001c72f:	89 fa                	mov    edx,edi
c001c731:	88 c1                	mov    cl,al
c001c733:	d3 ea                	shr    edx,cl
c001c735:	09 da                	or     edx,ebx
c001c737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c73b:	89 f1                	mov    ecx,esi
c001c73d:	d3 e7                	shl    edi,cl
c001c73f:	89 eb                	mov    ebx,ebp
c001c741:	88 c1                	mov    cl,al
c001c743:	d3 eb                	shr    ebx,cl
c001c745:	89 f1                	mov    ecx,esi
c001c747:	d3 e5                	shl    ebp,cl
c001c749:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c74c:	88 c1                	mov    cl,al
c001c74e:	d3 ea                	shr    edx,cl
c001c750:	09 d5                	or     ebp,edx
c001c752:	89 e8                	mov    eax,ebp
c001c754:	89 da                	mov    edx,ebx
c001c756:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c75a:	89 d3                	mov    ebx,edx
c001c75c:	89 c5                	mov    ebp,eax
c001c75e:	f7 e7                	mul    edi
c001c760:	39 d3                	cmp    ebx,edx
c001c762:	72 18                	jb     c001c77c <__divdi3+0x138>
c001c764:	74 0a                	je     c001c770 <__divdi3+0x12c>
c001c766:	89 e9                	mov    ecx,ebp
c001c768:	31 f6                	xor    esi,esi
c001c76a:	e9 2d ff ff ff       	jmp    c001c69c <__divdi3+0x58>
c001c76f:	90                   	nop
c001c770:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c773:	89 f1                	mov    ecx,esi
c001c775:	d3 e7                	shl    edi,cl
c001c777:	39 c7                	cmp    edi,eax
c001c779:	73 eb                	jae    c001c766 <__divdi3+0x122>
c001c77b:	90                   	nop
c001c77c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c77f:	31 f6                	xor    esi,esi
c001c781:	e9 16 ff ff ff       	jmp    c001c69c <__divdi3+0x58>
c001c786:	66 90                	xchg   ax,ax
c001c788:	31 c9                	xor    ecx,ecx
c001c78a:	e9 0d ff ff ff       	jmp    c001c69c <__divdi3+0x58>
c001c78f:	90                   	nop

c001c790 <__moddi3>:
c001c790:	55                   	push   ebp
c001c791:	57                   	push   edi
c001c792:	56                   	push   esi
c001c793:	53                   	push   ebx
c001c794:	83 ec 2c             	sub    esp,0x2c
c001c797:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c79b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c79f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c7a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c7a7:	85 db                	test   ebx,ebx
c001c7a9:	0f 88 85 00 00 00    	js     c001c834 <__moddi3+0xa4>
c001c7af:	89 de                	mov    esi,ebx
c001c7b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c7b9:	89 d7                	mov    edi,edx
c001c7bb:	85 d2                	test   edx,edx
c001c7bd:	79 09                	jns    c001c7c8 <__moddi3+0x38>
c001c7bf:	f7 d8                	neg    eax
c001c7c1:	83 d2 00             	adc    edx,0x0
c001c7c4:	f7 da                	neg    edx
c001c7c6:	89 d7                	mov    edi,edx
c001c7c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7cc:	89 cd                	mov    ebp,ecx
c001c7ce:	85 ff                	test   edi,edi
c001c7d0:	75 52                	jne    c001c824 <__moddi3+0x94>
c001c7d2:	89 c3                	mov    ebx,eax
c001c7d4:	39 f0                	cmp    eax,esi
c001c7d6:	76 24                	jbe    c001c7fc <__moddi3+0x6c>
c001c7d8:	89 c8                	mov    eax,ecx
c001c7da:	89 f2                	mov    edx,esi
c001c7dc:	f7 f3                	div    ebx
c001c7de:	89 d6                	mov    esi,edx
c001c7e0:	89 f0                	mov    eax,esi
c001c7e2:	31 d2                	xor    edx,edx
c001c7e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7e8:	85 c9                	test   ecx,ecx
c001c7ea:	74 07                	je     c001c7f3 <__moddi3+0x63>
c001c7ec:	f7 d8                	neg    eax
c001c7ee:	83 d2 00             	adc    edx,0x0
c001c7f1:	f7 da                	neg    edx
c001c7f3:	83 c4 2c             	add    esp,0x2c
c001c7f6:	5b                   	pop    ebx
c001c7f7:	5e                   	pop    esi
c001c7f8:	5f                   	pop    edi
c001c7f9:	5d                   	pop    ebp
c001c7fa:	c3                   	ret    
c001c7fb:	90                   	nop
c001c7fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c800:	85 db                	test   ebx,ebx
c001c802:	75 0d                	jne    c001c811 <__moddi3+0x81>
c001c804:	b8 01 00 00 00       	mov    eax,0x1
c001c809:	31 d2                	xor    edx,edx
c001c80b:	f7 f7                	div    edi
c001c80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c811:	89 f0                	mov    eax,esi
c001c813:	31 d2                	xor    edx,edx
c001c815:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c819:	f7 f7                	div    edi
c001c81b:	89 e8                	mov    eax,ebp
c001c81d:	f7 f7                	div    edi
c001c81f:	89 d6                	mov    esi,edx
c001c821:	eb bd                	jmp    c001c7e0 <__moddi3+0x50>
c001c823:	90                   	nop
c001c824:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c828:	39 f7                	cmp    edi,esi
c001c82a:	76 20                	jbe    c001c84c <__moddi3+0xbc>
c001c82c:	89 c8                	mov    eax,ecx
c001c82e:	89 f2                	mov    edx,esi
c001c830:	eb b2                	jmp    c001c7e4 <__moddi3+0x54>
c001c832:	66 90                	xchg   ax,ax
c001c834:	f7 d9                	neg    ecx
c001c836:	83 d3 00             	adc    ebx,0x0
c001c839:	f7 db                	neg    ebx
c001c83b:	89 de                	mov    esi,ebx
c001c83d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c845:	e9 6f ff ff ff       	jmp    c001c7b9 <__moddi3+0x29>
c001c84a:	66 90                	xchg   ax,ax
c001c84c:	0f bd c7             	bsr    eax,edi
c001c84f:	83 f0 1f             	xor    eax,0x1f
c001c852:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c856:	75 24                	jne    c001c87c <__moddi3+0xec>
c001c858:	39 f7                	cmp    edi,esi
c001c85a:	72 06                	jb     c001c862 <__moddi3+0xd2>
c001c85c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c860:	77 0c                	ja     c001c86e <__moddi3+0xde>
c001c862:	89 e9                	mov    ecx,ebp
c001c864:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c868:	19 fe                	sbb    esi,edi
c001c86a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c86e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c872:	89 f2                	mov    edx,esi
c001c874:	e9 6b ff ff ff       	jmp    c001c7e4 <__moddi3+0x54>
c001c879:	8d 76 00             	lea    esi,[esi+0x0]
c001c87c:	b8 20 00 00 00       	mov    eax,0x20
c001c881:	89 c2                	mov    edx,eax
c001c883:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c887:	29 da                	sub    edx,ebx
c001c889:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c88d:	88 d9                	mov    cl,bl
c001c88f:	d3 e7                	shl    edi,cl
c001c891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c895:	88 d1                	mov    cl,dl
c001c897:	d3 e8                	shr    eax,cl
c001c899:	09 c7                	or     edi,eax
c001c89b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c89f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c8a3:	89 d8                	mov    eax,ebx
c001c8a5:	88 d9                	mov    cl,bl
c001c8a7:	d3 e7                	shl    edi,cl
c001c8a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c8ad:	89 f3                	mov    ebx,esi
c001c8af:	88 d1                	mov    cl,dl
c001c8b1:	d3 eb                	shr    ebx,cl
c001c8b3:	89 c7                	mov    edi,eax
c001c8b5:	88 c1                	mov    cl,al
c001c8b7:	d3 e6                	shl    esi,cl
c001c8b9:	89 e8                	mov    eax,ebp
c001c8bb:	88 d1                	mov    cl,dl
c001c8bd:	d3 e8                	shr    eax,cl
c001c8bf:	09 f0                	or     eax,esi
c001c8c1:	89 f9                	mov    ecx,edi
c001c8c3:	d3 e5                	shl    ebp,cl
c001c8c5:	89 da                	mov    edx,ebx
c001c8c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c8cb:	89 d3                	mov    ebx,edx
c001c8cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c8d1:	89 c6                	mov    esi,eax
c001c8d3:	89 d1                	mov    ecx,edx
c001c8d5:	39 d3                	cmp    ebx,edx
c001c8d7:	72 27                	jb     c001c900 <__moddi3+0x170>
c001c8d9:	74 21                	je     c001c8fc <__moddi3+0x16c>
c001c8db:	29 f5                	sub    ebp,esi
c001c8dd:	19 cb                	sbb    ebx,ecx
c001c8df:	89 de                	mov    esi,ebx
c001c8e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c8e5:	d3 e6                	shl    esi,cl
c001c8e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8eb:	89 f9                	mov    ecx,edi
c001c8ed:	d3 ed                	shr    ebp,cl
c001c8ef:	09 ee                	or     esi,ebp
c001c8f1:	89 f0                	mov    eax,esi
c001c8f3:	d3 eb                	shr    ebx,cl
c001c8f5:	89 da                	mov    edx,ebx
c001c8f7:	e9 e8 fe ff ff       	jmp    c001c7e4 <__moddi3+0x54>
c001c8fc:	39 c5                	cmp    ebp,eax
c001c8fe:	73 db                	jae    c001c8db <__moddi3+0x14b>
c001c900:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c904:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c908:	89 d1                	mov    ecx,edx
c001c90a:	89 c6                	mov    esi,eax
c001c90c:	eb cd                	jmp    c001c8db <__moddi3+0x14b>
c001c90e:	66 90                	xchg   ax,ax

c001c910 <__udivdi3>:
c001c910:	55                   	push   ebp
c001c911:	57                   	push   edi
c001c912:	56                   	push   esi
c001c913:	53                   	push   ebx
c001c914:	83 ec 1c             	sub    esp,0x1c
c001c917:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c91b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c91f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c923:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c927:	85 d2                	test   edx,edx
c001c929:	75 41                	jne    c001c96c <__udivdi3+0x5c>
c001c92b:	39 f7                	cmp    edi,esi
c001c92d:	76 15                	jbe    c001c944 <__udivdi3+0x34>
c001c92f:	89 e8                	mov    eax,ebp
c001c931:	89 f2                	mov    edx,esi
c001c933:	f7 f7                	div    edi
c001c935:	31 db                	xor    ebx,ebx
c001c937:	89 da                	mov    edx,ebx
c001c939:	83 c4 1c             	add    esp,0x1c
c001c93c:	5b                   	pop    ebx
c001c93d:	5e                   	pop    esi
c001c93e:	5f                   	pop    edi
c001c93f:	5d                   	pop    ebp
c001c940:	c3                   	ret    
c001c941:	8d 76 00             	lea    esi,[esi+0x0]
c001c944:	89 f9                	mov    ecx,edi
c001c946:	85 ff                	test   edi,edi
c001c948:	75 0b                	jne    c001c955 <__udivdi3+0x45>
c001c94a:	b8 01 00 00 00       	mov    eax,0x1
c001c94f:	31 d2                	xor    edx,edx
c001c951:	f7 f7                	div    edi
c001c953:	89 c1                	mov    ecx,eax
c001c955:	31 d2                	xor    edx,edx
c001c957:	89 f0                	mov    eax,esi
c001c959:	f7 f1                	div    ecx
c001c95b:	89 c3                	mov    ebx,eax
c001c95d:	89 e8                	mov    eax,ebp
c001c95f:	f7 f1                	div    ecx
c001c961:	89 da                	mov    edx,ebx
c001c963:	83 c4 1c             	add    esp,0x1c
c001c966:	5b                   	pop    ebx
c001c967:	5e                   	pop    esi
c001c968:	5f                   	pop    edi
c001c969:	5d                   	pop    ebp
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop
c001c96c:	39 f2                	cmp    edx,esi
c001c96e:	77 1c                	ja     c001c98c <__udivdi3+0x7c>
c001c970:	0f bd da             	bsr    ebx,edx
c001c973:	83 f3 1f             	xor    ebx,0x1f
c001c976:	75 24                	jne    c001c99c <__udivdi3+0x8c>
c001c978:	39 f2                	cmp    edx,esi
c001c97a:	72 08                	jb     c001c984 <__udivdi3+0x74>
c001c97c:	39 ef                	cmp    edi,ebp
c001c97e:	0f 87 84 00 00 00    	ja     c001ca08 <__udivdi3+0xf8>
c001c984:	b8 01 00 00 00       	mov    eax,0x1
c001c989:	eb ac                	jmp    c001c937 <__udivdi3+0x27>
c001c98b:	90                   	nop
c001c98c:	31 db                	xor    ebx,ebx
c001c98e:	31 c0                	xor    eax,eax
c001c990:	89 da                	mov    edx,ebx
c001c992:	83 c4 1c             	add    esp,0x1c
c001c995:	5b                   	pop    ebx
c001c996:	5e                   	pop    esi
c001c997:	5f                   	pop    edi
c001c998:	5d                   	pop    ebp
c001c999:	c3                   	ret    
c001c99a:	66 90                	xchg   ax,ax
c001c99c:	b8 20 00 00 00       	mov    eax,0x20
c001c9a1:	29 d8                	sub    eax,ebx
c001c9a3:	88 d9                	mov    cl,bl
c001c9a5:	d3 e2                	shl    edx,cl
c001c9a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c9ab:	89 fa                	mov    edx,edi
c001c9ad:	88 c1                	mov    cl,al
c001c9af:	d3 ea                	shr    edx,cl
c001c9b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9b5:	09 d1                	or     ecx,edx
c001c9b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9bb:	88 d9                	mov    cl,bl
c001c9bd:	d3 e7                	shl    edi,cl
c001c9bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c9c3:	89 f7                	mov    edi,esi
c001c9c5:	88 c1                	mov    cl,al
c001c9c7:	d3 ef                	shr    edi,cl
c001c9c9:	88 d9                	mov    cl,bl
c001c9cb:	d3 e6                	shl    esi,cl
c001c9cd:	89 ea                	mov    edx,ebp
c001c9cf:	88 c1                	mov    cl,al
c001c9d1:	d3 ea                	shr    edx,cl
c001c9d3:	09 d6                	or     esi,edx
c001c9d5:	89 f0                	mov    eax,esi
c001c9d7:	89 fa                	mov    edx,edi
c001c9d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c9dd:	89 d7                	mov    edi,edx
c001c9df:	89 c6                	mov    esi,eax
c001c9e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c9e5:	39 d7                	cmp    edi,edx
c001c9e7:	72 13                	jb     c001c9fc <__udivdi3+0xec>
c001c9e9:	74 09                	je     c001c9f4 <__udivdi3+0xe4>
c001c9eb:	89 f0                	mov    eax,esi
c001c9ed:	31 db                	xor    ebx,ebx
c001c9ef:	e9 43 ff ff ff       	jmp    c001c937 <__udivdi3+0x27>
c001c9f4:	88 d9                	mov    cl,bl
c001c9f6:	d3 e5                	shl    ebp,cl
c001c9f8:	39 c5                	cmp    ebp,eax
c001c9fa:	73 ef                	jae    c001c9eb <__udivdi3+0xdb>
c001c9fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c9ff:	31 db                	xor    ebx,ebx
c001ca01:	e9 31 ff ff ff       	jmp    c001c937 <__udivdi3+0x27>
c001ca06:	66 90                	xchg   ax,ax
c001ca08:	31 c0                	xor    eax,eax
c001ca0a:	e9 28 ff ff ff       	jmp    c001c937 <__udivdi3+0x27>
c001ca0f:	90                   	nop

c001ca10 <__umoddi3>:
c001ca10:	55                   	push   ebp
c001ca11:	57                   	push   edi
c001ca12:	56                   	push   esi
c001ca13:	53                   	push   ebx
c001ca14:	83 ec 1c             	sub    esp,0x1c
c001ca17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ca23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca27:	89 da                	mov    edx,ebx
c001ca29:	85 c0                	test   eax,eax
c001ca2b:	75 37                	jne    c001ca64 <__umoddi3+0x54>
c001ca2d:	39 df                	cmp    edi,ebx
c001ca2f:	76 13                	jbe    c001ca44 <__umoddi3+0x34>
c001ca31:	89 f0                	mov    eax,esi
c001ca33:	f7 f7                	div    edi
c001ca35:	89 d0                	mov    eax,edx
c001ca37:	31 d2                	xor    edx,edx
c001ca39:	83 c4 1c             	add    esp,0x1c
c001ca3c:	5b                   	pop    ebx
c001ca3d:	5e                   	pop    esi
c001ca3e:	5f                   	pop    edi
c001ca3f:	5d                   	pop    ebp
c001ca40:	c3                   	ret    
c001ca41:	8d 76 00             	lea    esi,[esi+0x0]
c001ca44:	89 fd                	mov    ebp,edi
c001ca46:	85 ff                	test   edi,edi
c001ca48:	75 0b                	jne    c001ca55 <__umoddi3+0x45>
c001ca4a:	b8 01 00 00 00       	mov    eax,0x1
c001ca4f:	31 d2                	xor    edx,edx
c001ca51:	f7 f7                	div    edi
c001ca53:	89 c5                	mov    ebp,eax
c001ca55:	89 d8                	mov    eax,ebx
c001ca57:	31 d2                	xor    edx,edx
c001ca59:	f7 f5                	div    ebp
c001ca5b:	89 f0                	mov    eax,esi
c001ca5d:	f7 f5                	div    ebp
c001ca5f:	89 d0                	mov    eax,edx
c001ca61:	eb d4                	jmp    c001ca37 <__umoddi3+0x27>
c001ca63:	90                   	nop
c001ca64:	89 f1                	mov    ecx,esi
c001ca66:	39 d8                	cmp    eax,ebx
c001ca68:	76 0a                	jbe    c001ca74 <__umoddi3+0x64>
c001ca6a:	89 f0                	mov    eax,esi
c001ca6c:	83 c4 1c             	add    esp,0x1c
c001ca6f:	5b                   	pop    ebx
c001ca70:	5e                   	pop    esi
c001ca71:	5f                   	pop    edi
c001ca72:	5d                   	pop    ebp
c001ca73:	c3                   	ret    
c001ca74:	0f bd e8             	bsr    ebp,eax
c001ca77:	83 f5 1f             	xor    ebp,0x1f
c001ca7a:	75 1c                	jne    c001ca98 <__umoddi3+0x88>
c001ca7c:	39 d8                	cmp    eax,ebx
c001ca7e:	72 04                	jb     c001ca84 <__umoddi3+0x74>
c001ca80:	39 f7                	cmp    edi,esi
c001ca82:	77 08                	ja     c001ca8c <__umoddi3+0x7c>
c001ca84:	89 da                	mov    edx,ebx
c001ca86:	29 fe                	sub    esi,edi
c001ca88:	19 c2                	sbb    edx,eax
c001ca8a:	89 f1                	mov    ecx,esi
c001ca8c:	89 c8                	mov    eax,ecx
c001ca8e:	83 c4 1c             	add    esp,0x1c
c001ca91:	5b                   	pop    ebx
c001ca92:	5e                   	pop    esi
c001ca93:	5f                   	pop    edi
c001ca94:	5d                   	pop    ebp
c001ca95:	c3                   	ret    
c001ca96:	66 90                	xchg   ax,ax
c001ca98:	ba 20 00 00 00       	mov    edx,0x20
c001ca9d:	29 ea                	sub    edx,ebp
c001ca9f:	89 e9                	mov    ecx,ebp
c001caa1:	d3 e0                	shl    eax,cl
c001caa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001caa7:	89 f8                	mov    eax,edi
c001caa9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001caad:	88 d1                	mov    cl,dl
c001caaf:	d3 e8                	shr    eax,cl
c001cab1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cab5:	09 c1                	or     ecx,eax
c001cab7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cabb:	89 e9                	mov    ecx,ebp
c001cabd:	d3 e7                	shl    edi,cl
c001cabf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cac3:	89 d8                	mov    eax,ebx
c001cac5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cac9:	88 d1                	mov    cl,dl
c001cacb:	d3 e8                	shr    eax,cl
c001cacd:	89 c7                	mov    edi,eax
c001cacf:	89 e9                	mov    ecx,ebp
c001cad1:	d3 e3                	shl    ebx,cl
c001cad3:	89 f0                	mov    eax,esi
c001cad5:	88 d1                	mov    cl,dl
c001cad7:	d3 e8                	shr    eax,cl
c001cad9:	09 d8                	or     eax,ebx
c001cadb:	89 e9                	mov    ecx,ebp
c001cadd:	d3 e6                	shl    esi,cl
c001cadf:	89 f3                	mov    ebx,esi
c001cae1:	89 fa                	mov    edx,edi
c001cae3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001cae7:	89 d1                	mov    ecx,edx
c001cae9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001caed:	89 c6                	mov    esi,eax
c001caef:	89 d7                	mov    edi,edx
c001caf1:	39 d1                	cmp    ecx,edx
c001caf3:	72 27                	jb     c001cb1c <__umoddi3+0x10c>
c001caf5:	74 21                	je     c001cb18 <__umoddi3+0x108>
c001caf7:	89 ca                	mov    edx,ecx
c001caf9:	29 f3                	sub    ebx,esi
c001cafb:	19 fa                	sbb    edx,edi
c001cafd:	89 d0                	mov    eax,edx
c001caff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001cb03:	d3 e0                	shl    eax,cl
c001cb05:	89 e9                	mov    ecx,ebp
c001cb07:	d3 eb                	shr    ebx,cl
c001cb09:	09 d8                	or     eax,ebx
c001cb0b:	d3 ea                	shr    edx,cl
c001cb0d:	83 c4 1c             	add    esp,0x1c
c001cb10:	5b                   	pop    ebx
c001cb11:	5e                   	pop    esi
c001cb12:	5f                   	pop    edi
c001cb13:	5d                   	pop    ebp
c001cb14:	c3                   	ret    
c001cb15:	8d 76 00             	lea    esi,[esi+0x0]
c001cb18:	39 c3                	cmp    ebx,eax
c001cb1a:	73 db                	jae    c001caf7 <__umoddi3+0xe7>
c001cb1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001cb20:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001cb24:	89 d7                	mov    edi,edx
c001cb26:	89 c6                	mov    esi,eax
c001cb28:	eb cd                	jmp    c001caf7 <__umoddi3+0xe7>

Disassembly of section .init:

c001cb2a <_init>:
c001cb2a:	55                   	push   ebp
c001cb2b:	89 e5                	mov    ebp,esp
c001cb2d:	e8 c2 35 fe ff       	call   c00000f4 <frame_dummy>
c001cb32:	e8 e5 fa ff ff       	call   c001c61c <__do_global_ctors_aux>
c001cb37:	5d                   	pop    ebp
c001cb38:	c3                   	ret    

Disassembly of section .fini:

c001cb39 <_fini>:
c001cb39:	55                   	push   ebp
c001cb3a:	89 e5                	mov    ebp,esp
c001cb3c:	e8 43 35 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001cb41:	5d                   	pop    ebp
c001cb42:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001cb44 <Computer::~Computer()>:
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	ba 54 de 01 c0       	mov    edx,0xc001de54
c001cb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb50:	89 10                	mov    DWORD PTR [eax],edx
c001cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb56:	83 ec 0c             	sub    esp,0xc
c001cb59:	50                   	push   eax
c001cb5a:	e8 ef ed fe ff       	call   c000b94e <Device::~Device()>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	90                   	nop
c001cb63:	83 c4 0c             	add    esp,0xc
c001cb66:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001cb68 <Computer::~Computer()>:
c001cb68:	83 ec 0c             	sub    esp,0xc
c001cb6b:	83 ec 0c             	sub    esp,0xc
c001cb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb72:	e8 cd ff ff ff       	call   c001cb44 <Computer::~Computer()>
c001cb77:	83 c4 10             	add    esp,0x10
c001cb7a:	83 ec 08             	sub    esp,0x8
c001cb7d:	68 70 01 00 00       	push   0x170
c001cb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb86:	e8 8d d9 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	83 c4 0c             	add    esp,0xc
c001cb91:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001cb92 <idleCommon()>:
c001cb92:	83 ec 0c             	sub    esp,0xc
c001cb95:	fa                   	cli    
c001cb96:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001cb9c:	e8 9f 6c ff ff       	call   c0013840 <schedule()>
c001cba1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001cba6:	48                   	dec    eax
c001cba7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001cbac:	75 01                	jne    c001cbaf <idleCommon()+0x1d>
c001cbae:	fb                   	sti    
c001cbaf:	83 c4 0c             	add    esp,0xc
c001cbb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001cbb4 <LinkedList<UnixFile>::~LinkedList()>:
c001cbb4:	90                   	nop
c001cbb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001cbb6 <LinkedList<UnixFile>::LinkedList()>:
c001cbb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbcf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbf6:	90                   	nop
c001cbf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cbf8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cbf8:	83 ec 0c             	sub    esp,0xc
c001cbfb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cc00:	75 10                	jne    c001cc12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	68 68 e0 01 c0       	push   0xc001e068
c001cc0a:	e8 14 37 ff ff       	call   c0010323 <KePanic(char const*)>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc16:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc18:	85 c0                	test   eax,eax
c001cc1a:	74 34                	je     c001cc50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc23:	85 c0                	test   eax,eax
c001cc25:	74 29                	je     c001cc50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc4e:	eb 65                	jmp    c001ccb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc54:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc56:	85 c0                	test   eax,eax
c001cc58:	75 4b                	jne    c001cca5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc61:	85 c0                	test   eax,eax
c001cc63:	75 40                	jne    c001cca5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc6d:	89 10                	mov    DWORD PTR [eax],edx
c001cc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc8f:	85 c0                	test   eax,eax
c001cc91:	74 22                	je     c001ccb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc93:	83 ec 0c             	sub    esp,0xc
c001cc96:	68 8a e0 01 c0       	push   0xc001e08a
c001cc9b:	e8 83 36 ff ff       	call   c0010323 <KePanic(char const*)>
c001cca0:	83 c4 10             	add    esp,0x10
c001cca3:	eb 10                	jmp    c001ccb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cca5:	83 ec 0c             	sub    esp,0xc
c001cca8:	68 94 e0 01 c0       	push   0xc001e094
c001ccad:	e8 71 36 ff ff       	call   c0010323 <KePanic(char const*)>
c001ccb2:	83 c4 10             	add    esp,0x10
c001ccb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccbc:	8d 50 01             	lea    edx,[eax+0x1]
c001ccbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ccc6:	90                   	nop
c001ccc7:	83 c4 0c             	add    esp,0xc
c001ccca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001cccc <LinkedList<UnixFile>::getFirstElement()>:
c001cccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ccd4 <LinkedList<UnixFile>::removeFirst()>:
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccdd:	85 c0                	test   eax,eax
c001ccdf:	75 12                	jne    c001ccf3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001cce1:	83 ec 0c             	sub    esp,0xc
c001cce4:	68 a0 e0 01 c0       	push   0xc001e0a0
c001cce9:	e8 35 36 ff ff       	call   c0010323 <KePanic(char const*)>
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	eb 7e                	jmp    c001cd71 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ccf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccfd:	85 c0                	test   eax,eax
c001ccff:	74 10                	je     c001cd11 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	68 eb e0 01 c0       	push   0xc001e0eb
c001cd09:	e8 15 36 ff ff       	call   c0010323 <KePanic(char const*)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd15:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd1a:	85 c0                	test   eax,eax
c001cd1c:	75 33                	jne    c001cd51 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd3a:	83 f8 01             	cmp    eax,0x1
c001cd3d:	74 21                	je     c001cd60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	68 c4 e0 01 c0       	push   0xc001e0c4
c001cd47:	e8 d7 35 ff ff       	call   c0010323 <KePanic(char const*)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	eb 0f                	jmp    c001cd60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd55:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd57:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5e:	89 10                	mov    DWORD PTR [eax],edx
c001cd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd67:	8d 50 ff             	lea    edx,[eax-0x1]
c001cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd71:	83 c4 0c             	add    esp,0xc
c001cd74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cd76 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cd76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd7d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cd7e <DriverlessDevice::~DriverlessDevice()>:
c001cd7e:	ba 3c e7 01 c0       	mov    edx,0xc001e73c
c001cd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd87:	89 10                	mov    DWORD PTR [eax],edx
c001cd89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd8d:	50                   	push   eax
c001cd8e:	e8 bb eb fe ff       	call   c000b94e <Device::~Device()>
c001cd93:	83 c4 04             	add    esp,0x4
c001cd96:	90                   	nop
c001cd97:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cd98 <DriverlessDevice::~DriverlessDevice()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	83 ec 0c             	sub    esp,0xc
c001cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda2:	e8 d7 ff ff ff       	call   c001cd7e <DriverlessDevice::~DriverlessDevice()>
c001cda7:	83 c4 10             	add    esp,0x10
c001cdaa:	83 ec 08             	sub    esp,0x8
c001cdad:	68 58 01 00 00       	push   0x158
c001cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb6:	e8 5d d7 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001cdc2 <LinkedList<Device>::addElement(Device*)>:
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cdca:	75 10                	jne    c001cddc <LinkedList<Device>::addElement(Device*)+0x1a>
c001cdcc:	83 ec 0c             	sub    esp,0xc
c001cdcf:	68 68 e0 01 c0       	push   0xc001e068
c001cdd4:	e8 4a 35 ff ff       	call   c0010323 <KePanic(char const*)>
c001cdd9:	83 c4 10             	add    esp,0x10
c001cddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cde2:	85 c0                	test   eax,eax
c001cde4:	74 3a                	je     c001ce20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cded:	85 c0                	test   eax,eax
c001cdef:	74 2f                	je     c001ce20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdfc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ce02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce0a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce14:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce1e:	eb 68                	jmp    c001ce88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce26:	85 c0                	test   eax,eax
c001ce28:	75 4e                	jne    c001ce78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce31:	85 c0                	test   eax,eax
c001ce33:	75 43                	jne    c001ce78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce3d:	89 10                	mov    DWORD PTR [eax],edx
c001ce3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce51:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce62:	85 c0                	test   eax,eax
c001ce64:	74 22                	je     c001ce88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	68 8a e0 01 c0       	push   0xc001e08a
c001ce6e:	e8 b0 34 ff ff       	call   c0010323 <KePanic(char const*)>
c001ce73:	83 c4 10             	add    esp,0x10
c001ce76:	eb 10                	jmp    c001ce88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	68 94 e0 01 c0       	push   0xc001e094
c001ce80:	e8 9e 34 ff ff       	call   c0010323 <KePanic(char const*)>
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce8f:	8d 50 01             	lea    edx,[eax+0x1]
c001ce92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce99:	90                   	nop
c001ce9a:	83 c4 0c             	add    esp,0xc
c001ce9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ce9e <LinkedList<Device>::LinkedList()>:
c001ce9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cea2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ceb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cecc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ced3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cede:	90                   	nop
c001cedf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cee0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cee6:	85 c0                	test   eax,eax
c001cee8:	75 0e                	jne    c001cef8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ceea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cef1:	85 c0                	test   eax,eax
c001cef3:	75 03                	jne    c001cef8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cef5:	b0 01                	mov    al,0x1
c001cef7:	c3                   	ret    
c001cef8:	b0 00                	mov    al,0x0
c001cefa:	90                   	nop
c001cefb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cefc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf00:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cf04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cf04:	83 ec 0c             	sub    esp,0xc
c001cf07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf0d:	85 c0                	test   eax,eax
c001cf0f:	75 17                	jne    c001cf28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	68 a0 e0 01 c0       	push   0xc001e0a0
c001cf19:	e8 05 34 ff ff       	call   c0010323 <KePanic(char const*)>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	e9 92 00 00 00       	jmp    c001cfb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cf26:	66 90                	xchg   ax,ax
c001cf28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf32:	85 c0                	test   eax,eax
c001cf34:	0f 95 c0             	setne  al
c001cf37:	84 c0                	test   al,al
c001cf39:	74 11                	je     c001cf4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cf3b:	83 ec 0c             	sub    esp,0xc
c001cf3e:	68 eb e0 01 c0       	push   0xc001e0eb
c001cf43:	e8 db 33 ff ff       	call   c0010323 <KePanic(char const*)>
c001cf48:	83 c4 10             	add    esp,0x10
c001cf4b:	90                   	nop
c001cf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf50:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf52:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf55:	85 c0                	test   eax,eax
c001cf57:	0f 94 c0             	sete   al
c001cf5a:	84 c0                	test   al,al
c001cf5c:	74 36                	je     c001cf94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf7a:	83 f8 01             	cmp    eax,0x1
c001cf7d:	74 25                	je     c001cfa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf7f:	83 ec 0c             	sub    esp,0xc
c001cf82:	68 c4 e0 01 c0       	push   0xc001e0c4
c001cf87:	e8 97 33 ff ff       	call   c0010323 <KePanic(char const*)>
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	eb 13                	jmp    c001cfa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf91:	8d 76 00             	lea    esi,[esi+0x0]
c001cf94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf98:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf9a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cf9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa1:	89 10                	mov    DWORD PTR [eax],edx
c001cfa3:	90                   	nop
c001cfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cfab:	8d 50 ff             	lea    edx,[eax-0x1]
c001cfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001cfb8:	83 c4 0c             	add    esp,0xc
c001cfbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cfbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cfc4:	75 12                	jne    c001cfd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cfc6:	83 ec 0c             	sub    esp,0xc
c001cfc9:	68 68 e0 01 c0       	push   0xc001e068
c001cfce:	e8 50 33 ff ff       	call   c0010323 <KePanic(char const*)>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	66 90                	xchg   ax,ax
c001cfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfde:	85 c0                	test   eax,eax
c001cfe0:	74 36                	je     c001d018 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfe9:	85 c0                	test   eax,eax
c001cfeb:	74 2b                	je     c001d018 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cff8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d003:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d00d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d014:	eb 6a                	jmp    c001d080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d016:	66 90                	xchg   ax,ax
c001d018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d01e:	85 c0                	test   eax,eax
c001d020:	75 4e                	jne    c001d070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d029:	85 c0                	test   eax,eax
c001d02b:	75 43                	jne    c001d070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001d02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d031:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d035:	89 10                	mov    DWORD PTR [eax],edx
c001d037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d03b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d03f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d049:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d054:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d057:	85 c0                	test   eax,eax
c001d059:	74 25                	je     c001d080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d05b:	83 ec 0c             	sub    esp,0xc
c001d05e:	68 8a e0 01 c0       	push   0xc001e08a
c001d063:	e8 bb 32 ff ff       	call   c0010323 <KePanic(char const*)>
c001d068:	83 c4 10             	add    esp,0x10
c001d06b:	eb 13                	jmp    c001d080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d06d:	8d 76 00             	lea    esi,[esi+0x0]
c001d070:	83 ec 0c             	sub    esp,0xc
c001d073:	68 94 e0 01 c0       	push   0xc001e094
c001d078:	e8 a6 32 ff ff       	call   c0010323 <KePanic(char const*)>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d087:	8d 50 01             	lea    edx,[eax+0x1]
c001d08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d08e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d091:	90                   	nop
c001d092:	83 c4 0c             	add    esp,0xc
c001d095:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001d098 <ACPI::~ACPI()>:
c001d098:	83 ec 0c             	sub    esp,0xc
c001d09b:	ba a4 ec 01 c0       	mov    edx,0xc001eca4
c001d0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a4:	89 10                	mov    DWORD PTR [eax],edx
c001d0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	50                   	push   eax
c001d0ae:	e8 9b e8 fe ff       	call   c000b94e <Device::~Device()>
c001d0b3:	83 c4 10             	add    esp,0x10
c001d0b6:	90                   	nop
c001d0b7:	83 c4 0c             	add    esp,0xc
c001d0ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001d0bc <ACPI::~ACPI()>:
c001d0bc:	83 ec 0c             	sub    esp,0xc
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c6:	e8 cd ff ff ff       	call   c001d098 <ACPI::~ACPI()>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	83 ec 08             	sub    esp,0x8
c001d0d1:	68 64 12 00 00       	push   0x1264
c001d0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0da:	e8 39 d4 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	83 c4 0c             	add    esp,0xc
c001d0e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001d0e8 <LinkedList<Device>::~LinkedList()>:
c001d0e8:	90                   	nop
c001d0e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001d0ec <LinkedList<Device>::isEmpty()>:
c001d0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0f2:	85 c0                	test   eax,eax
c001d0f4:	75 0e                	jne    c001d104 <LinkedList<Device>::isEmpty()+0x18>
c001d0f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d0fd:	85 c0                	test   eax,eax
c001d0ff:	75 03                	jne    c001d104 <LinkedList<Device>::isEmpty()+0x18>
c001d101:	b0 01                	mov    al,0x1
c001d103:	c3                   	ret    
c001d104:	b0 00                	mov    al,0x0
c001d106:	90                   	nop
c001d107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001d108 <LinkedList<Device>::getFirstElement()>:
c001d108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d10c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d10e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d110 <LinkedList<Device>::removeFirst()>:
c001d110:	83 ec 0c             	sub    esp,0xc
c001d113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d117:	8b 00                	mov    eax,DWORD PTR [eax]
c001d119:	85 c0                	test   eax,eax
c001d11b:	75 17                	jne    c001d134 <LinkedList<Device>::removeFirst()+0x24>
c001d11d:	83 ec 0c             	sub    esp,0xc
c001d120:	68 a0 e0 01 c0       	push   0xc001e0a0
c001d125:	e8 f9 31 ff ff       	call   c0010323 <KePanic(char const*)>
c001d12a:	83 c4 10             	add    esp,0x10
c001d12d:	e9 92 00 00 00       	jmp    c001d1c4 <LinkedList<Device>::removeFirst()+0xb4>
c001d132:	66 90                	xchg   ax,ax
c001d134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d13b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d141:	85 c0                	test   eax,eax
c001d143:	74 13                	je     c001d158 <LinkedList<Device>::removeFirst()+0x48>
c001d145:	83 ec 0c             	sub    esp,0xc
c001d148:	68 eb e0 01 c0       	push   0xc001e0eb
c001d14d:	e8 d1 31 ff ff       	call   c0010323 <KePanic(char const*)>
c001d152:	83 c4 10             	add    esp,0x10
c001d155:	8d 76 00             	lea    esi,[esi+0x0]
c001d158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d15e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d164:	85 c0                	test   eax,eax
c001d166:	75 34                	jne    c001d19c <LinkedList<Device>::removeFirst()+0x8c>
c001d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d176:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d181:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d184:	83 f8 01             	cmp    eax,0x1
c001d187:	74 27                	je     c001d1b0 <LinkedList<Device>::removeFirst()+0xa0>
c001d189:	83 ec 0c             	sub    esp,0xc
c001d18c:	68 c4 e0 01 c0       	push   0xc001e0c4
c001d191:	e8 8d 31 ff ff       	call   c0010323 <KePanic(char const*)>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	eb 15                	jmp    c001d1b0 <LinkedList<Device>::removeFirst()+0xa0>
c001d19b:	90                   	nop
c001d19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ac:	89 10                	mov    DWORD PTR [eax],edx
c001d1ae:	66 90                	xchg   ax,ax
c001d1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d1b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001d1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1c4:	83 c4 0c             	add    esp,0xc
c001d1c7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d1c8 <CPU::~CPU()>:
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	ba 40 ee 01 c0       	mov    edx,0xc001ee40
c001d1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d4:	89 10                	mov    DWORD PTR [eax],edx
c001d1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1da:	83 ec 0c             	sub    esp,0xc
c001d1dd:	50                   	push   eax
c001d1de:	e8 6b e7 fe ff       	call   c000b94e <Device::~Device()>
c001d1e3:	83 c4 10             	add    esp,0x10
c001d1e6:	90                   	nop
c001d1e7:	83 c4 0c             	add    esp,0xc
c001d1ea:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d1ec <CPU::~CPU()>:
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	83 ec 0c             	sub    esp,0xc
c001d1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f6:	e8 cd ff ff ff       	call   c001d1c8 <CPU::~CPU()>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	83 ec 08             	sub    esp,0x8
c001d201:	68 94 11 00 00       	push   0x1194
c001d206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d20a:	e8 09 d3 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	83 c4 0c             	add    esp,0xc
c001d215:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d218 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d218:	90                   	nop
c001d219:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d21c <ThreadControlBlock::ThreadControlBlock()>:
c001d21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d220:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d236:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d23d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d241:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d24c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d257:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d25b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d263:	90                   	nop
c001d264:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d268 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d276:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d27d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d281:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d296:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d29d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d2a8:	90                   	nop
c001d2a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d2ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d2ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d2b3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d2b4 <PCI::~PCI()>:
c001d2b4:	83 ec 0c             	sub    esp,0xc
c001d2b7:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c001d2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c0:	89 10                	mov    DWORD PTR [eax],edx
c001d2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c6:	83 ec 0c             	sub    esp,0xc
c001d2c9:	50                   	push   eax
c001d2ca:	e8 09 e1 fe ff       	call   c000b3d8 <Bus::~Bus()>
c001d2cf:	83 c4 10             	add    esp,0x10
c001d2d2:	90                   	nop
c001d2d3:	83 c4 0c             	add    esp,0xc
c001d2d6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d2d8 <PCI::~PCI()>:
c001d2d8:	83 ec 0c             	sub    esp,0xc
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2e2:	e8 cd ff ff ff       	call   c001d2b4 <PCI::~PCI()>
c001d2e7:	83 c4 10             	add    esp,0x10
c001d2ea:	83 ec 08             	sub    esp,0x8
c001d2ed:	68 5c 01 00 00       	push   0x15c
c001d2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2f6:	e8 1d d2 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d2fb:	83 c4 10             	add    esp,0x10
c001d2fe:	83 c4 0c             	add    esp,0xc
c001d301:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d302 <IDE::~IDE()>:
c001d302:	83 ec 0c             	sub    esp,0xc
c001d305:	ba a4 fb 01 c0       	mov    edx,0xc001fba4
c001d30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d30e:	89 10                	mov    DWORD PTR [eax],edx
c001d310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	50                   	push   eax
c001d318:	e8 ab ea fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	90                   	nop
c001d321:	83 c4 0c             	add    esp,0xc
c001d324:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d326 <IDE::~IDE()>:
c001d326:	83 ec 0c             	sub    esp,0xc
c001d329:	83 ec 0c             	sub    esp,0xc
c001d32c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d330:	e8 cd ff ff ff       	call   c001d302 <IDE::~IDE()>
c001d335:	83 c4 10             	add    esp,0x10
c001d338:	83 ec 08             	sub    esp,0x8
c001d33b:	68 70 02 00 00       	push   0x270
c001d340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d344:	e8 cf d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d349:	83 c4 10             	add    esp,0x10
c001d34c:	83 c4 0c             	add    esp,0xc
c001d34f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d350 <SATABus::~SATABus()>:
c001d350:	83 ec 0c             	sub    esp,0xc
c001d353:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c001d358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d35c:	89 10                	mov    DWORD PTR [eax],edx
c001d35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d362:	83 ec 0c             	sub    esp,0xc
c001d365:	50                   	push   eax
c001d366:	e8 5d ea fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001d36b:	83 c4 10             	add    esp,0x10
c001d36e:	90                   	nop
c001d36f:	83 c4 0c             	add    esp,0xc
c001d372:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d374 <SATABus::~SATABus()>:
c001d374:	83 ec 0c             	sub    esp,0xc
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d37e:	e8 cd ff ff ff       	call   c001d350 <SATABus::~SATABus()>
c001d383:	83 c4 10             	add    esp,0x10
c001d386:	83 ec 08             	sub    esp,0x8
c001d389:	68 64 01 00 00       	push   0x164
c001d38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d392:	e8 81 d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d397:	83 c4 10             	add    esp,0x10
c001d39a:	83 c4 0c             	add    esp,0xc
c001d39d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d39e <ATA::~ATA()>:
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	ba 34 fc 01 c0       	mov    edx,0xc001fc34
c001d3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3aa:	89 10                	mov    DWORD PTR [eax],edx
c001d3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	50                   	push   eax
c001d3b4:	e8 f1 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	90                   	nop
c001d3bd:	83 c4 0c             	add    esp,0xc
c001d3c0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d3c2 <ATA::~ATA()>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	83 ec 0c             	sub    esp,0xc
c001d3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3cc:	e8 cd ff ff ff       	call   c001d39e <ATA::~ATA()>
c001d3d1:	83 c4 10             	add    esp,0x10
c001d3d4:	83 ec 08             	sub    esp,0x8
c001d3d7:	68 7c 01 00 00       	push   0x17c
c001d3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3e0:	e8 33 d1 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d3e5:	83 c4 10             	add    esp,0x10
c001d3e8:	83 c4 0c             	add    esp,0xc
c001d3eb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d3ec <ATAPI::~ATAPI()>:
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	ba 7c fc 01 c0       	mov    edx,0xc001fc7c
c001d3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f8:	89 10                	mov    DWORD PTR [eax],edx
c001d3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	50                   	push   eax
c001d402:	e8 a3 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	90                   	nop
c001d40b:	83 c4 0c             	add    esp,0xc
c001d40e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d410 <ATAPI::~ATAPI()>:
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	83 ec 0c             	sub    esp,0xc
c001d416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d41a:	e8 cd ff ff ff       	call   c001d3ec <ATAPI::~ATAPI()>
c001d41f:	83 c4 10             	add    esp,0x10
c001d422:	83 ec 08             	sub    esp,0x8
c001d425:	68 84 01 00 00       	push   0x184
c001d42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d42e:	e8 e5 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	83 c4 0c             	add    esp,0xc
c001d439:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d43a <SATA::~SATA()>:
c001d43a:	83 ec 0c             	sub    esp,0xc
c001d43d:	ba 30 fd 01 c0       	mov    edx,0xc001fd30
c001d442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d446:	89 10                	mov    DWORD PTR [eax],edx
c001d448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	50                   	push   eax
c001d450:	e8 55 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d455:	83 c4 10             	add    esp,0x10
c001d458:	90                   	nop
c001d459:	83 c4 0c             	add    esp,0xc
c001d45c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d45e <SATA::~SATA()>:
c001d45e:	83 ec 0c             	sub    esp,0xc
c001d461:	83 ec 0c             	sub    esp,0xc
c001d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d468:	e8 cd ff ff ff       	call   c001d43a <SATA::~SATA()>
c001d46d:	83 c4 10             	add    esp,0x10
c001d470:	83 ec 08             	sub    esp,0x8
c001d473:	68 7c 01 00 00       	push   0x17c
c001d478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d47c:	e8 97 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	83 c4 0c             	add    esp,0xc
c001d487:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d488 <SATAPI::~SATAPI()>:
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	ba 40 fe 01 c0       	mov    edx,0xc001fe40
c001d490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d494:	89 10                	mov    DWORD PTR [eax],edx
c001d496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	50                   	push   eax
c001d49e:	e8 07 ea fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	90                   	nop
c001d4a7:	83 c4 0c             	add    esp,0xc
c001d4aa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d4ac <SATAPI::~SATAPI()>:
c001d4ac:	83 ec 0c             	sub    esp,0xc
c001d4af:	83 ec 0c             	sub    esp,0xc
c001d4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b6:	e8 cd ff ff ff       	call   c001d488 <SATAPI::~SATAPI()>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	83 ec 08             	sub    esp,0x8
c001d4c1:	68 84 01 00 00       	push   0x184
c001d4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ca:	e8 49 d0 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d4cf:	83 c4 10             	add    esp,0x10
c001d4d2:	83 c4 0c             	add    esp,0xc
c001d4d5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d4d6 <IOAPIC::~IOAPIC()>:
c001d4d6:	83 ec 0c             	sub    esp,0xc
c001d4d9:	ba 80 fe 01 c0       	mov    edx,0xc001fe80
c001d4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e2:	89 10                	mov    DWORD PTR [eax],edx
c001d4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	50                   	push   eax
c001d4ec:	e8 5d e4 fe ff       	call   c000b94e <Device::~Device()>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	90                   	nop
c001d4f5:	83 c4 0c             	add    esp,0xc
c001d4f8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d4fa <IOAPIC::~IOAPIC()>:
c001d4fa:	83 ec 0c             	sub    esp,0xc
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d504:	e8 cd ff ff ff       	call   c001d4d6 <IOAPIC::~IOAPIC()>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	83 ec 08             	sub    esp,0x8
c001d50f:	68 68 01 00 00       	push   0x168
c001d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d518:	e8 fb cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	83 c4 0c             	add    esp,0xc
c001d523:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d524 <APICTimer::~APICTimer()>:
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	ba c8 fe 01 c0       	mov    edx,0xc001fec8
c001d52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d530:	89 10                	mov    DWORD PTR [eax],edx
c001d532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	50                   	push   eax
c001d53a:	e8 49 fd fe ff       	call   c000d288 <Timer::~Timer()>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	90                   	nop
c001d543:	83 c4 0c             	add    esp,0xc
c001d546:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d548 <APICTimer::~APICTimer()>:
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	83 ec 0c             	sub    esp,0xc
c001d54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d552:	e8 cd ff ff ff       	call   c001d524 <APICTimer::~APICTimer()>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	83 ec 08             	sub    esp,0x8
c001d55d:	68 60 01 00 00       	push   0x160
c001d562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d566:	e8 ad cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	83 c4 0c             	add    esp,0xc
c001d571:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d574 <PIT::~PIT()>:
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c001d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d580:	89 10                	mov    DWORD PTR [eax],edx
c001d582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	50                   	push   eax
c001d58a:	e8 f9 fc fe ff       	call   c000d288 <Timer::~Timer()>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	90                   	nop
c001d593:	83 c4 0c             	add    esp,0xc
c001d596:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d598 <PIT::~PIT()>:
c001d598:	83 ec 0c             	sub    esp,0xc
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5a2:	e8 cd ff ff ff       	call   c001d574 <PIT::~PIT()>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	83 ec 08             	sub    esp,0x8
c001d5ad:	68 5c 01 00 00       	push   0x15c
c001d5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5b6:	e8 5d cf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001d5bb:	83 c4 10             	add    esp,0x10
c001d5be:	83 c4 0c             	add    esp,0xc
c001d5c1:	c3                   	ret    

Disassembly of section userkernel:

c0021000 <KiDefaultSignalHandlerAbort(int)>:
c0021000:	57                   	push   edi
c0021001:	b9 07 00 00 00       	mov    ecx,0x7
c0021006:	56                   	push   esi
c0021007:	be 31 ef 01 c0       	mov    esi,0xc001ef31
c002100c:	83 ec 24             	sub    esp,0x24
c002100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021013:	fc                   	cld    
c0021014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002101a:	50                   	push   eax
c002101b:	6a 00                	push   0x0
c002101d:	6a 38                	push   0x38
c002101f:	6a 01                	push   0x1
c0021021:	e8 2c 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0021026:	83 c4 34             	add    esp,0x34
c0021029:	5e                   	pop    esi
c002102a:	5f                   	pop    edi
c002102b:	c3                   	ret    

c002102c <KiDefaultSignalHandlerTerminate(int)>:
c002102c:	57                   	push   edi
c002102d:	b9 08 00 00 00       	mov    ecx,0x8
c0021032:	56                   	push   esi
c0021033:	be 4d ef 01 c0       	mov    esi,0xc001ef4d
c0021038:	83 ec 24             	sub    esp,0x24
c002103b:	89 e7                	mov    edi,esp
c002103d:	fc                   	cld    
c002103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021040:	54                   	push   esp
c0021041:	6a 00                	push   0x0
c0021043:	6a 37                	push   0x37
c0021045:	6a 01                	push   0x1
c0021047:	e8 06 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002104c:	83 c4 34             	add    esp,0x34
c002104f:	5e                   	pop    esi
c0021050:	5f                   	pop    edi
c0021051:	c3                   	ret    

c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0021052:	53                   	push   ebx
c0021053:	83 ec 10             	sub    esp,0x10
c0021056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021066:	cd 60                	int    0x60
c0021068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021078:	83 c4 10             	add    esp,0x10
c002107b:	5b                   	pop    ebx
c002107c:	c3                   	ret    

Disassembly of section align_previous:

c0022000 <DO_NOT_DELETE()>:
c0022000:	c3                   	ret    
