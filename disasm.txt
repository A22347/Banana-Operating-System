
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 00 02 c0       	mov    eax,0xc00200f4
c0000025:	3d f4 00 02 c0       	cmp    eax,0xc00200f4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 00 02 c0       	push   0xc00200f4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 00 02 c0       	mov    eax,0xc00200f4
c0000051:	2d f4 00 02 c0       	sub    eax,0xc00200f4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 00 02 c0       	push   0xc00200f4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 d4 01 c0       	mov    ebx,0xc001d4c8
c0000097:	81 eb c4 d4 01 c0    	sub    ebx,0xc001d4c4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 d4 01 c0       	mov    esi,0xc001d4c4
c00000a6:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 02 c0       	mov    ds:0xc00220c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 00 02 c0       	push   0xc00200f4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 02 c0 01 	mov    BYTE PTR ds:0xc00220c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 02 c0       	push   0xc00220c8
c0000108:	68 f4 00 02 c0       	push   0xc00200f4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 4c 2d 01 00       	call   c0012ffc <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 4e a0 00 00       	call   c000a316 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 2a 2d 01 00       	call   c0012ffc <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 33 32 01 00       	call   c0013524 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 82 38 01 00       	call   c0013b7c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 2e 02 c0 	lgdtd  ds:0xc0022ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 d8 fe 00 00       	jmp    c001025a <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 20 02 c0       	mov    ds:0xc00220e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 20 02 c0    	mov    DWORD PTR ds:0xc00220e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 d4 01 c0 02 	test   BYTE PTR [edx-0x3ffe2b20],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 d4 01 c0 01 	test   BYTE PTR [edx-0x3ffe2b20],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 d4 01 c0 08 	test   BYTE PTR [edx-0x3ffe2b20],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 d4 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2b20],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 d4 01 c0 01 	test   BYTE PTR [edx-0x3ffe2b20],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 21 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 21 02 c0    	mov    ecx,DWORD PTR ds:0xc002213c
c0000d3d:	c7 42 0c 34 21 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 21 02 c0 02 	test   BYTE PTR ds:0xc0022100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 21 02 c0 	mov    DWORD PTR [edx*4-0x3ffddefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 21 02 c0 	lea    edx,[eax*8-0x3ffddecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c00010bf:	81 fb 34 21 02 c0    	cmp    ebx,0xc0022134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 21 02 c0       	cmp    eax,0xc0022134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 21 02 c0    	cmp    DWORD PTR ds:0xc0022130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 21 02 c0       	mov    ds:0xc002213c,eax
c00010fb:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c0001100:	a3 30 21 02 c0       	mov    ds:0xc0022130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c000110e:	c7 40 0c 34 21 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 20 02 c0 	lea    ebp,[edx*4-0x3ffddf08]
c000115f:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 21 02 c0 	lea    ecx,[edx*4-0x3ffddf00]
c000117a:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 24 02 c0 	or     DWORD PTR [edi*4-0x3ffddbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 21 02 c0 	lea    eax,[eax*8-0x3ffddecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,ecx
c0001234:	89 0d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,ecx
c000123a:	c7 41 08 34 21 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022134
c0001241:	c7 41 0c 34 21 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 21 02 c0 	lea    edx,[ecx*8-0x3ffdded4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 21 02 c0 	lea    edx,[eax*4-0x3ffdded4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 24 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edi
c0001307:	89 3d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edi
c000130d:	c7 47 08 34 21 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022134
c0001314:	c7 47 0c 34 21 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 21 02 c0    	mov    DWORD PTR ds:0xc0022130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 21 02 c0       	mov    edx,0xc0022100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 24 02 c0    	mov    DWORD PTR ds:0xc0022454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 24 02 c0    	push   DWORD PTR ds:0xc002245c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 24 02 c0       	mov    eax,ds:0xc002245c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 21 02 c0 00 	cmp    DWORD PTR ds:0xc002212c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 21 02 c0       	mov    eax,0xc0022134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 24 02 c0       	cmp    eax,0xc002242c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 24 02 c0       	mov    eax,ds:0xc0022468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 d5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2a1c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 21 02 c0       	mov    ds:0xc0022100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 24 02 c0    	mov    DWORD PTR ds:0xc0022444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 24 02 c0    	mov    DWORD PTR ds:0xc0022448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 24 02 c0    	mov    DWORD PTR ds:0xc002244c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 22 52 01 00       	jmp    c0016f0c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 50 52 01 00       	jmp    c0016f50 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 75 52 01 00       	jmp    c0016f94 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe28c0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe28c0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 28 f6 01 c0       	mov    edx,0xc001f628
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc d5 01 c0       	mov    edx,0xc001d5fc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 24 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 24 02 c0    	mov    ax,ds:0xc0022480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 24 02 c0    	mov    ds:0xc0022480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 d6 01 c0       	mov    eax,0xc001d602
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 d6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2940]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b d6 01 c0       	mov    eax,0xc001d60b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe28c0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 24 02 c0 	mov    DWORD PTR [edx*4-0x3ffddb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 d6 01 c0       	mov    eax,0xc001d690
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 d6 01 c0       	mov    ebx,0xc001d680
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 d6 01 c0       	mov    edx,0xc001d660
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 d6 01 c0       	mov    edx,0xc001d670
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 d6 01 c0       	mov    edx,0xc001d612
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e d6 01 c0       	mov    edx,0xc001d61e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 d6 01 c0       	mov    edx,0xc001d632
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001da60
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 da 01 c0 	mov    DWORD PTR [esp+0x10],0xc001da60
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d8 01 c0       	mov    eax,0xc001d860
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d7 01 c0       	mov    eax,0xc001d7a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe28a0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddfe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 25 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdda30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 20 02 c0 	movsx  eax,BYTE PTR ds:0xc0022060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 69 18 01 00       	call   c00177e8 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 20 02 c0       	mov    eax,0xc0022020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 db 01 c0       	push   0xc001db60
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 2e 02 c0       	mov    ecx,0xc0022e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 25 02 c0 00 	cmp    DWORD PTR [edi-0x3ffddac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffddac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 25 02 c0    	mov    DWORD PTR [edi-0x3ffddabc],esi
c000634e:	89 87 40 25 02 c0    	mov    DWORD PTR [edi-0x3ffddac0],eax
c0006354:	c7 87 48 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffddab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdda30],0x0
c0006370:	89 87 4c 25 02 c0    	mov    DWORD PTR [edi-0x3ffddab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 25 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffddac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 25 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdda30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c00063e9:	8b 8d 4c 25 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffddab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 25 02 c0    	add    eax,DWORD PTR [ebp-0x3ffddac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 20 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddfe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 25 02 c0    	add    DWORD PTR [ebp-0x3ffddab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 25 02 c0    	lea    ecx,[ebp-0x3ffddac0]
c00064e1:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 25 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffddab4]
c000651f:	05 40 25 02 c0       	add    eax,0xc0022540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffddac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdda30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 25 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffddab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffddac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdda30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 25 02 c0    	lea    esi,[eax-0x3ffddac0]
c00065e4:	83 b8 40 25 02 c0 00 	cmp    DWORD PTR [eax-0x3ffddac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 20 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffddf80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 25 02 c0    	mov    esi,DWORD PTR [edx-0x3ffddab8]
c0006653:	81 c2 40 25 02 c0    	add    edx,0xc0022540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 20 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffddf80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 25 02 c0    	lea    ebp,[eax-0x3ffddaa8]
c00066b9:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 25 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffddaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 db 01 c0       	push   0xc001db60
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 25 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffddaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 25 02 c0    	mov    DWORD PTR [ecx-0x3ffddab0],eax
c000678f:	89 91 54 25 02 c0    	mov    DWORD PTR [ecx-0x3ffddaac],edx
c0006795:	81 c1 40 25 02 c0    	add    ecx,0xc0022540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 25 02 c0       	add    eax,0xc0022550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 20 02 c0       	mov    ds:0xc0022060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb4,0x0
c00067df:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 db 01 c0       	push   0xc001db63
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 2e 02 c0       	mov    ds:0xc0022eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a db 01 c0       	push   0xc001db6a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 20 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffddf80]
c000687d:	bf 80 2e 02 c0       	mov    edi,0xc0022e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 2e 02 c0       	mov    eax,0xc0022e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c00068a0:	b8 8a 2e 02 c0       	mov    eax,0xc0022e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 25 02 c0       	push   0xc0022540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0022540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 2e 02 c0       	mov    ds:0xc0022eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 25 02 c0       	mov    ds:0xc0022520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddf80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddfe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddf80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddfe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c00069a9:	c7 05 b0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 d6 50 00 00       	call   c000baae <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 db 01 c0       	push   0xc001db71
c0006a09:	e8 e9 91 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0006a28:	50                   	push   eax
c0006a29:	68 8a db 01 c0       	push   0xc001db8a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 16 c9 00 00       	call   c001334c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 29 cb 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 c8 3f 01 c0       	push   0xc0013fc8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 14 cb 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 61 02 c0       	mov    ds:0xc0026148,eax
c0006a68:	68 88 dc 01 c0       	push   0xc001dc88
c0006a6d:	c6 05 bd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ebd,0x1
c0006a74:	e8 7e 91 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006a79:	e8 29 d9 00 00       	call   c00143a7 <Vm::initialise8086()>
c0006a7e:	e8 71 3e 00 00       	call   c000a8f4 <Fs::initVFS()>
c0006a83:	c7 04 24 97 db 01 c0 	mov    DWORD PTR [esp],0xc001db97
c0006a8a:	e8 68 91 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 dc 01 c0       	push   0xc001dc88
c0006aae:	e8 44 91 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006ab3:	e8 1a 96 00 00       	call   c00100d2 <Krnl::loadSystemEnv()>
c0006ab8:	e8 77 98 00 00       	call   c0010334 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 db 01 c0       	push   0xc001dbb1
c0006ac7:	68 ba db 01 c0       	push   0xc001dbba
c0006acc:	e8 24 ae 00 00       	call   c00118f5 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 27 49 00 00       	call   c000b400 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac dc 01 c0 	mov    DWORD PTR [esp],0xc001dcac
c0006ae0:	e8 12 91 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 b5 4f 00 00       	call   c000baac <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 db 01 c0 	mov    DWORD PTR [esp],0xc001dbc2
c0006afe:	e8 f4 90 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 db 01 c0       	push   0xc001dbd3
c0006b12:	e8 53 c2 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 7b c4 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 63 ce 00 00       	call   c0013990 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef db 01 c0       	push   0xc001dbef
c0006b41:	50                   	push   eax
c0006b42:	e8 e1 4f 00 00       	call   c000bb28 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 95 58 01 00       	call   c001c4c6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 b8 84 00 00       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 91 84 00 00       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 6f 84 00 00       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 4d 84 00 00       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 5b 83 00 00       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 36 83 00 00       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ff 56 01 00       	call   c001c480 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 fc 53 01 00       	call   c001c1a0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 52 83 00 00       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 db 01 c0       	push   0xc001dbf8
c0006e14:	e8 56 94 00 00       	call   c001026f <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe db 01 c0       	push   0xc001dbfe
c0006e4c:	e8 1e 94 00 00       	call   c001026f <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 03 7d 00 00       	jmp    c000eb9c <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed0,0x4
c0006ee8:	68 04 dc 01 c0       	push   0xc001dc04
c0006eed:	0f 94 05 60 fd 01 c0 	sete   BYTE PTR ds:0xc001fd60
c0006ef4:	e8 fe 8c 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 25 78 00 00       	call   c000e734 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 72 4a 00 00       	call   c000b990 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c dc 01 c0 	mov    DWORD PTR [esp],0xc001dc1c
c0006f37:	e8 bb 8c 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 8a 82 00 00       	call   c000f1dc <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 2f 4a 00 00       	call   c000b990 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc dc 01 c0       	push   0xc001dccc
c0006f7e:	e8 74 8c 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006f83:	e8 56 e5 00 00       	call   c00154de <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc36
c0006f8f:	e8 63 8c 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 ec c6 00 00       	call   c001368c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 dc 01 c0       	push   0xc001dc51
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 61 35 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 dc 01 c0       	push   0xc001dc62
c000700e:	e8 5c 92 00 00       	call   c001026f <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f dc 01 c0       	push   0xc001dc6f
c0007023:	e8 47 92 00 00       	call   c001026f <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 dc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dc79
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 30 92 00 00       	jmp    c001026f <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 2e 02 c0       	mov    ds:0xc0022ec2,eax
c00070cf:	66 89 15 c0 2e 02 c0 	mov    WORD PTR ds:0xc0022ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007217:	48                   	dec    eax
c0007218:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 93 df 00 00       	call   c00151b8 <HalSystemIdle()>
c0007225:	e8 58 58 01 00       	call   c001ca82 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ec8,0x7ff
c000731d:	a3 ca 2e 02 c0       	mov    ds:0xc0022eca,eax
c0007322:	0f 01 1d c8 2e 02 c0 	lidtd  ds:0xc0022ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 30 c2 01 c0       	push   0xc001c230
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 40 c2 01 c0       	push   0xc001c240
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 4a c2 01 c0       	push   0xc001c24a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 54 c2 01 c0       	push   0xc001c254
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 5e c2 01 c0       	push   0xc001c25e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 68 c2 01 c0       	push   0xc001c268
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 72 c2 01 c0       	push   0xc001c272
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 7c c2 01 c0       	push   0xc001c27c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 86 c2 01 c0       	push   0xc001c286
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 8e c2 01 c0       	push   0xc001c28e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 98 c2 01 c0       	push   0xc001c298
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 a0 c2 01 c0       	push   0xc001c2a0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 a8 c2 01 c0       	push   0xc001c2a8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 b0 c2 01 c0       	push   0xc001c2b0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 b8 c2 01 c0       	push   0xc001c2b8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 c0 c2 01 c0       	push   0xc001c2c0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ca c2 01 c0       	push   0xc001c2ca
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 d4 c2 01 c0       	push   0xc001c2d4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 de c2 01 c0       	push   0xc001c2de
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 78 c3 01 c0       	push   0xc001c378
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 7f c3 01 c0       	push   0xc001c37f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 6a c3 01 c0       	push   0xc001c36a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 71 c3 01 c0       	push   0xc001c371
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 e8 c2 01 c0       	push   0xc001c2e8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 f2 c2 01 c0       	push   0xc001c2f2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 fc c2 01 c0       	push   0xc001c2fc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 06 c3 01 c0       	push   0xc001c306
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 10 c3 01 c0       	push   0xc001c310
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 1a c3 01 c0       	push   0xc001c31a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 24 c3 01 c0       	push   0xc001c324
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 2e c3 01 c0       	push   0xc001c32e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 38 c3 01 c0       	push   0xc001c338
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 42 c3 01 c0       	push   0xc001c342
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 4c c3 01 c0       	push   0xc001c34c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 56 c3 01 c0       	push   0xc001c356
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 60 c3 01 c0       	push   0xc001c360
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 11 c4 01 c0       	push   0xc001c411
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 1b c4 01 c0       	push   0xc001c41b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 25 c4 01 c0       	push   0xc001c425
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 2f c4 01 c0       	push   0xc001c42f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 39 c4 01 c0       	push   0xc001c439
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 43 c4 01 c0       	push   0xc001c443
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 4d c4 01 c0       	push   0xc001c44d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 57 c4 01 c0       	push   0xc001c457
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007614:	e8 43 24 00 00       	call   c0009a5c <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 a1 15 00 00       	call   c0008bd8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 86 c2 01 c0       	push   0xc001c286
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 d6 15 00 00       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 50 fd 01 c0    	mov    edx,DWORD PTR ds:0xc001fd50
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fb0
c00076c2:	8b 3d 50 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fd50
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 7e 22 00 00       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 50 fd 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001fd50,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 50 fd 01 c0       	mov    eax,ds:0xc001fd50
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c dd 01 c0       	push   0xc001dd1c
c000770e:	e8 3f 2e 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c dd 01 c0       	push   0xc001dd4c
c000772d:	e8 3d 8b 00 00       	call   c001026f <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 dd 01 c0       	push   0xc001dd51
c0007743:	e8 27 8b 00 00       	call   c001026f <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007763:	48                   	dec    eax
c0007764:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007781:	e8 d6 22 00 00       	call   c0009a5c <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007797:	e8 12 1f 00 00       	call   c00096ae <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 dd 01 c0       	push   0xc001dd58
c0007862:	e8 eb 2c 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 1d 83 00 00       	call   c000fb89 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 cc 1b 00 00       	call   c0009454 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 99 1e 00 00       	call   c000972c <VAS::VAS()>
c0007893:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0007899:	e8 7c 51 01 00       	call   c001ca1a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 25 1f 00 00       	call   c00097f4 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 2e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdd114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 dd 01 c0       	push   0xc001dd70
c000792c:	e8 3e 89 00 00       	call   c001026f <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 2e 02 c0    	lea    edx,[ebp-0x3ffdd114]
c000796e:	8d 84 05 ed 2e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdd113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 2e 02 c0    	add    DWORD PTR ds:0xc0022ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 dd 01 c0       	push   0xc001dd70
c0007993:	e8 d7 88 00 00       	call   c001026f <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 2e 02 c0    	sub    DWORD PTR ds:0xc0022ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 2e 02 c0       	add    eax,0xc0022eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 54 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fd54
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 54 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fd54
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 54 fd 01 c0    	mov    edx,DWORD PTR ds:0xc001fd54
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 2e 02 c0    	dec    DWORD PTR ds:0xc0022ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 de 01 c0 	mov    DWORD PTR [esp+0x10],0xc001de15
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 ec 87 00 00       	jmp    c001026f <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 2e 02 c0 01 	xor    BYTE PTR ds:0xc0022efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 46 27 00 00       	call   c000a236 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 dd 01 c0       	push   0xc001dd98
c0007aff:	e8 6b 87 00 00       	call   c001026f <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 2e 02 c0       	mov    eax,ds:0xc0022ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 2e 02 c0    	inc    DWORD PTR ds:0xc0022ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 2e 02 c0       	push   0xc0022eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b de 01 c0       	push   0xc001de2b
c0007c18:	e8 35 29 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 dd 01 c0       	push   0xc001ddc8
c0007ca4:	e8 a9 28 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec dd 01 c0       	push   0xc001ddec
c0007d40:	e8 0d 28 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 de 01 c0       	push   0xc001de51
c0007d76:	e8 d7 27 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 de 01 c0       	push   0xc001de43
c0007de5:	e8 85 84 00 00       	call   c001026f <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 2e 02 c0 02 	add    DWORD PTR ds:0xc0022ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 63 11 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 62 25 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d de 01 c0       	push   0xc001de6d
c0007fa7:	e8 c3 82 00 00       	call   c001026f <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007ff0:	e8 9f b7 00 00       	call   c0013794 <schedule()>
c0007ff5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 73 48 01 00       	call   c001c900 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a de 01 c0       	push   0xc001de8a
c00080a2:	e8 c8 81 00 00       	call   c001026f <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 82 0d 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba f8 de 01 c0       	mov    edx,0xc001def8
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 ef 0e 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 84 01 00 00       	push   0x184
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 eb 22 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 24 46 00 00       	call   c000c7b0 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 be e1 00 00       	call   c0016370 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 fd 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0280]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 fd 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0280]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 e1 de 00 00       	call   c00161fc <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 3c df 00 00       	jmp    c0016304 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 de 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dec4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 5b 7e 00 00       	jmp    c001026f <KePanic(char const*)>
c0008414:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 38 2e 00 00       	jmp    c000b3a7 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 de 01 c0       	mov    esi,0xc001ded2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 4e da 00 00       	call   c0016304 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 44 05 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba f8 de 01 c0       	mov    edx,0xc001def8
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 12 09 00 00       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 a8 0f 00 00       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	68 80 00 00 00       	push   0x80
c0008a1b:	6a 00                	push   0x0
c0008a1d:	50                   	push   eax
c0008a1e:	e8 ad 7a ff ff       	call   c00004d0 <memset>
c0008a23:	83 c4 10             	add    esp,0x10
c0008a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2a:	05 02 01 00 00       	add    eax,0x102
c0008a2f:	83 ec 04             	sub    esp,0x4
c0008a32:	68 80 00 00 00       	push   0x80
c0008a37:	6a 00                	push   0x0
c0008a39:	50                   	push   eax
c0008a3a:	e8 91 7a ff ff       	call   c00004d0 <memset>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	90                   	nop
c0008a43:	83 c4 04             	add    esp,0x4
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	c3                   	ret    
c0008a49:	90                   	nop

c0008a4a <VgaText::receiveKey(unsigned char)>:
c0008a4a:	55                   	push   ebp
c0008a4b:	57                   	push   edi
c0008a4c:	56                   	push   esi
c0008a4d:	53                   	push   ebx
c0008a4e:	83 ec 1c             	sub    esp,0x1c
c0008a51:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008a55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008a59:	89 f0                	mov    eax,esi
c0008a5b:	84 c0                	test   al,al
c0008a5d:	0f 84 47 01 00 00    	je     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008a63:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a69:	3c 08                	cmp    al,0x8
c0008a6b:	75 6b                	jne    c0008ad8 <VgaText::receiveKey(unsigned char)+0x8e>
c0008a6d:	83 ec 0c             	sub    esp,0xc
c0008a70:	57                   	push   edi
c0008a71:	e8 ca 7a ff ff       	call   c0000540 <strlen>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	85 c0                	test   eax,eax
c0008a7b:	0f 84 ee 00 00 00    	je     c0008b6f <VgaText::receiveKey(unsigned char)+0x125>
c0008a81:	50                   	push   eax
c0008a82:	50                   	push   eax
c0008a83:	6a 08                	push   0x8
c0008a85:	53                   	push   ebx
c0008a86:	e8 79 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a8e:	e8 ad 7a ff ff       	call   c0000540 <strlen>
c0008a93:	83 c4 10             	add    esp,0x10
c0008a96:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a9d:	3c 0d                	cmp    al,0xd
c0008a9f:	0f 95 c1             	setne  cl
c0008aa2:	3c 18                	cmp    al,0x18
c0008aa4:	0f 9e c2             	setle  dl
c0008aa7:	84 d1                	test   cl,dl
c0008aa9:	74 17                	je     c0008ac2 <VgaText::receiveKey(unsigned char)+0x78>
c0008aab:	83 e8 08             	sub    eax,0x8
c0008aae:	3c 02                	cmp    al,0x2
c0008ab0:	76 10                	jbe    c0008ac2 <VgaText::receiveKey(unsigned char)+0x78>
c0008ab2:	55                   	push   ebp
c0008ab3:	55                   	push   ebp
c0008ab4:	68 e3 de 01 c0       	push   0xc001dee3
c0008ab9:	53                   	push   ebx
c0008aba:	e8 77 fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	57                   	push   edi
c0008ac6:	e8 75 7a ff ff       	call   c0000540 <strlen>
c0008acb:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ad3:	e9 94 00 00 00       	jmp    c0008b6c <VgaText::receiveKey(unsigned char)+0x122>
c0008ad8:	83 ec 0c             	sub    esp,0xc
c0008adb:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008ae1:	50                   	push   eax
c0008ae2:	e8 59 7a ff ff       	call   c0000540 <strlen>
c0008ae7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008aea:	89 c5                	mov    ebp,eax
c0008aec:	e8 4f 7a ff ff       	call   c0000540 <strlen>
c0008af1:	83 c4 10             	add    esp,0x10
c0008af4:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008af8:	3d 80 00 00 00       	cmp    eax,0x80
c0008afd:	0f 87 a7 00 00 00    	ja     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008b03:	89 f0                	mov    eax,esi
c0008b05:	3c 18                	cmp    al,0x18
c0008b07:	0f 96 c2             	setbe  dl
c0008b0a:	3c 0d                	cmp    al,0xd
c0008b0c:	0f 95 c0             	setne  al
c0008b0f:	84 c2                	test   dl,al
c0008b11:	74 30                	je     c0008b43 <VgaText::receiveKey(unsigned char)+0xf9>
c0008b13:	8d 46 f7             	lea    eax,[esi-0x9]
c0008b16:	3c 01                	cmp    al,0x1
c0008b18:	76 29                	jbe    c0008b43 <VgaText::receiveKey(unsigned char)+0xf9>
c0008b1a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b1d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b20:	68 e9 de 01 c0       	push   0xc001dee9
c0008b25:	53                   	push   ebx
c0008b26:	e8 7d fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b2e:	8d 46 40             	lea    eax,[esi+0x40]
c0008b31:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b34:	0f b6 c0             	movzx  eax,al
c0008b37:	50                   	push   eax
c0008b38:	53                   	push   ebx
c0008b39:	e8 f8 f9 ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b3e:	83 c4 20             	add    esp,0x20
c0008b41:	eb 11                	jmp    c0008b54 <VgaText::receiveKey(unsigned char)+0x10a>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	51                   	push   ecx
c0008b46:	0f be c0             	movsx  eax,al
c0008b49:	51                   	push   ecx
c0008b4a:	50                   	push   eax
c0008b4b:	53                   	push   ebx
c0008b4c:	e8 b3 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b51:	83 c4 10             	add    esp,0x10
c0008b54:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b59:	89 f0                	mov    eax,esi
c0008b5b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b5f:	52                   	push   edx
c0008b60:	52                   	push   edx
c0008b61:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b65:	50                   	push   eax
c0008b66:	57                   	push   edi
c0008b67:	e8 54 7c ff ff       	call   c00007c0 <strcat>
c0008b6c:	83 c4 10             	add    esp,0x10
c0008b6f:	89 f0                	mov    eax,esi
c0008b71:	3c 03                	cmp    al,0x3
c0008b73:	0f 94 c2             	sete   dl
c0008b76:	3c 0a                	cmp    al,0xa
c0008b78:	0f 94 c0             	sete   al
c0008b7b:	08 c2                	or     dl,al
c0008b7d:	75 09                	jne    c0008b88 <VgaText::receiveKey(unsigned char)+0x13e>
c0008b7f:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b86:	74 22                	je     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008b88:	81 c3 02 01 00 00    	add    ebx,0x102
c0008b8e:	50                   	push   eax
c0008b8f:	50                   	push   eax
c0008b90:	57                   	push   edi
c0008b91:	53                   	push   ebx
c0008b92:	e8 29 7c ff ff       	call   c00007c0 <strcat>
c0008b97:	83 c4 0c             	add    esp,0xc
c0008b9a:	68 80 00 00 00       	push   0x80
c0008b9f:	6a 00                	push   0x0
c0008ba1:	57                   	push   edi
c0008ba2:	e8 29 79 ff ff       	call   c00004d0 <memset>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	83 c4 1c             	add    esp,0x1c
c0008bad:	5b                   	pop    ebx
c0008bae:	5e                   	pop    esi
c0008baf:	5f                   	pop    edi
c0008bb0:	5d                   	pop    ebp
c0008bb1:	c3                   	ret    

c0008bb2 <VgaText::doUpdate()>:
c0008bb2:	c3                   	ret    

c0008bb3 <newTerminal(char*)>:
c0008bb3:	83 ec 28             	sub    esp,0x28
c0008bb6:	68 84 01 00 00       	push   0x184
c0008bbb:	e8 f9 eb ff ff       	call   c00077b9 <malloc>
c0008bc0:	5a                   	pop    edx
c0008bc1:	59                   	pop    ecx
c0008bc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bc6:	50                   	push   eax
c0008bc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bcb:	e8 2a fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd4:	83 c4 2c             	add    esp,0x2c
c0008bd7:	c3                   	ret    

c0008bd8 <TSS::TSS()>:
c0008bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008be3:	90                   	nop
c0008be4:	c3                   	ret    
c0008be5:	90                   	nop
c0008be6:	66 90                	xchg   ax,ax

c0008be8 <TSS::setESP(unsigned long)>:
c0008be8:	55                   	push   ebp
c0008be9:	89 e5                	mov    ebp,esp
c0008beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bf7:	90                   	nop
c0008bf8:	5d                   	pop    ebp
c0008bf9:	c3                   	ret    
c0008bfa:	66 90                	xchg   ax,ax

c0008bfc <TSS::flush()>:
c0008bfc:	55                   	push   ebp
c0008bfd:	89 e5                	mov    ebp,esp
c0008bff:	83 ec 10             	sub    esp,0x10
c0008c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c07:	83 c8 03             	or     eax,0x3
c0008c0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c12:	66 89 d0             	mov    ax,dx
c0008c15:	0f 00 d8             	ltr    ax
c0008c18:	90                   	nop
c0008c19:	c9                   	leave  
c0008c1a:	c3                   	ret    
c0008c1b:	90                   	nop

c0008c1c <TSS::setup(unsigned long, unsigned long)>:
c0008c1c:	55                   	push   ebp
c0008c1d:	89 e5                	mov    ebp,esp
c0008c1f:	83 ec 18             	sub    esp,0x18
c0008c22:	83 ec 0c             	sub    esp,0xc
c0008c25:	6a 68                	push   0x68
c0008c27:	e8 8d eb ff ff       	call   c00077b9 <malloc>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c2                	mov    edx,eax
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3d:	83 ec 04             	sub    esp,0x4
c0008c40:	6a 68                	push   0x68
c0008c42:	6a 00                	push   0x0
c0008c44:	50                   	push   eax
c0008c45:	e8 86 78 ff ff       	call   c00004d0 <memset>
c0008c4a:	83 c4 10             	add    esp,0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c83:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cc2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce4:	0f 20 da             	mov    edx,cr3
c0008ce7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ced:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	50                   	push   eax
c0008cfa:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	83 ec 08             	sub    esp,0x8
c0008d09:	6a 68                	push   0x68
c0008d0b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d0e:	50                   	push   eax
c0008d0f:	e8 48 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d1b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1e:	83 e0 0f             	and    eax,0xf
c0008d21:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d24:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d27:	83 c8 40             	or     eax,0x40
c0008d2a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d2d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008d32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d38:	05 78 01 00 00       	add    eax,0x178
c0008d3d:	83 ec 04             	sub    esp,0x4
c0008d40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d46:	50                   	push   eax
c0008d47:	e8 44 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	89 c2                	mov    edx,eax
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	89 10                	mov    DWORD PTR [eax],edx
c0008d56:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d61:	05 78 01 00 00       	add    eax,0x178
c0008d66:	83 ec 0c             	sub    esp,0xc
c0008d69:	50                   	push   eax
c0008d6a:	e8 4b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d77:	c9                   	leave  
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d8a:	75 08                	jne    c0008d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d92:	eb 38                	jmp    c0008dcc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d99:	75 17                	jne    c0008db2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008da0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008daf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008db2:	89 c1                	mov    ecx,eax
c0008db4:	83 e1 fd             	and    ecx,0xfffffffd
c0008db7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dbd:	74 cd                	je     c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dc4:	83 e0 ef             	and    eax,0xffffffef
c0008dc7:	83 f8 08             	cmp    eax,0x8
c0008dca:	76 c0                	jbe    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dcc:	31 c0                	xor    eax,eax
c0008dce:	c3                   	ret    
c0008dcf:	90                   	nop

c0008dd0 <ReservedFilename::isAtty()>:
c0008dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dd7:	31 c0                	xor    eax,eax
c0008dd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008ddf:	74 09                	je     c0008dea <ReservedFilename::isAtty()+0x1a>
c0008de1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008de7:	0f 94 c0             	sete   al
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008df0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008df4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008dfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e00:	75 08                	jne    c0008e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e08:	eb 3d                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e0f:	75 17                	jne    c0008e28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e2d:	75 04                	jne    c0008e33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e31:	eb 14                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e38:	74 c8                	je     c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e3f:	83 e0 ef             	and    eax,0xffffffef
c0008e42:	83 f8 08             	cmp    eax,0x8
c0008e45:	76 bb                	jbe    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e47:	31 c0                	xor    eax,eax
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::getFileDescriptor()>:
c0008e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e51:	c3                   	ret    

c0008e52 <UnixFile::UnixFile(int)>:
c0008e52:	53                   	push   ebx
c0008e53:	83 ec 28             	sub    esp,0x28
c0008e56:	ba c0 df 01 c0       	mov    edx,0xc001dfc0
c0008e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e5f:	89 10                	mov    DWORD PTR [eax],edx
c0008e61:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e69:	0f 8f 8c 01 00 00    	jg     c0008ffb <UnixFile::UnixFile(int)+0x1a9>
c0008e6f:	a1 c0 fd 01 c0       	mov    eax,ds:0xc001fdc0
c0008e74:	8d 50 01             	lea    edx,[eax+0x1]
c0008e77:	89 15 c0 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc0,edx
c0008e7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e84:	83 ec 08             	sub    esp,0x8
c0008e87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e8b:	68 98 2f 02 c0       	push   0xc0022f98
c0008e90:	e8 53 3c 01 00       	call   c001cae8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e95:	83 c4 10             	add    esp,0x10
c0008e98:	a0 94 2f 02 c0       	mov    al,ds:0xc0022f94
c0008e9d:	83 f0 01             	xor    eax,0x1
c0008ea0:	84 c0                	test   al,al
c0008ea2:	0f 84 54 01 00 00    	je     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008ea8:	c6 05 94 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f94,0x1
c0008eaf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ebe:	e8 f6 e8 ff ff       	call   c00077b9 <malloc>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	89 c3                	mov    ebx,eax
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 03 ff ff 0f       	push   0xfffff03
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 2c 01 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	89 1d 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,ebx
c0008edf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ee7:	83 ec 0c             	sub    esp,0xc
c0008eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eee:	e8 c6 e8 ff ff       	call   c00077b9 <malloc>
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 c3                	mov    ebx,eax
c0008ef8:	83 ec 08             	sub    esp,0x8
c0008efb:	68 01 ff ff 0f       	push   0xfffff01
c0008f00:	53                   	push   ebx
c0008f01:	e8 fc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0008f0f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f17:	83 ec 0c             	sub    esp,0xc
c0008f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f1e:	e8 96 e8 ff ff       	call   c00077b9 <malloc>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	89 c3                	mov    ebx,eax
c0008f28:	83 ec 08             	sub    esp,0x8
c0008f2b:	68 00 ff ff 0f       	push   0xfffff00
c0008f30:	53                   	push   ebx
c0008f31:	e8 cc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c0008f3f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f47:	83 ec 0c             	sub    esp,0xc
c0008f4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f4e:	e8 66 e8 ff ff       	call   c00077b9 <malloc>
c0008f53:	83 c4 10             	add    esp,0x10
c0008f56:	89 c3                	mov    ebx,eax
c0008f58:	83 ec 08             	sub    esp,0x8
c0008f5b:	68 02 ff ff 0f       	push   0xfffff02
c0008f60:	53                   	push   ebx
c0008f61:	e8 9c 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	89 1d 88 2f 02 c0    	mov    DWORD PTR ds:0xc0022f88,ebx
c0008f6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f77:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f7c:	7f 7e                	jg     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008f7e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f8d:	e8 27 e8 ff ff       	call   c00077b9 <malloc>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 c3                	mov    ebx,eax
c0008f97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f9b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	50                   	push   eax
c0008fa4:	53                   	push   ebx
c0008fa5:	e8 58 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fb1:	89 1c 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],ebx
c0008fb8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fc0:	83 ec 0c             	sub    esp,0xc
c0008fc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc7:	e8 ed e7 ff ff       	call   c00077b9 <malloc>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	89 c3                	mov    ebx,eax
c0008fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fda:	83 ec 08             	sub    esp,0x8
c0008fdd:	50                   	push   eax
c0008fde:	53                   	push   ebx
c0008fdf:	e8 1e 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008feb:	89 1c 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],ebx
c0008ff2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ff6:	e9 7c ff ff ff       	jmp    c0008f77 <UnixFile::UnixFile(int)+0x125>
c0008ffb:	90                   	nop
c0008ffc:	83 c4 28             	add    esp,0x28
c0008fff:	5b                   	pop    ebx
c0009000:	c3                   	ret    
c0009001:	90                   	nop

c0009002 <ReservedFilename::ReservedFilename(int)>:
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009009:	83 ec 08             	sub    esp,0x8
c000900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009010:	50                   	push   eax
c0009011:	e8 3c fe ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c0009016:	83 c4 10             	add    esp,0x10
c0009019:	ba dc df 01 c0       	mov    edx,0xc001dfdc
c000901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009022:	89 10                	mov    DWORD PTR [eax],edx
c0009024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000902c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000902f:	90                   	nop
c0009030:	83 c4 0c             	add    esp,0xc
c0009033:	c3                   	ret    

c0009034 <UnixFile::~UnixFile()>:
c0009034:	83 ec 1c             	sub    esp,0x1c
c0009037:	ba c0 df 01 c0       	mov    edx,0xc001dfc0
c000903c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009040:	89 10                	mov    DWORD PTR [eax],edx
c0009042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009049:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000904e:	7f 73                	jg     c00090c3 <UnixFile::~UnixFile()+0x8f>
c0009050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009058:	83 ec 0c             	sub    esp,0xc
c000905b:	68 98 2f 02 c0       	push   0xc0022f98
c0009060:	e8 57 3b 01 00       	call   c001cbbc <LinkedList<UnixFile>::getFirstElement()>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	68 98 2f 02 c0       	push   0xc0022f98
c0009074:	e8 4b 3b 01 00       	call   c001cbc4 <LinkedList<UnixFile>::removeFirst()>
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009080:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009084:	74 40                	je     c00090c6 <UnixFile::~UnixFile()+0x92>
c0009086:	83 ec 08             	sub    esp,0x8
c0009089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000908d:	68 98 2f 02 c0       	push   0xc0022f98
c0009092:	e8 51 3a 01 00       	call   c001cae8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009097:	83 c4 10             	add    esp,0x10
c000909a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000909e:	8d 50 01             	lea    edx,[eax+0x1]
c00090a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090a5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090aa:	0f 94 c0             	sete   al
c00090ad:	84 c0                	test   al,al
c00090af:	74 a7                	je     c0009058 <UnixFile::~UnixFile()+0x24>
c00090b1:	83 ec 0c             	sub    esp,0xc
c00090b4:	68 98 df 01 c0       	push   0xc001df98
c00090b9:	e8 b1 71 00 00       	call   c001026f <KePanic(char const*)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	eb 95                	jmp    c0009058 <UnixFile::~UnixFile()+0x24>
c00090c3:	90                   	nop
c00090c4:	eb 01                	jmp    c00090c7 <UnixFile::~UnixFile()+0x93>
c00090c6:	90                   	nop
c00090c7:	90                   	nop
c00090c8:	83 c4 1c             	add    esp,0x1c
c00090cb:	c3                   	ret    

c00090cc <UnixFile::~UnixFile()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	83 ec 0c             	sub    esp,0xc
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 59 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 ec 08             	sub    esp,0x8
c00090e1:	6a 0c                	push   0xc
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 70 13 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c00090ec:	83 c4 10             	add    esp,0x10
c00090ef:	83 c4 0c             	add    esp,0xc
c00090f2:	c3                   	ret    
c00090f3:	90                   	nop

c00090f4 <ReservedFilename::~ReservedFilename()>:
c00090f4:	83 ec 0c             	sub    esp,0xc
c00090f7:	ba dc df 01 c0       	mov    edx,0xc001dfdc
c00090fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009100:	89 10                	mov    DWORD PTR [eax],edx
c0009102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009106:	83 ec 0c             	sub    esp,0xc
c0009109:	50                   	push   eax
c000910a:	e8 25 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	90                   	nop
c0009113:	83 c4 0c             	add    esp,0xc
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::~ReservedFilename()>:
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	83 ec 0c             	sub    esp,0xc
c000911e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009122:	e8 cd ff ff ff       	call   c00090f4 <ReservedFilename::~ReservedFilename()>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	83 ec 08             	sub    esp,0x8
c000912d:	6a 0c                	push   0xc
c000912f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009133:	e8 24 13 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0009138:	83 c4 10             	add    esp,0x10
c000913b:	83 c4 0c             	add    esp,0xc
c000913e:	c3                   	ret    

c000913f <getFromFileDescriptor(int)>:
c000913f:	53                   	push   ebx
c0009140:	83 ec 08             	sub    esp,0x8
c0009143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009147:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000914d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009153:	7f 2c                	jg     c0009181 <getFromFileDescriptor(int)+0x42>
c0009155:	83 ec 0c             	sub    esp,0xc
c0009158:	68 98 2f 02 c0       	push   0xc0022f98
c000915d:	e8 5a 3a 01 00       	call   c001cbbc <LinkedList<UnixFile>::getFirstElement()>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	85 c0                	test   eax,eax
c0009167:	75 04                	jne    c000916d <getFromFileDescriptor(int)+0x2e>
c0009169:	31 c0                	xor    eax,eax
c000916b:	eb 6e                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c000916d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009170:	74 69                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c0009172:	52                   	push   edx
c0009173:	52                   	push   edx
c0009174:	50                   	push   eax
c0009175:	68 98 2f 02 c0       	push   0xc0022f98
c000917a:	e8 e7 3a 01 00       	call   c001cc66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000917f:	eb e1                	jmp    c0009162 <getFromFileDescriptor(int)+0x23>
c0009181:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0009186:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000918c:	74 4d                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000918e:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c0009193:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009199:	74 40                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000919b:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c00091a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091a6:	74 33                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091a8:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c00091ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091b3:	74 26                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091bb:	83 f8 08             	cmp    eax,0x8
c00091be:	77 09                	ja     c00091c9 <getFromFileDescriptor(int)+0x8a>
c00091c0:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c00091c7:	eb 12                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c00091c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091cf:	83 fb 08             	cmp    ebx,0x8
c00091d2:	77 95                	ja     c0009169 <getFromFileDescriptor(int)+0x2a>
c00091d4:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c00091db:	83 c4 08             	add    esp,0x8
c00091de:	5b                   	pop    ebx
c00091df:	c3                   	ret    

c00091e0 <__static_initialization_and_destruction_0(int, int)>:
c00091e0:	83 ec 0c             	sub    esp,0xc
c00091e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e8:	75 34                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091f2:	75 2a                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091f4:	83 ec 0c             	sub    esp,0xc
c00091f7:	68 98 2f 02 c0       	push   0xc0022f98
c00091fc:	e8 a5 38 01 00       	call   c001caa6 <LinkedList<UnixFile>::LinkedList()>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	83 ec 04             	sub    esp,0x4
c0009207:	68 4c fd 01 c0       	push   0xc001fd4c
c000920c:	68 98 2f 02 c0       	push   0xc0022f98
c0009211:	68 a4 ca 01 c0       	push   0xc001caa4
c0009216:	e8 f1 11 00 00       	call   c000a40c <__cxa_atexit>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	90                   	nop
c000921f:	83 c4 0c             	add    esp,0xc
c0009222:	c3                   	ret    

c0009223 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009223:	83 ec 0c             	sub    esp,0xc
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	68 ff ff 00 00       	push   0xffff
c000922e:	6a 01                	push   0x1
c0009230:	e8 ab ff ff ff       	call   c00091e0 <__static_initialization_and_destruction_0(int, int)>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	83 c4 0c             	add    esp,0xc
c000923b:	c3                   	ret    

c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000923c:	53                   	push   ebx
c000923d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009241:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009245:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000924b:	89 c8                	mov    eax,ecx
c000924d:	d1 e8                	shr    eax,1
c000924f:	03 05 c8 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fdc8
c0009255:	83 e1 01             	and    ecx,0x1
c0009258:	8a 10                	mov    dl,BYTE PTR [eax]
c000925a:	75 09                	jne    c0009265 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000925c:	83 e2 f0             	and    edx,0xfffffff0
c000925f:	09 da                	or     edx,ebx
c0009261:	88 10                	mov    BYTE PTR [eax],dl
c0009263:	5b                   	pop    ebx
c0009264:	c3                   	ret    
c0009265:	c1 e3 04             	shl    ebx,0x4
c0009268:	83 e2 0f             	and    edx,0xf
c000926b:	09 da                	or     edx,ebx
c000926d:	88 10                	mov    BYTE PTR [eax],dl
c000926f:	5b                   	pop    ebx
c0009270:	c3                   	ret    

c0009271 <Virt::getPageState(unsigned long)>:
c0009271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009275:	8b 0d c8 fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fdc8
c000927b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009281:	89 d0                	mov    eax,edx
c0009283:	d1 e8                	shr    eax,1
c0009285:	83 e2 01             	and    edx,0x1
c0009288:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000928b:	75 04                	jne    c0009291 <Virt::getPageState(unsigned long)+0x20>
c000928d:	83 e0 0f             	and    eax,0xf
c0009290:	c3                   	ret    
c0009291:	c0 e8 04             	shr    al,0x4
c0009294:	c3                   	ret    

c0009295 <Virt::allocateKernelVirtualPages(int)>:
c0009295:	55                   	push   ebp
c0009296:	31 ed                	xor    ebp,ebp
c0009298:	57                   	push   edi
c0009299:	56                   	push   esi
c000929a:	53                   	push   ebx
c000929b:	31 db                	xor    ebx,ebx
c000929d:	83 ec 1c             	sub    esp,0x1c
c00092a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092a4:	8b 3d c4 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fdc4
c00092aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092af:	57                   	push   edi
c00092b0:	e8 bc ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092b5:	5a                   	pop    edx
c00092b6:	84 c0                	test   al,al
c00092b8:	75 3a                	jne    c00092f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092ba:	85 db                	test   ebx,ebx
c00092bc:	75 02                	jne    c00092c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092be:	89 fd                	mov    ebp,edi
c00092c0:	43                   	inc    ebx
c00092c1:	39 f3                	cmp    ebx,esi
c00092c3:	74 5a                	je     c000931f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092c5:	47                   	inc    edi
c00092c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092cc:	76 31                	jbe    c00092ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092ce:	c7 05 c4 fd 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001fdc4,0xc8000
c00092d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092dd:	75 28                	jne    c0009307 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e9:	57                   	push   edi
c00092ea:	e8 82 ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092ef:	5a                   	pop    edx
c00092f0:	84 c0                	test   al,al
c00092f2:	74 c6                	je     c00092ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00092f4:	31 db                	xor    ebx,ebx
c00092f6:	47                   	inc    edi
c00092f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092fd:	77 cf                	ja     c00092ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ff:	89 3d c4 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc4,edi
c0009305:	eb a8                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009307:	83 ec 0c             	sub    esp,0xc
c000930a:	68 f0 df 01 c0       	push   0xc001dff0
c000930f:	e8 5b 6f 00 00       	call   c001026f <KePanic(char const*)>
c0009314:	8b 3d c4 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fdc4
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	eb 90                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000931f:	89 2d c4 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc4,ebp
c0009325:	4b                   	dec    ebx
c0009326:	74 5f                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009328:	85 f6                	test   esi,esi
c000932a:	74 3d                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000932c:	89 e8                	mov    eax,ebp
c000932e:	31 db                	xor    ebx,ebx
c0009330:	8d 7e ff             	lea    edi,[esi-0x1]
c0009333:	eb 14                	jmp    c0009349 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009335:	6a 01                	push   0x1
c0009337:	43                   	inc    ebx
c0009338:	50                   	push   eax
c0009339:	e8 fe fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000933e:	58                   	pop    eax
c000933f:	39 f3                	cmp    ebx,esi
c0009341:	5a                   	pop    edx
c0009342:	74 25                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009344:	a1 c4 fd 01 c0       	mov    eax,ds:0xc001fdc4
c0009349:	8d 50 01             	lea    edx,[eax+0x1]
c000934c:	85 db                	test   ebx,ebx
c000934e:	89 15 c4 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc4,edx
c0009354:	74 20                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009356:	39 df                	cmp    edi,ebx
c0009358:	75 db                	jne    c0009335 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000935a:	6a 03                	push   0x3
c000935c:	43                   	inc    ebx
c000935d:	50                   	push   eax
c000935e:	e8 d9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009363:	59                   	pop    ecx
c0009364:	39 f3                	cmp    ebx,esi
c0009366:	58                   	pop    eax
c0009367:	75 db                	jne    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009369:	83 c4 1c             	add    esp,0x1c
c000936c:	89 e8                	mov    eax,ebp
c000936e:	5b                   	pop    ebx
c000936f:	c1 e0 0c             	shl    eax,0xc
c0009372:	5e                   	pop    esi
c0009373:	5f                   	pop    edi
c0009374:	5d                   	pop    ebp
c0009375:	c3                   	ret    
c0009376:	6a 02                	push   0x2
c0009378:	bb 01 00 00 00       	mov    ebx,0x1
c000937d:	50                   	push   eax
c000937e:	e8 b9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009383:	58                   	pop    eax
c0009384:	5a                   	pop    edx
c0009385:	eb bd                	jmp    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009387:	6a 04                	push   0x4
c0009389:	8d 45 01             	lea    eax,[ebp+0x1]
c000938c:	55                   	push   ebp
c000938d:	a3 c4 fd 01 c0       	mov    ds:0xc001fdc4,eax
c0009392:	e8 a5 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009397:	59                   	pop    ecx
c0009398:	89 e8                	mov    eax,ebp
c000939a:	5b                   	pop    ebx
c000939b:	c1 e0 0c             	shl    eax,0xc
c000939e:	83 c4 1c             	add    esp,0x1c
c00093a1:	5b                   	pop    ebx
c00093a2:	5e                   	pop    esi
c00093a3:	5f                   	pop    edi
c00093a4:	5d                   	pop    ebp
c00093a5:	c3                   	ret    

c00093a6 <Virt::freeSwapfilePage(unsigned long)>:
c00093a6:	53                   	push   ebx
c00093a7:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c00093ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093b1:	b8 01 00 00 00       	mov    eax,0x1
c00093b6:	89 cb                	mov    ebx,ecx
c00093b8:	d3 e0                	shl    eax,cl
c00093ba:	c1 eb 05             	shr    ebx,0x5
c00093bd:	f7 d0                	not    eax
c00093bf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093c2:	5b                   	pop    ebx
c00093c3:	c3                   	ret    

c00093c4 <Virt::swapIDToSector(unsigned long)>:
c00093c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c8:	0f af 05 cc fd 01 c0 	imul   eax,DWORD PTR ds:0xc001fdcc
c00093cf:	03 05 d4 fd 01 c0    	add    eax,DWORD PTR ds:0xc001fdd4
c00093d5:	c3                   	ret    

c00093d6 <Virt::allocateSwapfilePage()>:
c00093d6:	55                   	push   ebp
c00093d7:	31 d2                	xor    edx,edx
c00093d9:	57                   	push   edi
c00093da:	56                   	push   esi
c00093db:	53                   	push   ebx
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	8b 0d cc fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fdcc
c00093e5:	a1 d0 fd 01 c0       	mov    eax,ds:0xc001fdd0
c00093ea:	f7 f1                	div    ecx
c00093ec:	39 0d d0 fd 01 c0    	cmp    DWORD PTR ds:0xc001fdd0,ecx
c00093f2:	72 2d                	jb     c0009421 <Virt::allocateSwapfilePage()+0x4b>
c00093f4:	8b 35 ac 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fac
c00093fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00093fc:	f6 c2 01             	test   dl,0x1
c00093ff:	74 3c                	je     c000943d <Virt::allocateSwapfilePage()+0x67>
c0009401:	31 c9                	xor    ecx,ecx
c0009403:	bf 01 00 00 00       	mov    edi,0x1
c0009408:	eb 12                	jmp    c000941c <Virt::allocateSwapfilePage()+0x46>
c000940a:	89 fd                	mov    ebp,edi
c000940c:	89 ca                	mov    edx,ecx
c000940e:	d3 e5                	shl    ebp,cl
c0009410:	c1 ea 05             	shr    edx,0x5
c0009413:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009416:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009418:	85 ea                	test   edx,ebp
c000941a:	74 2a                	je     c0009446 <Virt::allocateSwapfilePage()+0x70>
c000941c:	41                   	inc    ecx
c000941d:	39 c8                	cmp    eax,ecx
c000941f:	77 e9                	ja     c000940a <Virt::allocateSwapfilePage()+0x34>
c0009421:	83 ec 0c             	sub    esp,0xc
c0009424:	68 57 e1 01 c0       	push   0xc001e157
c0009429:	e8 41 6e 00 00       	call   c001026f <KePanic(char const*)>
c000942e:	83 c4 10             	add    esp,0x10
c0009431:	31 c9                	xor    ecx,ecx
c0009433:	83 c4 0c             	add    esp,0xc
c0009436:	89 c8                	mov    eax,ecx
c0009438:	5b                   	pop    ebx
c0009439:	5e                   	pop    esi
c000943a:	5f                   	pop    edi
c000943b:	5d                   	pop    ebp
c000943c:	c3                   	ret    
c000943d:	89 f3                	mov    ebx,esi
c000943f:	bd 01 00 00 00       	mov    ebp,0x1
c0009444:	31 c9                	xor    ecx,ecx
c0009446:	09 ea                	or     edx,ebp
c0009448:	89 c8                	mov    eax,ecx
c000944a:	89 13                	mov    DWORD PTR [ebx],edx
c000944c:	83 c4 0c             	add    esp,0xc
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <Virt::virtualMemorySetup()>:
c0009454:	53                   	push   ebx
c0009455:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000945a:	6a 0f                	push   0xf
c000945c:	53                   	push   ebx
c000945d:	43                   	inc    ebx
c000945e:	e8 d9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009463:	58                   	pop    eax
c0009464:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000946a:	5a                   	pop    edx
c000946b:	75 ed                	jne    c000945a <Virt::virtualMemorySetup()+0x6>
c000946d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009472:	6a 00                	push   0x0
c0009474:	53                   	push   ebx
c0009475:	43                   	inc    ebx
c0009476:	e8 c1 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000947b:	59                   	pop    ecx
c000947c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009482:	58                   	pop    eax
c0009483:	75 ed                	jne    c0009472 <Virt::virtualMemorySetup()+0x1e>
c0009485:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000948a:	6a 0f                	push   0xf
c000948c:	53                   	push   ebx
c000948d:	43                   	inc    ebx
c000948e:	e8 a9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009493:	58                   	pop    eax
c0009494:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000949a:	5a                   	pop    edx
c000949b:	75 ed                	jne    c000948a <Virt::virtualMemorySetup()+0x36>
c000949d:	5b                   	pop    ebx
c000949e:	c3                   	ret    

c000949f <Virt::setupPageSwapping(int)>:
c000949f:	53                   	push   ebx
c00094a0:	83 ec 0c             	sub    esp,0xc
c00094a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094a7:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c00094ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094b4:	53                   	push   ebx
c00094b5:	c1 e3 0b             	shl    ebx,0xb
c00094b8:	68 6e e1 01 c0       	push   0xc001e16e
c00094bd:	50                   	push   eax
c00094be:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094c1:	89 1d d0 fd 01 c0    	mov    DWORD PTR ds:0xc001fdd0,ebx
c00094c7:	c6 05 d8 fd 01 c0 43 	mov    BYTE PTR ds:0xc001fdd8,0x43
c00094ce:	c1 eb 08             	shr    ebx,0x8
c00094d1:	a3 d4 fd 01 c0       	mov    ds:0xc001fdd4,eax
c00094d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d9:	c7 05 cc fd 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001fdcc,0x8
c00094e3:	e8 d1 e2 ff ff       	call   c00077b9 <malloc>
c00094e8:	83 c4 0c             	add    esp,0xc
c00094eb:	89 c1                	mov    ecx,eax
c00094ed:	a3 ac 2f 02 c0       	mov    ds:0xc0022fac,eax
c00094f2:	31 d2                	xor    edx,edx
c00094f4:	a1 d0 fd 01 c0       	mov    eax,ds:0xc001fdd0
c00094f9:	f7 35 cc fd 01 c0    	div    DWORD PTR ds:0xc001fdcc
c00094ff:	c1 e8 05             	shr    eax,0x5
c0009502:	50                   	push   eax
c0009503:	6a 00                	push   0x0
c0009505:	51                   	push   ecx
c0009506:	e8 c5 6f ff ff       	call   c00004d0 <memset>
c000950b:	83 c4 18             	add    esp,0x18
c000950e:	5b                   	pop    ebx
c000950f:	c3                   	ret    

c0009510 <VAS::VAS(VAS*)>:
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009517:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000951e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009522:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009529:	83 ec 0c             	sub    esp,0xc
c000952c:	68 10 e0 01 c0       	push   0xc001e010
c0009531:	e8 39 6d 00 00       	call   c001026f <KePanic(char const*)>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	90                   	nop
c000953a:	83 c4 0c             	add    esp,0xc
c000953d:	c3                   	ret    

c000953e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000953e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009542:	89 c2                	mov    edx,eax
c0009544:	c1 e8 0a             	shr    eax,0xa
c0009547:	c1 ea 16             	shr    edx,0x16
c000954a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000954f:	19 c9                	sbb    ecx,ecx
c0009551:	c1 e2 0c             	shl    edx,0xc
c0009554:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000955a:	25 fc 0f 00 00       	and    eax,0xffc
c000955f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009566:	01 d0                	add    eax,edx
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <VAS::getPageTableEntry(unsigned long)>:
c000956a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000956e:	89 ca                	mov    edx,ecx
c0009570:	c1 e9 0a             	shr    ecx,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000957c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009582:	c1 e0 0c             	shl    eax,0xc
c0009585:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009588:	c3                   	ret    

c0009589 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009589:	57                   	push   edi
c000958a:	56                   	push   esi
c000958b:	be 01 00 00 00       	mov    esi,0x1
c0009590:	53                   	push   ebx
c0009591:	83 ec 10             	sub    esp,0x10
c0009594:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009598:	c1 eb 0c             	shr    ebx,0xc
c000959b:	eb 3f                	jmp    c00095dc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000959d:	83 ec 08             	sub    esp,0x8
c00095a0:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c00095a5:	57                   	push   edi
c00095a6:	50                   	push   eax
c00095a7:	e8 be ff ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095b5:	f6 c4 04             	test   ah,0x4
c00095b8:	75 60                	jne    c000961a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095ba:	80 fa 04             	cmp    dl,0x4
c00095bd:	74 79                	je     c0009638 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095bf:	80 fa 02             	cmp    dl,0x2
c00095c2:	0f 84 89 00 00 00    	je     c0009651 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095c8:	80 fa 03             	cmp    dl,0x3
c00095cb:	0f 84 ae 00 00 00    	je     c000967f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095d1:	fe ca                	dec    dl
c00095d3:	0f 84 93 00 00 00    	je     c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095d9:	43                   	inc    ebx
c00095da:	31 f6                	xor    esi,esi
c00095dc:	53                   	push   ebx
c00095dd:	89 df                	mov    edi,ebx
c00095df:	e8 8d fc ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00095e4:	c1 e7 0c             	shl    edi,0xc
c00095e7:	5a                   	pop    edx
c00095e8:	84 c0                	test   al,al
c00095ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095ee:	75 ad                	jne    c000959d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095f0:	83 ec 0c             	sub    esp,0xc
c00095f3:	68 85 e1 01 c0       	push   0xc001e185
c00095f8:	e8 72 6c 00 00       	call   c001026f <KePanic(char const*)>
c00095fd:	5a                   	pop    edx
c00095fe:	59                   	pop    ecx
c00095ff:	57                   	push   edi
c0009600:	8b 3d b0 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022fb0
c0009606:	57                   	push   edi
c0009607:	e8 5e ff ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009611:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009615:	f6 c4 04             	test   ah,0x4
c0009618:	74 bf                	je     c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000961a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000961e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	50                   	push   eax
c0009627:	e8 07 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000962c:	83 c4 10             	add    esp,0x10
c000962f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009633:	80 fa 04             	cmp    dl,0x4
c0009636:	75 87                	jne    c00095bf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009638:	89 f0                	mov    eax,esi
c000963a:	84 c0                	test   al,al
c000963c:	75 47                	jne    c0009685 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000963e:	c7 44 24 20 34 e0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e034
c0009646:	83 c4 10             	add    esp,0x10
c0009649:	5b                   	pop    ebx
c000964a:	5e                   	pop    esi
c000964b:	5f                   	pop    edi
c000964c:	e9 1e 6c 00 00       	jmp    c001026f <KePanic(char const*)>
c0009651:	89 f0                	mov    eax,esi
c0009653:	84 c0                	test   al,al
c0009655:	75 15                	jne    c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	68 a1 e1 01 c0       	push   0xc001e1a1
c000965f:	e8 0b 6c 00 00       	call   c001026f <KePanic(char const*)>
c0009664:	83 c4 10             	add    esp,0x10
c0009667:	e9 6d ff ff ff       	jmp    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966c:	83 ec 08             	sub    esp,0x8
c000966f:	6a 00                	push   0x0
c0009671:	53                   	push   ebx
c0009672:	e8 c5 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	e9 5a ff ff ff       	jmp    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000967f:	89 f0                	mov    eax,esi
c0009681:	84 c0                	test   al,al
c0009683:	75 15                	jne    c000969a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009685:	83 ec 08             	sub    esp,0x8
c0009688:	6a 00                	push   0x0
c000968a:	53                   	push   ebx
c000968b:	e8 ac fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	5b                   	pop    ebx
c0009697:	5e                   	pop    esi
c0009698:	5f                   	pop    edi
c0009699:	c3                   	ret    
c000969a:	c7 44 24 20 bd e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e1bd
c00096a2:	83 c4 10             	add    esp,0x10
c00096a5:	5b                   	pop    ebx
c00096a6:	5e                   	pop    esi
c00096a7:	5f                   	pop    edi
c00096a8:	e9 c2 6b 00 00       	jmp    c001026f <KePanic(char const*)>
c00096ad:	90                   	nop

c00096ae <VAS::freeAllocatedPages(unsigned long)>:
c00096ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096b6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096ba:	74 09                	je     c00096c5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096c0:	e9 c4 fe ff ff       	jmp    c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c00096c5:	c7 44 24 04 58 e0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e058
c00096cd:	e9 80 0e 00 00       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>

c00096d2 <VAS::virtualToPhysical(unsigned long)>:
c00096d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096d6:	50                   	push   eax
c00096d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096db:	52                   	push   edx
c00096dc:	e8 89 fe ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c00096e1:	59                   	pop    ecx
c00096e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096e4:	5a                   	pop    edx
c00096e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096ea:	c3                   	ret    
c00096eb:	90                   	nop

c00096ec <VAS::reflagRange(unsigned long, int, int, int)>:
c00096ec:	55                   	push   ebp
c00096ed:	57                   	push   edi
c00096ee:	56                   	push   esi
c00096ef:	53                   	push   ebx
c00096f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096f4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009700:	85 db                	test   ebx,ebx
c0009702:	7e 22                	jle    c0009726 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009704:	c1 e3 0c             	shl    ebx,0xc
c0009707:	01 f3                	add    ebx,esi
c0009709:	56                   	push   esi
c000970a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009710:	55                   	push   ebp
c0009711:	e8 54 fe ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c0009716:	5a                   	pop    edx
c0009717:	59                   	pop    ecx
c0009718:	8b 08                	mov    ecx,DWORD PTR [eax]
c000971a:	21 f9                	and    ecx,edi
c000971c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009720:	39 f3                	cmp    ebx,esi
c0009722:	89 08                	mov    DWORD PTR [eax],ecx
c0009724:	75 e3                	jne    c0009709 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009726:	5b                   	pop    ebx
c0009727:	5e                   	pop    esi
c0009728:	5f                   	pop    edi
c0009729:	5d                   	pop    ebp
c000972a:	c3                   	ret    
c000972b:	90                   	nop

c000972c <VAS::VAS()>:
c000972c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009730:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009746:	a3 b0 2f 02 c0       	mov    ds:0xc0022fb0,eax
c000974b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009757:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000975a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009765:	ba 7d 10 02 c0       	mov    edx,0xc002107d
c000976a:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000976f:	29 c2                	sub    edx,eax
c0009771:	89 d0                	mov    eax,edx
c0009773:	05 ff 0f 00 00       	add    eax,0xfff
c0009778:	c1 e8 0c             	shr    eax,0xc
c000977b:	89 c2                	mov    edx,eax
c000977d:	b8 00 10 02 c0       	mov    eax,0xc0021000
c0009782:	6a 04                	push   0x4
c0009784:	6a ff                	push   0xffffffff
c0009786:	52                   	push   edx
c0009787:	50                   	push   eax
c0009788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000978c:	e8 5b ff ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c0009791:	83 c4 14             	add    esp,0x14
c0009794:	90                   	nop
c0009795:	c3                   	ret    

c0009796 <VAS::setToWriteCombining(unsigned long, int)>:
c0009796:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000979b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00097a1:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00097a8:	75 01                	jne    c00097ab <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00097aa:	c3                   	ret    
c00097ab:	68 80 00 00 00       	push   0x80
c00097b0:	6a ff                	push   0xffffffff
c00097b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097b6:	50                   	push   eax
c00097b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bb:	52                   	push   edx
c00097bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00097c0:	51                   	push   ecx
c00097c1:	e8 26 ff ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c00097c6:	83 c4 14             	add    esp,0x14
c00097c9:	c3                   	ret    

c00097ca <VAS::mapOtherVASIn(bool, VAS*)>:
c00097ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097da:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097dd:	19 c0                	sbb    eax,eax
c00097df:	83 ca 03             	or     edx,0x3
c00097e2:	83 e0 fc             	and    eax,0xfffffffc
c00097e5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ec:	0f 20 d8             	mov    eax,cr3
c00097ef:	0f 22 d8             	mov    cr3,eax
c00097f2:	c3                   	ret    
c00097f3:	90                   	nop

c00097f4 <VAS::~VAS()>:
c00097f4:	83 ec 2c             	sub    esp,0x2c
c00097f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097ff:	fa                   	cli    
c0009800:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009805:	40                   	inc    eax
c0009806:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000980b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009810:	8b 00                	mov    eax,DWORD PTR [eax]
c0009812:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009815:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000981b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000981f:	6a 01                	push   0x1
c0009821:	50                   	push   eax
c0009822:	e8 a3 ff ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0009827:	83 c4 0c             	add    esp,0xc
c000982a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009832:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000983a:	0f 8f d4 00 00 00    	jg     c0009914 <VAS::~VAS()+0x120>
c0009840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009844:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009847:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000984b:	c1 e2 02             	shl    edx,0x2
c000984e:	01 d0                	add    eax,edx
c0009850:	8b 00                	mov    eax,DWORD PTR [eax]
c0009852:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985a:	83 e0 01             	and    eax,0x1
c000985d:	0f 84 a8 00 00 00    	je     c000990b <VAS::~VAS()+0x117>
c0009863:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000986b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009873:	7f 72                	jg     c00098e7 <VAS::~VAS()+0xf3>
c0009875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009879:	c1 e0 0a             	shl    eax,0xa
c000987c:	89 c2                	mov    edx,eax
c000987e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009882:	01 d0                	add    eax,edx
c0009884:	c1 e0 0c             	shl    eax,0xc
c0009887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000988b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009890:	8b 00                	mov    eax,DWORD PTR [eax]
c0009892:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009895:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000989b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000989f:	6a 01                	push   0x1
c00098a1:	50                   	push   eax
c00098a2:	e8 97 fc ff ff       	call   c000953e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00098a7:	83 c4 0c             	add    esp,0xc
c00098aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00098b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098bc:	25 01 04 00 00       	and    eax,0x401
c00098c1:	3d 01 04 00 00       	cmp    eax,0x401
c00098c6:	75 19                	jne    c00098e1 <VAS::~VAS()+0xed>
c00098c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098d1:	83 ec 0c             	sub    esp,0xc
c00098d4:	50                   	push   eax
c00098d5:	e8 59 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098e1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098e5:	eb 84                	jmp    c000986b <VAS::~VAS()+0x77>
c00098e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098eb:	25 00 04 00 00       	and    eax,0x400
c00098f0:	74 19                	je     c000990b <VAS::~VAS()+0x117>
c00098f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098fb:	83 ec 0c             	sub    esp,0xc
c00098fe:	50                   	push   eax
c00098ff:	e8 2f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000990b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000990f:	e9 1e ff ff ff       	jmp    c0009832 <VAS::~VAS()+0x3e>
c0009914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009918:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000991b:	83 ec 0c             	sub    esp,0xc
c000991e:	50                   	push   eax
c000991f:	e8 65 fc ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009924:	83 c4 10             	add    esp,0x10
c0009927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000992b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000992e:	83 ec 0c             	sub    esp,0xc
c0009931:	50                   	push   eax
c0009932:	e8 fc e0 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000993e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009943:	48                   	dec    eax
c0009944:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0009949:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000994e:	85 c0                	test   eax,eax
c0009950:	75 01                	jne    c0009953 <VAS::~VAS()+0x15f>
c0009952:	fb                   	sti    
c0009953:	90                   	nop
c0009954:	83 c4 2c             	add    esp,0x2c
c0009957:	c3                   	ret    

c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009958:	55                   	push   ebp
c0009959:	57                   	push   edi
c000995a:	56                   	push   esi
c000995b:	53                   	push   ebx
c000995c:	83 ec 1c             	sub    esp,0x1c
c000995f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009967:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000996d:	77 0b                	ja     c000997a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000996f:	0f 20 d8             	mov    eax,cr3
c0009972:	0f 20 d8             	mov    eax,cr3
c0009975:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009978:	75 47                	jne    c00099c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000997a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000997e:	09 d8                	or     eax,ebx
c0009980:	a9 ff 0f 00 00       	test   eax,0xfff
c0009985:	75 57                	jne    c00099de <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009987:	89 de                	mov    esi,ebx
c0009989:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000998c:	c1 ee 16             	shr    esi,0x16
c000998f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009996:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000999a:	74 54                	je     c00099f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000999c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00099a0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00099a6:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00099aa:	c1 e6 0c             	shl    esi,0xc
c00099ad:	c1 eb 0a             	shr    ebx,0xa
c00099b0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00099b6:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00099b9:	83 c4 1c             	add    esp,0x1c
c00099bc:	5b                   	pop    ebx
c00099bd:	5e                   	pop    esi
c00099be:	5f                   	pop    edi
c00099bf:	5d                   	pop    ebp
c00099c0:	c3                   	ret    
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	68 7c e0 01 c0       	push   0xc001e07c
c00099c9:	e8 84 0b 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099d5:	09 d8                	or     eax,ebx
c00099d7:	a9 ff 0f 00 00       	test   eax,0xfff
c00099dc:	74 a9                	je     c0009987 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099de:	83 ec 0c             	sub    esp,0xc
c00099e1:	68 e4 e0 01 c0       	push   0xc001e0e4
c00099e6:	e8 84 68 00 00       	call   c001026f <KePanic(char const*)>
c00099eb:	83 c4 10             	add    esp,0x10
c00099ee:	eb 97                	jmp    c0009987 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099f4:	e8 9c e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099f9:	83 ec 0c             	sub    esp,0xc
c00099fc:	89 c5                	mov    ebp,eax
c00099fe:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009a04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a08:	6a 01                	push   0x1
c0009a0a:	e8 86 f8 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009a0f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a16:	6a 01                	push   0x1
c0009a18:	50                   	push   eax
c0009a19:	55                   	push   ebp
c0009a1a:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a24:	51                   	push   ecx
c0009a25:	e8 28 02 00 00       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a2a:	83 c4 1c             	add    esp,0x1c
c0009a2d:	68 00 10 00 00       	push   0x1000
c0009a32:	6a 00                	push   0x0
c0009a34:	50                   	push   eax
c0009a35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a39:	e8 92 6a ff ff       	call   c00004d0 <memset>
c0009a3e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	e8 3f fb ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a51:	83 c4 10             	add    esp,0x10
c0009a54:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a57:	e9 40 ff ff ff       	jmp    c000999c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a5c <VAS::allocatePages(int, int)>:
c0009a5c:	55                   	push   ebp
c0009a5d:	57                   	push   edi
c0009a5e:	56                   	push   esi
c0009a5f:	53                   	push   ebx
c0009a60:	83 ec 1c             	sub    esp,0x1c
c0009a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a67:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009a6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a72:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a78:	83 e0 01             	and    eax,0x1
c0009a7b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a83:	0f 85 cc 00 00 00    	jne    c0009b55 <VAS::allocatePages(int, int)+0xf9>
c0009a89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a90:	85 c0                	test   eax,eax
c0009a92:	0f 84 a1 00 00 00    	je     c0009b39 <VAS::allocatePages(int, int)+0xdd>
c0009a98:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009aa0:	c1 e6 0c             	shl    esi,0xc
c0009aa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009aa7:	85 c0                	test   eax,eax
c0009aa9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009aac:	7e 33                	jle    c0009ae1 <VAS::allocatePages(int, int)+0x85>
c0009aae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009ab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ab6:	81 cd 00 04 00 00    	or     ebp,0x400
c0009abc:	e8 d4 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ac1:	55                   	push   ebp
c0009ac2:	53                   	push   ebx
c0009ac3:	50                   	push   eax
c0009ac4:	57                   	push   edi
c0009ac5:	e8 8e fe ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ad2:	74 03                	je     c0009ad7 <VAS::allocatePages(int, int)+0x7b>
c0009ad4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ad7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009add:	39 de                	cmp    esi,ebx
c0009adf:	75 db                	jne    c0009abc <VAS::allocatePages(int, int)+0x60>
c0009ae1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae6:	75 12                	jne    c0009afa <VAS::allocatePages(int, int)+0x9e>
c0009ae8:	0f 20 d8             	mov    eax,cr3
c0009aeb:	0f 22 d8             	mov    cr3,eax
c0009aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af2:	83 c4 1c             	add    esp,0x1c
c0009af5:	5b                   	pop    ebx
c0009af6:	5e                   	pop    esi
c0009af7:	5f                   	pop    edi
c0009af8:	5d                   	pop    ebp
c0009af9:	c3                   	ret    
c0009afa:	c1 ee 0a             	shr    esi,0xa
c0009afd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b01:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009b07:	c1 eb 0a             	shr    ebx,0xa
c0009b0a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b16:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b1c:	39 c3                	cmp    ebx,eax
c0009b1e:	77 ce                	ja     c0009aee <VAS::allocatePages(int, int)+0x92>
c0009b20:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b23:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b29:	39 d8                	cmp    eax,ebx
c0009b2b:	73 f3                	jae    c0009b20 <VAS::allocatePages(int, int)+0xc4>
c0009b2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b31:	83 c4 1c             	add    esp,0x1c
c0009b34:	5b                   	pop    ebx
c0009b35:	5e                   	pop    esi
c0009b36:	5f                   	pop    edi
c0009b37:	5d                   	pop    ebp
c0009b38:	c3                   	ret    
c0009b39:	83 ec 0c             	sub    esp,0xc
c0009b3c:	68 08 e1 01 c0       	push   0xc001e108
c0009b41:	e8 29 67 00 00       	call   c001026f <KePanic(char const*)>
c0009b46:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b4d:	83 c4 10             	add    esp,0x10
c0009b50:	e9 43 ff ff ff       	jmp    c0009a98 <VAS::allocatePages(int, int)+0x3c>
c0009b55:	83 ec 0c             	sub    esp,0xc
c0009b58:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b5c:	51                   	push   ecx
c0009b5d:	e8 33 f7 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b66:	83 c4 10             	add    esp,0x10
c0009b69:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b6e:	0f 87 9b 00 00 00    	ja     c0009c0f <VAS::allocatePages(int, int)+0x1b3>
c0009b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b78:	85 d2                	test   edx,edx
c0009b7a:	7e 3c                	jle    c0009bb8 <VAS::allocatePages(int, int)+0x15c>
c0009b7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b88:	c1 e5 0c             	shl    ebp,0xc
c0009b8b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b91:	01 dd                	add    ebp,ebx
c0009b93:	e8 fd de ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b98:	56                   	push   esi
c0009b99:	53                   	push   ebx
c0009b9a:	50                   	push   eax
c0009b9b:	57                   	push   edi
c0009b9c:	e8 b7 fd ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ba1:	83 c4 10             	add    esp,0x10
c0009ba4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba9:	74 03                	je     c0009bae <VAS::allocatePages(int, int)+0x152>
c0009bab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bb4:	39 dd                	cmp    ebp,ebx
c0009bb6:	75 db                	jne    c0009b93 <VAS::allocatePages(int, int)+0x137>
c0009bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bbd:	0f 84 25 ff ff ff    	je     c0009ae8 <VAS::allocatePages(int, int)+0x8c>
c0009bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bcb:	89 d3                	mov    ebx,edx
c0009bcd:	c1 e0 0c             	shl    eax,0xc
c0009bd0:	c1 eb 0a             	shr    ebx,0xa
c0009bd3:	01 d0                	add    eax,edx
c0009bd5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bdb:	c1 e8 0a             	shr    eax,0xa
c0009bde:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009be4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009be9:	2d 00 00 40 00       	sub    eax,0x400000
c0009bee:	39 c3                	cmp    ebx,eax
c0009bf0:	0f 87 f8 fe ff ff    	ja     c0009aee <VAS::allocatePages(int, int)+0x92>
c0009bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bff:	39 d8                	cmp    eax,ebx
c0009c01:	73 f3                	jae    c0009bf6 <VAS::allocatePages(int, int)+0x19a>
c0009c03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c07:	83 c4 1c             	add    esp,0x1c
c0009c0a:	5b                   	pop    ebx
c0009c0b:	5e                   	pop    esi
c0009c0c:	5f                   	pop    edi
c0009c0d:	5d                   	pop    ebp
c0009c0e:	c3                   	ret    
c0009c0f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009c14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c1a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c21:	0f 84 4d ff ff ff    	je     c0009b74 <VAS::allocatePages(int, int)+0x118>
c0009c27:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c2f:	e9 40 ff ff ff       	jmp    c0009b74 <VAS::allocatePages(int, int)+0x118>

c0009c34 <VAS::setCPUSpecific(unsigned long)>:
c0009c34:	83 ec 0c             	sub    esp,0xc
c0009c37:	6a 05                	push   0x5
c0009c39:	68 00 00 40 c2       	push   0xc2400000
c0009c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c42:	50                   	push   eax
c0009c43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c47:	52                   	push   edx
c0009c48:	e8 0b fd ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c4d:	83 c4 1c             	add    esp,0x1c
c0009c50:	c3                   	ret    
c0009c51:	90                   	nop

c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c52:	55                   	push   ebp
c0009c53:	57                   	push   edi
c0009c54:	56                   	push   esi
c0009c55:	53                   	push   ebx
c0009c56:	83 ec 1c             	sub    esp,0x1c
c0009c59:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009c5e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c68:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c6c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c72:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c76:	83 e0 01             	and    eax,0x1
c0009c79:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c81:	85 c0                	test   eax,eax
c0009c83:	7e 39                	jle    c0009cbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c89:	89 f3                	mov    ebx,esi
c0009c8b:	c1 e0 0c             	shl    eax,0xc
c0009c8e:	01 f0                	add    eax,esi
c0009c90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c94:	55                   	push   ebp
c0009c95:	53                   	push   ebx
c0009c96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9a:	29 f0                	sub    eax,esi
c0009c9c:	01 d8                	add    eax,ebx
c0009c9e:	50                   	push   eax
c0009c9f:	57                   	push   edi
c0009ca0:	e8 b3 fc ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cad:	74 03                	je     c0009cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009caf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009cbc:	75 d6                	jne    c0009c94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009cbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cc3:	75 10                	jne    c0009cd5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009cc5:	0f 20 d8             	mov    eax,cr3
c0009cc8:	0f 22 d8             	mov    cr3,eax
c0009ccb:	83 c4 1c             	add    esp,0x1c
c0009cce:	89 f0                	mov    eax,esi
c0009cd0:	5b                   	pop    ebx
c0009cd1:	5e                   	pop    esi
c0009cd2:	5f                   	pop    edi
c0009cd3:	5d                   	pop    ebp
c0009cd4:	c3                   	ret    
c0009cd5:	89 f3                	mov    ebx,esi
c0009cd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cdb:	c1 eb 0a             	shr    ebx,0xa
c0009cde:	c1 e0 0c             	shl    eax,0xc
c0009ce1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ce7:	01 f0                	add    eax,esi
c0009ce9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cef:	c1 e8 0a             	shr    eax,0xa
c0009cf2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf7:	2d 00 00 40 00       	sub    eax,0x400000
c0009cfc:	39 c3                	cmp    ebx,eax
c0009cfe:	77 cb                	ja     c0009ccb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009d00:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d03:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d09:	39 d8                	cmp    eax,ebx
c0009d0b:	73 f3                	jae    c0009d00 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009d0d:	83 c4 1c             	add    esp,0x1c
c0009d10:	89 f0                	mov    eax,esi
c0009d12:	5b                   	pop    ebx
c0009d13:	5e                   	pop    esi
c0009d14:	5f                   	pop    edi
c0009d15:	5d                   	pop    ebp
c0009d16:	c3                   	ret    
c0009d17:	90                   	nop

c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d18:	55                   	push   ebp
c0009d19:	57                   	push   edi
c0009d1a:	56                   	push   esi
c0009d1b:	53                   	push   ebx
c0009d1c:	83 ec 1c             	sub    esp,0x1c
c0009d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d27:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d2b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d34:	75 4a                	jne    c0009d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d36:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d3a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d3d:	c1 eb 16             	shr    ebx,0x16
c0009d40:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d47:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d4b:	74 4d                	je     c0009d9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d51:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d55:	c1 e8 0a             	shr    eax,0xa
c0009d58:	80 fa 01             	cmp    dl,0x1
c0009d5b:	19 d2                	sbb    edx,edx
c0009d5d:	c1 e3 0c             	shl    ebx,0xc
c0009d60:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d64:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d6a:	25 fc 0f 00 00       	and    eax,0xffc
c0009d6f:	01 d8                	add    eax,ebx
c0009d71:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d78:	83 c4 1c             	add    esp,0x1c
c0009d7b:	5b                   	pop    ebx
c0009d7c:	5e                   	pop    esi
c0009d7d:	5f                   	pop    edi
c0009d7e:	5d                   	pop    ebp
c0009d7f:	c3                   	ret    
c0009d80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d84:	83 ec 0c             	sub    esp,0xc
c0009d87:	68 34 e1 01 c0       	push   0xc001e134
c0009d8c:	e8 de 64 00 00       	call   c001026f <KePanic(char const*)>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d98:	eb 9c                	jmp    c0009d36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d9e:	e8 f2 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009da3:	83 ec 0c             	sub    esp,0xc
c0009da6:	89 c5                	mov    ebp,eax
c0009da8:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009dae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db2:	6a 01                	push   0x1
c0009db4:	e8 dc f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009db9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc0:	6a 01                	push   0x1
c0009dc2:	50                   	push   eax
c0009dc3:	55                   	push   ebp
c0009dc4:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dce:	51                   	push   ecx
c0009dcf:	e8 7e fe ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd4:	83 c4 1c             	add    esp,0x1c
c0009dd7:	68 00 10 00 00       	push   0x1000
c0009ddc:	6a 00                	push   0x0
c0009dde:	50                   	push   eax
c0009ddf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de3:	e8 e8 66 ff ff       	call   c00004d0 <memset>
c0009de8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dec:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009def:	e8 95 f7 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e01:	e9 47 ff ff ff       	jmp    c0009d4d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e06 <VAS::VAS(bool)>:
c0009e06:	53                   	push   ebx
c0009e07:	83 ec 28             	sub    esp,0x28
c0009e0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e0e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e30:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e33:	e8 5d dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e38:	89 c2                	mov    edx,eax
c0009e3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e41:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009e47:	83 ec 0c             	sub    esp,0xc
c0009e4a:	6a 01                	push   0x1
c0009e4c:	e8 44 f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 c2                	mov    edx,eax
c0009e56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e5d:	83 ec 0c             	sub    esp,0xc
c0009e60:	6a 03                	push   0x3
c0009e62:	6a 01                	push   0x1
c0009e64:	52                   	push   edx
c0009e65:	50                   	push   eax
c0009e66:	53                   	push   ebx
c0009e67:	e8 e6 fd ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e6c:	83 c4 20             	add    esp,0x20
c0009e6f:	89 c2                	mov    edx,eax
c0009e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e80:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e88:	7f 1c                	jg     c0009ea6 <VAS::VAS(bool)+0xa0>
c0009e8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e95:	c1 e2 02             	shl    edx,0x2
c0009e98:	01 d0                	add    eax,edx
c0009e9a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009ea0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ea4:	eb da                	jmp    c0009e80 <VAS::VAS(bool)+0x7a>
c0009ea6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009eae:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009eb6:	7f 7a                	jg     c0009f32 <VAS::VAS(bool)+0x12c>
c0009eb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ebc:	2d 00 02 00 00       	sub    eax,0x200
c0009ec1:	c1 e0 0c             	shl    eax,0xc
c0009ec4:	83 c8 05             	or     eax,0x5
c0009ec7:	89 c2                	mov    edx,eax
c0009ec9:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ece:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ed4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eda:	83 e0 10             	and    eax,0x10
c0009edd:	84 c0                	test   al,al
c0009edf:	74 07                	je     c0009ee8 <VAS::VAS(bool)+0xe2>
c0009ee1:	b8 00 01 00 00       	mov    eax,0x100
c0009ee6:	eb 05                	jmp    c0009eed <VAS::VAS(bool)+0xe7>
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	09 d0                	or     eax,edx
c0009eef:	89 c1                	mov    ecx,eax
c0009ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009efc:	c1 e2 02             	shl    edx,0x2
c0009eff:	01 d0                	add    eax,edx
c0009f01:	89 ca                	mov    edx,ecx
c0009f03:	89 10                	mov    DWORD PTR [eax],edx
c0009f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f09:	2d 40 03 00 00       	sub    eax,0x340
c0009f0e:	83 f8 7f             	cmp    eax,0x7f
c0009f11:	77 16                	ja     c0009f29 <VAS::VAS(bool)+0x123>
c0009f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f1e:	c1 e2 02             	shl    edx,0x2
c0009f21:	01 d0                	add    eax,edx
c0009f23:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f29:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f2d:	e9 7c ff ff ff       	jmp    c0009eae <VAS::VAS(bool)+0xa8>
c0009f32:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f3d:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f43:	83 e0 10             	and    eax,0x10
c0009f46:	84 c0                	test   al,al
c0009f48:	74 07                	je     c0009f51 <VAS::VAS(bool)+0x14b>
c0009f4a:	b8 03 41 00 00       	mov    eax,0x4103
c0009f4f:	eb 05                	jmp    c0009f56 <VAS::VAS(bool)+0x150>
c0009f51:	b8 03 40 00 00       	mov    eax,0x4003
c0009f56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f5a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f5d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f63:	89 02                	mov    DWORD PTR [edx],eax
c0009f65:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f70:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f76:	83 ec 08             	sub    esp,0x8
c0009f79:	50                   	push   eax
c0009f7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f7e:	e8 b1 fc ff ff       	call   c0009c34 <VAS::setCPUSpecific(unsigned long)>
c0009f83:	83 c4 10             	add    esp,0x10
c0009f86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f8d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f98:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f9e:	83 e0 10             	and    eax,0x10
c0009fa1:	84 c0                	test   al,al
c0009fa3:	74 07                	je     c0009fac <VAS::VAS(bool)+0x1a6>
c0009fa5:	b8 00 01 00 00       	mov    eax,0x100
c0009faa:	eb 05                	jmp    c0009fb1 <VAS::VAS(bool)+0x1ab>
c0009fac:	b8 00 00 00 00       	mov    eax,0x0
c0009fb1:	09 c2                	or     edx,eax
c0009fb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fba:	05 fc 0f 00 00       	add    eax,0xffc
c0009fbf:	83 ca 03             	or     edx,0x3
c0009fc2:	89 10                	mov    DWORD PTR [eax],edx
c0009fc4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009fc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fcf:	83 ec 0c             	sub    esp,0xc
c0009fd2:	50                   	push   eax
c0009fd3:	e8 4c 1c 00 00       	call   c000bc24 <Device::getName()>
c0009fd8:	83 c4 10             	add    esp,0x10
c0009fdb:	83 ec 08             	sub    esp,0x8
c0009fde:	68 d7 e1 01 c0       	push   0xc001e1d7
c0009fe3:	50                   	push   eax
c0009fe4:	e8 f7 66 ff ff       	call   c00006e0 <strcmp>
c0009fe9:	83 c4 10             	add    esp,0x10
c0009fec:	85 c0                	test   eax,eax
c0009fee:	0f 94 c0             	sete   al
c0009ff1:	84 c0                	test   al,al
c0009ff3:	0f 84 87 00 00 00    	je     c000a080 <VAS::VAS(bool)+0x27a>
c0009ff9:	fa                   	cli    
c0009ffa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009fff:	40                   	inc    eax
c000a000:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a005:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a00a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a010:	05 7c 09 00 00       	add    eax,0x97c
c000a015:	83 ec 0c             	sub    esp,0xc
c000a018:	50                   	push   eax
c000a019:	e8 98 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a01e:	83 c4 10             	add    esp,0x10
c000a021:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a026:	89 c3                	mov    ebx,eax
c000a028:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a02d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a033:	05 7c 09 00 00       	add    eax,0x97c
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	50                   	push   eax
c000a03c:	e8 75 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	83 ec 08             	sub    esp,0x8
c000a047:	50                   	push   eax
c000a048:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a04c:	e8 19 f5 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	8b 00                	mov    eax,DWORD PTR [eax]
c000a056:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a05b:	6a 11                	push   0x11
c000a05d:	53                   	push   ebx
c000a05e:	50                   	push   eax
c000a05f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a063:	e8 f0 f8 ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a070:	48                   	dec    eax
c000a071:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a076:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a07b:	85 c0                	test   eax,eax
c000a07d:	75 01                	jne    c000a080 <VAS::VAS(bool)+0x27a>
c000a07f:	fb                   	sti    
c000a080:	90                   	nop
c000a081:	83 c4 28             	add    esp,0x28
c000a084:	5b                   	pop    ebx
c000a085:	c3                   	ret    

c000a086 <VAS::evict(unsigned long)>:
c000a086:	55                   	push   ebp
c000a087:	57                   	push   edi
c000a088:	56                   	push   esi
c000a089:	53                   	push   ebx
c000a08a:	83 ec 1c             	sub    esp,0x1c
c000a08d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a091:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a099:	e8 38 f3 ff ff       	call   c00093d6 <Virt::allocateSwapfilePage()>
c000a09e:	8b 0d cc fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fdcc
c000a0a4:	89 c7                	mov    edi,eax
c000a0a6:	85 c9                	test   ecx,ecx
c000a0a8:	7e 3e                	jle    c000a0e8 <VAS::evict(unsigned long)+0x62>
c000a0aa:	89 ee                	mov    esi,ebp
c000a0ac:	31 db                	xor    ebx,ebx
c000a0ae:	83 ec 0c             	sub    esp,0xc
c000a0b1:	57                   	push   edi
c000a0b2:	e8 0d f3 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a0b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0ba:	01 d8                	add    eax,ebx
c000a0bc:	6a 01                	push   0x1
c000a0be:	31 d2                	xor    edx,edx
c000a0c0:	43                   	inc    ebx
c000a0c1:	52                   	push   edx
c000a0c2:	81 c6 00 02 00 00    	add    esi,0x200
c000a0c8:	50                   	push   eax
c000a0c9:	0f be 05 d8 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fdd8
c000a0d0:	8b 14 85 1c 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdace4]
c000a0d7:	52                   	push   edx
c000a0d8:	e8 f7 2b 00 00       	call   c000ccd4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0dd:	83 c4 20             	add    esp,0x20
c000a0e0:	39 1d cc fd 01 c0    	cmp    DWORD PTR ds:0xc001fdcc,ebx
c000a0e6:	7f c6                	jg     c000a0ae <VAS::evict(unsigned long)+0x28>
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	c1 e7 0b             	shl    edi,0xb
c000a0ee:	55                   	push   ebp
c000a0ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0f3:	50                   	push   eax
c000a0f4:	e8 71 f4 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a0f9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0fb:	89 d1                	mov    ecx,edx
c000a0fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a103:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a109:	09 cf                	or     edi,ecx
c000a10b:	89 38                	mov    DWORD PTR [eax],edi
c000a10d:	89 14 24             	mov    DWORD PTR [esp],edx
c000a110:	ff 05 a8 2f 02 c0    	inc    DWORD PTR ds:0xc0022fa8
c000a116:	e8 18 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a11b:	0f 20 d8             	mov    eax,cr3
c000a11e:	0f 22 d8             	mov    cr3,eax
c000a121:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000a126:	c7 44 24 40 e5 e1 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e1e5
c000a12e:	8d 50 01             	lea    edx,[eax+0x1]
c000a131:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a135:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c000a13b:	83 c4 2c             	add    esp,0x2c
c000a13e:	5b                   	pop    ebx
c000a13f:	5e                   	pop    esi
c000a140:	5f                   	pop    edi
c000a141:	5d                   	pop    ebp
c000a142:	e9 0b 04 00 00       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000a147:	90                   	nop

c000a148 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	57                   	push   edi
c000a14a:	56                   	push   esi
c000a14b:	53                   	push   ebx
c000a14c:	83 ec 14             	sub    esp,0x14
c000a14f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a153:	53                   	push   ebx
c000a154:	68 f6 e1 01 c0       	push   0xc001e1f6
c000a159:	e8 f4 03 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a15e:	83 c4 10             	add    esp,0x10
c000a161:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a167:	74 21                	je     c000a18a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a169:	83 ec 08             	sub    esp,0x8
c000a16c:	53                   	push   ebx
c000a16d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a171:	57                   	push   edi
c000a172:	e8 f3 f3 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a177:	83 c4 10             	add    esp,0x10
c000a17a:	89 c6                	mov    esi,eax
c000a17c:	85 c0                	test   eax,eax
c000a17e:	74 0a                	je     c000a18a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a180:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a182:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a188:	74 0a                	je     c000a194 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a18a:	31 c0                	xor    eax,eax
c000a18c:	83 c4 0c             	add    esp,0xc
c000a18f:	5b                   	pop    ebx
c000a190:	5e                   	pop    esi
c000a191:	5f                   	pop    edi
c000a192:	5d                   	pop    ebp
c000a193:	c3                   	ret    
c000a194:	e8 fc d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a199:	c1 ed 0b             	shr    ebp,0xb
c000a19c:	8b 16                	mov    edx,DWORD PTR [esi]
c000a19e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a1a4:	09 c2                	or     edx,eax
c000a1a6:	81 ca 01 08 00 00    	or     edx,0x801
c000a1ac:	89 16                	mov    DWORD PTR [esi],edx
c000a1ae:	8b 35 cc fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fdcc
c000a1b4:	85 f6                	test   esi,esi
c000a1b6:	7e 3e                	jle    c000a1f6 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1b8:	89 df                	mov    edi,ebx
c000a1ba:	31 f6                	xor    esi,esi
c000a1bc:	83 ec 0c             	sub    esp,0xc
c000a1bf:	55                   	push   ebp
c000a1c0:	e8 ff f1 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a1c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1c8:	01 f0                	add    eax,esi
c000a1ca:	6a 01                	push   0x1
c000a1cc:	31 d2                	xor    edx,edx
c000a1ce:	46                   	inc    esi
c000a1cf:	52                   	push   edx
c000a1d0:	81 c7 00 02 00 00    	add    edi,0x200
c000a1d6:	50                   	push   eax
c000a1d7:	0f be 05 d8 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fdd8
c000a1de:	8b 0c 85 1c 53 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdace4]
c000a1e5:	51                   	push   ecx
c000a1e6:	e8 7d 2a 00 00       	call   c000cc68 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1eb:	83 c4 20             	add    esp,0x20
c000a1ee:	39 35 cc fd 01 c0    	cmp    DWORD PTR ds:0xc001fdcc,esi
c000a1f4:	7f c6                	jg     c000a1bc <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1f6:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000a1fb:	48                   	dec    eax
c000a1fc:	52                   	push   edx
c000a1fd:	a3 a8 2f 02 c0       	mov    ds:0xc0022fa8,eax
c000a202:	50                   	push   eax
c000a203:	53                   	push   ebx
c000a204:	68 09 e2 01 c0       	push   0xc001e209
c000a209:	e8 44 03 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a20e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a211:	e8 90 f1 ff ff       	call   c00093a6 <Virt::freeSwapfilePage(unsigned long)>
c000a216:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	48                   	dec    eax
c000a21f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a224:	85 c0                	test   eax,eax
c000a226:	75 01                	jne    c000a229 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a228:	fb                   	sti    
c000a229:	0f 20 d8             	mov    eax,cr3
c000a22c:	0f 22 d8             	mov    cr3,eax
c000a22f:	b0 01                	mov    al,0x1
c000a231:	e9 56 ff ff ff       	jmp    c000a18c <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a236 <VAS::scanForEviction()>:
c000a236:	57                   	push   edi
c000a237:	31 ff                	xor    edi,edi
c000a239:	56                   	push   esi
c000a23a:	53                   	push   ebx
c000a23b:	83 ec 10             	sub    esp,0x10
c000a23e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a242:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a245:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a24b:	75 0e                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a24d:	89 da                	mov    edx,ebx
c000a24f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a252:	c1 ea 16             	shr    edx,0x16
c000a255:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a259:	74 4e                	je     c000a2a9 <VAS::scanForEviction()+0x73>
c000a25b:	53                   	push   ebx
c000a25c:	56                   	push   esi
c000a25d:	e8 08 f3 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a262:	5a                   	pop    edx
c000a263:	8b 10                	mov    edx,DWORD PTR [eax]
c000a265:	59                   	pop    ecx
c000a266:	89 d1                	mov    ecx,edx
c000a268:	81 e1 01 08 00 00    	and    ecx,0x801
c000a26e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a274:	74 3e                	je     c000a2b4 <VAS::scanForEviction()+0x7e>
c000a276:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a27c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a282:	76 2b                	jbe    c000a2af <VAS::scanForEviction()+0x79>
c000a284:	47                   	inc    edi
c000a285:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a28c:	83 ff 03             	cmp    edi,0x3
c000a28f:	74 32                	je     c000a2c3 <VAS::scanForEviction()+0x8d>
c000a291:	31 db                	xor    ebx,ebx
c000a293:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a299:	75 c0                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a29b:	89 da                	mov    edx,ebx
c000a29d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2a0:	c1 ea 16             	shr    edx,0x16
c000a2a3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2a7:	75 b2                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a2a9:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2af:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2b2:	eb 91                	jmp    c000a245 <VAS::scanForEviction()+0xf>
c000a2b4:	f6 c2 20             	test   dl,0x20
c000a2b7:	74 13                	je     c000a2cc <VAS::scanForEviction()+0x96>
c000a2b9:	83 e2 df             	and    edx,0xffffffdf
c000a2bc:	89 10                	mov    DWORD PTR [eax],edx
c000a2be:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2c1:	eb b3                	jmp    c000a276 <VAS::scanForEviction()+0x40>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	31 c0                	xor    eax,eax
c000a2c8:	5b                   	pop    ebx
c000a2c9:	5e                   	pop    esi
c000a2ca:	5f                   	pop    edi
c000a2cb:	c3                   	ret    
c000a2cc:	83 ec 08             	sub    esp,0x8
c000a2cf:	89 d0                	mov    eax,edx
c000a2d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2da:	53                   	push   ebx
c000a2db:	68 1e e2 01 c0       	push   0xc001e21e
c000a2e0:	e8 6d 02 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a2e5:	58                   	pop    eax
c000a2e6:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2e9:	5a                   	pop    edx
c000a2ea:	51                   	push   ecx
c000a2eb:	56                   	push   esi
c000a2ec:	e8 95 fd ff ff       	call   c000a086 <VAS::evict(unsigned long)>
c000a2f1:	5b                   	pop    ebx
c000a2f2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2f5:	5f                   	pop    edi
c000a2f6:	50                   	push   eax
c000a2f7:	68 32 e2 01 c0       	push   0xc001e232
c000a2fc:	e8 51 02 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a301:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a30f:	83 c4 10             	add    esp,0x10
c000a312:	5b                   	pop    ebx
c000a313:	5e                   	pop    esi
c000a314:	5f                   	pop    edi
c000a315:	c3                   	ret    

c000a316 <mapVASFirstTime>:
c000a316:	55                   	push   ebp
c000a317:	57                   	push   edi
c000a318:	56                   	push   esi
c000a319:	53                   	push   ebx
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a322:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a325:	4a                   	dec    edx
c000a326:	0f 84 c8 00 00 00    	je     c000a3f4 <mapVASFirstTime+0xde>
c000a32c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a32f:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a332:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a337:	c1 e5 15             	shl    ebp,0x15
c000a33a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a33f:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a345:	29 eb                	sub    ebx,ebp
c000a347:	29 ef                	sub    edi,ebp
c000a349:	e8 47 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	68 03 04 00 00       	push   0x403
c000a356:	6a 01                	push   0x1
c000a358:	53                   	push   ebx
c000a359:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35f:	50                   	push   eax
c000a360:	56                   	push   esi
c000a361:	e8 ec f8 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a366:	83 c4 20             	add    esp,0x20
c000a369:	39 fb                	cmp    ebx,edi
c000a36b:	75 dc                	jne    c000a349 <mapVASFirstTime+0x33>
c000a36d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a372:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a377:	29 eb                	sub    ebx,ebp
c000a379:	29 ef                	sub    edi,ebp
c000a37b:	e8 15 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a380:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a384:	19 d2                	sbb    edx,edx
c000a386:	83 ec 0c             	sub    esp,0xc
c000a389:	83 e2 04             	and    edx,0x4
c000a38c:	81 c2 03 04 00 00    	add    edx,0x403
c000a392:	52                   	push   edx
c000a393:	6a 01                	push   0x1
c000a395:	53                   	push   ebx
c000a396:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a39c:	50                   	push   eax
c000a39d:	56                   	push   esi
c000a39e:	e8 af f8 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3a3:	83 c4 20             	add    esp,0x20
c000a3a6:	39 df                	cmp    edi,ebx
c000a3a8:	75 d1                	jne    c000a37b <mapVASFirstTime+0x65>
c000a3aa:	83 ec 0c             	sub    esp,0xc
c000a3ad:	bb 7c 20 02 c0       	mov    ebx,0xc002207c
c000a3b2:	6a 04                	push   0x4
c000a3b4:	81 eb 00 10 02 c0    	sub    ebx,0xc0021000
c000a3ba:	6a ff                	push   0xffffffff
c000a3bc:	c1 eb 0c             	shr    ebx,0xc
c000a3bf:	53                   	push   ebx
c000a3c0:	68 00 10 02 c0       	push   0xc0021000
c000a3c5:	56                   	push   esi
c000a3c6:	e8 21 f3 ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c000a3cb:	83 c4 14             	add    esp,0x14
c000a3ce:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000a3d3:	6a 04                	push   0x4
c000a3d5:	6a ff                	push   0xffffffff
c000a3d7:	53                   	push   ebx
c000a3d8:	68 00 10 02 c0       	push   0xc0021000
c000a3dd:	50                   	push   eax
c000a3de:	e8 09 f3 ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c000a3e3:	0f 20 d8             	mov    eax,cr3
c000a3e6:	0f 22 d8             	mov    cr3,eax
c000a3e9:	83 c4 20             	add    esp,0x20
c000a3ec:	83 c4 0c             	add    esp,0xc
c000a3ef:	5b                   	pop    ebx
c000a3f0:	5e                   	pop    esi
c000a3f1:	5f                   	pop    edi
c000a3f2:	5d                   	pop    ebp
c000a3f3:	c3                   	ret    
c000a3f4:	83 ec 0c             	sub    esp,0xc
c000a3f7:	68 45 e2 01 c0       	push   0xc001e245
c000a3fc:	e8 51 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 c4 0c             	add    esp,0xc
c000a407:	5b                   	pop    ebx
c000a408:	5e                   	pop    esi
c000a409:	5f                   	pop    edi
c000a40a:	5d                   	pop    ebp
c000a40b:	c3                   	ret    

c000a40c <__cxa_atexit>:
c000a40c:	31 c0                	xor    eax,eax
c000a40e:	c3                   	ret    

c000a40f <__cxa_finalize>:
c000a40f:	c3                   	ret    

c000a410 <__stack_chk_fail>:
c000a410:	55                   	push   ebp
c000a411:	89 e5                	mov    ebp,esp
c000a413:	83 ec 10             	sub    esp,0x10
c000a416:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a419:	68 5e e2 01 c0       	push   0xc001e25e
c000a41e:	e8 2f 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a423:	58                   	pop    eax
c000a424:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a427:	5a                   	pop    edx
c000a428:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a42b:	68 5e e2 01 c0       	push   0xc001e25e
c000a430:	e8 1d 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a435:	c7 04 24 66 e2 01 c0 	mov    DWORD PTR [esp],0xc001e266
c000a43c:	e8 2e 5e 00 00       	call   c001026f <KePanic(char const*)>
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	c9                   	leave  
c000a445:	c3                   	ret    

c000a446 <__cxa_pure_virtual>:
c000a446:	83 ec 18             	sub    esp,0x18
c000a449:	68 7e e2 01 c0       	push   0xc001e27e
c000a44e:	e8 1c 5e 00 00       	call   c001026f <KePanic(char const*)>
c000a453:	83 c4 1c             	add    esp,0x1c
c000a456:	c3                   	ret    

c000a457 <operator new[](unsigned long)>:
c000a457:	e9 5d d3 ff ff       	jmp    c00077b9 <malloc>

c000a45c <operator delete(void*, unsigned long)>:
c000a45c:	e9 78 d3 ff ff       	jmp    c00077d9 <rfree>

c000a461 <operator delete[](void*)>:
c000a461:	e9 73 d3 ff ff       	jmp    c00077d9 <rfree>

c000a466 <operator delete[](void*, unsigned long)>:
c000a466:	e9 6e d3 ff ff       	jmp    c00077d9 <rfree>

c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a46b:	55                   	push   ebp
c000a46c:	b9 04 00 00 00       	mov    ecx,0x4
c000a471:	57                   	push   edi
c000a472:	56                   	push   esi
c000a473:	be d3 de 01 c0       	mov    esi,0xc001ded3
c000a478:	53                   	push   ebx
c000a479:	83 ec 20             	sub    esp,0x20
c000a47c:	a1 d2 de 01 c0       	mov    eax,ds:0xc001ded2
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a489:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a48d:	a1 df de 01 c0       	mov    eax,ds:0xc001dedf
c000a492:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a49a:	fc                   	cld    
c000a49b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a49d:	89 ee                	mov    esi,ebp
c000a49f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a4a3:	eb 02                	jmp    c000a4a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a4a5:	89 c6                	mov    esi,eax
c000a4a7:	31 d2                	xor    edx,edx
c000a4a9:	41                   	inc    ecx
c000a4aa:	89 f0                	mov    eax,esi
c000a4ac:	f7 f3                	div    ebx
c000a4ae:	39 de                	cmp    esi,ebx
c000a4b0:	73 f3                	jae    c000a4a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4b2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4b5:	eb 02                	jmp    c000a4b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4b7:	89 c5                	mov    ebp,eax
c000a4b9:	31 d2                	xor    edx,edx
c000a4bb:	49                   	dec    ecx
c000a4bc:	89 e8                	mov    eax,ebp
c000a4be:	f7 f3                	div    ebx
c000a4c0:	39 dd                	cmp    ebp,ebx
c000a4c2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4c6:	88 11                	mov    BYTE PTR [ecx],dl
c000a4c8:	73 ed                	jae    c000a4b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	5b                   	pop    ebx
c000a4d2:	5e                   	pop    esi
c000a4d3:	5f                   	pop    edi
c000a4d4:	5d                   	pop    ebp
c000a4d5:	c3                   	ret    

c000a4d6 <Dbg::logc(char)>:
c000a4d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4da:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a4e1:	75 12                	jne    c000a4f5 <Dbg::logc(char)+0x1f>
c000a4e3:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4e8:	ec                   	in     al,dx
c000a4e9:	a8 20                	test   al,0x20
c000a4eb:	74 fb                	je     c000a4e8 <Dbg::logc(char)+0x12>
c000a4ed:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4f2:	88 c8                	mov    al,cl
c000a4f4:	ee                   	out    dx,al
c000a4f5:	c3                   	ret    

c000a4f6 <Dbg::logs(char*)>:
c000a4f6:	53                   	push   ebx
c000a4f7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4fe:	84 c0                	test   al,al
c000a500:	74 0f                	je     c000a511 <Dbg::logs(char*)+0x1b>
c000a502:	50                   	push   eax
c000a503:	43                   	inc    ebx
c000a504:	e8 cd ff ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a509:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a50c:	5a                   	pop    edx
c000a50d:	84 c0                	test   al,al
c000a50f:	75 f1                	jne    c000a502 <Dbg::logs(char*)+0xc>
c000a511:	5b                   	pop    ebx
c000a512:	c3                   	ret    

c000a513 <Dbg::logWriteInt(unsigned int)>:
c000a513:	83 ec 10             	sub    esp,0x10
c000a516:	6a 0a                	push   0xa
c000a518:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a51c:	50                   	push   eax
c000a51d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a521:	50                   	push   eax
c000a522:	e8 44 ff ff ff       	call   c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a527:	50                   	push   eax
c000a528:	e8 c9 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a52d:	83 c4 20             	add    esp,0x20
c000a530:	c3                   	ret    

c000a531 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a531:	83 ec 10             	sub    esp,0x10
c000a534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a538:	50                   	push   eax
c000a539:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a53d:	50                   	push   eax
c000a53e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a542:	52                   	push   edx
c000a543:	e8 23 ff ff ff       	call   c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a548:	50                   	push   eax
c000a549:	e8 a8 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a54e:	83 c4 20             	add    esp,0x20
c000a551:	c3                   	ret    

c000a552 <Dbg::kprintf(char const*, ...)>:
c000a552:	55                   	push   ebp
c000a553:	57                   	push   edi
c000a554:	56                   	push   esi
c000a555:	53                   	push   ebx
c000a556:	83 ec 0c             	sub    esp,0xc
c000a559:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a55d:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a564:	74 08                	je     c000a56e <Dbg::kprintf(char const*, ...)+0x1c>
c000a566:	83 c4 0c             	add    esp,0xc
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	5f                   	pop    edi
c000a56c:	5d                   	pop    ebp
c000a56d:	c3                   	ret    
c000a56e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a572:	31 ff                	xor    edi,edi
c000a574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a578:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a57b:	84 c0                	test   al,al
c000a57d:	74 e7                	je     c000a566 <Dbg::kprintf(char const*, ...)+0x14>
c000a57f:	8d 77 01             	lea    esi,[edi+0x1]
c000a582:	3c 25                	cmp    al,0x25
c000a584:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a587:	75 47                	jne    c000a5d0 <Dbg::kprintf(char const*, ...)+0x7e>
c000a589:	83 c7 02             	add    edi,0x2
c000a58c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a58f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a592:	83 e8 25             	sub    eax,0x25
c000a595:	3c 53                	cmp    al,0x53
c000a597:	0f 87 d2 00 00 00    	ja     c000a66f <Dbg::kprintf(char const*, ...)+0x11d>
c000a59d:	25 ff 00 00 00       	and    eax,0xff
c000a5a2:	ff 24 85 94 e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d6c]
c000a5a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5ad:	89 c8                	mov    eax,ecx
c000a5af:	83 c1 04             	add    ecx,0x4
c000a5b2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b6:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5b8:	55                   	push   ebp
c000a5b9:	e8 55 ff ff ff       	call   c000a513 <Dbg::logWriteInt(unsigned int)>
c000a5be:	58                   	pop    eax
c000a5bf:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5c2:	84 c0                	test   al,al
c000a5c4:	74 a0                	je     c000a566 <Dbg::kprintf(char const*, ...)+0x14>
c000a5c6:	8d 77 01             	lea    esi,[edi+0x1]
c000a5c9:	3c 25                	cmp    al,0x25
c000a5cb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5ce:	74 b9                	je     c000a589 <Dbg::kprintf(char const*, ...)+0x37>
c000a5d0:	50                   	push   eax
c000a5d1:	89 f7                	mov    edi,esi
c000a5d3:	e8 fe fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a5d8:	89 ee                	mov    esi,ebp
c000a5da:	58                   	pop    eax
c000a5db:	eb e2                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a5dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5e1:	89 c8                	mov    eax,ecx
c000a5e3:	83 c1 04             	add    ecx,0x4
c000a5e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5ec:	50                   	push   eax
c000a5ed:	e8 04 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a5f2:	58                   	pop    eax
c000a5f3:	eb ca                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5f9:	89 d0                	mov    eax,edx
c000a5fb:	83 c2 04             	add    edx,0x4
c000a5fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a602:	8b 00                	mov    eax,DWORD PTR [eax]
c000a604:	50                   	push   eax
c000a605:	e8 09 ff ff ff       	call   c000a513 <Dbg::logWriteInt(unsigned int)>
c000a60a:	58                   	pop    eax
c000a60b:	eb b2                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a611:	89 d0                	mov    eax,edx
c000a613:	83 c2 04             	add    edx,0x4
c000a616:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a619:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a61d:	50                   	push   eax
c000a61e:	e8 b3 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a623:	58                   	pop    eax
c000a624:	eb 99                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a626:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a62a:	89 c8                	mov    eax,ecx
c000a62c:	83 c1 04             	add    ecx,0x4
c000a62f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a633:	6a 10                	push   0x10
c000a635:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a637:	51                   	push   ecx
c000a638:	e8 f4 fe ff ff       	call   c000a531 <Dbg::logWriteIntBase(unsigned int, int)>
c000a63d:	5d                   	pop    ebp
c000a63e:	58                   	pop    eax
c000a63f:	e9 7b ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a644:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a648:	89 d0                	mov    eax,edx
c000a64a:	83 c2 08             	add    edx,0x8
c000a64d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a651:	6a 10                	push   0x10
c000a653:	8b 00                	mov    eax,DWORD PTR [eax]
c000a655:	50                   	push   eax
c000a656:	e8 d6 fe ff ff       	call   c000a531 <Dbg::logWriteIntBase(unsigned int, int)>
c000a65b:	58                   	pop    eax
c000a65c:	5a                   	pop    edx
c000a65d:	e9 5d ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a662:	6a 25                	push   0x25
c000a664:	e8 6d fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a669:	5a                   	pop    edx
c000a66a:	e9 50 ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a66f:	6a 25                	push   0x25
c000a671:	e8 60 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a676:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a67a:	50                   	push   eax
c000a67b:	e8 56 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a680:	5a                   	pop    edx
c000a681:	59                   	pop    ecx
c000a682:	e9 38 ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a687:	90                   	nop

c000a688 <File::read(unsigned long long, void*, int*)>:
c000a688:	53                   	push   ebx
c000a689:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a68d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a691:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a698:	3c 19                	cmp    al,0x19
c000a69a:	77 35                	ja     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a69c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a6a3:	85 c0                	test   eax,eax
c000a6a5:	74 2a                	je     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a6a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6ad:	85 c0                	test   eax,eax
c000a6af:	74 20                	je     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a6b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6b5:	74 21                	je     c000a6d8 <File::read(unsigned long long, void*, int*)+0x50>
c000a6b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6cb:	5b                   	pop    ebx
c000a6cc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6cf:	ff e0                	jmp    eax
c000a6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d6:	eb 05                	jmp    c000a6dd <File::read(unsigned long long, void*, int*)+0x55>
c000a6d8:	b8 05 00 00 00       	mov    eax,0x5
c000a6dd:	5b                   	pop    ebx
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <File::write(unsigned long long, void*, int*)>:
c000a6e0:	53                   	push   ebx
c000a6e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6f0:	3c 19                	cmp    al,0x19
c000a6f2:	77 35                	ja     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a6f4:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a6fb:	85 c0                	test   eax,eax
c000a6fd:	74 2a                	je     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a6ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a705:	85 c0                	test   eax,eax
c000a707:	74 20                	je     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a709:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a70d:	74 21                	je     c000a730 <File::write(unsigned long long, void*, int*)+0x50>
c000a70f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a711:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a715:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a71b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a71f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a723:	5b                   	pop    ebx
c000a724:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a727:	ff e0                	jmp    eax
c000a729:	b8 0b 00 00 00       	mov    eax,0xb
c000a72e:	eb 05                	jmp    c000a735 <File::write(unsigned long long, void*, int*)+0x55>
c000a730:	b8 05 00 00 00       	mov    eax,0x5
c000a735:	5b                   	pop    ebx
c000a736:	c3                   	ret    
c000a737:	90                   	nop

c000a738 <Directory::read(unsigned long long, void*, int*)>:
c000a738:	53                   	push   ebx
c000a739:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a73d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a741:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a748:	3c 19                	cmp    al,0x19
c000a74a:	77 35                	ja     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a74c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a753:	85 c0                	test   eax,eax
c000a755:	74 2a                	je     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a757:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a75d:	85 c0                	test   eax,eax
c000a75f:	74 20                	je     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a761:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a765:	74 21                	je     c000a788 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a767:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a769:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a76d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a773:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a777:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a77b:	5b                   	pop    ebx
c000a77c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a77f:	ff e0                	jmp    eax
c000a781:	b8 0b 00 00 00       	mov    eax,0xb
c000a786:	eb 05                	jmp    c000a78d <Directory::read(unsigned long long, void*, int*)+0x55>
c000a788:	b8 05 00 00 00       	mov    eax,0x5
c000a78d:	5b                   	pop    ebx
c000a78e:	c3                   	ret    
c000a78f:	90                   	nop

c000a790 <Directory::write(unsigned long long, void*, int*)>:
c000a790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a794:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a79b:	b8 0b 00 00 00       	mov    eax,0xb
c000a7a0:	80 fa 19             	cmp    dl,0x19
c000a7a3:	77 18                	ja     c000a7bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7a5:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000a7ac:	85 d2                	test   edx,edx
c000a7ae:	74 0d                	je     c000a7bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7b0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7b7:	19 c0                	sbb    eax,eax
c000a7b9:	83 e0 0a             	and    eax,0xa
c000a7bc:	40                   	inc    eax
c000a7bd:	c3                   	ret    

c000a7be <File::isAtty()>:
c000a7be:	31 c0                	xor    eax,eax
c000a7c0:	c3                   	ret    
c000a7c1:	90                   	nop

c000a7c2 <Directory::isAtty()>:
c000a7c2:	31 c0                	xor    eax,eax
c000a7c4:	c3                   	ret    
c000a7c5:	90                   	nop

c000a7c6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7c6:	b8 0a 00 00 00       	mov    eax,0xa
c000a7cb:	c3                   	ret    

c000a7cc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7cc:	b8 0a 00 00 00       	mov    eax,0xa
c000a7d1:	c3                   	ret    

c000a7d2 <Filesystem::allocateSwapfile(char const*, int)>:
c000a7d2:	31 c0                	xor    eax,eax
c000a7d4:	31 d2                	xor    edx,edx
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <File::~File()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	ba 54 e4 01 c0       	mov    edx,0xc001e454
c000a7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7e4:	89 10                	mov    DWORD PTR [eax],edx
c000a7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ea:	83 ec 0c             	sub    esp,0xc
c000a7ed:	50                   	push   eax
c000a7ee:	e8 41 e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	90                   	nop
c000a7f7:	83 c4 0c             	add    esp,0xc
c000a7fa:	c3                   	ret    
c000a7fb:	90                   	nop

c000a7fc <File::~File()>:
c000a7fc:	83 ec 0c             	sub    esp,0xc
c000a7ff:	83 ec 0c             	sub    esp,0xc
c000a802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a806:	e8 cd ff ff ff       	call   c000a7d8 <File::~File()>
c000a80b:	83 c4 10             	add    esp,0x10
c000a80e:	83 ec 08             	sub    esp,0x8
c000a811:	68 14 01 00 00       	push   0x114
c000a816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a81a:	e8 3d fc ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a81f:	83 c4 10             	add    esp,0x10
c000a822:	83 c4 0c             	add    esp,0xc
c000a825:	c3                   	ret    

c000a826 <Directory::~Directory()>:
c000a826:	83 ec 0c             	sub    esp,0xc
c000a829:	ba 70 e4 01 c0       	mov    edx,0xc001e470
c000a82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a832:	89 10                	mov    DWORD PTR [eax],edx
c000a834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a838:	83 ec 0c             	sub    esp,0xc
c000a83b:	50                   	push   eax
c000a83c:	e8 f3 e7 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	90                   	nop
c000a845:	83 c4 0c             	add    esp,0xc
c000a848:	c3                   	ret    
c000a849:	90                   	nop

c000a84a <Directory::~Directory()>:
c000a84a:	83 ec 0c             	sub    esp,0xc
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a854:	e8 cd ff ff ff       	call   c000a826 <Directory::~Directory()>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 ec 08             	sub    esp,0x8
c000a85f:	68 14 01 00 00       	push   0x114
c000a864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a868:	e8 ef fb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a86d:	83 c4 10             	add    esp,0x10
c000a870:	83 c4 0c             	add    esp,0xc
c000a873:	c3                   	ret    

c000a874 <Filesystem::Filesystem()>:
c000a874:	ba ec e3 01 c0       	mov    edx,0xc001e3ec
c000a879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a87d:	89 10                	mov    DWORD PTR [eax],edx
c000a87f:	8b 15 b4 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fb4
c000a885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a889:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a890:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000a895:	90                   	nop
c000a896:	c3                   	ret    
c000a897:	90                   	nop

c000a898 <Filesystem::~Filesystem()>:
c000a898:	ba ec e3 01 c0       	mov    edx,0xc001e3ec
c000a89d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8a1:	89 10                	mov    DWORD PTR [eax],edx
c000a8a3:	90                   	nop
c000a8a4:	c3                   	ret    
c000a8a5:	90                   	nop

c000a8a6 <Filesystem::~Filesystem()>:
c000a8a6:	83 ec 0c             	sub    esp,0xc
c000a8a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8ad:	e8 e6 ff ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c000a8b2:	83 c4 04             	add    esp,0x4
c000a8b5:	83 ec 08             	sub    esp,0x8
c000a8b8:	6a 08                	push   0x8
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 99 fb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a8c3:	83 c4 10             	add    esp,0x10
c000a8c6:	83 c4 0c             	add    esp,0xc
c000a8c9:	c3                   	ret    

c000a8ca <Fs::getcwd(Process*, char*, int)>:
c000a8ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8ce:	31 c0                	xor    eax,eax
c000a8d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a8d7:	7d 15                	jge    c000a8ee <Fs::getcwd(Process*, char*, int)+0x24>
c000a8d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8e7:	84 c9                	test   cl,cl
c000a8e9:	74 06                	je     c000a8f1 <Fs::getcwd(Process*, char*, int)+0x27>
c000a8eb:	40                   	inc    eax
c000a8ec:	eb e2                	jmp    c000a8d0 <Fs::getcwd(Process*, char*, int)+0x6>
c000a8ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8f1:	31 c0                	xor    eax,eax
c000a8f3:	c3                   	ret    

c000a8f4 <Fs::initVFS()>:
c000a8f4:	83 ec 18             	sub    esp,0x18
c000a8f7:	6a 08                	push   0x8
c000a8f9:	e8 bb ce ff ff       	call   c00077b9 <malloc>
c000a8fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000a901:	e8 aa c7 00 00       	call   c00170b0 <FAT::FAT()>
c000a906:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a90d:	e8 a7 ce ff ff       	call   c00077b9 <malloc>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	e8 f2 d4 00 00       	call   c0017e0c <ISO9660::ISO9660()>
c000a91a:	83 c4 1c             	add    esp,0x1c
c000a91d:	c3                   	ret    

c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a91e:	55                   	push   ebp
c000a91f:	57                   	push   edi
c000a920:	56                   	push   esi
c000a921:	53                   	push   ebx
c000a922:	81 ec 10 04 00 00    	sub    esp,0x410
c000a928:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a92f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a936:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a93d:	68 00 04 00 00       	push   0x400
c000a942:	6a 00                	push   0x0
c000a944:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a948:	56                   	push   esi
c000a949:	e8 82 5b ff ff       	call   c00004d0 <memset>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a955:	75 0b                	jne    c000a962 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a957:	50                   	push   eax
c000a958:	50                   	push   eax
c000a959:	57                   	push   edi
c000a95a:	56                   	push   esi
c000a95b:	e8 a0 5c ff ff       	call   c0000600 <strcpy>
c000a960:	eb 41                	jmp    c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a962:	8a 07                	mov    al,BYTE PTR [edi]
c000a964:	3c 5c                	cmp    al,0x5c
c000a966:	74 04                	je     c000a96c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a968:	3c 2f                	cmp    al,0x2f
c000a96a:	75 18                	jne    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a96c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a96f:	3c 60                	cmp    al,0x60
c000a971:	7e 03                	jle    c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a973:	83 e8 20             	sub    eax,0x20
c000a976:	88 04 24             	mov    BYTE PTR [esp],al
c000a979:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a980:	50                   	push   eax
c000a981:	50                   	push   eax
c000a982:	eb 18                	jmp    c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a984:	50                   	push   eax
c000a985:	50                   	push   eax
c000a986:	55                   	push   ebp
c000a987:	56                   	push   esi
c000a988:	e8 73 5c ff ff       	call   c0000600 <strcpy>
c000a98d:	5a                   	pop    edx
c000a98e:	59                   	pop    ecx
c000a98f:	68 89 f1 01 c0       	push   0xc001f189
c000a994:	56                   	push   esi
c000a995:	e8 26 5e ff ff       	call   c00007c0 <strcat>
c000a99a:	5d                   	pop    ebp
c000a99b:	58                   	pop    eax
c000a99c:	57                   	push   edi
c000a99d:	56                   	push   esi
c000a99e:	e8 1d 5e ff ff       	call   c00007c0 <strcat>
c000a9a3:	83 c4 10             	add    esp,0x10
c000a9a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9a9:	3c 60                	cmp    al,0x60
c000a9ab:	7e 03                	jle    c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9ad:	83 e8 20             	sub    eax,0x20
c000a9b0:	88 04 24             	mov    BYTE PTR [esp],al
c000a9b3:	88 03                	mov    BYTE PTR [ebx],al
c000a9b5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9bc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9c2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9c6:	bf 03 00 00 00       	mov    edi,0x3
c000a9cb:	b8 03 00 00 00       	mov    eax,0x3
c000a9d0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9d3:	84 d2                	test   dl,dl
c000a9d5:	0f 84 91 00 00 00    	je     c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a9db:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a9de:	80 fa 5c             	cmp    dl,0x5c
c000a9e1:	74 05                	je     c000a9e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a9e3:	80 fa 2f             	cmp    dl,0x2f
c000a9e6:	75 12                	jne    c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9e8:	89 c5                	mov    ebp,eax
c000a9ea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9ef:	74 09                	je     c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9f1:	40                   	inc    eax
c000a9f2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9f6:	89 cf                	mov    edi,ecx
c000a9f8:	eb d6                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9fa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9ff:	75 5b                	jne    c000aa5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa01:	80 fa 2e             	cmp    dl,0x2e
c000aa04:	75 56                	jne    c000aa5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa06:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa0a:	74 19                	je     c000aa25 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa0c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa11:	74 53                	je     c000aa66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa13:	89 f9                	mov    ecx,edi
c000aa15:	41                   	inc    ecx
c000aa16:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa19:	80 fa 2f             	cmp    dl,0x2f
c000aa1c:	74 f7                	je     c000aa15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa1e:	80 fa 5c             	cmp    dl,0x5c
c000aa21:	74 f2                	je     c000aa15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa23:	eb d1                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa25:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa2a:	74 3a                	je     c000aa66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa2c:	83 f8 03             	cmp    eax,0x3
c000aa2f:	74 c5                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa31:	41                   	inc    ecx
c000aa32:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa35:	80 fa 2f             	cmp    dl,0x2f
c000aa38:	74 f7                	je     c000aa31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa3a:	80 fa 5c             	cmp    dl,0x5c
c000aa3d:	74 f2                	je     c000aa31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa3f:	48                   	dec    eax
c000aa40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa44:	75 06                	jne    c000aa4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa4a:	eb f3                	jmp    c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa4c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa50:	74 07                	je     c000aa59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa52:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa56:	48                   	dec    eax
c000aa57:	eb f3                	jmp    c000aa4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa59:	40                   	inc    eax
c000aa5a:	eb 9a                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa5c:	80 fa 2f             	cmp    dl,0x2f
c000aa5f:	74 95                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa61:	80 fa 5c             	cmp    dl,0x5c
c000aa64:	74 90                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa66:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa69:	40                   	inc    eax
c000aa6a:	eb 8a                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa70:	83 ec 0c             	sub    esp,0xc
c000aa73:	53                   	push   ebx
c000aa74:	e8 c7 5a ff ff       	call   c0000540 <strlen>
c000aa79:	83 c4 10             	add    esp,0x10
c000aa7c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa81:	75 26                	jne    c000aaa9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa83:	83 ec 0c             	sub    esp,0xc
c000aa86:	53                   	push   ebx
c000aa87:	e8 b4 5a ff ff       	call   c0000540 <strlen>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa94:	74 26                	je     c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa96:	83 ec 0c             	sub    esp,0xc
c000aa99:	53                   	push   ebx
c000aa9a:	e8 a1 5a ff ff       	call   c0000540 <strlen>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aaa7:	eb c7                	jmp    c000aa70 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aaa9:	83 ec 0c             	sub    esp,0xc
c000aaac:	53                   	push   ebx
c000aaad:	e8 8e 5a ff ff       	call   c0000540 <strlen>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaba:	74 c7                	je     c000aa83 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aabc:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aac2:	5b                   	pop    ebx
c000aac3:	5e                   	pop    esi
c000aac4:	5f                   	pop    edi
c000aac5:	5d                   	pop    ebp
c000aac6:	c3                   	ret    
c000aac7:	90                   	nop

c000aac8 <File::File(char const*, Process*)>:
c000aac8:	83 ec 0c             	sub    esp,0xc
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	83 ec 08             	sub    esp,0x8
c000aad2:	6a 00                	push   0x0
c000aad4:	50                   	push   eax
c000aad5:	e8 78 e3 ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	ba 54 e4 01 c0       	mov    edx,0xc001e454
c000aae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae6:	89 10                	mov    DWORD PTR [eax],edx
c000aae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aaec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf6:	83 c0 0d             	add    eax,0xd
c000aaf9:	83 ec 04             	sub    esp,0x4
c000aafc:	52                   	push   edx
c000aafd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab01:	50                   	push   eax
c000ab02:	e8 17 fe ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab11:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab18:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab22:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab30:	25 ff 00 00 00       	and    eax,0xff
c000ab35:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab3c:	85 c0                	test   eax,eax
c000ab3e:	74 42                	je     c000ab82 <File::File(char const*, Process*)+0xba>
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab4a:	25 ff 00 00 00       	and    eax,0xff
c000ab4f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab56:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab5c:	85 c0                	test   eax,eax
c000ab5e:	75 22                	jne    c000ab82 <File::File(char const*, Process*)+0xba>
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab6a:	25 ff 00 00 00       	and    eax,0xff
c000ab6f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab76:	83 ec 0c             	sub    esp,0xc
c000ab79:	50                   	push   eax
c000ab7a:	e8 27 20 00 00       	call   c000cba6 <LogicalDisk::mount()>
c000ab7f:	83 c4 10             	add    esp,0x10
c000ab82:	90                   	nop
c000ab83:	83 c4 0c             	add    esp,0xc
c000ab86:	c3                   	ret    
c000ab87:	90                   	nop

c000ab88 <File::open(FileOpenMode)>:
c000ab88:	53                   	push   ebx
c000ab89:	b8 0b 00 00 00       	mov    eax,0xb
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab9c:	80 fa 19             	cmp    dl,0x19
c000ab9f:	77 40                	ja     c000abe1 <File::open(FileOpenMode)+0x59>
c000aba1:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000aba8:	85 d2                	test   edx,edx
c000abaa:	74 35                	je     c000abe1 <File::open(FileOpenMode)+0x59>
c000abac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abb2:	85 d2                	test   edx,edx
c000abb4:	74 2b                	je     c000abe1 <File::open(FileOpenMode)+0x59>
c000abb6:	b8 06 00 00 00       	mov    eax,0x6
c000abbb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abbf:	75 20                	jne    c000abe1 <File::open(FileOpenMode)+0x59>
c000abc1:	8b 02                	mov    eax,DWORD PTR [edx]
c000abc3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abcd:	51                   	push   ecx
c000abce:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abd1:	51                   	push   ecx
c000abd2:	52                   	push   edx
c000abd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	85 c0                	test   eax,eax
c000abdb:	75 04                	jne    c000abe1 <File::open(FileOpenMode)+0x59>
c000abdd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000abe1:	83 c4 08             	add    esp,0x8
c000abe4:	5b                   	pop    ebx
c000abe5:	c3                   	ret    

c000abe6 <File::close()>:
c000abe6:	53                   	push   ebx
c000abe7:	b8 0b 00 00 00       	mov    eax,0xb
c000abec:	83 ec 08             	sub    esp,0x8
c000abef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abf3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abfa:	80 fa 19             	cmp    dl,0x19
c000abfd:	77 41                	ja     c000ac40 <File::close()+0x5a>
c000abff:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac06:	85 db                	test   ebx,ebx
c000ac08:	74 36                	je     c000ac40 <File::close()+0x5a>
c000ac0a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac11:	74 2d                	je     c000ac40 <File::close()+0x5a>
c000ac13:	b8 05 00 00 00       	mov    eax,0x5
c000ac18:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac1c:	74 22                	je     c000ac40 <File::close()+0x5a>
c000ac1e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac22:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000ac29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac2f:	53                   	push   ebx
c000ac30:	53                   	push   ebx
c000ac31:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac33:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac39:	50                   	push   eax
c000ac3a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	83 c4 08             	add    esp,0x8
c000ac43:	5b                   	pop    ebx
c000ac44:	c3                   	ret    
c000ac45:	90                   	nop

c000ac46 <File::seek(unsigned long long)>:
c000ac46:	56                   	push   esi
c000ac47:	53                   	push   ebx
c000ac48:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4d:	51                   	push   ecx
c000ac4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac56:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac61:	80 fa 19             	cmp    dl,0x19
c000ac64:	77 31                	ja     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac66:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac6d:	85 d2                	test   edx,edx
c000ac6f:	74 26                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac71:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac77:	85 d2                	test   edx,edx
c000ac79:	74 1c                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac7b:	b8 05 00 00 00       	mov    eax,0x5
c000ac80:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac84:	74 11                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac86:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac88:	53                   	push   ebx
c000ac89:	51                   	push   ecx
c000ac8a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac90:	52                   	push   edx
c000ac91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac94:	83 c4 10             	add    esp,0x10
c000ac97:	5a                   	pop    edx
c000ac98:	5b                   	pop    ebx
c000ac99:	5e                   	pop    esi
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <File::tell(unsigned long long*)>:
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acaf:	80 fa 19             	cmp    dl,0x19
c000acb2:	77 34                	ja     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acb4:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000acbb:	85 d2                	test   edx,edx
c000acbd:	74 29                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acbf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acc5:	85 d2                	test   edx,edx
c000acc7:	74 1f                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acc9:	b8 05 00 00 00       	mov    eax,0x5
c000acce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd2:	74 14                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acd4:	50                   	push   eax
c000acd5:	8b 02                	mov    eax,DWORD PTR [edx]
c000acd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acdb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ace1:	52                   	push   edx
c000ace2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <File::rewind()>:
c000acec:	83 ec 10             	sub    esp,0x10
c000acef:	6a 00                	push   0x0
c000acf1:	6a 00                	push   0x0
c000acf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf7:	e8 4a ff ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c000acfc:	83 c4 1c             	add    esp,0x1c
c000acff:	c3                   	ret    

c000ad00 <File::unlink()>:
c000ad00:	83 ec 0c             	sub    esp,0xc
c000ad03:	b8 0b 00 00 00       	mov    eax,0xb
c000ad08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad13:	80 f9 19             	cmp    cl,0x19
c000ad16:	77 2f                	ja     c000ad47 <File::unlink()+0x47>
c000ad18:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ad1f:	85 c9                	test   ecx,ecx
c000ad21:	74 24                	je     c000ad47 <File::unlink()+0x47>
c000ad23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad29:	85 c9                	test   ecx,ecx
c000ad2b:	74 1a                	je     c000ad47 <File::unlink()+0x47>
c000ad2d:	b8 06 00 00 00       	mov    eax,0x6
c000ad32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad36:	75 0f                	jne    c000ad47 <File::unlink()+0x47>
c000ad38:	83 c2 0d             	add    edx,0xd
c000ad3b:	50                   	push   eax
c000ad3c:	50                   	push   eax
c000ad3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad3f:	52                   	push   edx
c000ad40:	51                   	push   ecx
c000ad41:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	83 c4 0c             	add    esp,0xc
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <File::rename(char const*)>:
c000ad4c:	83 ec 0c             	sub    esp,0xc
c000ad4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad5f:	80 f9 19             	cmp    cl,0x19
c000ad62:	77 32                	ja     c000ad96 <File::rename(char const*)+0x4a>
c000ad64:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ad6b:	85 c9                	test   ecx,ecx
c000ad6d:	74 27                	je     c000ad96 <File::rename(char const*)+0x4a>
c000ad6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad75:	85 c9                	test   ecx,ecx
c000ad77:	74 1d                	je     c000ad96 <File::rename(char const*)+0x4a>
c000ad79:	b8 06 00 00 00       	mov    eax,0x6
c000ad7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad82:	75 12                	jne    c000ad96 <File::rename(char const*)+0x4a>
c000ad84:	83 c2 0d             	add    edx,0xd
c000ad87:	50                   	push   eax
c000ad88:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8e:	52                   	push   edx
c000ad8f:	51                   	push   ecx
c000ad90:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad93:	83 c4 10             	add    esp,0x10
c000ad96:	83 c4 0c             	add    esp,0xc
c000ad99:	c3                   	ret    

c000ad9a <File::chfatattr(unsigned char, unsigned char)>:
c000ad9a:	57                   	push   edi
c000ad9b:	b8 0b 00 00 00       	mov    eax,0xb
c000ada0:	56                   	push   esi
c000ada1:	53                   	push   ebx
c000ada2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ada6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000adaa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000adb5:	80 f9 19             	cmp    cl,0x19
c000adb8:	77 37                	ja     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adba:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000adc1:	85 c9                	test   ecx,ecx
c000adc3:	74 2c                	je     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adcb:	85 c9                	test   ecx,ecx
c000adcd:	74 22                	je     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adcf:	b8 06 00 00 00       	mov    eax,0x6
c000add4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000add8:	75 17                	jne    c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adda:	8b 39                	mov    edi,DWORD PTR [ecx]
c000addc:	89 f0                	mov    eax,esi
c000adde:	83 c2 0d             	add    edx,0xd
c000ade1:	0f b6 f0             	movzx  esi,al
c000ade4:	0f b6 db             	movzx  ebx,bl
c000ade7:	56                   	push   esi
c000ade8:	53                   	push   ebx
c000ade9:	52                   	push   edx
c000adea:	51                   	push   ecx
c000adeb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	5b                   	pop    ebx
c000adf2:	5e                   	pop    esi
c000adf3:	5f                   	pop    edi
c000adf4:	c3                   	ret    
c000adf5:	90                   	nop

c000adf6 <File::exists()>:
c000adf6:	83 ec 0c             	sub    esp,0xc
c000adf9:	31 c0                	xor    eax,eax
c000adfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae06:	80 f9 19             	cmp    cl,0x19
c000ae09:	77 24                	ja     c000ae2f <File::exists()+0x39>
c000ae0b:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae12:	85 c9                	test   ecx,ecx
c000ae14:	74 19                	je     c000ae2f <File::exists()+0x39>
c000ae16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae1c:	85 c9                	test   ecx,ecx
c000ae1e:	74 0f                	je     c000ae2f <File::exists()+0x39>
c000ae20:	83 c2 0d             	add    edx,0xd
c000ae23:	50                   	push   eax
c000ae24:	50                   	push   eax
c000ae25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae27:	52                   	push   edx
c000ae28:	51                   	push   ecx
c000ae29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae2c:	83 c4 10             	add    esp,0x10
c000ae2f:	83 c4 0c             	add    esp,0xc
c000ae32:	c3                   	ret    
c000ae33:	90                   	nop

c000ae34 <File::stat(unsigned long long*, bool*)>:
c000ae34:	56                   	push   esi
c000ae35:	53                   	push   ebx
c000ae36:	50                   	push   eax
c000ae37:	b8 0b 00 00 00       	mov    eax,0xb
c000ae3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae4f:	80 f9 19             	cmp    cl,0x19
c000ae52:	77 3d                	ja     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae54:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae5b:	85 c9                	test   ecx,ecx
c000ae5d:	74 32                	je     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae65:	85 c9                	test   ecx,ecx
c000ae67:	74 28                	je     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae6f:	74 13                	je     c000ae84 <File::stat(unsigned long long*, bool*)+0x50>
c000ae71:	83 ec 04             	sub    esp,0x4
c000ae74:	56                   	push   esi
c000ae75:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae7b:	51                   	push   ecx
c000ae7c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae7f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae82:	eb 0a                	jmp    c000ae8e <File::stat(unsigned long long*, bool*)+0x5a>
c000ae84:	53                   	push   ebx
c000ae85:	83 c2 0d             	add    edx,0xd
c000ae88:	56                   	push   esi
c000ae89:	52                   	push   edx
c000ae8a:	51                   	push   ecx
c000ae8b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae8e:	83 c4 10             	add    esp,0x10
c000ae91:	5a                   	pop    edx
c000ae92:	5b                   	pop    ebx
c000ae93:	5e                   	pop    esi
c000ae94:	c3                   	ret    

c000ae95 <Fs::setcwd(Process*, char*)>:
c000ae95:	55                   	push   ebp
c000ae96:	57                   	push   edi
c000ae97:	56                   	push   esi
c000ae98:	53                   	push   ebx
c000ae99:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae9f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000aea6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aeac:	57                   	push   edi
c000aead:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aeb4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aeb8:	56                   	push   esi
c000aeb9:	e8 60 fa ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000aebe:	89 34 24             	mov    DWORD PTR [esp],esi
c000aec1:	e8 7a 56 ff ff       	call   c0000540 <strlen>
c000aec6:	83 c4 10             	add    esp,0x10
c000aec9:	83 f8 02             	cmp    eax,0x2
c000aecc:	77 15                	ja     c000aee3 <Fs::setcwd(Process*, char*)+0x4e>
c000aece:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aed3:	83 eb 41             	sub    ebx,0x41
c000aed6:	8b 04 9d 20 54 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c000aedd:	85 c0                	test   eax,eax
c000aedf:	75 1c                	jne    c000aefd <Fs::setcwd(Process*, char*)+0x68>
c000aee1:	eb 2f                	jmp    c000af12 <Fs::setcwd(Process*, char*)+0x7d>
c000aee3:	83 ec 0c             	sub    esp,0xc
c000aee6:	56                   	push   esi
c000aee7:	e8 54 56 ff ff       	call   c0000540 <strlen>
c000aeec:	83 c4 10             	add    esp,0x10
c000aeef:	83 f8 03             	cmp    eax,0x3
c000aef2:	75 57                	jne    c000af4b <Fs::setcwd(Process*, char*)+0xb6>
c000aef4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aef9:	75 50                	jne    c000af4b <Fs::setcwd(Process*, char*)+0xb6>
c000aefb:	eb d1                	jmp    c000aece <Fs::setcwd(Process*, char*)+0x39>
c000aefd:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af04:	75 0c                	jne    c000af12 <Fs::setcwd(Process*, char*)+0x7d>
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	50                   	push   eax
c000af0a:	e8 97 1c 00 00       	call   c000cba6 <LogicalDisk::mount()>
c000af0f:	83 c4 10             	add    esp,0x10
c000af12:	b8 03 00 00 00       	mov    eax,0x3
c000af17:	83 fb 19             	cmp    ebx,0x19
c000af1a:	0f 87 c6 00 00 00    	ja     c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000af20:	8b 14 9d 20 54 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdabe0]
c000af27:	b8 05 00 00 00       	mov    eax,0x5
c000af2c:	85 d2                	test   edx,edx
c000af2e:	0f 84 b2 00 00 00    	je     c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000af34:	b8 06 00 00 00       	mov    eax,0x6
c000af39:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af40:	0f 85 92 00 00 00    	jne    c000afd8 <Fs::setcwd(Process*, char*)+0x143>
c000af46:	e9 9b 00 00 00       	jmp    c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	68 14 01 00 00       	push   0x114
c000af53:	e8 61 c8 ff ff       	call   c00077b9 <malloc>
c000af58:	83 c4 0c             	add    esp,0xc
c000af5b:	89 c3                	mov    ebx,eax
c000af5d:	55                   	push   ebp
c000af5e:	56                   	push   esi
c000af5f:	50                   	push   eax
c000af60:	e8 63 fb ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000af65:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af6a:	83 c4 0c             	add    esp,0xc
c000af6d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af71:	50                   	push   eax
c000af72:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af76:	50                   	push   eax
c000af77:	53                   	push   ebx
c000af78:	e8 b7 fe ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c000af7d:	83 c4 10             	add    esp,0x10
c000af80:	83 f8 02             	cmp    eax,0x2
c000af83:	74 04                	je     c000af89 <Fs::setcwd(Process*, char*)+0xf4>
c000af85:	85 c0                	test   eax,eax
c000af87:	74 1c                	je     c000afa5 <Fs::setcwd(Process*, char*)+0x110>
c000af89:	b8 01 00 00 00       	mov    eax,0x1
c000af8e:	85 db                	test   ebx,ebx
c000af90:	74 54                	je     c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000af92:	83 ec 0c             	sub    esp,0xc
c000af95:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af97:	53                   	push   ebx
c000af98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af9b:	83 c4 10             	add    esp,0x10
c000af9e:	b8 01 00 00 00       	mov    eax,0x1
c000afa3:	eb 41                	jmp    c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000afa5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afaa:	75 1c                	jne    c000afc8 <Fs::setcwd(Process*, char*)+0x133>
c000afac:	b8 02 00 00 00       	mov    eax,0x2
c000afb1:	85 db                	test   ebx,ebx
c000afb3:	74 31                	je     c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000afb5:	83 ec 0c             	sub    esp,0xc
c000afb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afba:	53                   	push   ebx
c000afbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afbe:	83 c4 10             	add    esp,0x10
c000afc1:	b8 02 00 00 00       	mov    eax,0x2
c000afc6:	eb 1e                	jmp    c000afe6 <Fs::setcwd(Process*, char*)+0x151>
c000afc8:	85 db                	test   ebx,ebx
c000afca:	74 0c                	je     c000afd8 <Fs::setcwd(Process*, char*)+0x143>
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afd1:	53                   	push   ebx
c000afd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	50                   	push   eax
c000afd9:	50                   	push   eax
c000afda:	56                   	push   esi
c000afdb:	57                   	push   edi
c000afdc:	e8 1f 56 ff ff       	call   c0000600 <strcpy>
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	31 c0                	xor    eax,eax
c000afe6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afec:	5b                   	pop    ebx
c000afed:	5e                   	pop    esi
c000afee:	5f                   	pop    edi
c000afef:	5d                   	pop    ebp
c000aff0:	c3                   	ret    
c000aff1:	90                   	nop

c000aff2 <Directory::Directory(char const*, Process*)>:
c000aff2:	83 ec 0c             	sub    esp,0xc
c000aff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff9:	83 ec 08             	sub    esp,0x8
c000affc:	6a 00                	push   0x0
c000affe:	50                   	push   eax
c000afff:	e8 4e de ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000b004:	83 c4 10             	add    esp,0x10
c000b007:	ba 70 e4 01 c0       	mov    edx,0xc001e470
c000b00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b010:	89 10                	mov    DWORD PTR [eax],edx
c000b012:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b016:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	83 c0 0d             	add    eax,0xd
c000b023:	83 ec 04             	sub    esp,0x4
c000b026:	52                   	push   edx
c000b027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02b:	50                   	push   eax
c000b02c:	e8 ed f8 ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b031:	83 c4 10             	add    esp,0x10
c000b034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b038:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b03b:	8d 50 bf             	lea    edx,[eax-0x41]
c000b03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b042:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b054:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b05a:	25 ff 00 00 00       	and    eax,0xff
c000b05f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b066:	85 c0                	test   eax,eax
c000b068:	74 42                	je     c000b0ac <Directory::Directory(char const*, Process*)+0xba>
c000b06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b074:	25 ff 00 00 00       	and    eax,0xff
c000b079:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b080:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b086:	85 c0                	test   eax,eax
c000b088:	75 22                	jne    c000b0ac <Directory::Directory(char const*, Process*)+0xba>
c000b08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b08e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b094:	25 ff 00 00 00       	and    eax,0xff
c000b099:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	50                   	push   eax
c000b0a4:	e8 fd 1a 00 00       	call   c000cba6 <LogicalDisk::mount()>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	90                   	nop
c000b0ad:	83 c4 0c             	add    esp,0xc
c000b0b0:	c3                   	ret    
c000b0b1:	90                   	nop

c000b0b2 <Directory::open()>:
c000b0b2:	53                   	push   ebx
c000b0b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b0b8:	83 ec 08             	sub    esp,0x8
c000b0bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0c6:	80 fa 19             	cmp    dl,0x19
c000b0c9:	77 3d                	ja     c000b108 <Directory::open()+0x56>
c000b0cb:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b0d2:	85 d2                	test   edx,edx
c000b0d4:	74 32                	je     c000b108 <Directory::open()+0x56>
c000b0d6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b0dc:	85 d2                	test   edx,edx
c000b0de:	74 28                	je     c000b108 <Directory::open()+0x56>
c000b0e0:	b8 06 00 00 00       	mov    eax,0x6
c000b0e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0e9:	75 1d                	jne    c000b108 <Directory::open()+0x56>
c000b0eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0f1:	50                   	push   eax
c000b0f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0f4:	51                   	push   ecx
c000b0f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0f8:	51                   	push   ecx
c000b0f9:	52                   	push   edx
c000b0fa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0fd:	83 c4 10             	add    esp,0x10
c000b100:	85 c0                	test   eax,eax
c000b102:	75 04                	jne    c000b108 <Directory::open()+0x56>
c000b104:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b108:	83 c4 08             	add    esp,0x8
c000b10b:	5b                   	pop    ebx
c000b10c:	c3                   	ret    
c000b10d:	90                   	nop

c000b10e <Directory::close()>:
c000b10e:	53                   	push   ebx
c000b10f:	b8 0b 00 00 00       	mov    eax,0xb
c000b114:	83 ec 08             	sub    esp,0x8
c000b117:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b11b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b122:	80 fa 19             	cmp    dl,0x19
c000b125:	77 41                	ja     c000b168 <Directory::close()+0x5a>
c000b127:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000b12e:	85 db                	test   ebx,ebx
c000b130:	74 36                	je     c000b168 <Directory::close()+0x5a>
c000b132:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b139:	74 2d                	je     c000b168 <Directory::close()+0x5a>
c000b13b:	b8 05 00 00 00       	mov    eax,0x5
c000b140:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b144:	74 22                	je     c000b168 <Directory::close()+0x5a>
c000b146:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b14a:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000b151:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b157:	53                   	push   ebx
c000b158:	53                   	push   ebx
c000b159:	8b 10                	mov    edx,DWORD PTR [eax]
c000b15b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b161:	50                   	push   eax
c000b162:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	83 c4 08             	add    esp,0x8
c000b16b:	5b                   	pop    ebx
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <Directory::unlink()>:
c000b16e:	83 ec 0c             	sub    esp,0xc
c000b171:	b8 0b 00 00 00       	mov    eax,0xb
c000b176:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b17a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b181:	80 f9 19             	cmp    cl,0x19
c000b184:	77 2f                	ja     c000b1b5 <Directory::unlink()+0x47>
c000b186:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b18d:	85 c9                	test   ecx,ecx
c000b18f:	74 24                	je     c000b1b5 <Directory::unlink()+0x47>
c000b191:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b197:	85 c9                	test   ecx,ecx
c000b199:	74 1a                	je     c000b1b5 <Directory::unlink()+0x47>
c000b19b:	b8 06 00 00 00       	mov    eax,0x6
c000b1a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1a4:	75 0f                	jne    c000b1b5 <Directory::unlink()+0x47>
c000b1a6:	83 c2 0d             	add    edx,0xd
c000b1a9:	50                   	push   eax
c000b1aa:	50                   	push   eax
c000b1ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ad:	52                   	push   edx
c000b1ae:	51                   	push   ecx
c000b1af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	83 c4 0c             	add    esp,0xc
c000b1b8:	c3                   	ret    
c000b1b9:	90                   	nop

c000b1ba <Directory::rename(char const*)>:
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1cd:	80 f9 19             	cmp    cl,0x19
c000b1d0:	77 32                	ja     c000b204 <Directory::rename(char const*)+0x4a>
c000b1d2:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b1d9:	85 c9                	test   ecx,ecx
c000b1db:	74 27                	je     c000b204 <Directory::rename(char const*)+0x4a>
c000b1dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1e3:	85 c9                	test   ecx,ecx
c000b1e5:	74 1d                	je     c000b204 <Directory::rename(char const*)+0x4a>
c000b1e7:	b8 06 00 00 00       	mov    eax,0x6
c000b1ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1f0:	75 12                	jne    c000b204 <Directory::rename(char const*)+0x4a>
c000b1f2:	83 c2 0d             	add    edx,0xd
c000b1f5:	50                   	push   eax
c000b1f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1fc:	52                   	push   edx
c000b1fd:	51                   	push   ecx
c000b1fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	83 c4 0c             	add    esp,0xc
c000b207:	c3                   	ret    

c000b208 <Directory::exists()>:
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	31 c0                	xor    eax,eax
c000b20d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b218:	80 f9 19             	cmp    cl,0x19
c000b21b:	77 24                	ja     c000b241 <Directory::exists()+0x39>
c000b21d:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b224:	85 c9                	test   ecx,ecx
c000b226:	74 19                	je     c000b241 <Directory::exists()+0x39>
c000b228:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b22e:	85 c9                	test   ecx,ecx
c000b230:	74 0f                	je     c000b241 <Directory::exists()+0x39>
c000b232:	83 c2 0d             	add    edx,0xd
c000b235:	50                   	push   eax
c000b236:	50                   	push   eax
c000b237:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b239:	52                   	push   edx
c000b23a:	51                   	push   ecx
c000b23b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b23e:	83 c4 10             	add    esp,0x10
c000b241:	83 c4 0c             	add    esp,0xc
c000b244:	c3                   	ret    
c000b245:	90                   	nop

c000b246 <Directory::read(dirent*)>:
c000b246:	83 ec 1c             	sub    esp,0x1c
c000b249:	b8 0b 00 00 00       	mov    eax,0xb
c000b24e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b252:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b259:	80 fa 19             	cmp    dl,0x19
c000b25c:	77 30                	ja     c000b28e <Directory::read(dirent*)+0x48>
c000b25e:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b265:	85 d2                	test   edx,edx
c000b267:	74 25                	je     c000b28e <Directory::read(dirent*)+0x48>
c000b269:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b270:	74 1c                	je     c000b28e <Directory::read(dirent*)+0x48>
c000b272:	83 ec 0c             	sub    esp,0xc
c000b275:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b277:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b27b:	52                   	push   edx
c000b27c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b280:	6a 00                	push   0x0
c000b282:	68 10 01 00 00       	push   0x110
c000b287:	51                   	push   ecx
c000b288:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b28b:	83 c4 20             	add    esp,0x20
c000b28e:	83 c4 1c             	add    esp,0x1c
c000b291:	c3                   	ret    

c000b292 <Directory::create()>:
c000b292:	83 ec 0c             	sub    esp,0xc
c000b295:	b8 0b 00 00 00       	mov    eax,0xb
c000b29a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b29e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2a5:	80 f9 19             	cmp    cl,0x19
c000b2a8:	77 2f                	ja     c000b2d9 <Directory::create()+0x47>
c000b2aa:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b2b1:	85 c9                	test   ecx,ecx
c000b2b3:	74 24                	je     c000b2d9 <Directory::create()+0x47>
c000b2b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2bb:	85 c9                	test   ecx,ecx
c000b2bd:	74 1a                	je     c000b2d9 <Directory::create()+0x47>
c000b2bf:	b8 06 00 00 00       	mov    eax,0x6
c000b2c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2c8:	75 0f                	jne    c000b2d9 <Directory::create()+0x47>
c000b2ca:	83 c2 0d             	add    edx,0xd
c000b2cd:	50                   	push   eax
c000b2ce:	50                   	push   eax
c000b2cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2d1:	52                   	push   edx
c000b2d2:	51                   	push   ecx
c000b2d3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b2d6:	83 c4 10             	add    esp,0x10
c000b2d9:	83 c4 0c             	add    esp,0xc
c000b2dc:	c3                   	ret    
c000b2dd:	90                   	nop

c000b2de <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b2de:	b8 0a 00 00 00       	mov    eax,0xa
c000b2e3:	c3                   	ret    

c000b2e4 <Bus::Bus(char const*)>:
c000b2e4:	83 ec 0c             	sub    esp,0xc
c000b2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2eb:	83 ec 08             	sub    esp,0x8
c000b2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f2:	50                   	push   eax
c000b2f3:	e8 30 08 00 00       	call   c000bb28 <Device::Device(char const*)>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	ba 8c e4 01 c0       	mov    edx,0xc001e48c
c000b300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b304:	89 10                	mov    DWORD PTR [eax],edx
c000b306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b30a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b314:	90                   	nop
c000b315:	83 c4 0c             	add    esp,0xc
c000b318:	c3                   	ret    
c000b319:	90                   	nop
c000b31a:	66 90                	xchg   ax,ax

c000b31c <Bus::~Bus()>:
c000b31c:	83 ec 0c             	sub    esp,0xc
c000b31f:	ba 8c e4 01 c0       	mov    edx,0xc001e48c
c000b324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b328:	89 10                	mov    DWORD PTR [eax],edx
c000b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32e:	83 ec 0c             	sub    esp,0xc
c000b331:	50                   	push   eax
c000b332:	e8 5b 05 00 00       	call   c000b892 <Device::~Device()>
c000b337:	83 c4 10             	add    esp,0x10
c000b33a:	90                   	nop
c000b33b:	83 c4 0c             	add    esp,0xc
c000b33e:	c3                   	ret    
c000b33f:	90                   	nop

c000b340 <Bus::~Bus()>:
c000b340:	83 ec 0c             	sub    esp,0xc
c000b343:	83 ec 0c             	sub    esp,0xc
c000b346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b34a:	e8 cd ff ff ff       	call   c000b31c <Bus::~Bus()>
c000b34f:	83 c4 10             	add    esp,0x10
c000b352:	83 ec 08             	sub    esp,0x8
c000b355:	68 58 01 00 00       	push   0x158
c000b35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b35e:	e8 f9 f0 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b363:	83 c4 10             	add    esp,0x10
c000b366:	83 c4 0c             	add    esp,0xc
c000b369:	c3                   	ret    

c000b36a <beepThread(void*)>:
c000b36a:	83 ec 0c             	sub    esp,0xc
c000b36d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b376:	48                   	dec    eax
c000b377:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000b37c:	75 01                	jne    c000b37f <beepThread(void*)+0x15>
c000b37e:	fb                   	sti    
c000b37f:	83 ec 0c             	sub    esp,0xc
c000b382:	6b c2 0a             	imul   eax,edx,0xa
c000b385:	50                   	push   eax
c000b386:	e8 09 87 00 00       	call   c0013a94 <milliTenthSleep(unsigned int)>
c000b38b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b392:	e8 af a4 00 00       	call   c0015846 <HalMakeBeep(int)>
c000b397:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b39f:	83 c4 1c             	add    esp,0x1c
c000b3a2:	e9 e9 85 00 00       	jmp    c0013990 <blockTask(TaskState)>

c000b3a7 <Krnl::beep(int, int, bool)>:
c000b3a7:	56                   	push   esi
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 10             	sub    esp,0x10
c000b3ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b8:	e8 89 a4 00 00       	call   c0015846 <HalMakeBeep(int)>
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	89 f0                	mov    eax,esi
c000b3c2:	84 c0                	test   al,al
c000b3c4:	74 1e                	je     c000b3e4 <Krnl::beep(int, int, bool)+0x3d>
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	6b db 0a             	imul   ebx,ebx,0xa
c000b3cc:	53                   	push   ebx
c000b3cd:	e8 c2 86 00 00       	call   c0013a94 <milliTenthSleep(unsigned int)>
c000b3d2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b3da:	83 c4 14             	add    esp,0x14
c000b3dd:	5b                   	pop    ebx
c000b3de:	5e                   	pop    esi
c000b3df:	e9 62 a4 00 00       	jmp    c0015846 <HalMakeBeep(int)>
c000b3e4:	68 e6 00 00 00       	push   0xe6
c000b3e9:	53                   	push   ebx
c000b3ea:	68 6a b3 00 c0       	push   0xc000b36a
c000b3ef:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b3f5:	e8 7a 81 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c000b3fa:	83 c4 14             	add    esp,0x14
c000b3fd:	5b                   	pop    ebx
c000b3fe:	5e                   	pop    esi
c000b3ff:	c3                   	ret    

c000b400 <User::loadClockSettings(int)>:
c000b400:	53                   	push   ebx
c000b401:	83 ec 14             	sub    esp,0x14
c000b404:	68 14 01 00 00       	push   0x114
c000b409:	e8 ab c3 ff ff       	call   c00077b9 <malloc>
c000b40e:	83 c4 0c             	add    esp,0xc
c000b411:	89 c3                	mov    ebx,eax
c000b413:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b419:	68 b0 e4 01 c0       	push   0xc001e4b0
c000b41e:	50                   	push   eax
c000b41f:	e8 a4 f6 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000b424:	58                   	pop    eax
c000b425:	5a                   	pop    edx
c000b426:	6a 01                	push   0x1
c000b428:	53                   	push   ebx
c000b429:	e8 5a f7 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000b42e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b431:	e8 b0 f7 ff ff       	call   c000abe6 <File::close()>
c000b436:	83 c4 10             	add    esp,0x10
c000b439:	85 db                	test   ebx,ebx
c000b43b:	74 0f                	je     c000b44c <User::loadClockSettings(int)+0x4c>
c000b43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b443:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b446:	83 c4 08             	add    esp,0x8
c000b449:	5b                   	pop    ebx
c000b44a:	ff e0                	jmp    eax
c000b44c:	83 c4 08             	add    esp,0x8
c000b44f:	5b                   	pop    ebx
c000b450:	c3                   	ret    
c000b451:	90                   	nop

c000b452 <Clock::Clock(char const*)>:
c000b452:	83 ec 0c             	sub    esp,0xc
c000b455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b459:	83 ec 08             	sub    esp,0x8
c000b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b460:	50                   	push   eax
c000b461:	e8 c2 06 00 00       	call   c000bb28 <Device::Device(char const*)>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	ba d8 e4 01 c0       	mov    edx,0xc001e4d8
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b482:	90                   	nop
c000b483:	83 c4 0c             	add    esp,0xc
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <Clock::~Clock()>:
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	ba d8 e4 01 c0       	mov    edx,0xc001e4d8
c000b490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b494:	89 10                	mov    DWORD PTR [eax],edx
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	83 ec 0c             	sub    esp,0xc
c000b49d:	50                   	push   eax
c000b49e:	e8 ef 03 00 00       	call   c000b892 <Device::~Device()>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	90                   	nop
c000b4a7:	83 c4 0c             	add    esp,0xc
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <Clock::~Clock()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	83 ec 0c             	sub    esp,0xc
c000b4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b6:	e8 cd ff ff ff       	call   c000b488 <Clock::~Clock()>
c000b4bb:	83 c4 10             	add    esp,0x10
c000b4be:	83 ec 08             	sub    esp,0x8
c000b4c1:	68 58 01 00 00       	push   0x158
c000b4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ca:	e8 8d ef ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	83 c4 0c             	add    esp,0xc
c000b4d5:	c3                   	ret    

c000b4d6 <Clock::timeInSecondsLocal()>:
c000b4d6:	53                   	push   ebx
c000b4d7:	83 ec 14             	sub    esp,0x14
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4e0:	50                   	push   eax
c000b4e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b4e4:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b4eb:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b4f1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4f7:	89 cb                	mov    ebx,ecx
c000b4f9:	c1 fb 1f             	sar    ebx,0x1f
c000b4fc:	01 c8                	add    eax,ecx
c000b4fe:	11 da                	adc    edx,ebx
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	31 c9                	xor    ecx,ecx
c000b505:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b50c:	74 05                	je     c000b513 <Clock::timeInSecondsLocal()+0x3d>
c000b50e:	b9 08 07 00 00       	mov    ecx,0x708
c000b513:	31 db                	xor    ebx,ebx
c000b515:	01 c8                	add    eax,ecx
c000b517:	11 da                	adc    edx,ebx
c000b519:	83 c4 08             	add    esp,0x8
c000b51c:	5b                   	pop    ebx
c000b51d:	c3                   	ret    

c000b51e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b51e:	57                   	push   edi
c000b51f:	56                   	push   esi
c000b520:	53                   	push   ebx
c000b521:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b525:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b529:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b52b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b52f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b532:	0f b6 05 b8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fb8
c000b539:	03 05 bc 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fbc
c000b53f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b545:	99                   	cdq    
c000b546:	29 c6                	sub    esi,eax
c000b548:	19 d7                	sbb    edi,edx
c000b54a:	89 f0                	mov    eax,esi
c000b54c:	89 fa                	mov    edx,edi
c000b54e:	31 f6                	xor    esi,esi
c000b550:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b557:	74 05                	je     c000b55e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b559:	be 08 07 00 00       	mov    esi,0x708
c000b55e:	31 ff                	xor    edi,edi
c000b560:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b564:	29 f0                	sub    eax,esi
c000b566:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b56a:	19 fa                	sbb    edx,edi
c000b56c:	89 d8                	mov    eax,ebx
c000b56e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b572:	5b                   	pop    ebx
c000b573:	5e                   	pop    esi
c000b574:	5f                   	pop    edi
c000b575:	ff e0                	jmp    eax

c000b577 <datetimeToSeconds(datetime_t)>:
c000b577:	55                   	push   ebp
c000b578:	57                   	push   edi
c000b579:	56                   	push   esi
c000b57a:	53                   	push   ebx
c000b57b:	83 ec 14             	sub    esp,0x14
c000b57e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b582:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b586:	89 d3                	mov    ebx,edx
c000b588:	0f b6 c6             	movzx  eax,dh
c000b58b:	c1 eb 10             	shr    ebx,0x10
c000b58e:	48                   	dec    eax
c000b58f:	66 81 eb 6c 07       	sub    bx,0x76c
c000b594:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b598:	0f b6 f5             	movzx  esi,ch
c000b59b:	89 cf                	mov    edi,ecx
c000b59d:	6b f6 3c             	imul   esi,esi,0x3c
c000b5a0:	c1 ef 10             	shr    edi,0x10
c000b5a3:	0f b6 c9             	movzx  ecx,cl
c000b5a6:	89 f8                	mov    eax,edi
c000b5a8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5ae:	0f b6 f8             	movzx  edi,al
c000b5b1:	0f b6 d2             	movzx  edx,dl
c000b5b4:	01 fe                	add    esi,edi
c000b5b6:	01 f1                	add    ecx,esi
c000b5b8:	0f b7 f3             	movzx  esi,bx
c000b5bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b5bf:	c1 f9 1f             	sar    ecx,0x1f
c000b5c2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5cb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b5d0:	8b 0c 8d 20 e5 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1ae0]
c000b5d7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b5db:	76 29                	jbe    c000b606 <datetimeToSeconds(datetime_t)+0x8f>
c000b5dd:	f6 c3 03             	test   bl,0x3
c000b5e0:	75 24                	jne    c000b606 <datetimeToSeconds(datetime_t)+0x8f>
c000b5e2:	31 d2                	xor    edx,edx
c000b5e4:	bf 64 00 00 00       	mov    edi,0x64
c000b5e9:	89 d8                	mov    eax,ebx
c000b5eb:	66 f7 f7             	div    di
c000b5ee:	66 85 d2             	test   dx,dx
c000b5f1:	75 12                	jne    c000b605 <datetimeToSeconds(datetime_t)+0x8e>
c000b5f3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5f9:	bf 90 01 00 00       	mov    edi,0x190
c000b5fe:	99                   	cdq    
c000b5ff:	f7 ff                	idiv   edi
c000b601:	85 d2                	test   edx,edx
c000b603:	75 01                	jne    c000b606 <datetimeToSeconds(datetime_t)+0x8f>
c000b605:	41                   	inc    ecx
c000b606:	66 83 fb 46          	cmp    bx,0x46
c000b60a:	76 45                	jbe    c000b651 <datetimeToSeconds(datetime_t)+0xda>
c000b60c:	bb 46 00 00 00       	mov    ebx,0x46
c000b611:	bf 64 00 00 00       	mov    edi,0x64
c000b616:	bd 90 01 00 00       	mov    ebp,0x190
c000b61b:	b8 6d 01 00 00       	mov    eax,0x16d
c000b620:	f6 c3 03             	test   bl,0x3
c000b623:	75 23                	jne    c000b648 <datetimeToSeconds(datetime_t)+0xd1>
c000b625:	89 d8                	mov    eax,ebx
c000b627:	99                   	cdq    
c000b628:	f7 ff                	idiv   edi
c000b62a:	b8 6e 01 00 00       	mov    eax,0x16e
c000b62f:	85 d2                	test   edx,edx
c000b631:	75 15                	jne    c000b648 <datetimeToSeconds(datetime_t)+0xd1>
c000b633:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b639:	99                   	cdq    
c000b63a:	f7 fd                	idiv   ebp
c000b63c:	31 c0                	xor    eax,eax
c000b63e:	85 d2                	test   edx,edx
c000b640:	0f 94 c0             	sete   al
c000b643:	05 6d 01 00 00       	add    eax,0x16d
c000b648:	01 c1                	add    ecx,eax
c000b64a:	43                   	inc    ebx
c000b64b:	39 f3                	cmp    ebx,esi
c000b64d:	7c cc                	jl     c000b61b <datetimeToSeconds(datetime_t)+0xa4>
c000b64f:	eb 3b                	jmp    c000b68c <datetimeToSeconds(datetime_t)+0x115>
c000b651:	74 39                	je     c000b68c <datetimeToSeconds(datetime_t)+0x115>
c000b653:	b8 45 00 00 00       	mov    eax,0x45
c000b658:	89 c2                	mov    edx,eax
c000b65a:	83 e2 03             	and    edx,0x3
c000b65d:	39 f0                	cmp    eax,esi
c000b65f:	7e 13                	jle    c000b674 <datetimeToSeconds(datetime_t)+0xfd>
c000b661:	85 d2                	test   edx,edx
c000b663:	0f 94 c2             	sete   dl
c000b666:	48                   	dec    eax
c000b667:	0f b6 d2             	movzx  edx,dl
c000b66a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b670:	29 d1                	sub    ecx,edx
c000b672:	eb e4                	jmp    c000b658 <datetimeToSeconds(datetime_t)+0xe1>
c000b674:	b8 6d 01 00 00       	mov    eax,0x16d
c000b679:	85 d2                	test   edx,edx
c000b67b:	75 0d                	jne    c000b68a <datetimeToSeconds(datetime_t)+0x113>
c000b67d:	31 c0                	xor    eax,eax
c000b67f:	66 85 db             	test   bx,bx
c000b682:	0f 95 c0             	setne  al
c000b685:	05 6d 01 00 00       	add    eax,0x16d
c000b68a:	29 c1                	sub    ecx,eax
c000b68c:	b8 80 51 01 00       	mov    eax,0x15180
c000b691:	f7 e9                	imul   ecx
c000b693:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b697:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b69b:	83 c4 14             	add    esp,0x14
c000b69e:	5b                   	pop    ebx
c000b69f:	5e                   	pop    esi
c000b6a0:	5f                   	pop    edi
c000b6a1:	5d                   	pop    ebp
c000b6a2:	c3                   	ret    
c000b6a3:	90                   	nop

c000b6a4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b6a4:	57                   	push   edi
c000b6a5:	56                   	push   esi
c000b6a6:	53                   	push   ebx
c000b6a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6ab:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6ad:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6b8:	e8 ba fe ff ff       	call   c000b577 <datetimeToSeconds(datetime_t)>
c000b6bd:	59                   	pop    ecx
c000b6be:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b6c5:	5b                   	pop    ebx
c000b6c6:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b6cc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6d2:	89 cb                	mov    ebx,ecx
c000b6d4:	c1 fb 1f             	sar    ebx,0x1f
c000b6d7:	29 c8                	sub    eax,ecx
c000b6d9:	19 da                	sbb    edx,ebx
c000b6db:	31 c9                	xor    ecx,ecx
c000b6dd:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b6e4:	74 05                	je     c000b6eb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b6e6:	b9 08 07 00 00       	mov    ecx,0x708
c000b6eb:	31 db                	xor    ebx,ebx
c000b6ed:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6f1:	29 c8                	sub    eax,ecx
c000b6f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6f7:	19 da                	sbb    edx,ebx
c000b6f9:	89 f8                	mov    eax,edi
c000b6fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6ff:	5b                   	pop    ebx
c000b700:	5e                   	pop    esi
c000b701:	5f                   	pop    edi
c000b702:	ff e0                	jmp    eax

c000b704 <secondsToDatetime(unsigned long long)>:
c000b704:	55                   	push   ebp
c000b705:	57                   	push   edi
c000b706:	56                   	push   esi
c000b707:	53                   	push   ebx
c000b708:	83 ec 1c             	sub    esp,0x1c
c000b70b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b70f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b713:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b717:	6a 00                	push   0x0
c000b719:	68 80 51 01 00       	push   0x15180
c000b71e:	55                   	push   ebp
c000b71f:	57                   	push   edi
c000b720:	e8 db 10 01 00       	call   c001c800 <__udivdi3>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b72e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b732:	6a 00                	push   0x0
c000b734:	68 80 51 01 00       	push   0x15180
c000b739:	55                   	push   ebp
c000b73a:	57                   	push   edi
c000b73b:	bf 10 0e 00 00       	mov    edi,0xe10
c000b740:	e8 bb 11 01 00       	call   c001c900 <__umoddi3>
c000b745:	83 c4 10             	add    esp,0x10
c000b748:	99                   	cdq    
c000b749:	f7 ff                	idiv   edi
c000b74b:	bf 3c 00 00 00       	mov    edi,0x3c
c000b750:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b753:	89 d0                	mov    eax,edx
c000b755:	99                   	cdq    
c000b756:	f7 ff                	idiv   edi
c000b758:	85 db                	test   ebx,ebx
c000b75a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b75d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b760:	79 11                	jns    c000b773 <secondsToDatetime(unsigned long long)+0x6f>
c000b762:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b766:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b76c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b771:	eb 07                	jmp    c000b77a <secondsToDatetime(unsigned long long)+0x76>
c000b773:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b778:	89 d8                	mov    eax,ebx
c000b77a:	bf b4 05 00 00       	mov    edi,0x5b4
c000b77f:	99                   	cdq    
c000b780:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b785:	f7 f9                	idiv   ecx
c000b787:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b78c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b790:	31 d2                	xor    edx,edx
c000b792:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b79a:	01 c3                	add    ebx,eax
c000b79c:	89 d8                	mov    eax,ebx
c000b79e:	f7 f1                	div    ecx
c000b7a0:	31 d2                	xor    edx,edx
c000b7a2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b7a5:	89 d8                	mov    eax,ebx
c000b7a7:	f7 f7                	div    edi
c000b7a9:	31 d2                	xor    edx,edx
c000b7ab:	29 c1                	sub    ecx,eax
c000b7ad:	89 d8                	mov    eax,ebx
c000b7af:	f7 f5                	div    ebp
c000b7b1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b7b6:	29 c1                	sub    ecx,eax
c000b7b8:	31 d2                	xor    edx,edx
c000b7ba:	89 c8                	mov    eax,ecx
c000b7bc:	f7 f5                	div    ebp
c000b7be:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7c7:	31 d2                	xor    edx,edx
c000b7c9:	89 c8                	mov    eax,ecx
c000b7cb:	f7 f5                	div    ebp
c000b7cd:	31 d2                	xor    edx,edx
c000b7cf:	01 c3                	add    ebx,eax
c000b7d1:	89 c8                	mov    eax,ecx
c000b7d3:	f7 f7                	div    edi
c000b7d5:	bf 99 00 00 00       	mov    edi,0x99
c000b7da:	29 c3                	sub    ebx,eax
c000b7dc:	31 d2                	xor    edx,edx
c000b7de:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b7e6:	29 c3                	sub    ebx,eax
c000b7e8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7eb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7ee:	bb 05 00 00 00       	mov    ebx,0x5
c000b7f3:	83 c1 02             	add    ecx,0x2
c000b7f6:	89 c8                	mov    eax,ecx
c000b7f8:	f7 f7                	div    edi
c000b7fa:	31 d2                	xor    edx,edx
c000b7fc:	89 c7                	mov    edi,eax
c000b7fe:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b804:	83 c0 02             	add    eax,0x2
c000b807:	f7 f3                	div    ebx
c000b809:	89 eb                	mov    ebx,ebp
c000b80b:	29 c3                	sub    ebx,eax
c000b80d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b813:	88 1e                	mov    BYTE PTR [esi],bl
c000b815:	19 c0                	sbb    eax,eax
c000b817:	31 d2                	xor    edx,edx
c000b819:	83 e0 0c             	and    eax,0xc
c000b81c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b820:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b828:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b82c:	83 f9 01             	cmp    ecx,0x1
c000b82f:	0f 96 c2             	setbe  dl
c000b832:	41                   	inc    ecx
c000b833:	01 d0                	add    eax,edx
c000b835:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b838:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b83c:	83 c4 1c             	add    esp,0x1c
c000b83f:	89 f0                	mov    eax,esi
c000b841:	5b                   	pop    ebx
c000b842:	5e                   	pop    esi
c000b843:	5f                   	pop    edi
c000b844:	5d                   	pop    ebp
c000b845:	c2 04 00             	ret    0x4

c000b848 <Clock::timeInDatetimeLocal()>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 14             	sub    esp,0x14
c000b84c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b850:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b854:	e8 7d fc ff ff       	call   c000b4d6 <Clock::timeInSecondsLocal()>
c000b859:	83 c4 0c             	add    esp,0xc
c000b85c:	52                   	push   edx
c000b85d:	50                   	push   eax
c000b85e:	53                   	push   ebx
c000b85f:	e8 a0 fe ff ff       	call   c000b704 <secondsToDatetime(unsigned long long)>
c000b864:	89 d8                	mov    eax,ebx
c000b866:	83 c4 14             	add    esp,0x14
c000b869:	5b                   	pop    ebx
c000b86a:	c2 04 00             	ret    0x4
c000b86d:	90                   	nop

c000b86e <Device::hibernate()>:
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <Device::wake()>:
c000b870:	c3                   	ret    
c000b871:	90                   	nop

c000b872 <Device::detect()>:
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <Device::disableLegacy()>:
c000b874:	c3                   	ret    
c000b875:	90                   	nop

c000b876 <Device::powerSaving(PowerSavingLevel)>:
c000b876:	c3                   	ret    
c000b877:	90                   	nop

c000b878 <DriverlessDevice::close(int, int, void*)>:
c000b878:	31 c0                	xor    eax,eax
c000b87a:	c3                   	ret    
c000b87b:	90                   	nop

c000b87c <DriverlessDevice::detect()>:
c000b87c:	c3                   	ret    
c000b87d:	90                   	nop

c000b87e <DriverlessDevice::open(int, int, void*)>:
c000b87e:	83 ec 18             	sub    esp,0x18
c000b881:	68 50 e5 01 c0       	push   0xc001e550
c000b886:	e8 e4 49 00 00       	call   c001026f <KePanic(char const*)>
c000b88b:	83 c8 ff             	or     eax,0xffffffff
c000b88e:	83 c4 1c             	add    esp,0x1c
c000b891:	c3                   	ret    

c000b892 <Device::~Device()>:
c000b892:	ba b0 e5 01 c0       	mov    edx,0xc001e5b0
c000b897:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b89b:	89 10                	mov    DWORD PTR [eax],edx
c000b89d:	90                   	nop
c000b89e:	c3                   	ret    
c000b89f:	90                   	nop

c000b8a0 <Device::~Device()>:
c000b8a0:	83 ec 0c             	sub    esp,0xc
c000b8a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b8a7:	e8 e6 ff ff ff       	call   c000b892 <Device::~Device()>
c000b8ac:	83 c4 04             	add    esp,0x4
c000b8af:	83 ec 08             	sub    esp,0x8
c000b8b2:	68 58 01 00 00       	push   0x158
c000b8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bb:	e8 9c eb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b8c0:	83 c4 10             	add    esp,0x10
c000b8c3:	83 c4 0c             	add    esp,0xc
c000b8c6:	c3                   	ret    
c000b8c7:	90                   	nop

c000b8c8 <Device::findAndLoadDriver()>:
c000b8c8:	c7 44 24 04 6e e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e56e
c000b8d0:	e9 7d ec ff ff       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000b8d5:	90                   	nop

c000b8d6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b8d6:	57                   	push   edi
c000b8d7:	b9 09 00 00 00       	mov    ecx,0x9
c000b8dc:	56                   	push   esi
c000b8dd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b8e1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b8e5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8ef:	81 c7 18 01 00 00    	add    edi,0x118
c000b8f5:	fc                   	cld    
c000b8f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8f8:	5e                   	pop    esi
c000b8f9:	5f                   	pop    edi
c000b8fa:	c3                   	ret    
c000b8fb:	90                   	nop

c000b8fc <Device::preOpenACPI(void*, char*, char*)>:
c000b8fc:	57                   	push   edi
c000b8fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b902:	56                   	push   esi
c000b903:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b907:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b90b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b915:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b91b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b921:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b925:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b927:	b9 0e 00 00 00       	mov    ecx,0xe
c000b92c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b932:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b936:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b938:	5e                   	pop    esi
c000b939:	5f                   	pop    edi
c000b93a:	c3                   	ret    
c000b93b:	90                   	nop

c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b93c:	53                   	push   ebx
c000b93d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b941:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b949:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b94d:	0f b6 c0             	movzx  eax,al
c000b950:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b958:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b95c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b960:	5b                   	pop    ebx
c000b961:	e9 a6 05 00 00       	jmp    c000bf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b966 <Device::getParent()>:
c000b966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b96a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b970:	c3                   	ret    
c000b971:	90                   	nop

c000b972 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b976:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b97a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b97f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b983:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b987:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b98b:	e9 e8 06 00 00       	jmp    c000c078 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b990 <Device::addChild(Device*)>:
c000b990:	53                   	push   ebx
c000b991:	83 ec 08             	sub    esp,0x8
c000b994:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b99c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b9a2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9aa:	85 d2                	test   edx,edx
c000b9ac:	74 04                	je     c000b9b2 <Device::addChild(Device*)+0x22>
c000b9ae:	89 d3                	mov    ebx,edx
c000b9b0:	eb f6                	jmp    c000b9a8 <Device::addChild(Device*)+0x18>
c000b9b2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b9b5:	83 ec 0c             	sub    esp,0xc
c000b9b8:	6a 08                	push   0x8
c000b9ba:	e8 fa bd ff ff       	call   c00077b9 <malloc>
c000b9bf:	89 03                	mov    DWORD PTR [ebx],eax
c000b9c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ce:	83 c4 18             	add    esp,0x18
c000b9d1:	5b                   	pop    ebx
c000b9d2:	c3                   	ret    
c000b9d3:	90                   	nop

c000b9d4 <Device::removeAllChildren()>:
c000b9d4:	56                   	push   esi
c000b9d5:	53                   	push   ebx
c000b9d6:	52                   	push   edx
c000b9d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9db:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b9e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9e4:	74 17                	je     c000b9fd <Device::removeAllChildren()+0x29>
c000b9e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9e9:	85 c0                	test   eax,eax
c000b9eb:	74 0c                	je     c000b9f9 <Device::removeAllChildren()+0x25>
c000b9ed:	83 ec 0c             	sub    esp,0xc
c000b9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9f2:	50                   	push   eax
c000b9f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9f6:	83 c4 10             	add    esp,0x10
c000b9f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9fb:	eb e4                	jmp    c000b9e1 <Device::removeAllChildren()+0xd>
c000b9fd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba09:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba16:	58                   	pop    eax
c000ba17:	5b                   	pop    ebx
c000ba18:	5e                   	pop    esi
c000ba19:	c3                   	ret    

c000ba1a <Device::hibernateAll()>:
c000ba1a:	53                   	push   ebx
c000ba1b:	83 ec 14             	sub    esp,0x14
c000ba1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba24:	53                   	push   ebx
c000ba25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba34:	74 0f                	je     c000ba45 <Device::hibernateAll()+0x2b>
c000ba36:	83 ec 0c             	sub    esp,0xc
c000ba39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba3c:	e8 d9 ff ff ff       	call   c000ba1a <Device::hibernateAll()>
c000ba41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba43:	eb e9                	jmp    c000ba2e <Device::hibernateAll()+0x14>
c000ba45:	83 c4 08             	add    esp,0x8
c000ba48:	5b                   	pop    ebx
c000ba49:	c3                   	ret    

c000ba4a <Device::wakeAll()>:
c000ba4a:	53                   	push   ebx
c000ba4b:	83 ec 14             	sub    esp,0x14
c000ba4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba54:	53                   	push   ebx
c000ba55:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba64:	74 0f                	je     c000ba75 <Device::wakeAll()+0x2b>
c000ba66:	83 ec 0c             	sub    esp,0xc
c000ba69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba6c:	e8 d9 ff ff ff       	call   c000ba4a <Device::wakeAll()>
c000ba71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba73:	eb e9                	jmp    c000ba5e <Device::wakeAll()+0x14>
c000ba75:	83 c4 08             	add    esp,0x8
c000ba78:	5b                   	pop    ebx
c000ba79:	c3                   	ret    

c000ba7a <Device::detectAll()>:
c000ba7a:	53                   	push   ebx
c000ba7b:	83 ec 14             	sub    esp,0x14
c000ba7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba84:	53                   	push   ebx
c000ba85:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba94:	74 0f                	je     c000baa5 <Device::detectAll()+0x2b>
c000ba96:	83 ec 0c             	sub    esp,0xc
c000ba99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba9c:	e8 d9 ff ff ff       	call   c000ba7a <Device::detectAll()>
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e9                	jmp    c000ba8e <Device::detectAll()+0x14>
c000baa5:	83 c4 08             	add    esp,0x8
c000baa8:	5b                   	pop    ebx
c000baa9:	c3                   	ret    

c000baaa <Device::disableLegacyAll()>:
c000baaa:	c3                   	ret    
c000baab:	90                   	nop

c000baac <Device::loadDriversForAll()>:
c000baac:	c3                   	ret    
c000baad:	90                   	nop

c000baae <Device::closeAll()>:
c000baae:	53                   	push   ebx
c000baaf:	83 ec 08             	sub    esp,0x8
c000bab2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bab8:	6a 00                	push   0x0
c000baba:	6a 00                	push   0x0
c000babc:	6a 00                	push   0x0
c000babe:	53                   	push   ebx
c000babf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bac2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bac8:	83 c4 10             	add    esp,0x10
c000bacb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bace:	74 0f                	je     c000badf <Device::closeAll()+0x31>
c000bad0:	83 ec 0c             	sub    esp,0xc
c000bad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bad6:	e8 d3 ff ff ff       	call   c000baae <Device::closeAll()>
c000badb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000badd:	eb e9                	jmp    c000bac8 <Device::closeAll()+0x1a>
c000badf:	83 c4 08             	add    esp,0x8
c000bae2:	5b                   	pop    ebx
c000bae3:	c3                   	ret    

c000bae4 <Device::powerSavingAll(PowerSavingLevel)>:
c000bae4:	56                   	push   esi
c000bae5:	53                   	push   ebx
c000bae6:	83 ec 0c             	sub    esp,0xc
c000bae9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000baed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000baf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baf3:	56                   	push   esi
c000baf4:	53                   	push   ebx
c000baf5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000baf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bafe:	83 c4 10             	add    esp,0x10
c000bb01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb04:	74 0f                	je     c000bb15 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb06:	52                   	push   edx
c000bb07:	52                   	push   edx
c000bb08:	56                   	push   esi
c000bb09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb0c:	e8 d3 ff ff ff       	call   c000bae4 <Device::powerSavingAll(PowerSavingLevel)>
c000bb11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb13:	eb e9                	jmp    c000bafe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb15:	58                   	pop    eax
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	c3                   	ret    
c000bb19:	90                   	nop

c000bb1a <Device::setName(char const*)>:
c000bb1a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb22:	e9 d9 4a ff ff       	jmp    c0000600 <strcpy>
c000bb27:	90                   	nop

c000bb28 <Device::Device(char const*)>:
c000bb28:	83 ec 1c             	sub    esp,0x1c
c000bb2b:	ba b0 e5 01 c0       	mov    edx,0xc001e5b0
c000bb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb34:	89 10                	mov    DWORD PTR [eax],edx
c000bb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb48:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb56:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb64:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb6e:	83 ec 08             	sub    esp,0x8
c000bb71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb79:	e8 9c ff ff ff       	call   c000bb1a <Device::setName(char const*)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb89:	83 ec 0c             	sub    esp,0xc
c000bb8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb90:	e8 24 bc ff ff       	call   c00077b9 <malloc>
c000bb95:	83 c4 10             	add    esp,0x10
c000bb98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bba5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bba9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbc3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbdf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbea:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc06:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc14:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc1e:	90                   	nop
c000bc1f:	83 c4 1c             	add    esp,0x1c
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <Device::getName()>:
c000bc24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc28:	05 d0 00 00 00       	add    eax,0xd0
c000bc2d:	c3                   	ret    

c000bc2e <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc2e:	83 ec 0c             	sub    esp,0xc
c000bc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc35:	83 ec 08             	sub    esp,0x8
c000bc38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3c:	50                   	push   eax
c000bc3d:	e8 e6 fe ff ff       	call   c000bb28 <Device::Device(char const*)>
c000bc42:	83 c4 10             	add    esp,0x10
c000bc45:	ba dc e5 01 c0       	mov    edx,0xc001e5dc
c000bc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4e:	89 10                	mov    DWORD PTR [eax],edx
c000bc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc54:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc5e:	90                   	nop
c000bc5f:	83 c4 0c             	add    esp,0xc
c000bc62:	c3                   	ret    
c000bc63:	90                   	nop

c000bc64 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc64:	57                   	push   edi
c000bc65:	56                   	push   esi
c000bc66:	53                   	push   ebx
c000bc67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc73:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc79:	75 0c                	jne    c000bc87 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc7b:	52                   	push   edx
c000bc7c:	52                   	push   edx
c000bc7d:	53                   	push   ebx
c000bc7e:	56                   	push   esi
c000bc7f:	e8 2e 10 01 00       	call   c001ccb2 <LinkedList<Device>::addElement(Device*)>
c000bc84:	83 c4 10             	add    esp,0x10
c000bc87:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc90:	74 12                	je     c000bca4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc92:	50                   	push   eax
c000bc93:	57                   	push   edi
c000bc94:	56                   	push   esi
c000bc95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc98:	e8 c7 ff ff ff       	call   c000bc64 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc9f:	83 c4 10             	add    esp,0x10
c000bca2:	eb e9                	jmp    c000bc8d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bca4:	5b                   	pop    ebx
c000bca5:	5e                   	pop    esi
c000bca6:	5f                   	pop    edi
c000bca7:	c3                   	ret    

c000bca8 <getDevicesOfType(DeviceType)>:
c000bca8:	53                   	push   ebx
c000bca9:	83 ec 14             	sub    esp,0x14
c000bcac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 d8 10 01 00       	call   c001cd8e <LinkedList<Device>::LinkedList()>
c000bcb6:	83 c4 0c             	add    esp,0xc
c000bcb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcbd:	53                   	push   ebx
c000bcbe:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000bcc4:	e8 9b ff ff ff       	call   c000bc64 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcc9:	89 d8                	mov    eax,ebx
c000bccb:	83 c4 18             	add    esp,0x18
c000bcce:	5b                   	pop    ebx
c000bccf:	c2 04 00             	ret    0x4
c000bcd2:	66 90                	xchg   ax,ax

c000bcd4 <HardDiskController::HardDiskController(char const*)>:
c000bcd4:	83 ec 0c             	sub    esp,0xc
c000bcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdb:	83 ec 08             	sub    esp,0x8
c000bcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce2:	50                   	push   eax
c000bce3:	e8 40 fe ff ff       	call   c000bb28 <Device::Device(char const*)>
c000bce8:	83 c4 10             	add    esp,0x10
c000bceb:	ba 08 e6 01 c0       	mov    edx,0xc001e608
c000bcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf4:	89 10                	mov    DWORD PTR [eax],edx
c000bcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd04:	90                   	nop
c000bd05:	83 c4 0c             	add    esp,0xc
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop
c000bd0a:	66 90                	xchg   ax,ax

c000bd0c <HardDiskController::~HardDiskController()>:
c000bd0c:	83 ec 0c             	sub    esp,0xc
c000bd0f:	ba 08 e6 01 c0       	mov    edx,0xc001e608
c000bd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd18:	89 10                	mov    DWORD PTR [eax],edx
c000bd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1e:	83 ec 0c             	sub    esp,0xc
c000bd21:	50                   	push   eax
c000bd22:	e8 6b fb ff ff       	call   c000b892 <Device::~Device()>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	90                   	nop
c000bd2b:	83 c4 0c             	add    esp,0xc
c000bd2e:	c3                   	ret    
c000bd2f:	90                   	nop

c000bd30 <HardDiskController::~HardDiskController()>:
c000bd30:	83 ec 0c             	sub    esp,0xc
c000bd33:	83 ec 0c             	sub    esp,0xc
c000bd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3a:	e8 cd ff ff ff       	call   c000bd0c <HardDiskController::~HardDiskController()>
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	83 ec 08             	sub    esp,0x8
c000bd45:	68 58 01 00 00       	push   0x158
c000bd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd4e:	e8 09 e7 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	83 c4 0c             	add    esp,0xc
c000bd59:	c3                   	ret    

c000bd5a <PhysicalDisk::eject()>:
c000bd5a:	83 c8 ff             	or     eax,0xffffffff
c000bd5d:	c3                   	ret    

c000bd5e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd5e:	83 ec 0c             	sub    esp,0xc
c000bd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd65:	83 ec 08             	sub    esp,0x8
c000bd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6c:	50                   	push   eax
c000bd6d:	e8 b6 fd ff ff       	call   c000bb28 <Device::Device(char const*)>
c000bd72:	83 c4 10             	add    esp,0x10
c000bd75:	ba 34 e6 01 c0       	mov    edx,0xc001e634
c000bd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7e:	89 10                	mov    DWORD PTR [eax],edx
c000bd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd84:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bdc0:	90                   	nop
c000bdc1:	83 c4 0c             	add    esp,0xc
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop

c000bdc6 <PhysicalDisk::startCache()>:
c000bdc6:	56                   	push   esi
c000bdc7:	53                   	push   ebx
c000bdc8:	83 ec 10             	sub    esp,0x10
c000bdcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdcf:	6a 44                	push   0x44
c000bdd1:	e8 e3 b9 ff ff       	call   c00077b9 <malloc>
c000bdd6:	89 c6                	mov    esi,eax
c000bdd8:	58                   	pop    eax
c000bdd9:	5a                   	pop    edx
c000bdda:	53                   	push   ebx
c000bddb:	56                   	push   esi
c000bddc:	e8 db 15 00 00       	call   c000d3bc <VCache::VCache(PhysicalDisk*)>
c000bde1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bde7:	83 c4 14             	add    esp,0x14
c000bdea:	5b                   	pop    ebx
c000bdeb:	5e                   	pop    esi
c000bdec:	c3                   	ret    
c000bded:	90                   	nop

c000bdee <PhysicalDisk::~PhysicalDisk()>:
c000bdee:	83 ec 0c             	sub    esp,0xc
c000bdf1:	ba 34 e6 01 c0       	mov    edx,0xc001e634
c000bdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdfa:	89 10                	mov    DWORD PTR [eax],edx
c000bdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be00:	83 ec 0c             	sub    esp,0xc
c000be03:	50                   	push   eax
c000be04:	e8 89 fa ff ff       	call   c000b892 <Device::~Device()>
c000be09:	83 c4 10             	add    esp,0x10
c000be0c:	90                   	nop
c000be0d:	83 c4 0c             	add    esp,0xc
c000be10:	c3                   	ret    
c000be11:	90                   	nop

c000be12 <PhysicalDisk::~PhysicalDisk()>:
c000be12:	83 ec 0c             	sub    esp,0xc
c000be15:	83 ec 0c             	sub    esp,0xc
c000be18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1c:	e8 cd ff ff ff       	call   c000bdee <PhysicalDisk::~PhysicalDisk()>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	83 ec 08             	sub    esp,0x8
c000be27:	68 6c 01 00 00       	push   0x16c
c000be2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be30:	e8 27 e6 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000be35:	83 c4 10             	add    esp,0x10
c000be38:	83 c4 0c             	add    esp,0xc
c000be3b:	c3                   	ret    

c000be3c <int_handler>:
c000be3c:	55                   	push   ebp
c000be3d:	57                   	push   edi
c000be3e:	56                   	push   esi
c000be3f:	53                   	push   ebx
c000be40:	83 ec 0c             	sub    esp,0xc
c000be43:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be47:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000be4e:	74 0b                	je     c000be5b <int_handler+0x1f>
c000be50:	fa                   	cli    
c000be51:	f4                   	hlt    
c000be52:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000be59:	75 f5                	jne    c000be50 <int_handler+0x14>
c000be5b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be5e:	8d 46 e0             	lea    eax,[esi-0x20]
c000be61:	83 f8 17             	cmp    eax,0x17
c000be64:	76 3e                	jbe    c000bea4 <int_handler+0x68>
c000be66:	c1 e6 04             	shl    esi,0x4
c000be69:	31 db                	xor    ebx,ebx
c000be6b:	8d ae c0 3f 02 c0    	lea    ebp,[esi-0x3ffdc040]
c000be71:	81 c6 c0 2f 02 c0    	add    esi,0xc0022fc0
c000be77:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be7b:	85 c0                	test   eax,eax
c000be7d:	74 13                	je     c000be92 <int_handler+0x56>
c000be7f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be82:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be86:	74 2a                	je     c000beb2 <int_handler+0x76>
c000be88:	83 ec 08             	sub    esp,0x8
c000be8b:	52                   	push   edx
c000be8c:	57                   	push   edi
c000be8d:	ff d0                	call   eax
c000be8f:	83 c4 10             	add    esp,0x10
c000be92:	43                   	inc    ebx
c000be93:	83 fb 04             	cmp    ebx,0x4
c000be96:	75 df                	jne    c000be77 <int_handler+0x3b>
c000be98:	83 c4 0c             	add    esp,0xc
c000be9b:	31 c0                	xor    eax,eax
c000be9d:	5b                   	pop    ebx
c000be9e:	31 d2                	xor    edx,edx
c000bea0:	5e                   	pop    esi
c000bea1:	5f                   	pop    edi
c000bea2:	5d                   	pop    ebp
c000bea3:	c3                   	ret    
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	50                   	push   eax
c000bea8:	e8 d6 99 00 00       	call   c0015883 <HalEndOfInterrupt(int)>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	eb b4                	jmp    c000be66 <int_handler+0x2a>
c000beb2:	83 ec 08             	sub    esp,0x8
c000beb5:	52                   	push   edx
c000beb6:	57                   	push   edi
c000beb7:	ff d0                	call   eax
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	83 c4 0c             	add    esp,0xc
c000bebf:	5b                   	pop    ebx
c000bec0:	5e                   	pop    esi
c000bec1:	5f                   	pop    edi
c000bec2:	5d                   	pop    ebp
c000bec3:	c3                   	ret    

c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bec4:	56                   	push   esi
c000bec5:	31 c0                	xor    eax,eax
c000bec7:	53                   	push   ebx
c000bec8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000becc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bed0:	89 ca                	mov    edx,ecx
c000bed2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bed6:	c1 e2 04             	shl    edx,0x4
c000bed9:	83 bc 82 c0 3f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdc040],0x0
c000bee1:	74 15                	je     c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bee3:	40                   	inc    eax
c000bee4:	83 f8 04             	cmp    eax,0x4
c000bee7:	75 f0                	jne    c000bed9 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bee9:	c7 44 24 0c 64 e6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e664
c000bef1:	5b                   	pop    ebx
c000bef2:	5e                   	pop    esi
c000bef3:	e9 77 43 00 00       	jmp    c001026f <KePanic(char const*)>
c000bef8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000befb:	89 1c 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],ebx
c000bf02:	89 34 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],esi
c000bf09:	5b                   	pop    ebx
c000bf0a:	5e                   	pop    esi
c000bf0b:	c3                   	ret    

c000bf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf0c:	57                   	push   edi
c000bf0d:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000bf13:	56                   	push   esi
c000bf14:	53                   	push   ebx
c000bf15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf1d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf24:	74 5b                	je     c000bf81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf26:	89 c7                	mov    edi,eax
c000bf28:	84 c0                	test   al,al
c000bf2a:	74 24                	je     c000bf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf2c:	83 fe 0f             	cmp    esi,0xf
c000bf2f:	0f 8f d9 00 00 00    	jg     c000c00e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf35:	8a 86 e0 fd 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0220]
c000bf3b:	25 ff 00 00 00       	and    eax,0xff
c000bf40:	66 8b bc 00 60 57 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffda8a0]
c000bf48:	89 c6                	mov    esi,eax
c000bf4a:	66 d1 ef             	shr    di,1
c000bf4d:	83 e7 01             	and    edi,0x1
c000bf50:	83 ec 08             	sub    esp,0x8
c000bf53:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bf58:	31 db                	xor    ebx,ebx
c000bf5a:	50                   	push   eax
c000bf5b:	68 71 e6 01 c0       	push   0xc001e671
c000bf60:	e8 ed e5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000bf65:	83 c4 10             	add    esp,0x10
c000bf68:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bf6d:	85 c0                	test   eax,eax
c000bf6f:	7f 51                	jg     c000bfc2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf71:	83 ec 0c             	sub    esp,0xc
c000bf74:	68 88 e6 01 c0       	push   0xc001e688
c000bf79:	e8 f1 42 00 00       	call   c001026f <KePanic(char const*)>
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf84:	31 d2                	xor    edx,edx
c000bf86:	89 c8                	mov    eax,ecx
c000bf88:	c1 e0 04             	shl    eax,0x4
c000bf8b:	8b 9c 90 c0 3f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdc040]
c000bf92:	85 db                	test   ebx,ebx
c000bf94:	0f 84 8b 00 00 00    	je     c000c025 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf9a:	42                   	inc    edx
c000bf9b:	83 fa 04             	cmp    edx,0x4
c000bf9e:	75 eb                	jne    c000bf8b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bfa0:	83 ec 0c             	sub    esp,0xc
c000bfa3:	68 dc e6 01 c0       	push   0xc001e6dc
c000bfa8:	e8 c2 42 00 00       	call   c001026f <KePanic(char const*)>
c000bfad:	83 c4 10             	add    esp,0x10
c000bfb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfb5:	5b                   	pop    ebx
c000bfb6:	5e                   	pop    esi
c000bfb7:	5f                   	pop    edi
c000bfb8:	c3                   	ret    
c000bfb9:	43                   	inc    ebx
c000bfba:	39 1d 60 6b 02 c0    	cmp    DWORD PTR ds:0xc0026b60,ebx
c000bfc0:	7e af                	jle    c000bf71 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bfc2:	83 ec 08             	sub    esp,0x8
c000bfc5:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000bfcc:	56                   	push   esi
c000bfcd:	50                   	push   eax
c000bfce:	e8 af fc 00 00       	call   c001bc82 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bfd3:	83 c4 10             	add    esp,0x10
c000bfd6:	84 c0                	test   al,al
c000bfd8:	74 df                	je     c000bfb9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bfda:	81 e7 ff 00 00 00    	and    edi,0xff
c000bfe0:	50                   	push   eax
c000bfe1:	8d 46 20             	lea    eax,[esi+0x20]
c000bfe4:	57                   	push   edi
c000bfe5:	25 ff 00 00 00       	and    eax,0xff
c000bfea:	6a 00                	push   0x0
c000bfec:	50                   	push   eax
c000bfed:	89 f0                	mov    eax,esi
c000bfef:	6a 00                	push   0x0
c000bff1:	25 ff 00 00 00       	and    eax,0xff
c000bff6:	6a 00                	push   0x0
c000bff8:	50                   	push   eax
c000bff9:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c000:	50                   	push   eax
c000c001:	e8 f6 fd 00 00       	call   c001bdfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c006:	83 c4 20             	add    esp,0x20
c000c009:	e9 73 ff ff ff       	jmp    c000bf81 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	31 ff                	xor    edi,edi
c000c013:	68 a4 e6 01 c0       	push   0xc001e6a4
c000c018:	e8 52 42 00 00       	call   c001026f <KePanic(char const*)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	e9 2b ff ff ff       	jmp    c000bf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c025:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c02c:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c033:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c037:	5b                   	pop    ebx
c000c038:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c03f:	89 f0                	mov    eax,esi
c000c041:	5e                   	pop    esi
c000c042:	5f                   	pop    edi
c000c043:	c3                   	ret    

c000c044 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c048:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c04c:	c1 e0 04             	shl    eax,0x4
c000c04f:	8d 50 10             	lea    edx,[eax+0x10]
c000c052:	39 88 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ecx
c000c058:	74 08                	je     c000c062 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c05a:	83 c0 04             	add    eax,0x4
c000c05d:	39 d0                	cmp    eax,edx
c000c05f:	75 f1                	jne    c000c052 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c061:	c3                   	ret    
c000c062:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c06c:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c076:	eb e2                	jmp    c000c05a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c078 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c078:	53                   	push   ebx
c000c079:	83 ec 08             	sub    esp,0x8
c000c07c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c085:	74 0e                	je     c000c095 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c087:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000c08c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c093:	75 37                	jne    c000c0cc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	83 c0 20             	add    eax,0x20
c000c09c:	c1 e0 04             	shl    eax,0x4
c000c09f:	8d 50 10             	lea    edx,[eax+0x10]
c000c0a2:	39 98 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ebx
c000c0a8:	74 0c                	je     c000c0b6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0aa:	83 c0 04             	add    eax,0x4
c000c0ad:	39 d0                	cmp    eax,edx
c000c0af:	75 f1                	jne    c000c0a2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0b1:	83 c4 08             	add    esp,0x8
c000c0b4:	5b                   	pop    ebx
c000c0b5:	c3                   	ret    
c000c0b6:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c0c0:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0ca:	eb de                	jmp    c000c0aa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0cc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c0d1:	7f 12                	jg     c000c0e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c0d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0d7:	31 c0                	xor    eax,eax
c000c0d9:	8a 81 e0 fd 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0220]
c000c0df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0e3:	eb b0                	jmp    c000c095 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	68 95 e6 01 c0       	push   0xc001e695
c000c0ed:	e8 7d 41 00 00       	call   c001026f <KePanic(char const*)>
c000c0f2:	83 c4 10             	add    esp,0x10
c000c0f5:	eb 9e                	jmp    c000c095 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0f7 <setupINTS()>:
c000c0f7:	31 c0                	xor    eax,eax
c000c0f9:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c103:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c10d:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c117:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c121:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c12b:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c135:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c13f:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c149:	83 c0 10             	add    eax,0x10
c000c14c:	3d 00 10 00 00       	cmp    eax,0x1000
c000c151:	75 a6                	jne    c000c0f9 <setupINTS()+0x2>
c000c153:	c3                   	ret    

c000c154 <convertLegacyIRQNumber(int)>:
c000c154:	83 ec 0c             	sub    esp,0xc
c000c157:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000c15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c161:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c168:	74 0f                	je     c000c179 <convertLegacyIRQNumber(int)+0x25>
c000c16a:	83 f8 0f             	cmp    eax,0xf
c000c16d:	7f 0e                	jg     c000c17d <convertLegacyIRQNumber(int)+0x29>
c000c16f:	31 c9                	xor    ecx,ecx
c000c171:	8a 88 e0 fd 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0220]
c000c177:	89 c8                	mov    eax,ecx
c000c179:	83 c4 0c             	add    esp,0xc
c000c17c:	c3                   	ret    
c000c17d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c181:	83 ec 0c             	sub    esp,0xc
c000c184:	68 a4 e6 01 c0       	push   0xc001e6a4
c000c189:	e8 e1 40 00 00       	call   c001026f <KePanic(char const*)>
c000c18e:	83 c4 10             	add    esp,0x10
c000c191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c195:	83 c4 0c             	add    esp,0xc
c000c198:	c3                   	ret    
c000c199:	90                   	nop

c000c19a <startGUI(void*)>:
c000c19a:	55                   	push   ebp
c000c19b:	89 e5                	mov    ebp,esp
c000c19d:	53                   	push   ebx
c000c19e:	83 ec 04             	sub    esp,0x4
c000c1a1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c1a6:	48                   	dec    eax
c000c1a7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c1ac:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c1b1:	85 c0                	test   eax,eax
c000c1b3:	75 01                	jne    c000c1b6 <startGUI(void*)+0x1c>
c000c1b5:	fb                   	sti    
c000c1b6:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c1bc:	83 ec 08             	sub    esp,0x8
c000c1bf:	6a 01                	push   0x1
c000c1c1:	68 01 e7 01 c0       	push   0xc001e701
c000c1c6:	e8 9f 6b 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000c1cb:	83 c4 10             	add    esp,0x10
c000c1ce:	83 ec 08             	sub    esp,0x8
c000c1d1:	53                   	push   ebx
c000c1d2:	50                   	push   eax
c000c1d3:	e8 c3 6d 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000c1d8:	83 c4 10             	add    esp,0x10
c000c1db:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c1e1:	83 ec 08             	sub    esp,0x8
c000c1e4:	6a 01                	push   0x1
c000c1e6:	68 1b e7 01 c0       	push   0xc001e71b
c000c1eb:	e8 7a 6b 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	83 ec 08             	sub    esp,0x8
c000c1f6:	53                   	push   ebx
c000c1f7:	50                   	push   eax
c000c1f8:	e8 9e 6d 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000c1fd:	83 c4 10             	add    esp,0x10
c000c200:	90                   	nop
c000c201:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c204:	c9                   	leave  
c000c205:	c3                   	ret    

c000c206 <startGUIVESA(void*)>:
c000c206:	55                   	push   ebp
c000c207:	89 e5                	mov    ebp,esp
c000c209:	53                   	push   ebx
c000c20a:	83 ec 04             	sub    esp,0x4
c000c20d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c212:	48                   	dec    eax
c000c213:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c218:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c21d:	85 c0                	test   eax,eax
c000c21f:	75 01                	jne    c000c222 <startGUIVESA(void*)+0x1c>
c000c221:	fb                   	sti    
c000c222:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c228:	83 ec 08             	sub    esp,0x8
c000c22b:	6a 01                	push   0x1
c000c22d:	68 39 e7 01 c0       	push   0xc001e739
c000c232:	e8 33 6b 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000c237:	83 c4 10             	add    esp,0x10
c000c23a:	83 ec 08             	sub    esp,0x8
c000c23d:	53                   	push   ebx
c000c23e:	50                   	push   eax
c000c23f:	e8 57 6d 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000c244:	83 c4 10             	add    esp,0x10
c000c247:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c24d:	83 ec 08             	sub    esp,0x8
c000c250:	6a 01                	push   0x1
c000c252:	68 1b e7 01 c0       	push   0xc001e71b
c000c257:	e8 0e 6b 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000c25c:	83 c4 10             	add    esp,0x10
c000c25f:	83 ec 08             	sub    esp,0x8
c000c262:	53                   	push   ebx
c000c263:	50                   	push   eax
c000c264:	e8 32 6d 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000c269:	83 c4 10             	add    esp,0x10
c000c26c:	90                   	nop
c000c26d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c270:	c9                   	leave  
c000c271:	c3                   	ret    

c000c272 <sendKeyToTerminal(unsigned char)>:
c000c272:	55                   	push   ebp
c000c273:	89 e5                	mov    ebp,esp
c000c275:	83 ec 28             	sub    esp,0x28
c000c278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c27b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c27e:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000c284:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c287:	25 ff 00 00 00       	and    eax,0xff
c000c28c:	83 ec 08             	sub    esp,0x8
c000c28f:	50                   	push   eax
c000c290:	52                   	push   edx
c000c291:	e8 b4 c7 ff ff       	call   c0008a4a <VgaText::receiveKey(unsigned char)>
c000c296:	83 c4 10             	add    esp,0x10
c000c299:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c29d:	74 0a                	je     c000c2a9 <sendKeyToTerminal(unsigned char)+0x37>
c000c29f:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c2a3:	0f 85 8f 00 00 00    	jne    c000c338 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2a9:	fa                   	cli    
c000c2aa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2af:	40                   	inc    eax
c000c2b0:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c2b5:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c2ba:	40                   	inc    eax
c000c2bb:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c2c0:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c000c2c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2c8:	c7 05 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024fc0,0x0
c000c2d2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c2d6:	74 1f                	je     c000c2f7 <sendKeyToTerminal(unsigned char)+0x85>
c000c2d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c2db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c2de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c2e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c2e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2e7:	83 ec 0c             	sub    esp,0xc
c000c2ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c2ed:	e8 66 79 00 00       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c000c2f2:	83 c4 10             	add    esp,0x10
c000c2f5:	eb db                	jmp    c000c2d2 <sendKeyToTerminal(unsigned char)+0x60>
c000c2f7:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c2fc:	48                   	dec    eax
c000c2fd:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c302:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c307:	85 c0                	test   eax,eax
c000c309:	75 18                	jne    c000c323 <sendKeyToTerminal(unsigned char)+0xb1>
c000c30b:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000c310:	85 c0                	test   eax,eax
c000c312:	74 0f                	je     c000c323 <sendKeyToTerminal(unsigned char)+0xb1>
c000c314:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000c31e:	e8 71 74 00 00       	call   c0013794 <schedule()>
c000c323:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c328:	48                   	dec    eax
c000c329:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c32e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c333:	85 c0                	test   eax,eax
c000c335:	75 01                	jne    c000c338 <sendKeyToTerminal(unsigned char)+0xc6>
c000c337:	fb                   	sti    
c000c338:	90                   	nop
c000c339:	c9                   	leave  
c000c33a:	c3                   	ret    

c000c33b <sendKeyboardToken(KeyboardToken)>:
c000c33b:	55                   	push   ebp
c000c33c:	89 e5                	mov    ebp,esp
c000c33e:	83 ec 18             	sub    esp,0x18
c000c341:	e8 79 3f 00 00       	call   c00102bf <Krnl::userIOReceived()>
c000c346:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34c:	25 ff ff 00 00       	and    eax,0xffff
c000c351:	83 f2 01             	xor    edx,0x1
c000c354:	88 90 e0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb020],dl
c000c35a:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c35f:	85 c0                	test   eax,eax
c000c361:	74 24                	je     c000c387 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c363:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c369:	83 ec 04             	sub    esp,0x4
c000c36c:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c371:	83 ec 08             	sub    esp,0x8
c000c374:	89 e2                	mov    edx,esp
c000c376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c379:	89 02                	mov    DWORD PTR [edx],eax
c000c37b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c37e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c382:	ff d1                	call   ecx
c000c384:	83 c4 10             	add    esp,0x10
c000c387:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c38b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c38e:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c393:	38 c2                	cmp    dl,al
c000c395:	74 1e                	je     c000c3b5 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c397:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c39a:	a2 e8 53 02 c0       	mov    ds:0xc00253e8,al
c000c39f:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c3a4:	25 ff 00 00 00       	and    eax,0xff
c000c3a9:	83 ec 0c             	sub    esp,0xc
c000c3ac:	50                   	push   eax
c000c3ad:	e8 e6 bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c3b8:	84 c0                	test   al,al
c000c3ba:	0f 84 ae 00 00 00    	je     c000c46e <sendKeyboardToken(KeyboardToken)+0x133>
c000c3c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c3:	66 3d 10 03          	cmp    ax,0x310
c000c3c7:	75 06                	jne    c000c3cf <sendKeyboardToken(KeyboardToken)+0x94>
c000c3c9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d2:	66 3d 11 03          	cmp    ax,0x311
c000c3d6:	75 06                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0xa3>
c000c3d8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 12 03          	cmp    ax,0x312
c000c3e5:	75 06                	jne    c000c3ed <sendKeyboardToken(KeyboardToken)+0xb2>
c000c3e7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f0:	66 3d 13 03          	cmp    ax,0x313
c000c3f4:	75 06                	jne    c000c3fc <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3f6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ff:	66 3d 14 03          	cmp    ax,0x314
c000c403:	75 06                	jne    c000c40b <sendKeyboardToken(KeyboardToken)+0xd0>
c000c405:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40e:	66 3d 15 03          	cmp    ax,0x315
c000c412:	75 06                	jne    c000c41a <sendKeyboardToken(KeyboardToken)+0xdf>
c000c414:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41d:	66 3d 16 03          	cmp    ax,0x316
c000c421:	75 06                	jne    c000c429 <sendKeyboardToken(KeyboardToken)+0xee>
c000c423:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42c:	66 3d 17 03          	cmp    ax,0x317
c000c430:	75 06                	jne    c000c438 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c432:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43b:	66 3d 18 03          	cmp    ax,0x318
c000c43f:	75 06                	jne    c000c447 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c441:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44a:	66 3d 19 03          	cmp    ax,0x319
c000c44e:	75 06                	jne    c000c456 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c450:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c459:	66 3d 1a 03          	cmp    ax,0x31a
c000c45d:	0f 85 c9 00 00 00    	jne    c000c52c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c463:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c469:	e9 be 00 00 00       	jmp    c000c52c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c46e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c471:	66 3d 10 03          	cmp    ax,0x310
c000c475:	75 0a                	jne    c000c481 <sendKeyboardToken(KeyboardToken)+0x146>
c000c477:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c47d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c484:	66 3d 11 03          	cmp    ax,0x311
c000c488:	75 0a                	jne    c000c494 <sendKeyboardToken(KeyboardToken)+0x159>
c000c48a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c490:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c497:	66 3d 12 03          	cmp    ax,0x312
c000c49b:	75 0a                	jne    c000c4a7 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c49d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c4a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4aa:	66 3d 13 03          	cmp    ax,0x313
c000c4ae:	75 0a                	jne    c000c4ba <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4b0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c4b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bd:	66 3d 14 03          	cmp    ax,0x314
c000c4c1:	75 0a                	jne    c000c4cd <sendKeyboardToken(KeyboardToken)+0x192>
c000c4c3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d0:	66 3d 15 03          	cmp    ax,0x315
c000c4d4:	75 0a                	jne    c000c4e0 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c4d6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e3:	66 3d 16 03          	cmp    ax,0x316
c000c4e7:	75 0a                	jne    c000c4f3 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c4e9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f6:	66 3d 17 03          	cmp    ax,0x317
c000c4fa:	75 0a                	jne    c000c506 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4fc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c502:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c509:	66 3d 18 03          	cmp    ax,0x318
c000c50d:	75 0a                	jne    c000c519 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c50f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c515:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51c:	66 3d 19 03          	cmp    ax,0x319
c000c520:	75 0a                	jne    c000c52c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c522:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c528:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52f:	66 3d 00 02          	cmp    ax,0x200
c000c533:	75 2c                	jne    c000c561 <sendKeyboardToken(KeyboardToken)+0x226>
c000c535:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c53a:	83 f0 01             	xor    eax,0x1
c000c53d:	84 c0                	test   al,al
c000c53f:	74 20                	je     c000c561 <sendKeyboardToken(KeyboardToken)+0x226>
c000c541:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c546:	6a 01                	push   0x1
c000c548:	6a 00                	push   0x0
c000c54a:	68 9a c1 00 c0       	push   0xc000c19a
c000c54f:	50                   	push   eax
c000c550:	e8 1f 70 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c55f:	eb 33                	jmp    c000c594 <sendKeyboardToken(KeyboardToken)+0x259>
c000c561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c564:	66 3d 01 02          	cmp    ax,0x201
c000c568:	75 2a                	jne    c000c594 <sendKeyboardToken(KeyboardToken)+0x259>
c000c56a:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c56f:	83 f0 01             	xor    eax,0x1
c000c572:	84 c0                	test   al,al
c000c574:	74 1e                	je     c000c594 <sendKeyboardToken(KeyboardToken)+0x259>
c000c576:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c57b:	6a 01                	push   0x1
c000c57d:	6a 00                	push   0x0
c000c57f:	68 06 c2 00 c0       	push   0xc000c206
c000c584:	50                   	push   eax
c000c585:	e8 ea 6f 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c000c58a:	83 c4 10             	add    esp,0x10
c000c58d:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c597:	66 3d 1d 03          	cmp    ax,0x31d
c000c59b:	75 06                	jne    c000c5a3 <sendKeyboardToken(KeyboardToken)+0x268>
c000c59d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a6:	66 3d 1c 03          	cmp    ax,0x31c
c000c5aa:	75 06                	jne    c000c5b2 <sendKeyboardToken(KeyboardToken)+0x277>
c000c5ac:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b5:	66 3d 1b 03          	cmp    ax,0x31b
c000c5b9:	75 06                	jne    c000c5c1 <sendKeyboardToken(KeyboardToken)+0x286>
c000c5bb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c4:	66 3d 1e 03          	cmp    ax,0x31e
c000c5c8:	75 06                	jne    c000c5d0 <sendKeyboardToken(KeyboardToken)+0x295>
c000c5ca:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d3:	66 3d 1f 03          	cmp    ax,0x31f
c000c5d7:	75 06                	jne    c000c5df <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c5d9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e2:	66 3d 1a 03          	cmp    ax,0x31a
c000c5e6:	75 06                	jne    c000c5ee <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c5e8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5ee:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5f2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5f5:	83 f0 01             	xor    eax,0x1
c000c5f8:	84 c0                	test   al,al
c000c5fa:	74 7b                	je     c000c677 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5fc:	a0 e1 50 02 c0       	mov    al,ds:0xc00250e1
c000c601:	84 c0                	test   al,al
c000c603:	74 43                	je     c000c648 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c605:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c609:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c60d:	74 2d                	je     c000c63c <sendKeyboardToken(KeyboardToken)+0x301>
c000c60f:	8b 15 e4 53 02 c0    	mov    edx,DWORD PTR ds:0xc00253e4
c000c615:	89 d0                	mov    eax,edx
c000c617:	c1 e0 02             	shl    eax,0x2
c000c61a:	01 d0                	add    eax,edx
c000c61c:	01 c0                	add    eax,eax
c000c61e:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c626:	25 ff ff 00 00       	and    eax,0xffff
c000c62b:	8d 50 d0             	lea    edx,[eax-0x30]
c000c62e:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c633:	01 d0                	add    eax,edx
c000c635:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c63a:	eb 71                	jmp    c000c6ad <sendKeyboardToken(KeyboardToken)+0x372>
c000c63c:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c646:	eb 65                	jmp    c000c6ad <sendKeyboardToken(KeyboardToken)+0x372>
c000c648:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c64d:	85 c0                	test   eax,eax
c000c64f:	74 1a                	je     c000c66b <sendKeyboardToken(KeyboardToken)+0x330>
c000c651:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c656:	25 ff 00 00 00       	and    eax,0xff
c000c65b:	83 ec 0c             	sub    esp,0xc
c000c65e:	50                   	push   eax
c000c65f:	e8 0e fc ff ff       	call   c000c272 <sendKeyToTerminal(unsigned char)>
c000c664:	83 c4 10             	add    esp,0x10
c000c667:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c66b:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c675:	eb 36                	jmp    c000c6ad <sendKeyboardToken(KeyboardToken)+0x372>
c000c677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67a:	66 3d 01 01          	cmp    ax,0x101
c000c67e:	75 2d                	jne    c000c6ad <sendKeyboardToken(KeyboardToken)+0x372>
c000c680:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c685:	85 c0                	test   eax,eax
c000c687:	74 1a                	je     c000c6a3 <sendKeyboardToken(KeyboardToken)+0x368>
c000c689:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c68e:	25 ff 00 00 00       	and    eax,0xff
c000c693:	83 ec 0c             	sub    esp,0xc
c000c696:	50                   	push   eax
c000c697:	e8 d6 fb ff ff       	call   c000c272 <sendKeyToTerminal(unsigned char)>
c000c69c:	83 c4 10             	add    esp,0x10
c000c69f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6a3:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c6ad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6b0:	83 f0 01             	xor    eax,0x1
c000c6b3:	84 c0                	test   al,al
c000c6b5:	74 4e                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ba:	83 f0 01             	xor    eax,0x1
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 44                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6c1:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c6c6:	83 f0 01             	xor    eax,0x1
c000c6c9:	84 c0                	test   al,al
c000c6cb:	74 38                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d0:	66 83 f8 1f          	cmp    ax,0x1f
c000c6d4:	76 09                	jbe    c000c6df <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d9:	66 83 f8 7e          	cmp    ax,0x7e
c000c6dd:	76 12                	jbe    c000c6f1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e2:	66 83 f8 0a          	cmp    ax,0xa
c000c6e6:	74 09                	je     c000c6f1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6eb:	66 83 f8 08          	cmp    ax,0x8
c000c6ef:	75 14                	jne    c000c705 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f4:	25 ff 00 00 00       	and    eax,0xff
c000c6f9:	83 ec 0c             	sub    esp,0xc
c000c6fc:	50                   	push   eax
c000c6fd:	e8 70 fb ff ff       	call   c000c272 <sendKeyToTerminal(unsigned char)>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c708:	83 f0 01             	xor    eax,0x1
c000c70b:	84 c0                	test   al,al
c000c70d:	74 51                	je     c000c760 <sendKeyboardToken(KeyboardToken)+0x425>
c000c70f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c712:	83 f0 01             	xor    eax,0x1
c000c715:	84 c0                	test   al,al
c000c717:	74 47                	je     c000c760 <sendKeyboardToken(KeyboardToken)+0x425>
c000c719:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c71e:	84 c0                	test   al,al
c000c720:	74 3e                	je     c000c760 <sendKeyboardToken(KeyboardToken)+0x425>
c000c722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c725:	66 83 f8 3f          	cmp    ax,0x3f
c000c729:	76 35                	jbe    c000c760 <sendKeyboardToken(KeyboardToken)+0x425>
c000c72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72e:	66 83 f8 7f          	cmp    ax,0x7f
c000c732:	77 2c                	ja     c000c760 <sendKeyboardToken(KeyboardToken)+0x425>
c000c734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c737:	88 c2                	mov    dl,al
c000c739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c73c:	66 83 f8 5f          	cmp    ax,0x5f
c000c740:	76 04                	jbe    c000c746 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c742:	b0 20                	mov    al,0x20
c000c744:	eb 02                	jmp    c000c748 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c746:	b0 00                	mov    al,0x0
c000c748:	29 c2                	sub    edx,eax
c000c74a:	88 d0                	mov    al,dl
c000c74c:	83 e8 40             	sub    eax,0x40
c000c74f:	25 ff 00 00 00       	and    eax,0xff
c000c754:	83 ec 0c             	sub    esp,0xc
c000c757:	50                   	push   eax
c000c758:	e8 15 fb ff ff       	call   c000c272 <sendKeyToTerminal(unsigned char)>
c000c75d:	83 c4 10             	add    esp,0x10
c000c760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c763:	66 3d 00 03          	cmp    ax,0x300
c000c767:	75 0f                	jne    c000c778 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c769:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c76c:	83 f0 01             	xor    eax,0x1
c000c76f:	84 c0                	test   al,al
c000c771:	74 05                	je     c000c778 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c773:	e8 21 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c778:	90                   	nop
c000c779:	c9                   	leave  
c000c77a:	c3                   	ret    

c000c77b <clearInternalKeybuffer(VgaText*)>:
c000c77b:	55                   	push   ebp
c000c77c:	89 e5                	mov    ebp,esp
c000c77e:	83 ec 08             	sub    esp,0x8
c000c781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c784:	05 02 01 00 00       	add    eax,0x102
c000c789:	83 ec 0c             	sub    esp,0xc
c000c78c:	50                   	push   eax
c000c78d:	e8 ae 3d ff ff       	call   c0000540 <strlen>
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c798:	81 c2 02 01 00 00    	add    edx,0x102
c000c79e:	83 ec 04             	sub    esp,0x4
c000c7a1:	50                   	push   eax
c000c7a2:	6a 00                	push   0x0
c000c7a4:	52                   	push   edx
c000c7a5:	e8 26 3d ff ff       	call   c00004d0 <memset>
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	90                   	nop
c000c7ae:	c9                   	leave  
c000c7af:	c3                   	ret    

c000c7b0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7b0:	55                   	push   ebp
c000c7b1:	89 e5                	mov    ebp,esp
c000c7b3:	83 ec 18             	sub    esp,0x18
c000c7b6:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c7bb:	85 c0                	test   eax,eax
c000c7bd:	74 2a                	je     c000c7e9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c7bf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7c5:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c7cb:	83 ec 04             	sub    esp,0x4
c000c7ce:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c7d3:	83 ec 08             	sub    esp,0x8
c000c7d6:	89 e2                	mov    edx,esp
c000c7d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c7db:	89 02                	mov    DWORD PTR [edx],eax
c000c7dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7e0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7e4:	ff d1                	call   ecx
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	fb                   	sti    
c000c7ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7f1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7f5:	0f 84 cb 00 00 00    	je     c000c8c6 <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fe:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c804:	84 c0                	test   al,al
c000c806:	75 28                	jne    c000c830 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c808:	fa                   	cli    
c000c809:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c80e:	40                   	inc    eax
c000c80f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c814:	e8 7b 6f 00 00       	call   c0013794 <schedule()>
c000c819:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c81e:	48                   	dec    eax
c000c81f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c824:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c829:	85 c0                	test   eax,eax
c000c82b:	75 ce                	jne    c000c7fb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c82d:	fb                   	sti    
c000c82e:	eb cb                	jmp    c000c7fb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c833:	8d 50 01             	lea    edx,[eax+0x1]
c000c836:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c839:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c83c:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c842:	88 10                	mov    BYTE PTR [eax],dl
c000c844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c847:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c84d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c850:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c854:	75 1e                	jne    c000c874 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c856:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c85b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c85d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c860:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c866:	83 ec 08             	sub    esp,0x8
c000c869:	6a 02                	push   0x2
c000c86b:	50                   	push   eax
c000c86c:	e8 ea 3d 00 00       	call   c001065b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c871:	83 c4 10             	add    esp,0x10
c000c874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c877:	05 02 01 00 00       	add    eax,0x102
c000c87c:	83 ec 0c             	sub    esp,0xc
c000c87f:	50                   	push   eax
c000c880:	e8 bb 3c ff ff       	call   c0000540 <strlen>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c88b:	81 c2 02 01 00 00    	add    edx,0x102
c000c891:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c894:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c897:	81 c2 02 01 00 00    	add    edx,0x102
c000c89d:	83 ec 04             	sub    esp,0x4
c000c8a0:	50                   	push   eax
c000c8a1:	51                   	push   ecx
c000c8a2:	52                   	push   edx
c000c8a3:	e8 38 3b ff ff       	call   c00003e0 <memmove>
c000c8a8:	83 c4 10             	add    esp,0x10
c000c8ab:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8b1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8b5:	74 0a                	je     c000c8c1 <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c8b7:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8bb:	0f 85 30 ff ff ff    	jne    c000c7f1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c8c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8c4:	eb 03                	jmp    c000c8c9 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c8c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8c9:	c9                   	leave  
c000c8ca:	c3                   	ret    
c000c8cb:	90                   	nop

c000c8cc <Keyboard::Keyboard(char const*)>:
c000c8cc:	83 ec 0c             	sub    esp,0xc
c000c8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8d3:	83 ec 08             	sub    esp,0x8
c000c8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8da:	50                   	push   eax
c000c8db:	e8 48 f2 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	ba 5c e7 01 c0       	mov    edx,0xc001e75c
c000c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ec:	89 10                	mov    DWORD PTR [eax],edx
c000c8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c8fc:	c6 05 c4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fc4,0x1
c000c903:	90                   	nop
c000c904:	83 c4 0c             	add    esp,0xc
c000c907:	c3                   	ret    

c000c908 <Keyboard::~Keyboard()>:
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	ba 5c e7 01 c0       	mov    edx,0xc001e75c
c000c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c914:	89 10                	mov    DWORD PTR [eax],edx
c000c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91a:	83 ec 0c             	sub    esp,0xc
c000c91d:	50                   	push   eax
c000c91e:	e8 6f ef ff ff       	call   c000b892 <Device::~Device()>
c000c923:	83 c4 10             	add    esp,0x10
c000c926:	90                   	nop
c000c927:	83 c4 0c             	add    esp,0xc
c000c92a:	c3                   	ret    
c000c92b:	90                   	nop

c000c92c <Keyboard::~Keyboard()>:
c000c92c:	83 ec 0c             	sub    esp,0xc
c000c92f:	83 ec 0c             	sub    esp,0xc
c000c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c936:	e8 cd ff ff ff       	call   c000c908 <Keyboard::~Keyboard()>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	83 ec 08             	sub    esp,0x8
c000c941:	68 5c 01 00 00       	push   0x15c
c000c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94a:	e8 0d db ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	83 c4 0c             	add    esp,0xc
c000c955:	c3                   	ret    

c000c956 <LogicalDisk::close(int, int, void*)>:
c000c956:	83 c8 ff             	or     eax,0xffffffff
c000c959:	c3                   	ret    

c000c95a <LogicalDisk::~LogicalDisk()>:
c000c95a:	83 ec 0c             	sub    esp,0xc
c000c95d:	ba d4 e7 01 c0       	mov    edx,0xc001e7d4
c000c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c966:	89 10                	mov    DWORD PTR [eax],edx
c000c968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	50                   	push   eax
c000c970:	e8 1d ef ff ff       	call   c000b892 <Device::~Device()>
c000c975:	83 c4 10             	add    esp,0x10
c000c978:	90                   	nop
c000c979:	83 c4 0c             	add    esp,0xc
c000c97c:	c3                   	ret    
c000c97d:	90                   	nop

c000c97e <LogicalDisk::~LogicalDisk()>:
c000c97e:	83 ec 0c             	sub    esp,0xc
c000c981:	83 ec 0c             	sub    esp,0xc
c000c984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c988:	e8 cd ff ff ff       	call   c000c95a <LogicalDisk::~LogicalDisk()>
c000c98d:	83 c4 10             	add    esp,0x10
c000c990:	83 ec 08             	sub    esp,0x8
c000c993:	68 74 01 00 00       	push   0x174
c000c998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99c:	e8 bb da ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000c9a1:	83 c4 10             	add    esp,0x10
c000c9a4:	83 c4 0c             	add    esp,0xc
c000c9a7:	c3                   	ret    

c000c9a8 <LogicalDisk::open(int, int, void*)>:
c000c9a8:	83 ec 18             	sub    esp,0x18
c000c9ab:	68 88 e7 01 c0       	push   0xc001e788
c000c9b0:	e8 ba 38 00 00       	call   c001026f <KePanic(char const*)>
c000c9b5:	83 c8 ff             	or     eax,0xffffffff
c000c9b8:	83 c4 1c             	add    esp,0x1c
c000c9bb:	c3                   	ret    

c000c9bc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9bc:	53                   	push   ebx
c000c9bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9c9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c9cf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c9d5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c9db:	77 10                	ja     c000c9ed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c9dd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c9e3:	89 d3                	mov    ebx,edx
c000c9e5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c9eb:	72 05                	jb     c000c9f2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c9ed:	83 c8 ff             	or     eax,0xffffffff
c000c9f0:	89 c2                	mov    edx,eax
c000c9f2:	5b                   	pop    ebx
c000c9f3:	c3                   	ret    

c000c9f4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c9f4:	56                   	push   esi
c000c9f5:	83 c8 ff             	or     eax,0xffffffff
c000c9f8:	53                   	push   ebx
c000c9f9:	89 c2                	mov    edx,eax
c000c9fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c9ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca0d:	77 27                	ja     c000ca36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca0f:	89 d8                	mov    eax,ebx
c000ca11:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca17:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca22:	89 c2                	mov    edx,eax
c000ca24:	73 10                	jae    c000ca36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca26:	89 c8                	mov    eax,ecx
c000ca28:	89 da                	mov    edx,ebx
c000ca2a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca30:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca36:	5b                   	pop    ebx
c000ca37:	5e                   	pop    esi
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca3a:	83 ec 1c             	sub    esp,0x1c
c000ca3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca51:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca60:	83 ec 08             	sub    esp,0x8
c000ca63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca67:	50                   	push   eax
c000ca68:	e8 bb f0 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000ca6d:	83 c4 10             	add    esp,0x10
c000ca70:	ba d4 e7 01 c0       	mov    edx,0xc001e7d4
c000ca75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca79:	89 10                	mov    DWORD PTR [eax],edx
c000ca7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca8a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca95:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca9f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cab1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cab7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cabb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cabe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cac2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cac8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cad6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000caea:	90                   	nop
c000caeb:	83 c4 1c             	add    esp,0x1c
c000caee:	c3                   	ret    
c000caef:	90                   	nop

c000caf0 <LogicalDisk::assignDriveLetter()>:
c000caf0:	55                   	push   ebp
c000caf1:	57                   	push   edi
c000caf2:	56                   	push   esi
c000caf3:	53                   	push   ebx
c000caf4:	83 ec 14             	sub    esp,0x14
c000caf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cafb:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c000cb01:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb0b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb11:	8b 3d 04 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025404
c000cb17:	3c 01                	cmp    al,0x1
c000cb19:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb1d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb21:	19 c0                	sbb    eax,eax
c000cb23:	83 e0 02             	and    eax,0x2
c000cb26:	83 c0 41             	add    eax,0x41
c000cb29:	0f be e8             	movsx  ebp,al
c000cb2c:	3c 43                	cmp    al,0x43
c000cb2e:	75 10                	jne    c000cb40 <LogicalDisk::assignDriveLetter()+0x50>
c000cb30:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb37:	75 5d                	jne    c000cb96 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb39:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb3e:	75 56                	jne    c000cb96 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb40:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb43:	ba 01 00 00 00       	mov    edx,0x1
c000cb48:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb4c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb50:	d3 e2                	shl    edx,cl
c000cb52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb56:	89 d7                	mov    edi,edx
c000cb58:	89 d6                	mov    esi,edx
c000cb5a:	c1 ff 1f             	sar    edi,0x1f
c000cb5d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb61:	21 f9                	and    ecx,edi
c000cb63:	09 d1                	or     ecx,edx
c000cb65:	75 2f                	jne    c000cb96 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb67:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb6f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb75:	09 f2                	or     edx,esi
c000cb77:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c000cb7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb81:	09 fa                	or     edx,edi
c000cb83:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb87:	89 15 04 54 02 c0    	mov    DWORD PTR ds:0xc0025404,edx
c000cb8d:	89 1c bd 20 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabe0],ebx
c000cb94:	eb 08                	jmp    c000cb9e <LogicalDisk::assignDriveLetter()+0xae>
c000cb96:	45                   	inc    ebp
c000cb97:	40                   	inc    eax
c000cb98:	3c 5b                	cmp    al,0x5b
c000cb9a:	75 90                	jne    c000cb2c <LogicalDisk::assignDriveLetter()+0x3c>
c000cb9c:	31 c0                	xor    eax,eax
c000cb9e:	83 c4 14             	add    esp,0x14
c000cba1:	5b                   	pop    ebx
c000cba2:	5e                   	pop    esi
c000cba3:	5f                   	pop    edi
c000cba4:	5d                   	pop    ebp
c000cba5:	c3                   	ret    

c000cba6 <LogicalDisk::mount()>:
c000cba6:	56                   	push   esi
c000cba7:	53                   	push   ebx
c000cba8:	53                   	push   ebx
c000cba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbad:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c000cbb3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cbbd:	85 db                	test   ebx,ebx
c000cbbf:	74 27                	je     c000cbe8 <LogicalDisk::mount()+0x42>
c000cbc1:	51                   	push   ecx
c000cbc2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cbc9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cbcb:	83 e8 41             	sub    eax,0x41
c000cbce:	50                   	push   eax
c000cbcf:	56                   	push   esi
c000cbd0:	53                   	push   ebx
c000cbd1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cbd4:	83 c4 10             	add    esp,0x10
c000cbd7:	84 c0                	test   al,al
c000cbd9:	74 08                	je     c000cbe3 <LogicalDisk::mount()+0x3d>
c000cbdb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cbe1:	eb 07                	jmp    c000cbea <LogicalDisk::mount()+0x44>
c000cbe3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cbe6:	eb d5                	jmp    c000cbbd <LogicalDisk::mount()+0x17>
c000cbe8:	31 c0                	xor    eax,eax
c000cbea:	5a                   	pop    edx
c000cbeb:	5b                   	pop    ebx
c000cbec:	5e                   	pop    esi
c000cbed:	c3                   	ret    

c000cbee <LogicalDisk::unmount()>:
c000cbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbf2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cbfc:	c3                   	ret    
c000cbfd:	90                   	nop

c000cbfe <LogicalDisk::eject()>:
c000cbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc08:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc0e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc11:	90                   	nop

c000cc12 <LogicalDisk::unassignDriveLetter()>:
c000cc12:	57                   	push   edi
c000cc13:	56                   	push   esi
c000cc14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc18:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc1f:	84 c9                	test   cl,cl
c000cc21:	75 0f                	jne    c000cc32 <LogicalDisk::unassignDriveLetter()+0x20>
c000cc23:	c7 44 24 0c ac e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e7ac
c000cc2b:	5e                   	pop    esi
c000cc2c:	5f                   	pop    edi
c000cc2d:	e9 3d 36 00 00       	jmp    c001026f <KePanic(char const*)>
c000cc32:	83 e9 41             	sub    ecx,0x41
c000cc35:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc3c:	b8 01 00 00 00       	mov    eax,0x1
c000cc41:	c7 04 8d 20 54 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdabe0],0x0
c000cc4c:	d3 e0                	shl    eax,cl
c000cc4e:	89 c7                	mov    edi,eax
c000cc50:	f7 d0                	not    eax
c000cc52:	c1 ff 1f             	sar    edi,0x1f
c000cc55:	21 05 00 54 02 c0    	and    DWORD PTR ds:0xc0025400,eax
c000cc5b:	89 fe                	mov    esi,edi
c000cc5d:	f7 d6                	not    esi
c000cc5f:	21 35 04 54 02 c0    	and    DWORD PTR ds:0xc0025404,esi
c000cc65:	5e                   	pop    esi
c000cc66:	5f                   	pop    edi
c000cc67:	c3                   	ret    

c000cc68 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc68:	57                   	push   edi
c000cc69:	56                   	push   esi
c000cc6a:	53                   	push   ebx
c000cc6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc81:	77 41                	ja     c000ccc4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc83:	99                   	cdq    
c000cc84:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc8a:	01 c8                	add    eax,ecx
c000cc8c:	11 da                	adc    edx,ebx
c000cc8e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc94:	19 d7                	sbb    edi,edx
c000cc96:	72 33                	jb     c000cccb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc98:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc9e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cca4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cca8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbc:	5b                   	pop    ebx
c000ccbd:	5e                   	pop    esi
c000ccbe:	5f                   	pop    edi
c000ccbf:	e9 56 0a 00 00       	jmp    c000d71a <VCache::read(unsigned long long, int, void*)>
c000ccc4:	b8 05 00 00 00       	mov    eax,0x5
c000ccc9:	eb 05                	jmp    c000ccd0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cccb:	b8 07 00 00 00       	mov    eax,0x7
c000ccd0:	5b                   	pop    ebx
c000ccd1:	5e                   	pop    esi
c000ccd2:	5f                   	pop    edi
c000ccd3:	c3                   	ret    

c000ccd4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ccd4:	57                   	push   edi
c000ccd5:	56                   	push   esi
c000ccd6:	53                   	push   ebx
c000ccd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccdf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cce7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cced:	77 41                	ja     c000cd30 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ccef:	99                   	cdq    
c000ccf0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccf6:	01 c8                	add    eax,ecx
c000ccf8:	11 da                	adc    edx,ebx
c000ccfa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd00:	19 d7                	sbb    edi,edx
c000cd02:	72 33                	jb     c000cd37 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd04:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd0a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd10:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd14:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd18:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd28:	5b                   	pop    ebx
c000cd29:	5e                   	pop    esi
c000cd2a:	5f                   	pop    edi
c000cd2b:	e9 d4 08 00 00       	jmp    c000d604 <VCache::write(unsigned long long, int, void*)>
c000cd30:	b8 05 00 00 00       	mov    eax,0x5
c000cd35:	eb 05                	jmp    c000cd3c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd37:	b8 07 00 00 00       	mov    eax,0x7
c000cd3c:	5b                   	pop    ebx
c000cd3d:	5e                   	pop    esi
c000cd3e:	5f                   	pop    edi
c000cd3f:	c3                   	ret    

c000cd40 <Mouse::Mouse(char const*)>:
c000cd40:	83 ec 0c             	sub    esp,0xc
c000cd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd47:	83 ec 08             	sub    esp,0x8
c000cd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4e:	50                   	push   eax
c000cd4f:	e8 d4 ed ff ff       	call   c000bb28 <Device::Device(char const*)>
c000cd54:	83 c4 10             	add    esp,0x10
c000cd57:	ba 00 e8 01 c0       	mov    edx,0xc001e800
c000cd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd60:	89 10                	mov    DWORD PTR [eax],edx
c000cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd66:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd70:	90                   	nop
c000cd71:	83 c4 0c             	add    esp,0xc
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop
c000cd76:	66 90                	xchg   ax,ax

c000cd78 <Mouse::~Mouse()>:
c000cd78:	83 ec 0c             	sub    esp,0xc
c000cd7b:	ba 00 e8 01 c0       	mov    edx,0xc001e800
c000cd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd84:	89 10                	mov    DWORD PTR [eax],edx
c000cd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8a:	83 ec 0c             	sub    esp,0xc
c000cd8d:	50                   	push   eax
c000cd8e:	e8 ff ea ff ff       	call   c000b892 <Device::~Device()>
c000cd93:	83 c4 10             	add    esp,0x10
c000cd96:	90                   	nop
c000cd97:	83 c4 0c             	add    esp,0xc
c000cd9a:	c3                   	ret    
c000cd9b:	90                   	nop

c000cd9c <Mouse::~Mouse()>:
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	83 ec 0c             	sub    esp,0xc
c000cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda6:	e8 cd ff ff ff       	call   c000cd78 <Mouse::~Mouse()>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	83 ec 08             	sub    esp,0x8
c000cdb1:	68 58 01 00 00       	push   0x158
c000cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdba:	e8 9d d6 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	83 c4 0c             	add    esp,0xc
c000cdc5:	c3                   	ret    

c000cdc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cdc6:	55                   	push   ebp
c000cdc7:	57                   	push   edi
c000cdc8:	56                   	push   esi
c000cdc9:	53                   	push   ebx
c000cdca:	81 ec 28 01 00 00    	sub    esp,0x128
c000cdd0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cdd7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cdde:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cde5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cdec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cdf0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cdf4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdfb:	e8 24 ee ff ff       	call   c000bc24 <Device::getName()>
c000ce00:	5a                   	pop    edx
c000ce01:	59                   	pop    ecx
c000ce02:	50                   	push   eax
c000ce03:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce07:	55                   	push   ebp
c000ce08:	e8 f3 37 ff ff       	call   c0000600 <strcpy>
c000ce0d:	5b                   	pop    ebx
c000ce0e:	58                   	pop    eax
c000ce0f:	68 24 e8 01 c0       	push   0xc001e824
c000ce14:	55                   	push   ebp
c000ce15:	e8 a6 39 ff ff       	call   c00007c0 <strcat>
c000ce1a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce21:	e8 93 a9 ff ff       	call   c00077b9 <malloc>
c000ce26:	83 c4 0c             	add    esp,0xc
c000ce29:	89 c3                	mov    ebx,eax
c000ce2b:	57                   	push   edi
c000ce2c:	56                   	push   esi
c000ce2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce35:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce3c:	55                   	push   ebp
c000ce3d:	50                   	push   eax
c000ce3e:	e8 f7 fb ff ff       	call   c000ca3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce43:	83 c4 14             	add    esp,0x14
c000ce46:	53                   	push   ebx
c000ce47:	e8 a4 fc ff ff       	call   c000caf0 <LogicalDisk::assignDriveLetter()>
c000ce4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce4f:	e8 52 fd ff ff       	call   c000cba6 <LogicalDisk::mount()>
c000ce54:	58                   	pop    eax
c000ce55:	5a                   	pop    edx
c000ce56:	53                   	push   ebx
c000ce57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce5e:	e8 2d eb ff ff       	call   c000b990 <Device::addChild(Device*)>
c000ce63:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce69:	5b                   	pop    ebx
c000ce6a:	5e                   	pop    esi
c000ce6b:	5f                   	pop    edi
c000ce6c:	5d                   	pop    ebp
c000ce6d:	c3                   	ret    

c000ce6e <createPartitionsForDisk(PhysicalDisk*)>:
c000ce6e:	55                   	push   ebp
c000ce6f:	57                   	push   edi
c000ce70:	56                   	push   esi
c000ce71:	53                   	push   ebx
c000ce72:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce78:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce85:	3d 00 02 00 00       	cmp    eax,0x200
c000ce8a:	74 27                	je     c000ceb3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce8c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce92:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce98:	83 ec 10             	sub    esp,0x10
c000ce9b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce9f:	99                   	cdq    
c000cea0:	c1 e6 0a             	shl    esi,0xa
c000cea3:	52                   	push   edx
c000cea4:	89 fd                	mov    ebp,edi
c000cea6:	50                   	push   eax
c000cea7:	55                   	push   ebp
c000cea8:	56                   	push   esi
c000cea9:	e8 52 f9 00 00       	call   c001c800 <__udivdi3>
c000ceae:	e9 b1 00 00 00       	jmp    c000cf64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceb3:	83 ec 0c             	sub    esp,0xc
c000ceb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ceb8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cebc:	56                   	push   esi
c000cebd:	6a 01                	push   0x1
c000cebf:	6a 00                	push   0x0
c000cec1:	6a 00                	push   0x0
c000cec3:	53                   	push   ebx
c000cec4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cec7:	83 c4 20             	add    esp,0x20
c000ceca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ced2:	75 0a                	jne    c000cede <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ced4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cedc:	74 2c                	je     c000cf0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cede:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cee4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ceea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cef0:	83 ec 10             	sub    esp,0x10
c000cef3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cef7:	89 f7                	mov    edi,esi
c000cef9:	c1 e0 0a             	shl    eax,0xa
c000cefc:	c1 ff 1f             	sar    edi,0x1f
c000ceff:	57                   	push   edi
c000cf00:	56                   	push   esi
c000cf01:	52                   	push   edx
c000cf02:	50                   	push   eax
c000cf03:	e8 f8 f8 00 00       	call   c001c800 <__udivdi3>
c000cf08:	eb 5a                	jmp    c000cf64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf11:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf18:	83 e1 7f             	and    ecx,0x7f
c000cf1b:	83 e0 7f             	and    eax,0x7f
c000cf1e:	01 c1                	add    ecx,eax
c000cf20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf27:	83 e0 7f             	and    eax,0x7f
c000cf2a:	01 c1                	add    ecx,eax
c000cf2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf33:	83 e0 7f             	and    eax,0x7f
c000cf36:	00 c1                	add    cl,al
c000cf38:	74 41                	je     c000cf7b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf4c:	83 ec 10             	sub    esp,0x10
c000cf4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf53:	89 f7                	mov    edi,esi
c000cf55:	c1 e0 0a             	shl    eax,0xa
c000cf58:	c1 ff 1f             	sar    edi,0x1f
c000cf5b:	57                   	push   edi
c000cf5c:	56                   	push   esi
c000cf5d:	52                   	push   edx
c000cf5e:	50                   	push   eax
c000cf5f:	e8 9c f8 00 00       	call   c001c800 <__udivdi3>
c000cf64:	83 c4 14             	add    esp,0x14
c000cf67:	52                   	push   edx
c000cf68:	50                   	push   eax
c000cf69:	6a 00                	push   0x0
c000cf6b:	6a 00                	push   0x0
c000cf6d:	53                   	push   ebx
c000cf6e:	e8 53 fe ff ff       	call   c000cdc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf73:	83 c4 20             	add    esp,0x20
c000cf76:	e9 79 01 00 00       	jmp    c000d0f4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf7b:	89 f0                	mov    eax,esi
c000cf7d:	31 f6                	xor    esi,esi
c000cf7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf86:	75 02                	jne    c000cf8a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf88:	89 f1                	mov    ecx,esi
c000cf8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf91:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf98:	c1 e2 08             	shl    edx,0x8
c000cf9b:	c1 e7 10             	shl    edi,0x10
c000cf9e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cfa6:	09 fa                	or     edx,edi
c000cfa8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cfb0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cfb7:	83 c0 10             	add    eax,0x10
c000cfba:	09 fa                	or     edx,edi
c000cfbc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cfc3:	c1 e7 18             	shl    edi,0x18
c000cfc6:	09 fa                	or     edx,edi
c000cfc8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cfcf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cfd3:	c1 e7 10             	shl    edi,0x10
c000cfd6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cfdd:	c1 e2 08             	shl    edx,0x8
c000cfe0:	09 fa                	or     edx,edi
c000cfe2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cfe9:	09 fa                	or     edx,edi
c000cfeb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cff2:	c1 e7 18             	shl    edi,0x18
c000cff5:	09 fa                	or     edx,edi
c000cff7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cffb:	46                   	inc    esi
c000cffc:	83 fe 04             	cmp    esi,0x4
c000cfff:	0f 85 7a ff ff ff    	jne    c000cf7f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d009:	83 f0 01             	xor    eax,0x1
c000d00c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d010:	75 57                	jne    c000d069 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d016:	83 f0 01             	xor    eax,0x1
c000d019:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d01d:	75 4a                	jne    c000d069 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d01f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d023:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d02b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d033:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d039:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d03f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d045:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d049:	89 f7                	mov    edi,esi
c000d04b:	c1 e0 0a             	shl    eax,0xa
c000d04e:	c1 ff 1f             	sar    edi,0x1f
c000d051:	57                   	push   edi
c000d052:	56                   	push   esi
c000d053:	52                   	push   edx
c000d054:	50                   	push   eax
c000d055:	e8 a6 f7 00 00       	call   c001c800 <__udivdi3>
c000d05a:	83 c4 10             	add    esp,0x10
c000d05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d061:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d065:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d069:	84 c9                	test   cl,cl
c000d06b:	74 53                	je     c000d0c0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d06d:	0f b6 c9             	movzx  ecx,cl
c000d070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d074:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d078:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d07c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d084:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d088:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d08c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d09c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0a0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0a4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0a8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0ac:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0b8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0bc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d0c0:	31 ed                	xor    ebp,ebp
c000d0c2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d0c6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d0ca:	89 f8                	mov    eax,edi
c000d0cc:	09 f0                	or     eax,esi
c000d0ce:	74 1e                	je     c000d0ee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0d0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d0d4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d0d8:	89 d1                	mov    ecx,edx
c000d0da:	09 c1                	or     ecx,eax
c000d0dc:	74 10                	je     c000d0ee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0de:	83 ec 0c             	sub    esp,0xc
c000d0e1:	57                   	push   edi
c000d0e2:	56                   	push   esi
c000d0e3:	52                   	push   edx
c000d0e4:	50                   	push   eax
c000d0e5:	53                   	push   ebx
c000d0e6:	e8 db fc ff ff       	call   c000cdc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0eb:	83 c4 20             	add    esp,0x20
c000d0ee:	45                   	inc    ebp
c000d0ef:	83 fd 04             	cmp    ebp,0x4
c000d0f2:	75 ce                	jne    c000d0c2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d0f4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d0fa:	5b                   	pop    ebx
c000d0fb:	5e                   	pop    esi
c000d0fc:	5f                   	pop    edi
c000d0fd:	5d                   	pop    ebp
c000d0fe:	c3                   	ret    
c000d0ff:	90                   	nop

c000d100 <Serial::Serial(char const*)>:
c000d100:	83 ec 0c             	sub    esp,0xc
c000d103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d107:	83 ec 08             	sub    esp,0x8
c000d10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10e:	50                   	push   eax
c000d10f:	e8 14 ea ff ff       	call   c000bb28 <Device::Device(char const*)>
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	ba 38 e8 01 c0       	mov    edx,0xc001e838
c000d11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d120:	89 10                	mov    DWORD PTR [eax],edx
c000d122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d126:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d130:	90                   	nop
c000d131:	83 c4 0c             	add    esp,0xc
c000d134:	c3                   	ret    
c000d135:	90                   	nop
c000d136:	66 90                	xchg   ax,ax

c000d138 <Serial::~Serial()>:
c000d138:	83 ec 0c             	sub    esp,0xc
c000d13b:	ba 38 e8 01 c0       	mov    edx,0xc001e838
c000d140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d144:	89 10                	mov    DWORD PTR [eax],edx
c000d146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14a:	83 ec 0c             	sub    esp,0xc
c000d14d:	50                   	push   eax
c000d14e:	e8 3f e7 ff ff       	call   c000b892 <Device::~Device()>
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	90                   	nop
c000d157:	83 c4 0c             	add    esp,0xc
c000d15a:	c3                   	ret    
c000d15b:	90                   	nop

c000d15c <Serial::~Serial()>:
c000d15c:	83 ec 0c             	sub    esp,0xc
c000d15f:	83 ec 0c             	sub    esp,0xc
c000d162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d166:	e8 cd ff ff ff       	call   c000d138 <Serial::~Serial()>
c000d16b:	83 c4 10             	add    esp,0x10
c000d16e:	83 ec 08             	sub    esp,0x8
c000d171:	68 58 01 00 00       	push   0x158
c000d176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17a:	e8 dd d2 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	83 c4 0c             	add    esp,0xc
c000d185:	c3                   	ret    
c000d186:	66 90                	xchg   ax,ax

c000d188 <Timer::Timer(char const*)>:
c000d188:	83 ec 0c             	sub    esp,0xc
c000d18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18f:	83 ec 08             	sub    esp,0x8
c000d192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d196:	50                   	push   eax
c000d197:	e8 8c e9 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000d19c:	83 c4 10             	add    esp,0x10
c000d19f:	ba 7c e8 01 c0       	mov    edx,0xc001e87c
c000d1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a8:	89 10                	mov    DWORD PTR [eax],edx
c000d1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ae:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1b8:	90                   	nop
c000d1b9:	83 c4 0c             	add    esp,0xc
c000d1bc:	c3                   	ret    
c000d1bd:	90                   	nop
c000d1be:	66 90                	xchg   ax,ax

c000d1c0 <Timer::~Timer()>:
c000d1c0:	83 ec 0c             	sub    esp,0xc
c000d1c3:	ba 7c e8 01 c0       	mov    edx,0xc001e87c
c000d1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cc:	89 10                	mov    DWORD PTR [eax],edx
c000d1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d2:	83 ec 0c             	sub    esp,0xc
c000d1d5:	50                   	push   eax
c000d1d6:	e8 b7 e6 ff ff       	call   c000b892 <Device::~Device()>
c000d1db:	83 c4 10             	add    esp,0x10
c000d1de:	90                   	nop
c000d1df:	83 c4 0c             	add    esp,0xc
c000d1e2:	c3                   	ret    
c000d1e3:	90                   	nop

c000d1e4 <Timer::~Timer()>:
c000d1e4:	83 ec 0c             	sub    esp,0xc
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ee:	e8 cd ff ff ff       	call   c000d1c0 <Timer::~Timer()>
c000d1f3:	83 c4 10             	add    esp,0x10
c000d1f6:	83 ec 08             	sub    esp,0x8
c000d1f9:	68 5c 01 00 00       	push   0x15c
c000d1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d202:	e8 55 d2 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d207:	83 c4 10             	add    esp,0x10
c000d20a:	83 c4 0c             	add    esp,0xc
c000d20d:	c3                   	ret    

c000d20e <Timer::read()>:
c000d20e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d212:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d218:	c3                   	ret    

c000d219 <setupTimer(int)>:
c000d219:	53                   	push   ebx
c000d21a:	83 ec 14             	sub    esp,0x14
c000d21d:	68 5c 01 00 00       	push   0x15c
c000d222:	e8 92 a5 ff ff       	call   c00077b9 <malloc>
c000d227:	89 04 24             	mov    DWORD PTR [esp],eax
c000d22a:	89 c3                	mov    ebx,eax
c000d22c:	e8 eb ee 00 00       	call   c001c11c <PIT::PIT()>
c000d231:	58                   	pop    eax
c000d232:	5a                   	pop    edx
c000d233:	53                   	push   ebx
c000d234:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000d23a:	e8 51 e7 ff ff       	call   c000b990 <Device::addChild(Device*)>
c000d23f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d241:	6a 00                	push   0x0
c000d243:	6a 00                	push   0x0
c000d245:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d249:	53                   	push   ebx
c000d24a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d24d:	89 d8                	mov    eax,ebx
c000d24f:	83 c4 28             	add    esp,0x28
c000d252:	5b                   	pop    ebx
c000d253:	c3                   	ret    

c000d254 <timerHandler(unsigned int)>:
c000d254:	56                   	push   esi
c000d255:	53                   	push   ebx
c000d256:	51                   	push   ecx
c000d257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25b:	01 05 8c 54 02 c0    	add    DWORD PTR ds:0xc002548c,eax
c000d261:	80 3d bd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebd,0x0
c000d268:	0f 84 4a 01 00 00    	je     c000d3b8 <timerHandler(unsigned int)+0x164>
c000d26e:	fa                   	cli    
c000d26f:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d275:	83 ec 0c             	sub    esp,0xc
c000d278:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c000d27e:	68 78 61 02 c0       	push   0xc0026178
c000d283:	e8 48 fb 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d288:	83 c4 10             	add    esp,0x10
c000d28b:	84 c0                	test   al,al
c000d28d:	0f 85 a1 00 00 00    	jne    c000d334 <timerHandler(unsigned int)+0xe0>
c000d293:	83 ec 0c             	sub    esp,0xc
c000d296:	68 78 61 02 c0       	push   0xc0026178
c000d29b:	e8 4c fb 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a0:	83 c4 10             	add    esp,0x10
c000d2a3:	89 c6                	mov    esi,eax
c000d2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	68 78 61 02 c0       	push   0xc0026178
c000d2b0:	e8 37 fb 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2b5:	c7 04 24 78 61 02 c0 	mov    DWORD PTR [esp],0xc0026178
c000d2bc:	89 c3                	mov    ebx,eax
c000d2be:	e8 31 fb 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d2c3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d2c6:	83 c4 10             	add    esp,0x10
c000d2c9:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c000d2cf:	77 23                	ja     c000d2f4 <timerHandler(unsigned int)+0xa0>
c000d2d1:	83 ec 0c             	sub    esp,0xc
c000d2d4:	53                   	push   ebx
c000d2d5:	e8 7e 69 00 00       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	39 de                	cmp    esi,ebx
c000d2df:	75 27                	jne    c000d308 <timerHandler(unsigned int)+0xb4>
c000d2e1:	83 ec 0c             	sub    esp,0xc
c000d2e4:	68 78 61 02 c0       	push   0xc0026178
c000d2e9:	e8 fe fa 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2ee:	89 c6                	mov    esi,eax
c000d2f0:	eb 12                	jmp    c000d304 <timerHandler(unsigned int)+0xb0>
c000d2f2:	66 90                	xchg   ax,ax
c000d2f4:	52                   	push   edx
c000d2f5:	52                   	push   edx
c000d2f6:	53                   	push   ebx
c000d2f7:	68 78 61 02 c0       	push   0xc0026178
c000d2fc:	e8 ab fb 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d301:	8d 76 00             	lea    esi,[esi+0x0]
c000d304:	83 c4 10             	add    esp,0x10
c000d307:	90                   	nop
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	68 78 61 02 c0       	push   0xc0026178
c000d310:	e8 bb fa 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d315:	83 c4 10             	add    esp,0x10
c000d318:	84 c0                	test   al,al
c000d31a:	75 18                	jne    c000d334 <timerHandler(unsigned int)+0xe0>
c000d31c:	83 ec 0c             	sub    esp,0xc
c000d31f:	68 78 61 02 c0       	push   0xc0026178
c000d324:	e8 c3 fa 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d329:	83 c4 10             	add    esp,0x10
c000d32c:	39 f0                	cmp    eax,esi
c000d32e:	0f 85 74 ff ff ff    	jne    c000d2a8 <timerHandler(unsigned int)+0x54>
c000d334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d339:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d33d:	74 41                	je     c000d380 <timerHandler(unsigned int)+0x12c>
c000d33f:	80 3d bc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebc,0x0
c000d346:	74 38                	je     c000d380 <timerHandler(unsigned int)+0x12c>
c000d348:	fa                   	cli    
c000d349:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d34f:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c000d354:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d35a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d35d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d363:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d366:	72 08                	jb     c000d370 <timerHandler(unsigned int)+0x11c>
c000d368:	e8 27 64 00 00       	call   c0013794 <schedule()>
c000d36d:	8d 76 00             	lea    esi,[esi+0x0]
c000d370:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d375:	48                   	dec    eax
c000d376:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d37b:	75 03                	jne    c000d380 <timerHandler(unsigned int)+0x12c>
c000d37d:	fb                   	sti    
c000d37e:	66 90                	xchg   ax,ax
c000d380:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d385:	48                   	dec    eax
c000d386:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000d38b:	75 1b                	jne    c000d3a8 <timerHandler(unsigned int)+0x154>
c000d38d:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c000d394:	74 12                	je     c000d3a8 <timerHandler(unsigned int)+0x154>
c000d396:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000d3a0:	e8 ef 63 00 00       	call   c0013794 <schedule()>
c000d3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d3ad:	48                   	dec    eax
c000d3ae:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d3b3:	75 03                	jne    c000d3b8 <timerHandler(unsigned int)+0x164>
c000d3b5:	fb                   	sti    
c000d3b6:	66 90                	xchg   ax,ax
c000d3b8:	58                   	pop    eax
c000d3b9:	5b                   	pop    ebx
c000d3ba:	5e                   	pop    esi
c000d3bb:	c3                   	ret    

c000d3bc <VCache::VCache(PhysicalDisk*)>:
c000d3bc:	53                   	push   ebx
c000d3bd:	83 ec 18             	sub    esp,0x18
c000d3c0:	ba ac e8 01 c0       	mov    edx,0xc001e8ac
c000d3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c9:	89 10                	mov    DWORD PTR [eax],edx
c000d3cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d3e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d3ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d3f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d3fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d409:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d414:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d423:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d42a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d42e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d436:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d446:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d44d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d455:	83 ec 0c             	sub    esp,0xc
c000d458:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d45c:	e8 58 a3 ff ff       	call   c00077b9 <malloc>
c000d461:	83 c4 10             	add    esp,0x10
c000d464:	89 c3                	mov    ebx,eax
c000d466:	83 ec 0c             	sub    esp,0xc
c000d469:	53                   	push   ebx
c000d46a:	e8 f1 60 00 00       	call   c0013560 <Mutex::Mutex()>
c000d46f:	83 c4 10             	add    esp,0x10
c000d472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d476:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d481:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d488:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d48f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d493:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4cc:	05 00 02 00 00       	add    eax,0x200
c000d4d1:	c1 e0 03             	shl    eax,0x3
c000d4d4:	83 ec 0c             	sub    esp,0xc
c000d4d7:	50                   	push   eax
c000d4d8:	e8 dc a2 ff ff       	call   c00077b9 <malloc>
c000d4dd:	83 c4 10             	add    esp,0x10
c000d4e0:	89 c2                	mov    edx,eax
c000d4e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d4e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d500:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d506:	89 d0                	mov    eax,edx
c000d508:	c1 e0 02             	shl    eax,0x2
c000d50b:	01 d0                	add    eax,edx
c000d50d:	c1 e0 04             	shl    eax,0x4
c000d510:	83 ec 0c             	sub    esp,0xc
c000d513:	50                   	push   eax
c000d514:	e8 a0 a2 ff ff       	call   c00077b9 <malloc>
c000d519:	83 c4 10             	add    esp,0x10
c000d51c:	89 c2                	mov    edx,eax
c000d51e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d522:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d525:	90                   	nop
c000d526:	83 c4 18             	add    esp,0x18
c000d529:	5b                   	pop    ebx
c000d52a:	c3                   	ret    
c000d52b:	90                   	nop

c000d52c <VCache::invalidateReadBuffer()>:
c000d52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d530:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d536:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d53a:	c3                   	ret    
c000d53b:	90                   	nop

c000d53c <VCache::writeWriteBuffer()>:
c000d53c:	53                   	push   ebx
c000d53d:	83 ec 08             	sub    esp,0x8
c000d540:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d544:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d548:	74 1e                	je     c000d568 <VCache::writeWriteBuffer()+0x2c>
c000d54a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d54d:	83 ec 0c             	sub    esp,0xc
c000d550:	8b 10                	mov    edx,DWORD PTR [eax]
c000d552:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d555:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d558:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d55b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d55e:	50                   	push   eax
c000d55f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d562:	83 c4 20             	add    esp,0x20
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d56f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d576:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d57a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d581:	83 c4 08             	add    esp,0x8
c000d584:	5b                   	pop    ebx
c000d585:	c3                   	ret    
c000d586:	66 90                	xchg   ax,ax

c000d588 <VCache::~VCache()>:
c000d588:	83 ec 0c             	sub    esp,0xc
c000d58b:	ba ac e8 01 c0       	mov    edx,0xc001e8ac
c000d590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d594:	89 10                	mov    DWORD PTR [eax],edx
c000d596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d59d:	84 c0                	test   al,al
c000d59f:	74 0f                	je     c000d5b0 <VCache::~VCache()+0x28>
c000d5a1:	83 ec 0c             	sub    esp,0xc
c000d5a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a8:	e8 8f ff ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d5ad:	83 c4 10             	add    esp,0x10
c000d5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5b7:	83 ec 0c             	sub    esp,0xc
c000d5ba:	50                   	push   eax
c000d5bb:	e8 09 a2 ff ff       	call   c00077c9 <free>
c000d5c0:	83 c4 10             	add    esp,0x10
c000d5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d5ca:	83 ec 0c             	sub    esp,0xc
c000d5cd:	50                   	push   eax
c000d5ce:	e8 f6 a1 ff ff       	call   c00077c9 <free>
c000d5d3:	83 c4 10             	add    esp,0x10
c000d5d6:	90                   	nop
c000d5d7:	83 c4 0c             	add    esp,0xc
c000d5da:	c3                   	ret    
c000d5db:	90                   	nop

c000d5dc <VCache::~VCache()>:
c000d5dc:	83 ec 0c             	sub    esp,0xc
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e6:	e8 9d ff ff ff       	call   c000d588 <VCache::~VCache()>
c000d5eb:	83 c4 10             	add    esp,0x10
c000d5ee:	83 ec 08             	sub    esp,0x8
c000d5f1:	6a 44                	push   0x44
c000d5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f7:	e8 60 ce ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	83 c4 0c             	add    esp,0xc
c000d602:	c3                   	ret    
c000d603:	90                   	nop

c000d604 <VCache::write(unsigned long long, int, void*)>:
c000d604:	55                   	push   ebp
c000d605:	57                   	push   edi
c000d606:	56                   	push   esi
c000d607:	53                   	push   ebx
c000d608:	83 ec 1c             	sub    esp,0x1c
c000d60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d60f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d613:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d617:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d61b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d61f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d627:	31 c0                	xor    eax,eax
c000d629:	8d 76 00             	lea    esi,[esi+0x0]
c000d62c:	39 e8                	cmp    eax,ebp
c000d62e:	7d 18                	jge    c000d648 <VCache::write(unsigned long long, int, void*)+0x44>
c000d630:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d633:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d639:	0f af c8             	imul   ecx,eax
c000d63c:	89 ca                	mov    edx,ecx
c000d63e:	01 f2                	add    edx,esi
c000d640:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d642:	40                   	inc    eax
c000d643:	eb e7                	jmp    c000d62c <VCache::write(unsigned long long, int, void*)+0x28>
c000d645:	8d 76 00             	lea    esi,[esi+0x0]
c000d648:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d64c:	74 0a                	je     c000d658 <VCache::write(unsigned long long, int, void*)+0x54>
c000d64e:	53                   	push   ebx
c000d64f:	e8 d8 fe ff ff       	call   c000d52c <VCache::invalidateReadBuffer()>
c000d654:	58                   	pop    eax
c000d655:	8d 76 00             	lea    esi,[esi+0x0]
c000d658:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d65c:	74 5a                	je     c000d6b8 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d65e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d665:	89 f8                	mov    eax,edi
c000d667:	99                   	cdq    
c000d668:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d66b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d66e:	31 c1                	xor    ecx,eax
c000d670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d674:	31 d0                	xor    eax,edx
c000d676:	09 c1                	or     ecx,eax
c000d678:	75 32                	jne    c000d6ac <VCache::write(unsigned long long, int, void*)+0xa8>
c000d67a:	83 fd 01             	cmp    ebp,0x1
c000d67d:	75 2d                	jne    c000d6ac <VCache::write(unsigned long long, int, void*)+0xa8>
c000d67f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d682:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d688:	0f af f9             	imul   edi,ecx
c000d68b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d68e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d690:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d693:	40                   	inc    eax
c000d694:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d697:	83 f8 50             	cmp    eax,0x50
c000d69a:	75 74                	jne    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	53                   	push   ebx
c000d6a0:	e8 97 fe ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d6a5:	83 c4 10             	add    esp,0x10
c000d6a8:	eb 66                	jmp    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6aa:	66 90                	xchg   ax,ax
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	53                   	push   ebx
c000d6b0:	e8 87 fe ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6bb:	83 fd 4f             	cmp    ebp,0x4f
c000d6be:	7f 24                	jg     c000d6e4 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6c4:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6c7:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d6ca:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d6ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6d2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d6d5:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d6d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6e0:	eb 2e                	jmp    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6e2:	66 90                	xchg   ax,ax
c000d6e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d6ea:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d6ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d6f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6f6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d6fa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d6fe:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d702:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d705:	83 c4 1c             	add    esp,0x1c
c000d708:	5b                   	pop    ebx
c000d709:	5e                   	pop    esi
c000d70a:	5f                   	pop    edi
c000d70b:	5d                   	pop    ebp
c000d70c:	ff e0                	jmp    eax
c000d70e:	66 90                	xchg   ax,ax
c000d710:	83 c4 1c             	add    esp,0x1c
c000d713:	31 c0                	xor    eax,eax
c000d715:	5b                   	pop    ebx
c000d716:	5e                   	pop    esi
c000d717:	5f                   	pop    edi
c000d718:	5d                   	pop    ebp
c000d719:	c3                   	ret    

c000d71a <VCache::read(unsigned long long, int, void*)>:
c000d71a:	55                   	push   ebp
c000d71b:	57                   	push   edi
c000d71c:	56                   	push   esi
c000d71d:	53                   	push   ebx
c000d71e:	83 ec 1c             	sub    esp,0x1c
c000d721:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d725:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d729:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d72d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d731:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d735:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d739:	80 7e 2c 00          	cmp    BYTE PTR [esi+0x2c],0x0
c000d73d:	74 0d                	je     c000d74c <VCache::read(unsigned long long, int, void*)+0x32>
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	56                   	push   esi
c000d743:	e8 f4 fd ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	90                   	nop
c000d74c:	83 fd 01             	cmp    ebp,0x1
c000d74f:	0f 85 93 00 00 00    	jne    c000d7e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000d755:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d758:	89 04 24             	mov    DWORD PTR [esp],eax
c000d75b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d762:	0f 85 80 00 00 00    	jne    c000d7e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000d768:	8b 6e 40             	mov    ebp,DWORD PTR [esi+0x40]
c000d76b:	89 e9                	mov    ecx,ebp
c000d76d:	f7 d9                	neg    ecx
c000d76f:	89 c8                	mov    eax,ecx
c000d771:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d775:	c1 f8 1f             	sar    eax,0x1f
c000d778:	21 d9                	and    ecx,ebx
c000d77a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d77e:	89 c8                	mov    eax,ecx
c000d780:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d784:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000d788:	80 7e 3c 00          	cmp    BYTE PTR [esi+0x3c],0x0
c000d78c:	89 ca                	mov    edx,ecx
c000d78e:	74 2c                	je     c000d7bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d790:	39 4e 34             	cmp    DWORD PTR [esi+0x34],ecx
c000d793:	75 27                	jne    c000d7bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d795:	39 46 30             	cmp    DWORD PTR [esi+0x30],eax
c000d798:	75 22                	jne    c000d7bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d79a:	66 90                	xchg   ax,ax
c000d79c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d79f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d7a5:	8b 46 40             	mov    eax,DWORD PTR [esi+0x40]
c000d7a8:	48                   	dec    eax
c000d7a9:	21 c3                	and    ebx,eax
c000d7ab:	0f af d9             	imul   ebx,ecx
c000d7ae:	03 5e 38             	add    ebx,DWORD PTR [esi+0x38]
c000d7b1:	89 de                	mov    esi,ebx
c000d7b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b5:	31 c0                	xor    eax,eax
c000d7b7:	eb 77                	jmp    c000d830 <VCache::read(unsigned long long, int, void*)+0x116>
c000d7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	c6 46 3c 01          	mov    BYTE PTR [esi+0x3c],0x1
c000d7c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7c7:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000d7ca:	89 56 34             	mov    DWORD PTR [esi+0x34],edx
c000d7cd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000d7cf:	ff 76 38             	push   DWORD PTR [esi+0x38]
c000d7d2:	55                   	push   ebp
c000d7d3:	52                   	push   edx
c000d7d4:	50                   	push   eax
c000d7d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d7dc:	83 c4 20             	add    esp,0x20
c000d7df:	85 c0                	test   eax,eax
c000d7e1:	75 4d                	jne    c000d830 <VCache::read(unsigned long long, int, void*)+0x116>
c000d7e3:	eb b7                	jmp    c000d79c <VCache::read(unsigned long long, int, void*)+0x82>
c000d7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	56                   	push   esi
c000d7ec:	e8 3b fd ff ff       	call   c000d52c <VCache::invalidateReadBuffer()>
c000d7f1:	83 c4 0c             	add    esp,0xc
c000d7f4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7f7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d7fd:	6a 00                	push   0x0
c000d7ff:	57                   	push   edi
c000d800:	e8 cb 2c ff ff       	call   c00004d0 <memset>
c000d805:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d808:	8b 10                	mov    edx,DWORD PTR [eax]
c000d80a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000d80e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d812:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d81a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d81e:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d822:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d825:	83 c4 2c             	add    esp,0x2c
c000d828:	5b                   	pop    ebx
c000d829:	5e                   	pop    esi
c000d82a:	5f                   	pop    edi
c000d82b:	5d                   	pop    ebp
c000d82c:	ff e0                	jmp    eax
c000d82e:	66 90                	xchg   ax,ax
c000d830:	83 c4 1c             	add    esp,0x1c
c000d833:	5b                   	pop    ebx
c000d834:	5e                   	pop    esi
c000d835:	5f                   	pop    edi
c000d836:	5d                   	pop    ebp
c000d837:	c3                   	ret    

c000d838 <Video::putrect(int, int, int, int, unsigned int)>:
c000d838:	55                   	push   ebp
c000d839:	57                   	push   edi
c000d83a:	56                   	push   esi
c000d83b:	53                   	push   ebx
c000d83c:	83 ec 1c             	sub    esp,0x1c
c000d83f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d843:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d847:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d84b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d84f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d857:	01 df                	add    edi,ebx
c000d859:	39 fb                	cmp    ebx,edi
c000d85b:	7d 1f                	jge    c000d87c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d85d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d861:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d865:	7d 12                	jge    c000d879 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d867:	8b 16                	mov    edx,DWORD PTR [esi]
c000d869:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d86d:	53                   	push   ebx
c000d86e:	55                   	push   ebp
c000d86f:	45                   	inc    ebp
c000d870:	56                   	push   esi
c000d871:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	eb e8                	jmp    c000d861 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d879:	43                   	inc    ebx
c000d87a:	eb dd                	jmp    c000d859 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d87c:	83 c4 1c             	add    esp,0x1c
c000d87f:	5b                   	pop    ebx
c000d880:	5e                   	pop    esi
c000d881:	5f                   	pop    edi
c000d882:	5d                   	pop    ebp
c000d883:	c3                   	ret    

c000d884 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d884:	55                   	push   ebp
c000d885:	57                   	push   edi
c000d886:	31 ff                	xor    edi,edi
c000d888:	56                   	push   esi
c000d889:	53                   	push   ebx
c000d88a:	83 ec 1c             	sub    esp,0x1c
c000d88d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d891:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d895:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d89c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8a5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8ad:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d8b0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8b4:	01 f9                	add    ecx,edi
c000d8b6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d8ba:	7d 2f                	jge    c000d8eb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d8bc:	31 f6                	xor    esi,esi
c000d8be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8c2:	01 f2                	add    edx,esi
c000d8c4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d8c8:	7d 1a                	jge    c000d8e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d8ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8cd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d8d0:	46                   	inc    esi
c000d8d1:	51                   	push   ecx
c000d8d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d8d6:	52                   	push   edx
c000d8d7:	55                   	push   ebp
c000d8d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8db:	83 c4 10             	add    esp,0x10
c000d8de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8e2:	eb da                	jmp    c000d8be <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d8e4:	47                   	inc    edi
c000d8e5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d8e9:	eb c5                	jmp    c000d8b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d8eb:	83 c4 1c             	add    esp,0x1c
c000d8ee:	5b                   	pop    ebx
c000d8ef:	5e                   	pop    esi
c000d8f0:	5f                   	pop    edi
c000d8f1:	5d                   	pop    ebp
c000d8f2:	c3                   	ret    
c000d8f3:	90                   	nop

c000d8f4 <Video::blit(unsigned int*, int, int, int, int)>:
c000d8f4:	55                   	push   ebp
c000d8f5:	57                   	push   edi
c000d8f6:	56                   	push   esi
c000d8f7:	53                   	push   ebx
c000d8f8:	83 ec 1c             	sub    esp,0x1c
c000d8fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d8ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d903:	85 c0                	test   eax,eax
c000d905:	79 02                	jns    c000d909 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d907:	31 c0                	xor    eax,eax
c000d909:	c1 e0 02             	shl    eax,0x2
c000d90c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d914:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d918:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d91c:	39 d8                	cmp    eax,ebx
c000d91e:	7e 49                	jle    c000d969 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d920:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d926:	7c 41                	jl     c000d969 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d928:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d92c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d930:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d934:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d938:	39 f9                	cmp    ecx,edi
c000d93a:	7e 22                	jle    c000d95e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d93c:	83 c5 04             	add    ebp,0x4
c000d93f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d945:	7c 14                	jl     c000d95b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d947:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d949:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d94c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d950:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d954:	56                   	push   esi
c000d955:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d958:	83 c4 10             	add    esp,0x10
c000d95b:	47                   	inc    edi
c000d95c:	eb d2                	jmp    c000d930 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d95e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d962:	43                   	inc    ebx
c000d963:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d967:	eb ab                	jmp    c000d914 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d969:	83 c4 1c             	add    esp,0x1c
c000d96c:	5b                   	pop    ebx
c000d96d:	5e                   	pop    esi
c000d96e:	5f                   	pop    edi
c000d96f:	5d                   	pop    ebp
c000d970:	c3                   	ret    
c000d971:	90                   	nop

c000d972 <Video::clearScreen(unsigned int)>:
c000d972:	57                   	push   edi
c000d973:	56                   	push   esi
c000d974:	53                   	push   ebx
c000d975:	31 db                	xor    ebx,ebx
c000d977:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d97b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d981:	7e 1f                	jle    c000d9a2 <Video::clearScreen(unsigned int)+0x30>
c000d983:	31 ff                	xor    edi,edi
c000d985:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d98b:	7e 12                	jle    c000d99f <Video::clearScreen(unsigned int)+0x2d>
c000d98d:	8b 06                	mov    eax,DWORD PTR [esi]
c000d98f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d993:	53                   	push   ebx
c000d994:	57                   	push   edi
c000d995:	47                   	inc    edi
c000d996:	56                   	push   esi
c000d997:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d99a:	83 c4 10             	add    esp,0x10
c000d99d:	eb e6                	jmp    c000d985 <Video::clearScreen(unsigned int)+0x13>
c000d99f:	43                   	inc    ebx
c000d9a0:	eb d9                	jmp    c000d97b <Video::clearScreen(unsigned int)+0x9>
c000d9a2:	5b                   	pop    ebx
c000d9a3:	5e                   	pop    esi
c000d9a4:	5f                   	pop    edi
c000d9a5:	c3                   	ret    

c000d9a6 <Video::putpixel(int, int, unsigned int)>:
c000d9a6:	c7 44 24 04 b4 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e8b4
c000d9ae:	e9 bc 28 00 00       	jmp    c001026f <KePanic(char const*)>
c000d9b3:	90                   	nop

c000d9b4 <Video::Video(char const*)>:
c000d9b4:	83 ec 0c             	sub    esp,0xc
c000d9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9bb:	83 ec 08             	sub    esp,0x8
c000d9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c2:	50                   	push   eax
c000d9c3:	e8 60 e1 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000d9c8:	83 c4 10             	add    esp,0x10
c000d9cb:	ba 24 e9 01 c0       	mov    edx,0xc001e924
c000d9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d4:	89 10                	mov    DWORD PTR [eax],edx
c000d9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9da:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d9e4:	90                   	nop
c000d9e5:	83 c4 0c             	add    esp,0xc
c000d9e8:	c3                   	ret    
c000d9e9:	90                   	nop

c000d9ea <Video::~Video()>:
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	ba 24 e9 01 c0       	mov    edx,0xc001e924
c000d9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f6:	89 10                	mov    DWORD PTR [eax],edx
c000d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	50                   	push   eax
c000da00:	e8 8d de ff ff       	call   c000b892 <Device::~Device()>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	90                   	nop
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	c3                   	ret    
c000da0d:	90                   	nop

c000da0e <Video::~Video()>:
c000da0e:	83 ec 0c             	sub    esp,0xc
c000da11:	83 ec 0c             	sub    esp,0xc
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	e8 cd ff ff ff       	call   c000d9ea <Video::~Video()>
c000da1d:	83 c4 10             	add    esp,0x10
c000da20:	83 ec 08             	sub    esp,0x8
c000da23:	68 64 01 00 00       	push   0x164
c000da28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2c:	e8 2b ca ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	83 c4 0c             	add    esp,0xc
c000da37:	c3                   	ret    

c000da38 <Video::isMonochrome()>:
c000da38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da3c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da42:	c3                   	ret    
c000da43:	90                   	nop

c000da44 <Video::getWidth()>:
c000da44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da4e:	c3                   	ret    
c000da4f:	90                   	nop

c000da50 <Video::getHeight()>:
c000da50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da5a:	c3                   	ret    
c000da5b:	90                   	nop

c000da5c <Video::drawCursor(int, int, unsigned char*, int)>:
c000da5c:	55                   	push   ebp
c000da5d:	57                   	push   edi
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	83 ec 2c             	sub    esp,0x2c
c000da63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da67:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da6b:	83 f8 01             	cmp    eax,0x1
c000da6e:	19 c9                	sbb    ecx,ecx
c000da70:	31 db                	xor    ebx,ebx
c000da72:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da76:	89 cd                	mov    ebp,ecx
c000da78:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da80:	f7 d5                	not    ebp
c000da82:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da88:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da8c:	01 d8                	add    eax,ebx
c000da8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da92:	56                   	push   esi
c000da93:	e8 b8 ff ff ff       	call   c000da50 <Video::getHeight()>
c000da98:	59                   	pop    ecx
c000da99:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000da9d:	7e 70                	jle    c000db0f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000da9f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000daa3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000daa7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000daaa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000daae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dab2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dab9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dabd:	89 f8                	mov    eax,edi
c000dabf:	83 c0 20             	add    eax,0x20
c000dac2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac6:	56                   	push   esi
c000dac7:	e8 78 ff ff ff       	call   c000da44 <Video::getWidth()>
c000dacc:	5a                   	pop    edx
c000dacd:	39 c7                	cmp    edi,eax
c000dacf:	7d 34                	jge    c000db05 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dad1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dad6:	74 05                	je     c000dadd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dad8:	8b 06                	mov    eax,DWORD PTR [esi]
c000dada:	55                   	push   ebp
c000dadb:	eb 0d                	jmp    c000daea <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dadd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dae2:	74 12                	je     c000daf6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000dae4:	8b 06                	mov    eax,DWORD PTR [esi]
c000dae6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000daea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000daee:	57                   	push   edi
c000daef:	56                   	push   esi
c000daf0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dafa:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dafe:	47                   	inc    edi
c000daff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db03:	75 c1                	jne    c000dac6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db05:	43                   	inc    ebx
c000db06:	83 fb 20             	cmp    ebx,0x20
c000db09:	0f 85 79 ff ff ff    	jne    c000da88 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db0f:	83 c4 2c             	add    esp,0x2c
c000db12:	5b                   	pop    ebx
c000db13:	5e                   	pop    esi
c000db14:	5f                   	pop    edi
c000db15:	5d                   	pop    ebp
c000db16:	c3                   	ret    
c000db17:	90                   	nop

c000db18 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db18:	55                   	push   ebp
c000db19:	57                   	push   edi
c000db1a:	56                   	push   esi
c000db1b:	53                   	push   ebx
c000db1c:	83 ec 28             	sub    esp,0x28
c000db1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db23:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db27:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db2b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db2f:	c1 e6 08             	shl    esi,0x8
c000db32:	01 c6                	add    esi,eax
c000db34:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db38:	c1 e0 08             	shl    eax,0x8
c000db3b:	01 d0                	add    eax,edx
c000db3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db45:	0f af c6             	imul   eax,esi
c000db48:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000db4f:	50                   	push   eax
c000db50:	e8 64 9c ff ff       	call   c00077b9 <malloc>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	89 c7                	mov    edi,eax
c000db5a:	85 c0                	test   eax,eax
c000db5c:	75 10                	jne    c000db6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000db5e:	83 ec 0c             	sub    esp,0xc
c000db61:	68 d5 e8 01 c0       	push   0xc001e8d5
c000db66:	e8 04 27 00 00       	call   c001026f <KePanic(char const*)>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db71:	ba 12 00 00 00       	mov    edx,0x12
c000db76:	84 c0                	test   al,al
c000db78:	74 11                	je     c000db8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db7a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db7e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db82:	c1 fa 03             	sar    edx,0x3
c000db85:	0f af d1             	imul   edx,ecx
c000db88:	83 c2 12             	add    edx,0x12
c000db8b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000db8f:	74 04                	je     c000db95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000db91:	85 f6                	test   esi,esi
c000db93:	75 12                	jne    c000dba7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000db95:	83 ec 0c             	sub    esp,0xc
c000db98:	68 e5 e8 01 c0       	push   0xc001e8e5
c000db9d:	e8 b0 c9 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000dba2:	e9 b8 00 00 00       	jmp    c000dc5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dba7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbab:	80 f9 02             	cmp    cl,0x2
c000dbae:	0f 85 96 00 00 00    	jne    c000dc4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dbb4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dbb9:	75 0e                	jne    c000dbc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbbb:	84 c0                	test   al,al
c000dbbd:	75 0a                	jne    c000dbc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbbf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dbc2:	83 e8 18             	sub    eax,0x18
c000dbc5:	a8 f7                	test   al,0xf7
c000dbc7:	74 0a                	je     c000dbd3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dbc9:	83 ec 0c             	sub    esp,0xc
c000dbcc:	68 fa e8 01 c0       	push   0xc001e8fa
c000dbd1:	eb 7f                	jmp    c000dc52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dbd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dbdb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dbe3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dbe7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbef:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dbf3:	75 0c                	jne    c000dc01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dbf5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dbfa:	c1 e0 18             	shl    eax,0x18
c000dbfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc01:	45                   	inc    ebp
c000dc02:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc07:	c1 e1 10             	shl    ecx,0x10
c000dc0a:	89 c8                	mov    eax,ecx
c000dc0c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc11:	c1 e1 08             	shl    ecx,0x8
c000dc14:	09 c1                	or     ecx,eax
c000dc16:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc1a:	09 c1                	or     ecx,eax
c000dc1c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc20:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc24:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc28:	c1 f8 03             	sar    eax,0x3
c000dc2b:	01 c2                	add    edx,eax
c000dc2d:	89 e8                	mov    eax,ebp
c000dc2f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc33:	39 c6                	cmp    esi,eax
c000dc35:	7f b0                	jg     c000dbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc3f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc42:	7e 22                	jle    c000dc66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc44:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc48:	eb 99                	jmp    c000dbe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc4a:	50                   	push   eax
c000dc4b:	50                   	push   eax
c000dc4c:	51                   	push   ecx
c000dc4d:	68 08 e9 01 c0       	push   0xc001e908
c000dc52:	e8 fb c8 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000dc57:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc5a:	e8 6a 9b ff ff       	call   c00077c9 <free>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	31 ff                	xor    edi,edi
c000dc64:	eb 0f                	jmp    c000dc75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dc66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc6a:	89 30                	mov    DWORD PTR [eax],esi
c000dc6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc73:	89 30                	mov    DWORD PTR [eax],esi
c000dc75:	83 c4 1c             	add    esp,0x1c
c000dc78:	89 f8                	mov    eax,edi
c000dc7a:	5b                   	pop    ebx
c000dc7b:	5e                   	pop    esi
c000dc7c:	5f                   	pop    edi
c000dc7d:	5d                   	pop    ebp
c000dc7e:	c3                   	ret    
c000dc7f:	90                   	nop

c000dc80 <Video::putTGA(int, int, unsigned char*, int)>:
c000dc80:	55                   	push   ebp
c000dc81:	57                   	push   edi
c000dc82:	56                   	push   esi
c000dc83:	53                   	push   ebx
c000dc84:	83 ec 28             	sub    esp,0x28
c000dc87:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8f:	50                   	push   eax
c000dc90:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc94:	50                   	push   eax
c000dc95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc9d:	56                   	push   esi
c000dc9e:	e8 75 fe ff ff       	call   c000db18 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dca3:	83 c4 20             	add    esp,0x20
c000dca6:	85 c0                	test   eax,eax
c000dca8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dcac:	74 35                	je     c000dce3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcae:	89 c7                	mov    edi,eax
c000dcb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dcb4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcb8:	39 d8                	cmp    eax,ebx
c000dcba:	7e 27                	jle    c000dce3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcbc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dcc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcc4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dcc8:	39 e8                	cmp    eax,ebp
c000dcca:	7e 14                	jle    c000dce0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dccc:	8b 06                	mov    eax,DWORD PTR [esi]
c000dcce:	83 c7 04             	add    edi,0x4
c000dcd1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dcd4:	53                   	push   ebx
c000dcd5:	55                   	push   ebp
c000dcd6:	45                   	inc    ebp
c000dcd7:	56                   	push   esi
c000dcd8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dcdb:	83 c4 10             	add    esp,0x10
c000dcde:	eb e0                	jmp    c000dcc0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dce0:	43                   	inc    ebx
c000dce1:	eb cd                	jmp    c000dcb0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dce3:	83 c4 1c             	add    esp,0x1c
c000dce6:	5b                   	pop    ebx
c000dce7:	5e                   	pop    esi
c000dce8:	5f                   	pop    edi
c000dce9:	5d                   	pop    ebp
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <ACPI::close(int, int, void*)>:
c000dcec:	83 ec 1c             	sub    esp,0x1c
c000dcef:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dcf7:	74 0b                	je     c000dd04 <ACPI::close(int, int, void*)+0x18>
c000dcf9:	b8 00 00 00 00       	mov    eax,0x0
c000dcfe:	e9 9d 00 00 00       	jmp    c000dda0 <ACPI::close(int, int, void*)+0xb4>
c000dd03:	90                   	nop
c000dd04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd09:	75 29                	jne    c000dd34 <ACPI::close(int, int, void*)+0x48>
c000dd0b:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd10:	85 c0                	test   eax,eax
c000dd12:	74 08                	je     c000dd1c <ACPI::close(int, int, void*)+0x30>
c000dd14:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd19:	ff d0                	call   eax
c000dd1b:	90                   	nop
c000dd1c:	83 ec 0c             	sub    esp,0xc
c000dd1f:	68 64 e9 01 c0       	push   0xc001e964
c000dd24:	e8 46 25 00 00       	call   c001026f <KePanic(char const*)>
c000dd29:	83 c4 10             	add    esp,0x10
c000dd2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd31:	eb 6d                	jmp    c000dda0 <ACPI::close(int, int, void*)+0xb4>
c000dd33:	90                   	nop
c000dd34:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd39:	75 5d                	jne    c000dd98 <ACPI::close(int, int, void*)+0xac>
c000dd3b:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd40:	85 c0                	test   eax,eax
c000dd42:	74 08                	je     c000dd4c <ACPI::close(int, int, void*)+0x60>
c000dd44:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd49:	ff d0                	call   eax
c000dd4b:	90                   	nop
c000dd4c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dd51:	8d 76 00             	lea    esi,[esi+0x0]
c000dd54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd58:	25 ff 00 00 00       	and    eax,0xff
c000dd5d:	83 e0 02             	and    eax,0x2
c000dd60:	74 1e                	je     c000dd80 <ACPI::close(int, int, void*)+0x94>
c000dd62:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dd69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd6d:	89 c2                	mov    edx,eax
c000dd6f:	ec                   	in     al,dx
c000dd70:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd74:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd7c:	eb d6                	jmp    c000dd54 <ACPI::close(int, int, void*)+0x68>
c000dd7e:	66 90                	xchg   ax,ax
c000dd80:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd87:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dd8c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dd90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd94:	ee                   	out    dx,al
c000dd95:	8d 76 00             	lea    esi,[esi+0x0]
c000dd98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000dda0:	83 c4 1c             	add    esp,0x1c
c000dda3:	c3                   	ret    

c000dda4 <findRSDP()>:
c000dda4:	83 ec 1c             	sub    esp,0x1c
c000dda7:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ddac:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddb2:	83 e0 04             	and    eax,0x4
c000ddb5:	84 c0                	test   al,al
c000ddb7:	75 07                	jne    c000ddc0 <findRSDP()+0x1c>
c000ddb9:	b8 00 00 00 00       	mov    eax,0x0
c000ddbe:	eb 70                	jmp    c000de30 <findRSDP()+0x8c>
c000ddc0:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000ddc5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ddca:	7f 1c                	jg     c000dde8 <findRSDP()+0x44>
c000ddcc:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000ddd1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ddd7:	83 e2 fb             	and    edx,0xfffffffb
c000ddda:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dde0:	b8 00 00 00 00       	mov    eax,0x0
c000dde5:	eb 49                	jmp    c000de30 <findRSDP()+0x8c>
c000dde7:	90                   	nop
c000dde8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ddf0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ddf8:	77 2e                	ja     c000de28 <findRSDP()+0x84>
c000ddfa:	83 ec 04             	sub    esp,0x4
c000ddfd:	6a 08                	push   0x8
c000ddff:	68 ff e9 01 c0       	push   0xc001e9ff
c000de04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de08:	e8 83 25 ff ff       	call   c0000390 <memcmp>
c000de0d:	83 c4 10             	add    esp,0x10
c000de10:	85 c0                	test   eax,eax
c000de12:	0f 94 c0             	sete   al
c000de15:	84 c0                	test   al,al
c000de17:	74 07                	je     c000de20 <findRSDP()+0x7c>
c000de19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de1d:	eb 11                	jmp    c000de30 <findRSDP()+0x8c>
c000de1f:	90                   	nop
c000de20:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de25:	eb c9                	jmp    c000ddf0 <findRSDP()+0x4c>
c000de27:	90                   	nop
c000de28:	b8 00 00 00 00       	mov    eax,0x0
c000de2d:	8d 76 00             	lea    esi,[esi+0x0]
c000de30:	83 c4 1c             	add    esp,0x1c
c000de33:	c3                   	ret    

c000de34 <loadACPITables(unsigned char*)>:
c000de34:	57                   	push   edi
c000de35:	56                   	push   esi
c000de36:	53                   	push   ebx
c000de37:	83 ec 60             	sub    esp,0x60
c000de3a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de3f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de45:	83 e0 04             	and    eax,0x4
c000de48:	84 c0                	test   al,al
c000de4a:	0f 84 3c 02 00 00    	je     c000e08c <loadACPITables(unsigned char*)+0x258>
c000de50:	a0 c0 56 02 c0       	mov    al,ds:0xc00256c0
c000de55:	84 c0                	test   al,al
c000de57:	74 77                	je     c000ded0 <loadACPITables(unsigned char*)+0x9c>
c000de59:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de5d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de68:	83 e8 24             	sub    eax,0x24
c000de6b:	c1 e8 03             	shr    eax,0x3
c000de6e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de72:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de7a:	66 90                	xchg   ax,ax
c000de7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de80:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de84:	0f 8d b6 00 00 00    	jge    c000df40 <loadACPITables(unsigned char*)+0x10c>
c000de8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de8e:	83 c0 24             	add    eax,0x24
c000de91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000de95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000de99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000de9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dea1:	c1 e0 03             	shl    eax,0x3
c000dea4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dea8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000deac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000deaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000deb1:	89 c1                	mov    ecx,eax
c000deb3:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000deb8:	8d 50 01             	lea    edx,[eax+0x1]
c000debb:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000dec1:	89 ca                	mov    edx,ecx
c000dec3:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000deca:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dece:	eb ac                	jmp    c000de7c <loadACPITables(unsigned char*)+0x48>
c000ded0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ded4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ded8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dedc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dedf:	83 e8 24             	sub    eax,0x24
c000dee2:	c1 e8 02             	shr    eax,0x2
c000dee5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dee9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000def1:	8d 76 00             	lea    esi,[esi+0x0]
c000def4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000def8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000defc:	7d 42                	jge    c000df40 <loadACPITables(unsigned char*)+0x10c>
c000defe:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df02:	83 c0 24             	add    eax,0x24
c000df05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df11:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df15:	c1 e0 02             	shl    eax,0x2
c000df18:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df20:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df22:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df27:	8d 50 01             	lea    edx,[eax+0x1]
c000df2a:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df30:	89 ca                	mov    edx,ecx
c000df32:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df39:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df3d:	eb b5                	jmp    c000def4 <loadACPITables(unsigned char*)+0xc0>
c000df3f:	90                   	nop
c000df40:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df48:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df4d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000df51:	0f 8d 39 01 00 00    	jge    c000e090 <loadACPITables(unsigned char*)+0x25c>
c000df57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df5b:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000df62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df6a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df72:	25 ff 0f 00 00       	and    eax,0xfff
c000df77:	89 c6                	mov    esi,eax
c000df79:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000df7f:	83 ec 0c             	sub    esp,0xc
c000df82:	6a 01                	push   0x1
c000df84:	e8 0c b3 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df90:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df96:	83 ec 0c             	sub    esp,0xc
c000df99:	6a 01                	push   0x1
c000df9b:	6a 01                	push   0x1
c000df9d:	50                   	push   eax
c000df9e:	52                   	push   edx
c000df9f:	53                   	push   ebx
c000dfa0:	e8 ad bc ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfa5:	83 c4 20             	add    esp,0x20
c000dfa8:	09 f0                	or     eax,esi
c000dfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfae:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfb2:	c1 e0 03             	shl    eax,0x3
c000dfb5:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000dfba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dfce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dfe2:	89 c6                	mov    esi,eax
c000dfe4:	89 d7                	mov    edi,edx
c000dfe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfe8:	89 c8                	mov    eax,ecx
c000dfea:	89 fa                	mov    edx,edi
c000dfec:	89 f3                	mov    ebx,esi
c000dfee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dff2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dff6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e005:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e009:	05 00 10 00 00       	add    eax,0x1000
c000e00e:	c1 e8 0c             	shr    eax,0xc
c000e011:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e019:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e01d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e021:	25 ff 0f 00 00       	and    eax,0xfff
c000e026:	89 c6                	mov    esi,eax
c000e028:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e035:	e8 5b b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e03a:	83 c4 10             	add    esp,0x10
c000e03d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e041:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	6a 01                	push   0x1
c000e04c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e050:	50                   	push   eax
c000e051:	52                   	push   edx
c000e052:	53                   	push   ebx
c000e053:	e8 fa bb ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e058:	83 c4 20             	add    esp,0x20
c000e05b:	09 f0                	or     eax,esi
c000e05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e065:	83 ec 0c             	sub    esp,0xc
c000e068:	50                   	push   eax
c000e069:	e8 1b b5 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c000e06e:	83 c4 10             	add    esp,0x10
c000e071:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e075:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e079:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000e080:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e084:	e9 bf fe ff ff       	jmp    c000df48 <loadACPITables(unsigned char*)+0x114>
c000e089:	8d 76 00             	lea    esi,[esi+0x0]
c000e08c:	90                   	nop
c000e08d:	8d 76 00             	lea    esi,[esi+0x0]
c000e090:	83 c4 60             	add    esp,0x60
c000e093:	5b                   	pop    ebx
c000e094:	5e                   	pop    esi
c000e095:	5f                   	pop    edi
c000e096:	c3                   	ret    
c000e097:	90                   	nop

c000e098 <findRSDT(unsigned char*)>:
c000e098:	57                   	push   edi
c000e099:	56                   	push   esi
c000e09a:	53                   	push   ebx
c000e09b:	83 ec 50             	sub    esp,0x50
c000e09e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e0a3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0a9:	83 e0 04             	and    eax,0x4
c000e0ac:	84 c0                	test   al,al
c000e0ae:	75 0c                	jne    c000e0bc <findRSDT(unsigned char*)+0x24>
c000e0b0:	b8 00 00 00 00       	mov    eax,0x0
c000e0b5:	e9 26 01 00 00       	jmp    c000e1e0 <findRSDT(unsigned char*)+0x148>
c000e0ba:	66 90                	xchg   ax,ax
c000e0bc:	89 e0                	mov    eax,esp
c000e0be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e0c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0ca:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e0d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e0e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e0e6:	89 c6                	mov    esi,eax
c000e0e8:	89 d7                	mov    edi,edx
c000e0ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0ec:	89 c8                	mov    eax,ecx
c000e0ee:	89 fa                	mov    edx,edi
c000e0f0:	89 f3                	mov    ebx,esi
c000e0f2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e0f6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0fe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e102:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e106:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e10e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e112:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e116:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e11e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e122:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e126:	25 ff 0f 00 00       	and    eax,0xfff
c000e12b:	89 c6                	mov    esi,eax
c000e12d:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e133:	83 ec 0c             	sub    esp,0xc
c000e136:	6a 02                	push   0x2
c000e138:	e8 58 b1 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e144:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	6a 01                	push   0x1
c000e14f:	6a 02                	push   0x2
c000e151:	50                   	push   eax
c000e152:	52                   	push   edx
c000e153:	53                   	push   ebx
c000e154:	e8 f9 ba ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e159:	83 c4 20             	add    esp,0x20
c000e15c:	09 f0                	or     eax,esi
c000e15e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e162:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e166:	25 ff 0f 00 00       	and    eax,0xfff
c000e16b:	89 c6                	mov    esi,eax
c000e16d:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e173:	83 ec 0c             	sub    esp,0xc
c000e176:	6a 02                	push   0x2
c000e178:	e8 18 b1 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e184:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e18a:	83 ec 0c             	sub    esp,0xc
c000e18d:	6a 01                	push   0x1
c000e18f:	6a 02                	push   0x2
c000e191:	50                   	push   eax
c000e192:	52                   	push   edx
c000e193:	53                   	push   ebx
c000e194:	e8 b9 ba ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e199:	83 c4 20             	add    esp,0x20
c000e19c:	09 f0                	or     eax,esi
c000e19e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1a2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1a7:	75 13                	jne    c000e1bc <findRSDT(unsigned char*)+0x124>
c000e1a9:	c6 05 c0 56 02 c0 00 	mov    BYTE PTR ds:0xc00256c0,0x0
c000e1b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1b4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1b8:	eb 22                	jmp    c000e1dc <findRSDT(unsigned char*)+0x144>
c000e1ba:	66 90                	xchg   ax,ax
c000e1bc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e1c1:	75 11                	jne    c000e1d4 <findRSDT(unsigned char*)+0x13c>
c000e1c3:	c6 05 c0 56 02 c0 01 	mov    BYTE PTR ds:0xc00256c0,0x1
c000e1ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1d2:	eb 08                	jmp    c000e1dc <findRSDT(unsigned char*)+0x144>
c000e1d4:	b8 00 00 00 00       	mov    eax,0x0
c000e1d9:	eb 05                	jmp    c000e1e0 <findRSDT(unsigned char*)+0x148>
c000e1db:	90                   	nop
c000e1dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e1e0:	83 c4 50             	add    esp,0x50
c000e1e3:	5b                   	pop    ebx
c000e1e4:	5e                   	pop    esi
c000e1e5:	5f                   	pop    edi
c000e1e6:	c3                   	ret    
c000e1e7:	90                   	nop

c000e1e8 <findDataTable(unsigned char*, char*)>:
c000e1e8:	83 ec 1c             	sub    esp,0x1c
c000e1eb:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e1f0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1f6:	83 e0 04             	and    eax,0x4
c000e1f9:	84 c0                	test   al,al
c000e1fb:	75 07                	jne    c000e204 <findDataTable(unsigned char*, char*)+0x1c>
c000e1fd:	b8 00 00 00 00       	mov    eax,0x0
c000e202:	eb 58                	jmp    c000e25c <findDataTable(unsigned char*, char*)+0x74>
c000e204:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e20c:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e211:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e215:	7d 3d                	jge    c000e254 <findDataTable(unsigned char*, char*)+0x6c>
c000e217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e21b:	c1 e0 03             	shl    eax,0x3
c000e21e:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e223:	83 ec 04             	sub    esp,0x4
c000e226:	6a 04                	push   0x4
c000e228:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22c:	50                   	push   eax
c000e22d:	e8 5e 21 ff ff       	call   c0000390 <memcmp>
c000e232:	83 c4 10             	add    esp,0x10
c000e235:	85 c0                	test   eax,eax
c000e237:	0f 94 c0             	sete   al
c000e23a:	84 c0                	test   al,al
c000e23c:	74 0e                	je     c000e24c <findDataTable(unsigned char*, char*)+0x64>
c000e23e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e242:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e249:	eb 11                	jmp    c000e25c <findDataTable(unsigned char*, char*)+0x74>
c000e24b:	90                   	nop
c000e24c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e250:	eb ba                	jmp    c000e20c <findDataTable(unsigned char*, char*)+0x24>
c000e252:	66 90                	xchg   ax,ax
c000e254:	b8 00 00 00 00       	mov    eax,0x0
c000e259:	8d 76 00             	lea    esi,[esi+0x0]
c000e25c:	83 c4 1c             	add    esp,0x1c
c000e25f:	c3                   	ret    

c000e260 <scanMADT()>:
c000e260:	53                   	push   ebx
c000e261:	83 ec 38             	sub    esp,0x38
c000e264:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000e269:	25 00 04 00 00       	and    eax,0x400
c000e26e:	74 14                	je     c000e284 <scanMADT()+0x24>
c000e270:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e275:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e27b:	83 e2 fb             	and    edx,0xfffffffb
c000e27e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e284:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e289:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e28f:	83 e0 04             	and    eax,0x4
c000e292:	84 c0                	test   al,al
c000e294:	0f 84 8a 04 00 00    	je     c000e724 <scanMADT()+0x4c4>
c000e29a:	e8 05 fb ff ff       	call   c000dda4 <findRSDP()>
c000e29f:	a3 cc 56 02 c0       	mov    ds:0xc00256cc,eax
c000e2a4:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e2a9:	85 c0                	test   eax,eax
c000e2ab:	75 1b                	jne    c000e2c8 <scanMADT()+0x68>
c000e2ad:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2b2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2b8:	83 e2 fb             	and    edx,0xfffffffb
c000e2bb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2c1:	e9 66 04 00 00       	jmp    c000e72c <scanMADT()+0x4cc>
c000e2c6:	66 90                	xchg   ax,ax
c000e2c8:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 c2 fd ff ff       	call   c000e098 <findRSDT(unsigned char*)>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	a3 c8 56 02 c0       	mov    ds:0xc00256c8,eax
c000e2de:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e2e3:	85 c0                	test   eax,eax
c000e2e5:	75 19                	jne    c000e300 <scanMADT()+0xa0>
c000e2e7:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2ec:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2f2:	83 e2 fb             	and    edx,0xfffffffb
c000e2f5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2fb:	e9 2c 04 00 00       	jmp    c000e72c <scanMADT()+0x4cc>
c000e300:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e305:	83 ec 0c             	sub    esp,0xc
c000e308:	50                   	push   eax
c000e309:	e8 26 fb ff ff       	call   c000de34 <loadACPITables(unsigned char*)>
c000e30e:	83 c4 10             	add    esp,0x10
c000e311:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e316:	83 ec 08             	sub    esp,0x8
c000e319:	68 08 ea 01 c0       	push   0xc001ea08
c000e31e:	50                   	push   eax
c000e31f:	e8 c4 fe ff ff       	call   c000e1e8 <findDataTable(unsigned char*, char*)>
c000e324:	83 c4 10             	add    esp,0x10
c000e327:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e32b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e330:	75 1a                	jne    c000e34c <scanMADT()+0xec>
c000e332:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e337:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e33d:	83 e2 fe             	and    edx,0xfffffffe
c000e340:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e346:	e9 e1 03 00 00       	jmp    c000e72c <scanMADT()+0x4cc>
c000e34b:	90                   	nop
c000e34c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e354:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e35b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e35f:	0f 87 c7 03 00 00    	ja     c000e72c <scanMADT()+0x4cc>
c000e365:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e36d:	0f 87 b9 03 00 00    	ja     c000e72c <scanMADT()+0x4cc>
c000e373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e377:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e37b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e37f:	8d 50 01             	lea    edx,[eax+0x1]
c000e382:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e386:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e38a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e38e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e396:	8d 50 01             	lea    edx,[eax+0x1]
c000e399:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e39d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3a9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e3ae:	0f 86 74 03 00 00    	jbe    c000e728 <scanMADT()+0x4c8>
c000e3b4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e3b9:	75 5d                	jne    c000e418 <scanMADT()+0x1b8>
c000e3bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3c6:	8a 15 c0 58 02 c0    	mov    dl,BYTE PTR ds:0xc00258c0
c000e3cc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3da:	88 82 00 59 02 c0    	mov    BYTE PTR [edx-0x3ffda700],al
c000e3e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e3e4:	8d 42 01             	lea    eax,[edx+0x1]
c000e3e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3eb:	a0 c0 58 02 c0       	mov    al,ds:0xc00258c0
c000e3f0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3f3:	88 0d c0 58 02 c0    	mov    BYTE PTR ds:0xc00258c0,cl
c000e3f9:	25 ff 00 00 00       	and    eax,0xff
c000e3fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e402:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e406:	88 90 e0 58 02 c0    	mov    BYTE PTR [eax-0x3ffda720],dl
c000e40c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e411:	e9 f6 02 00 00       	jmp    c000e70c <scanMADT()+0x4ac>
c000e416:	66 90                	xchg   ax,ax
c000e418:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e41d:	0f 85 29 01 00 00    	jne    c000e54c <scanMADT()+0x2ec>
c000e423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e427:	8d 50 01             	lea    edx,[eax+0x1]
c000e42a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e42e:	8a 15 80 57 02 c0    	mov    dl,BYTE PTR ds:0xc0025780
c000e434:	81 e2 ff 00 00 00    	and    edx,0xff
c000e43a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e43e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e442:	88 82 a0 57 02 c0    	mov    BYTE PTR [edx-0x3ffda860],al
c000e448:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e44c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e450:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e454:	01 d0                	add    eax,edx
c000e456:	83 c0 2c             	add    eax,0x2c
c000e459:	8a 00                	mov    al,BYTE PTR [eax]
c000e45b:	31 d2                	xor    edx,edx
c000e45d:	88 c2                	mov    dl,al
c000e45f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e463:	8d 48 01             	lea    ecx,[eax+0x1]
c000e466:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e46a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e46e:	25 ff 00 00 00       	and    eax,0xff
c000e473:	c1 e0 08             	shl    eax,0x8
c000e476:	89 d1                	mov    ecx,edx
c000e478:	09 c1                	or     ecx,eax
c000e47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e47e:	8d 50 02             	lea    edx,[eax+0x2]
c000e481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e485:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e489:	25 ff 00 00 00       	and    eax,0xff
c000e48e:	c1 e0 10             	shl    eax,0x10
c000e491:	09 c1                	or     ecx,eax
c000e493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e497:	8d 50 03             	lea    edx,[eax+0x3]
c000e49a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e49e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4a2:	25 ff 00 00 00       	and    eax,0xff
c000e4a7:	c1 e0 18             	shl    eax,0x18
c000e4aa:	09 c1                	or     ecx,eax
c000e4ac:	89 ca                	mov    edx,ecx
c000e4ae:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e4b3:	25 ff 00 00 00       	and    eax,0xff
c000e4b8:	89 14 85 c0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda840],edx
c000e4bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cc:	01 d0                	add    eax,edx
c000e4ce:	83 c0 2c             	add    eax,0x2c
c000e4d1:	8a 00                	mov    al,BYTE PTR [eax]
c000e4d3:	31 d2                	xor    edx,edx
c000e4d5:	88 c2                	mov    dl,al
c000e4d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4db:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4e6:	25 ff 00 00 00       	and    eax,0xff
c000e4eb:	c1 e0 08             	shl    eax,0x8
c000e4ee:	89 d1                	mov    ecx,edx
c000e4f0:	09 c1                	or     ecx,eax
c000e4f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f6:	8d 50 02             	lea    edx,[eax+0x2]
c000e4f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4fd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e501:	25 ff 00 00 00       	and    eax,0xff
c000e506:	c1 e0 10             	shl    eax,0x10
c000e509:	09 c1                	or     ecx,eax
c000e50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50f:	8d 50 03             	lea    edx,[eax+0x3]
c000e512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e516:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e51a:	25 ff 00 00 00       	and    eax,0xff
c000e51f:	c1 e0 18             	shl    eax,0x18
c000e522:	09 c1                	or     ecx,eax
c000e524:	89 ca                	mov    edx,ecx
c000e526:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e52b:	25 ff 00 00 00       	and    eax,0xff
c000e530:	89 14 85 40 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7c0],edx
c000e537:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e53c:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e541:	40                   	inc    eax
c000e542:	a2 80 57 02 c0       	mov    ds:0xc0025780,al
c000e547:	e9 c0 01 00 00       	jmp    c000e70c <scanMADT()+0x4ac>
c000e54c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e551:	0f 85 fd 00 00 00    	jne    c000e654 <scanMADT()+0x3f4>
c000e557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55b:	8d 50 01             	lea    edx,[eax+0x1]
c000e55e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e566:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e56a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e56e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e572:	8d 50 01             	lea    edx,[eax+0x1]
c000e575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e57d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e581:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e585:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58d:	01 d0                	add    eax,edx
c000e58f:	83 c0 2c             	add    eax,0x2c
c000e592:	8a 00                	mov    al,BYTE PTR [eax]
c000e594:	31 d2                	xor    edx,edx
c000e596:	88 c2                	mov    dl,al
c000e598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e59c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e59f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5a3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5a7:	25 ff 00 00 00       	and    eax,0xff
c000e5ac:	c1 e0 08             	shl    eax,0x8
c000e5af:	89 d1                	mov    ecx,edx
c000e5b1:	09 c1                	or     ecx,eax
c000e5b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b7:	8d 50 02             	lea    edx,[eax+0x2]
c000e5ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5c2:	25 ff 00 00 00       	and    eax,0xff
c000e5c7:	c1 e0 10             	shl    eax,0x10
c000e5ca:	09 c1                	or     ecx,eax
c000e5cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d0:	8d 50 03             	lea    edx,[eax+0x3]
c000e5d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5db:	25 ff 00 00 00       	and    eax,0xff
c000e5e0:	c1 e0 18             	shl    eax,0x18
c000e5e3:	09 c8                	or     eax,ecx
c000e5e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5e9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f6:	01 d0                	add    eax,edx
c000e5f8:	83 c0 2c             	add    eax,0x2c
c000e5fb:	8a 00                	mov    al,BYTE PTR [eax]
c000e5fd:	25 ff 00 00 00       	and    eax,0xff
c000e602:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e606:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e609:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e60d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e611:	81 e2 ff 00 00 00    	and    edx,0xff
c000e617:	c1 e2 08             	shl    edx,0x8
c000e61a:	09 d0                	or     eax,edx
c000e61c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e621:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e626:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e62a:	25 ff 00 00 00       	and    eax,0xff
c000e62f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e633:	88 90 e0 fd 01 c0    	mov    BYTE PTR [eax-0x3ffe0220],dl
c000e639:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e63d:	31 d2                	xor    edx,edx
c000e63f:	88 c2                	mov    dl,al
c000e641:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e646:	66 89 84 12 60 57 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda8a0],ax
c000e64e:	e9 b9 00 00 00       	jmp    c000e70c <scanMADT()+0x4ac>
c000e653:	90                   	nop
c000e654:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e659:	0f 85 a1 00 00 00    	jne    c000e700 <scanMADT()+0x4a0>
c000e65f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e663:	8d 50 01             	lea    edx,[eax+0x1]
c000e666:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e66a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e66e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e672:	25 ff 00 00 00       	and    eax,0xff
c000e677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e67b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e67f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e683:	01 d0                	add    eax,edx
c000e685:	83 c0 2c             	add    eax,0x2c
c000e688:	8a 00                	mov    al,BYTE PTR [eax]
c000e68a:	31 d2                	xor    edx,edx
c000e68c:	88 c2                	mov    dl,al
c000e68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e692:	8d 48 01             	lea    ecx,[eax+0x1]
c000e695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e699:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e69d:	25 ff 00 00 00       	and    eax,0xff
c000e6a2:	c1 e0 08             	shl    eax,0x8
c000e6a5:	09 d0                	or     eax,edx
c000e6a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ab:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b4:	8d 50 01             	lea    edx,[eax+0x1]
c000e6b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6bf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c3:	25 ff 00 00 00       	and    eax,0xff
c000e6c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d0:	c1 e0 08             	shl    eax,0x8
c000e6d3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e6d7:	89 c1                	mov    ecx,eax
c000e6d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6dd:	c1 e0 18             	shl    eax,0x18
c000e6e0:	89 c3                	mov    ebx,eax
c000e6e2:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c000e6e7:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ea:	89 15 d0 56 02 c0    	mov    DWORD PTR ds:0xc00256d0,edx
c000e6f0:	09 d9                	or     ecx,ebx
c000e6f2:	89 ca                	mov    edx,ecx
c000e6f4:	89 14 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],edx
c000e6fb:	eb 0f                	jmp    c000e70c <scanMADT()+0x4ac>
c000e6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e700:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e705:	75 05                	jne    c000e70c <scanMADT()+0x4ac>
c000e707:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e70c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e710:	31 d2                	xor    edx,edx
c000e712:	88 c2                	mov    dl,al
c000e714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e718:	01 d0                	add    eax,edx
c000e71a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e71e:	e9 31 fc ff ff       	jmp    c000e354 <scanMADT()+0xf4>
c000e723:	90                   	nop
c000e724:	90                   	nop
c000e725:	eb 05                	jmp    c000e72c <scanMADT()+0x4cc>
c000e727:	90                   	nop
c000e728:	90                   	nop
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	83 c4 38             	add    esp,0x38
c000e72f:	5b                   	pop    ebx
c000e730:	c3                   	ret    
c000e731:	90                   	nop
c000e732:	66 90                	xchg   ax,ax

c000e734 <ACPI::ACPI()>:
c000e734:	83 ec 0c             	sub    esp,0xc
c000e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e73b:	83 ec 08             	sub    esp,0x8
c000e73e:	68 0d ea 01 c0       	push   0xc001ea0d
c000e743:	50                   	push   eax
c000e744:	e8 df d3 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	ba 44 eb 01 c0       	mov    edx,0xc001eb44
c000e751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e755:	89 10                	mov    DWORD PTR [eax],edx
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e766:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e77e:	e8 dd fa ff ff       	call   c000e260 <scanMADT()>
c000e783:	90                   	nop
c000e784:	83 c4 0c             	add    esp,0xc
c000e787:	c3                   	ret    

c000e788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e788:	83 ec 2c             	sub    esp,0x2c
c000e78b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e78f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e793:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e797:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e79b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7a0:	88 d0                	mov    al,dl
c000e7a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7b3:	90                   	nop
c000e7b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7b8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7be:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e7c2:	0f 8d 9c 00 00 00    	jge    c000e864 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e7c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7d0:	83 c2 2a             	add    edx,0x2a
c000e7d3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e7d7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e7dc:	75 7a                	jne    c000e858 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e7de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7e6:	83 c2 2a             	add    edx,0x2a
c000e7e9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e7ed:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e7f1:	75 65                	jne    c000e858 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e7f3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e7f8:	74 3a                	je     c000e834 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e7fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e802:	83 c2 2a             	add    edx,0x2a
c000e805:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e80d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e810:	39 c2                	cmp    edx,eax
c000e812:	74 10                	je     c000e824 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e814:	83 ec 0c             	sub    esp,0xc
c000e817:	68 88 e9 01 c0       	push   0xc001e988
c000e81c:	e8 4e 1a 00 00       	call   c001026f <KePanic(char const*)>
c000e821:	83 c4 10             	add    esp,0x10
c000e824:	83 ec 0c             	sub    esp,0xc
c000e827:	68 12 ea 01 c0       	push   0xc001ea12
c000e82c:	e8 3e 1a 00 00       	call   c001026f <KePanic(char const*)>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e83c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e840:	83 c2 2a             	add    edx,0x2a
c000e843:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e847:	8b 02                	mov    eax,DWORD PTR [edx]
c000e849:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e84c:	89 01                	mov    DWORD PTR [ecx],eax
c000e84e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e851:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e856:	66 90                	xchg   ax,ax
c000e858:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e85c:	e9 53 ff ff ff       	jmp    c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e861:	8d 76 00             	lea    esi,[esi+0x0]
c000e864:	90                   	nop
c000e865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e869:	83 c4 2c             	add    esp,0x2c
c000e86c:	c2 04 00             	ret    0x4
c000e86f:	90                   	nop

c000e870 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e870:	83 ec 1c             	sub    esp,0x1c
c000e873:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e877:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e87b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e87f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e884:	88 c8                	mov    al,cl
c000e886:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e88a:	88 d0                	mov    al,dl
c000e88c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e894:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8a1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8a5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8b7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e8ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8be:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8cd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e8d1:	8d 48 01             	lea    ecx,[eax+0x1]
c000e8d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d8:	83 c2 2a             	add    edx,0x2a
c000e8db:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ed:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e8f4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8fc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e902:	8d 50 01             	lea    edx,[eax+0x1]
c000e905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e909:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e913:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e919:	3d 00 02 00 00       	cmp    eax,0x200
c000e91e:	75 10                	jne    c000e930 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e920:	83 ec 0c             	sub    esp,0xc
c000e923:	68 21 ea 01 c0       	push   0xc001ea21
c000e928:	e8 42 19 00 00       	call   c001026f <KePanic(char const*)>
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	90                   	nop
c000e931:	83 c4 1c             	add    esp,0x1c
c000e934:	c3                   	ret    
c000e935:	90                   	nop
c000e936:	66 90                	xchg   ax,ax

c000e938 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e938:	b8 00 00 00 00       	mov    eax,0x0
c000e93d:	c3                   	ret    
c000e93e:	66 90                	xchg   ax,ax

c000e940 <ACPI::detectPCI()>:
c000e940:	53                   	push   ebx
c000e941:	83 ec 28             	sub    esp,0x28
c000e944:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e949:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e94e:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e953:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e959:	83 e0 04             	and    eax,0x4
c000e95c:	84 c0                	test   al,al
c000e95e:	74 2c                	je     c000e98c <ACPI::detectPCI()+0x4c>
c000e960:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e965:	83 ec 08             	sub    esp,0x8
c000e968:	68 3e ea 01 c0       	push   0xc001ea3e
c000e96d:	50                   	push   eax
c000e96e:	e8 75 f8 ff ff       	call   c000e1e8 <findDataTable(unsigned char*, char*)>
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e97a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e97f:	74 0b                	je     c000e98c <ACPI::detectPCI()+0x4c>
c000e981:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e986:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e98b:	90                   	nop
c000e98c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e998:	8a 00                	mov    al,BYTE PTR [eax]
c000e99a:	3c 01                	cmp    al,0x1
c000e99c:	75 0e                	jne    c000e9ac <ACPI::detectPCI()+0x6c>
c000e99e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9a3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9a8:	eb 2a                	jmp    c000e9d4 <ACPI::detectPCI()+0x94>
c000e9aa:	66 90                	xchg   ax,ax
c000e9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b0:	8a 00                	mov    al,BYTE PTR [eax]
c000e9b2:	3c 02                	cmp    al,0x2
c000e9b4:	75 1e                	jne    c000e9d4 <ACPI::detectPCI()+0x94>
c000e9b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9bb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9c0:	74 12                	je     c000e9d4 <ACPI::detectPCI()+0x94>
c000e9c2:	83 ec 0c             	sub    esp,0xc
c000e9c5:	68 b8 e9 01 c0       	push   0xc001e9b8
c000e9ca:	e8 a0 18 00 00       	call   c001026f <KePanic(char const*)>
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	66 90                	xchg   ax,ax
c000e9d4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e9d8:	83 f0 01             	xor    eax,0x1
c000e9db:	84 c0                	test   al,al
c000e9dd:	74 41                	je     c000ea20 <ACPI::detectPCI()+0xe0>
c000e9df:	e8 4c 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e9e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9e8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e9ed:	75 0d                	jne    c000e9fc <ACPI::detectPCI()+0xbc>
c000e9ef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9f4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9f9:	eb 25                	jmp    c000ea20 <ACPI::detectPCI()+0xe0>
c000e9fb:	90                   	nop
c000e9fc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea01:	75 1d                	jne    c000ea20 <ACPI::detectPCI()+0xe0>
c000ea03:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea08:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea0d:	74 11                	je     c000ea20 <ACPI::detectPCI()+0xe0>
c000ea0f:	83 ec 0c             	sub    esp,0xc
c000ea12:	68 b8 e9 01 c0       	push   0xc001e9b8
c000ea17:	e8 53 18 00 00       	call   c001026f <KePanic(char const*)>
c000ea1c:	83 c4 10             	add    esp,0x10
c000ea1f:	90                   	nop
c000ea20:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea25:	0f 84 85 00 00 00    	je     c000eab0 <ACPI::detectPCI()+0x170>
c000ea2b:	83 ec 0c             	sub    esp,0xc
c000ea2e:	68 43 ea 01 c0       	push   0xc001ea43
c000ea33:	e8 bf 11 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000ea38:	83 c4 10             	add    esp,0x10
c000ea3b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea43:	83 ec 0c             	sub    esp,0xc
c000ea46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea4a:	e8 6a 8d ff ff       	call   c00077b9 <malloc>
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	89 c3                	mov    ebx,eax
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	53                   	push   ebx
c000ea58:	e8 dd 99 00 00       	call   c001843a <PCI::PCI()>
c000ea5d:	83 c4 10             	add    esp,0x10
c000ea60:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ea64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea68:	83 ec 08             	sub    esp,0x8
c000ea6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea6f:	50                   	push   eax
c000ea70:	e8 1b cf ff ff       	call   c000b990 <Device::addChild(Device*)>
c000ea75:	83 c4 10             	add    esp,0x10
c000ea78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea7e:	83 c0 08             	add    eax,0x8
c000ea81:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea83:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea88:	74 0a                	je     c000ea94 <ACPI::detectPCI()+0x154>
c000ea8a:	ba 01 00 00 00       	mov    edx,0x1
c000ea8f:	eb 0b                	jmp    c000ea9c <ACPI::detectPCI()+0x15c>
c000ea91:	8d 76 00             	lea    esi,[esi+0x0]
c000ea94:	ba 02 00 00 00       	mov    edx,0x2
c000ea99:	8d 76 00             	lea    esi,[esi+0x0]
c000ea9c:	6a 00                	push   0x0
c000ea9e:	6a 00                	push   0x0
c000eaa0:	52                   	push   edx
c000eaa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaa5:	ff d0                	call   eax
c000eaa7:	83 c4 10             	add    esp,0x10
c000eaaa:	e9 91 00 00 00       	jmp    c000eb40 <ACPI::detectPCI()+0x200>
c000eaaf:	90                   	nop
c000eab0:	83 ec 0c             	sub    esp,0xc
c000eab3:	68 5b ea 01 c0       	push   0xc001ea5b
c000eab8:	e8 3a 11 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000eabd:	83 c4 10             	add    esp,0x10
c000eac0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eace:	e8 e6 8c ff ff       	call   c00077b9 <malloc>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	89 c3                	mov    ebx,eax
c000ead8:	83 ec 0c             	sub    esp,0xc
c000eadb:	53                   	push   ebx
c000eadc:	e8 85 a4 00 00       	call   c0018f66 <IDE::IDE()>
c000eae1:	83 c4 10             	add    esp,0x10
c000eae4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaf3:	50                   	push   eax
c000eaf4:	e8 97 ce ff ff       	call   c000b990 <Device::addChild(Device*)>
c000eaf9:	83 c4 10             	add    esp,0x10
c000eafc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb00:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb0e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb1b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb28:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2a:	83 c0 08             	add    eax,0x8
c000eb2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2f:	6a 00                	push   0x0
c000eb31:	6a 00                	push   0x0
c000eb33:	6a 00                	push   0x0
c000eb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb39:	ff d0                	call   eax
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	90                   	nop
c000eb41:	83 c4 28             	add    esp,0x28
c000eb44:	5b                   	pop    ebx
c000eb45:	c3                   	ret    
c000eb46:	66 90                	xchg   ax,ax

c000eb48 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb48:	83 ec 1c             	sub    esp,0x1c
c000eb4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eb4f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eb52:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb56:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000eb5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb60:	25 ff 00 00 00       	and    eax,0xff
c000eb65:	83 ec 08             	sub    esp,0x8
c000eb68:	50                   	push   eax
c000eb69:	52                   	push   edx
c000eb6a:	e8 37 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb76:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000eb7c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb80:	25 ff 00 00 00       	and    eax,0xff
c000eb85:	83 ec 04             	sub    esp,0x4
c000eb88:	6a 01                	push   0x1
c000eb8a:	50                   	push   eax
c000eb8b:	52                   	push   edx
c000eb8c:	e8 2b 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eb91:	83 c4 10             	add    esp,0x10
c000eb94:	90                   	nop
c000eb95:	83 c4 1c             	add    esp,0x1c
c000eb98:	c3                   	ret    
c000eb99:	90                   	nop
c000eb9a:	66 90                	xchg   ax,ax

c000eb9c <ACPI::sleep()>:
c000eb9c:	83 ec 0c             	sub    esp,0xc
c000eb9f:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000eba4:	85 c0                	test   eax,eax
c000eba6:	74 08                	je     c000ebb0 <ACPI::sleep()+0x14>
c000eba8:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ebad:	ff d0                	call   eax
c000ebaf:	90                   	nop
c000ebb0:	90                   	nop
c000ebb1:	83 c4 0c             	add    esp,0xc
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop
c000ebb6:	66 90                	xchg   ax,ax

c000ebb8 <ACPI::open(int, int, void*)>:
c000ebb8:	57                   	push   edi
c000ebb9:	56                   	push   esi
c000ebba:	53                   	push   ebx
c000ebbb:	81 ec 70 01 00 00    	sub    esp,0x170
c000ebc1:	83 ec 0c             	sub    esp,0xc
c000ebc4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ebcb:	e8 70 fd ff ff       	call   c000e940 <ACPI::detectPCI()>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	83 ec 0c             	sub    esp,0xc
c000ebd6:	68 e0 e9 01 c0       	push   0xc001e9e0
c000ebdb:	e8 17 10 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	83 ec 0c             	sub    esp,0xc
c000ebe6:	68 70 ea 01 c0       	push   0xc001ea70
c000ebeb:	e8 03 37 00 00       	call   c00122f3 <Thr::loadKernelSymbolTable(char const*)>
c000ebf0:	83 c4 10             	add    esp,0x10
c000ebf3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ebfb:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec06:	83 ec 0c             	sub    esp,0xc
c000ec09:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec10:	e8 a4 8b ff ff       	call   c00077b9 <malloc>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	89 c3                	mov    ebx,eax
c000ec1a:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ec1f:	83 ec 04             	sub    esp,0x4
c000ec22:	50                   	push   eax
c000ec23:	68 8e ea 01 c0       	push   0xc001ea8e
c000ec28:	53                   	push   ebx
c000ec29:	e8 9a be ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ec2e:	83 c4 10             	add    esp,0x10
c000ec31:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec38:	83 ec 08             	sub    esp,0x8
c000ec3b:	6a 01                	push   0x1
c000ec3d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec44:	e8 3f bf ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000ec49:	83 c4 10             	add    esp,0x10
c000ec4c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ec53:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ec5b:	75 17                	jne    c000ec74 <ACPI::open(int, int, void*)+0xbc>
c000ec5d:	83 ec 0c             	sub    esp,0xc
c000ec60:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec67:	e8 7a bf ff ff       	call   c000abe6 <File::close()>
c000ec6c:	83 c4 10             	add    esp,0x10
c000ec6f:	eb 0b                	jmp    c000ec7c <ACPI::open(int, int, void*)+0xc4>
c000ec71:	8d 76 00             	lea    esi,[esi+0x0]
c000ec74:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec7c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec84:	74 1e                	je     c000eca4 <ACPI::open(int, int, void*)+0xec>
c000ec86:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ec8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec8f:	83 c0 08             	add    eax,0x8
c000ec92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec94:	83 ec 0c             	sub    esp,0xc
c000ec97:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec9e:	ff d0                	call   eax
c000eca0:	83 c4 10             	add    esp,0x10
c000eca3:	90                   	nop
c000eca4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ecab:	83 f0 01             	xor    eax,0x1
c000ecae:	84 c0                	test   al,al
c000ecb0:	74 42                	je     c000ecf4 <ACPI::open(int, int, void*)+0x13c>
c000ecb2:	83 ec 0c             	sub    esp,0xc
c000ecb5:	68 ac ea 01 c0       	push   0xc001eaac
c000ecba:	e8 38 0f 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000ecbf:	83 c4 10             	add    esp,0x10
c000ecc2:	83 ec 04             	sub    esp,0x4
c000ecc5:	6a 0c                	push   0xc
c000ecc7:	68 c7 ea 01 c0       	push   0xc001eac7
c000eccc:	68 d8 ea 01 c0       	push   0xc001ead8
c000ecd1:	e8 1f 2c 00 00       	call   c00118f5 <Reg::readIntWithDefault(char*, char*, int)>
c000ecd6:	83 c4 10             	add    esp,0x10
c000ecd9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ece0:	83 ec 0c             	sub    esp,0xc
c000ece3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ecea:	e8 b0 a7 ff ff       	call   c000949f <Virt::setupPageSwapping(int)>
c000ecef:	83 c4 10             	add    esp,0x10
c000ecf2:	66 90                	xchg   ax,ax
c000ecf4:	83 ec 0c             	sub    esp,0xc
c000ecf7:	68 97 db 01 c0       	push   0xc001db97
c000ecfc:	e8 f6 0e 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000ed01:	83 c4 10             	add    esp,0x10
c000ed04:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed0b:	83 ec 08             	sub    esp,0x8
c000ed0e:	6a 12                	push   0x12
c000ed10:	50                   	push   eax
c000ed11:	e8 92 cf ff ff       	call   c000bca8 <getDevicesOfType(DeviceType)>
c000ed16:	83 c4 0c             	add    esp,0xc
c000ed19:	8d 76 00             	lea    esi,[esi+0x0]
c000ed1c:	83 ec 0c             	sub    esp,0xc
c000ed1f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed26:	50                   	push   eax
c000ed27:	e8 b0 e2 00 00       	call   c001cfdc <LinkedList<Device>::isEmpty()>
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	83 f0 01             	xor    eax,0x1
c000ed32:	84 c0                	test   al,al
c000ed34:	0f 84 46 01 00 00    	je     c000ee80 <ACPI::open(int, int, void*)+0x2c8>
c000ed3a:	83 ec 0c             	sub    esp,0xc
c000ed3d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed44:	50                   	push   eax
c000ed45:	e8 ae e2 00 00       	call   c001cff8 <LinkedList<Device>::getFirstElement()>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed5e:	50                   	push   eax
c000ed5f:	e8 9c e2 00 00       	call   c001d000 <LinkedList<Device>::removeFirst()>
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed6e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed75:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed80:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed86:	ba 09 00 00 00       	mov    edx,0x9
c000ed8b:	fc                   	cld    
c000ed8c:	89 c7                	mov    edi,eax
c000ed8e:	89 de                	mov    esi,ebx
c000ed90:	89 d1                	mov    ecx,edx
c000ed92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed94:	83 ec 08             	sub    esp,0x8
c000ed97:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ed9b:	50                   	push   eax
c000ed9c:	83 ec 24             	sub    esp,0x24
c000ed9f:	89 e0                	mov    eax,esp
c000eda1:	89 c3                	mov    ebx,eax
c000eda3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eda7:	ba 09 00 00 00       	mov    edx,0x9
c000edac:	89 df                	mov    edi,ebx
c000edae:	89 c6                	mov    esi,eax
c000edb0:	89 d1                	mov    ecx,edx
c000edb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edb4:	e8 63 9b 00 00       	call   c001891c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000edb9:	83 c4 30             	add    esp,0x30
c000edbc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000edc3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000edcb:	0f 84 4b ff ff ff    	je     c000ed1c <ACPI::open(int, int, void*)+0x164>
c000edd1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000eddc:	83 ec 0c             	sub    esp,0xc
c000eddf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ede6:	e8 ce 89 ff ff       	call   c00077b9 <malloc>
c000edeb:	83 c4 10             	add    esp,0x10
c000edee:	89 c3                	mov    ebx,eax
c000edf0:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000edf5:	83 ec 04             	sub    esp,0x4
c000edf8:	50                   	push   eax
c000edf9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee00:	53                   	push   ebx
c000ee01:	e8 c2 bc ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ee06:	83 c4 10             	add    esp,0x10
c000ee09:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee10:	83 ec 0c             	sub    esp,0xc
c000ee13:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee1a:	e8 d7 bf ff ff       	call   c000adf6 <File::exists()>
c000ee1f:	83 c4 10             	add    esp,0x10
c000ee22:	84 c0                	test   al,al
c000ee24:	74 2a                	je     c000ee50 <ACPI::open(int, int, void*)+0x298>
c000ee26:	83 ec 08             	sub    esp,0x8
c000ee29:	6a 01                	push   0x1
c000ee2b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee32:	e8 33 3f 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000ee37:	83 c4 10             	add    esp,0x10
c000ee3a:	83 ec 08             	sub    esp,0x8
c000ee3d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee44:	50                   	push   eax
c000ee45:	e8 51 41 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000ee4a:	83 c4 10             	add    esp,0x10
c000ee4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee50:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ee58:	0f 84 be fe ff ff    	je     c000ed1c <ACPI::open(int, int, void*)+0x164>
c000ee5e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ee65:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee67:	83 c0 08             	add    eax,0x8
c000ee6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee6c:	83 ec 0c             	sub    esp,0xc
c000ee6f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee76:	ff d0                	call   eax
c000ee78:	83 c4 10             	add    esp,0x10
c000ee7b:	e9 9c fe ff ff       	jmp    c000ed1c <ACPI::open(int, int, void*)+0x164>
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee8a:	50                   	push   eax
c000ee8b:	e8 48 e1 00 00       	call   c001cfd8 <LinkedList<Device>::~LinkedList()>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000ee99:	83 ec 08             	sub    esp,0x8
c000ee9c:	6a 01                	push   0x1
c000ee9e:	68 df ea 01 c0       	push   0xc001eadf
c000eea3:	e8 c2 3e 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000eea8:	83 c4 10             	add    esp,0x10
c000eeab:	83 ec 08             	sub    esp,0x8
c000eeae:	53                   	push   ebx
c000eeaf:	50                   	push   eax
c000eeb0:	e8 e6 40 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000eeb5:	83 c4 10             	add    esp,0x10
c000eeb8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000eebd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eec3:	83 e0 04             	and    eax,0x4
c000eec6:	84 c0                	test   al,al
c000eec8:	0f 84 16 01 00 00    	je     c000efe4 <ACPI::open(int, int, void*)+0x42c>
c000eece:	83 ec 0c             	sub    esp,0xc
c000eed1:	68 fc ea 01 c0       	push   0xc001eafc
c000eed6:	e8 1c 0d 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000eedb:	83 c4 10             	add    esp,0x10
c000eede:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000eee9:	83 ec 0c             	sub    esp,0xc
c000eeec:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000eef3:	e8 c1 88 ff ff       	call   c00077b9 <malloc>
c000eef8:	83 c4 10             	add    esp,0x10
c000eefb:	89 c3                	mov    ebx,eax
c000eefd:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ef02:	83 ec 04             	sub    esp,0x4
c000ef05:	50                   	push   eax
c000ef06:	68 19 eb 01 c0       	push   0xc001eb19
c000ef0b:	53                   	push   ebx
c000ef0c:	e8 b7 bb ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ef11:	83 c4 10             	add    esp,0x10
c000ef14:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef1b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef23:	74 1b                	je     c000ef40 <ACPI::open(int, int, void*)+0x388>
c000ef25:	83 ec 0c             	sub    esp,0xc
c000ef28:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef2f:	e8 c2 be ff ff       	call   c000adf6 <File::exists()>
c000ef34:	83 c4 10             	add    esp,0x10
c000ef37:	84 c0                	test   al,al
c000ef39:	74 05                	je     c000ef40 <ACPI::open(int, int, void*)+0x388>
c000ef3b:	b0 01                	mov    al,0x1
c000ef3d:	eb 05                	jmp    c000ef44 <ACPI::open(int, int, void*)+0x38c>
c000ef3f:	90                   	nop
c000ef40:	b0 00                	mov    al,0x0
c000ef42:	66 90                	xchg   ax,ax
c000ef44:	84 c0                	test   al,al
c000ef46:	74 28                	je     c000ef70 <ACPI::open(int, int, void*)+0x3b8>
c000ef48:	83 ec 08             	sub    esp,0x8
c000ef4b:	6a 01                	push   0x1
c000ef4d:	68 19 eb 01 c0       	push   0xc001eb19
c000ef52:	e8 13 3e 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c000ef57:	83 c4 10             	add    esp,0x10
c000ef5a:	83 ec 08             	sub    esp,0x8
c000ef5d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ef64:	50                   	push   eax
c000ef65:	e8 31 40 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef70:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef78:	74 2a                	je     c000efa4 <ACPI::open(int, int, void*)+0x3ec>
c000ef7a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef82:	74 20                	je     c000efa4 <ACPI::open(int, int, void*)+0x3ec>
c000ef84:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef8d:	83 c0 08             	add    eax,0x8
c000ef90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef9c:	ff d0                	call   eax
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	8d 76 00             	lea    esi,[esi+0x0]
c000efa4:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000efa9:	83 ec 08             	sub    esp,0x8
c000efac:	68 36 eb 01 c0       	push   0xc001eb36
c000efb1:	50                   	push   eax
c000efb2:	e8 31 f2 ff ff       	call   c000e1e8 <findDataTable(unsigned char*, char*)>
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000efc1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000efc9:	74 19                	je     c000efe4 <ACPI::open(int, int, void*)+0x42c>
c000efcb:	83 ec 08             	sub    esp,0x8
c000efce:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000efd5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000efdc:	e8 67 fb ff ff       	call   c000eb48 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000efe1:	83 c4 10             	add    esp,0x10
c000efe4:	b8 00 00 00 00       	mov    eax,0x0
c000efe9:	81 c4 70 01 00 00    	add    esp,0x170
c000efef:	5b                   	pop    ebx
c000eff0:	5e                   	pop    esi
c000eff1:	5f                   	pop    edi
c000eff2:	c3                   	ret    
c000eff3:	90                   	nop

c000eff4 <CPU::close(int, int, void*)>:
c000eff4:	31 c0                	xor    eax,eax
c000eff6:	c3                   	ret    
c000eff7:	90                   	nop

c000eff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eff8:	60                   	pusha  
c000eff9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000effd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f001:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f005:	9c                   	pushf  
c000f006:	fa                   	cli    
c000f007:	0f 09                	wbinvd 
c000f009:	0f 30                	wrmsr  
c000f00b:	9d                   	popf   
c000f00c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f010:	89 02                	mov    DWORD PTR [edx],eax
c000f012:	61                   	popa   
c000f013:	c3                   	ret    

c000f014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f014:	60                   	pusha  
c000f015:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f019:	9c                   	pushf  
c000f01a:	fa                   	cli    
c000f01b:	0f 09                	wbinvd 
c000f01d:	31 c0                	xor    eax,eax
c000f01f:	31 d2                	xor    edx,edx
c000f021:	0f 32                	rdmsr  
c000f023:	9d                   	popf   
c000f024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f028:	89 02                	mov    DWORD PTR [edx],eax
c000f02a:	61                   	popa   
c000f02b:	c3                   	ret    

c000f02c <CPU::AMD_K6_writeback(int, int, int)>:
c000f02c:	56                   	push   esi
c000f02d:	53                   	push   ebx
c000f02e:	83 ec 10             	sub    esp,0x10
c000f031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f035:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f03a:	75 5d                	jne    c000f099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f03c:	83 f8 08             	cmp    eax,0x8
c000f03f:	75 09                	jne    c000f04a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f041:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f046:	7e 13                	jle    c000f05b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f048:	eb 30                	jmp    c000f07a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f04a:	83 f8 06             	cmp    eax,0x6
c000f04d:	7c 4a                	jl     c000f099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f04f:	83 f8 07             	cmp    eax,0x7
c000f052:	7e 07                	jle    c000f05b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f054:	83 f8 09             	cmp    eax,0x9
c000f057:	74 21                	je     c000f07a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f059:	eb 3e                	jmp    c000f099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f05b:	89 e6                	mov    esi,esp
c000f05d:	8b 1d dc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022edc
c000f063:	56                   	push   esi
c000f064:	c1 eb 15             	shr    ebx,0x15
c000f067:	68 82 00 00 c0       	push   0xc0000082
c000f06c:	83 e3 7e             	and    ebx,0x7e
c000f06f:	e8 a0 ff ff ff       	call   c000f014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f074:	56                   	push   esi
c000f075:	6a 00                	push   0x0
c000f077:	53                   	push   ebx
c000f078:	eb 12                	jmp    c000f08c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f07a:	89 e3                	mov    ebx,esp
c000f07c:	53                   	push   ebx
c000f07d:	68 82 00 00 c0       	push   0xc0000082
c000f082:	e8 8d ff ff ff       	call   c000f014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f087:	53                   	push   ebx
c000f088:	6a 00                	push   0x0
c000f08a:	6a 00                	push   0x0
c000f08c:	68 82 00 00 c0       	push   0xc0000082
c000f091:	e8 62 ff ff ff       	call   c000eff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f096:	83 c4 18             	add    esp,0x18
c000f099:	83 c4 10             	add    esp,0x10
c000f09c:	5b                   	pop    ebx
c000f09d:	5e                   	pop    esi
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0a0:	55                   	push   ebp
c000f0a1:	57                   	push   edi
c000f0a2:	56                   	push   esi
c000f0a3:	53                   	push   ebx
c000f0a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f0ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0b0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f0b4:	39 05 f0 fd 01 c0    	cmp    DWORD PTR ds:0xc001fdf0,eax
c000f0ba:	75 23                	jne    c000f0df <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f0bc:	a1 2c 59 02 c0       	mov    eax,ds:0xc002592c
c000f0c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0c5:	89 06                	mov    DWORD PTR [esi],eax
c000f0c7:	a1 28 59 02 c0       	mov    eax,ds:0xc0025928
c000f0cc:	89 07                	mov    DWORD PTR [edi],eax
c000f0ce:	a1 24 59 02 c0       	mov    eax,ds:0xc0025924
c000f0d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0d6:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c000f0db:	89 02                	mov    DWORD PTR [edx],eax
c000f0dd:	eb 3f                	jmp    c000f11e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f0df:	31 c9                	xor    ecx,ecx
c000f0e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0e5:	0f a2                	cpuid  
c000f0e7:	89 06                	mov    DWORD PTR [esi],eax
c000f0e9:	89 1f                	mov    DWORD PTR [edi],ebx
c000f0eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0ef:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f0f2:	89 10                	mov    DWORD PTR [eax],edx
c000f0f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0f8:	a3 f0 fd 01 c0       	mov    ds:0xc001fdf0,eax
c000f0fd:	8b 06                	mov    eax,DWORD PTR [esi]
c000f0ff:	a3 2c 59 02 c0       	mov    ds:0xc002592c,eax
c000f104:	8b 07                	mov    eax,DWORD PTR [edi]
c000f106:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000f10b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f10e:	a3 24 59 02 c0       	mov    ds:0xc0025924,eax
c000f113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f117:	8b 00                	mov    eax,DWORD PTR [eax]
c000f119:	a3 20 59 02 c0       	mov    ds:0xc0025920,eax
c000f11e:	5b                   	pop    ebx
c000f11f:	5e                   	pop    esi
c000f120:	5f                   	pop    edi
c000f121:	5d                   	pop    ebp
c000f122:	c3                   	ret    
c000f123:	90                   	nop

c000f124 <CPU::cpuidCheckEDX(unsigned int)>:
c000f124:	83 ec 10             	sub    esp,0x10
c000f127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f12b:	50                   	push   eax
c000f12c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f130:	50                   	push   eax
c000f131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f135:	50                   	push   eax
c000f136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f13a:	50                   	push   eax
c000f13b:	6a 01                	push   0x1
c000f13d:	e8 5e ff ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f146:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f14a:	0f 95 c0             	setne  al
c000f14d:	83 c4 24             	add    esp,0x24
c000f150:	c3                   	ret    
c000f151:	90                   	nop

c000f152 <CPU::cpuidCheckECX(unsigned int)>:
c000f152:	83 ec 10             	sub    esp,0x10
c000f155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f159:	50                   	push   eax
c000f15a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f15e:	50                   	push   eax
c000f15f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f163:	50                   	push   eax
c000f164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f168:	50                   	push   eax
c000f169:	6a 01                	push   0x1
c000f16b:	e8 30 ff ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f174:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f178:	0f 95 c0             	setne  al
c000f17b:	83 c4 24             	add    esp,0x24
c000f17e:	c3                   	ret    
c000f17f:	90                   	nop

c000f180 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f180:	83 ec 10             	sub    esp,0x10
c000f183:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f187:	50                   	push   eax
c000f188:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f18c:	50                   	push   eax
c000f18d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f191:	50                   	push   eax
c000f192:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f196:	50                   	push   eax
c000f197:	6a 07                	push   0x7
c000f199:	e8 02 ff ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f19e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1a2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1a6:	0f 95 c0             	setne  al
c000f1a9:	83 c4 24             	add    esp,0x24
c000f1ac:	c3                   	ret    
c000f1ad:	90                   	nop

c000f1ae <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f1ae:	83 ec 10             	sub    esp,0x10
c000f1b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1b5:	50                   	push   eax
c000f1b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ba:	50                   	push   eax
c000f1bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1bf:	50                   	push   eax
c000f1c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c4:	50                   	push   eax
c000f1c5:	6a 07                	push   0x7
c000f1c7:	e8 d4 fe ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1d4:	0f 95 c0             	setne  al
c000f1d7:	83 c4 24             	add    esp,0x24
c000f1da:	c3                   	ret    
c000f1db:	90                   	nop

c000f1dc <CPU::CPU()>:
c000f1dc:	83 ec 0c             	sub    esp,0xc
c000f1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e3:	83 ec 08             	sub    esp,0x8
c000f1e6:	68 59 ec 01 c0       	push   0xc001ec59
c000f1eb:	50                   	push   eax
c000f1ec:	e8 37 c9 ff ff       	call   c000bb28 <Device::Device(char const*)>
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	ba e0 ec 01 c0       	mov    edx,0xc001ece0
c000f1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1fd:	89 10                	mov    DWORD PTR [eax],edx
c000f1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f203:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f211:	05 78 01 00 00       	add    eax,0x178
c000f216:	83 ec 0c             	sub    esp,0xc
c000f219:	50                   	push   eax
c000f21a:	e8 5b 7e ff ff       	call   c000707a <GDT::GDT()>
c000f21f:	83 c4 10             	add    esp,0x10
c000f222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f226:	05 7c 09 00 00       	add    eax,0x97c
c000f22b:	83 ec 0c             	sub    esp,0xc
c000f22e:	50                   	push   eax
c000f22f:	e8 80 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f234:	83 c4 10             	add    esp,0x10
c000f237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f23b:	05 7c 11 00 00       	add    eax,0x117c
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	50                   	push   eax
c000f244:	e8 8f 99 ff ff       	call   c0008bd8 <TSS::TSS()>
c000f249:	83 c4 10             	add    esp,0x10
c000f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f250:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f25b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f265:	90                   	nop
c000f266:	83 c4 0c             	add    esp,0xc
c000f269:	c3                   	ret    

c000f26a <CPU::displayFeatures()>:
c000f26a:	c3                   	ret    
c000f26b:	90                   	nop

c000f26c <CPU::detectFeatures()>:
c000f26c:	55                   	push   ebp
c000f26d:	57                   	push   edi
c000f26e:	56                   	push   esi
c000f26f:	53                   	push   ebx
c000f270:	83 ec 30             	sub    esp,0x30
c000f273:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f277:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f281:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f288:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f28e:	6a 0d                	push   0xd
c000f290:	6a 00                	push   0x0
c000f292:	55                   	push   ebp
c000f293:	e8 38 12 ff ff       	call   c00004d0 <memset>
c000f298:	83 c4 10             	add    esp,0x10
c000f29b:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f2a0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2a7:	0f 84 d5 05 00 00    	je     c000f882 <CPU::detectFeatures()+0x616>
c000f2ad:	83 ec 0c             	sub    esp,0xc
c000f2b0:	89 ef                	mov    edi,ebp
c000f2b2:	6a 10                	push   0x10
c000f2b4:	e8 6b fe ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f2b9:	83 e0 01             	and    eax,0x1
c000f2bc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2c5:	83 e0 fd             	and    eax,0xfffffffd
c000f2c8:	09 d0                	or     eax,edx
c000f2ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2d0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f2d7:	e8 48 fe ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f2dc:	83 e0 01             	and    eax,0x1
c000f2df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f2e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2ec:	83 e0 fb             	and    eax,0xfffffffb
c000f2ef:	09 d0                	or     eax,edx
c000f2f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2f7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2fe:	e8 21 fe ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f303:	83 e0 01             	and    eax,0x1
c000f306:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f30d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f313:	83 e0 f7             	and    eax,0xfffffff7
c000f316:	09 d0                	or     eax,edx
c000f318:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f31e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f325:	e8 fa fd ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f32a:	83 e0 01             	and    eax,0x1
c000f32d:	c1 e0 04             	shl    eax,0x4
c000f330:	88 c2                	mov    dl,al
c000f332:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f338:	83 e0 ef             	and    eax,0xffffffef
c000f33b:	09 d0                	or     eax,edx
c000f33d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f343:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f34a:	e8 d5 fd ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f34f:	83 e0 01             	and    eax,0x1
c000f352:	c1 e0 05             	shl    eax,0x5
c000f355:	88 c2                	mov    dl,al
c000f357:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f35d:	83 e0 df             	and    eax,0xffffffdf
c000f360:	09 d0                	or     eax,edx
c000f362:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f368:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f36f:	e8 b0 fd ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f374:	83 e0 01             	and    eax,0x1
c000f377:	8d 14 00             	lea    edx,[eax+eax*1]
c000f37a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f380:	83 e0 fd             	and    eax,0xfffffffd
c000f383:	09 d0                	or     eax,edx
c000f385:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f38b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f392:	e8 8d fd ff ff       	call   c000f124 <CPU::cpuidCheckEDX(unsigned int)>
c000f397:	83 e0 01             	and    eax,0x1
c000f39a:	c1 e0 06             	shl    eax,0x6
c000f39d:	88 c2                	mov    dl,al
c000f39f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3a5:	83 e0 bf             	and    eax,0xffffffbf
c000f3a8:	09 d0                	or     eax,edx
c000f3aa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f3b0:	58                   	pop    eax
c000f3b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3b5:	50                   	push   eax
c000f3b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3ba:	50                   	push   eax
c000f3bb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f3bf:	56                   	push   esi
c000f3c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3c4:	50                   	push   eax
c000f3c5:	6a 00                	push   0x0
c000f3c7:	e8 d4 fc ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3cc:	b8 04 00 00 00       	mov    eax,0x4
c000f3d1:	89 c1                	mov    ecx,eax
c000f3d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3d5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f3db:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f3df:	89 c1                	mov    ecx,eax
c000f3e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3e3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f3e9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f3ed:	89 c1                	mov    ecx,eax
c000f3ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f1:	83 c4 18             	add    esp,0x18
c000f3f4:	68 68 eb 01 c0       	push   0xc001eb68
c000f3f9:	55                   	push   ebp
c000f3fa:	e8 e1 12 ff ff       	call   c00006e0 <strcmp>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	85 c0                	test   eax,eax
c000f404:	75 0f                	jne    c000f415 <CPU::detectFeatures()+0x1a9>
c000f406:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f410:	e9 22 02 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f415:	50                   	push   eax
c000f416:	50                   	push   eax
c000f417:	68 75 eb 01 c0       	push   0xc001eb75
c000f41c:	55                   	push   ebp
c000f41d:	e8 be 12 ff ff       	call   c00006e0 <strcmp>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	85 c0                	test   eax,eax
c000f427:	74 dd                	je     c000f406 <CPU::detectFeatures()+0x19a>
c000f429:	50                   	push   eax
c000f42a:	50                   	push   eax
c000f42b:	68 82 eb 01 c0       	push   0xc001eb82
c000f430:	55                   	push   ebp
c000f431:	e8 aa 12 ff ff       	call   c00006e0 <strcmp>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	85 c0                	test   eax,eax
c000f43b:	74 2a                	je     c000f467 <CPU::detectFeatures()+0x1fb>
c000f43d:	50                   	push   eax
c000f43e:	50                   	push   eax
c000f43f:	68 8f eb 01 c0       	push   0xc001eb8f
c000f444:	55                   	push   ebp
c000f445:	e8 96 12 ff ff       	call   c00006e0 <strcmp>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	85 c0                	test   eax,eax
c000f44f:	74 16                	je     c000f467 <CPU::detectFeatures()+0x1fb>
c000f451:	50                   	push   eax
c000f452:	50                   	push   eax
c000f453:	68 9c eb 01 c0       	push   0xc001eb9c
c000f458:	55                   	push   ebp
c000f459:	e8 82 12 ff ff       	call   c00006e0 <strcmp>
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	85 c0                	test   eax,eax
c000f463:	74 48                	je     c000f4ad <CPU::detectFeatures()+0x241>
c000f465:	eb 0f                	jmp    c000f476 <CPU::detectFeatures()+0x20a>
c000f467:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f471:	e9 c1 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f476:	50                   	push   eax
c000f477:	50                   	push   eax
c000f478:	68 a9 eb 01 c0       	push   0xc001eba9
c000f47d:	55                   	push   ebp
c000f47e:	e8 5d 12 ff ff       	call   c00006e0 <strcmp>
c000f483:	83 c4 10             	add    esp,0x10
c000f486:	85 c0                	test   eax,eax
c000f488:	74 23                	je     c000f4ad <CPU::detectFeatures()+0x241>
c000f48a:	57                   	push   edi
c000f48b:	57                   	push   edi
c000f48c:	68 b6 eb 01 c0       	push   0xc001ebb6
c000f491:	55                   	push   ebp
c000f492:	e8 49 12 ff ff       	call   c00006e0 <strcmp>
c000f497:	83 c4 10             	add    esp,0x10
c000f49a:	85 c0                	test   eax,eax
c000f49c:	75 1e                	jne    c000f4bc <CPU::detectFeatures()+0x250>
c000f49e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4a8:	e9 8a 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f4ad:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f4b7:	e9 7b 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f4bc:	56                   	push   esi
c000f4bd:	56                   	push   esi
c000f4be:	68 c3 eb 01 c0       	push   0xc001ebc3
c000f4c3:	55                   	push   ebp
c000f4c4:	e8 17 12 ff ff       	call   c00006e0 <strcmp>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	85 c0                	test   eax,eax
c000f4ce:	75 0f                	jne    c000f4df <CPU::detectFeatures()+0x273>
c000f4d0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f4da:	e9 58 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f4df:	51                   	push   ecx
c000f4e0:	51                   	push   ecx
c000f4e1:	68 82 eb 01 c0       	push   0xc001eb82
c000f4e6:	55                   	push   ebp
c000f4e7:	e8 f4 11 ff ff       	call   c00006e0 <strcmp>
c000f4ec:	83 c4 10             	add    esp,0x10
c000f4ef:	85 c0                	test   eax,eax
c000f4f1:	75 0f                	jne    c000f502 <CPU::detectFeatures()+0x296>
c000f4f3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f4fd:	e9 35 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f502:	52                   	push   edx
c000f503:	52                   	push   edx
c000f504:	68 d0 eb 01 c0       	push   0xc001ebd0
c000f509:	55                   	push   ebp
c000f50a:	e8 d1 11 ff ff       	call   c00006e0 <strcmp>
c000f50f:	83 c4 10             	add    esp,0x10
c000f512:	85 c0                	test   eax,eax
c000f514:	75 0f                	jne    c000f525 <CPU::detectFeatures()+0x2b9>
c000f516:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f520:	e9 12 01 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f525:	50                   	push   eax
c000f526:	50                   	push   eax
c000f527:	68 dd eb 01 c0       	push   0xc001ebdd
c000f52c:	55                   	push   ebp
c000f52d:	e8 ae 11 ff ff       	call   c00006e0 <strcmp>
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	85 c0                	test   eax,eax
c000f537:	75 0f                	jne    c000f548 <CPU::detectFeatures()+0x2dc>
c000f539:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f543:	e9 ef 00 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f548:	50                   	push   eax
c000f549:	50                   	push   eax
c000f54a:	68 ea eb 01 c0       	push   0xc001ebea
c000f54f:	55                   	push   ebp
c000f550:	e8 8b 11 ff ff       	call   c00006e0 <strcmp>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	85 c0                	test   eax,eax
c000f55a:	75 0f                	jne    c000f56b <CPU::detectFeatures()+0x2ff>
c000f55c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f566:	e9 cc 00 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f56b:	50                   	push   eax
c000f56c:	50                   	push   eax
c000f56d:	68 f7 eb 01 c0       	push   0xc001ebf7
c000f572:	55                   	push   ebp
c000f573:	e8 68 11 ff ff       	call   c00006e0 <strcmp>
c000f578:	83 c4 10             	add    esp,0x10
c000f57b:	85 c0                	test   eax,eax
c000f57d:	75 0f                	jne    c000f58e <CPU::detectFeatures()+0x322>
c000f57f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f589:	e9 a9 00 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f58e:	50                   	push   eax
c000f58f:	50                   	push   eax
c000f590:	68 04 ec 01 c0       	push   0xc001ec04
c000f595:	55                   	push   ebp
c000f596:	e8 45 11 ff ff       	call   c00006e0 <strcmp>
c000f59b:	83 c4 10             	add    esp,0x10
c000f59e:	85 c0                	test   eax,eax
c000f5a0:	75 0f                	jne    c000f5b1 <CPU::detectFeatures()+0x345>
c000f5a2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f5ac:	e9 86 00 00 00       	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f5b1:	50                   	push   eax
c000f5b2:	50                   	push   eax
c000f5b3:	68 11 ec 01 c0       	push   0xc001ec11
c000f5b8:	55                   	push   ebp
c000f5b9:	e8 22 11 ff ff       	call   c00006e0 <strcmp>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	75 0c                	jne    c000f5d1 <CPU::detectFeatures()+0x365>
c000f5c5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f5cf:	eb 66                	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f5d1:	50                   	push   eax
c000f5d2:	50                   	push   eax
c000f5d3:	68 1e ec 01 c0       	push   0xc001ec1e
c000f5d8:	55                   	push   ebp
c000f5d9:	e8 02 11 ff ff       	call   c00006e0 <strcmp>
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	85 c0                	test   eax,eax
c000f5e3:	75 0c                	jne    c000f5f1 <CPU::detectFeatures()+0x385>
c000f5e5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f5ef:	eb 46                	jmp    c000f637 <CPU::detectFeatures()+0x3cb>
c000f5f1:	57                   	push   edi
c000f5f2:	57                   	push   edi
c000f5f3:	68 2b ec 01 c0       	push   0xc001ec2b
c000f5f8:	55                   	push   ebp
c000f5f9:	e8 e2 10 ff ff       	call   c00006e0 <strcmp>
c000f5fe:	83 c4 10             	add    esp,0x10
c000f601:	85 c0                	test   eax,eax
c000f603:	74 e0                	je     c000f5e5 <CPU::detectFeatures()+0x379>
c000f605:	56                   	push   esi
c000f606:	56                   	push   esi
c000f607:	68 38 ec 01 c0       	push   0xc001ec38
c000f60c:	55                   	push   ebp
c000f60d:	e8 ce 10 ff ff       	call   c00006e0 <strcmp>
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	85 c0                	test   eax,eax
c000f617:	74 cc                	je     c000f5e5 <CPU::detectFeatures()+0x379>
c000f619:	51                   	push   ecx
c000f61a:	51                   	push   ecx
c000f61b:	68 45 ec 01 c0       	push   0xc001ec45
c000f620:	55                   	push   ebp
c000f621:	e8 ba 10 ff ff       	call   c00006e0 <strcmp>
c000f626:	83 c4 10             	add    esp,0x10
c000f629:	85 c0                	test   eax,eax
c000f62b:	74 b8                	je     c000f5e5 <CPU::detectFeatures()+0x379>
c000f62d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f637:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f63c:	0f 86 be 00 00 00    	jbe    c000f700 <CPU::detectFeatures()+0x494>
c000f642:	83 ec 0c             	sub    esp,0xc
c000f645:	68 80 00 00 00       	push   0x80
c000f64a:	e8 31 fb ff ff       	call   c000f180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f64f:	83 e0 01             	and    eax,0x1
c000f652:	c1 e0 06             	shl    eax,0x6
c000f655:	88 c2                	mov    dl,al
c000f657:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f65d:	83 e0 bf             	and    eax,0xffffffbf
c000f660:	09 d0                	or     eax,edx
c000f662:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f668:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f66f:	e8 0c fb ff ff       	call   c000f180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f674:	83 e0 01             	and    eax,0x1
c000f677:	c1 e0 04             	shl    eax,0x4
c000f67a:	88 c2                	mov    dl,al
c000f67c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f682:	83 e0 ef             	and    eax,0xffffffef
c000f685:	09 d0                	or     eax,edx
c000f687:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f68d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f694:	e8 e7 fa ff ff       	call   c000f180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f699:	c1 e0 07             	shl    eax,0x7
c000f69c:	88 c2                	mov    dl,al
c000f69e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6a4:	83 e0 7f             	and    eax,0x7f
c000f6a7:	09 d0                	or     eax,edx
c000f6a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f6b6:	e8 f3 fa ff ff       	call   c000f1ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6bb:	83 e0 01             	and    eax,0x1
c000f6be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f6c5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6cb:	83 e0 f7             	and    eax,0xfffffff7
c000f6ce:	09 d0                	or     eax,edx
c000f6d0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6d6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f6dd:	e8 cc fa ff ff       	call   c000f1ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	83 e0 01             	and    eax,0x1
c000f6e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f6ef:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f6f5:	83 e0 fb             	and    eax,0xfffffffb
c000f6f8:	09 d0                	or     eax,edx
c000f6fa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f700:	83 ec 0c             	sub    esp,0xc
c000f703:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f707:	50                   	push   eax
c000f708:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f70c:	50                   	push   eax
c000f70d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f711:	56                   	push   esi
c000f712:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f716:	50                   	push   eax
c000f717:	6a 01                	push   0x1
c000f719:	e8 82 f9 ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f722:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f728:	88 ca                	mov    dl,cl
c000f72a:	83 e0 f0             	and    eax,0xfffffff0
c000f72d:	83 e2 0f             	and    edx,0xf
c000f730:	09 d0                	or     eax,edx
c000f732:	88 ca                	mov    dl,cl
c000f734:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f73a:	c0 ea 04             	shr    dl,0x4
c000f73d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f741:	0f b6 c2             	movzx  eax,dl
c000f744:	83 c4 20             	add    esp,0x20
c000f747:	c1 e0 06             	shl    eax,0x6
c000f74a:	89 c7                	mov    edi,eax
c000f74c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f752:	66 25 3f c0          	and    ax,0xc03f
c000f756:	09 f8                	or     eax,edi
c000f758:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f75f:	89 c8                	mov    eax,ecx
c000f761:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f768:	c1 e8 08             	shr    eax,0x8
c000f76b:	83 e5 3f             	and    ebp,0x3f
c000f76e:	83 e0 0f             	and    eax,0xf
c000f771:	89 c7                	mov    edi,eax
c000f773:	c1 e7 06             	shl    edi,0x6
c000f776:	09 ef                	or     edi,ebp
c000f778:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f77f:	89 fa                	mov    edx,edi
c000f781:	83 e5 c0             	and    ebp,0xffffffc0
c000f784:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f78a:	88 c2                	mov    dl,al
c000f78c:	c0 ea 02             	shr    dl,0x2
c000f78f:	89 d7                	mov    edi,edx
c000f791:	09 ef                	or     edi,ebp
c000f793:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f799:	89 fa                	mov    edx,edi
c000f79b:	83 e5 cf             	and    ebp,0xffffffcf
c000f79e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7a4:	89 cf                	mov    edi,ecx
c000f7a6:	c1 ef 0c             	shr    edi,0xc
c000f7a9:	83 e7 03             	and    edi,0x3
c000f7ac:	c1 e7 04             	shl    edi,0x4
c000f7af:	09 ef                	or     edi,ebp
c000f7b1:	3c 06                	cmp    al,0x6
c000f7b3:	89 fa                	mov    edx,edi
c000f7b5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f7bb:	74 04                	je     c000f7c1 <CPU::detectFeatures()+0x555>
c000f7bd:	3c 0f                	cmp    al,0xf
c000f7bf:	75 5c                	jne    c000f81d <CPU::detectFeatures()+0x5b1>
c000f7c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f7c5:	89 cf                	mov    edi,ecx
c000f7c7:	c1 ef 10             	shr    edi,0x10
c000f7ca:	c1 e7 04             	shl    edi,0x4
c000f7cd:	09 fa                	or     edx,edi
c000f7cf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f7d5:	0f b6 d2             	movzx  edx,dl
c000f7d8:	66 81 e7 3f c0       	and    di,0xc03f
c000f7dd:	c1 e2 06             	shl    edx,0x6
c000f7e0:	09 fa                	or     edx,edi
c000f7e2:	3c 0f                	cmp    al,0xf
c000f7e4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f7eb:	75 30                	jne    c000f81d <CPU::detectFeatures()+0x5b1>
c000f7ed:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f7f3:	c1 e9 14             	shr    ecx,0x14
c000f7f6:	83 e0 3f             	and    eax,0x3f
c000f7f9:	83 c1 0f             	add    ecx,0xf
c000f7fc:	88 ca                	mov    dl,cl
c000f7fe:	c0 e9 02             	shr    cl,0x2
c000f801:	c1 e2 06             	shl    edx,0x6
c000f804:	09 d0                	or     eax,edx
c000f806:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f80c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f812:	83 e0 c0             	and    eax,0xffffffc0
c000f815:	09 c1                	or     ecx,eax
c000f817:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f81d:	83 ec 0c             	sub    esp,0xc
c000f820:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f827:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f82b:	50                   	push   eax
c000f82c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f830:	55                   	push   ebp
c000f831:	56                   	push   esi
c000f832:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f836:	57                   	push   edi
c000f837:	68 00 00 00 80       	push   0x80000000
c000f83c:	e8 5f f8 ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f841:	83 c4 20             	add    esp,0x20
c000f844:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f84c:	76 22                	jbe    c000f870 <CPU::detectFeatures()+0x604>
c000f84e:	83 ec 0c             	sub    esp,0xc
c000f851:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f855:	50                   	push   eax
c000f856:	55                   	push   ebp
c000f857:	56                   	push   esi
c000f858:	57                   	push   edi
c000f859:	68 01 00 00 80       	push   0x80000001
c000f85e:	e8 3d f8 ff ff       	call   c000f0a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f863:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f86d:	83 c4 20             	add    esp,0x20
c000f870:	52                   	push   edx
c000f871:	52                   	push   edx
c000f872:	68 51 ec 01 c0       	push   0xc001ec51
c000f877:	53                   	push   ebx
c000f878:	e8 9d c2 ff ff       	call   c000bb1a <Device::setName(char const*)>
c000f87d:	83 c4 10             	add    esp,0x10
c000f880:	eb 67                	jmp    c000f8e9 <CPU::detectFeatures()+0x67d>
c000f882:	50                   	push   eax
c000f883:	50                   	push   eax
c000f884:	68 b6 eb 01 c0       	push   0xc001ebb6
c000f889:	55                   	push   ebp
c000f88a:	e8 71 0d ff ff       	call   c0000600 <strcpy>
c000f88f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f899:	e8 25 09 ff ff       	call   c00001c3 <is486>
c000f89e:	83 c4 10             	add    esp,0x10
c000f8a1:	85 c0                	test   eax,eax
c000f8a3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8a9:	74 1d                	je     c000f8c8 <CPU::detectFeatures()+0x65c>
c000f8ab:	83 c8 07             	or     eax,0x7
c000f8ae:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8b4:	0f 20 c0             	mov    eax,cr0
c000f8b7:	83 e0 14             	and    eax,0x14
c000f8ba:	83 f8 04             	cmp    eax,0x4
c000f8bd:	75 0e                	jne    c000f8cd <CPU::detectFeatures()+0x661>
c000f8bf:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f8c6:	eb 21                	jmp    c000f8e9 <CPU::detectFeatures()+0x67d>
c000f8c8:	83 e0 f8             	and    eax,0xfffffff8
c000f8cb:	eb e1                	jmp    c000f8ae <CPU::detectFeatures()+0x642>
c000f8cd:	e8 cc 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f8d2:	83 e0 01             	and    eax,0x1
c000f8d5:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8d8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8de:	83 e0 fd             	and    eax,0xfffffffd
c000f8e1:	09 d0                	or     eax,edx
c000f8e3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8e9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f8f0:	74 0e                	je     c000f900 <CPU::detectFeatures()+0x694>
c000f8f2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f8f7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f8fe:	eb 20                	jmp    c000f920 <CPU::detectFeatures()+0x6b4>
c000f900:	e8 99 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f905:	83 e0 01             	and    eax,0x1
c000f908:	8d 14 00             	lea    edx,[eax+eax*1]
c000f90b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f911:	83 e0 fd             	and    eax,0xfffffffd
c000f914:	09 d0                	or     eax,edx
c000f916:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f91c:	a8 02                	test   al,0x2
c000f91e:	75 d2                	jne    c000f8f2 <CPU::detectFeatures()+0x686>
c000f920:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f927:	83 c4 2c             	add    esp,0x2c
c000f92a:	5b                   	pop    ebx
c000f92b:	5e                   	pop    esi
c000f92c:	5f                   	pop    edi
c000f92d:	5d                   	pop    ebp
c000f92e:	c3                   	ret    
c000f92f:	90                   	nop

c000f930 <CPU::setupSMEP()>:
c000f930:	0f 20 e0             	mov    eax,cr4
c000f933:	0d 00 00 10 00       	or     eax,0x100000
c000f938:	0f 22 e0             	mov    cr4,eax
c000f93b:	c3                   	ret    

c000f93c <CPU::setupUMIP()>:
c000f93c:	0f 20 e0             	mov    eax,cr4
c000f93f:	80 cc 08             	or     ah,0x8
c000f942:	0f 22 e0             	mov    cr4,eax
c000f945:	c3                   	ret    

c000f946 <CPU::setupTSC()>:
c000f946:	0f 20 e0             	mov    eax,cr4
c000f949:	83 c8 04             	or     eax,0x4
c000f94c:	0f 22 e0             	mov    cr4,eax
c000f94f:	c3                   	ret    

c000f950 <CPU::setupLargePages()>:
c000f950:	0f 20 e0             	mov    eax,cr4
c000f953:	83 c8 10             	or     eax,0x10
c000f956:	0f 22 e0             	mov    cr4,eax
c000f959:	c3                   	ret    

c000f95a <CPU::setupPAT()>:
c000f95a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f95f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f966:	74 2c                	je     c000f994 <CPU::setupPAT()+0x3a>
c000f968:	53                   	push   ebx
c000f969:	83 ec 10             	sub    esp,0x10
c000f96c:	68 77 02 00 00       	push   0x277
c000f971:	50                   	push   eax
c000f972:	e8 7b 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f977:	83 e2 f8             	and    edx,0xfffffff8
c000f97a:	83 ca 01             	or     edx,0x1
c000f97d:	52                   	push   edx
c000f97e:	50                   	push   eax
c000f97f:	68 77 02 00 00       	push   0x277
c000f984:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000f98a:	e8 8f 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f98f:	83 c4 28             	add    esp,0x28
c000f992:	5b                   	pop    ebx
c000f993:	c3                   	ret    
c000f994:	c3                   	ret    
c000f995:	90                   	nop

c000f996 <CPU::setupMTRR()>:
c000f996:	c3                   	ret    
c000f997:	90                   	nop

c000f998 <CPU::setupGlobalPages()>:
c000f998:	0f 20 e0             	mov    eax,cr4
c000f99b:	0c 80                	or     al,0x80
c000f99d:	0f 22 e0             	mov    cr4,eax
c000f9a0:	c3                   	ret    
c000f9a1:	90                   	nop

c000f9a2 <CPU::allowUsermodeDataAccess()>:
c000f9a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9a6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9ad:	74 03                	je     c000f9b2 <CPU::allowUsermodeDataAccess()+0x10>
c000f9af:	0f 01 cb             	stac   
c000f9b2:	c3                   	ret    
c000f9b3:	90                   	nop

c000f9b4 <CPU::prohibitUsermodeDataAccess()>:
c000f9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9b8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9bf:	74 03                	je     c000f9c4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f9c1:	0f 01 ca             	clac   
c000f9c4:	c3                   	ret    
c000f9c5:	90                   	nop

c000f9c6 <CPU::setupSMAP()>:
c000f9c6:	0f 20 e0             	mov    eax,cr4
c000f9c9:	0d 00 00 20 00       	or     eax,0x200000
c000f9ce:	0f 22 e0             	mov    cr4,eax
c000f9d1:	eb e1                	jmp    c000f9b4 <CPU::prohibitUsermodeDataAccess()>
c000f9d3:	90                   	nop

c000f9d4 <CPU::setupFeatures()>:
c000f9d4:	53                   	push   ebx
c000f9d5:	83 ec 08             	sub    esp,0x8
c000f9d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9dc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f9e3:	74 18                	je     c000f9fd <CPU::setupFeatures()+0x29>
c000f9e5:	83 ec 0c             	sub    esp,0xc
c000f9e8:	68 5d ec 01 c0       	push   0xc001ec5d
c000f9ed:	e8 60 ab ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000f9f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9f5:	e8 42 ff ff ff       	call   c000f93c <CPU::setupUMIP()>
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa04:	74 18                	je     c000fa1e <CPU::setupFeatures()+0x4a>
c000fa06:	83 ec 0c             	sub    esp,0xc
c000fa09:	68 67 ec 01 c0       	push   0xc001ec67
c000fa0e:	e8 3f ab ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa16:	e8 2b ff ff ff       	call   c000f946 <CPU::setupTSC()>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa25:	74 18                	je     c000fa3f <CPU::setupFeatures()+0x6b>
c000fa27:	83 ec 0c             	sub    esp,0xc
c000fa2a:	68 70 ec 01 c0       	push   0xc001ec70
c000fa2f:	e8 1e ab ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa37:	e8 14 ff ff ff       	call   c000f950 <CPU::setupLargePages()>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa46:	74 18                	je     c000fa60 <CPU::setupFeatures()+0x8c>
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	68 79 ec 01 c0       	push   0xc001ec79
c000fa50:	e8 fd aa ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa58:	e8 3b ff ff ff       	call   c000f998 <CPU::setupGlobalPages()>
c000fa5d:	83 c4 10             	add    esp,0x10
c000fa60:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fa67:	74 18                	je     c000fa81 <CPU::setupFeatures()+0xad>
c000fa69:	83 ec 0c             	sub    esp,0xc
c000fa6c:	68 8b ec 01 c0       	push   0xc001ec8b
c000fa71:	e8 dc aa ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa79:	e8 dc fe ff ff       	call   c000f95a <CPU::setupPAT()>
c000fa7e:	83 c4 10             	add    esp,0x10
c000fa81:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa88:	74 11                	je     c000fa9b <CPU::setupFeatures()+0xc7>
c000fa8a:	c7 44 24 10 94 ec 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ec94
c000fa92:	83 c4 08             	add    esp,0x8
c000fa95:	5b                   	pop    ebx
c000fa96:	e9 b7 aa ff ff       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000fa9b:	83 c4 08             	add    esp,0x8
c000fa9e:	5b                   	pop    ebx
c000fa9f:	c3                   	ret    

c000faa0 <CPU::open(int, int, void*)>:
c000faa0:	57                   	push   edi
c000faa1:	56                   	push   esi
c000faa2:	53                   	push   ebx
c000faa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faa7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000faab:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000faba:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fac0:	50                   	push   eax
c000fac1:	e8 16 76 ff ff       	call   c00070dc <GDT::setup()>
c000fac6:	83 c4 0c             	add    esp,0xc
c000fac9:	6a 00                	push   0x0
c000facb:	68 ef be ad de       	push   0xdeadbeef
c000fad0:	57                   	push   edi
c000fad1:	e8 46 91 ff ff       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c000fad6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fad9:	e8 1e 91 ff ff       	call   c0008bfc <TSS::flush()>
c000fade:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fae4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fae7:	e8 3e 78 ff ff       	call   c000732a <IDT::setup()>
c000faec:	b8 00 04 00 00       	mov    eax,0x400
c000faf1:	0f 23 f8             	mov    db7,eax
c000faf4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fafe:	e8 92 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb03:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb09:	89 30                	mov    DWORD PTR [eax],esi
c000fb0b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb11:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb14:	58                   	pop    eax
c000fb15:	5a                   	pop    edx
c000fb16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb20:	e8 0f a1 ff ff       	call   c0009c34 <VAS::setCPUSpecific(unsigned long)>
c000fb25:	c7 04 24 9e ec 01 c0 	mov    DWORD PTR [esp],0xc001ec9e
c000fb2c:	e8 c6 00 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000fb31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb34:	e8 33 f7 ff ff       	call   c000f26c <CPU::detectFeatures()>
c000fb39:	c7 04 24 c1 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecc1
c000fb40:	e8 b2 00 00 00       	call   c000fbf7 <KeSetBootMessage(char const*)>
c000fb45:	e8 56 5b 00 00       	call   c00156a0 <HalInitialise()>
c000fb4a:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fb4f:	83 e0 10             	and    eax,0x10
c000fb52:	83 f8 01             	cmp    eax,0x1
c000fb55:	19 c0                	sbb    eax,eax
c000fb57:	83 e0 46             	and    eax,0x46
c000fb5a:	83 c0 1e             	add    eax,0x1e
c000fb5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb60:	e8 b4 d6 ff ff       	call   c000d219 <setupTimer(int)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb6e:	f6 05 d0 2e 02 c0 20 	test   BYTE PTR ds:0xc0022ed0,0x20
c000fb75:	74 0c                	je     c000fb83 <CPU::open(int, int, void*)+0xe3>
c000fb77:	83 ec 0c             	sub    esp,0xc
c000fb7a:	53                   	push   ebx
c000fb7b:	e8 54 fe ff ff       	call   c000f9d4 <CPU::setupFeatures()>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	5b                   	pop    ebx
c000fb84:	31 c0                	xor    eax,eax
c000fb86:	5e                   	pop    esi
c000fb87:	5f                   	pop    edi
c000fb88:	c3                   	ret    

c000fb89 <KeDisplaySplashScreen()>:
c000fb89:	55                   	push   ebp
c000fb8a:	bd 05 00 00 00       	mov    ebp,0x5
c000fb8f:	57                   	push   edi
c000fb90:	bf 00 fe 01 c0       	mov    edi,0xc001fe00
c000fb95:	56                   	push   esi
c000fb96:	be 0a 00 00 00       	mov    esi,0xa
c000fb9b:	53                   	push   ebx
c000fb9c:	31 db                	xor    ebx,ebx
c000fb9e:	83 ec 0c             	sub    esp,0xc
c000fba1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fba4:	84 c0                	test   al,al
c000fba6:	74 47                	je     c000fbef <KeDisplaySplashScreen()+0x66>
c000fba8:	80 bb 36 fe 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe01ca],0xdb
c000fbaf:	75 13                	jne    c000fbc4 <KeDisplaySplashScreen()+0x3b>
c000fbb1:	0f b6 93 35 fe 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe01cb]
c000fbb8:	83 e2 fe             	and    edx,0xfffffffe
c000fbbb:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fbc1:	75 01                	jne    c000fbc4 <KeDisplaySplashScreen()+0x3b>
c000fbc3:	46                   	inc    esi
c000fbc4:	3c 0d                	cmp    al,0xd
c000fbc6:	74 24                	je     c000fbec <KeDisplaySplashScreen()+0x63>
c000fbc8:	3c 0a                	cmp    al,0xa
c000fbca:	75 0a                	jne    c000fbd6 <KeDisplaySplashScreen()+0x4d>
c000fbcc:	45                   	inc    ebp
c000fbcd:	be 0a 00 00 00       	mov    esi,0xa
c000fbd2:	31 db                	xor    ebx,ebx
c000fbd4:	eb 16                	jmp    c000fbec <KeDisplaySplashScreen()+0x63>
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fbdc:	55                   	push   ebp
c000fbdd:	43                   	inc    ebx
c000fbde:	52                   	push   edx
c000fbdf:	6a 00                	push   0x0
c000fbe1:	6a 0e                	push   0xe
c000fbe3:	50                   	push   eax
c000fbe4:	e8 1b 67 00 00       	call   c0016304 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fbe9:	83 c4 20             	add    esp,0x20
c000fbec:	47                   	inc    edi
c000fbed:	eb b2                	jmp    c000fba1 <KeDisplaySplashScreen()+0x18>
c000fbef:	83 c4 0c             	add    esp,0xc
c000fbf2:	5b                   	pop    ebx
c000fbf3:	5e                   	pop    esi
c000fbf4:	5f                   	pop    edi
c000fbf5:	5d                   	pop    ebp
c000fbf6:	c3                   	ret    

c000fbf7 <KeSetBootMessage(char const*)>:
c000fbf7:	57                   	push   edi
c000fbf8:	56                   	push   esi
c000fbf9:	53                   	push   ebx
c000fbfa:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc00:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc07:	68 9e 00 00 00       	push   0x9e
c000fc0c:	6a 00                	push   0x0
c000fc0e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc12:	56                   	push   esi
c000fc13:	e8 b8 08 ff ff       	call   c00004d0 <memset>
c000fc18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc1b:	e8 20 09 ff ff       	call   c0000540 <strlen>
c000fc20:	ba 50 00 00 00       	mov    edx,0x50
c000fc25:	83 c4 10             	add    esp,0x10
c000fc28:	29 c2                	sub    edx,eax
c000fc2a:	31 c9                	xor    ecx,ecx
c000fc2c:	83 e2 fe             	and    edx,0xfffffffe
c000fc2f:	01 f2                	add    edx,esi
c000fc31:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc36:	84 c0                	test   al,al
c000fc38:	74 0a                	je     c000fc44 <KeSetBootMessage(char const*)+0x4d>
c000fc3a:	80 cc 0f             	or     ah,0xf
c000fc3d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc41:	41                   	inc    ecx
c000fc42:	eb ed                	jmp    c000fc31 <KeSetBootMessage(char const*)+0x3a>
c000fc44:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc49:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fc4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc50:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fc56:	5b                   	pop    ebx
c000fc57:	5e                   	pop    esi
c000fc58:	5f                   	pop    edi
c000fc59:	c3                   	ret    

c000fc5a <EnvVarContainer::getEnv(char const*)>:
c000fc5a:	57                   	push   edi
c000fc5b:	56                   	push   esi
c000fc5c:	53                   	push   ebx
c000fc5d:	31 db                	xor    ebx,ebx
c000fc5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc63:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fc65:	7e 2b                	jle    c000fc92 <EnvVarContainer::getEnv(char const*)+0x38>
c000fc67:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc6e:	50                   	push   eax
c000fc6f:	50                   	push   eax
c000fc70:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc73:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc7a:	e8 61 0a ff ff       	call   c00006e0 <strcmp>
c000fc7f:	83 c4 10             	add    esp,0x10
c000fc82:	85 c0                	test   eax,eax
c000fc84:	75 09                	jne    c000fc8f <EnvVarContainer::getEnv(char const*)+0x35>
c000fc86:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc89:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fc8d:	eb 05                	jmp    c000fc94 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fc8f:	43                   	inc    ebx
c000fc90:	eb d1                	jmp    c000fc63 <EnvVarContainer::getEnv(char const*)+0x9>
c000fc92:	31 c0                	xor    eax,eax
c000fc94:	5b                   	pop    ebx
c000fc95:	5e                   	pop    esi
c000fc96:	5f                   	pop    edi
c000fc97:	c3                   	ret    

c000fc98 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fc98:	55                   	push   ebp
c000fc99:	57                   	push   edi
c000fc9a:	56                   	push   esi
c000fc9b:	53                   	push   ebx
c000fc9c:	83 ec 28             	sub    esp,0x28
c000fc9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fca3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fca7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fcab:	56                   	push   esi
c000fcac:	e8 8f 08 ff ff       	call   c0000540 <strlen>
c000fcb1:	40                   	inc    eax
c000fcb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcb5:	e8 ff 7a ff ff       	call   c00077b9 <malloc>
c000fcba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcc1:	e8 7a 08 ff ff       	call   c0000540 <strlen>
c000fcc6:	40                   	inc    eax
c000fcc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcca:	e8 ea 7a ff ff       	call   c00077b9 <malloc>
c000fccf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcd6:	e8 65 08 ff ff       	call   c0000540 <strlen>
c000fcdb:	83 c4 0c             	add    esp,0xc
c000fcde:	40                   	inc    eax
c000fcdf:	50                   	push   eax
c000fce0:	6a 00                	push   0x0
c000fce2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce6:	e8 e5 07 ff ff       	call   c00004d0 <memset>
c000fceb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcee:	e8 4d 08 ff ff       	call   c0000540 <strlen>
c000fcf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fcf7:	8d 48 01             	lea    ecx,[eax+0x1]
c000fcfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcff:	89 de                	mov    esi,ebx
c000fd01:	e8 3a 08 ff ff       	call   c0000540 <strlen>
c000fd06:	83 c4 0c             	add    esp,0xc
c000fd09:	40                   	inc    eax
c000fd0a:	50                   	push   eax
c000fd0b:	6a 00                	push   0x0
c000fd0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd11:	e8 ba 07 ff ff       	call   c00004d0 <memset>
c000fd16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd19:	e8 22 08 ff ff       	call   c0000540 <strlen>
c000fd1e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd22:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd2a:	40                   	inc    eax
c000fd2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd2e:	c1 e0 03             	shl    eax,0x3
c000fd31:	5a                   	pop    edx
c000fd32:	59                   	pop    ecx
c000fd33:	50                   	push   eax
c000fd34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd37:	e8 69 7a ff ff       	call   c00077a5 <realloc>
c000fd3c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd43:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd46:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd4a:	b9 08 00 00 00       	mov    ecx,0x8
c000fd4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd51:	83 c4 2c             	add    esp,0x2c
c000fd54:	5b                   	pop    ebx
c000fd55:	5e                   	pop    esi
c000fd56:	5f                   	pop    edi
c000fd57:	5d                   	pop    ebp
c000fd58:	c3                   	ret    
c000fd59:	90                   	nop

c000fd5a <EnvVarContainer::deleteEnv(char const*)>:
c000fd5a:	c3                   	ret    
c000fd5b:	90                   	nop

c000fd5c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fd5c:	55                   	push   ebp
c000fd5d:	57                   	push   edi
c000fd5e:	56                   	push   esi
c000fd5f:	53                   	push   ebx
c000fd60:	81 ec 38 01 00 00    	sub    esp,0x138
c000fd66:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd6d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd74:	68 14 01 00 00       	push   0x114
c000fd79:	e8 3b 7a ff ff       	call   c00077b9 <malloc>
c000fd7e:	83 c4 0c             	add    esp,0xc
c000fd81:	89 c3                	mov    ebx,eax
c000fd83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd86:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd8d:	50                   	push   eax
c000fd8e:	e8 35 ad ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000fd93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd96:	e8 5b b0 ff ff       	call   c000adf6 <File::exists()>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	84 c0                	test   al,al
c000fda0:	75 31                	jne    c000fdd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fda2:	50                   	push   eax
c000fda3:	50                   	push   eax
c000fda4:	6a 12                	push   0x12
c000fda6:	53                   	push   ebx
c000fda7:	e8 dc ad ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000fdac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdae:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fdb1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdb4:	e8 87 07 ff ff       	call   c0000540 <strlen>
c000fdb9:	5a                   	pop    edx
c000fdba:	31 d2                	xor    edx,edx
c000fdbc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fdc0:	51                   	push   ecx
c000fdc1:	56                   	push   esi
c000fdc2:	52                   	push   edx
c000fdc3:	50                   	push   eax
c000fdc4:	53                   	push   ebx
c000fdc5:	ff d7                	call   edi
c000fdc7:	83 c4 14             	add    esp,0x14
c000fdca:	53                   	push   ebx
c000fdcb:	e8 16 ae ff ff       	call   c000abe6 <File::close()>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	56                   	push   esi
c000fdd4:	31 f6                	xor    esi,esi
c000fdd6:	68 00 01 00 00       	push   0x100
c000fddb:	6a 00                	push   0x0
c000fddd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fde1:	50                   	push   eax
c000fde2:	e8 e9 06 ff ff       	call   c00004d0 <memset>
c000fde7:	5f                   	pop    edi
c000fde8:	58                   	pop    eax
c000fde9:	6a 01                	push   0x1
c000fdeb:	53                   	push   ebx
c000fdec:	e8 97 ad ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdfc:	83 ec 0c             	sub    esp,0xc
c000fdff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe01:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe05:	51                   	push   ecx
c000fe06:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe0a:	52                   	push   edx
c000fe0b:	6a 00                	push   0x0
c000fe0d:	6a 01                	push   0x1
c000fe0f:	53                   	push   ebx
c000fe10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe13:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe17:	83 c4 20             	add    esp,0x20
c000fe1a:	3c 0d                	cmp    al,0xd
c000fe1c:	0f 84 09 01 00 00    	je     c000ff2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe22:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe27:	0f 84 ef 00 00 00    	je     c000ff1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe2d:	3c 0a                	cmp    al,0xa
c000fe2f:	74 13                	je     c000fe44 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe31:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe36:	74 0c                	je     c000fe44 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe38:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe3e:	0f 8e d8 00 00 00    	jle    c000ff1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	8d 78 01             	lea    edi,[eax+0x1]
c000fe4e:	57                   	push   edi
c000fe4f:	e8 65 79 ff ff       	call   c00077b9 <malloc>
c000fe54:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fe58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe5c:	8d 56 04             	lea    edx,[esi+0x4]
c000fe5f:	89 14 24             	mov    DWORD PTR [esp],edx
c000fe62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe66:	e8 4e 79 ff ff       	call   c00077b9 <malloc>
c000fe6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe6f:	83 c4 0c             	add    esp,0xc
c000fe72:	57                   	push   edi
c000fe73:	6a 00                	push   0x0
c000fe75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe79:	e8 52 06 ff ff       	call   c00004d0 <memset>
c000fe7e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe82:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe8c:	83 c4 0c             	add    esp,0xc
c000fe8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe93:	52                   	push   edx
c000fe94:	6a 00                	push   0x0
c000fe96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fe9a:	e8 31 06 ff ff       	call   c00004d0 <memset>
c000fe9f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fea3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fea7:	89 34 24             	mov    DWORD PTR [esp],esi
c000feaa:	e8 91 06 ff ff       	call   c0000540 <strlen>
c000feaf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000feb3:	89 c1                	mov    ecx,eax
c000feb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000feba:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000febd:	40                   	inc    eax
c000febe:	83 c4 10             	add    esp,0x10
c000fec1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fec4:	85 d2                	test   edx,edx
c000fec6:	75 0c                	jne    c000fed4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fec8:	83 ec 0c             	sub    esp,0xc
c000fecb:	6a 08                	push   0x8
c000fecd:	e8 e7 78 ff ff       	call   c00077b9 <malloc>
c000fed2:	eb 0c                	jmp    c000fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fed4:	c1 e0 03             	shl    eax,0x3
c000fed7:	51                   	push   ecx
c000fed8:	51                   	push   ecx
c000fed9:	50                   	push   eax
c000feda:	52                   	push   edx
c000fedb:	e8 c5 78 ff ff       	call   c00077a5 <realloc>
c000fee0:	83 c4 10             	add    esp,0x10
c000fee3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fee6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fee9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000feec:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fef0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fef4:	b9 08 00 00 00       	mov    ecx,0x8
c000fef9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fefb:	31 f6                	xor    esi,esi
c000fefd:	50                   	push   eax
c000fefe:	68 00 01 00 00       	push   0x100
c000ff03:	6a 00                	push   0x0
c000ff05:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff09:	50                   	push   eax
c000ff0a:	e8 c1 05 ff ff       	call   c00004d0 <memset>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff1a:	eb 0f                	jmp    c000ff2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff1c:	3c 3d                	cmp    al,0x3d
c000ff1e:	74 07                	je     c000ff27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff20:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff24:	46                   	inc    esi
c000ff25:	eb 04                	jmp    c000ff2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff27:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff30:	0f 85 c6 fe ff ff    	jne    c000fdfc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff36:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff3c:	5b                   	pop    ebx
c000ff3d:	5e                   	pop    esi
c000ff3e:	5f                   	pop    edi
c000ff3f:	5d                   	pop    ebp
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <EnvVarContainer::__loadSystem()>:
c000ff42:	83 ec 10             	sub    esp,0x10
c000ff45:	68 60 ff 01 c0       	push   0xc001ff60
c000ff4a:	68 04 ed 01 c0       	push   0xc001ed04
c000ff4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff53:	e8 04 fe ff ff       	call   c000fd5c <EnvVarContainer::loadFrom(char const*, char const*)>
c000ff58:	83 c4 1c             	add    esp,0x1c
c000ff5b:	c3                   	ret    

c000ff5c <EnvVarContainer::__loadUser()>:
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <EnvVarContainer::EnvVarContainer(Process*)>:
c000ff5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ff68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff7e:	90                   	nop
c000ff7f:	c3                   	ret    

c000ff80 <EnvVarContainer::~EnvVarContainer()>:
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff8a:	85 c0                	test   eax,eax
c000ff8c:	74 1d                	je     c000ffab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff94:	85 c0                	test   eax,eax
c000ff96:	74 13                	je     c000ffab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	50                   	push   eax
c000ffa3:	e8 21 78 ff ff       	call   c00077c9 <free>
c000ffa8:	83 c4 10             	add    esp,0x10
c000ffab:	90                   	nop
c000ffac:	83 c4 0c             	add    esp,0xc
c000ffaf:	c3                   	ret    

c000ffb0 <Krnl::getEnv(Process*, char const*)>:
c000ffb0:	53                   	push   ebx
c000ffb1:	83 ec 08             	sub    esp,0x8
c000ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffbc:	39 05 90 61 02 c0    	cmp    DWORD PTR ds:0xc0026190,eax
c000ffc2:	74 04                	je     c000ffc8 <Krnl::getEnv(Process*, char const*)+0x18>
c000ffc4:	85 c0                	test   eax,eax
c000ffc6:	75 0b                	jne    c000ffd3 <Krnl::getEnv(Process*, char const*)+0x23>
c000ffc8:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c000ffcd:	85 c0                	test   eax,eax
c000ffcf:	75 19                	jne    c000ffea <Krnl::getEnv(Process*, char const*)+0x3a>
c000ffd1:	eb 27                	jmp    c000fffa <Krnl::getEnv(Process*, char const*)+0x4a>
c000ffd3:	52                   	push   edx
c000ffd4:	52                   	push   edx
c000ffd5:	53                   	push   ebx
c000ffd6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ffdc:	e8 79 fc ff ff       	call   c000fc5a <EnvVarContainer::getEnv(char const*)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	85 c0                	test   eax,eax
c000ffe6:	75 28                	jne    c0010010 <Krnl::getEnv(Process*, char const*)+0x60>
c000ffe8:	eb de                	jmp    c000ffc8 <Krnl::getEnv(Process*, char const*)+0x18>
c000ffea:	52                   	push   edx
c000ffeb:	52                   	push   edx
c000ffec:	53                   	push   ebx
c000ffed:	50                   	push   eax
c000ffee:	e8 67 fc ff ff       	call   c000fc5a <EnvVarContainer::getEnv(char const*)>
c000fff3:	83 c4 10             	add    esp,0x10
c000fff6:	85 c0                	test   eax,eax
c000fff8:	75 16                	jne    c0010010 <Krnl::getEnv(Process*, char const*)+0x60>
c000fffa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fffe:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c0010003:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010007:	83 c4 08             	add    esp,0x8
c001000a:	5b                   	pop    ebx
c001000b:	e9 4a fc ff ff       	jmp    c000fc5a <EnvVarContainer::getEnv(char const*)>
c0010010:	83 c4 08             	add    esp,0x8
c0010013:	5b                   	pop    ebx
c0010014:	c3                   	ret    

c0010015 <Krnl::setEnvSystem(char const*, char const*)>:
c0010015:	83 ec 10             	sub    esp,0x10
c0010018:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001001c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010020:	ff 35 34 59 02 c0    	push   DWORD PTR ds:0xc0025934
c0010026:	e8 6d fc ff ff       	call   c000fc98 <EnvVarContainer::setEnv(char const*, char const*)>
c001002b:	83 c4 1c             	add    esp,0x1c
c001002e:	c3                   	ret    

c001002f <Krnl::setEnvUser(char const*, char const*)>:
c001002f:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010034:	85 c0                	test   eax,eax
c0010036:	74 15                	je     c001004d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010038:	83 ec 10             	sub    esp,0x10
c001003b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001003f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010043:	50                   	push   eax
c0010044:	e8 4f fc ff ff       	call   c000fc98 <EnvVarContainer::setEnv(char const*, char const*)>
c0010049:	83 c4 1c             	add    esp,0x1c
c001004c:	c3                   	ret    
c001004d:	c3                   	ret    

c001004e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010052:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001005c:	e9 37 fc ff ff       	jmp    c000fc98 <EnvVarContainer::setEnv(char const*, char const*)>

c0010061 <Krnl::deleteEnvSystem(char const*)>:
c0010061:	c3                   	ret    

c0010062 <Krnl::deleteEnvUser(char const*)>:
c0010062:	c3                   	ret    

c0010063 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010063:	c3                   	ret    

c0010064 <Krnl::newProcessEnv(Process*)>:
c0010064:	83 ec 28             	sub    esp,0x28
c0010067:	6a 0c                	push   0xc
c0010069:	e8 4b 77 ff ff       	call   c00077b9 <malloc>
c001006e:	5a                   	pop    edx
c001006f:	59                   	pop    ecx
c0010070:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010074:	50                   	push   eax
c0010075:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010079:	e8 e0 fe ff ff       	call   c000ff5e <EnvVarContainer::EnvVarContainer(Process*)>
c001007e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010082:	83 c4 2c             	add    esp,0x2c
c0010085:	c3                   	ret    

c0010086 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010086:	57                   	push   edi
c0010087:	56                   	push   esi
c0010088:	53                   	push   ebx
c0010089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010096:	6a 0c                	push   0xc
c0010098:	e8 1c 77 ff ff       	call   c00077b9 <malloc>
c001009d:	89 c3                	mov    ebx,eax
c001009f:	58                   	pop    eax
c00100a0:	5a                   	pop    edx
c00100a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100a5:	53                   	push   ebx
c00100a6:	e8 b3 fe ff ff       	call   c000ff5e <EnvVarContainer::EnvVarContainer(Process*)>
c00100ab:	8b 07                	mov    eax,DWORD PTR [edi]
c00100ad:	89 03                	mov    DWORD PTR [ebx],eax
c00100af:	c1 e0 03             	shl    eax,0x3
c00100b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00100b5:	e8 ff 76 ff ff       	call   c00077b9 <malloc>
c00100ba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100bd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00100bf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00100c2:	c1 e1 03             	shl    ecx,0x3
c00100c5:	89 c7                	mov    edi,eax
c00100c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100c9:	83 c4 10             	add    esp,0x10
c00100cc:	89 d8                	mov    eax,ebx
c00100ce:	5b                   	pop    ebx
c00100cf:	5e                   	pop    esi
c00100d0:	5f                   	pop    edi
c00100d1:	c3                   	ret    

c00100d2 <Krnl::loadSystemEnv()>:
c00100d2:	53                   	push   ebx
c00100d3:	83 ec 14             	sub    esp,0x14
c00100d6:	6a 0c                	push   0xc
c00100d8:	e8 dc 76 ff ff       	call   c00077b9 <malloc>
c00100dd:	89 c3                	mov    ebx,eax
c00100df:	58                   	pop    eax
c00100e0:	5a                   	pop    edx
c00100e1:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00100e7:	53                   	push   ebx
c00100e8:	e8 71 fe ff ff       	call   c000ff5e <EnvVarContainer::EnvVarContainer(Process*)>
c00100ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f0:	89 1d 34 59 02 c0    	mov    DWORD PTR ds:0xc0025934,ebx
c00100f6:	e8 47 fe ff ff       	call   c000ff42 <EnvVarContainer::__loadSystem()>
c00100fb:	83 c4 18             	add    esp,0x18
c00100fe:	5b                   	pop    ebx
c00100ff:	c3                   	ret    

c0010100 <Krnl::loadUserEnv()>:
c0010100:	53                   	push   ebx
c0010101:	83 ec 14             	sub    esp,0x14
c0010104:	6a 0c                	push   0xc
c0010106:	e8 ae 76 ff ff       	call   c00077b9 <malloc>
c001010b:	89 c3                	mov    ebx,eax
c001010d:	58                   	pop    eax
c001010e:	5a                   	pop    edx
c001010f:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0010115:	53                   	push   ebx
c0010116:	e8 43 fe ff ff       	call   c000ff5e <EnvVarContainer::EnvVarContainer(Process*)>
c001011b:	89 1d 30 59 02 c0    	mov    DWORD PTR ds:0xc0025930,ebx
c0010121:	83 c4 18             	add    esp,0x18
c0010124:	5b                   	pop    ebx
c0010125:	c3                   	ret    

c0010126 <Krnl::flushEnv()>:
c0010126:	c3                   	ret    

c0010127 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012b:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c0010131:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010137:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c001013c:	8b 00                	mov    eax,DWORD PTR [eax]
c001013e:	03 01                	add    eax,DWORD PTR [ecx]
c0010140:	85 d2                	test   edx,edx
c0010142:	74 02                	je     c0010146 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010144:	03 02                	add    eax,DWORD PTR [edx]
c0010146:	c3                   	ret    

c0010147 <Krnl::getProcessEnvPair(Process*, int)>:
c0010147:	57                   	push   edi
c0010148:	56                   	push   esi
c0010149:	8b 35 30 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025930
c001014f:	53                   	push   ebx
c0010150:	85 f6                	test   esi,esi
c0010152:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010156:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001015a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010160:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010164:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010166:	75 16                	jne    c001017e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010168:	39 c2                	cmp    edx,eax
c001016a:	7c 16                	jl     c0010182 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001016c:	8b 0d 34 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025934
c0010172:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010174:	01 c6                	add    esi,eax
c0010176:	39 d6                	cmp    esi,edx
c0010178:	7e 3c                	jle    c00101b6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001017a:	29 c2                	sub    edx,eax
c001017c:	eb 04                	jmp    c0010182 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001017e:	39 c2                	cmp    edx,eax
c0010180:	7d 05                	jge    c0010187 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010182:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010185:	eb 20                	jmp    c00101a7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010187:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010189:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001018c:	39 d1                	cmp    ecx,edx
c001018e:	7e 04                	jle    c0010194 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010190:	29 c2                	sub    edx,eax
c0010192:	eb 10                	jmp    c00101a4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010194:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c001019a:	03 0e                	add    ecx,DWORD PTR [esi]
c001019c:	39 d1                	cmp    ecx,edx
c001019e:	7e 16                	jle    c00101b6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101a0:	29 c2                	sub    edx,eax
c00101a2:	29 fa                	sub    edx,edi
c00101a4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101a7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00101ac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00101af:	89 03                	mov    DWORD PTR [ebx],eax
c00101b1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00101b4:	eb 1d                	jmp    c00101d3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00101b6:	83 ec 0c             	sub    esp,0xc
c00101b9:	68 26 ed 01 c0       	push   0xc001ed26
c00101be:	e8 ac 00 00 00       	call   c001026f <KePanic(char const*)>
c00101c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00101c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00101d0:	83 c4 10             	add    esp,0x10
c00101d3:	89 d8                	mov    eax,ebx
c00101d5:	5b                   	pop    ebx
c00101d6:	5e                   	pop    esi
c00101d7:	5f                   	pop    edi
c00101d8:	c2 04 00             	ret    0x4

c00101db <CPU::current()>:
c00101db:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00101e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00101e6:	c3                   	ret    

c00101e7 <operator new(unsigned long)>:
c00101e7:	e9 cd 75 ff ff       	jmp    c00077b9 <malloc>

c00101ec <operator delete(void*)>:
c00101ec:	e9 e8 75 ff ff       	jmp    c00077d9 <rfree>

c00101f1 <disableIRQs()>:
c00101f1:	fa                   	cli    
c00101f2:	c3                   	ret    

c00101f3 <enableIRQs()>:
c00101f3:	fb                   	sti    
c00101f4:	c3                   	ret    

c00101f5 <lockScheduler()>:
c00101f5:	fa                   	cli    
c00101f6:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00101fc:	c3                   	ret    

c00101fd <unlockScheduler()>:
c00101fd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010202:	48                   	dec    eax
c0010203:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010208:	75 01                	jne    c001020b <unlockScheduler()+0xe>
c001020a:	fb                   	sti    
c001020b:	c3                   	ret    

c001020c <lockStuff()>:
c001020c:	fa                   	cli    
c001020d:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0010213:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0010219:	c3                   	ret    

c001021a <unlockStuff()>:
c001021a:	83 ec 0c             	sub    esp,0xc
c001021d:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0010222:	48                   	dec    eax
c0010223:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0010228:	75 18                	jne    c0010242 <unlockStuff()+0x28>
c001022a:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c0010231:	74 0f                	je     c0010242 <unlockStuff()+0x28>
c0010233:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001023d:	e8 52 35 00 00       	call   c0013794 <schedule()>
c0010242:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010247:	48                   	dec    eax
c0010248:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001024d:	75 01                	jne    c0010250 <unlockStuff()+0x36>
c001024f:	fb                   	sti    
c0010250:	83 c4 0c             	add    esp,0xc
c0010253:	c3                   	ret    

c0010254 <Virt::getAKernelVAS()>:
c0010254:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0010259:	c3                   	ret    

c001025a <__not_memcpy>:
c001025a:	57                   	push   edi
c001025b:	56                   	push   esi
c001025c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010260:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010264:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010268:	89 c7                	mov    edi,eax
c001026a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001026c:	5e                   	pop    esi
c001026d:	5f                   	pop    edi
c001026e:	c3                   	ret    

c001026f <KePanic(char const*)>:
c001026f:	c6 05 38 59 02 c0 01 	mov    BYTE PTR ds:0xc0025938,0x1
c0010276:	e9 11 53 00 00       	jmp    c001558c <HalPanic(char const*)>

c001027b <Krnl::powerThread(void*)>:
c001027b:	83 ec 0c             	sub    esp,0xc
c001027e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010283:	48                   	dec    eax
c0010284:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010289:	75 01                	jne    c001028c <Krnl::powerThread(void*)+0x11>
c001028b:	fb                   	sti    
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c0010296:	6a 0a                	push   0xa
c0010298:	e8 07 38 00 00       	call   c0013aa4 <sleep(unsigned int)>
c001029d:	83 05 84 59 02 c0 0a 	add    DWORD PTR ds:0xc0025984,0xa
c00102a4:	83 c4 10             	add    esp,0x10
c00102a7:	eb e3                	jmp    c001028c <Krnl::powerThread(void*)+0x11>

c00102a9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102a9:	57                   	push   edi
c00102aa:	b9 09 00 00 00       	mov    ecx,0x9
c00102af:	56                   	push   esi
c00102b0:	bf 60 59 02 c0       	mov    edi,0xc0025960
c00102b5:	fc                   	cld    
c00102b6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00102ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102bc:	5e                   	pop    esi
c00102bd:	5f                   	pop    edi
c00102be:	c3                   	ret    

c00102bf <Krnl::userIOReceived()>:
c00102bf:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c00102c9:	c3                   	ret    

c00102ca <Krnl::handlePowerButton()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c00102d2:	83 f8 02             	cmp    eax,0x2
c00102d5:	75 10                	jne    c00102e7 <Krnl::handlePowerButton()+0x1d>
c00102d7:	83 ec 0c             	sub    esp,0xc
c00102da:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00102e0:	e8 71 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102e5:	eb 11                	jmp    c00102f8 <Krnl::handlePowerButton()+0x2e>
c00102e7:	48                   	dec    eax
c00102e8:	75 11                	jne    c00102fb <Krnl::handlePowerButton()+0x31>
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00102f3:	e8 8e 6b ff ff       	call   c0006e86 <Computer::sleep()>
c00102f8:	83 c4 10             	add    esp,0x10
c00102fb:	83 c4 0c             	add    esp,0xc
c00102fe:	c3                   	ret    

c00102ff <Krnl::handleSleepButton()>:
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	a1 64 59 02 c0       	mov    eax,ds:0xc0025964
c0010307:	83 f8 02             	cmp    eax,0x2
c001030a:	75 10                	jne    c001031c <Krnl::handleSleepButton()+0x1d>
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010315:	e8 3c 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001031a:	eb 11                	jmp    c001032d <Krnl::handleSleepButton()+0x2e>
c001031c:	48                   	dec    eax
c001031d:	75 11                	jne    c0010330 <Krnl::handleSleepButton()+0x31>
c001031f:	83 ec 0c             	sub    esp,0xc
c0010322:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010328:	e8 59 6b ff ff       	call   c0006e86 <Computer::sleep()>
c001032d:	83 c4 10             	add    esp,0x10
c0010330:	83 c4 0c             	add    esp,0xc
c0010333:	c3                   	ret    

c0010334 <Krnl::setupPowerManager()>:
c0010334:	83 ec 0c             	sub    esp,0xc
c0010337:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c0010341:	68 f0 00 00 00       	push   0xf0
c0010346:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c001034d:	6a 00                	push   0x0
c001034f:	68 7b 02 01 c0       	push   0xc001027b
c0010354:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001035a:	e8 15 32 00 00       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c001035f:	c7 05 60 59 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025960,0x2
c0010369:	c7 05 64 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025964,0x1
c0010373:	c7 05 68 59 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025968,0x3
c001037d:	c7 05 6c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002596c,0x0
c0010387:	c7 05 78 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025978,0x0
c0010391:	c7 05 70 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025970,0x0
c001039b:	c7 05 7c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002597c,0x0
c00103a5:	c7 05 74 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025974,0x3c
c00103af:	c7 05 80 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025980,0x3c
c00103b9:	83 c4 1c             	add    esp,0x1c
c00103bc:	c3                   	ret    
c00103bd:	66 90                	xchg   ax,ax
c00103bf:	90                   	nop

c00103c0 <KeResolveCompatibilitySymbol(char*)>:
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	83 ec 08             	sub    esp,0x8
c00103c6:	68 40 ed 01 c0       	push   0xc001ed40
c00103cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103cf:	e8 0c 03 ff ff       	call   c00006e0 <strcmp>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	85 c0                	test   eax,eax
c00103d9:	0f 94 c0             	sete   al
c00103dc:	84 c0                	test   al,al
c00103de:	74 0c                	je     c00103ec <KeResolveCompatibilitySymbol(char*)+0x2c>
c00103e0:	b8 b8 2e 02 c0       	mov    eax,0xc0022eb8
c00103e5:	e9 62 01 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ea:	66 90                	xchg   ax,ax
c00103ec:	83 ec 08             	sub    esp,0x8
c00103ef:	68 49 ed 01 c0       	push   0xc001ed49
c00103f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f8:	e8 e3 02 ff ff       	call   c00006e0 <strcmp>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	85 c0                	test   eax,eax
c0010402:	0f 94 c0             	sete   al
c0010405:	84 c0                	test   al,al
c0010407:	74 0b                	je     c0010414 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010409:	b8 00 c8 01 c0       	mov    eax,0xc001c800
c001040e:	e9 39 01 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010413:	90                   	nop
c0010414:	83 ec 08             	sub    esp,0x8
c0010417:	68 53 ed 01 c0       	push   0xc001ed53
c001041c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010420:	e8 bb 02 ff ff       	call   c00006e0 <strcmp>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	85 c0                	test   eax,eax
c001042a:	0f 94 c0             	sete   al
c001042d:	84 c0                	test   al,al
c001042f:	74 0b                	je     c001043c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010431:	b8 34 c5 01 c0       	mov    eax,0xc001c534
c0010436:	e9 11 01 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001043b:	90                   	nop
c001043c:	83 ec 08             	sub    esp,0x8
c001043f:	68 5c ed 01 c0       	push   0xc001ed5c
c0010444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010448:	e8 93 02 ff ff       	call   c00006e0 <strcmp>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	85 c0                	test   eax,eax
c0010452:	0f 94 c0             	sete   al
c0010455:	84 c0                	test   al,al
c0010457:	74 0b                	je     c0010464 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010459:	b8 6f 02 01 c0       	mov    eax,0xc001026f
c001045e:	e9 e9 00 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010463:	90                   	nop
c0010464:	83 ec 08             	sub    esp,0x8
c0010467:	68 6f ed 01 c0       	push   0xc001ed6f
c001046c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010470:	e8 6b 02 ff ff       	call   c00006e0 <strcmp>
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	85 c0                	test   eax,eax
c001047a:	0f 94 c0             	sete   al
c001047d:	84 c0                	test   al,al
c001047f:	74 0b                	je     c001048c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010481:	b8 f7 fb 00 c0       	mov    eax,0xc000fbf7
c0010486:	e9 c1 00 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001048b:	90                   	nop
c001048c:	83 ec 08             	sub    esp,0x8
c001048f:	68 8c ed 01 c0       	push   0xc001ed8c
c0010494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010498:	e8 43 02 ff ff       	call   c00006e0 <strcmp>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	85 c0                	test   eax,eax
c00104a2:	0f 94 c0             	sete   al
c00104a5:	84 c0                	test   al,al
c00104a7:	74 0b                	je     c00104b4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104a9:	b8 00 c9 01 c0       	mov    eax,0xc001c900
c00104ae:	e9 99 00 00 00       	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b3:	90                   	nop
c00104b4:	83 ec 08             	sub    esp,0x8
c00104b7:	68 96 ed 01 c0       	push   0xc001ed96
c00104bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c0:	e8 1b 02 ff ff       	call   c00006e0 <strcmp>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	85 c0                	test   eax,eax
c00104ca:	0f 94 c0             	sete   al
c00104cd:	84 c0                	test   al,al
c00104cf:	74 07                	je     c00104d8 <KeResolveCompatibilitySymbol(char*)+0x118>
c00104d1:	b8 80 c6 01 c0       	mov    eax,0xc001c680
c00104d6:	eb 74                	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104d8:	83 ec 08             	sub    esp,0x8
c00104db:	68 9f ed 01 c0       	push   0xc001ed9f
c00104e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e4:	e8 f7 01 ff ff       	call   c00006e0 <strcmp>
c00104e9:	83 c4 10             	add    esp,0x10
c00104ec:	85 c0                	test   eax,eax
c00104ee:	0f 94 c0             	sete   al
c00104f1:	84 c0                	test   al,al
c00104f3:	74 07                	je     c00104fc <KeResolveCompatibilitySymbol(char*)+0x13c>
c00104f5:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c00104fa:	eb 50                	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104fc:	83 ec 08             	sub    esp,0x8
c00104ff:	68 b7 ed 01 c0       	push   0xc001edb7
c0010504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010508:	e8 d3 01 ff ff       	call   c00006e0 <strcmp>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	85 c0                	test   eax,eax
c0010512:	0f 94 c0             	sete   al
c0010515:	84 c0                	test   al,al
c0010517:	74 07                	je     c0010520 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010519:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c001051e:	eb 2c                	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010520:	83 ec 08             	sub    esp,0x8
c0010523:	68 c4 ed 01 c0       	push   0xc001edc4
c0010528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052c:	e8 af 01 ff ff       	call   c00006e0 <strcmp>
c0010531:	83 c4 10             	add    esp,0x10
c0010534:	85 c0                	test   eax,eax
c0010536:	0f 94 c0             	sete   al
c0010539:	84 c0                	test   al,al
c001053b:	74 07                	je     c0010544 <KeResolveCompatibilitySymbol(char*)+0x184>
c001053d:	b8 bd 2e 02 c0       	mov    eax,0xc0022ebd
c0010542:	eb 08                	jmp    c001054c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010544:	b8 00 00 00 00       	mov    eax,0x0
c0010549:	8d 76 00             	lea    esi,[esi+0x0]
c001054c:	83 c4 0c             	add    esp,0xc
c001054f:	c3                   	ret    

c0010550 <KiSigKill(int)>:
c0010550:	57                   	push   edi
c0010551:	b9 0a 00 00 00       	mov    ecx,0xa
c0010556:	56                   	push   esi
c0010557:	be 0d ee 01 c0       	mov    esi,0xc001ee0d
c001055c:	83 ec 14             	sub    esp,0x14
c001055f:	8d 7c 24 06          	lea    edi,[esp+0x6]
c0010563:	fc                   	cld    
c0010564:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010566:	8d 44 24 06          	lea    eax,[esp+0x6]
c001056a:	50                   	push   eax
c001056b:	6a 00                	push   0x0
c001056d:	6a 00                	push   0x0
c001056f:	6a 27                	push   0x27
c0010571:	e8 dc 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010576:	83 c4 24             	add    esp,0x24
c0010579:	5e                   	pop    esi
c001057a:	5f                   	pop    edi
c001057b:	c3                   	ret    

c001057c <KiDefaultSignalHandlerIgnore(int)>:
c001057c:	c3                   	ret    

c001057d <KiDefaultSignalHandlerPause(int)>:
c001057d:	57                   	push   edi
c001057e:	b9 07 00 00 00       	mov    ecx,0x7
c0010583:	56                   	push   esi
c0010584:	be 17 ee 01 c0       	mov    esi,0xc001ee17
c0010589:	83 ec 24             	sub    esp,0x24
c001058c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010590:	fc                   	cld    
c0010591:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010593:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010597:	50                   	push   eax
c0010598:	6a 00                	push   0x0
c001059a:	6a 00                	push   0x0
c001059c:	6a 27                	push   0x27
c001059e:	e8 af 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105a3:	83 c4 34             	add    esp,0x34
c00105a6:	5e                   	pop    esi
c00105a7:	5f                   	pop    edi
c00105a8:	c3                   	ret    

c00105a9 <KiDefaultSignalHandlerResume(int)>:
c00105a9:	57                   	push   edi
c00105aa:	b9 1d 00 00 00       	mov    ecx,0x1d
c00105af:	56                   	push   esi
c00105b0:	be 33 ee 01 c0       	mov    esi,0xc001ee33
c00105b5:	83 ec 24             	sub    esp,0x24
c00105b8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00105bc:	fc                   	cld    
c00105bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105bf:	8d 44 24 03          	lea    eax,[esp+0x3]
c00105c3:	50                   	push   eax
c00105c4:	6a 00                	push   0x0
c00105c6:	6a 00                	push   0x0
c00105c8:	6a 27                	push   0x27
c00105ca:	e8 83 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105cf:	83 c4 34             	add    esp,0x34
c00105d2:	5e                   	pop    esi
c00105d3:	5f                   	pop    edi
c00105d4:	c3                   	ret    

c00105d5 <KeDeinitSignals(SigHandlerBlock*)>:
c00105d5:	e9 ef 71 ff ff       	jmp    c00077c9 <free>

c00105da <KeInitSignals()>:
c00105da:	53                   	push   ebx
c00105db:	83 ec 14             	sub    esp,0x14
c00105de:	68 c8 00 00 00       	push   0xc8
c00105e3:	e8 d1 71 ff ff       	call   c00077b9 <malloc>
c00105e8:	83 c4 0c             	add    esp,0xc
c00105eb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00105f5:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00105ff:	89 c3                	mov    ebx,eax
c0010601:	6a 20                	push   0x20
c0010603:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010609:	6a 00                	push   0x0
c001060b:	50                   	push   eax
c001060c:	e8 bf fe fe ff       	call   c00004d0 <memset>
c0010611:	83 c4 0c             	add    esp,0xc
c0010614:	6a 44                	push   0x44
c0010616:	6a 00                	push   0x0
c0010618:	53                   	push   ebx
c0010619:	e8 b2 fe fe ff       	call   c00004d0 <memset>
c001061e:	89 d8                	mov    eax,ebx
c0010620:	83 c4 18             	add    esp,0x18
c0010623:	5b                   	pop    ebx
c0010624:	c3                   	ret    

c0010625 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010625:	53                   	push   ebx
c0010626:	b8 01 00 00 00       	mov    eax,0x1
c001062b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001062f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010633:	83 f9 10             	cmp    ecx,0x10
c0010636:	7f 21                	jg     c0010659 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010638:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001063b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063f:	89 03                	mov    DWORD PTR [ebx],eax
c0010641:	b8 01 00 00 00       	mov    eax,0x1
c0010646:	d3 e0                	shl    eax,cl
c0010648:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001064c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001064f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010657:	31 c0                	xor    eax,eax
c0010659:	5b                   	pop    ebx
c001065a:	c3                   	ret    

c001065b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001065b:	55                   	push   ebp
c001065c:	57                   	push   edi
c001065d:	bf 08 00 00 00       	mov    edi,0x8
c0010662:	56                   	push   esi
c0010663:	53                   	push   ebx
c0010664:	83 ec 18             	sub    esp,0x18
c0010667:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001066b:	68 50 ee 01 c0       	push   0xc001ee50
c0010670:	e8 dd 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0010675:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001067c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010682:	83 c4 10             	add    esp,0x10
c0010685:	31 c9                	xor    ecx,ecx
c0010687:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001068b:	99                   	cdq    
c001068c:	f7 ff                	idiv   edi
c001068e:	8d 42 24             	lea    eax,[edx+0x24]
c0010691:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010695:	85 f6                	test   esi,esi
c0010697:	75 1a                	jne    c00106b3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010699:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001069d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106a1:	50                   	push   eax
c00106a2:	50                   	push   eax
c00106a3:	52                   	push   edx
c00106a4:	68 61 ee 01 c0       	push   0xc001ee61
c00106a9:	e8 a4 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00106ae:	83 c4 10             	add    esp,0x10
c00106b1:	eb 1b                	jmp    c00106ce <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00106b3:	41                   	inc    ecx
c00106b4:	83 f9 08             	cmp    ecx,0x8
c00106b7:	75 ce                	jne    c0010687 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00106b9:	83 ec 0c             	sub    esp,0xc
c00106bc:	be 01 00 00 00       	mov    esi,0x1
c00106c1:	68 82 ee 01 c0       	push   0xc001ee82
c00106c6:	e8 87 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	83 c4 0c             	add    esp,0xc
c00106d1:	89 f0                	mov    eax,esi
c00106d3:	5b                   	pop    ebx
c00106d4:	5e                   	pop    esi
c00106d5:	5f                   	pop    edi
c00106d6:	5d                   	pop    ebp
c00106d7:	c3                   	ret    

c00106d8 <KeCheckSignal(SigHandlerBlock*)>:
c00106d8:	55                   	push   ebp
c00106d9:	57                   	push   edi
c00106da:	56                   	push   esi
c00106db:	53                   	push   ebx
c00106dc:	51                   	push   ecx
c00106dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106e1:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00106e8:	75 07                	jne    c00106f1 <KeCheckSignal(SigHandlerBlock*)+0x19>
c00106ea:	31 c0                	xor    eax,eax
c00106ec:	e9 cc 00 00 00       	jmp    c00107bd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106f1:	31 c9                	xor    ecx,ecx
c00106f3:	bf 08 00 00 00       	mov    edi,0x8
c00106f8:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00106fe:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010701:	99                   	cdq    
c0010702:	f7 ff                	idiv   edi
c0010704:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001070b:	85 d2                	test   edx,edx
c001070d:	0f 84 94 00 00 00    	je     c00107a7 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c0010713:	88 d1                	mov    cl,dl
c0010715:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001071b:	bf 01 00 00 00       	mov    edi,0x1
c0010720:	89 04 24             	mov    DWORD PTR [esp],eax
c0010723:	d3 e7                	shl    edi,cl
c0010725:	bd 01 00 00 00       	mov    ebp,0x1
c001072a:	31 c9                	xor    ecx,ecx
c001072c:	89 e8                	mov    eax,ebp
c001072e:	d3 e0                	shl    eax,cl
c0010730:	85 04 24             	test   DWORD PTR [esp],eax
c0010733:	74 06                	je     c001073b <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010735:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010739:	75 af                	jne    c00106ea <KeCheckSignal(SigHandlerBlock*)+0x12>
c001073b:	41                   	inc    ecx
c001073c:	83 f9 11             	cmp    ecx,0x11
c001073f:	75 eb                	jne    c001072c <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010741:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010744:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010747:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c001074d:	09 f8                	or     eax,edi
c001074f:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c001075a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010760:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010767:	31 c0                	xor    eax,eax
c0010769:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010771:	74 09                	je     c001077c <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010773:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001077a:	eb 06                	jmp    c0010782 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c001077c:	40                   	inc    eax
c001077d:	83 f8 08             	cmp    eax,0x8
c0010780:	75 e7                	jne    c0010769 <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010782:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010785:	83 fa 09             	cmp    edx,0x9
c0010788:	75 07                	jne    c0010791 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001078a:	b8 50 05 01 c0       	mov    eax,0xc0010550
c001078f:	eb 2c                	jmp    c00107bd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010791:	83 f8 01             	cmp    eax,0x1
c0010794:	0f 84 50 ff ff ff    	je     c00106ea <KeCheckSignal(SigHandlerBlock*)+0x12>
c001079a:	85 c0                	test   eax,eax
c001079c:	75 1f                	jne    c00107bd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001079e:	8b 04 95 c0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0040]
c00107a5:	eb 16                	jmp    c00107bd <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107a7:	46                   	inc    esi
c00107a8:	41                   	inc    ecx
c00107a9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00107af:	83 f9 08             	cmp    ecx,0x8
c00107b2:	0f 85 40 ff ff ff    	jne    c00106f8 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00107b8:	e9 2d ff ff ff       	jmp    c00106ea <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107bd:	5a                   	pop    edx
c00107be:	5b                   	pop    ebx
c00107bf:	5e                   	pop    esi
c00107c0:	5f                   	pop    edi
c00107c1:	5d                   	pop    ebp
c00107c2:	c3                   	ret    

c00107c3 <KiCheckSignalZ>:
c00107c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107cb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00107d1:	e8 02 ff ff ff       	call   c00106d8 <KeCheckSignal(SigHandlerBlock*)>
c00107d6:	5a                   	pop    edx
c00107d7:	c3                   	ret    

c00107d8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00107d8:	56                   	push   esi
c00107d9:	53                   	push   ebx
c00107da:	bb 01 00 00 00       	mov    ebx,0x1
c00107df:	52                   	push   edx
c00107e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107e8:	d3 e3                	shl    ebx,cl
c00107ea:	83 f9 10             	cmp    ecx,0x10
c00107ed:	7f 08                	jg     c00107f7 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00107ef:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00107f5:	75 10                	jne    c0010807 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00107f7:	83 ec 0c             	sub    esp,0xc
c00107fa:	68 93 ee 01 c0       	push   0xc001ee93
c00107ff:	e8 6b fa ff ff       	call   c001026f <KePanic(char const*)>
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	f7 d3                	not    ebx
c0010809:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001080f:	58                   	pop    eax
c0010810:	5b                   	pop    ebx
c0010811:	5e                   	pop    esi
c0010812:	c3                   	ret    

c0010813 <SysSeekDir(regs*)>:
c0010813:	31 c0                	xor    eax,eax
c0010815:	31 d2                	xor    edx,edx
c0010817:	c3                   	ret    

c0010818 <SysTellDir(regs*)>:
c0010818:	31 c0                	xor    eax,eax
c001081a:	31 d2                	xor    edx,edx
c001081c:	c3                   	ret    

c001081d <SysVerify(regs*)>:
c001081d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010821:	31 d2                	xor    edx,edx
c0010823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010826:	c3                   	ret    

c0010827 <SysGetArgc(regs*)>:
c0010827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001082c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001082f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010835:	99                   	cdq    
c0010836:	c3                   	ret    

c0010837 <SysTTYName(regs*)>:
c0010837:	b8 01 00 00 00       	mov    eax,0x1
c001083c:	31 d2                	xor    edx,edx
c001083e:	c3                   	ret    

c001083f <SysFormatDisk(regs*)>:
c001083f:	56                   	push   esi
c0010840:	53                   	push   ebx
c0010841:	50                   	push   eax
c0010842:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010846:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c001084c:	eb 28                	jmp    c0010876 <SysFormatDisk(regs*)+0x37>
c001084e:	83 ec 0c             	sub    esp,0xc
c0010851:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010854:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010857:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010859:	51                   	push   ecx
c001085a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001085d:	51                   	push   ecx
c001085e:	50                   	push   eax
c001085f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0010866:	50                   	push   eax
c0010867:	53                   	push   ebx
c0010868:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001086b:	83 c4 20             	add    esp,0x20
c001086e:	83 f8 08             	cmp    eax,0x8
c0010871:	75 12                	jne    c0010885 <SysFormatDisk(regs*)+0x46>
c0010873:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010876:	85 db                	test   ebx,ebx
c0010878:	75 d4                	jne    c001084e <SysFormatDisk(regs*)+0xf>
c001087a:	59                   	pop    ecx
c001087b:	b8 03 00 00 00       	mov    eax,0x3
c0010880:	31 d2                	xor    edx,edx
c0010882:	5b                   	pop    ebx
c0010883:	5e                   	pop    esi
c0010884:	c3                   	ret    
c0010885:	85 c0                	test   eax,eax
c0010887:	74 1b                	je     c00108a4 <SysFormatDisk(regs*)+0x65>
c0010889:	83 f8 09             	cmp    eax,0x9
c001088c:	74 0b                	je     c0010899 <SysFormatDisk(regs*)+0x5a>
c001088e:	59                   	pop    ecx
c001088f:	b8 02 00 00 00       	mov    eax,0x2
c0010894:	31 d2                	xor    edx,edx
c0010896:	5b                   	pop    ebx
c0010897:	5e                   	pop    esi
c0010898:	c3                   	ret    
c0010899:	59                   	pop    ecx
c001089a:	b8 01 00 00 00       	mov    eax,0x1
c001089f:	31 d2                	xor    edx,edx
c00108a1:	5b                   	pop    ebx
c00108a2:	5e                   	pop    esi
c00108a3:	c3                   	ret    
c00108a4:	59                   	pop    ecx
c00108a5:	31 c0                	xor    eax,eax
c00108a7:	31 d2                	xor    edx,edx
c00108a9:	5b                   	pop    ebx
c00108aa:	5e                   	pop    esi
c00108ab:	c3                   	ret    

c00108ac <SysSetDiskVolumeLabel(regs*)>:
c00108ac:	56                   	push   esi
c00108ad:	53                   	push   ebx
c00108ae:	53                   	push   ebx
c00108af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108b6:	83 f8 19             	cmp    eax,0x19
c00108b9:	77 2d                	ja     c00108e8 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108bb:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c00108c2:	85 c9                	test   ecx,ecx
c00108c4:	74 22                	je     c00108e8 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108c6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108c9:	85 db                	test   ebx,ebx
c00108cb:	74 1b                	je     c00108e8 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108cd:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108d3:	85 d2                	test   edx,edx
c00108d5:	74 11                	je     c00108e8 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108d7:	8b 32                	mov    esi,DWORD PTR [edx]
c00108d9:	53                   	push   ebx
c00108da:	50                   	push   eax
c00108db:	51                   	push   ecx
c00108dc:	52                   	push   edx
c00108dd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00108e0:	83 c4 10             	add    esp,0x10
c00108e3:	99                   	cdq    
c00108e4:	59                   	pop    ecx
c00108e5:	5b                   	pop    ebx
c00108e6:	5e                   	pop    esi
c00108e7:	c3                   	ret    
c00108e8:	59                   	pop    ecx
c00108e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108f3:	5b                   	pop    ebx
c00108f4:	5e                   	pop    esi
c00108f5:	c3                   	ret    

c00108f6 <SysGetDiskVolumeLabel(regs*)>:
c00108f6:	57                   	push   edi
c00108f7:	56                   	push   esi
c00108f8:	53                   	push   ebx
c00108f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010900:	83 fa 19             	cmp    edx,0x19
c0010903:	77 38                	ja     c001093d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010905:	8b 0c 95 20 54 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdabe0]
c001090c:	85 c9                	test   ecx,ecx
c001090e:	74 2d                	je     c001093d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010910:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010913:	85 db                	test   ebx,ebx
c0010915:	74 26                	je     c001093d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010917:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001091a:	85 f6                	test   esi,esi
c001091c:	74 1f                	je     c001093d <SysGetDiskVolumeLabel(regs*)+0x47>
c001091e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010924:	85 c0                	test   eax,eax
c0010926:	74 15                	je     c001093d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010928:	83 ec 0c             	sub    esp,0xc
c001092b:	8b 38                	mov    edi,DWORD PTR [eax]
c001092d:	56                   	push   esi
c001092e:	53                   	push   ebx
c001092f:	52                   	push   edx
c0010930:	51                   	push   ecx
c0010931:	50                   	push   eax
c0010932:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010935:	83 c4 20             	add    esp,0x20
c0010938:	99                   	cdq    
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	5f                   	pop    edi
c001093c:	c3                   	ret    
c001093d:	5b                   	pop    ebx
c001093e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010943:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010948:	5e                   	pop    esi
c0010949:	5f                   	pop    edi
c001094a:	c3                   	ret    

c001094b <SysShutdown(regs*)>:
c001094b:	83 ec 0c             	sub    esp,0xc
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010955:	85 c0                	test   eax,eax
c0010957:	74 18                	je     c0010971 <SysShutdown(regs*)+0x26>
c0010959:	83 f8 01             	cmp    eax,0x1
c001095c:	74 38                	je     c0010996 <SysShutdown(regs*)+0x4b>
c001095e:	83 f8 02             	cmp    eax,0x2
c0010961:	74 24                	je     c0010987 <SysShutdown(regs*)+0x3c>
c0010963:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010968:	ba ff ff ff ff       	mov    edx,0xffffffff
c001096d:	83 c4 0c             	add    esp,0xc
c0010970:	c3                   	ret    
c0010971:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010976:	8b 10                	mov    edx,DWORD PTR [eax]
c0010978:	6a 00                	push   0x0
c001097a:	6a 00                	push   0x0
c001097c:	6a 00                	push   0x0
c001097e:	50                   	push   eax
c001097f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	eb dc                	jmp    c0010963 <SysShutdown(regs*)+0x18>
c0010987:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001098c:	8b 10                	mov    edx,DWORD PTR [eax]
c001098e:	6a 00                	push   0x0
c0010990:	6a 00                	push   0x0
c0010992:	6a 01                	push   0x1
c0010994:	eb e8                	jmp    c001097e <SysShutdown(regs*)+0x33>
c0010996:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c001099b:	85 c0                	test   eax,eax
c001099d:	74 02                	je     c00109a1 <SysShutdown(regs*)+0x56>
c001099f:	ff d0                	call   eax
c00109a1:	31 c0                	xor    eax,eax
c00109a3:	31 d2                	xor    edx,edx
c00109a5:	83 c4 0c             	add    esp,0xc
c00109a8:	c3                   	ret    

c00109a9 <SysRealpath(regs*)>:
c00109a9:	83 ec 0c             	sub    esp,0xc
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109b3:	85 d2                	test   edx,edx
c00109b5:	74 07                	je     c00109be <SysRealpath(regs*)+0x15>
c00109b7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109ba:	85 c0                	test   eax,eax
c00109bc:	75 0b                	jne    c00109c9 <SysRealpath(regs*)+0x20>
c00109be:	b8 01 00 00 00       	mov    eax,0x1
c00109c3:	31 d2                	xor    edx,edx
c00109c5:	83 c4 0c             	add    esp,0xc
c00109c8:	c3                   	ret    
c00109c9:	51                   	push   ecx
c00109ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109d0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109d3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109d9:	51                   	push   ecx
c00109da:	52                   	push   edx
c00109db:	50                   	push   eax
c00109dc:	e8 3d 9f ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	31 c0                	xor    eax,eax
c00109e6:	31 d2                	xor    edx,edx
c00109e8:	83 c4 0c             	add    esp,0xc
c00109eb:	c3                   	ret    

c00109ec <SysReadDir(regs*)>:
c00109ec:	53                   	push   ebx
c00109ed:	83 ec 18             	sub    esp,0x18
c00109f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00109f7:	83 f8 02             	cmp    eax,0x2
c00109fa:	76 61                	jbe    c0010a5d <SysReadDir(regs*)+0x71>
c00109fc:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a03:	77 49                	ja     c0010a4e <SysReadDir(regs*)+0x62>
c0010a05:	83 ec 0c             	sub    esp,0xc
c0010a08:	50                   	push   eax
c0010a09:	e8 31 87 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	85 c0                	test   eax,eax
c0010a13:	74 39                	je     c0010a4e <SysReadDir(regs*)+0x62>
c0010a15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a1d:	83 ec 0c             	sub    esp,0xc
c0010a20:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a26:	51                   	push   ecx
c0010a27:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a2a:	51                   	push   ecx
c0010a2b:	6a 00                	push   0x0
c0010a2d:	68 10 01 00 00       	push   0x110
c0010a32:	50                   	push   eax
c0010a33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a36:	83 c4 20             	add    esp,0x20
c0010a39:	85 c0                	test   eax,eax
c0010a3b:	74 29                	je     c0010a66 <SysReadDir(regs*)+0x7a>
c0010a3d:	83 f8 07             	cmp    eax,0x7
c0010a40:	74 1b                	je     c0010a5d <SysReadDir(regs*)+0x71>
c0010a42:	b8 02 00 00 00       	mov    eax,0x2
c0010a47:	31 d2                	xor    edx,edx
c0010a49:	83 c4 18             	add    esp,0x18
c0010a4c:	5b                   	pop    ebx
c0010a4d:	c3                   	ret    
c0010a4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a58:	83 c4 18             	add    esp,0x18
c0010a5b:	5b                   	pop    ebx
c0010a5c:	c3                   	ret    
c0010a5d:	b8 01 00 00 00       	mov    eax,0x1
c0010a62:	31 d2                	xor    edx,edx
c0010a64:	eb e3                	jmp    c0010a49 <SysReadDir(regs*)+0x5d>
c0010a66:	31 c0                	xor    eax,eax
c0010a68:	31 d2                	xor    edx,edx
c0010a6a:	eb dd                	jmp    c0010a49 <SysReadDir(regs*)+0x5d>

c0010a6c <SysIsATTY(regs*)>:
c0010a6c:	83 ec 0c             	sub    esp,0xc
c0010a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a76:	83 f8 02             	cmp    eax,0x2
c0010a79:	76 07                	jbe    c0010a82 <SysIsATTY(regs*)+0x16>
c0010a7b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a80:	75 28                	jne    c0010aaa <SysIsATTY(regs*)+0x3e>
c0010a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 26                	je     c0010aba <SysIsATTY(regs*)+0x4e>
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a99:	50                   	push   eax
c0010a9a:	ff 12                	call   DWORD PTR [edx]
c0010a9c:	31 d2                	xor    edx,edx
c0010a9e:	25 ff 00 00 00       	and    eax,0xff
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	83 c4 0c             	add    esp,0xc
c0010aa9:	c3                   	ret    
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	50                   	push   eax
c0010aae:	e8 8c 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	85 c0                	test   eax,eax
c0010ab8:	75 da                	jne    c0010a94 <SysIsATTY(regs*)+0x28>
c0010aba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010abf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ac4:	83 c4 0c             	add    esp,0xc
c0010ac7:	c3                   	ret    

c0010ac8 <SysSeek(regs*)>:
c0010ac8:	53                   	push   ebx
c0010ac9:	83 ec 08             	sub    esp,0x8
c0010acc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ad0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ad3:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ad6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010adc:	77 34                	ja     c0010b12 <SysSeek(regs*)+0x4a>
c0010ade:	83 ec 0c             	sub    esp,0xc
c0010ae1:	50                   	push   eax
c0010ae2:	e8 58 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010ae7:	83 c4 0c             	add    esp,0xc
c0010aea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010aed:	31 db                	xor    ebx,ebx
c0010aef:	53                   	push   ebx
c0010af0:	51                   	push   ecx
c0010af1:	50                   	push   eax
c0010af2:	e8 4f a1 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	85 c0                	test   eax,eax
c0010afc:	0f 95 c0             	setne  al
c0010aff:	31 d2                	xor    edx,edx
c0010b01:	25 ff 00 00 00       	and    eax,0xff
c0010b06:	f7 d8                	neg    eax
c0010b08:	83 d2 00             	adc    edx,0x0
c0010b0b:	83 c4 08             	add    esp,0x8
c0010b0e:	f7 da                	neg    edx
c0010b10:	5b                   	pop    ebx
c0010b11:	c3                   	ret    
c0010b12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b1c:	83 c4 08             	add    esp,0x8
c0010b1f:	5b                   	pop    ebx
c0010b20:	c3                   	ret    

c0010b21 <SysTell(regs*)>:
c0010b21:	53                   	push   ebx
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b2c:	83 f8 02             	cmp    eax,0x2
c0010b2f:	76 50                	jbe    c0010b81 <SysTell(regs*)+0x60>
c0010b31:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b36:	76 19                	jbe    c0010b51 <SysTell(regs*)+0x30>
c0010b38:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b3b:	31 d2                	xor    edx,edx
c0010b3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b4a:	31 c0                	xor    eax,eax
c0010b4c:	83 c4 08             	add    esp,0x8
c0010b4f:	5b                   	pop    ebx
c0010b50:	c3                   	ret    
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	50                   	push   eax
c0010b55:	e8 e5 85 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010b5a:	5a                   	pop    edx
c0010b5b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b5e:	59                   	pop    ecx
c0010b5f:	53                   	push   ebx
c0010b60:	50                   	push   eax
c0010b61:	e8 36 a1 ff ff       	call   c000ac9c <File::tell(unsigned long long*)>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	85 c0                	test   eax,eax
c0010b6b:	0f 95 c0             	setne  al
c0010b6e:	31 d2                	xor    edx,edx
c0010b70:	25 ff 00 00 00       	and    eax,0xff
c0010b75:	f7 d8                	neg    eax
c0010b77:	83 d2 00             	adc    edx,0x0
c0010b7a:	83 c4 08             	add    esp,0x8
c0010b7d:	f7 da                	neg    edx
c0010b7f:	5b                   	pop    ebx
c0010b80:	c3                   	ret    
c0010b81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b86:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b8b:	83 c4 08             	add    esp,0x8
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <SysSize(regs*)>:
c0010b90:	53                   	push   ebx
c0010b91:	83 ec 18             	sub    esp,0x18
c0010b94:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b9b:	83 f8 02             	cmp    eax,0x2
c0010b9e:	76 56                	jbe    c0010bf6 <SysSize(regs*)+0x66>
c0010ba0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ba5:	76 19                	jbe    c0010bc0 <SysSize(regs*)+0x30>
c0010ba7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010baa:	31 d2                	xor    edx,edx
c0010bac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bb9:	31 c0                	xor    eax,eax
c0010bbb:	83 c4 18             	add    esp,0x18
c0010bbe:	5b                   	pop    ebx
c0010bbf:	c3                   	ret    
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	50                   	push   eax
c0010bc4:	e8 76 85 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010bc9:	83 c4 0c             	add    esp,0xc
c0010bcc:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bd0:	52                   	push   edx
c0010bd1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bd4:	52                   	push   edx
c0010bd5:	50                   	push   eax
c0010bd6:	e8 59 a2 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	85 c0                	test   eax,eax
c0010be0:	0f 95 c0             	setne  al
c0010be3:	31 d2                	xor    edx,edx
c0010be5:	25 ff 00 00 00       	and    eax,0xff
c0010bea:	f7 d8                	neg    eax
c0010bec:	83 d2 00             	adc    edx,0x0
c0010bef:	83 c4 18             	add    esp,0x18
c0010bf2:	f7 da                	neg    edx
c0010bf4:	5b                   	pop    ebx
c0010bf5:	c3                   	ret    
c0010bf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c00:	83 c4 18             	add    esp,0x18
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    

c0010c05 <SysSizeFromFilename(regs*)>:
c0010c05:	57                   	push   edi
c0010c06:	56                   	push   esi
c0010c07:	53                   	push   ebx
c0010c08:	83 ec 20             	sub    esp,0x20
c0010c0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c0f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c12:	83 fb 02             	cmp    ebx,0x2
c0010c15:	0f 86 8c 00 00 00    	jbe    c0010ca7 <SysSizeFromFilename(regs*)+0xa2>
c0010c1b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c21:	76 1b                	jbe    c0010c3e <SysSizeFromFilename(regs*)+0x39>
c0010c23:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c26:	31 d2                	xor    edx,edx
c0010c28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c35:	83 c4 20             	add    esp,0x20
c0010c38:	31 c0                	xor    eax,eax
c0010c3a:	5b                   	pop    ebx
c0010c3b:	5e                   	pop    esi
c0010c3c:	5f                   	pop    edi
c0010c3d:	c3                   	ret    
c0010c3e:	83 ec 0c             	sub    esp,0xc
c0010c41:	68 14 01 00 00       	push   0x114
c0010c46:	e8 6e 6b ff ff       	call   c00077b9 <malloc>
c0010c4b:	83 c4 0c             	add    esp,0xc
c0010c4e:	89 c7                	mov    edi,eax
c0010c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c58:	50                   	push   eax
c0010c59:	53                   	push   ebx
c0010c5a:	57                   	push   edi
c0010c5b:	e8 68 9e ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c67:	50                   	push   eax
c0010c68:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c6b:	52                   	push   edx
c0010c6c:	57                   	push   edi
c0010c6d:	e8 c2 a1 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	85 ff                	test   edi,edi
c0010c77:	74 14                	je     c0010c8d <SysSizeFromFilename(regs*)+0x88>
c0010c79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c7d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c7f:	83 ec 0c             	sub    esp,0xc
c0010c82:	57                   	push   edi
c0010c83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8d:	85 c0                	test   eax,eax
c0010c8f:	0f 95 c0             	setne  al
c0010c92:	31 d2                	xor    edx,edx
c0010c94:	25 ff 00 00 00       	and    eax,0xff
c0010c99:	f7 d8                	neg    eax
c0010c9b:	83 d2 00             	adc    edx,0x0
c0010c9e:	83 c4 20             	add    esp,0x20
c0010ca1:	f7 da                	neg    edx
c0010ca3:	5b                   	pop    ebx
c0010ca4:	5e                   	pop    esi
c0010ca5:	5f                   	pop    edi
c0010ca6:	c3                   	ret    
c0010ca7:	83 c4 20             	add    esp,0x20
c0010caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010caf:	5b                   	pop    ebx
c0010cb0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cb5:	5e                   	pop    esi
c0010cb6:	5f                   	pop    edi
c0010cb7:	c3                   	ret    

c0010cb8 <SysClose(regs*)>:
c0010cb8:	53                   	push   ebx
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cc3:	83 f8 02             	cmp    eax,0x2
c0010cc6:	76 41                	jbe    c0010d09 <SysClose(regs*)+0x51>
c0010cc8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010cce:	83 fa 01             	cmp    edx,0x1
c0010cd1:	76 2d                	jbe    c0010d00 <SysClose(regs*)+0x48>
c0010cd3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cd8:	77 2f                	ja     c0010d09 <SysClose(regs*)+0x51>
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	50                   	push   eax
c0010cde:	e8 5c 84 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010ce3:	89 c3                	mov    ebx,eax
c0010ce5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ce8:	e8 f9 9e ff ff       	call   c000abe6 <File::close()>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	85 db                	test   ebx,ebx
c0010cf2:	74 0c                	je     c0010d00 <SysClose(regs*)+0x48>
c0010cf4:	83 ec 0c             	sub    esp,0xc
c0010cf7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cf9:	53                   	push   ebx
c0010cfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010cfd:	83 c4 10             	add    esp,0x10
c0010d00:	31 c0                	xor    eax,eax
c0010d02:	31 d2                	xor    edx,edx
c0010d04:	83 c4 08             	add    esp,0x8
c0010d07:	5b                   	pop    ebx
c0010d08:	c3                   	ret    
c0010d09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d13:	83 c4 08             	add    esp,0x8
c0010d16:	5b                   	pop    ebx
c0010d17:	c3                   	ret    

c0010d18 <SysOpenDir(regs*)>:
c0010d18:	56                   	push   esi
c0010d19:	53                   	push   ebx
c0010d1a:	50                   	push   eax
c0010d1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d22:	85 c0                	test   eax,eax
c0010d24:	74 5b                	je     c0010d81 <SysOpenDir(regs*)+0x69>
c0010d26:	83 ec 0c             	sub    esp,0xc
c0010d29:	68 14 01 00 00       	push   0x114
c0010d2e:	e8 86 6a ff ff       	call   c00077b9 <malloc>
c0010d33:	83 c4 0c             	add    esp,0xc
c0010d36:	89 c6                	mov    esi,eax
c0010d38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d40:	50                   	push   eax
c0010d41:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d44:	50                   	push   eax
c0010d45:	56                   	push   esi
c0010d46:	e8 a7 a2 ff ff       	call   c000aff2 <Directory::Directory(char const*, Process*)>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	85 f6                	test   esi,esi
c0010d50:	74 2f                	je     c0010d81 <SysOpenDir(regs*)+0x69>
c0010d52:	83 ec 0c             	sub    esp,0xc
c0010d55:	56                   	push   esi
c0010d56:	e8 57 a3 ff ff       	call   c000b0b2 <Directory::open()>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	85 c0                	test   eax,eax
c0010d60:	75 1f                	jne    c0010d81 <SysOpenDir(regs*)+0x69>
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	56                   	push   esi
c0010d66:	e8 df 80 ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c0010d6b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d6e:	83 c4 10             	add    esp,0x10
c0010d71:	89 02                	mov    DWORD PTR [edx],eax
c0010d73:	c1 f8 1f             	sar    eax,0x1f
c0010d76:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d79:	31 c0                	xor    eax,eax
c0010d7b:	59                   	pop    ecx
c0010d7c:	31 d2                	xor    edx,edx
c0010d7e:	5b                   	pop    ebx
c0010d7f:	5e                   	pop    esi
c0010d80:	c3                   	ret    
c0010d81:	59                   	pop    ecx
c0010d82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d8c:	5b                   	pop    ebx
c0010d8d:	5e                   	pop    esi
c0010d8e:	c3                   	ret    

c0010d8f <SysCloseDir(regs*)>:
c0010d8f:	53                   	push   ebx
c0010d90:	83 ec 08             	sub    esp,0x8
c0010d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d9a:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d9d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010da3:	77 2f                	ja     c0010dd4 <SysCloseDir(regs*)+0x45>
c0010da5:	83 ec 0c             	sub    esp,0xc
c0010da8:	50                   	push   eax
c0010da9:	e8 91 83 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010dae:	89 c3                	mov    ebx,eax
c0010db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010db3:	e8 56 a3 ff ff       	call   c000b10e <Directory::close()>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	85 db                	test   ebx,ebx
c0010dbd:	74 0c                	je     c0010dcb <SysCloseDir(regs*)+0x3c>
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc4:	53                   	push   ebx
c0010dc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dc8:	83 c4 10             	add    esp,0x10
c0010dcb:	31 c0                	xor    eax,eax
c0010dcd:	31 d2                	xor    edx,edx
c0010dcf:	83 c4 08             	add    esp,0x8
c0010dd2:	5b                   	pop    ebx
c0010dd3:	c3                   	ret    
c0010dd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dde:	83 c4 08             	add    esp,0x8
c0010de1:	5b                   	pop    ebx
c0010de2:	c3                   	ret    

c0010de3 <SysMakeDir(regs*)>:
c0010de3:	56                   	push   esi
c0010de4:	53                   	push   ebx
c0010de5:	83 ec 10             	sub    esp,0x10
c0010de8:	68 14 01 00 00       	push   0x114
c0010ded:	e8 c7 69 ff ff       	call   c00077b9 <malloc>
c0010df2:	83 c4 0c             	add    esp,0xc
c0010df5:	89 c3                	mov    ebx,eax
c0010df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfc:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010dff:	56                   	push   esi
c0010e00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e04:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e07:	50                   	push   eax
c0010e08:	53                   	push   ebx
c0010e09:	e8 e4 a1 ff ff       	call   c000aff2 <Directory::Directory(char const*, Process*)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	85 db                	test   ebx,ebx
c0010e13:	74 32                	je     c0010e47 <SysMakeDir(regs*)+0x64>
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	53                   	push   ebx
c0010e19:	e8 74 a4 ff ff       	call   c000b292 <Directory::create()>
c0010e1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e21:	89 c6                	mov    esi,eax
c0010e23:	e8 e6 a2 ff ff       	call   c000b10e <Directory::close()>
c0010e28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e30:	83 c4 10             	add    esp,0x10
c0010e33:	31 c0                	xor    eax,eax
c0010e35:	59                   	pop    ecx
c0010e36:	85 f6                	test   esi,esi
c0010e38:	5b                   	pop    ebx
c0010e39:	0f 95 c0             	setne  al
c0010e3c:	5e                   	pop    esi
c0010e3d:	31 d2                	xor    edx,edx
c0010e3f:	f7 d8                	neg    eax
c0010e41:	83 d2 00             	adc    edx,0x0
c0010e44:	f7 da                	neg    edx
c0010e46:	c3                   	ret    
c0010e47:	59                   	pop    ecx
c0010e48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e52:	5b                   	pop    ebx
c0010e53:	5e                   	pop    esi
c0010e54:	c3                   	ret    

c0010e55 <SysWait(regs*)>:
c0010e55:	83 ec 10             	sub    esp,0x10
c0010e58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e5c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e5f:	52                   	push   edx
c0010e60:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e63:	51                   	push   ecx
c0010e64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e67:	50                   	push   eax
c0010e68:	e8 53 2b 00 00       	call   c00139c0 <waitTask(int, int*, int)>
c0010e6d:	83 c4 1c             	add    esp,0x1c
c0010e70:	99                   	cdq    
c0010e71:	c3                   	ret    

c0010e72 <SysNotImpl(regs*)>:
c0010e72:	83 ec 18             	sub    esp,0x18
c0010e75:	68 a4 ee 01 c0       	push   0xc001eea4
c0010e7a:	e8 f0 f3 ff ff       	call   c001026f <KePanic(char const*)>
c0010e7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e89:	83 c4 1c             	add    esp,0x1c
c0010e8c:	c3                   	ret    

c0010e8d <SysPanic(regs*)>:
c0010e8d:	83 ec 18             	sub    esp,0x18
c0010e90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e94:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e97:	50                   	push   eax
c0010e98:	e8 d2 f3 ff ff       	call   c001026f <KePanic(char const*)>
c0010e9d:	b8 01 00 00 00       	mov    eax,0x1
c0010ea2:	31 d2                	xor    edx,edx
c0010ea4:	83 c4 1c             	add    esp,0x1c
c0010ea7:	c3                   	ret    

c0010ea8 <SysRmdir(regs*)>:
c0010ea8:	56                   	push   esi
c0010ea9:	53                   	push   ebx
c0010eaa:	83 ec 20             	sub    esp,0x20
c0010ead:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010eb1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010eb4:	68 14 01 00 00       	push   0x114
c0010eb9:	e8 fb 68 ff ff       	call   c00077b9 <malloc>
c0010ebe:	83 c4 0c             	add    esp,0xc
c0010ec1:	89 c3                	mov    ebx,eax
c0010ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ecb:	50                   	push   eax
c0010ecc:	56                   	push   esi
c0010ecd:	53                   	push   ebx
c0010ece:	e8 f5 9b ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010ed3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ed6:	e8 25 9e ff ff       	call   c000ad00 <File::unlink()>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	85 db                	test   ebx,ebx
c0010ee0:	74 14                	je     c0010ef6 <SysRmdir(regs*)+0x4e>
c0010ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ee6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	53                   	push   ebx
c0010eec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ef6:	85 c0                	test   eax,eax
c0010ef8:	0f 95 c0             	setne  al
c0010efb:	31 d2                	xor    edx,edx
c0010efd:	25 ff 00 00 00       	and    eax,0xff
c0010f02:	f7 d8                	neg    eax
c0010f04:	83 d2 00             	adc    edx,0x0
c0010f07:	83 c4 14             	add    esp,0x14
c0010f0a:	f7 da                	neg    edx
c0010f0c:	5b                   	pop    ebx
c0010f0d:	5e                   	pop    esi
c0010f0e:	c3                   	ret    

c0010f0f <SysUnlink(regs*)>:
c0010f0f:	56                   	push   esi
c0010f10:	53                   	push   ebx
c0010f11:	83 ec 20             	sub    esp,0x20
c0010f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f18:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f1b:	68 14 01 00 00       	push   0x114
c0010f20:	e8 94 68 ff ff       	call   c00077b9 <malloc>
c0010f25:	83 c4 0c             	add    esp,0xc
c0010f28:	89 c3                	mov    ebx,eax
c0010f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f32:	50                   	push   eax
c0010f33:	56                   	push   esi
c0010f34:	53                   	push   ebx
c0010f35:	e8 8e 9b ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010f3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f3d:	e8 be 9d ff ff       	call   c000ad00 <File::unlink()>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	85 db                	test   ebx,ebx
c0010f47:	74 14                	je     c0010f5d <SysUnlink(regs*)+0x4e>
c0010f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f4f:	83 ec 0c             	sub    esp,0xc
c0010f52:	53                   	push   ebx
c0010f53:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f5d:	85 c0                	test   eax,eax
c0010f5f:	0f 95 c0             	setne  al
c0010f62:	31 d2                	xor    edx,edx
c0010f64:	25 ff 00 00 00       	and    eax,0xff
c0010f69:	f7 d8                	neg    eax
c0010f6b:	83 d2 00             	adc    edx,0x0
c0010f6e:	83 c4 14             	add    esp,0x14
c0010f71:	f7 da                	neg    edx
c0010f73:	5b                   	pop    ebx
c0010f74:	5e                   	pop    esi
c0010f75:	c3                   	ret    

c0010f76 <SysGetArgv(regs*)>:
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f7d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f80:	85 c0                	test   eax,eax
c0010f82:	78 2c                	js     c0010fb0 <SysGetArgv(regs*)+0x3a>
c0010f84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f8a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f8d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f93:	7d 1b                	jge    c0010fb0 <SysGetArgv(regs*)+0x3a>
c0010f95:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f9c:	85 c0                	test   eax,eax
c0010f9e:	74 18                	je     c0010fb8 <SysGetArgv(regs*)+0x42>
c0010fa0:	83 ec 08             	sub    esp,0x8
c0010fa3:	50                   	push   eax
c0010fa4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fa7:	50                   	push   eax
c0010fa8:	e8 53 f6 fe ff       	call   c0000600 <strcpy>
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	31 c0                	xor    eax,eax
c0010fb2:	31 d2                	xor    edx,edx
c0010fb4:	83 c4 0c             	add    esp,0xc
c0010fb7:	c3                   	ret    
c0010fb8:	b8 01 00 00 00       	mov    eax,0x1
c0010fbd:	31 d2                	xor    edx,edx
c0010fbf:	83 c4 0c             	add    esp,0xc
c0010fc2:	c3                   	ret    

c0010fc3 <SysUSleep(regs*)>:
c0010fc3:	83 ec 1c             	sub    esp,0x1c
c0010fc6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fcd:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fd0:	6a 00                	push   0x0
c0010fd2:	6a 64                	push   0x64
c0010fd4:	52                   	push   edx
c0010fd5:	50                   	push   eax
c0010fd6:	e8 25 b8 00 00       	call   c001c800 <__udivdi3>
c0010fdb:	83 c4 14             	add    esp,0x14
c0010fde:	50                   	push   eax
c0010fdf:	e8 b0 2a 00 00       	call   c0013a94 <milliTenthSleep(unsigned int)>
c0010fe4:	31 c0                	xor    eax,eax
c0010fe6:	31 d2                	xor    edx,edx
c0010fe8:	83 c4 1c             	add    esp,0x1c
c0010feb:	c3                   	ret    

c0010fec <SysSpawn(regs*)>:
c0010fec:	56                   	push   esi
c0010fed:	53                   	push   ebx
c0010fee:	50                   	push   eax
c0010fef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ff3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ff6:	85 c0                	test   eax,eax
c0010ff8:	75 08                	jne    c0011002 <SysSpawn(regs*)+0x16>
c0010ffa:	59                   	pop    ecx
c0010ffb:	31 c0                	xor    eax,eax
c0010ffd:	31 d2                	xor    edx,edx
c0010fff:	5b                   	pop    ebx
c0011000:	5e                   	pop    esi
c0011001:	c3                   	ret    
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	68 24 07 00 00       	push   0x724
c001100a:	e8 aa 67 ff ff       	call   c00077b9 <malloc>
c001100f:	83 c4 10             	add    esp,0x10
c0011012:	89 c6                	mov    esi,eax
c0011014:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011017:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001101a:	85 c0                	test   eax,eax
c001101c:	75 33                	jne    c0011051 <SysSpawn(regs*)+0x65>
c001101e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011023:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011026:	52                   	push   edx
c0011027:	50                   	push   eax
c0011028:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001102b:	53                   	push   ebx
c001102c:	56                   	push   esi
c001102d:	e8 0e 21 00 00       	call   c0013140 <Process::Process(char const*, Process*, char**)>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001103c:	75 bc                	jne    c0010ffa <SysSpawn(regs*)+0xe>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	56                   	push   esi
c0011042:	e8 25 26 00 00       	call   c001366c <Process::createUserThread()>
c0011047:	8b 06                	mov    eax,DWORD PTR [esi]
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	99                   	cdq    
c001104d:	59                   	pop    ecx
c001104e:	5b                   	pop    ebx
c001104f:	5e                   	pop    esi
c0011050:	c3                   	ret    
c0011051:	31 c0                	xor    eax,eax
c0011053:	eb d1                	jmp    c0011026 <SysSpawn(regs*)+0x3a>

c0011055 <SysGetEnv(regs*)>:
c0011055:	57                   	push   edi
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 1c             	sub    esp,0x1c
c001105b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001105f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011064:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011067:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001106a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106d:	50                   	push   eax
c001106e:	e8 b4 f0 ff ff       	call   c0010127 <Krnl::getProcessTotalEnvCount(Process*)>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	39 c7                	cmp    edi,eax
c0011078:	7c 14                	jl     c001108e <SysGetEnv(regs*)+0x39>
c001107a:	85 f6                	test   esi,esi
c001107c:	75 0b                	jne    c0011089 <SysGetEnv(regs*)+0x34>
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	31 c0                	xor    eax,eax
c0011083:	5b                   	pop    ebx
c0011084:	31 d2                	xor    edx,edx
c0011086:	5e                   	pop    esi
c0011087:	5f                   	pop    edi
c0011088:	c3                   	ret    
c0011089:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001108c:	eb f0                	jmp    c001107e <SysGetEnv(regs*)+0x29>
c001108e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011092:	52                   	push   edx
c0011093:	57                   	push   edi
c0011094:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001109a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001109d:	51                   	push   ecx
c001109e:	50                   	push   eax
c001109f:	e8 a3 f0 ff ff       	call   c0010147 <Krnl::getProcessEnvPair(Process*, int)>
c00110a4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110af:	83 c4 0c             	add    esp,0xc
c00110b2:	85 db                	test   ebx,ebx
c00110b4:	75 23                	jne    c00110d9 <SysGetEnv(regs*)+0x84>
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	50                   	push   eax
c00110ba:	e8 81 f4 fe ff       	call   c0000540 <strlen>
c00110bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110c2:	89 c3                	mov    ebx,eax
c00110c4:	e8 77 f4 fe ff       	call   c0000540 <strlen>
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110cf:	83 c4 10             	add    esp,0x10
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	5b                   	pop    ebx
c00110d6:	5e                   	pop    esi
c00110d7:	5f                   	pop    edi
c00110d8:	c3                   	ret    
c00110d9:	83 ec 08             	sub    esp,0x8
c00110dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110df:	50                   	push   eax
c00110e0:	56                   	push   esi
c00110e1:	e8 1a f5 fe ff       	call   c0000600 <strcpy>
c00110e6:	58                   	pop    eax
c00110e7:	5a                   	pop    edx
c00110e8:	68 be ee 01 c0       	push   0xc001eebe
c00110ed:	56                   	push   esi
c00110ee:	e8 cd f6 fe ff       	call   c00007c0 <strcat>
c00110f3:	59                   	pop    ecx
c00110f4:	5b                   	pop    ebx
c00110f5:	57                   	push   edi
c00110f6:	56                   	push   esi
c00110f7:	e8 c4 f6 fe ff       	call   c00007c0 <strcat>
c00110fc:	83 c4 10             	add    esp,0x10
c00110ff:	e9 7a ff ff ff       	jmp    c001107e <SysGetEnv(regs*)+0x29>

c0011104 <SysSetFatAttrib(regs*)>:
c0011104:	57                   	push   edi
c0011105:	56                   	push   esi
c0011106:	53                   	push   ebx
c0011107:	83 ec 1c             	sub    esp,0x1c
c001110a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001110e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011111:	68 14 01 00 00       	push   0x114
c0011116:	e8 9e 66 ff ff       	call   c00077b9 <malloc>
c001111b:	83 c4 0c             	add    esp,0xc
c001111e:	89 c3                	mov    ebx,eax
c0011120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011125:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011128:	50                   	push   eax
c0011129:	57                   	push   edi
c001112a:	53                   	push   ebx
c001112b:	e8 98 99 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011130:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011133:	83 c4 0c             	add    esp,0xc
c0011136:	0f b6 d4             	movzx  edx,ah
c0011139:	25 ff 00 00 00       	and    eax,0xff
c001113e:	52                   	push   edx
c001113f:	50                   	push   eax
c0011140:	53                   	push   ebx
c0011141:	e8 54 9c ff ff       	call   c000ad9a <File::chfatattr(unsigned char, unsigned char)>
c0011146:	83 c4 10             	add    esp,0x10
c0011149:	85 db                	test   ebx,ebx
c001114b:	74 14                	je     c0011161 <SysSetFatAttrib(regs*)+0x5d>
c001114d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011151:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	53                   	push   ebx
c0011157:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001115a:	83 c4 10             	add    esp,0x10
c001115d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011161:	85 c0                	test   eax,eax
c0011163:	0f 95 c0             	setne  al
c0011166:	31 d2                	xor    edx,edx
c0011168:	25 ff 00 00 00       	and    eax,0xff
c001116d:	f7 d8                	neg    eax
c001116f:	83 d2 00             	adc    edx,0x0
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	f7 da                	neg    edx
c0011177:	5b                   	pop    ebx
c0011178:	5e                   	pop    esi
c0011179:	5f                   	pop    edi
c001117a:	c3                   	ret    

c001117b <SysPipe(regs*)>:
c001117b:	57                   	push   edi
c001117c:	56                   	push   esi
c001117d:	53                   	push   ebx
c001117e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011182:	83 ec 0c             	sub    esp,0xc
c0011185:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011188:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001118b:	6a 20                	push   0x20
c001118d:	e8 27 66 ff ff       	call   c00077b9 <malloc>
c0011192:	89 c3                	mov    ebx,eax
c0011194:	58                   	pop    eax
c0011195:	5a                   	pop    edx
c0011196:	68 00 50 00 00       	push   0x5000
c001119b:	53                   	push   ebx
c001119c:	e8 1d 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c00111a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a4:	e8 a1 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111a9:	89 07                	mov    DWORD PTR [edi],eax
c00111ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ae:	e8 97 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111b3:	83 c4 10             	add    esp,0x10
c00111b6:	89 06                	mov    DWORD PTR [esi],eax
c00111b8:	31 d2                	xor    edx,edx
c00111ba:	5b                   	pop    ebx
c00111bb:	31 c0                	xor    eax,eax
c00111bd:	5e                   	pop    esi
c00111be:	5f                   	pop    edi
c00111bf:	c3                   	ret    

c00111c0 <SysGetUnixTime(regs*)>:
c00111c0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00111c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111cf:	e9 02 a3 ff ff       	jmp    c000b4d6 <Clock::timeInSecondsLocal()>

c00111d4 <string_ends_with(char const*, char const*)>:
c00111d4:	57                   	push   edi
c00111d5:	56                   	push   esi
c00111d6:	53                   	push   ebx
c00111d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111df:	83 ec 0c             	sub    esp,0xc
c00111e2:	53                   	push   ebx
c00111e3:	e8 58 f3 fe ff       	call   c0000540 <strlen>
c00111e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111eb:	89 c6                	mov    esi,eax
c00111ed:	e8 4e f3 fe ff       	call   c0000540 <strlen>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	39 c6                	cmp    esi,eax
c00111f7:	7d 06                	jge    c00111ff <string_ends_with(char const*, char const*)+0x2b>
c00111f9:	5b                   	pop    ebx
c00111fa:	31 c0                	xor    eax,eax
c00111fc:	5e                   	pop    esi
c00111fd:	5f                   	pop    edi
c00111fe:	c3                   	ret    
c00111ff:	83 ec 08             	sub    esp,0x8
c0011202:	29 c6                	sub    esi,eax
c0011204:	57                   	push   edi
c0011205:	01 f3                	add    ebx,esi
c0011207:	53                   	push   ebx
c0011208:	e8 d3 f4 fe ff       	call   c00006e0 <strcmp>
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	85 c0                	test   eax,eax
c0011212:	5b                   	pop    ebx
c0011213:	0f 94 c0             	sete   al
c0011216:	5e                   	pop    esi
c0011217:	25 ff 00 00 00       	and    eax,0xff
c001121c:	5f                   	pop    edi
c001121d:	c3                   	ret    

c001121e <SysOpen(regs*)>:
c001121e:	56                   	push   esi
c001121f:	53                   	push   ebx
c0011220:	81 ec 04 01 00 00    	sub    esp,0x104
c0011226:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001122d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011230:	85 c9                	test   ecx,ecx
c0011232:	0f 84 b9 01 00 00    	je     c00113f1 <SysOpen(regs*)+0x1d3>
c0011238:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001123b:	85 c0                	test   eax,eax
c001123d:	0f 84 ae 01 00 00    	je     c00113f1 <SysOpen(regs*)+0x1d3>
c0011243:	52                   	push   edx
c0011244:	68 c0 ee 01 c0       	push   0xc001eec0
c0011249:	50                   	push   eax
c001124a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001124e:	56                   	push   esi
c001124f:	e8 ca 96 ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011254:	89 34 24             	mov    DWORD PTR [esp],esi
c0011257:	e8 e4 f2 fe ff       	call   c0000540 <strlen>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	48                   	dec    eax
c0011260:	74 1d                	je     c001127f <SysOpen(regs*)+0x61>
c0011262:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011265:	eb 0f                	jmp    c0011276 <SysOpen(regs*)+0x58>
c0011267:	80 fa 3a             	cmp    dl,0x3a
c001126a:	74 0f                	je     c001127b <SysOpen(regs*)+0x5d>
c001126c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011270:	48                   	dec    eax
c0011271:	74 0c                	je     c001127f <SysOpen(regs*)+0x61>
c0011273:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011276:	80 fa 2e             	cmp    dl,0x2e
c0011279:	75 ec                	jne    c0011267 <SysOpen(regs*)+0x49>
c001127b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001127f:	83 ec 08             	sub    esp,0x8
c0011282:	68 c4 ee 01 c0       	push   0xc001eec4
c0011287:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001128a:	50                   	push   eax
c001128b:	e8 44 ff ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	85 c0                	test   eax,eax
c0011295:	74 1d                	je     c00112b4 <SysOpen(regs*)+0x96>
c0011297:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001129a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112a7:	81 c4 04 01 00 00    	add    esp,0x104
c00112ad:	31 c0                	xor    eax,eax
c00112af:	31 d2                	xor    edx,edx
c00112b1:	5b                   	pop    ebx
c00112b2:	5e                   	pop    esi
c00112b3:	c3                   	ret    
c00112b4:	83 ec 08             	sub    esp,0x8
c00112b7:	68 c9 ee 01 c0       	push   0xc001eec9
c00112bc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112bf:	50                   	push   eax
c00112c0:	e8 0f ff ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	85 c0                	test   eax,eax
c00112ca:	75 cb                	jne    c0011297 <SysOpen(regs*)+0x79>
c00112cc:	83 ec 08             	sub    esp,0x8
c00112cf:	68 c5 ee 01 c0       	push   0xc001eec5
c00112d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112d7:	50                   	push   eax
c00112d8:	e8 03 f4 fe ff       	call   c00006e0 <strcmp>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	85 c0                	test   eax,eax
c00112e2:	74 b3                	je     c0011297 <SysOpen(regs*)+0x79>
c00112e4:	83 ec 08             	sub    esp,0x8
c00112e7:	68 c4 ee 01 c0       	push   0xc001eec4
c00112ec:	56                   	push   esi
c00112ed:	e8 e2 fe ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	85 c0                	test   eax,eax
c00112f7:	75 9e                	jne    c0011297 <SysOpen(regs*)+0x79>
c00112f9:	83 ec 08             	sub    esp,0x8
c00112fc:	68 ce ee 01 c0       	push   0xc001eece
c0011301:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011304:	50                   	push   eax
c0011305:	e8 ca fe ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	85 c0                	test   eax,eax
c001130f:	0f 85 ef 00 00 00    	jne    c0011404 <SysOpen(regs*)+0x1e6>
c0011315:	83 ec 08             	sub    esp,0x8
c0011318:	68 d3 ee 01 c0       	push   0xc001eed3
c001131d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011320:	50                   	push   eax
c0011321:	e8 ae fe ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	85 c0                	test   eax,eax
c001132b:	0f 85 d3 00 00 00    	jne    c0011404 <SysOpen(regs*)+0x1e6>
c0011331:	83 ec 08             	sub    esp,0x8
c0011334:	68 cf ee 01 c0       	push   0xc001eecf
c0011339:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001133c:	51                   	push   ecx
c001133d:	e8 9e f3 fe ff       	call   c00006e0 <strcmp>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	85 c0                	test   eax,eax
c0011347:	0f 84 b7 00 00 00    	je     c0011404 <SysOpen(regs*)+0x1e6>
c001134d:	83 ec 08             	sub    esp,0x8
c0011350:	68 ce ee 01 c0       	push   0xc001eece
c0011355:	56                   	push   esi
c0011356:	e8 79 fe ff ff       	call   c00111d4 <string_ends_with(char const*, char const*)>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	85 c0                	test   eax,eax
c0011360:	0f 85 9e 00 00 00    	jne    c0011404 <SysOpen(regs*)+0x1e6>
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	68 14 01 00 00       	push   0x114
c001136e:	e8 46 64 ff ff       	call   c00077b9 <malloc>
c0011373:	83 c4 0c             	add    esp,0xc
c0011376:	89 c6                	mov    esi,eax
c0011378:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011380:	50                   	push   eax
c0011381:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011384:	52                   	push   edx
c0011385:	56                   	push   esi
c0011386:	e8 3d 97 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c001138b:	83 c4 10             	add    esp,0x10
c001138e:	85 f6                	test   esi,esi
c0011390:	74 5f                	je     c00113f1 <SysOpen(regs*)+0x1d3>
c0011392:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011395:	89 d0                	mov    eax,edx
c0011397:	25 ff 00 00 00       	and    eax,0xff
c001139c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001139f:	89 d0                	mov    eax,edx
c00113a1:	83 e0 01             	and    eax,0x1
c00113a4:	f6 c2 02             	test   dl,0x2
c00113a7:	74 03                	je     c00113ac <SysOpen(regs*)+0x18e>
c00113a9:	83 c8 02             	or     eax,0x2
c00113ac:	f6 c2 04             	test   dl,0x4
c00113af:	74 03                	je     c00113b4 <SysOpen(regs*)+0x196>
c00113b1:	83 c8 04             	or     eax,0x4
c00113b4:	f6 c2 08             	test   dl,0x8
c00113b7:	74 03                	je     c00113bc <SysOpen(regs*)+0x19e>
c00113b9:	83 c8 0a             	or     eax,0xa
c00113bc:	83 e2 10             	and    edx,0x10
c00113bf:	74 03                	je     c00113c4 <SysOpen(regs*)+0x1a6>
c00113c1:	83 c8 12             	or     eax,0x12
c00113c4:	83 ec 08             	sub    esp,0x8
c00113c7:	50                   	push   eax
c00113c8:	56                   	push   esi
c00113c9:	e8 ba 97 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	85 c0                	test   eax,eax
c00113d3:	75 1c                	jne    c00113f1 <SysOpen(regs*)+0x1d3>
c00113d5:	83 ec 0c             	sub    esp,0xc
c00113d8:	56                   	push   esi
c00113d9:	e8 6c 7a ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00113de:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	89 02                	mov    DWORD PTR [edx],eax
c00113e6:	c1 f8 1f             	sar    eax,0x1f
c00113e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113ec:	e9 b6 fe ff ff       	jmp    c00112a7 <SysOpen(regs*)+0x89>
c00113f1:	81 c4 04 01 00 00    	add    esp,0x104
c00113f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011401:	5b                   	pop    ebx
c0011402:	5e                   	pop    esi
c0011403:	c3                   	ret    
c0011404:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011407:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001140d:	e9 8e fe ff ff       	jmp    c00112a0 <SysOpen(regs*)+0x82>

c0011412 <KeSystemCall(regs*, void*)>:
c0011412:	53                   	push   ebx
c0011413:	83 ec 08             	sub    esp,0x8
c0011416:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001141a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001141d:	83 f8 32             	cmp    eax,0x32
c0011420:	77 16                	ja     c0011438 <KeSystemCall(regs*, void*)+0x26>
c0011422:	8b 14 85 20 00 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdffe0]
c0011429:	85 d2                	test   edx,edx
c001142b:	74 0b                	je     c0011438 <KeSystemCall(regs*, void*)+0x26>
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	53                   	push   ebx
c0011431:	ff d2                	call   edx
c0011433:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011436:	eb 0d                	jmp    c0011445 <KeSystemCall(regs*, void*)+0x33>
c0011438:	52                   	push   edx
c0011439:	52                   	push   edx
c001143a:	50                   	push   eax
c001143b:	68 d8 ee 01 c0       	push   0xc001eed8
c0011440:	e8 0d 91 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001144d:	31 d2                	xor    edx,edx
c001144f:	83 c4 08             	add    esp,0x8
c0011452:	5b                   	pop    ebx
c0011453:	c3                   	ret    

c0011454 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011454:	55                   	push   ebp
c0011455:	57                   	push   edi
c0011456:	56                   	push   esi
c0011457:	53                   	push   ebx
c0011458:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001145e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011465:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011467:	8d 6e 01             	lea    ebp,[esi+0x1]
c001146a:	80 fb 40             	cmp    bl,0x40
c001146d:	75 1b                	jne    c001148a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001146f:	8a 16                	mov    dl,BYTE PTR [esi]
c0011471:	84 d2                	test   dl,dl
c0011473:	0f 84 f1 00 00 00    	je     c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011479:	8d 46 01             	lea    eax,[esi+0x1]
c001147c:	80 fa 3a             	cmp    dl,0x3a
c001147f:	74 04                	je     c0011485 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011481:	89 c6                	mov    esi,eax
c0011483:	eb ea                	jmp    c001146f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011485:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011488:	89 c6                	mov    esi,eax
c001148a:	50                   	push   eax
c001148b:	6a 40                	push   0x40
c001148d:	6a 00                	push   0x0
c001148f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011493:	50                   	push   eax
c0011494:	e8 37 f0 fe ff       	call   c00004d0 <memset>
c0011499:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114a0:	31 c0                	xor    eax,eax
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114a7:	84 c9                	test   cl,cl
c00114a9:	0f 84 bb 00 00 00    	je     c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114af:	3d c7 00 00 00       	cmp    eax,0xc7
c00114b4:	0f 8f b0 00 00 00    	jg     c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ba:	80 f9 0a             	cmp    cl,0xa
c00114bd:	0f 85 98 00 00 00    	jne    c001155b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114c3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114c8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114cc:	a8 df                	test   al,0xdf
c00114ce:	0f 94 c1             	sete   cl
c00114d1:	3c 23                	cmp    al,0x23
c00114d3:	0f 94 c2             	sete   dl
c00114d6:	08 d1                	or     cl,dl
c00114d8:	75 4a                	jne    c0011524 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114da:	8d 50 f7             	lea    edx,[eax-0x9]
c00114dd:	80 fa 01             	cmp    dl,0x1
c00114e0:	76 42                	jbe    c0011524 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114e2:	3c 5b                	cmp    al,0x5b
c00114e4:	75 42                	jne    c0011528 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114e6:	80 fb 40             	cmp    bl,0x40
c00114e9:	75 39                	jne    c0011524 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114eb:	83 ec 0c             	sub    esp,0xc
c00114ee:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114f2:	52                   	push   edx
c00114f3:	e8 48 f0 fe ff       	call   c0000540 <strlen>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	83 f8 3f             	cmp    eax,0x3f
c00114fe:	77 6a                	ja     c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011500:	50                   	push   eax
c0011501:	50                   	push   eax
c0011502:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011506:	52                   	push   edx
c0011507:	8d 54 24 24          	lea    edx,[esp+0x24]
c001150b:	52                   	push   edx
c001150c:	e8 ef f0 fe ff       	call   c0000600 <strcpy>
c0011511:	58                   	pop    eax
c0011512:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011516:	52                   	push   edx
c0011517:	e8 24 f0 fe ff       	call   c0000540 <strlen>
c001151c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	31 d2                	xor    edx,edx
c0011526:	eb 3a                	jmp    c0011562 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011528:	80 fb 40             	cmp    bl,0x40
c001152b:	74 06                	je     c0011533 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001152d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011531:	eb 20                	jmp    c0011553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011533:	50                   	push   eax
c0011534:	50                   	push   eax
c0011535:	55                   	push   ebp
c0011536:	8d 44 24 24          	lea    eax,[esp+0x24]
c001153a:	50                   	push   eax
c001153b:	e8 a0 f1 fe ff       	call   c00006e0 <strcmp>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	85 c0                	test   eax,eax
c0011545:	75 dd                	jne    c0011524 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011547:	eb e4                	jmp    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011549:	8d 50 01             	lea    edx,[eax+0x1]
c001154c:	80 f9 3d             	cmp    cl,0x3d
c001154f:	74 1d                	je     c001156e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011551:	89 d0                	mov    eax,edx
c0011553:	8a 08                	mov    cl,BYTE PTR [eax]
c0011555:	84 c9                	test   cl,cl
c0011557:	75 f0                	jne    c0011549 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011559:	eb 0f                	jmp    c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001155b:	8d 50 01             	lea    edx,[eax+0x1]
c001155e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011562:	47                   	inc    edi
c0011563:	89 d0                	mov    eax,edx
c0011565:	e9 3b ff ff ff       	jmp    c00114a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001156a:	31 c0                	xor    eax,eax
c001156c:	eb 33                	jmp    c00115a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001156e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011572:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011575:	50                   	push   eax
c0011576:	50                   	push   eax
c0011577:	8d 44 24 60          	lea    eax,[esp+0x60]
c001157b:	50                   	push   eax
c001157c:	56                   	push   esi
c001157d:	e8 5e f1 fe ff       	call   c00006e0 <strcmp>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	85 c0                	test   eax,eax
c0011587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001158b:	75 97                	jne    c0011524 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001158d:	51                   	push   ecx
c001158e:	51                   	push   ecx
c001158f:	52                   	push   edx
c0011590:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011597:	e8 64 f0 fe ff       	call   c0000600 <strcpy>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	b0 01                	mov    al,0x1
c00115a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115a7:	5b                   	pop    ebx
c00115a8:	5e                   	pop    esi
c00115a9:	5f                   	pop    edi
c00115aa:	5d                   	pop    ebp
c00115ab:	c3                   	ret    

c00115ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115ac:	57                   	push   edi
c00115ad:	56                   	push   esi
c00115ae:	53                   	push   ebx
c00115af:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115b5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115bc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115c3:	53                   	push   ebx
c00115c4:	e8 77 ef fe ff       	call   c0000540 <strlen>
c00115c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00115cc:	89 c7                	mov    edi,eax
c00115ce:	e8 6d ef fe ff       	call   c0000540 <strlen>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115da:	3d ff 00 00 00       	cmp    eax,0xff
c00115df:	0f 87 d3 00 00 00    	ja     c00116b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115e5:	57                   	push   edi
c00115e6:	57                   	push   edi
c00115e7:	56                   	push   esi
c00115e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115ec:	56                   	push   esi
c00115ed:	e8 0e f0 fe ff       	call   c0000600 <strcpy>
c00115f2:	58                   	pop    eax
c00115f3:	5a                   	pop    edx
c00115f4:	68 89 f1 01 c0       	push   0xc001f189
c00115f9:	56                   	push   esi
c00115fa:	e8 c1 f1 fe ff       	call   c00007c0 <strcat>
c00115ff:	59                   	pop    ecx
c0011600:	5f                   	pop    edi
c0011601:	53                   	push   ebx
c0011602:	56                   	push   esi
c0011603:	e8 b8 f1 fe ff       	call   c00007c0 <strcat>
c0011608:	58                   	pop    eax
c0011609:	5a                   	pop    edx
c001160a:	68 ec ee 01 c0       	push   0xc001eeec
c001160f:	56                   	push   esi
c0011610:	e8 ab f1 fe ff       	call   c00007c0 <strcat>
c0011615:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001161c:	e8 98 61 ff ff       	call   c00077b9 <malloc>
c0011621:	83 c4 0c             	add    esp,0xc
c0011624:	89 c3                	mov    ebx,eax
c0011626:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001162c:	56                   	push   esi
c001162d:	50                   	push   eax
c001162e:	e8 95 94 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011633:	83 c4 10             	add    esp,0x10
c0011636:	85 db                	test   ebx,ebx
c0011638:	74 7e                	je     c00116b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001163a:	51                   	push   ecx
c001163b:	51                   	push   ecx
c001163c:	6a 01                	push   0x1
c001163e:	53                   	push   ebx
c001163f:	e8 44 95 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	85 c0                	test   eax,eax
c0011649:	74 08                	je     c0011653 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001164b:	83 ec 0c             	sub    esp,0xc
c001164e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011650:	53                   	push   ebx
c0011651:	eb 5f                	jmp    c00116b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011653:	52                   	push   edx
c0011654:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011658:	50                   	push   eax
c0011659:	8d 44 24 20          	lea    eax,[esp+0x20]
c001165d:	50                   	push   eax
c001165e:	53                   	push   ebx
c001165f:	e8 d0 97 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0011664:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	89 c1                	mov    ecx,eax
c001166d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011671:	74 31                	je     c00116a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011673:	83 ec 0c             	sub    esp,0xc
c0011676:	50                   	push   eax
c0011677:	e8 3d 61 ff ff       	call   c00077b9 <malloc>
c001167c:	89 c6                	mov    esi,eax
c001167e:	58                   	pop    eax
c001167f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011681:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011685:	52                   	push   edx
c0011686:	56                   	push   esi
c0011687:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001168b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001168f:	53                   	push   ebx
c0011690:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011693:	83 c4 20             	add    esp,0x20
c0011696:	85 c0                	test   eax,eax
c0011698:	75 0a                	jne    c00116a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001169a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001169e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116a2:	74 18                	je     c00116bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	53                   	push   ebx
c00116a8:	e8 39 95 ff ff       	call   c000abe6 <File::close()>
c00116ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	31 c0                	xor    eax,eax
c00116ba:	eb 3b                	jmp    c00116f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	53                   	push   ebx
c00116c0:	e8 21 95 ff ff       	call   c000abe6 <File::close()>
c00116c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116cd:	83 c4 0c             	add    esp,0xc
c00116d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116d7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116de:	56                   	push   esi
c00116df:	e8 70 fd ff ff       	call   c0011454 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116eb:	e8 d9 60 ff ff       	call   c00077c9 <free>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116f7:	81 c4 20 01 00 00    	add    esp,0x120
c00116fd:	5b                   	pop    ebx
c00116fe:	5e                   	pop    esi
c00116ff:	5f                   	pop    edi
c0011700:	c3                   	ret    

c0011701 <Reg::getLine(char*, char*, char*)>:
c0011701:	57                   	push   edi
c0011702:	56                   	push   esi
c0011703:	53                   	push   ebx
c0011704:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011708:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001170c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011710:	57                   	push   edi
c0011711:	56                   	push   esi
c0011712:	53                   	push   ebx
c0011713:	68 f1 ee 01 c0       	push   0xc001eef1
c0011718:	e8 8f fe ff ff       	call   c00115ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	84 c0                	test   al,al
c0011722:	75 10                	jne    c0011734 <Reg::getLine(char*, char*, char*)+0x33>
c0011724:	57                   	push   edi
c0011725:	56                   	push   esi
c0011726:	53                   	push   ebx
c0011727:	68 16 ef 01 c0       	push   0xc001ef16
c001172c:	e8 7b fe ff ff       	call   c00115ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	5b                   	pop    ebx
c0011735:	5e                   	pop    esi
c0011736:	5f                   	pop    edi
c0011737:	c3                   	ret    

c0011738 <Reg::readInt(char*, char*, int*)>:
c0011738:	55                   	push   ebp
c0011739:	57                   	push   edi
c001173a:	56                   	push   esi
c001173b:	53                   	push   ebx
c001173c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011742:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011746:	57                   	push   edi
c0011747:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001174e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011755:	e8 a7 ff ff ff       	call   c0011701 <Reg::getLine(char*, char*, char*)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	84 c0                	test   al,al
c001175f:	0f 84 b3 00 00 00    	je     c0011818 <Reg::readInt(char*, char*, int*)+0xe0>
c0011765:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011769:	80 fa 2b             	cmp    dl,0x2b
c001176c:	74 0c                	je     c001177a <Reg::readInt(char*, char*, int*)+0x42>
c001176e:	80 fa 2d             	cmp    dl,0x2d
c0011771:	75 0e                	jne    c0011781 <Reg::readInt(char*, char*, int*)+0x49>
c0011773:	ba 01 00 00 00       	mov    edx,0x1
c0011778:	eb 0b                	jmp    c0011785 <Reg::readInt(char*, char*, int*)+0x4d>
c001177a:	ba 01 00 00 00       	mov    edx,0x1
c001177f:	eb 02                	jmp    c0011783 <Reg::readInt(char*, char*, int*)+0x4b>
c0011781:	31 d2                	xor    edx,edx
c0011783:	31 c0                	xor    eax,eax
c0011785:	be 0a 00 00 00       	mov    esi,0xa
c001178a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001178f:	75 20                	jne    c00117b1 <Reg::readInt(char*, char*, int*)+0x79>
c0011791:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011795:	80 f9 78             	cmp    cl,0x78
c0011798:	75 0a                	jne    c00117a4 <Reg::readInt(char*, char*, int*)+0x6c>
c001179a:	83 c2 02             	add    edx,0x2
c001179d:	be 10 00 00 00       	mov    esi,0x10
c00117a2:	eb 0d                	jmp    c00117b1 <Reg::readInt(char*, char*, int*)+0x79>
c00117a4:	80 f9 62             	cmp    cl,0x62
c00117a7:	75 08                	jne    c00117b1 <Reg::readInt(char*, char*, int*)+0x79>
c00117a9:	83 c2 02             	add    edx,0x2
c00117ac:	be 02 00 00 00       	mov    esi,0x2
c00117b1:	01 d7                	add    edi,edx
c00117b3:	31 d2                	xor    edx,edx
c00117b5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117b7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117bb:	80 fb 0d             	cmp    bl,0xd
c00117be:	0f 94 c3             	sete   bl
c00117c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c6:	0f 94 c1             	sete   cl
c00117c9:	08 cb                	or     bl,cl
c00117cb:	75 3a                	jne    c0011807 <Reg::readInt(char*, char*, int*)+0xcf>
c00117cd:	0f af d6             	imul   edx,esi
c00117d0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117d5:	83 fe 10             	cmp    esi,0x10
c00117d8:	75 26                	jne    c0011800 <Reg::readInt(char*, char*, int*)+0xc8>
c00117da:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117de:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117e1:	89 e9                	mov    ecx,ebp
c00117e3:	80 f9 05             	cmp    cl,0x5
c00117e6:	77 06                	ja     c00117ee <Reg::readInt(char*, char*, int*)+0xb6>
c00117e8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117ec:	eb 16                	jmp    c0011804 <Reg::readInt(char*, char*, int*)+0xcc>
c00117ee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117f2:	83 e9 61             	sub    ecx,0x61
c00117f5:	80 f9 05             	cmp    cl,0x5
c00117f8:	77 06                	ja     c0011800 <Reg::readInt(char*, char*, int*)+0xc8>
c00117fa:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00117fe:	eb 04                	jmp    c0011804 <Reg::readInt(char*, char*, int*)+0xcc>
c0011800:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011804:	47                   	inc    edi
c0011805:	eb ae                	jmp    c00117b5 <Reg::readInt(char*, char*, int*)+0x7d>
c0011807:	84 c0                	test   al,al
c0011809:	74 02                	je     c001180d <Reg::readInt(char*, char*, int*)+0xd5>
c001180b:	f7 da                	neg    edx
c001180d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011814:	89 10                	mov    DWORD PTR [eax],edx
c0011816:	88 d8                	mov    al,bl
c0011818:	81 c4 ec 00 00 00    	add    esp,0xec
c001181e:	5b                   	pop    ebx
c001181f:	5e                   	pop    esi
c0011820:	5f                   	pop    edi
c0011821:	5d                   	pop    ebp
c0011822:	c3                   	ret    

c0011823 <Reg::readString(char*, char*, char*, int)>:
c0011823:	57                   	push   edi
c0011824:	56                   	push   esi
c0011825:	53                   	push   ebx
c0011826:	81 ec d4 00 00 00    	sub    esp,0xd4
c001182c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011833:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011837:	57                   	push   edi
c0011838:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001183f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011846:	e8 b6 fe ff ff       	call   c0011701 <Reg::getLine(char*, char*, char*)>
c001184b:	83 c4 10             	add    esp,0x10
c001184e:	89 c6                	mov    esi,eax
c0011850:	84 c0                	test   al,al
c0011852:	74 44                	je     c0011898 <Reg::readString(char*, char*, char*, int)+0x75>
c0011854:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001185b:	31 c0                	xor    eax,eax
c001185d:	4a                   	dec    edx
c001185e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011861:	84 c9                	test   cl,cl
c0011863:	74 0f                	je     c0011874 <Reg::readString(char*, char*, char*, int)+0x51>
c0011865:	39 c2                	cmp    edx,eax
c0011867:	7e 0b                	jle    c0011874 <Reg::readString(char*, char*, char*, int)+0x51>
c0011869:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001186c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011871:	40                   	inc    eax
c0011872:	eb ea                	jmp    c001185e <Reg::readString(char*, char*, char*, int)+0x3b>
c0011874:	83 ec 0c             	sub    esp,0xc
c0011877:	53                   	push   ebx
c0011878:	e8 c3 ec fe ff       	call   c0000540 <strlen>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011885:	75 11                	jne    c0011898 <Reg::readString(char*, char*, char*, int)+0x75>
c0011887:	83 ec 0c             	sub    esp,0xc
c001188a:	53                   	push   ebx
c001188b:	e8 b0 ec fe ff       	call   c0000540 <strlen>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011898:	81 c4 d0 00 00 00    	add    esp,0xd0
c001189e:	89 f0                	mov    eax,esi
c00118a0:	5b                   	pop    ebx
c00118a1:	5e                   	pop    esi
c00118a2:	5f                   	pop    edi
c00118a3:	c3                   	ret    

c00118a4 <Reg::readBool(char*, char*, bool*)>:
c00118a4:	83 ec 20             	sub    esp,0x20
c00118a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118ab:	50                   	push   eax
c00118ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b4:	e8 7f fe ff ff       	call   c0011738 <Reg::readInt(char*, char*, int*)>
c00118b9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118c2:	0f 95 02             	setne  BYTE PTR [edx]
c00118c5:	83 c4 2c             	add    esp,0x2c
c00118c8:	c3                   	ret    

c00118c9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118c9:	53                   	push   ebx
c00118ca:	83 ec 1c             	sub    esp,0x1c
c00118cd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118d1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118d5:	50                   	push   eax
c00118d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118de:	e8 c1 ff ff ff       	call   c00118a4 <Reg::readBool(char*, char*, bool*)>
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	84 c0                	test   al,al
c00118e8:	74 04                	je     c00118ee <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118ea:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118ee:	88 d8                	mov    al,bl
c00118f0:	83 c4 18             	add    esp,0x18
c00118f3:	5b                   	pop    ebx
c00118f4:	c3                   	ret    

c00118f5 <Reg::readIntWithDefault(char*, char*, int)>:
c00118f5:	53                   	push   ebx
c00118f6:	83 ec 1c             	sub    esp,0x1c
c00118f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00118fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011901:	50                   	push   eax
c0011902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011906:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190a:	e8 29 fe ff ff       	call   c0011738 <Reg::readInt(char*, char*, int*)>
c001190f:	83 c4 10             	add    esp,0x10
c0011912:	84 c0                	test   al,al
c0011914:	74 04                	je     c001191a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011916:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001191a:	89 d8                	mov    eax,ebx
c001191c:	83 c4 18             	add    esp,0x18
c001191f:	5b                   	pop    ebx
c0011920:	c3                   	ret    

c0011921 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011921:	57                   	push   edi
c0011922:	56                   	push   esi
c0011923:	56                   	push   esi
c0011924:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011928:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001192c:	56                   	push   esi
c001192d:	57                   	push   edi
c001192e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011936:	e8 e8 fe ff ff       	call   c0011823 <Reg::readString(char*, char*, char*, int)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	84 c0                	test   al,al
c0011940:	75 1a                	jne    c001195c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011942:	51                   	push   ecx
c0011943:	56                   	push   esi
c0011944:	6a 00                	push   0x0
c0011946:	57                   	push   edi
c0011947:	e8 84 eb fe ff       	call   c00004d0 <memset>
c001194c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001194f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011953:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001195c:	89 f8                	mov    eax,edi
c001195e:	5a                   	pop    edx
c001195f:	5e                   	pop    esi
c0011960:	5f                   	pop    edi
c0011961:	c3                   	ret    

c0011962 <SysEject(regs*)>:
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	83 ca ff             	or     edx,0xffffffff
c0011968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001196f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011974:	83 e9 41             	sub    ecx,0x41
c0011977:	83 f9 19             	cmp    ecx,0x19
c001197a:	77 18                	ja     c0011994 <SysEject(regs*)+0x32>
c001197c:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c0011983:	85 c9                	test   ecx,ecx
c0011985:	74 0d                	je     c0011994 <SysEject(regs*)+0x32>
c0011987:	83 ec 0c             	sub    esp,0xc
c001198a:	51                   	push   ecx
c001198b:	e8 6e b2 ff ff       	call   c000cbfe <LogicalDisk::eject()>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	99                   	cdq    
c0011994:	83 c4 0c             	add    esp,0xc
c0011997:	c3                   	ret    

c0011998 <SysExit(regs*)>:
c0011998:	83 ec 18             	sub    esp,0x18
c001199b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001199f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119a2:	e8 11 27 00 00       	call   c00140b8 <terminateTask(int)>
c00119a7:	83 c8 ff             	or     eax,0xffffffff
c00119aa:	83 c4 1c             	add    esp,0x1c
c00119ad:	89 c2                	mov    edx,eax
c00119af:	c3                   	ret    

c00119b0 <SysGetCwd(regs*)>:
c00119b0:	83 ec 10             	sub    esp,0x10
c00119b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119b7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119c5:	e8 00 8f ff ff       	call   c000a8ca <Fs::getcwd(Process*, char*, int)>
c00119ca:	83 c4 1c             	add    esp,0x1c
c00119cd:	99                   	cdq    
c00119ce:	c3                   	ret    

c00119cf <SysGetPID(regs*)>:
c00119cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d9:	99                   	cdq    
c00119da:	c3                   	ret    

c00119db <SysGetRAMData(regs*)>:
c00119db:	8b 0d e8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ee8
c00119e1:	69 05 e4 2e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0022ee4,0xc8
c00119eb:	99                   	cdq    
c00119ec:	f7 f9                	idiv   ecx
c00119ee:	c1 e0 18             	shl    eax,0x18
c00119f1:	09 c8                	or     eax,ecx
c00119f3:	99                   	cdq    
c00119f4:	c3                   	ret    

c00119f5 <SysGetVGAPtr(regs*)>:
c00119f5:	55                   	push   ebp
c00119f6:	57                   	push   edi
c00119f7:	56                   	push   esi
c00119f8:	53                   	push   ebx
c00119f9:	83 ec 18             	sub    esp,0x18
c00119fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a00:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a03:	e8 b0 21 00 00       	call   c0013bb8 <Thr::processFromPID(int)>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	89 c1                	mov    ecx,eax
c0011a0d:	b8 01 00 00 00       	mov    eax,0x1
c0011a12:	85 c9                	test   ecx,ecx
c0011a14:	74 57                	je     c0011a6d <SysGetVGAPtr(regs*)+0x78>
c0011a16:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a1c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a20:	74 0c                	je     c0011a2e <SysGetVGAPtr(regs*)+0x39>
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	55                   	push   ebp
c0011a26:	e8 cc 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a31:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a34:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a3b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a41:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a4d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a53:	50                   	push   eax
c0011a54:	50                   	push   eax
c0011a55:	68 31 ef 01 c0       	push   0xc001ef31
c0011a5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a5d:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a62:	50                   	push   eax
c0011a63:	e8 98 eb fe ff       	call   c0000600 <strcpy>
c0011a68:	83 c4 10             	add    esp,0x10
c0011a6b:	31 c0                	xor    eax,eax
c0011a6d:	83 c4 0c             	add    esp,0xc
c0011a70:	31 d2                	xor    edx,edx
c0011a72:	5b                   	pop    ebx
c0011a73:	5e                   	pop    esi
c0011a74:	5f                   	pop    edi
c0011a75:	5d                   	pop    ebp
c0011a76:	c3                   	ret    

c0011a77 <SysLoadDLL(regs*)>:
c0011a77:	56                   	push   esi
c0011a78:	53                   	push   ebx
c0011a79:	31 d2                	xor    edx,edx
c0011a7b:	51                   	push   ecx
c0011a7c:	b8 01 00 00 00       	mov    eax,0x1
c0011a81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a85:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a89:	0f 84 8c 00 00 00    	je     c0011b1b <SysLoadDLL(regs*)+0xa4>
c0011a8f:	83 ec 0c             	sub    esp,0xc
c0011a92:	68 14 01 00 00       	push   0x114
c0011a97:	e8 1d 5d ff ff       	call   c00077b9 <malloc>
c0011a9c:	83 c4 0c             	add    esp,0xc
c0011a9f:	89 c3                	mov    ebx,eax
c0011aa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011aa9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011aac:	53                   	push   ebx
c0011aad:	e8 16 90 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	31 d2                	xor    edx,edx
c0011ab7:	b8 02 00 00 00       	mov    eax,0x2
c0011abc:	85 db                	test   ebx,ebx
c0011abe:	74 5b                	je     c0011b1b <SysLoadDLL(regs*)+0xa4>
c0011ac0:	83 ec 0c             	sub    esp,0xc
c0011ac3:	53                   	push   ebx
c0011ac4:	e8 2d 93 ff ff       	call   c000adf6 <File::exists()>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	84 c0                	test   al,al
c0011ace:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ad0:	75 11                	jne    c0011ae3 <SysLoadDLL(regs*)+0x6c>
c0011ad2:	83 ec 0c             	sub    esp,0xc
c0011ad5:	53                   	push   ebx
c0011ad6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad9:	83 c4 10             	add    esp,0x10
c0011adc:	b8 03 00 00 00       	mov    eax,0x3
c0011ae1:	eb 36                	jmp    c0011b19 <SysLoadDLL(regs*)+0xa2>
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	53                   	push   ebx
c0011ae7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aea:	58                   	pop    eax
c0011aeb:	5a                   	pop    edx
c0011aec:	6a 00                	push   0x0
c0011aee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011af1:	e8 74 12 00 00       	call   c0012d6a <Thr::loadDLL(char const*, bool)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	89 c1                	mov    ecx,eax
c0011afb:	31 d2                	xor    edx,edx
c0011afd:	b8 04 00 00 00       	mov    eax,0x4
c0011b02:	85 c9                	test   ecx,ecx
c0011b04:	74 15                	je     c0011b1b <SysLoadDLL(regs*)+0xa4>
c0011b06:	53                   	push   ebx
c0011b07:	53                   	push   ebx
c0011b08:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0011b0e:	51                   	push   ecx
c0011b0f:	e8 87 14 00 00       	call   c0012f9b <Thr::executeDLL(unsigned long, void*)>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	31 c0                	xor    eax,eax
c0011b19:	31 d2                	xor    edx,edx
c0011b1b:	59                   	pop    ecx
c0011b1c:	5b                   	pop    ebx
c0011b1d:	5e                   	pop    esi
c0011b1e:	c3                   	ret    

c0011b1f <SysRead(regs*)>:
c0011b1f:	57                   	push   edi
c0011b20:	56                   	push   esi
c0011b21:	53                   	push   ebx
c0011b22:	83 ec 10             	sub    esp,0x10
c0011b25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b2c:	83 f8 02             	cmp    eax,0x2
c0011b2f:	77 10                	ja     c0011b41 <SysRead(regs*)+0x22>
c0011b31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b39:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b3f:	eb 0e                	jmp    c0011b4f <SysRead(regs*)+0x30>
c0011b41:	83 ec 0c             	sub    esp,0xc
c0011b44:	50                   	push   eax
c0011b45:	e8 f5 75 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	89 c1                	mov    ecx,eax
c0011b4f:	83 c8 ff             	or     eax,0xffffffff
c0011b52:	85 c9                	test   ecx,ecx
c0011b54:	89 c2                	mov    edx,eax
c0011b56:	74 28                	je     c0011b80 <SysRead(regs*)+0x61>
c0011b58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b60:	31 ff                	xor    edi,edi
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b67:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b6b:	52                   	push   edx
c0011b6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b6f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b72:	57                   	push   edi
c0011b73:	56                   	push   esi
c0011b74:	51                   	push   ecx
c0011b75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7c:	83 c4 20             	add    esp,0x20
c0011b7f:	99                   	cdq    
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	5b                   	pop    ebx
c0011b84:	5e                   	pop    esi
c0011b85:	5f                   	pop    edi
c0011b86:	c3                   	ret    

c0011b87 <SysRegisterSignal(regs*)>:
c0011b87:	83 ec 18             	sub    esp,0x18
c0011b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b8e:	6a 00                	push   0x0
c0011b90:	6a 00                	push   0x0
c0011b92:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b95:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba0:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011ba6:	e8 7a ea ff ff       	call   c0010625 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bab:	83 c4 2c             	add    esp,0x2c
c0011bae:	99                   	cdq    
c0011baf:	c3                   	ret    

c0011bb0 <SysSbrk(regs*)>:
c0011bb0:	56                   	push   esi
c0011bb1:	53                   	push   ebx
c0011bb2:	50                   	push   eax
c0011bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bbf:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011bc2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bc8:	85 db                	test   ebx,ebx
c0011bca:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bcd:	74 02                	je     c0011bd1 <SysSbrk(regs*)+0x21>
c0011bcf:	79 06                	jns    c0011bd7 <SysSbrk(regs*)+0x27>
c0011bd1:	89 f0                	mov    eax,esi
c0011bd3:	31 d2                	xor    edx,edx
c0011bd5:	eb 2a                	jmp    c0011c01 <SysSbrk(regs*)+0x51>
c0011bd7:	83 c8 ff             	or     eax,0xffffffff
c0011bda:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011be0:	89 c2                	mov    edx,eax
c0011be2:	77 1d                	ja     c0011c01 <SysSbrk(regs*)+0x51>
c0011be4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011bea:	50                   	push   eax
c0011beb:	c1 ea 0c             	shr    edx,0xc
c0011bee:	68 07 0c 00 00       	push   0xc07
c0011bf3:	52                   	push   edx
c0011bf4:	51                   	push   ecx
c0011bf5:	e8 62 7e ff ff       	call   c0009a5c <VAS::allocatePages(int, int)>
c0011bfa:	89 f0                	mov    eax,esi
c0011bfc:	31 d2                	xor    edx,edx
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	59                   	pop    ecx
c0011c02:	5b                   	pop    ebx
c0011c03:	5e                   	pop    esi
c0011c04:	c3                   	ret    

c0011c05 <SysSetCwd(regs*)>:
c0011c05:	83 ec 14             	sub    esp,0x14
c0011c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c0c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c14:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c17:	e8 79 92 ff ff       	call   c000ae95 <Fs::setcwd(Process*, char*)>
c0011c1c:	83 c4 1c             	add    esp,0x1c
c0011c1f:	99                   	cdq    
c0011c20:	c3                   	ret    

c0011c21 <SysSetTime(regs*)>:
c0011c21:	55                   	push   ebp
c0011c22:	31 c9                	xor    ecx,ecx
c0011c24:	57                   	push   edi
c0011c25:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c2a:	56                   	push   esi
c0011c2b:	53                   	push   ebx
c0011c2c:	31 db                	xor    ebx,ebx
c0011c2e:	83 ec 10             	sub    esp,0x10
c0011c31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c35:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c38:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c3b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c3e:	89 c2                	mov    edx,eax
c0011c40:	66 81 ef 6c 07       	sub    di,0x76c
c0011c45:	83 e2 1f             	and    edx,0x1f
c0011c48:	c1 e7 10             	shl    edi,0x10
c0011c4b:	42                   	inc    edx
c0011c4c:	c1 e8 05             	shr    eax,0x5
c0011c4f:	88 d1                	mov    cl,dl
c0011c51:	31 d2                	xor    edx,edx
c0011c53:	f7 f5                	div    ebp
c0011c55:	89 dd                	mov    ebp,ebx
c0011c57:	88 d5                	mov    ch,dl
c0011c59:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c5f:	0f b7 c1             	movzx  eax,cx
c0011c62:	31 d2                	xor    edx,edx
c0011c64:	09 f8                	or     eax,edi
c0011c66:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c6b:	89 c1                	mov    ecx,eax
c0011c6d:	89 f0                	mov    eax,esi
c0011c6f:	f7 f7                	div    edi
c0011c71:	c1 e2 10             	shl    edx,0x10
c0011c74:	09 d5                	or     ebp,edx
c0011c76:	31 d2                	xor    edx,edx
c0011c78:	89 eb                	mov    ebx,ebp
c0011c7a:	f7 f7                	div    edi
c0011c7c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c81:	88 d7                	mov    bh,dl
c0011c83:	89 f0                	mov    eax,esi
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	f7 f7                	div    edi
c0011c89:	bf 18 00 00 00       	mov    edi,0x18
c0011c8e:	31 d2                	xor    edx,edx
c0011c90:	f7 f7                	div    edi
c0011c92:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011c97:	88 d3                	mov    bl,dl
c0011c99:	53                   	push   ebx
c0011c9a:	51                   	push   ecx
c0011c9b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ca1:	e8 fe 99 ff ff       	call   c000b6a4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011ca6:	83 c4 1c             	add    esp,0x1c
c0011ca9:	83 f0 01             	xor    eax,0x1
c0011cac:	5b                   	pop    ebx
c0011cad:	0f b6 c0             	movzx  eax,al
c0011cb0:	5e                   	pop    esi
c0011cb1:	31 d2                	xor    edx,edx
c0011cb3:	5f                   	pop    edi
c0011cb4:	5d                   	pop    ebp
c0011cb5:	c3                   	ret    

c0011cb6 <SysTimezone(regs*)>:
c0011cb6:	53                   	push   ebx
c0011cb7:	83 ec 08             	sub    esp,0x8
c0011cba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cbe:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cc2:	75 17                	jne    c0011cdb <SysTimezone(regs*)+0x25>
c0011cc4:	83 ec 0c             	sub    esp,0xc
c0011cc7:	68 3b ef 01 c0       	push   0xc001ef3b
c0011ccc:	e8 81 88 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011cd1:	83 c8 ff             	or     eax,0xffffffff
c0011cd4:	83 c4 10             	add    esp,0x10
c0011cd7:	89 c2                	mov    edx,eax
c0011cd9:	eb 20                	jmp    c0011cfb <SysTimezone(regs*)+0x45>
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	68 50 ef 01 c0       	push   0xc001ef50
c0011ce3:	e8 6a 88 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011ce8:	58                   	pop    eax
c0011ce9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cec:	e8 0f 97 ff ff       	call   c000b400 <User::loadClockSettings(int)>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	b8 01 00 00 00       	mov    eax,0x1
c0011cf9:	31 d2                	xor    edx,edx
c0011cfb:	83 c4 08             	add    esp,0x8
c0011cfe:	5b                   	pop    ebx
c0011cff:	c3                   	ret    

c0011d00 <SysWrite(regs*)>:
c0011d00:	57                   	push   edi
c0011d01:	56                   	push   esi
c0011d02:	53                   	push   ebx
c0011d03:	83 ec 10             	sub    esp,0x10
c0011d06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d0a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d0d:	83 f8 02             	cmp    eax,0x2
c0011d10:	77 10                	ja     c0011d22 <SysWrite(regs*)+0x22>
c0011d12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d1a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d20:	eb 0e                	jmp    c0011d30 <SysWrite(regs*)+0x30>
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	50                   	push   eax
c0011d26:	e8 14 74 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	89 c1                	mov    ecx,eax
c0011d30:	83 c8 ff             	or     eax,0xffffffff
c0011d33:	85 c9                	test   ecx,ecx
c0011d35:	89 c2                	mov    edx,eax
c0011d37:	74 28                	je     c0011d61 <SysWrite(regs*)+0x61>
c0011d39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d41:	31 ff                	xor    edi,edi
c0011d43:	83 ec 0c             	sub    esp,0xc
c0011d46:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d48:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d4c:	52                   	push   edx
c0011d4d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d50:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d53:	57                   	push   edi
c0011d54:	56                   	push   esi
c0011d55:	51                   	push   ecx
c0011d56:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d5d:	83 c4 20             	add    esp,0x20
c0011d60:	99                   	cdq    
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	5b                   	pop    ebx
c0011d65:	5e                   	pop    esi
c0011d66:	5f                   	pop    edi
c0011d67:	c3                   	ret    

c0011d68 <SysWsbe(regs*)>:
c0011d68:	57                   	push   edi
c0011d69:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d6e:	56                   	push   esi
c0011d6f:	be 8f ef 01 c0       	mov    esi,0xc001ef8f
c0011d74:	53                   	push   ebx
c0011d75:	83 ec 30             	sub    esp,0x30
c0011d78:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d7c:	fc                   	cld    
c0011d7d:	83 ec 0c             	sub    esp,0xc
c0011d80:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d82:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011d94:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d96:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011d99:	57                   	push   edi
c0011d9a:	e8 a1 e7 fe ff       	call   c0000540 <strlen>
c0011d9f:	5a                   	pop    edx
c0011da0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011da4:	52                   	push   edx
c0011da5:	31 d2                	xor    edx,edx
c0011da7:	57                   	push   edi
c0011da8:	52                   	push   edx
c0011da9:	50                   	push   eax
c0011daa:	56                   	push   esi
c0011dab:	ff d3                	call   ebx
c0011dad:	83 c4 14             	add    esp,0x14
c0011db0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011db4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011db7:	e8 fc 22 00 00       	call   c00140b8 <terminateTask(int)>
c0011dbc:	83 c4 40             	add    esp,0x40
c0011dbf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dc4:	5b                   	pop    ebx
c0011dc5:	31 d2                	xor    edx,edx
c0011dc7:	5e                   	pop    esi
c0011dc8:	5f                   	pop    edi
c0011dc9:	c3                   	ret    

c0011dca <SysYield(regs*)>:
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	fa                   	cli    
c0011dce:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011dd4:	e8 bb 19 00 00       	call   c0013794 <schedule()>
c0011dd9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011dde:	48                   	dec    eax
c0011ddf:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011de4:	75 01                	jne    c0011de7 <SysYield(regs*)+0x1d>
c0011de6:	fb                   	sti    
c0011de7:	31 c0                	xor    eax,eax
c0011de9:	31 d2                	xor    edx,edx
c0011deb:	83 c4 0c             	add    esp,0xc
c0011dee:	c3                   	ret    

c0011def <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011def:	55                   	push   ebp
c0011df0:	57                   	push   edi
c0011df1:	56                   	push   esi
c0011df2:	53                   	push   ebx
c0011df3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011df9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e01:	0f 95 c2             	setne  dl
c0011e04:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e0c:	0f 94 c0             	sete   al
c0011e0f:	84 c2                	test   dl,al
c0011e11:	74 34                	je     c0011e47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e13:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e1e:	74 27                	je     c0011e47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e20:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e27:	05 00 10 00 00       	add    eax,0x1000
c0011e2c:	89 c1                	mov    ecx,eax
c0011e2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e33:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e39:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e40:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e47:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e4e:	83 ec 0c             	sub    esp,0xc
c0011e51:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e57:	6a 01                	push   0x1
c0011e59:	e8 37 74 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0011e5e:	83 c4 10             	add    esp,0x10
c0011e61:	89 c3                	mov    ebx,eax
c0011e63:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e69:	0f 86 25 01 00 00    	jbe    c0011f94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e6f:	c1 ee 0c             	shr    esi,0xc
c0011e72:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e79:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e7d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e85:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e90:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011e97:	29 ef                	sub    edi,ebp
c0011e99:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011e9d:	0f 83 f8 00 00 00    	jae    c0011f9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ea3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ea9:	76 05                	jbe    c0011eb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eab:	bf 00 10 00 00       	mov    edi,0x1000
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	31 d2                	xor    edx,edx
c0011eb5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ebc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ebe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ec2:	50                   	push   eax
c0011ec3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ec7:	56                   	push   esi
c0011ec8:	52                   	push   edx
c0011ec9:	57                   	push   edi
c0011eca:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ed1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ed4:	83 c4 20             	add    esp,0x20
c0011ed7:	85 c0                	test   eax,eax
c0011ed9:	75 06                	jne    c0011ee1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011edb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011edf:	74 13                	je     c0011ef4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	53                   	push   ebx
c0011ee5:	e8 9f 76 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	31 c0                	xor    eax,eax
c0011eef:	e9 7c 01 00 00       	jmp    c0012070 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011ef4:	fa                   	cli    
c0011ef5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011efb:	e8 95 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f00:	6a 07                	push   0x7
c0011f02:	89 c7                	mov    edi,eax
c0011f04:	53                   	push   ebx
c0011f05:	50                   	push   eax
c0011f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f0e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f14:	e8 3f 7a ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f19:	83 c4 0c             	add    esp,0xc
c0011f1c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f29:	6a 00                	push   0x0
c0011f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f39:	e8 8c 78 ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0011f3e:	58                   	pop    eax
c0011f3f:	5a                   	pop    edx
c0011f40:	68 07 0c 00 00       	push   0xc07
c0011f45:	55                   	push   ebp
c0011f46:	57                   	push   edi
c0011f47:	89 df                	mov    edi,ebx
c0011f49:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f50:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f56:	6a 00                	push   0x0
c0011f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f60:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f66:	e8 ad 7d ff ff       	call   c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f6b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f72:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011f77:	83 c4 20             	add    esp,0x20
c0011f7a:	48                   	dec    eax
c0011f7b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011f80:	85 c0                	test   eax,eax
c0011f82:	75 01                	jne    c0011f85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f84:	fb                   	sti    
c0011f85:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f8b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f8f:	e9 f1 fe ff ff       	jmp    c0011e85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011f94:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f9b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fa2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fa8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fae:	0f 86 ae 00 00 00    	jbe    c0012062 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fb4:	fa                   	cli    
c0011fb5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011fbb:	c1 ee 0c             	shr    esi,0xc
c0011fbe:	51                   	push   ecx
c0011fbf:	31 ff                	xor    edi,edi
c0011fc1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fc8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fce:	6a 00                	push   0x0
c0011fd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fd8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fde:	e8 e7 77 ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	e8 aa 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011feb:	47                   	inc    edi
c0011fec:	6a 07                	push   0x7
c0011fee:	53                   	push   ebx
c0011fef:	50                   	push   eax
c0011ff0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ff4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011ffa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011ffd:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012003:	e8 50 79 ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012008:	58                   	pop    eax
c0012009:	5a                   	pop    edx
c001200a:	68 07 0c 00 00       	push   0xc07
c001200f:	55                   	push   ebp
c0012010:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201a:	50                   	push   eax
c001201b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012022:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012028:	6a 00                	push   0x0
c001202a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001202f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012032:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012038:	e8 db 7c ff ff       	call   c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001203d:	83 c4 1c             	add    esp,0x1c
c0012040:	68 00 10 00 00       	push   0x1000
c0012045:	6a 00                	push   0x0
c0012047:	53                   	push   ebx
c0012048:	e8 83 e4 fe ff       	call   c00004d0 <memset>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	39 fe                	cmp    esi,edi
c0012052:	77 92                	ja     c0011fe6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012054:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012059:	48                   	dec    eax
c001205a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001205f:	75 01                	jne    c0012062 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012061:	fb                   	sti    
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	53                   	push   ebx
c0012066:	e8 1e 75 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	b0 01                	mov    al,0x1
c0012070:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012076:	5b                   	pop    ebx
c0012077:	5e                   	pop    esi
c0012078:	5f                   	pop    edi
c0012079:	5d                   	pop    ebp
c001207a:	c3                   	ret    

c001207b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001207b:	55                   	push   ebp
c001207c:	57                   	push   edi
c001207d:	56                   	push   esi
c001207e:	53                   	push   ebx
c001207f:	83 ec 48             	sub    esp,0x48
c0012082:	68 14 01 00 00       	push   0x114
c0012087:	e8 2d 57 ff ff       	call   c00077b9 <malloc>
c001208c:	83 c4 0c             	add    esp,0xc
c001208f:	89 c6                	mov    esi,eax
c0012091:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012095:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012099:	50                   	push   eax
c001209a:	e8 29 8a ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c001209f:	58                   	pop    eax
c00120a0:	5a                   	pop    edx
c00120a1:	6a 01                	push   0x1
c00120a3:	56                   	push   esi
c00120a4:	e8 df 8a ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	85 c0                	test   eax,eax
c00120ae:	0f 85 47 01 00 00    	jne    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120b4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	6a 34                	push   0x34
c00120c1:	e8 f3 56 ff ff       	call   c00077b9 <malloc>
c00120c6:	89 c3                	mov    ebx,eax
c00120c8:	58                   	pop    eax
c00120c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00120cb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120cf:	57                   	push   edi
c00120d0:	53                   	push   ebx
c00120d1:	6a 00                	push   0x0
c00120d3:	6a 34                	push   0x34
c00120d5:	56                   	push   esi
c00120d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120d9:	83 c4 20             	add    esp,0x20
c00120dc:	85 c0                	test   eax,eax
c00120de:	0f 85 17 01 00 00    	jne    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120e4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120ea:	0f 85 0b 01 00 00    	jne    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120f3:	85 c0                	test   eax,eax
c00120f5:	0f 84 00 01 00 00    	je     c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120fb:	31 d2                	xor    edx,edx
c00120fd:	55                   	push   ebp
c00120fe:	52                   	push   edx
c00120ff:	50                   	push   eax
c0012100:	56                   	push   esi
c0012101:	e8 40 8b ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	85 c0                	test   eax,eax
c001210b:	0f 85 ea 00 00 00    	jne    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012111:	83 ec 0c             	sub    esp,0xc
c0012114:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012117:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001211b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001211f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012123:	0f af c2             	imul   eax,edx
c0012126:	50                   	push   eax
c0012127:	e8 8d 56 ff ff       	call   c00077b9 <malloc>
c001212c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001212e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012132:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012135:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012139:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001213d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012141:	0f af c2             	imul   eax,edx
c0012144:	99                   	cdq    
c0012145:	52                   	push   edx
c0012146:	50                   	push   eax
c0012147:	56                   	push   esi
c0012148:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001214b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001214e:	83 c4 20             	add    esp,0x20
c0012151:	85 c0                	test   eax,eax
c0012153:	0f 84 a2 00 00 00    	je     c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012159:	31 d2                	xor    edx,edx
c001215b:	51                   	push   ecx
c001215c:	52                   	push   edx
c001215d:	50                   	push   eax
c001215e:	56                   	push   esi
c001215f:	e8 e2 8a ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012164:	83 c4 10             	add    esp,0x10
c0012167:	85 c0                	test   eax,eax
c0012169:	0f 85 8c 00 00 00    	jne    c00121fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012176:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001217a:	31 ed                	xor    ebp,ebp
c001217c:	0f af c2             	imul   eax,edx
c001217f:	50                   	push   eax
c0012180:	e8 34 56 ff ff       	call   c00077b9 <malloc>
c0012185:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012187:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001218b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001218e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012192:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012196:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001219a:	0f af c2             	imul   eax,edx
c001219d:	99                   	cdq    
c001219e:	52                   	push   edx
c001219f:	50                   	push   eax
c00121a0:	56                   	push   esi
c00121a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121a4:	83 c4 20             	add    esp,0x20
c00121a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121af:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121b3:	0f 86 80 00 00 00    	jbe    c0012239 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121b9:	0f b7 fd             	movzx  edi,bp
c00121bc:	c1 e7 05             	shl    edi,0x5
c00121bf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121c3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121c6:	75 6b                	jne    c0012233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121cf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121d6:	52                   	push   edx
c00121d7:	31 d2                	xor    edx,edx
c00121d9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121dc:	52                   	push   edx
c00121dd:	50                   	push   eax
c00121de:	56                   	push   esi
c00121df:	e8 62 8a ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00121e4:	83 c4 10             	add    esp,0x10
c00121e7:	85 c0                	test   eax,eax
c00121e9:	74 17                	je     c0012202 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121eb:	83 ec 0c             	sub    esp,0xc
c00121ee:	68 bb ef 01 c0       	push   0xc001efbb
c00121f3:	e8 5a 83 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	31 c0                	xor    eax,eax
c00121fd:	e9 87 00 00 00       	jmp    c0012289 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012202:	83 ec 0c             	sub    esp,0xc
c0012205:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012208:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001220b:	50                   	push   eax
c001220c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012214:	56                   	push   esi
c0012215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012219:	e8 d1 fb ff ff       	call   c0011def <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001221e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012222:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012226:	83 c4 20             	add    esp,0x20
c0012229:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001222d:	73 04                	jae    c0012233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001222f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012233:	45                   	inc    ebp
c0012234:	e9 76 ff ff ff       	jmp    c00121af <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012239:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001223d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012245:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001224b:	83 ec 0c             	sub    esp,0xc
c001224e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012254:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012259:	05 00 10 00 00       	add    eax,0x1000
c001225e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012265:	e8 5f 55 ff ff       	call   c00077c9 <free>
c001226a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001226d:	e8 57 55 ff ff       	call   c00077c9 <free>
c0012272:	58                   	pop    eax
c0012273:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012277:	e8 4d 55 ff ff       	call   c00077c9 <free>
c001227c:	89 34 24             	mov    DWORD PTR [esp],esi
c001227f:	e8 62 89 ff ff       	call   c000abe6 <File::close()>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	b0 01                	mov    al,0x1
c0012289:	83 c4 3c             	add    esp,0x3c
c001228c:	5b                   	pop    ebx
c001228d:	5e                   	pop    esi
c001228e:	5f                   	pop    edi
c001228f:	5d                   	pop    ebp
c0012290:	c3                   	ret    

c0012291 <Thr::runtimeReferenceHelper()>:
c0012291:	83 ec 18             	sub    esp,0x18
c0012294:	68 c3 ef 01 c0       	push   0xc001efc3
c0012299:	e8 b4 82 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001229e:	fa                   	cli    
c001229f:	83 c4 10             	add    esp,0x10
c00122a2:	eb fe                	jmp    c00122a2 <Thr::runtimeReferenceHelper()+0x11>

c00122a4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122a4:	57                   	push   edi
c00122a5:	56                   	push   esi
c00122a6:	53                   	push   ebx
c00122a7:	31 db                	xor    ebx,ebx
c00122a9:	39 1d 40 61 02 c0    	cmp    DWORD PTR ds:0xc0026140,ebx
c00122af:	7e 3c                	jle    c00122ed <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122b1:	8b 34 9d c0 60 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9f40]
c00122b8:	31 ff                	xor    edi,edi
c00122ba:	39 3c 9d c0 5f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda040],edi
c00122c1:	7e 27                	jle    c00122ea <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122c3:	50                   	push   eax
c00122c4:	50                   	push   eax
c00122c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00122cb:	03 04 9d 40 60 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9fc0]
c00122d2:	50                   	push   eax
c00122d3:	e8 08 e4 fe ff       	call   c00006e0 <strcmp>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	85 c0                	test   eax,eax
c00122dd:	75 05                	jne    c00122e4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122e2:	eb 0b                	jmp    c00122ef <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122e4:	83 c6 10             	add    esi,0x10
c00122e7:	47                   	inc    edi
c00122e8:	eb d0                	jmp    c00122ba <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122ea:	43                   	inc    ebx
c00122eb:	eb bc                	jmp    c00122a9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122ed:	31 c0                	xor    eax,eax
c00122ef:	5b                   	pop    ebx
c00122f0:	5e                   	pop    esi
c00122f1:	5f                   	pop    edi
c00122f2:	c3                   	ret    

c00122f3 <Thr::loadKernelSymbolTable(char const*)>:
c00122f3:	55                   	push   ebp
c00122f4:	57                   	push   edi
c00122f5:	56                   	push   esi
c00122f6:	53                   	push   ebx
c00122f7:	83 ec 68             	sub    esp,0x68
c00122fa:	8b 35 90 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026190
c0012300:	68 14 01 00 00       	push   0x114
c0012305:	e8 af 54 ff ff       	call   c00077b9 <malloc>
c001230a:	83 c4 0c             	add    esp,0xc
c001230d:	89 c3                	mov    ebx,eax
c001230f:	56                   	push   esi
c0012310:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012314:	50                   	push   eax
c0012315:	e8 ae 87 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c001231a:	5e                   	pop    esi
c001231b:	5f                   	pop    edi
c001231c:	6a 01                	push   0x1
c001231e:	53                   	push   ebx
c001231f:	e8 64 88 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	85 c0                	test   eax,eax
c0012329:	74 0a                	je     c0012335 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001232b:	83 ec 0c             	sub    esp,0xc
c001232e:	68 e5 ef 01 c0       	push   0xc001efe5
c0012333:	eb 34                	jmp    c0012369 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012335:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001233d:	83 ec 0c             	sub    esp,0xc
c0012340:	6a 34                	push   0x34
c0012342:	e8 72 54 ff ff       	call   c00077b9 <malloc>
c0012347:	59                   	pop    ecx
c0012348:	89 c7                	mov    edi,eax
c001234a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001234e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012350:	56                   	push   esi
c0012351:	57                   	push   edi
c0012352:	6a 00                	push   0x0
c0012354:	6a 34                	push   0x34
c0012356:	53                   	push   ebx
c0012357:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001235a:	83 c4 20             	add    esp,0x20
c001235d:	85 c0                	test   eax,eax
c001235f:	74 17                	je     c0012378 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012361:	83 ec 0c             	sub    esp,0xc
c0012364:	68 fc ef 01 c0       	push   0xc001effc
c0012369:	e8 01 df ff ff       	call   c001026f <KePanic(char const*)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	31 c0                	xor    eax,eax
c0012373:	e9 31 02 00 00       	jmp    c00125a9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012378:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001237e:	75 e1                	jne    c0012361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012380:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012383:	85 c0                	test   eax,eax
c0012385:	74 da                	je     c0012361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012387:	52                   	push   edx
c0012388:	31 d2                	xor    edx,edx
c001238a:	52                   	push   edx
c001238b:	50                   	push   eax
c001238c:	53                   	push   ebx
c001238d:	e8 b4 88 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012392:	83 c4 10             	add    esp,0x10
c0012395:	85 c0                	test   eax,eax
c0012397:	75 c8                	jne    c0012361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123a4:	31 ed                	xor    ebp,ebp
c00123a6:	0f af c2             	imul   eax,edx
c00123a9:	50                   	push   eax
c00123aa:	e8 0a 54 ff ff       	call   c00077b9 <malloc>
c00123af:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00123b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123bc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123c4:	0f af c2             	imul   eax,edx
c00123c7:	99                   	cdq    
c00123c8:	52                   	push   edx
c00123c9:	50                   	push   eax
c00123ca:	53                   	push   ebx
c00123cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123ce:	83 c4 20             	add    esp,0x20
c00123d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00123f1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00123f5:	0f 86 aa 00 00 00    	jbe    c00124a5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00123fb:	0f b7 f5             	movzx  esi,bp
c00123fe:	6b f6 28             	imul   esi,esi,0x28
c0012401:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012405:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012408:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240c:	50                   	push   eax
c001240d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012411:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012415:	8b 16                	mov    edx,DWORD PTR [esi]
c0012417:	6b c0 28             	imul   eax,eax,0x28
c001241a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001241e:	89 d0                	mov    eax,edx
c0012420:	31 d2                	xor    edx,edx
c0012422:	52                   	push   edx
c0012423:	50                   	push   eax
c0012424:	53                   	push   ebx
c0012425:	e8 1c 88 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c001242a:	83 c4 0c             	add    esp,0xc
c001242d:	6a 20                	push   0x20
c001242f:	6a 00                	push   0x0
c0012431:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012435:	52                   	push   edx
c0012436:	e8 95 e0 fe ff       	call   c00004d0 <memset>
c001243b:	58                   	pop    eax
c001243c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001243e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012442:	51                   	push   ecx
c0012443:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012447:	52                   	push   edx
c0012448:	6a 00                	push   0x0
c001244a:	6a 1f                	push   0x1f
c001244c:	53                   	push   ebx
c001244d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012450:	83 c4 18             	add    esp,0x18
c0012453:	68 13 f0 01 c0       	push   0xc001f013
c0012458:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001245c:	52                   	push   edx
c001245d:	e8 7e e2 fe ff       	call   c00006e0 <strcmp>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	85 c0                	test   eax,eax
c0012467:	75 0f                	jne    c0012478 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012469:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001246c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012470:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012478:	50                   	push   eax
c0012479:	50                   	push   eax
c001247a:	68 1b f0 01 c0       	push   0xc001f01b
c001247f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012483:	50                   	push   eax
c0012484:	e8 57 e2 fe ff       	call   c00006e0 <strcmp>
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	85 c0                	test   eax,eax
c001248e:	75 0f                	jne    c001249f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012490:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012493:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012497:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001249f:	45                   	inc    ebp
c00124a0:	e9 4c ff ff ff       	jmp    c00123f1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124aa:	75 10                	jne    c00124bc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	68 23 f0 01 c0       	push   0xc001f023
c00124b4:	e8 b6 dd ff ff       	call   c001026f <KePanic(char const*)>
c00124b9:	83 c4 10             	add    esp,0x10
c00124bc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124c1:	75 10                	jne    c00124d3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	68 23 f0 01 c0       	push   0xc001f023
c00124cb:	e8 9f dd ff ff       	call   c001026f <KePanic(char const*)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	31 d2                	xor    edx,edx
c00124d5:	50                   	push   eax
c00124d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124da:	52                   	push   edx
c00124db:	50                   	push   eax
c00124dc:	53                   	push   ebx
c00124dd:	e8 64 87 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00124e2:	5a                   	pop    edx
c00124e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124e7:	e8 cd 52 ff ff       	call   c00077b9 <malloc>
c00124ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124f4:	31 c9                	xor    ecx,ecx
c00124f6:	5e                   	pop    esi
c00124f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00124fd:	55                   	push   ebp
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	51                   	push   ecx
c0012503:	52                   	push   edx
c0012504:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012508:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001250c:	53                   	push   ebx
c001250d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012510:	83 c4 14             	add    esp,0x14
c0012513:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012517:	e8 9d 52 ff ff       	call   c00077b9 <malloc>
c001251c:	89 c6                	mov    esi,eax
c001251e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012520:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012523:	56                   	push   esi
c0012524:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012528:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001252c:	51                   	push   ecx
c001252d:	52                   	push   edx
c001252e:	53                   	push   ebx
c001252f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012536:	8b 15 40 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026140
c001253c:	83 c4 1c             	add    esp,0x1c
c001253f:	c1 e8 04             	shr    eax,0x4
c0012542:	89 04 95 c0 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda040],eax
c0012549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001254d:	31 d2                	xor    edx,edx
c001254f:	52                   	push   edx
c0012550:	50                   	push   eax
c0012551:	53                   	push   ebx
c0012552:	e8 ef 86 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012557:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012559:	31 d2                	xor    edx,edx
c001255b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001255e:	56                   	push   esi
c001255f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012563:	52                   	push   edx
c0012564:	50                   	push   eax
c0012565:	53                   	push   ebx
c0012566:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012569:	83 c4 14             	add    esp,0x14
c001256c:	53                   	push   ebx
c001256d:	e8 74 86 ff ff       	call   c000abe6 <File::close()>
c0012572:	5d                   	pop    ebp
c0012573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012577:	e8 4d 52 ff ff       	call   c00077c9 <free>
c001257c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001257f:	e8 45 52 ff ff       	call   c00077c9 <free>
c0012584:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c0012589:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001258d:	8d 50 01             	lea    edx,[eax+0x1]
c0012590:	89 0c 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],ecx
c0012597:	89 34 85 40 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fc0],esi
c001259e:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	b0 01                	mov    al,0x1
c00125a9:	83 c4 5c             	add    esp,0x5c
c00125ac:	5b                   	pop    ebx
c00125ad:	5e                   	pop    esi
c00125ae:	5f                   	pop    edi
c00125af:	5d                   	pop    ebp
c00125b0:	c3                   	ret    

c00125b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125b1:	55                   	push   ebp
c00125b2:	57                   	push   edi
c00125b3:	56                   	push   esi
c00125b4:	53                   	push   ebx
c00125b5:	81 ec 68 03 00 00    	sub    esp,0x368
c00125bb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125c2:	8b 1d 90 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026190
c00125c8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125cc:	68 14 01 00 00       	push   0x114
c00125d1:	e8 e3 51 ff ff       	call   c00077b9 <malloc>
c00125d6:	83 c4 0c             	add    esp,0xc
c00125d9:	89 c5                	mov    ebp,eax
c00125db:	53                   	push   ebx
c00125dc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125e3:	50                   	push   eax
c00125e4:	e8 df 84 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c00125e9:	5e                   	pop    esi
c00125ea:	5f                   	pop    edi
c00125eb:	6a 01                	push   0x1
c00125ed:	55                   	push   ebp
c00125ee:	e8 95 85 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c00125f3:	83 c4 10             	add    esp,0x10
c00125f6:	85 c0                	test   eax,eax
c00125f8:	0f 85 a7 06 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125fe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012606:	83 ec 0c             	sub    esp,0xc
c0012609:	6a 34                	push   0x34
c001260b:	e8 a9 51 ff ff       	call   c00077b9 <malloc>
c0012610:	5b                   	pop    ebx
c0012611:	89 c7                	mov    edi,eax
c0012613:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012617:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001261a:	53                   	push   ebx
c001261b:	57                   	push   edi
c001261c:	6a 00                	push   0x0
c001261e:	6a 34                	push   0x34
c0012620:	55                   	push   ebp
c0012621:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012624:	83 c4 20             	add    esp,0x20
c0012627:	85 c0                	test   eax,eax
c0012629:	0f 85 76 06 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001262f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012635:	0f 85 6a 06 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001263b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001263e:	85 c0                	test   eax,eax
c0012640:	0f 84 5f 06 00 00    	je     c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012646:	31 d2                	xor    edx,edx
c0012648:	51                   	push   ecx
c0012649:	52                   	push   edx
c001264a:	50                   	push   eax
c001264b:	55                   	push   ebp
c001264c:	e8 f5 85 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012651:	83 c4 10             	add    esp,0x10
c0012654:	85 c0                	test   eax,eax
c0012656:	0f 85 49 06 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265c:	83 ec 0c             	sub    esp,0xc
c001265f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012662:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012666:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001266a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001266e:	0f af c2             	imul   eax,edx
c0012671:	50                   	push   eax
c0012672:	e8 42 51 ff ff       	call   c00077b9 <malloc>
c0012677:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001267a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001267e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012681:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012685:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012689:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001268d:	0f af c2             	imul   eax,edx
c0012690:	99                   	cdq    
c0012691:	52                   	push   edx
c0012692:	50                   	push   eax
c0012693:	55                   	push   ebp
c0012694:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012697:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001269a:	83 c4 20             	add    esp,0x20
c001269d:	85 c0                	test   eax,eax
c001269f:	0f 84 00 06 00 00    	je     c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a5:	52                   	push   edx
c00126a6:	31 d2                	xor    edx,edx
c00126a8:	52                   	push   edx
c00126a9:	50                   	push   eax
c00126aa:	55                   	push   ebp
c00126ab:	e8 96 85 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00126b0:	83 c4 10             	add    esp,0x10
c00126b3:	85 c0                	test   eax,eax
c00126b5:	0f 85 ea 05 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126bb:	83 ec 0c             	sub    esp,0xc
c00126be:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126c2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126c6:	31 f6                	xor    esi,esi
c00126c8:	0f af c2             	imul   eax,edx
c00126cb:	50                   	push   eax
c00126cc:	e8 e8 50 ff ff       	call   c00077b9 <malloc>
c00126d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126df:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126e3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126e7:	0f af c2             	imul   eax,edx
c00126ea:	99                   	cdq    
c00126eb:	52                   	push   edx
c00126ec:	50                   	push   eax
c00126ed:	55                   	push   ebp
c00126ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126f1:	83 c4 20             	add    esp,0x20
c00126f4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00126f8:	0f 86 8a 00 00 00    	jbe    c0012788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00126fe:	0f b7 de             	movzx  ebx,si
c0012701:	c1 e3 05             	shl    ebx,0x5
c0012704:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012708:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001270b:	75 75                	jne    c0012782 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001270d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012710:	31 d2                	xor    edx,edx
c0012712:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012716:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001271d:	50                   	push   eax
c001271e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012721:	52                   	push   edx
c0012722:	50                   	push   eax
c0012723:	55                   	push   ebp
c0012724:	e8 1d 85 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012729:	83 c4 10             	add    esp,0x10
c001272c:	85 c0                	test   eax,eax
c001272e:	0f 85 71 05 00 00    	jne    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012734:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001273b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001273e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012742:	31 d2                	xor    edx,edx
c0012744:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001274f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012756:	50                   	push   eax
c0012757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001275b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275f:	52                   	push   edx
c0012760:	50                   	push   eax
c0012761:	55                   	push   ebp
c0012762:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012765:	83 c4 1c             	add    esp,0x1c
c0012768:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001276b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001276e:	50                   	push   eax
c001276f:	6a 00                	push   0x0
c0012771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012775:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012779:	50                   	push   eax
c001277a:	e8 51 dd fe ff       	call   c00004d0 <memset>
c001277f:	83 c4 10             	add    esp,0x10
c0012782:	46                   	inc    esi
c0012783:	e9 6c ff ff ff       	jmp    c00126f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012788:	53                   	push   ebx
c0012789:	31 db                	xor    ebx,ebx
c001278b:	68 00 01 00 00       	push   0x100
c0012790:	6a 00                	push   0x0
c0012792:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012796:	50                   	push   eax
c0012797:	e8 34 dd fe ff       	call   c00004d0 <memset>
c001279c:	83 c4 0c             	add    esp,0xc
c001279f:	68 00 01 00 00       	push   0x100
c00127a4:	6a 00                	push   0x0
c00127a6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127ad:	50                   	push   eax
c00127ae:	e8 1d dd fe ff       	call   c00004d0 <memset>
c00127b3:	83 c4 10             	add    esp,0x10
c00127b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127be:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127c6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127de:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127e2:	0f 86 30 01 00 00    	jbe    c0012918 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127e8:	0f b7 f3             	movzx  esi,bx
c00127eb:	6b f6 28             	imul   esi,esi,0x28
c00127ee:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00127f2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f9:	52                   	push   edx
c00127fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00127fe:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012802:	8b 06                	mov    eax,DWORD PTR [esi]
c0012804:	6b d2 28             	imul   edx,edx,0x28
c0012807:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001280b:	31 d2                	xor    edx,edx
c001280d:	52                   	push   edx
c001280e:	50                   	push   eax
c001280f:	55                   	push   ebp
c0012810:	e8 31 84 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012815:	83 c4 0c             	add    esp,0xc
c0012818:	6a 20                	push   0x20
c001281a:	6a 00                	push   0x0
c001281c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012823:	51                   	push   ecx
c0012824:	e8 a7 dc fe ff       	call   c00004d0 <memset>
c0012829:	59                   	pop    ecx
c001282a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001282d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012831:	52                   	push   edx
c0012832:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012839:	51                   	push   ecx
c001283a:	6a 00                	push   0x0
c001283c:	6a 1f                	push   0x1f
c001283e:	55                   	push   ebp
c001283f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012842:	83 c4 1c             	add    esp,0x1c
c0012845:	6a 09                	push   0x9
c0012847:	68 3d f0 01 c0       	push   0xc001f03d
c001284c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012853:	51                   	push   ecx
c0012854:	e8 37 db fe ff       	call   c0000390 <memcmp>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	85 c0                	test   eax,eax
c001285e:	75 21                	jne    c0012881 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012864:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012868:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001286c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012870:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012873:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001287a:	89 d0                	mov    eax,edx
c001287c:	40                   	inc    eax
c001287d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012881:	50                   	push   eax
c0012882:	6a 09                	push   0x9
c0012884:	68 47 f0 01 c0       	push   0xc001f047
c0012889:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012890:	50                   	push   eax
c0012891:	e8 fa da fe ff       	call   c0000390 <memcmp>
c0012896:	83 c4 10             	add    esp,0x10
c0012899:	85 c0                	test   eax,eax
c001289b:	75 21                	jne    c00128be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001289d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128a5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128b0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128b7:	89 d0                	mov    eax,edx
c00128b9:	40                   	inc    eax
c00128ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128be:	50                   	push   eax
c00128bf:	50                   	push   eax
c00128c0:	68 13 f0 01 c0       	push   0xc001f013
c00128c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128cc:	50                   	push   eax
c00128cd:	e8 0e de fe ff       	call   c00006e0 <strcmp>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	85 c0                	test   eax,eax
c00128d7:	75 0f                	jne    c00128e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128e8:	50                   	push   eax
c00128e9:	50                   	push   eax
c00128ea:	68 1b f0 01 c0       	push   0xc001f01b
c00128ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f6:	50                   	push   eax
c00128f7:	e8 e4 dd fe ff       	call   c00006e0 <strcmp>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	85 c0                	test   eax,eax
c0012901:	75 0f                	jne    c0012912 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012903:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001290a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001290e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012912:	43                   	inc    ebx
c0012913:	e9 c6 fe ff ff       	jmp    c00127de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012918:	31 d2                	xor    edx,edx
c001291a:	50                   	push   eax
c001291b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001291f:	52                   	push   edx
c0012920:	50                   	push   eax
c0012921:	55                   	push   ebp
c0012922:	e8 1f 83 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012927:	58                   	pop    eax
c0012928:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001292c:	e8 88 4e ff ff       	call   c00077b9 <malloc>
c0012931:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012934:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012938:	31 d2                	xor    edx,edx
c001293a:	58                   	pop    eax
c001293b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001293f:	53                   	push   ebx
c0012940:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012944:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012948:	52                   	push   edx
c0012949:	50                   	push   eax
c001294a:	55                   	push   ebp
c001294b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001294e:	83 c4 14             	add    esp,0x14
c0012951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012955:	e8 5f 4e ff ff       	call   c00077b9 <malloc>
c001295a:	31 d2                	xor    edx,edx
c001295c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012960:	83 c4 0c             	add    esp,0xc
c0012963:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012967:	52                   	push   edx
c0012968:	50                   	push   eax
c0012969:	55                   	push   ebp
c001296a:	e8 d7 82 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c001296f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012972:	31 d2                	xor    edx,edx
c0012974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012977:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001297f:	52                   	push   edx
c0012980:	50                   	push   eax
c0012981:	55                   	push   ebp
c0012982:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012985:	83 c4 20             	add    esp,0x20
c0012988:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012990:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012994:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012998:	0f 84 0b 03 00 00    	je     c0012ca9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001299e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129a5:	31 d2                	xor    edx,edx
c00129a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ab:	c1 e8 03             	shr    eax,0x3
c00129ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129b2:	51                   	push   ecx
c00129b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129b7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129bb:	52                   	push   edx
c00129bc:	50                   	push   eax
c00129bd:	55                   	push   ebp
c00129be:	e8 83 82 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00129c3:	5b                   	pop    ebx
c00129c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129c8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129cf:	e8 e5 4d ff ff       	call   c00077b9 <malloc>
c00129d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129db:	31 d2                	xor    edx,edx
c00129dd:	5e                   	pop    esi
c00129de:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129e2:	50                   	push   eax
c00129e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129eb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00129f2:	52                   	push   edx
c00129f3:	50                   	push   eax
c00129f4:	55                   	push   ebp
c00129f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129f8:	83 c4 20             	add    esp,0x20
c00129fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a07:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a0b:	0f 8d 7c 02 00 00    	jge    c0012c8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a19:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a1e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a21:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a29:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a2d:	89 d8                	mov    eax,ebx
c0012a2f:	c1 e8 08             	shr    eax,0x8
c0012a32:	89 c6                	mov    esi,eax
c0012a34:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a38:	c1 e6 04             	shl    esi,0x4
c0012a3b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a3f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a42:	85 d2                	test   edx,edx
c0012a44:	0f 85 bf 00 00 00    	jne    c0012b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a4a:	83 ec 0c             	sub    esp,0xc
c0012a4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a51:	03 06                	add    eax,DWORD PTR [esi]
c0012a53:	50                   	push   eax
c0012a54:	e8 4b f8 ff ff       	call   c00122a4 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a59:	83 c4 10             	add    esp,0x10
c0012a5c:	89 c2                	mov    edx,eax
c0012a5e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a63:	85 c0                	test   eax,eax
c0012a65:	0f 85 9e 00 00 00    	jne    c0012b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a6b:	83 ec 0c             	sub    esp,0xc
c0012a6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a72:	03 06                	add    eax,DWORD PTR [esi]
c0012a74:	50                   	push   eax
c0012a75:	e8 46 d9 ff ff       	call   c00103c0 <KeResolveCompatibilitySymbol(char*)>
c0012a7a:	83 c4 10             	add    esp,0x10
c0012a7d:	89 c2                	mov    edx,eax
c0012a7f:	85 c0                	test   eax,eax
c0012a81:	0f 85 82 00 00 00    	jne    c0012b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a87:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a8b:	50                   	push   eax
c0012a8c:	50                   	push   eax
c0012a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a91:	03 06                	add    eax,DWORD PTR [esi]
c0012a93:	50                   	push   eax
c0012a94:	68 51 f0 01 c0       	push   0xc001f051
c0012a99:	e8 b4 7a ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012a9e:	58                   	pop    eax
c0012a9f:	5a                   	pop    edx
c0012aa0:	68 6b f0 01 c0       	push   0xc001f06b
c0012aa5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012aac:	50                   	push   eax
c0012aad:	e8 4e db fe ff       	call   c0000600 <strcpy>
c0012ab2:	59                   	pop    ecx
c0012ab3:	58                   	pop    eax
c0012ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab8:	03 06                	add    eax,DWORD PTR [esi]
c0012aba:	50                   	push   eax
c0012abb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac2:	50                   	push   eax
c0012ac3:	e8 f8 dc fe ff       	call   c00007c0 <strcat>
c0012ac8:	58                   	pop    eax
c0012ac9:	5a                   	pop    edx
c0012aca:	68 01 f1 01 c0       	push   0xc001f101
c0012acf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad6:	50                   	push   eax
c0012ad7:	e8 e4 dc fe ff       	call   c00007c0 <strcat>
c0012adc:	83 c4 10             	add    esp,0x10
c0012adf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ae4:	0f 84 5d 01 00 00    	je     c0012c47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af4:	50                   	push   eax
c0012af5:	e8 75 d7 ff ff       	call   c001026f <KePanic(char const*)>
c0012afa:	83 c4 10             	add    esp,0x10
c0012afd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b05:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b09:	80 fb 01             	cmp    bl,0x1
c0012b0c:	0f 85 88 00 00 00    	jne    c0012b9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b12:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b19:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b1d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b21:	01 ce                	add    esi,ecx
c0012b23:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b29:	0f 94 c0             	sete   al
c0012b2c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b32:	0f 94 c3             	sete   bl
c0012b35:	09 c3                	or     ebx,eax
c0012b37:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b39:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b3e:	74 41                	je     c0012b81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b40:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b43:	84 db                	test   bl,bl
c0012b45:	75 15                	jne    c0012b5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b47:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b4b:	66 83 f8 0c          	cmp    ax,0xc
c0012b4f:	76 05                	jbe    c0012b56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b51:	b8 0c 00 00 00       	mov    eax,0xc
c0012b56:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b5a:	76 37                	jbe    c0012b93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b5c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b60:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b65:	0f 84 dc 00 00 00    	je     c0012c47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	68 82 f0 01 c0       	push   0xc001f082
c0012b73:	e8 f7 d6 ff ff       	call   c001026f <KePanic(char const*)>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b7f:	eb 12                	jmp    c0012b93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b81:	01 c1                	add    ecx,eax
c0012b83:	84 db                	test   bl,bl
c0012b85:	75 0c                	jne    c0012b93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b87:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b8b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b8f:	77 02                	ja     c0012b93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b91:	01 d1                	add    ecx,edx
c0012b93:	89 0e                	mov    DWORD PTR [esi],ecx
c0012b95:	e9 ea 00 00 00       	jmp    c0012c84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012b9a:	80 fb 02             	cmp    bl,0x2
c0012b9d:	75 7c                	jne    c0012c1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012b9f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ba6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012baa:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bae:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bb4:	74 20                	je     c0012bd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bb6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bbc:	74 18                	je     c0012bd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bbe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bc2:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bc7:	66 83 f8 0e          	cmp    ax,0xe
c0012bcb:	77 03                	ja     c0012bd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bcd:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bd0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bd4:	76 1f                	jbe    c0012bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012bda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bdf:	74 66                	je     c0012c47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	68 9e f0 01 c0       	push   0xc001f09e
c0012be9:	e8 81 d6 ff ff       	call   c001026f <KePanic(char const*)>
c0012bee:	83 c4 10             	add    esp,0x10
c0012bf1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bf5:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bf7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012bfc:	74 13                	je     c0012c11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012bfe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c02:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c09:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c0d:	01 c8                	add    eax,ecx
c0012c0f:	eb 04                	jmp    c0012c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c11:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c15:	01 c2                	add    edx,eax
c0012c17:	89 16                	mov    DWORD PTR [esi],edx
c0012c19:	eb 69                	jmp    c0012c84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c1b:	0f b6 db             	movzx  ebx,bl
c0012c1e:	50                   	push   eax
c0012c1f:	50                   	push   eax
c0012c20:	53                   	push   ebx
c0012c21:	68 ba f0 01 c0       	push   0xc001f0ba
c0012c26:	e8 27 79 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c33:	74 12                	je     c0012c47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	68 c5 f0 01 c0       	push   0xc001f0c5
c0012c3d:	e8 2d d6 ff ff       	call   c001026f <KePanic(char const*)>
c0012c42:	83 c4 10             	add    esp,0x10
c0012c45:	eb 3d                	jmp    c0012c84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c47:	83 ec 0c             	sub    esp,0xc
c0012c4a:	55                   	push   ebp
c0012c4b:	e8 96 7f ff ff       	call   c000abe6 <File::close()>
c0012c50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c59:	59                   	pop    ecx
c0012c5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c5e:	e8 66 4b ff ff       	call   c00077c9 <free>
c0012c63:	5b                   	pop    ebx
c0012c64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c68:	e8 5c 4b ff ff       	call   c00077c9 <free>
c0012c6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c70:	e8 54 4b ff ff       	call   c00077c9 <free>
c0012c75:	5e                   	pop    esi
c0012c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7a:	e8 4a 4b ff ff       	call   c00077c9 <free>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	eb 21                	jmp    c0012ca5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c84:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c88:	e9 76 fd ff ff       	jmp    c0012a03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c8d:	83 ec 0c             	sub    esp,0xc
c0012c90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c94:	e8 30 4b ff ff       	call   c00077c9 <free>
c0012c99:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	e9 eb fc ff ff       	jmp    c0012990 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012ca5:	31 c0                	xor    eax,eax
c0012ca7:	eb 33                	jmp    c0012cdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	55                   	push   ebp
c0012cad:	e8 34 7f ff ff       	call   c000abe6 <File::close()>
c0012cb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cbb:	58                   	pop    eax
c0012cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc0:	e8 04 4b ff ff       	call   c00077c9 <free>
c0012cc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cc8:	e8 fc 4a ff ff       	call   c00077c9 <free>
c0012ccd:	5a                   	pop    edx
c0012cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd2:	e8 f2 4a ff ff       	call   c00077c9 <free>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	b0 01                	mov    al,0x1
c0012cdc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ce2:	5b                   	pop    ebx
c0012ce3:	5e                   	pop    esi
c0012ce4:	5f                   	pop    edi
c0012ce5:	5d                   	pop    ebp
c0012ce6:	c3                   	ret    

c0012ce7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012ce7:	56                   	push   esi
c0012ce8:	31 d2                	xor    edx,edx
c0012cea:	53                   	push   ebx
c0012ceb:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012cf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cf5:	39 d3                	cmp    ebx,edx
c0012cf7:	7e 1b                	jle    c0012d14 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012cf9:	8b 04 95 c0 5b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda440]
c0012d00:	39 c8                	cmp    eax,ecx
c0012d02:	77 0d                	ja     c0012d11 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d04:	8b 34 95 c0 59 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda640]
c0012d0b:	01 c6                	add    esi,eax
c0012d0d:	39 ce                	cmp    esi,ecx
c0012d0f:	77 05                	ja     c0012d16 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d11:	42                   	inc    edx
c0012d12:	eb e1                	jmp    c0012cf5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d14:	31 c0                	xor    eax,eax
c0012d16:	5b                   	pop    ebx
c0012d17:	5e                   	pop    esi
c0012d18:	c3                   	ret    

c0012d19 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d19:	53                   	push   ebx
c0012d1a:	31 c0                	xor    eax,eax
c0012d1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d20:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d26:	39 c3                	cmp    ebx,eax
c0012d28:	7e 22                	jle    c0012d4c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d2a:	8b 14 85 c0 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda440]
c0012d31:	39 ca                	cmp    edx,ecx
c0012d33:	77 14                	ja     c0012d49 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d35:	03 14 85 c0 59 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda640]
c0012d3c:	39 ca                	cmp    edx,ecx
c0012d3e:	76 09                	jbe    c0012d49 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d40:	8b 04 85 c0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda240]
c0012d47:	eb 05                	jmp    c0012d4e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d49:	40                   	inc    eax
c0012d4a:	eb da                	jmp    c0012d26 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d4c:	31 c0                	xor    eax,eax
c0012d4e:	5b                   	pop    ebx
c0012d4f:	c3                   	ret    

c0012d50 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d50:	53                   	push   ebx
c0012d51:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d55:	53                   	push   ebx
c0012d56:	e8 8c ff ff ff       	call   c0012ce7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d5b:	5a                   	pop    edx
c0012d5c:	31 d2                	xor    edx,edx
c0012d5e:	85 c0                	test   eax,eax
c0012d60:	74 04                	je     c0012d66 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d62:	89 da                	mov    edx,ebx
c0012d64:	29 c2                	sub    edx,eax
c0012d66:	89 d0                	mov    eax,edx
c0012d68:	5b                   	pop    ebx
c0012d69:	c3                   	ret    

c0012d6a <Thr::loadDLL(char const*, bool)>:
c0012d6a:	55                   	push   ebp
c0012d6b:	57                   	push   edi
c0012d6c:	56                   	push   esi
c0012d6d:	53                   	push   ebx
c0012d6e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d74:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d7b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d82:	56                   	push   esi
c0012d83:	68 dd f0 01 c0       	push   0xc001f0dd
c0012d88:	e8 c5 77 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012d8d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d94:	e8 20 4a ff ff       	call   c00077b9 <malloc>
c0012d99:	83 c4 0c             	add    esp,0xc
c0012d9c:	89 c3                	mov    ebx,eax
c0012d9e:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0012da4:	56                   	push   esi
c0012da5:	50                   	push   eax
c0012da6:	e8 1d 7d ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	85 db                	test   ebx,ebx
c0012db0:	75 3c                	jne    c0012dee <Thr::loadDLL(char const*, bool)+0x84>
c0012db2:	89 f8                	mov    eax,edi
c0012db4:	84 c0                	test   al,al
c0012db6:	0f 84 d2 01 00 00    	je     c0012f8e <Thr::loadDLL(char const*, bool)+0x224>
c0012dbc:	55                   	push   ebp
c0012dbd:	55                   	push   ebp
c0012dbe:	68 ee f0 01 c0       	push   0xc001f0ee
c0012dc3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dc7:	55                   	push   ebp
c0012dc8:	e8 33 d8 fe ff       	call   c0000600 <strcpy>
c0012dcd:	58                   	pop    eax
c0012dce:	5a                   	pop    edx
c0012dcf:	56                   	push   esi
c0012dd0:	55                   	push   ebp
c0012dd1:	e8 ea d9 fe ff       	call   c00007c0 <strcat>
c0012dd6:	59                   	pop    ecx
c0012dd7:	58                   	pop    eax
c0012dd8:	68 01 f1 01 c0       	push   0xc001f101
c0012ddd:	55                   	push   ebp
c0012dde:	e8 dd d9 fe ff       	call   c00007c0 <strcat>
c0012de3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012de6:	e8 84 d4 ff ff       	call   c001026f <KePanic(char const*)>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	51                   	push   ecx
c0012def:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012df3:	50                   	push   eax
c0012df4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012df8:	50                   	push   eax
c0012df9:	53                   	push   ebx
c0012dfa:	e8 35 80 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	85 db                	test   ebx,ebx
c0012e04:	74 0c                	je     c0012e12 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e06:	83 ec 0c             	sub    esp,0xc
c0012e09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e0b:	53                   	push   ebx
c0012e0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e17:	75 0a                	jne    c0012e23 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e1d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e21:	75 3c                	jne    c0012e5f <Thr::loadDLL(char const*, bool)+0xf5>
c0012e23:	89 f8                	mov    eax,edi
c0012e25:	84 c0                	test   al,al
c0012e27:	0f 84 49 01 00 00    	je     c0012f76 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e2d:	51                   	push   ecx
c0012e2e:	51                   	push   ecx
c0012e2f:	68 ee f0 01 c0       	push   0xc001f0ee
c0012e34:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e38:	53                   	push   ebx
c0012e39:	e8 c2 d7 fe ff       	call   c0000600 <strcpy>
c0012e3e:	5d                   	pop    ebp
c0012e3f:	58                   	pop    eax
c0012e40:	56                   	push   esi
c0012e41:	53                   	push   ebx
c0012e42:	e8 79 d9 fe ff       	call   c00007c0 <strcat>
c0012e47:	58                   	pop    eax
c0012e48:	5a                   	pop    edx
c0012e49:	68 01 f1 01 c0       	push   0xc001f101
c0012e4e:	53                   	push   ebx
c0012e4f:	e8 6c d9 fe ff       	call   c00007c0 <strcat>
c0012e54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e57:	e8 13 d4 ff ff       	call   c001026f <KePanic(char const*)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	52                   	push   edx
c0012e60:	6a 03                	push   0x3
c0012e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e6a:	05 ff 0f 00 00       	add    eax,0xfff
c0012e6f:	83 d2 00             	adc    edx,0x0
c0012e72:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e76:	50                   	push   eax
c0012e77:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012e7d:	e8 da 6b ff ff       	call   c0009a5c <VAS::allocatePages(int, int)>
c0012e82:	59                   	pop    ecx
c0012e83:	89 c3                	mov    ebx,eax
c0012e85:	5d                   	pop    ebp
c0012e86:	50                   	push   eax
c0012e87:	68 36 de 01 c0       	push   0xc001de36
c0012e8c:	e8 c1 76 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012e91:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e94:	e8 a7 d6 fe ff       	call   c0000540 <strlen>
c0012e99:	8b 2d a0 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259a0
c0012e9f:	40                   	inc    eax
c0012ea0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea3:	e8 11 49 ff ff       	call   c00077b9 <malloc>
c0012ea8:	89 04 ad c0 5d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffda240],eax
c0012eaf:	58                   	pop    eax
c0012eb0:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012eb5:	5a                   	pop    edx
c0012eb6:	56                   	push   esi
c0012eb7:	ff 34 85 c0 5d 02 c0 	push   DWORD PTR [eax*4-0x3ffda240]
c0012ebe:	e8 3d d7 fe ff       	call   c0000600 <strcpy>
c0012ec3:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012ec8:	8d 50 01             	lea    edx,[eax+0x1]
c0012ecb:	89 1c 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],ebx
c0012ed2:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0012ed8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012edc:	83 c4 0c             	add    esp,0xc
c0012edf:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0012ee6:	6a 01                	push   0x1
c0012ee8:	53                   	push   ebx
c0012ee9:	56                   	push   esi
c0012eea:	e8 c2 f6 ff ff       	call   c00125b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012eef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012efb:	0f 85 89 00 00 00    	jne    c0012f8a <Thr::loadDLL(char const*, bool)+0x220>
c0012f01:	89 f8                	mov    eax,edi
c0012f03:	84 c0                	test   al,al
c0012f05:	74 73                	je     c0012f7a <Thr::loadDLL(char const*, bool)+0x210>
c0012f07:	83 ec 0c             	sub    esp,0xc
c0012f0a:	68 03 f1 01 c0       	push   0xc001f103
c0012f0f:	e8 5b d3 ff ff       	call   c001026f <KePanic(char const*)>
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	eb 61                	jmp    c0012f7a <Thr::loadDLL(char const*, bool)+0x210>
c0012f19:	50                   	push   eax
c0012f1a:	50                   	push   eax
c0012f1b:	89 e8                	mov    eax,ebp
c0012f1d:	c1 e0 0c             	shl    eax,0xc
c0012f20:	01 d8                	add    eax,ebx
c0012f22:	50                   	push   eax
c0012f23:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012f29:	e8 3c 66 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f33:	a8 60                	test   al,0x60
c0012f35:	75 11                	jne    c0012f48 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f3f:	50                   	push   eax
c0012f40:	e8 ee 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f45:	83 c4 10             	add    esp,0x10
c0012f48:	45                   	inc    ebp
c0012f49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f51:	05 ff 0f 00 00       	add    eax,0xfff
c0012f56:	bf 00 00 00 00       	mov    edi,0x0
c0012f5b:	83 d2 00             	adc    edx,0x0
c0012f5e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f62:	c1 ea 0c             	shr    edx,0xc
c0012f65:	39 c5                	cmp    ebp,eax
c0012f67:	89 d1                	mov    ecx,edx
c0012f69:	89 f8                	mov    eax,edi
c0012f6b:	19 c8                	sbb    eax,ecx
c0012f6d:	72 aa                	jb     c0012f19 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f6f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f74:	75 18                	jne    c0012f8e <Thr::loadDLL(char const*, bool)+0x224>
c0012f76:	31 db                	xor    ebx,ebx
c0012f78:	eb 14                	jmp    c0012f8e <Thr::loadDLL(char const*, bool)+0x224>
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	68 22 f1 01 c0       	push   0xc001f122
c0012f82:	e8 e8 d2 ff ff       	call   c001026f <KePanic(char const*)>
c0012f87:	83 c4 10             	add    esp,0x10
c0012f8a:	31 ed                	xor    ebp,ebp
c0012f8c:	eb bb                	jmp    c0012f49 <Thr::loadDLL(char const*, bool)+0x1df>
c0012f8e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f94:	89 d8                	mov    eax,ebx
c0012f96:	5b                   	pop    ebx
c0012f97:	5e                   	pop    esi
c0012f98:	5f                   	pop    edi
c0012f99:	5d                   	pop    ebp
c0012f9a:	c3                   	ret    

c0012f9b <Thr::executeDLL(unsigned long, void*)>:
c0012f9b:	56                   	push   esi
c0012f9c:	53                   	push   ebx
c0012f9d:	52                   	push   edx
c0012f9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fa6:	85 db                	test   ebx,ebx
c0012fa8:	75 10                	jne    c0012fba <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	68 3e f1 01 c0       	push   0xc001f13e
c0012fb2:	e8 b8 d2 ff ff       	call   c001026f <KePanic(char const*)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	50                   	push   eax
c0012fbb:	50                   	push   eax
c0012fbc:	53                   	push   ebx
c0012fbd:	68 68 f1 01 c0       	push   0xc001f168
c0012fc2:	e8 8b 75 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012fc7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fcb:	89 d8                	mov    eax,ebx
c0012fcd:	83 c4 14             	add    esp,0x14
c0012fd0:	5b                   	pop    ebx
c0012fd1:	5e                   	pop    esi
c0012fd2:	ff e0                	jmp    eax

c0012fd4 <userModeEntryPoint(void*)>:
c0012fd4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012fd9:	48                   	dec    eax
c0012fda:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0012fdf:	75 03                	jne    c0012fe4 <userModeEntryPoint(void*)+0x10>
c0012fe1:	fb                   	sti    
c0012fe2:	66 90                	xchg   ax,ax
c0012fe4:	fb                   	sti    
c0012fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fed:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ff7:	e9 43 d2 fe ff       	jmp    c000023f <goToUsermode>

c0012ffc <changeTSS>:
c0012ffc:	83 ec 14             	sub    esp,0x14
c0012fff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013004:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013007:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001300c:	c1 e2 15             	shl    edx,0x15
c001300f:	29 d0                	sub    eax,edx
c0013011:	50                   	push   eax
c0013012:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0013017:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001301d:	05 7c 11 00 00       	add    eax,0x117c
c0013022:	50                   	push   eax
c0013023:	e8 c0 5b ff ff       	call   c0008be8 <TSS::setESP(unsigned long)>
c0013028:	83 c4 1c             	add    esp,0x1c
c001302b:	c3                   	ret    

c001302c <switchToThread(ThreadControlBlock*)>:
c001302c:	57                   	push   edi
c001302d:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013032:	56                   	push   esi
c0013033:	85 c0                	test   eax,eax
c0013035:	53                   	push   ebx
c0013036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001303a:	0f 85 90 00 00 00    	jne    c00130d0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013040:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013043:	80 fa ff             	cmp    dl,0xff
c0013046:	0f 84 80 00 00 00    	je     c00130cc <switchToThread(ThreadControlBlock*)+0xa0>
c001304c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013052:	b8 00 04 00 00       	mov    eax,0x400
c0013057:	29 d0                	sub    eax,edx
c0013059:	d1 f8                	sar    eax,1
c001305b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001305e:	66 90                	xchg   ax,ax
c0013060:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013063:	e8 1d 26 00 00       	call   c0015685 <HalQueryPerformanceCounter()>
c0013068:	a3 a8 61 02 c0       	mov    ds:0xc00261a8,eax
c001306d:	89 15 ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,edx
c0013073:	89 c6                	mov    esi,eax
c0013075:	89 d7                	mov    edi,edx
c0013077:	2b 35 98 61 02 c0    	sub    esi,DWORD PTR ds:0xc0026198
c001307d:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c0013082:	1b 3d 9c 61 02 c0    	sbb    edi,DWORD PTR ds:0xc002619c
c0013088:	89 35 a0 61 02 c0    	mov    DWORD PTR ds:0xc00261a0,esi
c001308e:	89 3d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,edi
c0013094:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001309a:	89 15 9c 61 02 c0    	mov    DWORD PTR ds:0xc002619c,edx
c00130a0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130a3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130a6:	01 c6                	add    esi,eax
c00130a8:	11 d7                	adc    edi,edx
c00130aa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130ad:	83 ec 0c             	sub    esp,0xc
c00130b0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130b3:	53                   	push   ebx
c00130b4:	e8 be d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130b9:	0f 20 c0             	mov    eax,cr0
c00130bc:	83 c8 08             	or     eax,0x8
c00130bf:	0f 22 c0             	mov    cr0,eax
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	5b                   	pop    ebx
c00130c6:	5e                   	pop    esi
c00130c7:	5f                   	pop    edi
c00130c8:	c3                   	ret    
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	31 c0                	xor    eax,eax
c00130ce:	eb 90                	jmp    c0013060 <switchToThread(ThreadControlBlock*)+0x34>
c00130d0:	5b                   	pop    ebx
c00130d1:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c00130db:	5e                   	pop    esi
c00130dc:	5f                   	pop    edi
c00130dd:	c3                   	ret    
c00130de:	66 90                	xchg   ax,ax

c00130e0 <Process::addArgs(char**)>:
c00130e0:	57                   	push   edi
c00130e1:	56                   	push   esi
c00130e2:	53                   	push   ebx
c00130e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130eb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00130f5:	85 ff                	test   edi,edi
c00130f7:	74 43                	je     c001313c <Process::addArgs(char**)+0x5c>
c00130f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 3d                	je     c001313c <Process::addArgs(char**)+0x5c>
c00130ff:	31 db                	xor    ebx,ebx
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	50                   	push   eax
c0013108:	e8 33 d4 fe ff       	call   c0000540 <strlen>
c001310d:	40                   	inc    eax
c001310e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013111:	e8 a3 46 ff ff       	call   c00077b9 <malloc>
c0013116:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001311d:	5a                   	pop    edx
c001311e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013121:	59                   	pop    ecx
c0013122:	43                   	inc    ebx
c0013123:	52                   	push   edx
c0013124:	50                   	push   eax
c0013125:	e8 d6 d4 fe ff       	call   c0000600 <strcpy>
c001312a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013136:	85 c0                	test   eax,eax
c0013138:	75 ca                	jne    c0013104 <Process::addArgs(char**)+0x24>
c001313a:	66 90                	xchg   ax,ax
c001313c:	5b                   	pop    ebx
c001313d:	5e                   	pop    esi
c001313e:	5f                   	pop    edi
c001313f:	c3                   	ret    

c0013140 <Process::Process(char const*, Process*, char**)>:
c0013140:	56                   	push   esi
c0013141:	53                   	push   ebx
c0013142:	83 ec 14             	sub    esp,0x14
c0013145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013149:	05 0c 02 00 00       	add    eax,0x20c
c001314e:	bb 07 00 00 00       	mov    ebx,0x7
c0013153:	89 c6                	mov    esi,eax
c0013155:	8d 76 00             	lea    esi,[esi+0x0]
c0013158:	85 db                	test   ebx,ebx
c001315a:	78 14                	js     c0013170 <Process::Process(char const*, Process*, char**)+0x30>
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	56                   	push   esi
c0013160:	e8 a7 9f 00 00       	call   c001d10c <ThreadControlBlock::ThreadControlBlock()>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	83 c6 5f             	add    esi,0x5f
c001316b:	4b                   	dec    ebx
c001316c:	eb ea                	jmp    c0013158 <Process::Process(char const*, Process*, char**)+0x18>
c001316e:	66 90                	xchg   ax,ax
c0013170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013174:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001317b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001317f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001318d:	e8 d2 ce ff ff       	call   c0010064 <Krnl::newProcessEnv(Process*)>
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	89 c2                	mov    edx,eax
c0013197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131ae:	a1 ec 00 02 c0       	mov    eax,ds:0xc00200ec
c00131b3:	8d 50 01             	lea    edx,[eax+0x1]
c00131b6:	89 15 ec 00 02 c0    	mov    DWORD PTR ds:0xc00200ec,edx
c00131bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131c0:	89 02                	mov    DWORD PTR [edx],eax
c00131c2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131d1:	e8 e3 45 ff ff       	call   c00077b9 <malloc>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	89 c3                	mov    ebx,eax
c00131db:	83 ec 08             	sub    esp,0x8
c00131de:	6a 00                	push   0x0
c00131e0:	53                   	push   ebx
c00131e1:	e8 20 6c ff ff       	call   c0009e06 <VAS::VAS(bool)>
c00131e6:	83 c4 10             	add    esp,0x10
c00131e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131ed:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00131f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013205:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013209:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001320f:	e8 c6 d3 ff ff       	call   c00105da <KeInitSignals()>
c0013214:	89 c2                	mov    edx,eax
c0013216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013224:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001322a:	85 c0                	test   eax,eax
c001322c:	74 42                	je     c0013270 <Process::Process(char const*, Process*, char**)+0x130>
c001322e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013232:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013238:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001323e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013242:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013252:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325c:	05 0c 01 00 00       	add    eax,0x10c
c0013261:	83 ec 08             	sub    esp,0x8
c0013264:	52                   	push   edx
c0013265:	50                   	push   eax
c0013266:	e8 95 d3 fe ff       	call   c0000600 <strcpy>
c001326b:	83 c4 10             	add    esp,0x10
c001326e:	eb 64                	jmp    c00132d4 <Process::Process(char const*, Process*, char**)+0x194>
c0013270:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0013278:	83 ec 0c             	sub    esp,0xc
c001327b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001327f:	e8 35 45 ff ff       	call   c00077b9 <malloc>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	89 c3                	mov    ebx,eax
c0013289:	83 ec 08             	sub    esp,0x8
c001328c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013290:	53                   	push   ebx
c0013291:	e8 64 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001329d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132ad:	83 ec 0c             	sub    esp,0xc
c00132b0:	50                   	push   eax
c00132b1:	e8 e4 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132bd:	05 0c 01 00 00       	add    eax,0x10c
c00132c2:	83 ec 08             	sub    esp,0x8
c00132c5:	68 87 f1 01 c0       	push   0xc001f187
c00132ca:	50                   	push   eax
c00132cb:	e8 30 d3 fe ff       	call   c0000600 <strcpy>
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	90                   	nop
c00132d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d8:	83 c0 0c             	add    eax,0xc
c00132db:	83 ec 08             	sub    esp,0x8
c00132de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132e2:	50                   	push   eax
c00132e3:	e8 18 d3 fe ff       	call   c0000600 <strcpy>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	83 ec 08             	sub    esp,0x8
c00132ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f6:	e8 e5 fd ff ff       	call   c00130e0 <Process::addArgs(char**)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	83 ec 08             	sub    esp,0x8
c0013301:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013309:	e8 6d ed ff ff       	call   c001207b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013315:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013319:	83 f0 01             	xor    eax,0x1
c001331c:	88 c2                	mov    dl,al
c001331e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013322:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013328:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001332c:	25 ff 00 00 00       	and    eax,0xff
c0013331:	83 ec 08             	sub    esp,0x8
c0013334:	50                   	push   eax
c0013335:	68 e0 f1 01 c0       	push   0xc001f1e0
c001333a:	e8 13 72 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001333f:	83 c4 10             	add    esp,0x10
c0013342:	90                   	nop
c0013343:	83 c4 14             	add    esp,0x14
c0013346:	5b                   	pop    ebx
c0013347:	5e                   	pop    esi
c0013348:	c3                   	ret    
c0013349:	90                   	nop
c001334a:	66 90                	xchg   ax,ax

c001334c <Process::Process(bool, char const*, Process*, char**)>:
c001334c:	56                   	push   esi
c001334d:	53                   	push   ebx
c001334e:	83 ec 24             	sub    esp,0x24
c0013351:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013355:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001335d:	05 0c 02 00 00       	add    eax,0x20c
c0013362:	bb 07 00 00 00       	mov    ebx,0x7
c0013367:	89 c6                	mov    esi,eax
c0013369:	8d 76 00             	lea    esi,[esi+0x0]
c001336c:	85 db                	test   ebx,ebx
c001336e:	78 14                	js     c0013384 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	56                   	push   esi
c0013374:	e8 93 9d 00 00       	call   c001d10c <ThreadControlBlock::ThreadControlBlock()>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	83 c6 5f             	add    esi,0x5f
c001337f:	4b                   	dec    ebx
c0013380:	eb ea                	jmp    c001336c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013382:	66 90                	xchg   ax,ax
c0013384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013388:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001338f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013393:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001339a:	83 ec 0c             	sub    esp,0xc
c001339d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133a1:	e8 be cc ff ff       	call   c0010064 <Krnl::newProcessEnv(Process*)>
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	89 c2                	mov    edx,eax
c00133ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133af:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133b9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133c2:	a1 ec 00 02 c0       	mov    eax,ds:0xc00200ec
c00133c7:	8d 50 01             	lea    edx,[eax+0x1]
c00133ca:	89 15 ec 00 02 c0    	mov    DWORD PTR ds:0xc00200ec,edx
c00133d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133d4:	89 02                	mov    DWORD PTR [edx],eax
c00133d6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133e5:	e8 cf 43 ff ff       	call   c00077b9 <malloc>
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	89 c3                	mov    ebx,eax
c00133ef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00133f3:	25 ff 00 00 00       	and    eax,0xff
c00133f8:	83 ec 08             	sub    esp,0x8
c00133fb:	50                   	push   eax
c00133fc:	53                   	push   ebx
c00133fd:	e8 04 6a ff ff       	call   c0009e06 <VAS::VAS(bool)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013409:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001340f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013413:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001341d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013421:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013425:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001342b:	e8 aa d1 ff ff       	call   c00105da <KeInitSignals()>
c0013430:	89 c2                	mov    edx,eax
c0013432:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013436:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001343c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013440:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013446:	85 c0                	test   eax,eax
c0013448:	74 42                	je     c001348c <Process::Process(bool, char const*, Process*, char**)+0x140>
c001344a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001344e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013454:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001345a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013468:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001346e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013478:	05 0c 01 00 00       	add    eax,0x10c
c001347d:	83 ec 08             	sub    esp,0x8
c0013480:	52                   	push   edx
c0013481:	50                   	push   eax
c0013482:	e8 79 d1 fe ff       	call   c0000600 <strcpy>
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	eb 64                	jmp    c00134f0 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001348c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001349b:	e8 19 43 ff ff       	call   c00077b9 <malloc>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	89 c3                	mov    ebx,eax
c00134a5:	83 ec 08             	sub    esp,0x8
c00134a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134ac:	53                   	push   ebx
c00134ad:	e8 48 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134b2:	83 c4 10             	add    esp,0x10
c00134b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134c9:	83 ec 0c             	sub    esp,0xc
c00134cc:	50                   	push   eax
c00134cd:	e8 c8 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134d2:	83 c4 10             	add    esp,0x10
c00134d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d9:	05 0c 01 00 00       	add    eax,0x10c
c00134de:	83 ec 08             	sub    esp,0x8
c00134e1:	68 87 f1 01 c0       	push   0xc001f187
c00134e6:	50                   	push   eax
c00134e7:	e8 14 d1 fe ff       	call   c0000600 <strcpy>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	90                   	nop
c00134f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f4:	83 c0 0c             	add    eax,0xc
c00134f7:	83 ec 08             	sub    esp,0x8
c00134fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134fe:	50                   	push   eax
c00134ff:	e8 fc d0 fe ff       	call   c0000600 <strcpy>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	83 ec 08             	sub    esp,0x8
c001350a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001350e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013512:	e8 c9 fb ff ff       	call   c00130e0 <Process::addArgs(char**)>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	90                   	nop
c001351b:	83 c4 24             	add    esp,0x24
c001351e:	5b                   	pop    ebx
c001351f:	5e                   	pop    esi
c0013520:	c3                   	ret    
c0013521:	8d 76 00             	lea    esi,[esi+0x0]

c0013524 <taskStartupFunction>:
c0013524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013529:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001352c:	c3                   	ret    
c001352d:	90                   	nop
c001352e:	66 90                	xchg   ax,ax

c0013530 <Semaphore::Semaphore(int)>:
c0013530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013538:	89 10                	mov    DWORD PTR [eax],edx
c001353a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001353e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013549:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013554:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001355b:	90                   	nop
c001355c:	c3                   	ret    
c001355d:	90                   	nop
c001355e:	66 90                	xchg   ax,ax

c0013560 <Mutex::Mutex()>:
c0013560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013564:	6a 01                	push   0x1
c0013566:	50                   	push   eax
c0013567:	e8 c4 ff ff ff       	call   c0013530 <Semaphore::Semaphore(int)>
c001356c:	83 c4 08             	add    esp,0x8
c001356f:	90                   	nop
c0013570:	c3                   	ret    
c0013571:	90                   	nop
c0013572:	66 90                	xchg   ax,ax

c0013574 <Process::createThread(void (*)(void*), void*, int)>:
c0013574:	57                   	push   edi
c0013575:	31 c9                	xor    ecx,ecx
c0013577:	56                   	push   esi
c0013578:	53                   	push   ebx
c0013579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001357d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013584:	89 f2                	mov    edx,esi
c0013586:	66 90                	xchg   ax,ax
c0013588:	31 c0                	xor    eax,eax
c001358a:	66 89 d0             	mov    ax,dx
c001358d:	83 e2 01             	and    edx,0x1
c0013590:	74 12                	je     c00135a4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013592:	d1 f8                	sar    eax,1
c0013594:	41                   	inc    ecx
c0013595:	89 c2                	mov    edx,eax
c0013597:	83 f9 10             	cmp    ecx,0x10
c001359a:	75 ec                	jne    c0013588 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001359c:	31 db                	xor    ebx,ebx
c001359e:	89 d8                	mov    eax,ebx
c00135a0:	5b                   	pop    ebx
c00135a1:	5e                   	pop    esi
c00135a2:	5f                   	pop    edi
c00135a3:	c3                   	ret    
c00135a4:	b8 01 00 00 00       	mov    eax,0x1
c00135a9:	d3 e0                	shl    eax,cl
c00135ab:	09 c6                	or     esi,eax
c00135ad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135b0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135b7:	01 c0                	add    eax,eax
c00135b9:	01 c8                	add    eax,ecx
c00135bb:	8d 04 80             	lea    eax,[eax+eax*4]
c00135be:	01 d8                	add    eax,ebx
c00135c0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135c7:	75 0b                	jne    c00135d4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135c9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135d3:	90                   	nop
c00135d4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135e0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135e3:	01 c0                	add    eax,eax
c00135e5:	01 c8                	add    eax,ecx
c00135e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00135ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00135f3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00135f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135fd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013603:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013609:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013610:	89 ca                	mov    edx,ecx
c0013612:	f7 da                	neg    edx
c0013614:	c1 e2 15             	shl    edx,0x15
c0013617:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001361d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013623:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013627:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013631:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001363b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013641:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001364b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013655:	53                   	push   ebx
c0013656:	68 84 61 02 c0       	push   0xc0026184
c001365b:	e8 4c 98 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	89 d8                	mov    eax,ebx
c0013665:	5b                   	pop    ebx
c0013666:	5e                   	pop    esi
c0013667:	5f                   	pop    edi
c0013668:	c3                   	ret    
c0013669:	90                   	nop
c001366a:	66 90                	xchg   ax,ax

c001366c <Process::createUserThread()>:
c001366c:	83 ec 0c             	sub    esp,0xc
c001366f:	68 80 00 00 00       	push   0x80
c0013674:	6a 00                	push   0x0
c0013676:	68 d4 2f 01 c0       	push   0xc0012fd4
c001367b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367f:	50                   	push   eax
c0013680:	e8 ef fe ff ff       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c0013685:	83 c4 1c             	add    esp,0x1c
c0013688:	c3                   	ret    
c0013689:	8d 76 00             	lea    esi,[esi+0x0]

c001368c <setupMultitasking(void (*)())>:
c001368c:	56                   	push   esi
c001368d:	53                   	push   ebx
c001368e:	53                   	push   ebx
c001368f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013693:	eb 13                	jmp    c00136a8 <setupMultitasking(void (*)())+0x1c>
c0013695:	8d 76 00             	lea    esi,[esi+0x0]
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	68 84 61 02 c0       	push   0xc0026184
c00136a0:	e8 4f 97 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	68 84 61 02 c0       	push   0xc0026184
c00136b0:	e8 1b 97 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136b5:	83 c4 10             	add    esp,0x10
c00136b8:	84 c0                	test   al,al
c00136ba:	74 dc                	je     c0013698 <setupMultitasking(void (*)())+0xc>
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	68 24 07 00 00       	push   0x724
c00136c4:	e8 f0 40 ff ff       	call   c00077b9 <malloc>
c00136c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136d0:	89 c3                	mov    ebx,eax
c00136d2:	6a 00                	push   0x0
c00136d4:	68 8b f1 01 c0       	push   0xc001f18b
c00136d9:	6a 01                	push   0x1
c00136db:	50                   	push   eax
c00136dc:	e8 6b fc ff ff       	call   c001334c <Process::Process(bool, char const*, Process*, char**)>
c00136e1:	83 c4 14             	add    esp,0x14
c00136e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136ea:	89 1d 90 61 02 c0    	mov    DWORD PTR ds:0xc0026190,ebx
c00136f0:	50                   	push   eax
c00136f1:	e8 01 4d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00136f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00136fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013708:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001370e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013711:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001371b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013721:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013727:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013731:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001373b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013745:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001374b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013751:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001375b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013761:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001376b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013771:	5a                   	pop    edx
c0013772:	59                   	pop    ecx
c0013773:	68 87 f1 01 c0       	push   0xc001f187
c0013778:	50                   	push   eax
c0013779:	e8 82 ce fe ff       	call   c0000600 <strcpy>
c001377e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013785:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013789:	83 c4 14             	add    esp,0x14
c001378c:	5b                   	pop    ebx
c001378d:	5e                   	pop    esi
c001378e:	e9 d6 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013793:	90                   	nop

c0013794 <schedule()>:
c0013794:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c001379a:	85 d2                	test   edx,edx
c001379c:	74 0e                	je     c00137ac <schedule()+0x18>
c001379e:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c00137a8:	c3                   	ret    
c00137a9:	8d 76 00             	lea    esi,[esi+0x0]
c00137ac:	53                   	push   ebx
c00137ad:	83 ec 14             	sub    esp,0x14
c00137b0:	68 84 61 02 c0       	push   0xc0026184
c00137b5:	e8 16 96 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	84 c0                	test   al,al
c00137bf:	75 3b                	jne    c00137fc <schedule()+0x68>
c00137c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137c9:	4a                   	dec    edx
c00137ca:	74 38                	je     c0013804 <schedule()+0x70>
c00137cc:	83 ec 0c             	sub    esp,0xc
c00137cf:	68 84 61 02 c0       	push   0xc0026184
c00137d4:	e8 13 96 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137d9:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c00137e0:	89 c3                	mov    ebx,eax
c00137e2:	e8 0d 96 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00137ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f1:	e8 36 f8 ff ff       	call   c001302c <switchToThread(ThreadControlBlock*)>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	8d 76 00             	lea    esi,[esi+0x0]
c00137fc:	83 c4 08             	add    esp,0x8
c00137ff:	5b                   	pop    ebx
c0013800:	c3                   	ret    
c0013801:	8d 76 00             	lea    esi,[esi+0x0]
c0013804:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001380b:	83 ec 08             	sub    esp,0x8
c001380e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013813:	50                   	push   eax
c0013814:	68 84 61 02 c0       	push   0xc0026184
c0013819:	e8 8e 96 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	eb a9                	jmp    c00137cc <schedule()+0x38>
c0013823:	90                   	nop

c0013824 <Semaphore::tryAcquire()>:
c0013824:	53                   	push   ebx
c0013825:	83 ec 08             	sub    esp,0x8
c0013828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001382c:	fa                   	cli    
c001382d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013832:	8d 50 01             	lea    edx,[eax+0x1]
c0013835:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001383b:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c0013841:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013844:	89 1d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ebx
c001384a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001384d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001384f:	7c 33                	jl     c0013884 <Semaphore::tryAcquire()+0x60>
c0013851:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c0013857:	85 d2                	test   edx,edx
c0013859:	75 0d                	jne    c0013868 <Semaphore::tryAcquire()+0x44>
c001385b:	8b 15 60 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026160
c0013861:	85 d2                	test   edx,edx
c0013863:	75 6b                	jne    c00138d0 <Semaphore::tryAcquire()+0xac>
c0013865:	8d 76 00             	lea    esi,[esi+0x0]
c0013868:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001386d:	85 c0                	test   eax,eax
c001386f:	74 0b                	je     c001387c <Semaphore::tryAcquire()+0x58>
c0013871:	8d 76 00             	lea    esi,[esi+0x0]
c0013874:	31 c0                	xor    eax,eax
c0013876:	83 c4 08             	add    esp,0x8
c0013879:	5b                   	pop    ebx
c001387a:	c3                   	ret    
c001387b:	90                   	nop
c001387c:	fb                   	sti    
c001387d:	83 c4 08             	add    esp,0x8
c0013880:	5b                   	pop    ebx
c0013881:	c3                   	ret    
c0013882:	66 90                	xchg   ax,ax
c0013884:	43                   	inc    ebx
c0013885:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c001388b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001388e:	85 d2                	test   edx,edx
c0013890:	75 22                	jne    c00138b4 <Semaphore::tryAcquire()+0x90>
c0013892:	8b 0d 60 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026160
c0013898:	85 c9                	test   ecx,ecx
c001389a:	74 18                	je     c00138b4 <Semaphore::tryAcquire()+0x90>
c001389c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00138a6:	e8 e9 fe ff ff       	call   c0013794 <schedule()>
c00138ab:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138b0:	48                   	dec    eax
c00138b1:	8d 76 00             	lea    esi,[esi+0x0]
c00138b4:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00138b9:	85 c0                	test   eax,eax
c00138bb:	75 0b                	jne    c00138c8 <Semaphore::tryAcquire()+0xa4>
c00138bd:	fb                   	sti    
c00138be:	b0 01                	mov    al,0x1
c00138c0:	83 c4 08             	add    esp,0x8
c00138c3:	5b                   	pop    ebx
c00138c4:	c3                   	ret    
c00138c5:	8d 76 00             	lea    esi,[esi+0x0]
c00138c8:	b0 01                	mov    al,0x1
c00138ca:	83 c4 08             	add    esp,0x8
c00138cd:	5b                   	pop    ebx
c00138ce:	c3                   	ret    
c00138cf:	90                   	nop
c00138d0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00138da:	e8 b5 fe ff ff       	call   c0013794 <schedule()>
c00138df:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138e4:	48                   	dec    eax
c00138e5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00138ea:	85 c0                	test   eax,eax
c00138ec:	75 86                	jne    c0013874 <Semaphore::tryAcquire()+0x50>
c00138ee:	eb 8c                	jmp    c001387c <Semaphore::tryAcquire()+0x58>

c00138f0 <Semaphore::assertLocked(char const*)>:
c00138f0:	83 ec 0c             	sub    esp,0xc
c00138f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138f7:	fa                   	cli    
c00138f8:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00138fe:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013903:	8d 48 01             	lea    ecx,[eax+0x1]
c0013906:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c001390c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001390e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013911:	7c 29                	jl     c001393c <Semaphore::assertLocked(char const*)+0x4c>
c0013913:	90                   	nop
c0013914:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013919:	85 c0                	test   eax,eax
c001391b:	75 0b                	jne    c0013928 <Semaphore::assertLocked(char const*)+0x38>
c001391d:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013922:	85 c0                	test   eax,eax
c0013924:	75 2e                	jne    c0013954 <Semaphore::assertLocked(char const*)+0x64>
c0013926:	66 90                	xchg   ax,ax
c0013928:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001392d:	48                   	dec    eax
c001392e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013933:	75 03                	jne    c0013938 <Semaphore::assertLocked(char const*)+0x48>
c0013935:	fb                   	sti    
c0013936:	66 90                	xchg   ax,ax
c0013938:	83 c4 0c             	add    esp,0xc
c001393b:	c3                   	ret    
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013943:	52                   	push   edx
c0013944:	e8 26 c9 ff ff       	call   c001026f <KePanic(char const*)>
c0013949:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	48                   	dec    eax
c0013952:	eb c0                	jmp    c0013914 <Semaphore::assertLocked(char const*)+0x24>
c0013954:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001395e:	e8 31 fe ff ff       	call   c0013794 <schedule()>
c0013963:	eb c3                	jmp    c0013928 <Semaphore::assertLocked(char const*)+0x38>
c0013965:	8d 76 00             	lea    esi,[esi+0x0]

c0013968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013974:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013977:	e8 18 fe ff ff       	call   c0013794 <schedule()>
c001397c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013981:	48                   	dec    eax
c0013982:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013987:	75 03                	jne    c001398c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013989:	fb                   	sti    
c001398a:	66 90                	xchg   ax,ax
c001398c:	83 c4 0c             	add    esp,0xc
c001398f:	c3                   	ret    

c0013990 <blockTask(TaskState)>:
c0013990:	83 ec 0c             	sub    esp,0xc
c0013993:	fa                   	cli    
c0013994:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001399a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001399e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139a6:	e8 e9 fd ff ff       	call   c0013794 <schedule()>
c00139ab:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139b0:	48                   	dec    eax
c00139b1:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139b6:	75 04                	jne    c00139bc <blockTask(TaskState)+0x2c>
c00139b8:	fb                   	sti    
c00139b9:	8d 76 00             	lea    esi,[esi+0x0]
c00139bc:	83 c4 0c             	add    esp,0xc
c00139bf:	c3                   	ret    

c00139c0 <waitTask(int, int*, int)>:
c00139c0:	83 ec 18             	sub    esp,0x18
c00139c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139cc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139db:	6a 07                	push   0x7
c00139dd:	e8 ae ff ff ff       	call   c0013990 <blockTask(TaskState)>
c00139e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e7:	83 c4 10             	add    esp,0x10
c00139ea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00139ed:	85 d2                	test   edx,edx
c00139ef:	74 0b                	je     c00139fc <waitTask(int, int*, int)+0x3c>
c00139f1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00139f4:	89 02                	mov    DWORD PTR [edx],eax
c00139f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139fb:	90                   	nop
c00139fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00139ff:	83 c4 0c             	add    esp,0xc
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <milliTenthSleepUntil(unsigned int)>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0b:	39 05 8c 54 02 c0    	cmp    DWORD PTR ds:0xc002548c,eax
c0013a11:	76 05                	jbe    c0013a18 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a13:	90                   	nop
c0013a14:	83 c4 0c             	add    esp,0xc
c0013a17:	c3                   	ret    
c0013a18:	fa                   	cli    
c0013a19:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013a1f:	83 ec 08             	sub    esp,0x8
c0013a22:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0013a28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a2e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a37:	52                   	push   edx
c0013a38:	68 78 61 02 c0       	push   0xc0026178
c0013a3d:	e8 6a 94 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a49:	e8 42 ff ff ff       	call   c0013990 <blockTask(TaskState)>
c0013a4e:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013a53:	83 c4 10             	add    esp,0x10
c0013a56:	48                   	dec    eax
c0013a57:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013a5c:	85 c0                	test   eax,eax
c0013a5e:	75 0c                	jne    c0013a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a60:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013a65:	85 c0                	test   eax,eax
c0013a67:	75 17                	jne    c0013a80 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a69:	8d 76 00             	lea    esi,[esi+0x0]
c0013a6c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013a71:	48                   	dec    eax
c0013a72:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013a77:	75 9b                	jne    c0013a14 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a79:	fb                   	sti    
c0013a7a:	83 c4 0c             	add    esp,0xc
c0013a7d:	c3                   	ret    
c0013a7e:	66 90                	xchg   ax,ax
c0013a80:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013a8a:	e8 05 fd ff ff       	call   c0013794 <schedule()>
c0013a8f:	eb db                	jmp    c0013a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a91:	8d 76 00             	lea    esi,[esi+0x0]

c0013a94 <milliTenthSleep(unsigned int)>:
c0013a94:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c0013a99:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013a9d:	e9 62 ff ff ff       	jmp    c0013a04 <milliTenthSleepUntil(unsigned int)>
c0013aa2:	66 90                	xchg   ax,ax

c0013aa4 <sleep(unsigned int)>:
c0013aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aa8:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aab:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aae:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab4:	c1 e0 04             	shl    eax,0x4
c0013ab7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013abb:	eb d7                	jmp    c0013a94 <milliTenthSleep(unsigned int)>
c0013abd:	90                   	nop
c0013abe:	66 90                	xchg   ax,ax

c0013ac0 <Semaphore::acquire()>:
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac7:	fa                   	cli    
c0013ac8:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013acd:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013ad3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ad6:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013adc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013adf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013ae1:	7d 2d                	jge    c0013b10 <Semaphore::acquire()+0x50>
c0013ae3:	41                   	inc    ecx
c0013ae4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013ae7:	90                   	nop
c0013ae8:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013aed:	85 c0                	test   eax,eax
c0013aef:	75 0b                	jne    c0013afc <Semaphore::acquire()+0x3c>
c0013af1:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013af6:	85 c0                	test   eax,eax
c0013af8:	75 62                	jne    c0013b5c <Semaphore::acquire()+0x9c>
c0013afa:	66 90                	xchg   ax,ax
c0013afc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013b01:	48                   	dec    eax
c0013b02:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013b07:	75 03                	jne    c0013b0c <Semaphore::acquire()+0x4c>
c0013b09:	fb                   	sti    
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	83 c4 0c             	add    esp,0xc
c0013b0f:	c3                   	ret    
c0013b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b1c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b1f:	85 c9                	test   ecx,ecx
c0013b21:	74 4d                	je     c0013b70 <Semaphore::acquire()+0xb0>
c0013b23:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b2c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b2f:	90                   	nop
c0013b30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b35:	83 ec 0c             	sub    esp,0xc
c0013b38:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b3b:	68 08 f2 01 c0       	push   0xc001f208
c0013b40:	e8 0d 6a ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013b45:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b4c:	e8 3f fe ff ff       	call   c0013990 <blockTask(TaskState)>
c0013b51:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013b56:	83 c4 10             	add    esp,0x10
c0013b59:	48                   	dec    eax
c0013b5a:	eb 8c                	jmp    c0013ae8 <Semaphore::acquire()+0x28>
c0013b5c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013b66:	e8 29 fc ff ff       	call   c0013794 <schedule()>
c0013b6b:	eb 8f                	jmp    c0013afc <Semaphore::acquire()+0x3c>
c0013b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b78:	eb b6                	jmp    c0013b30 <Semaphore::acquire()+0x70>
c0013b7a:	66 90                	xchg   ax,ax

c0013b7c <taskReturned>:
c0013b7c:	83 ec 18             	sub    esp,0x18
c0013b7f:	68 28 f2 01 c0       	push   0xc001f228
c0013b84:	e8 e6 c6 ff ff       	call   c001026f <KePanic(char const*)>
c0013b89:	83 c4 10             	add    esp,0x10
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	6a 02                	push   0x2
c0013b91:	e8 fa fd ff ff       	call   c0013990 <blockTask(TaskState)>
c0013b96:	fa                   	cli    
c0013b97:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013b9d:	e8 f2 fb ff ff       	call   c0013794 <schedule()>
c0013ba2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	48                   	dec    eax
c0013bab:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013bb0:	85 c0                	test   eax,eax
c0013bb2:	75 d8                	jne    c0013b8c <taskReturned+0x10>
c0013bb4:	fb                   	sti    
c0013bb5:	eb d5                	jmp    c0013b8c <taskReturned+0x10>
c0013bb7:	90                   	nop

c0013bb8 <Thr::processFromPID(int)>:
c0013bb8:	57                   	push   edi
c0013bb9:	56                   	push   esi
c0013bba:	53                   	push   ebx
c0013bbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bbf:	fa                   	cli    
c0013bc0:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	68 84 61 02 c0       	push   0xc0026184
c0013bce:	e8 19 92 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bd3:	83 c4 10             	add    esp,0x10
c0013bd6:	89 c7                	mov    edi,eax
c0013bd8:	eb 16                	jmp    c0013bf0 <Thr::processFromPID(int)+0x38>
c0013bda:	66 90                	xchg   ax,ax
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	68 84 61 02 c0       	push   0xc0026184
c0013be4:	e8 03 92 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	39 f8                	cmp    eax,edi
c0013bee:	74 4c                	je     c0013c3c <Thr::processFromPID(int)+0x84>
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	68 84 61 02 c0       	push   0xc0026184
c0013bf8:	e8 ef 91 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bfd:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013c04:	89 c3                	mov    ebx,eax
c0013c06:	e8 e9 91 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c0b:	58                   	pop    eax
c0013c0c:	5a                   	pop    edx
c0013c0d:	53                   	push   ebx
c0013c0e:	68 84 61 02 c0       	push   0xc0026184
c0013c13:	e8 94 92 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c18:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	39 30                	cmp    DWORD PTR [eax],esi
c0013c20:	75 ba                	jne    c0013bdc <Thr::processFromPID(int)+0x24>
c0013c22:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c27:	48                   	dec    eax
c0013c28:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c2d:	74 09                	je     c0013c38 <Thr::processFromPID(int)+0x80>
c0013c2f:	90                   	nop
c0013c30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c33:	5b                   	pop    ebx
c0013c34:	5e                   	pop    esi
c0013c35:	5f                   	pop    edi
c0013c36:	c3                   	ret    
c0013c37:	90                   	nop
c0013c38:	fb                   	sti    
c0013c39:	eb f5                	jmp    c0013c30 <Thr::processFromPID(int)+0x78>
c0013c3b:	90                   	nop
c0013c3c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c41:	48                   	dec    eax
c0013c42:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c47:	75 07                	jne    c0013c50 <Thr::processFromPID(int)+0x98>
c0013c49:	fb                   	sti    
c0013c4a:	5b                   	pop    ebx
c0013c4b:	5e                   	pop    esi
c0013c4c:	5f                   	pop    edi
c0013c4d:	c3                   	ret    
c0013c4e:	66 90                	xchg   ax,ax
c0013c50:	5b                   	pop    ebx
c0013c51:	31 c0                	xor    eax,eax
c0013c53:	5e                   	pop    esi
c0013c54:	5f                   	pop    edi
c0013c55:	c3                   	ret    
c0013c56:	66 90                	xchg   ax,ax

c0013c58 <unblockTask(ThreadControlBlock*)>:
c0013c58:	53                   	push   ebx
c0013c59:	83 ec 08             	sub    esp,0x8
c0013c5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c60:	fa                   	cli    
c0013c61:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c6a:	85 c0                	test   eax,eax
c0013c6c:	74 66                	je     c0013cd4 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c71:	48                   	dec    eax
c0013c72:	74 38                	je     c0013cac <unblockTask(ThreadControlBlock*)+0x54>
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	68 84 61 02 c0       	push   0xc0026184
c0013c7c:	e8 6b 91 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	85 c0                	test   eax,eax
c0013c86:	75 1c                	jne    c0013ca4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c88:	eb 5e                	jmp    c0013ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0013c8a:	66 90                	xchg   ax,ax
c0013c8c:	83 ec 08             	sub    esp,0x8
c0013c8f:	50                   	push   eax
c0013c90:	68 84 61 02 c0       	push   0xc0026184
c0013c95:	e8 02 95 00 00       	call   c001d19c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	85 c0                	test   eax,eax
c0013c9f:	74 47                	je     c0013ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0013ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ca4:	39 c3                	cmp    ebx,eax
c0013ca6:	75 e4                	jne    c0013c8c <unblockTask(ThreadControlBlock*)+0x34>
c0013ca8:	eb 12                	jmp    c0013cbc <unblockTask(ThreadControlBlock*)+0x64>
c0013caa:	66 90                	xchg   ax,ax
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	68 a9 f1 01 c0       	push   0xc001f1a9
c0013cb4:	e8 99 68 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013cc1:	48                   	dec    eax
c0013cc2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013cc7:	75 03                	jne    c0013ccc <unblockTask(ThreadControlBlock*)+0x74>
c0013cc9:	fb                   	sti    
c0013cca:	66 90                	xchg   ax,ax
c0013ccc:	83 c4 08             	add    esp,0x8
c0013ccf:	5b                   	pop    ebx
c0013cd0:	c3                   	ret    
c0013cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 92 f1 01 c0       	push   0xc001f192
c0013cdc:	e8 71 68 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013ce1:	83 c4 10             	add    esp,0x10
c0013ce4:	eb d6                	jmp    c0013cbc <unblockTask(ThreadControlBlock*)+0x64>
c0013ce6:	66 90                	xchg   ax,ax
c0013ce8:	83 ec 08             	sub    esp,0x8
c0013ceb:	53                   	push   ebx
c0013cec:	68 84 61 02 c0       	push   0xc0026184
c0013cf1:	e8 b6 91 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	eb c1                	jmp    c0013cbc <unblockTask(ThreadControlBlock*)+0x64>
c0013cfb:	90                   	nop

c0013cfc <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013cfc:	55                   	push   ebp
c0013cfd:	57                   	push   edi
c0013cfe:	56                   	push   esi
c0013cff:	53                   	push   ebx
c0013d00:	83 ec 1c             	sub    esp,0x1c
c0013d03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d07:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d0a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d10:	85 ed                	test   ebp,ebp
c0013d12:	7e 24                	jle    c0013d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d14:	31 f6                	xor    esi,esi
c0013d16:	66 90                	xchg   ax,ax
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d22:	46                   	inc    esi
c0013d23:	57                   	push   edi
c0013d24:	e8 a0 3a ff ff       	call   c00077c9 <free>
c0013d29:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d35:	7f e1                	jg     c0013d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d37:	90                   	nop
c0013d38:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d42:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d47:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d4d:	d3 c0                	rol    eax,cl
c0013d4f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d59:	89 f7                	mov    edi,esi
c0013d5b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d63:	0f 85 77 01 00 00    	jne    c0013ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d69:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d6f:	85 ed                	test   ebp,ebp
c0013d71:	74 1d                	je     c0013d90 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d73:	83 ec 0c             	sub    esp,0xc
c0013d76:	55                   	push   ebp
c0013d77:	e8 04 c2 ff ff       	call   c000ff80 <EnvVarContainer::~EnvVarContainer()>
c0013d7c:	59                   	pop    ecx
c0013d7d:	5e                   	pop    esi
c0013d7e:	6a 0c                	push   0xc
c0013d80:	55                   	push   ebp
c0013d81:	e8 d6 66 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0013d86:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	89 f7                	mov    edi,esi
c0013d8e:	66 90                	xchg   ax,ax
c0013d90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013d96:	85 c0                	test   eax,eax
c0013d98:	0f 84 b6 00 00 00    	je     c0013e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013d9e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013da1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013da5:	31 c9                	xor    ecx,ecx
c0013da7:	eb 17                	jmp    c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013da9:	8d 76 00             	lea    esi,[esi+0x0]
c0013dac:	41                   	inc    ecx
c0013dad:	83 f9 10             	cmp    ecx,0x10
c0013db0:	0f 84 9e 00 00 00    	je     c0013e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dbe:	66 90                	xchg   ax,ax
c0013dc0:	31 d2                	xor    edx,edx
c0013dc2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013dc9:	d3 fa                	sar    edx,cl
c0013dcb:	83 e2 01             	and    edx,0x1
c0013dce:	74 dc                	je     c0013dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013dd0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013dd3:	01 d2                	add    edx,edx
c0013dd5:	01 ca                	add    edx,ecx
c0013dd7:	8d 14 92             	lea    edx,[edx+edx*4]
c0013dda:	01 d0                	add    eax,edx
c0013ddc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013de2:	83 fd 07             	cmp    ebp,0x7
c0013de5:	75 c5                	jne    c0013dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013de7:	05 40 02 00 00       	add    eax,0x240
c0013dec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013def:	83 fd ff             	cmp    ebp,0xffffffff
c0013df2:	0f 8c f0 00 00 00    	jl     c0013ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013df8:	0f 84 ae 01 00 00    	je     c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013dfe:	85 ed                	test   ebp,ebp
c0013e00:	0f 84 92 01 00 00    	je     c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e06:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e08:	75 a2                	jne    c0013dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e0a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e14:	01 d0                	add    eax,edx
c0013e16:	66 90                	xchg   ax,ax
c0013e18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e2e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e35:	50                   	push   eax
c0013e36:	e8 1d fe ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e45:	89 f7                	mov    edi,esi
c0013e47:	41                   	inc    ecx
c0013e48:	83 f9 10             	cmp    ecx,0x10
c0013e4b:	0f 85 67 ff ff ff    	jne    c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e51:	8d 76 00             	lea    esi,[esi+0x0]
c0013e54:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e5a:	85 c0                	test   eax,eax
c0013e5c:	74 62                	je     c0013ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e5e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e64:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e6a:	74 54                	je     c0013ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	68 84 61 02 c0       	push   0xc0026184
c0013e74:	e8 73 8f 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e79:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013e80:	89 c7                	mov    edi,eax
c0013e82:	e8 49 8f 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e87:	83 c4 10             	add    esp,0x10
c0013e8a:	84 c0                	test   al,al
c0013e8c:	0f 84 ce 00 00 00    	je     c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013e92:	66 90                	xchg   ax,ax
c0013e94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e97:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013e9d:	85 d2                	test   edx,edx
c0013e9f:	74 0f                	je     c0013eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ea1:	83 ec 0c             	sub    esp,0xc
c0013ea4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ea6:	52                   	push   edx
c0013ea7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eaa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013eba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ec0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ec6:	85 db                	test   ebx,ebx
c0013ec8:	74 16                	je     c0013ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013eca:	83 ec 0c             	sub    esp,0xc
c0013ecd:	53                   	push   ebx
c0013ece:	e8 21 59 ff ff       	call   c00097f4 <VAS::~VAS()>
c0013ed3:	58                   	pop    eax
c0013ed4:	5a                   	pop    edx
c0013ed5:	6a 14                	push   0x14
c0013ed7:	53                   	push   ebx
c0013ed8:	e8 7f 65 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	83 c4 1c             	add    esp,0x1c
c0013ee3:	5b                   	pop    ebx
c0013ee4:	5e                   	pop    esi
c0013ee5:	5f                   	pop    edi
c0013ee6:	5d                   	pop    ebp
c0013ee7:	c3                   	ret    
c0013ee8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	68 5c f2 01 c0       	push   0xc001f25c
c0013ef4:	e8 76 c3 ff ff       	call   c001026f <KePanic(char const*)>
c0013ef9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	89 f7                	mov    edi,esi
c0013f01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f05:	e9 a2 fe ff ff       	jmp    c0013dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f0a:	66 90                	xchg   ax,ax
c0013f0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f12:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f18:	75 1e                	jne    c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	68 c4 f2 01 c0       	push   0xc001f2c4
c0013f22:	e8 2b 66 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013f27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f2e:	e8 5d fa ff ff       	call   c0013990 <blockTask(TaskState)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	66 90                	xchg   ax,ax
c0013f38:	83 ec 08             	sub    esp,0x8
c0013f3b:	56                   	push   esi
c0013f3c:	68 84 61 02 c0       	push   0xc0026184
c0013f41:	e8 66 8f 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f46:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f4d:	e8 9a 8e 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	39 f8                	cmp    eax,edi
c0013f57:	0f 84 37 ff ff ff    	je     c0013e94 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	68 84 61 02 c0       	push   0xc0026184
c0013f68:	e8 7f 8e 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f6d:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f74:	89 c6                	mov    esi,eax
c0013f76:	e8 79 8e 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	39 f3                	cmp    ebx,esi
c0013f80:	74 b6                	je     c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f82:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f88:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013f8e:	75 a8                	jne    c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f90:	e9 77 ff ff ff       	jmp    c0013f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013f95:	8d 76 00             	lea    esi,[esi+0x0]
c0013f98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f9c:	83 ec 0c             	sub    esp,0xc
c0013f9f:	68 90 f2 01 c0       	push   0xc001f290
c0013fa4:	e9 4b ff ff ff       	jmp    c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fac:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fb2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fbe:	01 d7                	add    edi,edx
c0013fc0:	89 f8                	mov    eax,edi
c0013fc2:	e9 51 fe ff ff       	jmp    c0013e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fc7:	90                   	nop

c0013fc8 <cleanerTaskFunction(void*)>:
c0013fc8:	53                   	push   ebx
c0013fc9:	83 ec 08             	sub    esp,0x8
c0013fcc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013fd1:	48                   	dec    eax
c0013fd2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013fd7:	75 03                	jne    c0013fdc <cleanerTaskFunction(void*)+0x14>
c0013fd9:	fb                   	sti    
c0013fda:	66 90                	xchg   ax,ax
c0013fdc:	fa                   	cli    
c0013fdd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013fe2:	80 3d 4c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002614c,0x0
c0013fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0013fec:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c0013ff2:	0f 84 ac 00 00 00    	je     c00140a4 <cleanerTaskFunction(void*)+0xdc>
c0013ff8:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013ffd:	85 c0                	test   eax,eax
c0013fff:	75 03                	jne    c0014004 <cleanerTaskFunction(void*)+0x3c>
c0014001:	fb                   	sti    
c0014002:	66 90                	xchg   ax,ax
c0014004:	c6 05 4c 61 02 c0 00 	mov    BYTE PTR ds:0xc002614c,0x0
c001400b:	fa                   	cli    
c001400c:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014012:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014018:	fa                   	cli    
c0014019:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001401f:	eb 2b                	jmp    c001404c <cleanerTaskFunction(void*)+0x84>
c0014021:	8d 76 00             	lea    esi,[esi+0x0]
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	68 6c 61 02 c0       	push   0xc002616c
c001402c:	e8 bb 8d 00 00       	call   c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014031:	c7 04 24 6c 61 02 c0 	mov    DWORD PTR [esp],0xc002616c
c0014038:	89 c3                	mov    ebx,eax
c001403a:	e8 b5 8d 00 00       	call   c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001403f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014042:	e8 b5 fc ff ff       	call   c0013cfc <cleanupTerminatedTask(ThreadControlBlock*)>
c0014047:	83 c4 10             	add    esp,0x10
c001404a:	66 90                	xchg   ax,ax
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	68 6c 61 02 c0       	push   0xc002616c
c0014054:	e8 77 8d 00 00       	call   c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	84 c0                	test   al,al
c001405e:	74 c4                	je     c0014024 <cleanerTaskFunction(void*)+0x5c>
c0014060:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014065:	48                   	dec    eax
c0014066:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001406b:	75 03                	jne    c0014070 <cleanerTaskFunction(void*)+0xa8>
c001406d:	fb                   	sti    
c001406e:	66 90                	xchg   ax,ax
c0014070:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014075:	48                   	dec    eax
c0014076:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c001407b:	0f 85 4b ff ff ff    	jne    c0013fcc <cleanerTaskFunction(void*)+0x4>
c0014081:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0014086:	85 c0                	test   eax,eax
c0014088:	0f 84 3e ff ff ff    	je     c0013fcc <cleanerTaskFunction(void*)+0x4>
c001408e:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014098:	e8 f7 f6 ff ff       	call   c0013794 <schedule()>
c001409d:	e9 2a ff ff ff       	jmp    c0013fcc <cleanerTaskFunction(void*)+0x4>
c00140a2:	66 90                	xchg   ax,ax
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	6a 02                	push   0x2
c00140a9:	e8 ba f8 ff ff       	call   c0013968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	e9 4e ff ff ff       	jmp    c0014004 <cleanerTaskFunction(void*)+0x3c>
c00140b6:	66 90                	xchg   ax,ax

c00140b8 <terminateTask(int)>:
c00140b8:	83 ec 14             	sub    esp,0x14
c00140bb:	fa                   	cli    
c00140bc:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140c2:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00140c8:	fa                   	cli    
c00140c9:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140e3:	50                   	push   eax
c00140e4:	68 6c 61 02 c0       	push   0xc002616c
c00140e9:	e8 be 8d 00 00       	call   c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00140fd:	a1 48 61 02 c0       	mov    eax,ds:0xc0026148
c0014102:	85 c0                	test   eax,eax
c0014104:	74 5e                	je     c0014164 <terminateTask(int)+0xac>
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	c6 05 4c 61 02 c0 01 	mov    BYTE PTR ds:0xc002614c,0x1
c0014110:	50                   	push   eax
c0014111:	e8 42 fb ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014121:	48                   	dec    eax
c0014122:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014127:	75 03                	jne    c001412c <terminateTask(int)+0x74>
c0014129:	fb                   	sti    
c001412a:	66 90                	xchg   ax,ax
c001412c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014131:	48                   	dec    eax
c0014132:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014137:	75 0b                	jne    c0014144 <terminateTask(int)+0x8c>
c0014139:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c0014140:	75 36                	jne    c0014178 <terminateTask(int)+0xc0>
c0014142:	66 90                	xchg   ax,ax
c0014144:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014149:	48                   	dec    eax
c001414a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001414f:	75 03                	jne    c0014154 <terminateTask(int)+0x9c>
c0014151:	fb                   	sti    
c0014152:	66 90                	xchg   ax,ax
c0014154:	fa                   	cli    
c0014155:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001415b:	90                   	nop
c001415c:	e8 33 f6 ff ff       	call   c0013794 <schedule()>
c0014161:	eb e1                	jmp    c0014144 <terminateTask(int)+0x8c>
c0014163:	90                   	nop
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	68 c0 f1 01 c0       	push   0xc001f1c0
c001416c:	e8 e1 63 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	eb a6                	jmp    c001411c <terminateTask(int)+0x64>
c0014176:	66 90                	xchg   ax,ax
c0014178:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0014182:	eb d8                	jmp    c001415c <terminateTask(int)+0xa4>

c0014184 <Thr::terminateFromIRQ(int)>:
c0014184:	83 ec 18             	sub    esp,0x18
c0014187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001418b:	50                   	push   eax
c001418c:	e8 27 ff ff ff       	call   c00140b8 <terminateTask(int)>
c0014191:	90                   	nop
c0014192:	66 90                	xchg   ax,ax

c0014194 <Semaphore::release()>:
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001419b:	fa                   	cli    
c001419c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141a1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00141a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00141aa:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c00141b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141b3:	85 c9                	test   ecx,ecx
c00141b5:	74 41                	je     c00141f8 <Semaphore::release()+0x64>
c00141b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141c0:	51                   	push   ecx
c00141c1:	e8 92 fa ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c00141c6:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	48                   	dec    eax
c00141cf:	90                   	nop
c00141d0:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00141d5:	85 c0                	test   eax,eax
c00141d7:	75 0b                	jne    c00141e4 <Semaphore::release()+0x50>
c00141d9:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c00141de:	85 c0                	test   eax,eax
c00141e0:	75 1e                	jne    c0014200 <Semaphore::release()+0x6c>
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00141e9:	48                   	dec    eax
c00141ea:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00141ef:	75 03                	jne    c00141f4 <Semaphore::release()+0x60>
c00141f1:	fb                   	sti    
c00141f2:	66 90                	xchg   ax,ax
c00141f4:	83 c4 0c             	add    esp,0xc
c00141f7:	c3                   	ret    
c00141f8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00141fb:	eb d3                	jmp    c00141d0 <Semaphore::release()+0x3c>
c00141fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014200:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001420a:	e8 85 f5 ff ff       	call   c0013794 <schedule()>
c001420f:	eb d3                	jmp    c00141e4 <Semaphore::release()+0x50>
c0014211:	8d 76 00             	lea    esi,[esi+0x0]

c0014214 <__static_initialization_and_destruction_0(int, int)>:
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001421c:	0f 85 8e 00 00 00    	jne    c00142b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014222:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001422a:	0f 85 80 00 00 00    	jne    c00142b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	68 84 61 02 c0       	push   0xc0026184
c0014238:	e8 1b 8f 00 00       	call   c001d158 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	83 ec 04             	sub    esp,0x4
c0014243:	68 4c fd 01 c0       	push   0xc001fd4c
c0014248:	68 84 61 02 c0       	push   0xc0026184
c001424d:	68 08 d1 01 c0       	push   0xc001d108
c0014252:	e8 b5 61 ff ff       	call   c000a40c <__cxa_atexit>
c0014257:	83 c4 10             	add    esp,0x10
c001425a:	83 ec 0c             	sub    esp,0xc
c001425d:	68 78 61 02 c0       	push   0xc0026178
c0014262:	e8 f1 8e 00 00       	call   c001d158 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	83 ec 04             	sub    esp,0x4
c001426d:	68 4c fd 01 c0       	push   0xc001fd4c
c0014272:	68 78 61 02 c0       	push   0xc0026178
c0014277:	68 08 d1 01 c0       	push   0xc001d108
c001427c:	e8 8b 61 ff ff       	call   c000a40c <__cxa_atexit>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	83 ec 0c             	sub    esp,0xc
c0014287:	68 6c 61 02 c0       	push   0xc002616c
c001428c:	e8 c7 8e 00 00       	call   c001d158 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	83 ec 04             	sub    esp,0x4
c0014297:	68 4c fd 01 c0       	push   0xc001fd4c
c001429c:	68 6c 61 02 c0       	push   0xc002616c
c00142a1:	68 08 d1 01 c0       	push   0xc001d108
c00142a6:	e8 61 61 ff ff       	call   c000a40c <__cxa_atexit>
c00142ab:	83 c4 10             	add    esp,0x10
c00142ae:	66 90                	xchg   ax,ax
c00142b0:	90                   	nop
c00142b1:	83 c4 0c             	add    esp,0xc
c00142b4:	c3                   	ret    
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]

c00142b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142b8:	83 ec 0c             	sub    esp,0xc
c00142bb:	83 ec 08             	sub    esp,0x8
c00142be:	68 ff ff 00 00       	push   0xffff
c00142c3:	6a 01                	push   0x1
c00142c5:	e8 4a ff ff ff       	call   c0014214 <__static_initialization_and_destruction_0(int, int)>
c00142ca:	83 c4 10             	add    esp,0x10
c00142cd:	83 c4 0c             	add    esp,0xc
c00142d0:	c3                   	ret    

c00142d1 <Vm::inbv(unsigned short)>:
c00142d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142da:	75 06                	jne    c00142e2 <Vm::inbv(unsigned short)+0x11>
c00142dc:	a0 cc 61 02 c0       	mov    al,ds:0xc00261cc
c00142e1:	c3                   	ret    
c00142e2:	ec                   	in     al,dx
c00142e3:	c3                   	ret    

c00142e4 <Vm::outbv(unsigned short, unsigned char)>:
c00142e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142f1:	75 25                	jne    c0014318 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00142f3:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c00142f9:	8d 51 01             	lea    edx,[ecx+0x1]
c00142fc:	88 81 e0 61 02 c0    	mov    BYTE PTR [ecx-0x3ffd9e20],al
c0014302:	89 15 cc 61 02 c0    	mov    DWORD PTR ds:0xc00261cc,edx
c0014308:	83 fa 20             	cmp    edx,0x20
c001430b:	75 0c                	jne    c0014319 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001430d:	c7 05 cc 61 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x1f
c0014317:	c3                   	ret    
c0014318:	ee                   	out    dx,al
c0014319:	c3                   	ret    

c001431a <Vm::realToLinear(unsigned short, unsigned short)>:
c001431a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001431f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014324:	c1 e0 04             	shl    eax,0x4
c0014327:	01 d0                	add    eax,edx
c0014329:	c3                   	ret    

c001432a <Vm::getSegment(unsigned int)>:
c001432a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001432e:	c1 e8 10             	shr    eax,0x10
c0014331:	c3                   	ret    

c0014332 <Vm::getOffset(unsigned int)>:
c0014332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014336:	c3                   	ret    

c0014337 <Vm::mainloop2()>:
c0014337:	83 ec 18             	sub    esp,0x18
c001433a:	fa                   	cli    
c001433b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014341:	6a 02                	push   0x2
c0014343:	c6 05 c5 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c5,0x1
c001434a:	e8 19 f6 ff ff       	call   c0013968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001434f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014354:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014358:	52                   	push   edx
c0014359:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001435d:	52                   	push   edx
c001435e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014362:	52                   	push   edx
c0014363:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014367:	50                   	push   eax
c0014368:	e8 a2 be fe ff       	call   c000020f <goToVM86>
c001436d:	83 c4 2c             	add    esp,0x2c
c0014370:	c3                   	ret    

c0014371 <Vm::mainVm8086Loop(void*)>:
c0014371:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014376:	48                   	dec    eax
c0014377:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001437c:	75 01                	jne    c001437f <Vm::mainVm8086Loop(void*)+0xe>
c001437e:	fb                   	sti    
c001437f:	eb b6                	jmp    c0014337 <Vm::mainloop2()>

c0014381 <Vm::mainloop3(unsigned long)>:
c0014381:	83 ec 18             	sub    esp,0x18
c0014384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014388:	fa                   	cli    
c0014389:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001438f:	6a 02                	push   0x2
c0014391:	c6 05 c4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c4,0x1
c0014398:	a3 c0 61 02 c0       	mov    ds:0xc00261c0,eax
c001439d:	e8 c6 f5 ff ff       	call   c0013968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143a2:	83 c4 1c             	add    esp,0x1c
c00143a5:	eb 90                	jmp    c0014337 <Vm::mainloop2()>

c00143a7 <Vm::initialise8086()>:
c00143a7:	83 ec 0c             	sub    esp,0xc
c00143aa:	68 80 00 00 00       	push   0x80
c00143af:	6a 00                	push   0x0
c00143b1:	68 71 43 01 c0       	push   0xc0014371
c00143b6:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00143bc:	e8 b3 f1 ff ff       	call   c0013574 <Process::createThread(void (*)(void*), void*, int)>
c00143c1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143c8:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c00143cd:	68 00 01 00 00       	push   0x100
c00143d2:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00143d7:	6a 00                	push   0x0
c00143d9:	6a 00                	push   0x0
c00143db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143e1:	e8 6c 58 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143e6:	83 c4 2c             	add    esp,0x2c
c00143e9:	c3                   	ret    

c00143ea <Vm::finish8086()>:
c00143ea:	53                   	push   ebx
c00143eb:	83 ec 08             	sub    esp,0x8
c00143ee:	fa                   	cli    
c00143ef:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00143f5:	80 3d c4 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c4,0x0
c00143fc:	75 15                	jne    c0014413 <Vm::finish8086()+0x29>
c00143fe:	e8 91 f3 ff ff       	call   c0013794 <schedule()>
c0014403:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014408:	48                   	dec    eax
c0014409:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001440e:	75 de                	jne    c00143ee <Vm::finish8086()+0x4>
c0014410:	fb                   	sti    
c0014411:	eb db                	jmp    c00143ee <Vm::finish8086()+0x4>
c0014413:	83 ec 0c             	sub    esp,0xc
c0014416:	8b 1d c0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261c0
c001441c:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c0014422:	c6 05 c4 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c4,0x0
c0014429:	e8 2a f8 ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c001442e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014433:	83 c4 10             	add    esp,0x10
c0014436:	8d 50 ff             	lea    edx,[eax-0x1]
c0014439:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001443f:	85 d2                	test   edx,edx
c0014441:	75 01                	jne    c0014444 <Vm::finish8086()+0x5a>
c0014443:	fb                   	sti    
c0014444:	89 d8                	mov    eax,ebx
c0014446:	83 c4 08             	add    esp,0x8
c0014449:	5b                   	pop    ebx
c001444a:	c3                   	ret    

c001444b <Vm::getOutput8086(unsigned char*)>:
c001444b:	57                   	push   edi
c001444c:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c0014452:	56                   	push   esi
c0014453:	be e0 61 02 c0       	mov    esi,0xc00261e0
c0014458:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001445c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001445e:	a1 cc 61 02 c0       	mov    eax,ds:0xc00261cc
c0014463:	5e                   	pop    esi
c0014464:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001446e:	5f                   	pop    edi
c001446f:	c3                   	ret    

c0014470 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014470:	55                   	push   ebp
c0014471:	57                   	push   edi
c0014472:	56                   	push   esi
c0014473:	53                   	push   ebx
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001447b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001447f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014483:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014487:	fa                   	cli    
c0014488:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001448e:	80 3d c5 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c5,0x0
c0014495:	75 15                	jne    c00144ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014497:	e8 f8 f2 ff ff       	call   c0013794 <schedule()>
c001449c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144a1:	48                   	dec    eax
c00144a2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00144a7:	75 de                	jne    c0014487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144a9:	fb                   	sti    
c00144aa:	eb db                	jmp    c0014487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144ac:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c00144b1:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c00144bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144bf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144c7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144cf:	0f b7 ff             	movzx  edi,di
c00144d2:	0f b7 f6             	movzx  esi,si
c00144d5:	50                   	push   eax
c00144d6:	6a 20                	push   0x20
c00144d8:	6a 00                	push   0x0
c00144da:	68 e0 61 02 c0       	push   0xc00261e0
c00144df:	e8 ec bf fe ff       	call   c00004d0 <memset>
c00144e4:	5a                   	pop    edx
c00144e5:	59                   	pop    ecx
c00144e6:	57                   	push   edi
c00144e7:	56                   	push   esi
c00144e8:	e8 2d fe ff ff       	call   c001431a <Vm::realToLinear(unsigned short, unsigned short)>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	89 c7                	mov    edi,eax
c00144f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00144fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144fc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014501:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c0014508:	48                   	dec    eax
c0014509:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001450e:	75 01                	jne    c0014511 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014510:	fb                   	sti    
c0014511:	83 ec 0c             	sub    esp,0xc
c0014514:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001451a:	e8 39 f7 ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c001451f:	83 c4 1c             	add    esp,0x1c
c0014522:	b0 01                	mov    al,0x1
c0014524:	5b                   	pop    ebx
c0014525:	5e                   	pop    esi
c0014526:	5f                   	pop    edi
c0014527:	5d                   	pop    ebp
c0014528:	c3                   	ret    

c0014529 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014529:	55                   	push   ebp
c001452a:	57                   	push   edi
c001452b:	56                   	push   esi
c001452c:	53                   	push   ebx
c001452d:	83 ec 2c             	sub    esp,0x2c
c0014530:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014534:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014538:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001453c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014540:	fa                   	cli    
c0014541:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014547:	0f b6 35 c5 61 02 c0 	movzx  esi,BYTE PTR ds:0xc00261c5
c001454e:	89 f0                	mov    eax,esi
c0014550:	84 c0                	test   al,al
c0014552:	75 1d                	jne    c0014571 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014554:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014558:	e8 37 f2 ff ff       	call   c0013794 <schedule()>
c001455d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014562:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014566:	48                   	dec    eax
c0014567:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001456c:	75 d2                	jne    c0014540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001456e:	fb                   	sti    
c001456f:	eb cf                	jmp    c0014540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014571:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c0014576:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c0014580:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014584:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014588:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001458c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014590:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014594:	50                   	push   eax
c0014595:	6a 20                	push   0x20
c0014597:	6a 00                	push   0x0
c0014599:	68 e0 61 02 c0       	push   0xc00261e0
c001459e:	e8 2d bf fe ff       	call   c00004d0 <memset>
c00145a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145aa:	e8 0a 32 ff ff       	call   c00077b9 <malloc>
c00145af:	83 c4 0c             	add    esp,0xc
c00145b2:	89 c3                	mov    ebx,eax
c00145b4:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00145ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145be:	50                   	push   eax
c00145bf:	e8 04 65 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c00145c4:	83 c4 10             	add    esp,0x10
c00145c7:	85 db                	test   ebx,ebx
c00145c9:	75 0a                	jne    c00145d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145cb:	83 ec 0c             	sub    esp,0xc
c00145ce:	68 ec f2 01 c0       	push   0xc001f2ec
c00145d3:	eb 3e                	jmp    c0014613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145d5:	50                   	push   eax
c00145d6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145da:	50                   	push   eax
c00145db:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145df:	50                   	push   eax
c00145e0:	53                   	push   ebx
c00145e1:	e8 4e 68 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00145ee:	74 0a                	je     c00145fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00145f0:	83 ec 0c             	sub    esp,0xc
c00145f3:	68 00 f3 01 c0       	push   0xc001f300
c00145f8:	eb 19                	jmp    c0014613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145fa:	51                   	push   ecx
c00145fb:	51                   	push   ecx
c00145fc:	6a 01                	push   0x1
c00145fe:	53                   	push   ebx
c00145ff:	e8 84 65 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	85 c0                	test   eax,eax
c0014609:	74 24                	je     c001462f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001460b:	83 ec 0c             	sub    esp,0xc
c001460e:	68 19 f3 01 c0       	push   0xc001f319
c0014613:	e8 57 bc ff ff       	call   c001026f <KePanic(char const*)>
c0014618:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	48                   	dec    eax
c0014621:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014626:	85 c0                	test   eax,eax
c0014628:	75 01                	jne    c001462b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001462a:	fb                   	sti    
c001462b:	31 f6                	xor    esi,esi
c001462d:	eb 58                	jmp    c0014687 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001462f:	0f b7 ed             	movzx  ebp,bp
c0014632:	50                   	push   eax
c0014633:	0f b7 ff             	movzx  edi,di
c0014636:	50                   	push   eax
c0014637:	55                   	push   ebp
c0014638:	57                   	push   edi
c0014639:	e8 dc fc ff ff       	call   c001431a <Vm::realToLinear(unsigned short, unsigned short)>
c001463e:	5a                   	pop    edx
c001463f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014641:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014645:	51                   	push   ecx
c0014646:	50                   	push   eax
c0014647:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001464b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001464f:	53                   	push   ebx
c0014650:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014653:	83 c4 14             	add    esp,0x14
c0014656:	53                   	push   ebx
c0014657:	e8 8a 65 ff ff       	call   c000abe6 <File::close()>
c001465c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014661:	83 c4 10             	add    esp,0x10
c0014664:	48                   	dec    eax
c0014665:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c001466c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014671:	85 c0                	test   eax,eax
c0014673:	75 01                	jne    c0014676 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014675:	fb                   	sti    
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001467f:	e8 d4 f5 ff ff       	call   c0013c58 <unblockTask(ThreadControlBlock*)>
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	83 c4 2c             	add    esp,0x2c
c001468a:	89 f0                	mov    eax,esi
c001468c:	5b                   	pop    ebx
c001468d:	5e                   	pop    esi
c001468e:	5f                   	pop    edi
c001468f:	5d                   	pop    ebp
c0014690:	c3                   	ret    

c0014691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014691:	57                   	push   edi
c0014692:	56                   	push   esi
c0014693:	53                   	push   ebx
c0014694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146a0:	83 e8 06             	sub    eax,0x6
c00146a3:	0f b7 c0             	movzx  eax,ax
c00146a6:	50                   	push   eax
c00146a7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146ac:	50                   	push   eax
c00146ad:	e8 68 fc ff ff       	call   c001431a <Vm::realToLinear(unsigned short, unsigned short)>
c00146b2:	5a                   	pop    edx
c00146b3:	5e                   	pop    esi
c00146b4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146b7:	8d 56 fa             	lea    edx,[esi-0x6]
c00146ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146c0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146c3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146c6:	83 c2 02             	add    edx,0x2
c00146c9:	66 89 10             	mov    WORD PTR [eax],dx
c00146cc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146d3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146d6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146da:	89 d6                	mov    esi,edx
c00146dc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146e2:	66 81 e6 ff fd       	and    si,0xfdff
c00146e7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146eb:	74 07                	je     c00146f4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00146ed:	89 d6                	mov    esi,edx
c00146ef:	66 81 ce 00 02       	or     si,0x200
c00146f4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00146f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146fd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014701:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014709:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001470c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014714:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014717:	5b                   	pop    ebx
c0014718:	5e                   	pop    esi
c0014719:	5f                   	pop    edi
c001471a:	c3                   	ret    

c001471b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001471b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014720:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014725:	c1 e0 04             	shl    eax,0x4
c0014728:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001472b:	c3                   	ret    

c001472c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001472c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014731:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014736:	c1 e0 04             	shl    eax,0x4
c0014739:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001473d:	c3                   	ret    

c001473e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001473e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014743:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014748:	c1 e0 04             	shl    eax,0x4
c001474b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001474e:	c3                   	ret    

c001474f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001474f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014754:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014759:	c1 e0 04             	shl    eax,0x4
c001475c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014760:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014763:	c3                   	ret    

c0014764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001476e:	c1 e0 04             	shl    eax,0x4
c0014771:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014775:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014779:	c3                   	ret    

c001477a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001477a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001477f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014784:	c1 e0 04             	shl    eax,0x4
c0014787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001478b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001478e:	c3                   	ret    

c001478f <Vm::faultHandler(regs*)>:
c001478f:	55                   	push   ebp
c0014790:	57                   	push   edi
c0014791:	56                   	push   esi
c0014792:	53                   	push   ebx
c0014793:	83 ec 1c             	sub    esp,0x1c
c0014796:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001479a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001479d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147a1:	0f b7 f8             	movzx  edi,ax
c00147a4:	52                   	push   edx
c00147a5:	0f b7 c0             	movzx  eax,ax
c00147a8:	50                   	push   eax
c00147a9:	e8 6c fb ff ff       	call   c001431a <Vm::realToLinear(unsigned short, unsigned short)>
c00147ae:	5a                   	pop    edx
c00147af:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147b2:	59                   	pop    ecx
c00147b3:	89 c1                	mov    ecx,eax
c00147b5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147c5:	0f b7 c5             	movzx  eax,bp
c00147c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147d4:	e8 41 fb ff ff       	call   c001431a <Vm::realToLinear(unsigned short, unsigned short)>
c00147d9:	5e                   	pop    esi
c00147da:	be 06 00 00 00       	mov    esi,0x6
c00147df:	5a                   	pop    edx
c00147e0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147e5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147ea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00147ed:	80 fa 9d             	cmp    dl,0x9d
c00147f0:	0f 84 2c 02 00 00    	je     c0014a22 <Vm::faultHandler(regs*)+0x293>
c00147f6:	0f 87 91 00 00 00    	ja     c001488d <Vm::faultHandler(regs*)+0xfe>
c00147fc:	80 fa 66             	cmp    dl,0x66
c00147ff:	0f 84 98 01 00 00    	je     c001499d <Vm::faultHandler(regs*)+0x20e>
c0014805:	77 47                	ja     c001484e <Vm::faultHandler(regs*)+0xbf>
c0014807:	80 fa 36             	cmp    dl,0x36
c001480a:	0f 84 80 01 00 00    	je     c0014990 <Vm::faultHandler(regs*)+0x201>
c0014810:	77 1a                	ja     c001482c <Vm::faultHandler(regs*)+0x9d>
c0014812:	80 fa 26             	cmp    dl,0x26
c0014815:	0f 84 4e 01 00 00    	je     c0014969 <Vm::faultHandler(regs*)+0x1da>
c001481b:	80 fa 2e             	cmp    dl,0x2e
c001481e:	0f 85 e2 05 00 00    	jne    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014824:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014827:	31 f6                	xor    esi,esi
c0014829:	41                   	inc    ecx
c001482a:	eb be                	jmp    c00147ea <Vm::faultHandler(regs*)+0x5b>
c001482c:	80 fa 64             	cmp    dl,0x64
c001482f:	0f 84 41 01 00 00    	je     c0014976 <Vm::faultHandler(regs*)+0x1e7>
c0014835:	0f 87 48 01 00 00    	ja     c0014983 <Vm::faultHandler(regs*)+0x1f4>
c001483b:	80 fa 3e             	cmp    dl,0x3e
c001483e:	0f 85 c2 05 00 00    	jne    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014844:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014847:	be 01 00 00 00       	mov    esi,0x1
c001484c:	eb db                	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c001484e:	80 fa 6d             	cmp    dl,0x6d
c0014851:	0f 84 ec 02 00 00    	je     c0014b43 <Vm::faultHandler(regs*)+0x3b4>
c0014857:	77 17                	ja     c0014870 <Vm::faultHandler(regs*)+0xe1>
c0014859:	80 fa 67             	cmp    dl,0x67
c001485c:	0f 84 48 01 00 00    	je     c00149aa <Vm::faultHandler(regs*)+0x21b>
c0014862:	80 fa 6c             	cmp    dl,0x6c
c0014865:	0f 84 69 02 00 00    	je     c0014ad4 <Vm::faultHandler(regs*)+0x345>
c001486b:	e9 96 05 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014870:	80 fa 6f             	cmp    dl,0x6f
c0014873:	0f 84 f4 03 00 00    	je     c0014c6d <Vm::faultHandler(regs*)+0x4de>
c0014879:	0f 82 59 03 00 00    	jb     c0014bd8 <Vm::faultHandler(regs*)+0x449>
c001487f:	80 fa 9c             	cmp    dl,0x9c
c0014882:	0f 84 2f 01 00 00    	je     c00149b7 <Vm::faultHandler(regs*)+0x228>
c0014888:	e9 79 05 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x677>
c001488d:	80 fa ec             	cmp    dl,0xec
c0014890:	0f 84 14 05 00 00    	je     c0014daa <Vm::faultHandler(regs*)+0x61b>
c0014896:	77 7b                	ja     c0014913 <Vm::faultHandler(regs*)+0x184>
c0014898:	80 fa e4             	cmp    dl,0xe4
c001489b:	0f 84 93 04 00 00    	je     c0014d34 <Vm::faultHandler(regs*)+0x5a5>
c00148a1:	77 53                	ja     c00148f6 <Vm::faultHandler(regs*)+0x167>
c00148a3:	80 fa cd             	cmp    dl,0xcd
c00148a6:	0f 84 d9 01 00 00    	je     c0014a85 <Vm::faultHandler(regs*)+0x2f6>
c00148ac:	80 fa cf             	cmp    dl,0xcf
c00148af:	0f 85 51 05 00 00    	jne    c0014e06 <Vm::faultHandler(regs*)+0x677>
c00148b5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148bb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148bf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148c2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00148cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148d9:	66 c1 e8 09          	shr    ax,0x9
c00148dd:	83 e0 01             	and    eax,0x1
c00148e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148e6:	83 c0 06             	add    eax,0x6
c00148e9:	25 ff ff 00 00       	and    eax,0xffff
c00148ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148f1:	e9 0c 05 00 00       	jmp    c0014e02 <Vm::faultHandler(regs*)+0x673>
c00148f6:	80 fa e6             	cmp    dl,0xe6
c00148f9:	0f 84 7f 04 00 00    	je     c0014d7e <Vm::faultHandler(regs*)+0x5ef>
c00148ff:	0f 82 4b 04 00 00    	jb     c0014d50 <Vm::faultHandler(regs*)+0x5c1>
c0014905:	80 fa e7             	cmp    dl,0xe7
c0014908:	0f 84 87 04 00 00    	je     c0014d95 <Vm::faultHandler(regs*)+0x606>
c001490e:	e9 f3 04 00 00       	jmp    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014913:	80 fa ef             	cmp    dl,0xef
c0014916:	0f 84 d1 04 00 00    	je     c0014ded <Vm::faultHandler(regs*)+0x65e>
c001491c:	77 28                	ja     c0014946 <Vm::faultHandler(regs*)+0x1b7>
c001491e:	80 fa ed             	cmp    dl,0xed
c0014921:	0f 84 9f 04 00 00    	je     c0014dc6 <Vm::faultHandler(regs*)+0x637>
c0014927:	80 fa ee             	cmp    dl,0xee
c001492a:	0f 85 d6 04 00 00    	jne    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014930:	50                   	push   eax
c0014931:	50                   	push   eax
c0014932:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014936:	50                   	push   eax
c0014937:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001493b:	50                   	push   eax
c001493c:	e8 a3 f9 ff ff       	call   c00142e4 <Vm::outbv(unsigned short, unsigned char)>
c0014941:	e9 9f 04 00 00       	jmp    c0014de5 <Vm::faultHandler(regs*)+0x656>
c0014946:	80 fa fa             	cmp    dl,0xfa
c0014949:	0f 84 69 01 00 00    	je     c0014ab8 <Vm::faultHandler(regs*)+0x329>
c001494f:	80 fa fb             	cmp    dl,0xfb
c0014952:	0f 84 6e 01 00 00    	je     c0014ac6 <Vm::faultHandler(regs*)+0x337>
c0014958:	80 fa f3             	cmp    dl,0xf3
c001495b:	0f 85 a5 04 00 00    	jne    c0014e06 <Vm::faultHandler(regs*)+0x677>
c0014961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014964:	e9 c0 fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c0014969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001496c:	be 02 00 00 00       	mov    esi,0x2
c0014971:	e9 b3 fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c0014976:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014979:	be 03 00 00 00       	mov    esi,0x3
c001497e:	e9 a6 fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c0014983:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014986:	be 04 00 00 00       	mov    esi,0x4
c001498b:	e9 99 fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c0014990:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014993:	be 05 00 00 00       	mov    esi,0x5
c0014998:	e9 8c fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c001499d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149a5:	e9 7f fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c00149aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ad:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149b2:	e9 72 fe ff ff       	jmp    c0014829 <Vm::faultHandler(regs*)+0x9a>
c00149b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149c3:	74 30                	je     c00149f5 <Vm::faultHandler(regs*)+0x266>
c00149c5:	83 e9 04             	sub    ecx,0x4
c00149c8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149ce:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149d4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149e0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149e4:	0f 84 15 04 00 00    	je     c0014dff <Vm::faultHandler(regs*)+0x670>
c00149ea:	80 ce 02             	or     dh,0x2
c00149ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149f0:	e9 0a 04 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c00149f5:	83 e9 02             	sub    ecx,0x2
c00149f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a01:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a05:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a0b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a0f:	74 05                	je     c0014a16 <Vm::faultHandler(regs*)+0x287>
c0014a11:	80 ce 02             	or     dh,0x2
c0014a14:	eb 03                	jmp    c0014a19 <Vm::faultHandler(regs*)+0x28a>
c0014a16:	80 e6 fd             	and    dh,0xfd
c0014a19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a1d:	e9 dd 03 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014a22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a27:	74 2a                	je     c0014a53 <Vm::faultHandler(regs*)+0x2c4>
c0014a29:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a31:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a37:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a42:	c1 e8 09             	shr    eax,0x9
c0014a45:	83 e0 01             	and    eax,0x1
c0014a48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a4e:	83 c0 04             	add    eax,0x4
c0014a51:	eb 25                	jmp    c0014a78 <Vm::faultHandler(regs*)+0x2e9>
c0014a53:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a56:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a68:	66 c1 e8 09          	shr    ax,0x9
c0014a6c:	83 e0 01             	and    eax,0x1
c0014a6f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a72:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a75:	83 c0 02             	add    eax,0x2
c0014a78:	25 ff ff 00 00       	and    eax,0xffff
c0014a7d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a80:	e9 7a 03 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014a85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a89:	3c ee                	cmp    al,0xee
c0014a8b:	75 10                	jne    c0014a9d <Vm::faultHandler(regs*)+0x30e>
c0014a8d:	83 ec 0c             	sub    esp,0xc
c0014a90:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a93:	e8 e9 f8 ff ff       	call   c0014381 <Vm::mainloop3(unsigned long)>
c0014a98:	e9 4b 03 00 00       	jmp    c0014de8 <Vm::faultHandler(regs*)+0x659>
c0014a9d:	83 ec 0c             	sub    esp,0xc
c0014aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aa8:	51                   	push   ecx
c0014aa9:	50                   	push   eax
c0014aaa:	53                   	push   ebx
c0014aab:	e8 e1 fb ff ff       	call   c0014691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ab0:	83 c4 20             	add    esp,0x20
c0014ab3:	e9 4a 03 00 00       	jmp    c0014e02 <Vm::faultHandler(regs*)+0x673>
c0014ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014abd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ac1:	e9 39 03 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014acb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014acf:	e9 2b 03 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014ad4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014ad7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014adc:	74 2b                	je     c0014b09 <Vm::faultHandler(regs*)+0x37a>
c0014ade:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014ae5:	76 22                	jbe    c0014b09 <Vm::faultHandler(regs*)+0x37a>
c0014ae7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014aeb:	50                   	push   eax
c0014aec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014af0:	50                   	push   eax
c0014af1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014af5:	50                   	push   eax
c0014af6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014afa:	50                   	push   eax
c0014afb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014aff:	50                   	push   eax
c0014b00:	6a 6c                	push   0x6c
c0014b02:	6a 6c                	push   0x6c
c0014b04:	e9 b9 01 00 00       	jmp    c0014cc2 <Vm::faultHandler(regs*)+0x533>
c0014b09:	83 ec 0c             	sub    esp,0xc
c0014b0c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b10:	0f b7 f6             	movzx  esi,si
c0014b13:	50                   	push   eax
c0014b14:	e8 b8 f7 ff ff       	call   c00142d1 <Vm::inbv(unsigned short)>
c0014b19:	83 c4 0c             	add    esp,0xc
c0014b1c:	0f b6 c0             	movzx  eax,al
c0014b1f:	50                   	push   eax
c0014b20:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b24:	50                   	push   eax
c0014b25:	56                   	push   esi
c0014b26:	e8 24 fc ff ff       	call   c001474f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b2b:	83 c4 10             	add    esp,0x10
c0014b2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b35:	74 03                	je     c0014b3a <Vm::faultHandler(regs*)+0x3ab>
c0014b37:	48                   	dec    eax
c0014b38:	eb 01                	jmp    c0014b3b <Vm::faultHandler(regs*)+0x3ac>
c0014b3a:	40                   	inc    eax
c0014b3b:	0f b7 c0             	movzx  eax,ax
c0014b3e:	e9 8d 00 00 00       	jmp    c0014bd0 <Vm::faultHandler(regs*)+0x441>
c0014b43:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b4e:	74 29                	je     c0014b79 <Vm::faultHandler(regs*)+0x3ea>
c0014b50:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b55:	76 22                	jbe    c0014b79 <Vm::faultHandler(regs*)+0x3ea>
c0014b57:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b5b:	50                   	push   eax
c0014b5c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b60:	50                   	push   eax
c0014b61:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b65:	50                   	push   eax
c0014b66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b6a:	50                   	push   eax
c0014b6b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b6f:	50                   	push   eax
c0014b70:	6a 6d                	push   0x6d
c0014b72:	6a 6d                	push   0x6d
c0014b74:	e9 49 01 00 00       	jmp    c0014cc2 <Vm::faultHandler(regs*)+0x533>
c0014b79:	0f b7 c8             	movzx  ecx,ax
c0014b7c:	0f b7 f6             	movzx  esi,si
c0014b7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b87:	74 20                	je     c0014ba9 <Vm::faultHandler(regs*)+0x41a>
c0014b89:	ed                   	in     eax,dx
c0014b8a:	55                   	push   ebp
c0014b8b:	50                   	push   eax
c0014b8c:	51                   	push   ecx
c0014b8d:	56                   	push   esi
c0014b8e:	e8 e7 fb ff ff       	call   c001477a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014b93:	83 c4 10             	add    esp,0x10
c0014b96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b9d:	74 05                	je     c0014ba4 <Vm::faultHandler(regs*)+0x415>
c0014b9f:	83 e8 04             	sub    eax,0x4
c0014ba2:	eb 27                	jmp    c0014bcb <Vm::faultHandler(regs*)+0x43c>
c0014ba4:	83 c0 04             	add    eax,0x4
c0014ba7:	eb 22                	jmp    c0014bcb <Vm::faultHandler(regs*)+0x43c>
c0014ba9:	66 ed                	in     ax,dx
c0014bab:	0f b7 c0             	movzx  eax,ax
c0014bae:	57                   	push   edi
c0014baf:	50                   	push   eax
c0014bb0:	51                   	push   ecx
c0014bb1:	56                   	push   esi
c0014bb2:	e8 ad fb ff ff       	call   c0014764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bb7:	83 c4 10             	add    esp,0x10
c0014bba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bc1:	74 05                	je     c0014bc8 <Vm::faultHandler(regs*)+0x439>
c0014bc3:	83 e8 02             	sub    eax,0x2
c0014bc6:	eb 03                	jmp    c0014bcb <Vm::faultHandler(regs*)+0x43c>
c0014bc8:	83 c0 02             	add    eax,0x2
c0014bcb:	25 ff ff 00 00       	and    eax,0xffff
c0014bd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014bd3:	e9 27 02 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014bd8:	8d 46 ff             	lea    eax,[esi-0x1]
c0014bdb:	3c 05                	cmp    al,0x5
c0014bdd:	77 24                	ja     c0014c03 <Vm::faultHandler(regs*)+0x474>
c0014bdf:	0f b6 c0             	movzx  eax,al
c0014be2:	ff 24 85 8c f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c74]
c0014be9:	0f b7 fd             	movzx  edi,bp
c0014bec:	eb 15                	jmp    c0014c03 <Vm::faultHandler(regs*)+0x474>
c0014bee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014bf2:	eb 0f                	jmp    c0014c03 <Vm::faultHandler(regs*)+0x474>
c0014bf4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014bf8:	eb 09                	jmp    c0014c03 <Vm::faultHandler(regs*)+0x474>
c0014bfa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014bfe:	eb 03                	jmp    c0014c03 <Vm::faultHandler(regs*)+0x474>
c0014c00:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c06:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c0b:	74 29                	je     c0014c36 <Vm::faultHandler(regs*)+0x4a7>
c0014c0d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c12:	76 22                	jbe    c0014c36 <Vm::faultHandler(regs*)+0x4a7>
c0014c14:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c18:	50                   	push   eax
c0014c19:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c1d:	50                   	push   eax
c0014c1e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c22:	50                   	push   eax
c0014c23:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c27:	50                   	push   eax
c0014c28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c2c:	50                   	push   eax
c0014c2d:	6a 6e                	push   0x6e
c0014c2f:	6a 6e                	push   0x6e
c0014c31:	e9 8c 00 00 00       	jmp    c0014cc2 <Vm::faultHandler(regs*)+0x533>
c0014c36:	0f b7 c0             	movzx  eax,ax
c0014c39:	52                   	push   edx
c0014c3a:	52                   	push   edx
c0014c3b:	50                   	push   eax
c0014c3c:	57                   	push   edi
c0014c3d:	e8 d9 fa ff ff       	call   c001471b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c42:	59                   	pop    ecx
c0014c43:	0f b6 c0             	movzx  eax,al
c0014c46:	5e                   	pop    esi
c0014c47:	50                   	push   eax
c0014c48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c4c:	50                   	push   eax
c0014c4d:	e8 92 f6 ff ff       	call   c00142e4 <Vm::outbv(unsigned short, unsigned char)>
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c5c:	74 03                	je     c0014c61 <Vm::faultHandler(regs*)+0x4d2>
c0014c5e:	48                   	dec    eax
c0014c5f:	eb 01                	jmp    c0014c62 <Vm::faultHandler(regs*)+0x4d3>
c0014c61:	40                   	inc    eax
c0014c62:	0f b7 c0             	movzx  eax,ax
c0014c65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c68:	e9 92 01 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014c6d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c70:	3c 05                	cmp    al,0x5
c0014c72:	77 1f                	ja     c0014c93 <Vm::faultHandler(regs*)+0x504>
c0014c74:	0f b6 c0             	movzx  eax,al
c0014c77:	ff 24 85 a4 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c5c]
c0014c7e:	89 ef                	mov    edi,ebp
c0014c80:	eb 11                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x504>
c0014c82:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c85:	eb 0c                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x504>
c0014c87:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c8a:	eb 07                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x504>
c0014c8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014c8f:	eb 02                	jmp    c0014c93 <Vm::faultHandler(regs*)+0x504>
c0014c91:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014c93:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014c96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c9b:	74 37                	je     c0014cd4 <Vm::faultHandler(regs*)+0x545>
c0014c9d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014ca3:	76 2f                	jbe    c0014cd4 <Vm::faultHandler(regs*)+0x545>
c0014ca5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ca9:	50                   	push   eax
c0014caa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cae:	50                   	push   eax
c0014caf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cb3:	50                   	push   eax
c0014cb4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cb8:	50                   	push   eax
c0014cb9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cbd:	50                   	push   eax
c0014cbe:	6a 6f                	push   0x6f
c0014cc0:	6a 6f                	push   0x6f
c0014cc2:	68 32 f3 01 c0       	push   0xc001f332
c0014cc7:	e8 86 58 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014ccc:	83 c4 20             	add    esp,0x20
c0014ccf:	e9 86 01 00 00       	jmp    c0014e5a <Vm::faultHandler(regs*)+0x6cb>
c0014cd4:	0f b7 d7             	movzx  edx,di
c0014cd7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014cda:	0f b7 c6             	movzx  eax,si
c0014cdd:	81 e1 00 04 00 00    	and    ecx,0x400
c0014ce3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014ce6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ceb:	74 1d                	je     c0014d0a <Vm::faultHandler(regs*)+0x57b>
c0014ced:	55                   	push   ebp
c0014cee:	55                   	push   ebp
c0014cef:	50                   	push   eax
c0014cf0:	52                   	push   edx
c0014cf1:	e8 48 fa ff ff       	call   c001473e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014cf6:	83 c4 10             	add    esp,0x10
c0014cf9:	89 fa                	mov    edx,edi
c0014cfb:	ef                   	out    dx,eax
c0014cfc:	85 c9                	test   ecx,ecx
c0014cfe:	74 05                	je     c0014d05 <Vm::faultHandler(regs*)+0x576>
c0014d00:	83 ee 04             	sub    esi,0x4
c0014d03:	eb 21                	jmp    c0014d26 <Vm::faultHandler(regs*)+0x597>
c0014d05:	83 c6 04             	add    esi,0x4
c0014d08:	eb 1c                	jmp    c0014d26 <Vm::faultHandler(regs*)+0x597>
c0014d0a:	55                   	push   ebp
c0014d0b:	55                   	push   ebp
c0014d0c:	50                   	push   eax
c0014d0d:	52                   	push   edx
c0014d0e:	e8 19 fa ff ff       	call   c001472c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d13:	83 c4 10             	add    esp,0x10
c0014d16:	89 fa                	mov    edx,edi
c0014d18:	66 ef                	out    dx,ax
c0014d1a:	85 c9                	test   ecx,ecx
c0014d1c:	74 05                	je     c0014d23 <Vm::faultHandler(regs*)+0x594>
c0014d1e:	83 ee 02             	sub    esi,0x2
c0014d21:	eb 03                	jmp    c0014d26 <Vm::faultHandler(regs*)+0x597>
c0014d23:	83 c6 02             	add    esi,0x2
c0014d26:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d2c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d2f:	e9 cb 00 00 00       	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014d34:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d3b:	83 ec 0c             	sub    esp,0xc
c0014d3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d42:	50                   	push   eax
c0014d43:	e8 89 f5 ff ff       	call   c00142d1 <Vm::inbv(unsigned short)>
c0014d48:	0f b6 c0             	movzx  eax,al
c0014d4b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d4e:	eb 3f                	jmp    c0014d8f <Vm::faultHandler(regs*)+0x600>
c0014d50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d55:	74 07                	je     c0014d5e <Vm::faultHandler(regs*)+0x5cf>
c0014d57:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d5b:	ed                   	in     eax,dx
c0014d5c:	eb 14                	jmp    c0014d72 <Vm::faultHandler(regs*)+0x5e3>
c0014d5e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d61:	66 31 f6             	xor    si,si
c0014d64:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d6b:	66 ed                	in     ax,dx
c0014d6d:	0f b7 c0             	movzx  eax,ax
c0014d70:	09 f0                	or     eax,esi
c0014d72:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d75:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d79:	e9 84 00 00 00       	jmp    c0014e02 <Vm::faultHandler(regs*)+0x673>
c0014d7e:	52                   	push   edx
c0014d7f:	52                   	push   edx
c0014d80:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d84:	50                   	push   eax
c0014d85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d89:	50                   	push   eax
c0014d8a:	e8 55 f5 ff ff       	call   c00142e4 <Vm::outbv(unsigned short, unsigned char)>
c0014d8f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d93:	eb 53                	jmp    c0014de8 <Vm::faultHandler(regs*)+0x659>
c0014d95:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014d98:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d9c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014da1:	74 03                	je     c0014da6 <Vm::faultHandler(regs*)+0x617>
c0014da3:	ef                   	out    dx,eax
c0014da4:	eb cf                	jmp    c0014d75 <Vm::faultHandler(regs*)+0x5e6>
c0014da6:	66 ef                	out    dx,ax
c0014da8:	eb cb                	jmp    c0014d75 <Vm::faultHandler(regs*)+0x5e6>
c0014daa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014db8:	50                   	push   eax
c0014db9:	e8 13 f5 ff ff       	call   c00142d1 <Vm::inbv(unsigned short)>
c0014dbe:	0f b6 c0             	movzx  eax,al
c0014dc1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dc4:	eb 1f                	jmp    c0014de5 <Vm::faultHandler(regs*)+0x656>
c0014dc6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014dc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dce:	74 03                	je     c0014dd3 <Vm::faultHandler(regs*)+0x644>
c0014dd0:	ed                   	in     eax,dx
c0014dd1:	eb 0d                	jmp    c0014de0 <Vm::faultHandler(regs*)+0x651>
c0014dd3:	66 ed                	in     ax,dx
c0014dd5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014dd8:	0f b7 c0             	movzx  eax,ax
c0014ddb:	66 31 d2             	xor    dx,dx
c0014dde:	09 d0                	or     eax,edx
c0014de0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014de3:	eb 1a                	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014de5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	eb 15                	jmp    c0014e02 <Vm::faultHandler(regs*)+0x673>
c0014ded:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014df0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014df3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014df8:	74 03                	je     c0014dfd <Vm::faultHandler(regs*)+0x66e>
c0014dfa:	ef                   	out    dx,eax
c0014dfb:	eb 02                	jmp    c0014dff <Vm::faultHandler(regs*)+0x670>
c0014dfd:	66 ef                	out    dx,ax
c0014dff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e02:	b0 01                	mov    al,0x1
c0014e04:	eb 56                	jmp    c0014e5c <Vm::faultHandler(regs*)+0x6cd>
c0014e06:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e0a:	50                   	push   eax
c0014e0b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e0f:	50                   	push   eax
c0014e10:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e14:	50                   	push   eax
c0014e15:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e19:	50                   	push   eax
c0014e1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e1e:	50                   	push   eax
c0014e1f:	52                   	push   edx
c0014e20:	52                   	push   edx
c0014e21:	68 5f f3 01 c0       	push   0xc001f35f
c0014e26:	e8 27 57 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014e2b:	83 c4 20             	add    esp,0x20
c0014e2e:	83 ec 0c             	sub    esp,0xc
c0014e31:	6a 60                	push   0x60
c0014e33:	e8 99 f4 ff ff       	call   c00142d1 <Vm::inbv(unsigned short)>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	3c 1c                	cmp    al,0x1c
c0014e3d:	74 04                	je     c0014e43 <Vm::faultHandler(regs*)+0x6b4>
c0014e3f:	3c 5a                	cmp    al,0x5a
c0014e41:	75 eb                	jne    c0014e2e <Vm::faultHandler(regs*)+0x69f>
c0014e43:	3c 5a                	cmp    al,0x5a
c0014e45:	74 04                	je     c0014e4b <Vm::faultHandler(regs*)+0x6bc>
c0014e47:	3c 1c                	cmp    al,0x1c
c0014e49:	75 0f                	jne    c0014e5a <Vm::faultHandler(regs*)+0x6cb>
c0014e4b:	83 ec 0c             	sub    esp,0xc
c0014e4e:	6a 60                	push   0x60
c0014e50:	e8 7c f4 ff ff       	call   c00142d1 <Vm::inbv(unsigned short)>
c0014e55:	83 c4 10             	add    esp,0x10
c0014e58:	eb e9                	jmp    c0014e43 <Vm::faultHandler(regs*)+0x6b4>
c0014e5a:	31 c0                	xor    eax,eax
c0014e5c:	83 c4 1c             	add    esp,0x1c
c0014e5f:	5b                   	pop    ebx
c0014e60:	5e                   	pop    esi
c0014e61:	5f                   	pop    edi
c0014e62:	5d                   	pop    ebp
c0014e63:	c3                   	ret    

c0014e64 <noCopro(unsigned long)>:
c0014e64:	c3                   	ret    

c0014e65 <nmiHandler(regs*, void*)>:
c0014e65:	83 ec 0c             	sub    esp,0xc
c0014e68:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0014e6d:	83 ec 0c             	sub    esp,0xc
c0014e70:	50                   	push   eax
c0014e71:	e8 64 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e76:	83 c4 10             	add    esp,0x10
c0014e79:	90                   	nop
c0014e7a:	83 c4 0c             	add    esp,0xc
c0014e7d:	c3                   	ret    

c0014e7e <doubleFault(regs*, void*)>:
c0014e7e:	55                   	push   ebp
c0014e7f:	89 e5                	mov    ebp,esp
c0014e81:	83 ec 08             	sub    esp,0x8
c0014e84:	83 ec 0c             	sub    esp,0xc
c0014e87:	68 bc f3 01 c0       	push   0xc001f3bc
c0014e8c:	e8 de b3 ff ff       	call   c001026f <KePanic(char const*)>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	90                   	nop
c0014e95:	c9                   	leave  
c0014e96:	c3                   	ret    

c0014e97 <displayDebugInfo(regs*)>:
c0014e97:	83 ec 1c             	sub    esp,0x1c
c0014e9a:	0f 20 c0             	mov    eax,cr0
c0014e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ea1:	0f 20 d0             	mov    eax,cr2
c0014ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ea8:	0f 20 d8             	mov    eax,cr3
c0014eab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014eaf:	0f 20 e0             	mov    eax,cr4
c0014eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ebc:	83 ec 08             	sub    esp,0x8
c0014ebf:	50                   	push   eax
c0014ec0:	68 d8 f3 01 c0       	push   0xc001f3d8
c0014ec5:	e8 88 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014eca:	83 c4 10             	add    esp,0x10
c0014ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ed4:	83 ec 08             	sub    esp,0x8
c0014ed7:	50                   	push   eax
c0014ed8:	68 c9 f3 01 c0       	push   0xc001f3c9
c0014edd:	e8 70 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014eec:	83 ec 08             	sub    esp,0x8
c0014eef:	50                   	push   eax
c0014ef0:	68 d4 f3 01 c0       	push   0xc001f3d4
c0014ef5:	e8 58 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f04:	83 ec 08             	sub    esp,0x8
c0014f07:	50                   	push   eax
c0014f08:	68 e3 f3 01 c0       	push   0xc001f3e3
c0014f0d:	e8 40 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f12:	83 c4 10             	add    esp,0x10
c0014f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f19:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f1c:	83 ec 08             	sub    esp,0x8
c0014f1f:	50                   	push   eax
c0014f20:	68 ee f3 01 c0       	push   0xc001f3ee
c0014f25:	e8 28 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f2a:	83 c4 10             	add    esp,0x10
c0014f2d:	83 ec 08             	sub    esp,0x8
c0014f30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f34:	68 f9 f3 01 c0       	push   0xc001f3f9
c0014f39:	e8 14 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	83 ec 08             	sub    esp,0x8
c0014f44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f48:	68 04 f4 01 c0       	push   0xc001f404
c0014f4d:	e8 00 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014f5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	50                   	push   eax
c0014f64:	e8 8e 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014f71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f77:	83 ec 08             	sub    esp,0x8
c0014f7a:	68 0f f4 01 c0       	push   0xc001f40f
c0014f7f:	50                   	push   eax
c0014f80:	e8 b1 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014f8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f93:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014f98:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014f9d:	83 c2 0c             	add    edx,0xc
c0014fa0:	83 ec 08             	sub    esp,0x8
c0014fa3:	52                   	push   edx
c0014fa4:	50                   	push   eax
c0014fa5:	e8 8c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fb8:	83 ec 08             	sub    esp,0x8
c0014fbb:	68 18 f4 01 c0       	push   0xc001f418
c0014fc0:	50                   	push   eax
c0014fc1:	e8 70 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fd8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014fdb:	83 ec 08             	sub    esp,0x8
c0014fde:	52                   	push   edx
c0014fdf:	50                   	push   eax
c0014fe0:	e8 0b 37 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014fe5:	83 c4 10             	add    esp,0x10
c0014fe8:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff3:	83 ec 08             	sub    esp,0x8
c0014ff6:	68 20 f4 01 c0       	push   0xc001f420
c0014ffb:	50                   	push   eax
c0014ffc:	e8 35 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015001:	83 c4 10             	add    esp,0x10
c0015004:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015009:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001500f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015013:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015016:	83 ec 08             	sub    esp,0x8
c0015019:	52                   	push   edx
c001501a:	50                   	push   eax
c001501b:	e8 d0 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015020:	83 c4 10             	add    esp,0x10
c0015023:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015028:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001502e:	83 ec 08             	sub    esp,0x8
c0015031:	68 28 f4 01 c0       	push   0xc001f428
c0015036:	50                   	push   eax
c0015037:	e8 fa 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015044:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001504a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001504e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015051:	83 ec 08             	sub    esp,0x8
c0015054:	52                   	push   edx
c0015055:	50                   	push   eax
c0015056:	e8 95 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015063:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015069:	83 ec 08             	sub    esp,0x8
c001506c:	68 30 f4 01 c0       	push   0xc001f430
c0015071:	50                   	push   eax
c0015072:	e8 bf 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015077:	83 c4 10             	add    esp,0x10
c001507a:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001507f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015089:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001508c:	83 ec 08             	sub    esp,0x8
c001508f:	52                   	push   edx
c0015090:	50                   	push   eax
c0015091:	e8 5a 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015096:	83 c4 10             	add    esp,0x10
c0015099:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001509e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150a4:	83 ec 08             	sub    esp,0x8
c00150a7:	68 38 f4 01 c0       	push   0xc001f438
c00150ac:	50                   	push   eax
c00150ad:	e8 84 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150c4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150c7:	83 ec 08             	sub    esp,0x8
c00150ca:	52                   	push   edx
c00150cb:	50                   	push   eax
c00150cc:	e8 1f 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150d1:	83 c4 10             	add    esp,0x10
c00150d4:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150df:	83 ec 08             	sub    esp,0x8
c00150e2:	68 40 f4 01 c0       	push   0xc001f440
c00150e7:	50                   	push   eax
c00150e8:	e8 49 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015102:	83 ec 08             	sub    esp,0x8
c0015105:	52                   	push   edx
c0015106:	50                   	push   eax
c0015107:	e8 e4 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001510c:	83 c4 10             	add    esp,0x10
c001510f:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015114:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001511a:	83 ec 08             	sub    esp,0x8
c001511d:	68 48 f4 01 c0       	push   0xc001f448
c0015122:	50                   	push   eax
c0015123:	e8 0e 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015128:	83 c4 10             	add    esp,0x10
c001512b:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015130:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015136:	83 ec 08             	sub    esp,0x8
c0015139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001513d:	50                   	push   eax
c001513e:	e8 ad 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001514b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015151:	83 ec 08             	sub    esp,0x8
c0015154:	68 51 f4 01 c0       	push   0xc001f451
c0015159:	50                   	push   eax
c001515a:	e8 d7 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015167:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001516d:	83 ec 08             	sub    esp,0x8
c0015170:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015174:	50                   	push   eax
c0015175:	e8 76 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015182:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015188:	83 ec 08             	sub    esp,0x8
c001518b:	68 59 f4 01 c0       	push   0xc001f459
c0015190:	50                   	push   eax
c0015191:	e8 a0 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001519e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a4:	83 ec 08             	sub    esp,0x8
c00151a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151ab:	50                   	push   eax
c00151ac:	e8 3f 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	fa                   	cli    
c00151b5:	f4                   	hlt    
c00151b6:	eb fe                	jmp    c00151b6 <displayDebugInfo(regs*)+0x31f>

c00151b8 <HalSystemIdle()>:
c00151b8:	56                   	push   esi
c00151b9:	53                   	push   ebx
c00151ba:	83 ec 14             	sub    esp,0x14
c00151bd:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00151c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151c8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151ce:	83 e0 04             	and    eax,0x4
c00151d1:	84 c0                	test   al,al
c00151d3:	0f 95 c0             	setne  al
c00151d6:	84 c0                	test   al,al
c00151d8:	74 4c                	je     c0015226 <HalSystemIdle()+0x6e>
c00151da:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00151df:	83 ec 08             	sub    esp,0x8
c00151e2:	68 e1 00 00 00       	push   0xe1
c00151e7:	50                   	push   eax
c00151e8:	e8 05 1c ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00151ed:	83 c4 10             	add    esp,0x10
c00151f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151f8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00151fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015201:	83 e2 02             	and    edx,0x2
c0015204:	89 d3                	mov    ebx,edx
c0015206:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001520a:	83 e2 00             	and    edx,0x0
c001520d:	89 d6                	mov    esi,edx
c001520f:	56                   	push   esi
c0015210:	53                   	push   ebx
c0015211:	68 e1 00 00 00       	push   0xe1
c0015216:	50                   	push   eax
c0015217:	e8 02 1c ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	e8 70 af fe ff       	call   c0000194 <doTPAUSE>
c0015224:	eb 01                	jmp    c0015227 <HalSystemIdle()+0x6f>
c0015226:	f4                   	hlt    
c0015227:	90                   	nop
c0015228:	83 c4 14             	add    esp,0x14
c001522b:	5b                   	pop    ebx
c001522c:	5e                   	pop    esi
c001522d:	c3                   	ret    

c001522e <displayProgramFault(char const*)>:
c001522e:	83 ec 0c             	sub    esp,0xc
c0015231:	83 ec 0c             	sub    esp,0xc
c0015234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015238:	e8 15 53 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015245:	8b 00                	mov    eax,DWORD PTR [eax]
c0015247:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001524a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015250:	85 c0                	test   eax,eax
c0015252:	74 21                	je     c0015275 <displayProgramFault(char const*)+0x47>
c0015254:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001525e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015264:	6a 04                	push   0x4
c0015266:	6a 0f                	push   0xf
c0015268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001526c:	50                   	push   eax
c001526d:	e8 36 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	90                   	nop
c0015276:	83 c4 0c             	add    esp,0xc
c0015279:	c3                   	ret    

c001527a <gpFault(regs*, void*)>:
c001527a:	83 ec 1c             	sub    esp,0x1c
c001527d:	c7 05 10 62 02 c0 8f 47 01 c0 	mov    DWORD PTR ds:0xc0026210,0xc001478f
c0015287:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c001528c:	85 c0                	test   eax,eax
c001528e:	74 1c                	je     c00152ac <gpFault(regs*, void*)+0x32>
c0015290:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c0015295:	83 ec 0c             	sub    esp,0xc
c0015298:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001529c:	ff d0                	call   eax
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152aa:	75 2e                	jne    c00152da <gpFault(regs*, void*)+0x60>
c00152ac:	83 ec 0c             	sub    esp,0xc
c00152af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152b3:	e8 df fb ff ff       	call   c0014e97 <displayDebugInfo(regs*)>
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	83 ec 0c             	sub    esp,0xc
c00152be:	68 61 f4 01 c0       	push   0xc001f461
c00152c3:	e8 66 ff ff ff       	call   c001522e <displayProgramFault(char const*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	6a 00                	push   0x0
c00152d0:	e8 af ee ff ff       	call   c0014184 <Thr::terminateFromIRQ(int)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	eb 01                	jmp    c00152db <gpFault(regs*, void*)+0x61>
c00152da:	90                   	nop
c00152db:	83 c4 1c             	add    esp,0x1c
c00152de:	c3                   	ret    

c00152df <pgFault(regs*, void*)>:
c00152df:	83 ec 1c             	sub    esp,0x1c
c00152e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152e6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152e9:	0f 20 d0             	mov    eax,cr2
c00152ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152f4:	83 ec 04             	sub    esp,0x4
c00152f7:	52                   	push   edx
c00152f8:	50                   	push   eax
c00152f9:	68 40 f5 01 c0       	push   0xc001f540
c00152fe:	e8 4f 52 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001530b:	8b 00                	mov    eax,DWORD PTR [eax]
c001530d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015310:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015316:	0f 20 d2             	mov    edx,cr2
c0015319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001531d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	52                   	push   edx
c0015325:	50                   	push   eax
c0015326:	e8 1d 4e ff ff       	call   c000a148 <VAS::tryLoadBackOffDisk(unsigned long)>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	84 c0                	test   al,al
c0015330:	75 2e                	jne    c0015360 <pgFault(regs*, void*)+0x81>
c0015332:	83 ec 0c             	sub    esp,0xc
c0015335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015339:	e8 59 fb ff ff       	call   c0014e97 <displayDebugInfo(regs*)>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	83 ec 0c             	sub    esp,0xc
c0015344:	68 7a f4 01 c0       	push   0xc001f47a
c0015349:	e8 e0 fe ff ff       	call   c001522e <displayProgramFault(char const*)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	83 ec 0c             	sub    esp,0xc
c0015354:	6a 00                	push   0x0
c0015356:	e8 29 ee ff ff       	call   c0014184 <Thr::terminateFromIRQ(int)>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	eb 01                	jmp    c0015361 <pgFault(regs*, void*)+0x82>
c0015360:	90                   	nop
c0015361:	83 c4 1c             	add    esp,0x1c
c0015364:	c3                   	ret    

c0015365 <otherISRHandler(regs*, void*)>:
c0015365:	83 ec 0c             	sub    esp,0xc
c0015368:	83 ec 0c             	sub    esp,0xc
c001536b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001536f:	e8 23 fb ff ff       	call   c0014e97 <displayDebugInfo(regs*)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	83 ec 0c             	sub    esp,0xc
c001537a:	68 68 f5 01 c0       	push   0xc001f568
c001537f:	e8 aa fe ff ff       	call   c001522e <displayProgramFault(char const*)>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	83 ec 0c             	sub    esp,0xc
c001538a:	6a 00                	push   0x0
c001538c:	e8 f3 ed ff ff       	call   c0014184 <Thr::terminateFromIRQ(int)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	90                   	nop
c0015395:	83 c4 0c             	add    esp,0xc
c0015398:	c3                   	ret    

c0015399 <opcodeFault(regs*, void*)>:
c0015399:	55                   	push   ebp
c001539a:	89 e5                	mov    ebp,esp
c001539c:	83 ec 08             	sub    esp,0x8
c001539f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a5:	83 ec 08             	sub    esp,0x8
c00153a8:	50                   	push   eax
c00153a9:	68 85 f4 01 c0       	push   0xc001f485
c00153ae:	e8 9f 51 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00153bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153c7:	84 c0                	test   al,al
c00153c9:	74 21                	je     c00153ec <opcodeFault(regs*, void*)+0x53>
c00153cb:	83 ec 0c             	sub    esp,0xc
c00153ce:	68 90 f5 01 c0       	push   0xc001f590
c00153d3:	e8 7a 51 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e1:	8d 50 19             	lea    edx,[eax+0x19]
c00153e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ea:	eb 2b                	jmp    c0015417 <opcodeFault(regs*, void*)+0x7e>
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153f2:	e8 a0 fa ff ff       	call   c0014e97 <displayDebugInfo(regs*)>
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	83 ec 0c             	sub    esp,0xc
c00153fd:	68 93 f4 01 c0       	push   0xc001f493
c0015402:	e8 27 fe ff ff       	call   c001522e <displayProgramFault(char const*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	6a 00                	push   0x0
c001540f:	e8 70 ed ff ff       	call   c0014184 <Thr::terminateFromIRQ(int)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	c9                   	leave  
c0015418:	c3                   	ret    

c0015419 <i386SaveCoprocessor(void*)>:
c0015419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001541d:	83 c0 3f             	add    eax,0x3f
c0015420:	83 e0 c0             	and    eax,0xffffffc0
c0015423:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015427:	ff 25 0c 62 02 c0    	jmp    DWORD PTR ds:0xc002620c

c001542d <i386LoadCoprocessor(void*)>:
c001542d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015431:	83 c0 3f             	add    eax,0x3f
c0015434:	83 e0 c0             	and    eax,0xffffffc0
c0015437:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001543b:	ff 25 08 62 02 c0    	jmp    DWORD PTR ds:0xc0026208

c0015441 <x87EmulHandler(regs*, void*)>:
c0015441:	53                   	push   ebx
c0015442:	83 ec 08             	sub    esp,0x8
c0015445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001544e:	74 10                	je     c0015460 <x87EmulHandler(regs*, void*)+0x1f>
c0015450:	83 ec 0c             	sub    esp,0xc
c0015453:	68 a0 f4 01 c0       	push   0xc001f4a0
c0015458:	e8 12 ae ff ff       	call   c001026f <KePanic(char const*)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	0f 20 c0             	mov    eax,cr0
c0015463:	a8 08                	test   al,0x8
c0015465:	74 59                	je     c00154c0 <x87EmulHandler(regs*, void*)+0x7f>
c0015467:	0f 06                	clts   
c0015469:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c001546e:	85 c0                	test   eax,eax
c0015470:	74 0e                	je     c0015480 <x87EmulHandler(regs*, void*)+0x3f>
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015478:	e8 9c ff ff ff       	call   c0015419 <i386SaveCoprocessor(void*)>
c001547d:	83 c4 10             	add    esp,0x10
c0015480:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015486:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001548a:	75 12                	jne    c001549e <x87EmulHandler(regs*, void*)+0x5d>
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	68 40 02 00 00       	push   0x240
c0015494:	e8 20 23 ff ff       	call   c00077b9 <malloc>
c0015499:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001549c:	eb 10                	jmp    c00154ae <x87EmulHandler(regs*, void*)+0x6d>
c001549e:	83 ec 0c             	sub    esp,0xc
c00154a1:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c00154a6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154a9:	e8 7f ff ff ff       	call   c001542d <i386LoadCoprocessor(void*)>
c00154ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	a3 04 62 02 c0       	mov    ds:0xc0026204,eax
c00154bb:	83 c4 08             	add    esp,0x8
c00154be:	5b                   	pop    ebx
c00154bf:	c3                   	ret    
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 b4 f4 01 c0       	push   0xc001f4b4
c00154c8:	e8 85 50 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00154cd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154d5:	83 c4 18             	add    esp,0x18
c00154d8:	5b                   	pop    ebx
c00154d9:	e9 a6 ec ff ff       	jmp    c0014184 <Thr::terminateFromIRQ(int)>

c00154de <HalInitialiseCoprocessor()>:
c00154de:	83 ec 10             	sub    esp,0x10
c00154e1:	c7 05 04 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026204,0x0
c00154eb:	6a 00                	push   0x0
c00154ed:	68 41 54 01 c0       	push   0xc0015441
c00154f2:	6a 07                	push   0x7
c00154f4:	e8 cb 69 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154f9:	e8 a2 6c 00 00       	call   c001c1a0 <avxDetect>
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	85 c0                	test   eax,eax
c0015503:	74 1c                	je     c0015521 <HalInitialiseCoprocessor()+0x43>
c0015505:	c7 05 0c 62 02 c0 ca c1 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c1ca
c001550f:	c7 05 08 62 02 c0 db c1 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c1db
c0015519:	83 c4 0c             	add    esp,0xc
c001551c:	e9 cb 6c 00 00       	jmp    c001c1ec <avxInit>
c0015521:	e8 5a 6f 00 00       	call   c001c480 <absolutelyNoChanceInHell>
c0015526:	85 c0                	test   eax,eax
c0015528:	74 1c                	je     c0015546 <HalInitialiseCoprocessor()+0x68>
c001552a:	c7 05 0c 62 02 c0 98 c4 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c498
c0015534:	c7 05 08 62 02 c0 a0 c4 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c4a0
c001553e:	83 c4 0c             	add    esp,0xc
c0015541:	e9 62 6f 00 00       	jmp    c001c4a8 <sseInit>
c0015546:	e8 7b 6f 00 00       	call   c001c4c6 <x87Detect>
c001554b:	85 c0                	test   eax,eax
c001554d:	74 1c                	je     c001556b <HalInitialiseCoprocessor()+0x8d>
c001554f:	c7 05 0c 62 02 c0 e1 c4 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c4e1
c0015559:	c7 05 08 62 02 c0 e8 c4 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c4e8
c0015563:	83 c4 0c             	add    esp,0xc
c0015566:	e9 84 6f 00 00       	jmp    c001c4ef <x87Init>
c001556b:	c7 05 0c 62 02 c0 64 4e 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc0014e64
c0015575:	c7 05 08 62 02 c0 64 4e 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc0014e64
c001557f:	0f 20 c0             	mov    eax,cr0
c0015582:	83 c8 04             	or     eax,0x4
c0015585:	0f 22 c0             	mov    cr0,eax
c0015588:	83 c4 0c             	add    esp,0xc
c001558b:	c3                   	ret    

c001558c <HalPanic(char const*)>:
c001558c:	53                   	push   ebx
c001558d:	83 ec 10             	sub    esp,0x10
c0015590:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015594:	fa                   	cli    
c0015595:	53                   	push   ebx
c0015596:	68 ca f4 01 c0       	push   0xc001f4ca
c001559b:	e8 b2 4f ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00155a0:	83 c4 0c             	add    esp,0xc
c00155a3:	6a 01                	push   0x1
c00155a5:	6a 0f                	push   0xf
c00155a7:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155ad:	e8 98 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155b2:	58                   	pop    eax
c00155b3:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155b9:	e8 84 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155be:	5a                   	pop    edx
c00155bf:	59                   	pop    ecx
c00155c0:	68 e8 de 01 c0       	push   0xc001dee8
c00155c5:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155cb:	e8 b2 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155d0:	83 c4 0c             	add    esp,0xc
c00155d3:	6a 01                	push   0x1
c00155d5:	6a 0f                	push   0xf
c00155d7:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155dd:	e8 68 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155e2:	58                   	pop    eax
c00155e3:	5a                   	pop    edx
c00155e4:	68 e3 f4 01 c0       	push   0xc001f4e3
c00155e9:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155ef:	e8 42 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00155f4:	83 c4 0c             	add    esp,0xc
c00155f7:	6a 0f                	push   0xf
c00155f9:	6a 01                	push   0x1
c00155fb:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015601:	e8 44 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015606:	59                   	pop    ecx
c0015607:	58                   	pop    eax
c0015608:	68 ec f4 01 c0       	push   0xc001f4ec
c001560d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015613:	e8 1e 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015618:	83 c4 0c             	add    esp,0xc
c001561b:	6a 01                	push   0x1
c001561d:	6a 0f                	push   0xf
c001561f:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015625:	e8 20 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001562a:	58                   	pop    eax
c001562b:	5a                   	pop    edx
c001562c:	68 30 f5 01 c0       	push   0xc001f530
c0015631:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015637:	e8 fa 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001563c:	59                   	pop    ecx
c001563d:	58                   	pop    eax
c001563e:	68 f9 f4 01 c0       	push   0xc001f4f9
c0015643:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015649:	e8 e8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001564e:	58                   	pop    eax
c001564f:	5a                   	pop    edx
c0015650:	68 33 f5 01 c0       	push   0xc001f533
c0015655:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001565b:	e8 d6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015660:	59                   	pop    ecx
c0015661:	58                   	pop    eax
c0015662:	53                   	push   ebx
c0015663:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015669:	e8 c8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001566e:	58                   	pop    eax
c001566f:	5a                   	pop    edx
c0015670:	68 30 f5 01 c0       	push   0xc001f530
c0015675:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001567b:	e8 b6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015680:	83 c4 10             	add    esp,0x10
c0015683:	eb fe                	jmp    c0015683 <HalPanic(char const*)+0xf7>

c0015685 <HalQueryPerformanceCounter()>:
c0015685:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001568a:	31 d2                	xor    edx,edx
c001568c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015692:	31 c0                	xor    eax,eax
c0015694:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001569b:	74 02                	je     c001569f <HalQueryPerformanceCounter()+0x1a>
c001569d:	0f 31                	rdtsc  
c001569f:	c3                   	ret    

c00156a0 <HalInitialise()>:
c00156a0:	53                   	push   ebx
c00156a1:	83 ec 08             	sub    esp,0x8
c00156a4:	e8 4e 6a ff ff       	call   c000c0f7 <setupINTS()>
c00156a9:	80 3d 80 57 02 c0 00 	cmp    BYTE PTR ds:0xc0025780,0x0
c00156b0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00156b5:	75 07                	jne    c00156be <HalInitialise()+0x1e>
c00156b7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156be:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156c5:	c6 05 00 62 02 c0 00 	mov    BYTE PTR ds:0xc0026200,0x0
c00156cc:	e8 a7 02 00 00       	call   c0015978 <picOpen()>
c00156d1:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c00156d8:	74 0a                	je     c00156e4 <HalInitialise()+0x44>
c00156da:	e8 e1 01 00 00       	call   c00158c0 <picDisable()>
c00156df:	e8 38 64 00 00       	call   c001bb1c <apicOpen()>
c00156e4:	bb 0f 00 00 00       	mov    ebx,0xf
c00156e9:	50                   	push   eax
c00156ea:	6a 00                	push   0x0
c00156ec:	68 65 53 01 c0       	push   0xc0015365
c00156f1:	6a 00                	push   0x0
c00156f3:	e8 cc 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156f8:	83 c4 0c             	add    esp,0xc
c00156fb:	6a 00                	push   0x0
c00156fd:	68 65 53 01 c0       	push   0xc0015365
c0015702:	6a 01                	push   0x1
c0015704:	e8 bb 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015709:	83 c4 0c             	add    esp,0xc
c001570c:	6a 00                	push   0x0
c001570e:	68 65 4e 01 c0       	push   0xc0014e65
c0015713:	6a 02                	push   0x2
c0015715:	e8 aa 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001571a:	83 c4 0c             	add    esp,0xc
c001571d:	6a 00                	push   0x0
c001571f:	68 65 53 01 c0       	push   0xc0015365
c0015724:	6a 03                	push   0x3
c0015726:	e8 99 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001572b:	83 c4 0c             	add    esp,0xc
c001572e:	6a 00                	push   0x0
c0015730:	68 65 53 01 c0       	push   0xc0015365
c0015735:	6a 04                	push   0x4
c0015737:	e8 88 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001573c:	83 c4 0c             	add    esp,0xc
c001573f:	6a 00                	push   0x0
c0015741:	68 65 53 01 c0       	push   0xc0015365
c0015746:	6a 05                	push   0x5
c0015748:	e8 77 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001574d:	83 c4 0c             	add    esp,0xc
c0015750:	6a 00                	push   0x0
c0015752:	68 99 53 01 c0       	push   0xc0015399
c0015757:	6a 06                	push   0x6
c0015759:	e8 66 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001575e:	83 c4 0c             	add    esp,0xc
c0015761:	6a 00                	push   0x0
c0015763:	68 7e 4e 01 c0       	push   0xc0014e7e
c0015768:	6a 08                	push   0x8
c001576a:	e8 55 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001576f:	83 c4 0c             	add    esp,0xc
c0015772:	6a 00                	push   0x0
c0015774:	68 65 53 01 c0       	push   0xc0015365
c0015779:	6a 09                	push   0x9
c001577b:	e8 44 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	6a 00                	push   0x0
c0015785:	68 65 53 01 c0       	push   0xc0015365
c001578a:	6a 0a                	push   0xa
c001578c:	e8 33 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015791:	83 c4 0c             	add    esp,0xc
c0015794:	6a 00                	push   0x0
c0015796:	68 65 53 01 c0       	push   0xc0015365
c001579b:	6a 0b                	push   0xb
c001579d:	e8 22 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a2:	83 c4 0c             	add    esp,0xc
c00157a5:	6a 00                	push   0x0
c00157a7:	68 7a 52 01 c0       	push   0xc001527a
c00157ac:	6a 0d                	push   0xd
c00157ae:	e8 11 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b3:	83 c4 0c             	add    esp,0xc
c00157b6:	6a 00                	push   0x0
c00157b8:	68 df 52 01 c0       	push   0xc00152df
c00157bd:	6a 0e                	push   0xe
c00157bf:	e8 00 67 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c4:	83 c4 10             	add    esp,0x10
c00157c7:	50                   	push   eax
c00157c8:	6a 00                	push   0x0
c00157ca:	68 65 53 01 c0       	push   0xc0015365
c00157cf:	53                   	push   ebx
c00157d0:	43                   	inc    ebx
c00157d1:	e8 ee 66 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	83 fb 1e             	cmp    ebx,0x1e
c00157dc:	75 e9                	jne    c00157c7 <HalInitialise()+0x127>
c00157de:	50                   	push   eax
c00157df:	6a 00                	push   0x0
c00157e1:	68 12 14 01 c0       	push   0xc0011412
c00157e6:	6a 60                	push   0x60
c00157e8:	e8 d7 66 ff ff       	call   c000bec4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ed:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00157f2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00157fc:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015803:	e8 b1 1f ff ff       	call   c00077b9 <malloc>
c0015808:	89 04 24             	mov    DWORD PTR [esp],eax
c001580b:	89 c3                	mov    ebx,eax
c001580d:	e8 2e 09 00 00       	call   c0016140 <RTC::RTC()>
c0015812:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001581c:	5a                   	pop    edx
c001581d:	59                   	pop    ecx
c001581e:	53                   	push   ebx
c001581f:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015825:	e8 66 61 ff ff       	call   c000b990 <Device::addChild(Device*)>
c001582a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001582c:	6a 00                	push   0x0
c001582e:	6a 00                	push   0x0
c0015830:	6a 00                	push   0x0
c0015832:	53                   	push   ebx
c0015833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015836:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001583b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015841:	83 c4 28             	add    esp,0x28
c0015844:	5b                   	pop    ebx
c0015845:	c3                   	ret    

c0015846 <HalMakeBeep(int)>:
c0015846:	53                   	push   ebx
c0015847:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001584b:	85 db                	test   ebx,ebx
c001584d:	75 07                	jne    c0015856 <HalMakeBeep(int)+0x10>
c001584f:	e4 61                	in     al,0x61
c0015851:	83 e0 fc             	and    eax,0xfffffffc
c0015854:	eb 26                	jmp    c001587c <HalMakeBeep(int)+0x36>
c0015856:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001585b:	99                   	cdq    
c001585c:	f7 fb                	idiv   ebx
c001585e:	89 c1                	mov    ecx,eax
c0015860:	b0 b6                	mov    al,0xb6
c0015862:	e6 43                	out    0x43,al
c0015864:	88 c8                	mov    al,cl
c0015866:	e6 42                	out    0x42,al
c0015868:	89 c8                	mov    eax,ecx
c001586a:	c1 e8 08             	shr    eax,0x8
c001586d:	e6 42                	out    0x42,al
c001586f:	e4 61                	in     al,0x61
c0015871:	88 c2                	mov    dl,al
c0015873:	83 ca 03             	or     edx,0x3
c0015876:	38 c2                	cmp    dl,al
c0015878:	74 04                	je     c001587e <HalMakeBeep(int)+0x38>
c001587a:	88 d0                	mov    al,dl
c001587c:	e6 61                	out    0x61,al
c001587e:	5b                   	pop    ebx
c001587f:	c3                   	ret    

c0015880 <HalGetRand()>:
c0015880:	31 c0                	xor    eax,eax
c0015882:	c3                   	ret    

c0015883 <HalEndOfInterrupt(int)>:
c0015883:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c001588a:	74 23                	je     c00158af <HalEndOfInterrupt(int)+0x2c>
c001588c:	83 ec 14             	sub    esp,0x14
c001588f:	6a 1b                	push   0x1b
c0015891:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015897:	e8 56 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001589c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158a1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158ab:	83 c4 1c             	add    esp,0x1c
c00158ae:	c3                   	ret    
c00158af:	e9 54 02 00 00       	jmp    c0015b08 <picEOI(int)>

c00158b4 <HalRestart()>:
c00158b4:	c3                   	ret    

c00158b5 <HalShutdown()>:
c00158b5:	c3                   	ret    

c00158b6 <HalSleep()>:
c00158b6:	c3                   	ret    
c00158b7:	90                   	nop

c00158b8 <picIoWait()>:
c00158b8:	eb 00                	jmp    c00158ba <picIoWait()+0x2>
c00158ba:	eb 00                	jmp    c00158bc <picIoWait()+0x4>
c00158bc:	90                   	nop
c00158bd:	c3                   	ret    
c00158be:	66 90                	xchg   ax,ax

c00158c0 <picDisable()>:
c00158c0:	83 ec 10             	sub    esp,0x10
c00158c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158d8:	ee                   	out    dx,al
c00158d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158ee:	ee                   	out    dx,al
c00158ef:	90                   	nop
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	c3                   	ret    

c00158f4 <picGetIRQReg(int)>:
c00158f4:	83 ec 10             	sub    esp,0x10
c00158f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158fb:	25 ff 00 00 00       	and    eax,0xff
c0015900:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015907:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001590b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001590f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015914:	ee                   	out    dx,al
c0015915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015919:	25 ff 00 00 00       	and    eax,0xff
c001591e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015925:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015929:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001592d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015932:	ee                   	out    dx,al
c0015933:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001593a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001593f:	89 c2                	mov    edx,eax
c0015941:	ec                   	in     al,dx
c0015942:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015946:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001594a:	25 ff 00 00 00       	and    eax,0xff
c001594f:	c1 e0 08             	shl    eax,0x8
c0015952:	89 c1                	mov    ecx,eax
c0015954:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001595b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015960:	89 c2                	mov    edx,eax
c0015962:	ec                   	in     al,dx
c0015963:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015967:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001596b:	25 ff 00 00 00       	and    eax,0xff
c0015970:	09 c8                	or     eax,ecx
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	c3                   	ret    
c0015976:	66 90                	xchg   ax,ax

c0015978 <picOpen()>:
c0015978:	83 ec 50             	sub    esp,0x50
c001597b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015982:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015987:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001598b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001598f:	ee                   	out    dx,al
c0015990:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015997:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001599c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159a4:	ee                   	out    dx,al
c00159a5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159ad:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159b5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159c0:	89 c2                	mov    edx,eax
c00159c2:	ec                   	in     al,dx
c00159c3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159cf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159da:	89 c2                	mov    edx,eax
c00159dc:	ec                   	in     al,dx
c00159dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159e9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00159f0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00159f5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00159f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159fd:	ee                   	out    dx,al
c00159fe:	e8 b5 fe ff ff       	call   c00158b8 <picIoWait()>
c0015a03:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a0a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a0f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a17:	ee                   	out    dx,al
c0015a18:	e8 9b fe ff ff       	call   c00158b8 <picIoWait()>
c0015a1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a21:	25 ff 00 00 00       	and    eax,0xff
c0015a26:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a2d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a31:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a39:	ee                   	out    dx,al
c0015a3a:	e8 79 fe ff ff       	call   c00158b8 <picIoWait()>
c0015a3f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a43:	25 ff 00 00 00       	and    eax,0xff
c0015a48:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a4f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a53:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a5b:	ee                   	out    dx,al
c0015a5c:	e8 57 fe ff ff       	call   c00158b8 <picIoWait()>
c0015a61:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a68:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a6d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a75:	ee                   	out    dx,al
c0015a76:	e8 3d fe ff ff       	call   c00158b8 <picIoWait()>
c0015a7b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a82:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a87:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a8f:	ee                   	out    dx,al
c0015a90:	e8 23 fe ff ff       	call   c00158b8 <picIoWait()>
c0015a95:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015a9c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015aa1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015aa5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015aa9:	ee                   	out    dx,al
c0015aaa:	e8 09 fe ff ff       	call   c00158b8 <picIoWait()>
c0015aaf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015ab6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015abb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015abf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ac3:	ee                   	out    dx,al
c0015ac4:	e8 ef fd ff ff       	call   c00158b8 <picIoWait()>
c0015ac9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015acd:	25 ff 00 00 00       	and    eax,0xff
c0015ad2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ad9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015add:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015ae1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015ae5:	ee                   	out    dx,al
c0015ae6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015aea:	25 ff 00 00 00       	and    eax,0xff
c0015aef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015af6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015afa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015afe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b02:	ee                   	out    dx,al
c0015b03:	90                   	nop
c0015b04:	83 c4 50             	add    esp,0x50
c0015b07:	c3                   	ret    

c0015b08 <picEOI(int)>:
c0015b08:	83 ec 10             	sub    esp,0x10
c0015b0b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b10:	75 22                	jne    c0015b34 <picEOI(int)+0x2c>
c0015b12:	6a 0b                	push   0xb
c0015b14:	e8 db fd ff ff       	call   c00158f4 <picGetIRQReg(int)>
c0015b19:	83 c4 04             	add    esp,0x4
c0015b1c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b21:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b26:	25 ff ff 00 00       	and    eax,0xffff
c0015b2b:	25 80 00 00 00       	and    eax,0x80
c0015b30:	74 72                	je     c0015ba4 <picEOI(int)+0x9c>
c0015b32:	66 90                	xchg   ax,ax
c0015b34:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b39:	75 31                	jne    c0015b6c <picEOI(int)+0x64>
c0015b3b:	6a 0b                	push   0xb
c0015b3d:	e8 b2 fd ff ff       	call   c00158f4 <picGetIRQReg(int)>
c0015b42:	83 c4 04             	add    esp,0x4
c0015b45:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b4e:	66 85 c0             	test   ax,ax
c0015b51:	78 19                	js     c0015b6c <picEOI(int)+0x64>
c0015b53:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b5a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b63:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b68:	ee                   	out    dx,al
c0015b69:	eb 3d                	jmp    c0015ba8 <picEOI(int)+0xa0>
c0015b6b:	90                   	nop
c0015b6c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b71:	7e 19                	jle    c0015b8c <picEOI(int)+0x84>
c0015b73:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b7a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b7f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b83:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b88:	ee                   	out    dx,al
c0015b89:	8d 76 00             	lea    esi,[esi+0x0]
c0015b8c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015b93:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015b98:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015b9c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ba1:	ee                   	out    dx,al
c0015ba2:	eb 04                	jmp    c0015ba8 <picEOI(int)+0xa0>
c0015ba4:	90                   	nop
c0015ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	c3                   	ret    

c0015bac <RTC::open(int, int, void*)>:
c0015bac:	31 c0                	xor    eax,eax
c0015bae:	c3                   	ret    
c0015baf:	90                   	nop

c0015bb0 <RTC::close(int, int, void*)>:
c0015bb0:	31 c0                	xor    eax,eax
c0015bb2:	c3                   	ret    
c0015bb3:	90                   	nop

c0015bb4 <RTC::timeInSecondsUTC()>:
c0015bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bb8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bc4:	c3                   	ret    
c0015bc5:	90                   	nop

c0015bc6 <RTC::timeInDatetimeUTC()>:
c0015bc6:	53                   	push   ebx
c0015bc7:	83 ec 14             	sub    esp,0x14
c0015bca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd4:	50                   	push   eax
c0015bd5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bd8:	83 c4 0c             	add    esp,0xc
c0015bdb:	52                   	push   edx
c0015bdc:	50                   	push   eax
c0015bdd:	53                   	push   ebx
c0015bde:	e8 21 5b ff ff       	call   c000b704 <secondsToDatetime(unsigned long long)>
c0015be3:	89 d8                	mov    eax,ebx
c0015be5:	83 c4 14             	add    esp,0x14
c0015be8:	5b                   	pop    ebx
c0015be9:	c2 04 00             	ret    0x4

c0015bec <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bec:	56                   	push   esi
c0015bed:	53                   	push   ebx
c0015bee:	83 ec 14             	sub    esp,0x14
c0015bf1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bf7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015bfa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015bfe:	52                   	push   edx
c0015bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c07:	50                   	push   eax
c0015c08:	e8 f7 5a ff ff       	call   c000b704 <secondsToDatetime(unsigned long long)>
c0015c0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c19:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c21:	89 f0                	mov    eax,esi
c0015c23:	83 c4 20             	add    esp,0x20
c0015c26:	5b                   	pop    ebx
c0015c27:	5e                   	pop    esi
c0015c28:	ff e0                	jmp    eax

c0015c2a <RTC::~RTC()>:
c0015c2a:	83 ec 0c             	sub    esp,0xc
c0015c2d:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c0015c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c36:	89 10                	mov    DWORD PTR [eax],edx
c0015c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	50                   	push   eax
c0015c40:	e8 43 58 ff ff       	call   c000b488 <Clock::~Clock()>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	90                   	nop
c0015c49:	83 c4 0c             	add    esp,0xc
c0015c4c:	c3                   	ret    
c0015c4d:	90                   	nop

c0015c4e <RTC::~RTC()>:
c0015c4e:	83 ec 0c             	sub    esp,0xc
c0015c51:	83 ec 0c             	sub    esp,0xc
c0015c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c58:	e8 cd ff ff ff       	call   c0015c2a <RTC::~RTC()>
c0015c5d:	83 c4 10             	add    esp,0x10
c0015c60:	83 ec 08             	sub    esp,0x8
c0015c63:	68 60 01 00 00       	push   0x160
c0015c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c6c:	e8 eb 47 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 c4 0c             	add    esp,0xc
c0015c77:	c3                   	ret    

c0015c78 <RTC::get_update_in_progress_flag()>:
c0015c78:	83 ec 14             	sub    esp,0x14
c0015c7b:	6a 0a                	push   0xa
c0015c7d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015c83:	e8 1e 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c88:	83 c4 1c             	add    esp,0x1c
c0015c8b:	c0 e8 07             	shr    al,0x7
c0015c8e:	c3                   	ret    
c0015c8f:	90                   	nop

c0015c90 <RTC::completeRTCRefresh()>:
c0015c90:	55                   	push   ebp
c0015c91:	57                   	push   edi
c0015c92:	56                   	push   esi
c0015c93:	53                   	push   ebx
c0015c94:	83 ec 2c             	sub    esp,0x2c
c0015c97:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ca4:	e8 cf ff ff ff       	call   c0015c78 <RTC::get_update_in_progress_flag()>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	84 c0                	test   al,al
c0015cae:	74 0e                	je     c0015cbe <RTC::completeRTCRefresh()+0x2e>
c0015cb0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cb6:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015cbc:	73 df                	jae    c0015c9d <RTC::completeRTCRefresh()+0xd>
c0015cbe:	55                   	push   ebp
c0015cbf:	55                   	push   ebp
c0015cc0:	6a 00                	push   0x0
c0015cc2:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015cc8:	e8 d9 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ccd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cd1:	58                   	pop    eax
c0015cd2:	5a                   	pop    edx
c0015cd3:	6a 02                	push   0x2
c0015cd5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015cdb:	e8 c6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ce0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015ce4:	59                   	pop    ecx
c0015ce5:	5b                   	pop    ebx
c0015ce6:	6a 04                	push   0x4
c0015ce8:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015cee:	e8 b3 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015cf7:	5e                   	pop    esi
c0015cf8:	5f                   	pop    edi
c0015cf9:	6a 07                	push   0x7
c0015cfb:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d01:	e8 a0 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d06:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d0a:	5d                   	pop    ebp
c0015d0b:	58                   	pop    eax
c0015d0c:	6a 08                	push   0x8
c0015d0e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d14:	e8 8d 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d19:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d1d:	58                   	pop    eax
c0015d1e:	5a                   	pop    edx
c0015d1f:	6a 09                	push   0x9
c0015d21:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d27:	e8 7a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	0f b6 e8             	movzx  ebp,al
c0015d32:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d3f:	e8 34 ff ff ff       	call   c0015c78 <RTC::get_update_in_progress_flag()>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	84 c0                	test   al,al
c0015d49:	74 0e                	je     c0015d59 <RTC::completeRTCRefresh()+0xc9>
c0015d4b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d51:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015d57:	73 df                	jae    c0015d38 <RTC::completeRTCRefresh()+0xa8>
c0015d59:	50                   	push   eax
c0015d5a:	50                   	push   eax
c0015d5b:	6a 00                	push   0x0
c0015d5d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d63:	e8 3e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d68:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d6c:	58                   	pop    eax
c0015d6d:	5a                   	pop    edx
c0015d6e:	6a 02                	push   0x2
c0015d70:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d76:	e8 2b 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d7b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d7f:	59                   	pop    ecx
c0015d80:	5b                   	pop    ebx
c0015d81:	6a 04                	push   0x4
c0015d83:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d89:	e8 18 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d8e:	5e                   	pop    esi
c0015d8f:	88 c3                	mov    bl,al
c0015d91:	5f                   	pop    edi
c0015d92:	6a 07                	push   0x7
c0015d94:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d9a:	e8 07 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d9f:	89 c6                	mov    esi,eax
c0015da1:	58                   	pop    eax
c0015da2:	5a                   	pop    edx
c0015da3:	6a 08                	push   0x8
c0015da5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dab:	e8 f6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015db4:	59                   	pop    ecx
c0015db5:	5f                   	pop    edi
c0015db6:	6a 09                	push   0x9
c0015db8:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dbe:	e8 e3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015dc7:	0f b6 f8             	movzx  edi,al
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015dd1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015dd5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015dd9:	89 f1                	mov    ecx,esi
c0015ddb:	0f 94 c0             	sete   al
c0015dde:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015de2:	0f 94 c2             	sete   dl
c0015de5:	21 d0                	and    eax,edx
c0015de7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015deb:	0f 94 c2             	sete   dl
c0015dee:	21 c2                	and    edx,eax
c0015df0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015df4:	0f 94 c0             	sete   al
c0015df7:	21 d0                	and    eax,edx
c0015df9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015dfd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e01:	0f 94 c1             	sete   cl
c0015e04:	84 c8                	test   al,cl
c0015e06:	75 29                	jne    c0015e31 <RTC::completeRTCRefresh()+0x1a1>
c0015e08:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e0c:	89 fd                	mov    ebp,edi
c0015e0e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e12:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e16:	89 f0                	mov    eax,esi
c0015e18:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e20:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e24:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e28:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e2c:	e9 01 ff ff ff       	jmp    c0015d32 <RTC::completeRTCRefresh()+0xa2>
c0015e31:	39 fd                	cmp    ebp,edi
c0015e33:	75 d3                	jne    c0015e08 <RTC::completeRTCRefresh()+0x178>
c0015e35:	55                   	push   ebp
c0015e36:	55                   	push   ebp
c0015e37:	6a 0b                	push   0xb
c0015e39:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e3f:	e8 62 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e44:	83 c4 10             	add    esp,0x10
c0015e47:	89 c5                	mov    ebp,eax
c0015e49:	a8 04                	test   al,0x4
c0015e4b:	75 78                	jne    c0015ec5 <RTC::completeRTCRefresh()+0x235>
c0015e4d:	b1 0a                	mov    cl,0xa
c0015e4f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e53:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e57:	83 e2 0f             	and    edx,0xf
c0015e5a:	c0 e8 04             	shr    al,0x4
c0015e5d:	c1 ef 04             	shr    edi,0x4
c0015e60:	f6 e1                	mul    cl
c0015e62:	6b ff 0a             	imul   edi,edi,0xa
c0015e65:	01 d0                	add    eax,edx
c0015e67:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e6b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e6f:	83 e2 0f             	and    edx,0xf
c0015e72:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e76:	c0 e8 04             	shr    al,0x4
c0015e79:	f6 e1                	mul    cl
c0015e7b:	01 d0                	add    eax,edx
c0015e7d:	88 da                	mov    dl,bl
c0015e7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e83:	83 e2 0f             	and    edx,0xf
c0015e86:	88 d8                	mov    al,bl
c0015e88:	83 e3 80             	and    ebx,0xffffff80
c0015e8b:	c0 e8 04             	shr    al,0x4
c0015e8e:	83 e0 07             	and    eax,0x7
c0015e91:	f6 e1                	mul    cl
c0015e93:	01 d0                	add    eax,edx
c0015e95:	89 f2                	mov    edx,esi
c0015e97:	09 c3                	or     ebx,eax
c0015e99:	83 e2 0f             	and    edx,0xf
c0015e9c:	89 f0                	mov    eax,esi
c0015e9e:	c0 e8 04             	shr    al,0x4
c0015ea1:	f6 e1                	mul    cl
c0015ea3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ea6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015eaa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015eae:	83 e2 0f             	and    edx,0xf
c0015eb1:	c0 e8 04             	shr    al,0x4
c0015eb4:	f6 e1                	mul    cl
c0015eb6:	01 d0                	add    eax,edx
c0015eb8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ec0:	83 e0 0f             	and    eax,0xf
c0015ec3:	01 c7                	add    edi,eax
c0015ec5:	83 e5 02             	and    ebp,0x2
c0015ec8:	75 14                	jne    c0015ede <RTC::completeRTCRefresh()+0x24e>
c0015eca:	84 db                	test   bl,bl
c0015ecc:	79 10                	jns    c0015ede <RTC::completeRTCRefresh()+0x24e>
c0015ece:	83 e3 7f             	and    ebx,0x7f
c0015ed1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ed6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ed9:	99                   	cdq    
c0015eda:	f7 f9                	idiv   ecx
c0015edc:	88 d3                	mov    bl,dl
c0015ede:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ee4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015eea:	77 06                	ja     c0015ef2 <RTC::completeRTCRefresh()+0x262>
c0015eec:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015ef2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015ef7:	31 d2                	xor    edx,edx
c0015ef9:	c1 e1 10             	shl    ecx,0x10
c0015efc:	89 d7                	mov    edi,edx
c0015efe:	c1 e5 10             	shl    ebp,0x10
c0015f01:	31 c0                	xor    eax,eax
c0015f03:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f09:	09 cf                	or     edi,ecx
c0015f0b:	89 fa                	mov    edx,edi
c0015f0d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f11:	88 da                	mov    dl,bl
c0015f13:	89 f3                	mov    ebx,esi
c0015f15:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f19:	88 d8                	mov    al,bl
c0015f1b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f1f:	0f b7 c8             	movzx  ecx,ax
c0015f22:	09 e9                	or     ecx,ebp
c0015f24:	89 c8                	mov    eax,ecx
c0015f26:	51                   	push   ecx
c0015f27:	51                   	push   ecx
c0015f28:	52                   	push   edx
c0015f29:	50                   	push   eax
c0015f2a:	e8 48 56 ff ff       	call   c000b577 <datetimeToSeconds(datetime_t)>
c0015f2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f33:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f39:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f3f:	83 c4 3c             	add    esp,0x3c
c0015f42:	5b                   	pop    ebx
c0015f43:	5e                   	pop    esi
c0015f44:	5f                   	pop    edi
c0015f45:	5d                   	pop    ebp
c0015f46:	c3                   	ret    
c0015f47:	90                   	nop

c0015f48 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f48:	55                   	push   ebp
c0015f49:	57                   	push   edi
c0015f4a:	56                   	push   esi
c0015f4b:	53                   	push   ebx
c0015f4c:	83 ec 30             	sub    esp,0x30
c0015f4f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f53:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f57:	6a 00                	push   0x0
c0015f59:	6a 00                	push   0x0
c0015f5b:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015f61:	e8 56 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f66:	83 c4 0c             	add    esp,0xc
c0015f69:	6a 00                	push   0x0
c0015f6b:	6a 02                	push   0x2
c0015f6d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015f73:	e8 44 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f78:	31 d2                	xor    edx,edx
c0015f7a:	89 f9                	mov    ecx,edi
c0015f7c:	89 f8                	mov    eax,edi
c0015f7e:	c1 e9 10             	shr    ecx,0x10
c0015f81:	0f b6 c4             	movzx  eax,ah
c0015f84:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f88:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f90:	b9 64 00 00 00       	mov    ecx,0x64
c0015f95:	89 f0                	mov    eax,esi
c0015f97:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015f9b:	89 f0                	mov    eax,esi
c0015f9d:	0f b6 c4             	movzx  eax,ah
c0015fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fa4:	89 f0                	mov    eax,esi
c0015fa6:	c1 e8 10             	shr    eax,0x10
c0015fa9:	66 f7 f1             	div    cx
c0015fac:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fb1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fb6:	59                   	pop    ecx
c0015fb7:	5b                   	pop    ebx
c0015fb8:	89 fb                	mov    ebx,edi
c0015fba:	6a 0b                	push   0xb
c0015fbc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015fc2:	e8 df 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fc7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fd3:	75 74                	jne    c0016049 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fd5:	b2 0a                	mov    dl,0xa
c0015fd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fdb:	0f b6 c1             	movzx  eax,cl
c0015fde:	f6 f2                	div    dl
c0015fe0:	88 c3                	mov    bl,al
c0015fe2:	88 e0                	mov    al,ah
c0015fe4:	c1 e3 04             	shl    ebx,0x4
c0015fe7:	09 c3                	or     ebx,eax
c0015fe9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015fee:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015ff2:	f6 f2                	div    dl
c0015ff4:	88 c1                	mov    cl,al
c0015ff6:	88 e0                	mov    al,ah
c0015ff8:	c1 e1 04             	shl    ecx,0x4
c0015ffb:	09 c1                	or     ecx,eax
c0015ffd:	89 f8                	mov    eax,edi
c0015fff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016003:	0f b6 c0             	movzx  eax,al
c0016006:	f6 f2                	div    dl
c0016008:	88 c3                	mov    bl,al
c001600a:	88 e0                	mov    al,ah
c001600c:	c1 e3 04             	shl    ebx,0x4
c001600f:	09 c3                	or     ebx,eax
c0016011:	89 f0                	mov    eax,esi
c0016013:	0f b6 c0             	movzx  eax,al
c0016016:	f6 f2                	div    dl
c0016018:	88 c1                	mov    cl,al
c001601a:	88 e0                	mov    al,ah
c001601c:	c1 e1 04             	shl    ecx,0x4
c001601f:	09 c1                	or     ecx,eax
c0016021:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016026:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001602a:	f6 f2                	div    dl
c001602c:	88 c1                	mov    cl,al
c001602e:	88 e0                	mov    al,ah
c0016030:	c1 e1 04             	shl    ecx,0x4
c0016033:	09 c1                	or     ecx,eax
c0016035:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001603a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001603e:	f6 f2                	div    dl
c0016040:	89 c5                	mov    ebp,eax
c0016042:	88 e0                	mov    al,ah
c0016044:	c1 e5 04             	shl    ebp,0x4
c0016047:	09 c5                	or     ebp,eax
c0016049:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001604e:	75 17                	jne    c0016067 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016050:	80 fb 0b             	cmp    bl,0xb
c0016053:	76 0c                	jbe    c0016061 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016055:	80 eb 0c             	sub    bl,0xc
c0016058:	75 02                	jne    c001605c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001605a:	b3 0c                	mov    bl,0xc
c001605c:	83 cb 80             	or     ebx,0xffffff80
c001605f:	eb 06                	jmp    c0016067 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016061:	84 db                	test   bl,bl
c0016063:	75 02                	jne    c0016067 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016065:	b3 0c                	mov    bl,0xc
c0016067:	0f b6 db             	movzx  ebx,bl
c001606a:	50                   	push   eax
c001606b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016070:	50                   	push   eax
c0016071:	6a 00                	push   0x0
c0016073:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016079:	e8 3e 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001607e:	83 c4 0c             	add    esp,0xc
c0016081:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016086:	50                   	push   eax
c0016087:	6a 02                	push   0x2
c0016089:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001608f:	e8 28 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016094:	83 c4 0c             	add    esp,0xc
c0016097:	53                   	push   ebx
c0016098:	6a 04                	push   0x4
c001609a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160a0:	e8 17 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a5:	83 c4 0c             	add    esp,0xc
c00160a8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160ad:	50                   	push   eax
c00160ae:	6a 07                	push   0x7
c00160b0:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160b6:	e8 01 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160bb:	83 c4 0c             	add    esp,0xc
c00160be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160c3:	50                   	push   eax
c00160c4:	6a 08                	push   0x8
c00160c6:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160cc:	e8 eb 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160d1:	83 c4 0c             	add    esp,0xc
c00160d4:	89 e8                	mov    eax,ebp
c00160d6:	0f b6 e8             	movzx  ebp,al
c00160d9:	55                   	push   ebp
c00160da:	6a 09                	push   0x9
c00160dc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160e2:	e8 d5 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e7:	5a                   	pop    edx
c00160e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160ec:	e8 9f fb ff ff       	call   c0015c90 <RTC::completeRTCRefresh()>
c00160f1:	83 c4 3c             	add    esp,0x3c
c00160f4:	b0 01                	mov    al,0x1
c00160f6:	5b                   	pop    ebx
c00160f7:	5e                   	pop    esi
c00160f8:	5f                   	pop    edi
c00160f9:	5d                   	pop    ebp
c00160fa:	c3                   	ret    

c00160fb <rtcIRQHandler(regs*, void*)>:
c00160fb:	53                   	push   ebx
c00160fc:	83 ec 10             	sub    esp,0x10
c00160ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016103:	6a 0c                	push   0xc
c0016105:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001610b:	e8 96 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016110:	83 c4 10             	add    esp,0x10
c0016113:	84 c0                	test   al,al
c0016115:	79 24                	jns    c001613b <rtcIRQHandler(regs*, void*)+0x40>
c0016117:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001611e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016125:	66 ff 05 14 62 02 c0 	inc    WORD PTR ds:0xc0026214
c001612c:	75 0d                	jne    c001613b <rtcIRQHandler(regs*, void*)+0x40>
c001612e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016132:	83 c4 08             	add    esp,0x8
c0016135:	5b                   	pop    ebx
c0016136:	e9 55 fb ff ff       	jmp    c0015c90 <RTC::completeRTCRefresh()>
c001613b:	83 c4 08             	add    esp,0x8
c001613e:	5b                   	pop    ebx
c001613f:	c3                   	ret    

c0016140 <RTC::RTC()>:
c0016140:	83 ec 1c             	sub    esp,0x1c
c0016143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016147:	83 ec 08             	sub    esp,0x8
c001614a:	68 b3 f5 01 c0       	push   0xc001f5b3
c001614f:	50                   	push   eax
c0016150:	e8 fd 52 ff ff       	call   c000b452 <Clock::Clock(char const*)>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c001615d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016161:	89 10                	mov    DWORD PTR [eax],edx
c0016163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016167:	83 ec 0c             	sub    esp,0xc
c001616a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001616e:	6a 01                	push   0x1
c0016170:	68 fb 60 01 c0       	push   0xc00160fb
c0016175:	6a 08                	push   0x8
c0016177:	50                   	push   eax
c0016178:	e8 bf 57 ff ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001617d:	83 c4 20             	add    esp,0x20
c0016180:	89 c2                	mov    edx,eax
c0016182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016186:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001618c:	fa                   	cli    
c001618d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016192:	40                   	inc    eax
c0016193:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0016198:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001619d:	83 ec 08             	sub    esp,0x8
c00161a0:	6a 0b                	push   0xb
c00161a2:	50                   	push   eax
c00161a3:	e8 fe 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161a8:	83 c4 10             	add    esp,0x10
c00161ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161af:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00161b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161b8:	83 ca 10             	or     edx,0x10
c00161bb:	81 e2 ff 00 00 00    	and    edx,0xff
c00161c1:	83 ec 04             	sub    esp,0x4
c00161c4:	52                   	push   edx
c00161c5:	6a 0b                	push   0xb
c00161c7:	50                   	push   eax
c00161c8:	e8 ef 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161d7:	e8 b4 fa ff ff       	call   c0015c90 <RTC::completeRTCRefresh()>
c00161dc:	83 c4 10             	add    esp,0x10
c00161df:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00161e4:	48                   	dec    eax
c00161e5:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00161ea:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00161ef:	85 c0                	test   eax,eax
c00161f1:	75 01                	jne    c00161f4 <RTC::RTC()+0xb4>
c00161f3:	fb                   	sti    
c00161f4:	90                   	nop
c00161f5:	83 c4 1c             	add    esp,0x1c
c00161f8:	c3                   	ret    
c00161f9:	66 90                	xchg   ax,ax
c00161fb:	90                   	nop

c00161fc <HalConsoleScroll(int, int)>:
c00161fc:	83 ec 10             	sub    esp,0x10
c00161ff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001620f:	90                   	nop
c0016210:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016215:	0f 8f e1 00 00 00    	jg     c00162fc <HalConsoleScroll(int, int)+0x100>
c001621b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016223:	90                   	nop
c0016224:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001622c:	0f 8f be 00 00 00    	jg     c00162f0 <HalConsoleScroll(int, int)+0xf4>
c0016232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016236:	89 d0                	mov    eax,edx
c0016238:	c1 e0 02             	shl    eax,0x2
c001623b:	01 d0                	add    eax,edx
c001623d:	c1 e0 05             	shl    eax,0x5
c0016240:	89 c2                	mov    edx,eax
c0016242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016246:	01 d0                	add    eax,edx
c0016248:	89 c2                	mov    edx,eax
c001624a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001624e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016251:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016255:	89 d0                	mov    eax,edx
c0016257:	c1 e0 02             	shl    eax,0x2
c001625a:	01 d0                	add    eax,edx
c001625c:	c1 e0 05             	shl    eax,0x5
c001625f:	89 c2                	mov    edx,eax
c0016261:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016265:	01 d0                	add    eax,edx
c0016267:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001626d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016271:	01 c2                	add    edx,eax
c0016273:	8a 01                	mov    al,BYTE PTR [ecx]
c0016275:	88 02                	mov    BYTE PTR [edx],al
c0016277:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001627c:	75 66                	jne    c00162e4 <HalConsoleScroll(int, int)+0xe8>
c001627e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016282:	83 e0 01             	and    eax,0x1
c0016285:	74 39                	je     c00162c0 <HalConsoleScroll(int, int)+0xc4>
c0016287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001628b:	83 e0 0f             	and    eax,0xf
c001628e:	88 c2                	mov    dl,al
c0016290:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016294:	c1 e0 04             	shl    eax,0x4
c0016297:	88 d1                	mov    cl,dl
c0016299:	09 c1                	or     ecx,eax
c001629b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001629f:	89 d0                	mov    eax,edx
c00162a1:	c1 e0 02             	shl    eax,0x2
c00162a4:	01 d0                	add    eax,edx
c00162a6:	c1 e0 05             	shl    eax,0x5
c00162a9:	89 c2                	mov    edx,eax
c00162ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162af:	01 d0                	add    eax,edx
c00162b1:	89 c2                	mov    edx,eax
c00162b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b7:	01 d0                	add    eax,edx
c00162b9:	88 ca                	mov    dl,cl
c00162bb:	88 10                	mov    BYTE PTR [eax],dl
c00162bd:	eb 25                	jmp    c00162e4 <HalConsoleScroll(int, int)+0xe8>
c00162bf:	90                   	nop
c00162c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c4:	89 d0                	mov    eax,edx
c00162c6:	c1 e0 02             	shl    eax,0x2
c00162c9:	01 d0                	add    eax,edx
c00162cb:	c1 e0 05             	shl    eax,0x5
c00162ce:	89 c2                	mov    edx,eax
c00162d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162d4:	01 d0                	add    eax,edx
c00162d6:	89 c2                	mov    edx,eax
c00162d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162dc:	01 d0                	add    eax,edx
c00162de:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162e1:	8d 76 00             	lea    esi,[esi+0x0]
c00162e4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162e8:	e9 37 ff ff ff       	jmp    c0016224 <HalConsoleScroll(int, int)+0x28>
c00162ed:	8d 76 00             	lea    esi,[esi+0x0]
c00162f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00162f4:	e9 17 ff ff ff       	jmp    c0016210 <HalConsoleScroll(int, int)+0x14>
c00162f9:	8d 76 00             	lea    esi,[esi+0x0]
c00162fc:	90                   	nop
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	c3                   	ret    
c0016301:	8d 76 00             	lea    esi,[esi+0x0]

c0016304 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016304:	83 ec 14             	sub    esp,0x14
c0016307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001630b:	88 04 24             	mov    BYTE PTR [esp],al
c001630e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016311:	25 ff 00 00 00       	and    eax,0xff
c0016316:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001631a:	89 d1                	mov    ecx,edx
c001631c:	83 e1 0f             	and    ecx,0xf
c001631f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016323:	c1 e2 04             	shl    edx,0x4
c0016326:	81 e2 ff 00 00 00    	and    edx,0xff
c001632c:	09 ca                	or     edx,ecx
c001632e:	c1 e2 08             	shl    edx,0x8
c0016331:	09 d0                	or     eax,edx
c0016333:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016338:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016340:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016344:	89 d0                	mov    eax,edx
c0016346:	c1 e0 02             	shl    eax,0x2
c0016349:	01 d0                	add    eax,edx
c001634b:	c1 e0 04             	shl    eax,0x4
c001634e:	89 c2                	mov    edx,eax
c0016350:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016354:	01 d0                	add    eax,edx
c0016356:	01 c0                	add    eax,eax
c0016358:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001635c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016360:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016365:	66 89 02             	mov    WORD PTR [edx],ax
c0016368:	90                   	nop
c0016369:	83 c4 14             	add    esp,0x14
c001636c:	c3                   	ret    
c001636d:	8d 76 00             	lea    esi,[esi+0x0]

c0016370 <HalConsoleCursorUpdate(int, int)>:
c0016370:	83 ec 20             	sub    esp,0x20
c0016373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016377:	89 c2                	mov    edx,eax
c0016379:	89 d0                	mov    eax,edx
c001637b:	c1 e0 02             	shl    eax,0x2
c001637e:	01 d0                	add    eax,edx
c0016380:	c1 e0 04             	shl    eax,0x4
c0016383:	89 c2                	mov    edx,eax
c0016385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016389:	01 d0                	add    eax,edx
c001638b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016390:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016397:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001639c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a4:	ee                   	out    dx,al
c00163a5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163aa:	25 ff 00 00 00       	and    eax,0xff
c00163af:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163b6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163ba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163c2:	ee                   	out    dx,al
c00163c3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163ca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163d7:	ee                   	out    dx,al
c00163d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163dd:	66 c1 e8 08          	shr    ax,0x8
c00163e1:	25 ff 00 00 00       	and    eax,0xff
c00163e6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00163f1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00163f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163f9:	ee                   	out    dx,al
c00163fa:	90                   	nop
c00163fb:	83 c4 20             	add    esp,0x20
c00163fe:	c3                   	ret    
c00163ff:	90                   	nop

c0016400 <FAT::getName()>:
c0016400:	b8 04 f6 01 c0       	mov    eax,0xc001f604
c0016405:	c3                   	ret    
c0016406:	66 90                	xchg   ax,ax

c0016408 <FAT::tell(void*, unsigned long long*)>:
c0016408:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001640d:	75 09                	jne    c0016418 <FAT::tell(void*, unsigned long long*)+0x10>
c001640f:	b8 04 00 00 00       	mov    eax,0x4
c0016414:	c3                   	ret    
c0016415:	8d 76 00             	lea    esi,[esi+0x0]
c0016418:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001641d:	75 09                	jne    c0016428 <FAT::tell(void*, unsigned long long*)+0x20>
c001641f:	b8 04 00 00 00       	mov    eax,0x4
c0016424:	c3                   	ret    
c0016425:	8d 76 00             	lea    esi,[esi+0x0]
c0016428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001642c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001642f:	ba 00 00 00 00       	mov    edx,0x0
c0016434:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016438:	89 01                	mov    DWORD PTR [ecx],eax
c001643a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001643d:	b8 00 00 00 00       	mov    eax,0x0
c0016442:	c3                   	ret    
c0016443:	90                   	nop

c0016444 <FAT::stat(void*, unsigned long long*)>:
c0016444:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016449:	75 09                	jne    c0016454 <FAT::stat(void*, unsigned long long*)+0x10>
c001644b:	b8 04 00 00 00       	mov    eax,0x4
c0016450:	c3                   	ret    
c0016451:	8d 76 00             	lea    esi,[esi+0x0]
c0016454:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016459:	75 09                	jne    c0016464 <FAT::stat(void*, unsigned long long*)+0x20>
c001645b:	b8 04 00 00 00       	mov    eax,0x4
c0016460:	c3                   	ret    
c0016461:	8d 76 00             	lea    esi,[esi+0x0]
c0016464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016468:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001646b:	ba 00 00 00 00       	mov    edx,0x0
c0016470:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016474:	89 01                	mov    DWORD PTR [ecx],eax
c0016476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016479:	b8 00 00 00 00       	mov    eax,0x0
c001647e:	c3                   	ret    
c001647f:	90                   	nop

c0016480 <FAT::~FAT()>:
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	89 10                	mov    DWORD PTR [eax],edx
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	50                   	push   eax
c0016496:	e8 fd 43 ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <FAT::~FAT()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	83 ec 0c             	sub    esp,0xc
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 cd ff ff ff       	call   c0016480 <FAT::~FAT()>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	6a 08                	push   0x8
c00164bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164bf:	e8 98 3f ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c00164c4:	83 c4 10             	add    esp,0x10
c00164c7:	83 c4 0c             	add    esp,0xc
c00164ca:	c3                   	ret    
c00164cb:	90                   	nop

c00164cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164cc:	83 ec 1c             	sub    esp,0x1c
c00164cf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164d6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164df:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00164e6:	83 f8 ff             	cmp    eax,0xffffffff
c00164e9:	75 35                	jne    c0016520 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164ef:	88 c2                	mov    dl,al
c00164f1:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00164f6:	01 d0                	add    eax,edx
c00164f8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00164fc:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016502:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016506:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001650d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016512:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016516:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001651d:	eb 19                	jmp    c0016538 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001651f:	90                   	nop
c0016520:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016524:	88 c2                	mov    dl,al
c0016526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001652a:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016531:	01 d0                	add    eax,edx
c0016533:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016537:	90                   	nop
c0016538:	83 ec 04             	sub    esp,0x4
c001653b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001653f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016543:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016547:	50                   	push   eax
c0016548:	e8 07 e9 fe ff       	call   c0004e54 <f_getlabel>
c001654d:	83 c4 10             	add    esp,0x10
c0016550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016554:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016559:	75 09                	jne    c0016564 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001655b:	b8 00 00 00 00       	mov    eax,0x0
c0016560:	eb 0a                	jmp    c001656c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016562:	66 90                	xchg   ax,ax
c0016564:	b8 01 00 00 00       	mov    eax,0x1
c0016569:	8d 76 00             	lea    esi,[esi+0x0]
c001656c:	83 c4 1c             	add    esp,0x1c
c001656f:	c3                   	ret    

c0016570 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016570:	57                   	push   edi
c0016571:	83 ec 58             	sub    esp,0x58
c0016574:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001657c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016580:	b8 00 00 00 00       	mov    eax,0x0
c0016585:	b9 0f 00 00 00       	mov    ecx,0xf
c001658a:	fc                   	cld    
c001658b:	89 d7                	mov    edi,edx
c001658d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001658f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016593:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001659a:	83 f8 ff             	cmp    eax,0xffffffff
c001659d:	75 35                	jne    c00165d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001659f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165a3:	88 c2                	mov    dl,al
c00165a5:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165aa:	01 d0                	add    eax,edx
c00165ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165b0:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00165b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ba:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00165c1:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165c6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165ca:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00165d1:	eb 19                	jmp    c00165ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165d3:	90                   	nop
c00165d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165d8:	88 c2                	mov    dl,al
c00165da:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165de:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00165e5:	01 d0                	add    eax,edx
c00165e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165eb:	90                   	nop
c00165ec:	83 ec 08             	sub    esp,0x8
c00165ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00165f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165f7:	50                   	push   eax
c00165f8:	e8 c3 a1 fe ff       	call   c00007c0 <strcat>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016607:	50                   	push   eax
c0016608:	e8 98 e9 fe ff       	call   c0004fa5 <f_setlabel>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016614:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016619:	75 09                	jne    c0016624 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001661b:	b8 00 00 00 00       	mov    eax,0x0
c0016620:	eb 0a                	jmp    c001662c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016622:	66 90                	xchg   ax,ax
c0016624:	b8 01 00 00 00       	mov    eax,0x1
c0016629:	8d 76 00             	lea    esi,[esi+0x0]
c001662c:	83 c4 58             	add    esp,0x58
c001662f:	5f                   	pop    edi
c0016630:	c3                   	ret    
c0016631:	90                   	nop
c0016632:	66 90                	xchg   ax,ax

c0016634 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016634:	83 ec 2c             	sub    esp,0x2c
c0016637:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001663f:	83 ec 08             	sub    esp,0x8
c0016642:	68 28 f6 01 c0       	push   0xc001f628
c0016647:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001664b:	e8 90 a0 fe ff       	call   c00006e0 <strcmp>
c0016650:	83 c4 10             	add    esp,0x10
c0016653:	85 c0                	test   eax,eax
c0016655:	0f 94 c0             	sete   al
c0016658:	84 c0                	test   al,al
c001665a:	74 10                	je     c001666c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001665c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016664:	e9 b3 00 00 00       	jmp    c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016669:	8d 76 00             	lea    esi,[esi+0x0]
c001666c:	83 ec 08             	sub    esp,0x8
c001666f:	68 1a f6 01 c0       	push   0xc001f61a
c0016674:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016678:	e8 63 a0 fe ff       	call   c00006e0 <strcmp>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	85 c0                	test   eax,eax
c0016682:	0f 94 c0             	sete   al
c0016685:	84 c0                	test   al,al
c0016687:	74 0f                	je     c0016698 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016689:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016691:	e9 86 00 00 00       	jmp    c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016696:	66 90                	xchg   ax,ax
c0016698:	83 ec 08             	sub    esp,0x8
c001669b:	68 20 f6 01 c0       	push   0xc001f620
c00166a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166a4:	e8 37 a0 fe ff       	call   c00006e0 <strcmp>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	85 c0                	test   eax,eax
c00166ae:	0f 94 c0             	sete   al
c00166b1:	84 c0                	test   al,al
c00166b3:	74 0b                	je     c00166c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166bd:	eb 5d                	jmp    c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166bf:	90                   	nop
c00166c0:	83 ec 08             	sub    esp,0x8
c00166c3:	68 fc d5 01 c0       	push   0xc001d5fc
c00166c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166cc:	e8 0f a0 fe ff       	call   c00006e0 <strcmp>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	85 c0                	test   eax,eax
c00166d6:	0f 94 c0             	sete   al
c00166d9:	84 c0                	test   al,al
c00166db:	74 0b                	je     c00166e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166dd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166e5:	eb 35                	jmp    c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166e7:	90                   	nop
c00166e8:	83 ec 08             	sub    esp,0x8
c00166eb:	68 26 f6 01 c0       	push   0xc001f626
c00166f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f4:	e8 e7 9f fe ff       	call   c00006e0 <strcmp>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	85 c0                	test   eax,eax
c00166fe:	0f 94 c0             	sete   al
c0016701:	84 c0                	test   al,al
c0016703:	74 0b                	je     c0016710 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016705:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001670d:	eb 0d                	jmp    c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001670f:	90                   	nop
c0016710:	b8 08 00 00 00       	mov    eax,0x8
c0016715:	e9 ea 00 00 00       	jmp    c0016804 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001671a:	66 90                	xchg   ax,ax
c001671c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016723:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016728:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001672c:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016733:	83 f8 ff             	cmp    eax,0xffffffff
c0016736:	75 34                	jne    c001676c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016738:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001673c:	88 c2                	mov    dl,al
c001673e:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016743:	01 d0                	add    eax,edx
c0016745:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016749:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c001674f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016753:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001675a:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001675f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016763:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001676a:	eb 18                	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001676c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016770:	88 c2                	mov    dl,al
c0016772:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016776:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001677d:	01 d0                	add    eax,edx
c001677f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016783:	90                   	nop
c0016784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016788:	88 04 24             	mov    BYTE PTR [esp],al
c001678b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001678f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016793:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001679b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	68 00 20 00 00       	push   0x2000
c00167b0:	e8 04 10 ff ff       	call   c00077b9 <malloc>
c00167b5:	83 c4 10             	add    esp,0x10
c00167b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167bc:	68 00 20 00 00       	push   0x2000
c00167c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167c9:	50                   	push   eax
c00167ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167ce:	50                   	push   eax
c00167cf:	e8 c1 ea fe ff       	call   c0005295 <f_mkfs>
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167e0:	75 0a                	jne    c00167ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167e2:	b8 00 00 00 00       	mov    eax,0x0
c00167e7:	eb 1b                	jmp    c0016804 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167e9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00167f1:	75 09                	jne    c00167fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00167f3:	b8 09 00 00 00       	mov    eax,0x9
c00167f8:	eb 0a                	jmp    c0016804 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167fa:	66 90                	xchg   ax,ax
c00167fc:	b8 01 00 00 00       	mov    eax,0x1
c0016801:	8d 76 00             	lea    esi,[esi+0x0]
c0016804:	83 c4 2c             	add    esp,0x2c
c0016807:	c3                   	ret    

c0016808 <FAT::tryMount(LogicalDisk*, int)>:
c0016808:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001680e:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016813:	83 f8 14             	cmp    eax,0x14
c0016816:	75 18                	jne    c0016830 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016818:	83 ec 0c             	sub    esp,0xc
c001681b:	68 2c f6 01 c0       	push   0xc001f62c
c0016820:	e8 4a 9a ff ff       	call   c001026f <KePanic(char const*)>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	b0 00                	mov    al,0x0
c001682a:	e9 e9 01 00 00       	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001682f:	90                   	nop
c0016830:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016837:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001683d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016843:	3d 00 02 00 00       	cmp    eax,0x200
c0016848:	74 0a                	je     c0016854 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001684a:	b0 00                	mov    al,0x0
c001684c:	e9 c7 01 00 00       	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016851:	8d 76 00             	lea    esi,[esi+0x0]
c0016854:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001685c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016863:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001686a:	83 f8 ff             	cmp    eax,0xffffffff
c001686d:	74 09                	je     c0016878 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001686f:	b0 01                	mov    al,0x1
c0016871:	e9 a2 01 00 00       	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016876:	66 90                	xchg   ax,ax
c0016878:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016882:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001688a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016891:	88 c2                	mov    dl,al
c0016893:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016898:	01 d0                	add    eax,edx
c001689a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168a1:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00168a7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168ae:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00168b5:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168ba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168c1:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	68 34 02 00 00       	push   0x234
c00168d0:	e8 e4 0e ff ff       	call   c00077b9 <malloc>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168df:	83 ec 04             	sub    esp,0x4
c00168e2:	6a 00                	push   0x0
c00168e4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168eb:	50                   	push   eax
c00168ec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168f3:	e8 c3 d1 fe ff       	call   c0003abb <f_mount>
c00168f8:	83 c4 10             	add    esp,0x10
c00168fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016902:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001690a:	74 1c                	je     c0016928 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016916:	e8 be 0e ff ff       	call   c00077d9 <rfree>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	b0 00                	mov    al,0x0
c0016920:	e9 f3 00 00 00       	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016925:	8d 76 00             	lea    esi,[esi+0x0]
c0016928:	83 ec 04             	sub    esp,0x4
c001692b:	68 00 01 00 00       	push   0x100
c0016930:	6a 00                	push   0x0
c0016932:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016939:	50                   	push   eax
c001693a:	e8 91 9b fe ff       	call   c00004d0 <memset>
c001693f:	83 c4 10             	add    esp,0x10
c0016942:	83 ec 08             	sub    esp,0x8
c0016945:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001694c:	50                   	push   eax
c001694d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016954:	50                   	push   eax
c0016955:	e8 66 9e fe ff       	call   c00007c0 <strcat>
c001695a:	83 c4 10             	add    esp,0x10
c001695d:	83 ec 08             	sub    esp,0x8
c0016960:	68 3a f6 01 c0       	push   0xc001f63a
c0016965:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001696c:	50                   	push   eax
c001696d:	e8 4e 9e fe ff       	call   c00007c0 <strcat>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	83 ec 04             	sub    esp,0x4
c0016978:	6a 01                	push   0x1
c001697a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016981:	50                   	push   eax
c0016982:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016986:	50                   	push   eax
c0016987:	e8 91 d1 fe ff       	call   c0003b1d <f_open>
c001698c:	83 c4 10             	add    esp,0x10
c001698f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016996:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001699d:	85 c0                	test   eax,eax
c001699f:	74 0b                	je     c00169ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169a1:	78 31                	js     c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169a3:	83 e8 04             	sub    eax,0x4
c00169a6:	83 f8 01             	cmp    eax,0x1
c00169a9:	77 29                	ja     c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169ab:	90                   	nop
c00169ac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169b4:	83 ec 0c             	sub    esp,0xc
c00169b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169bb:	50                   	push   eax
c00169bc:	e8 0f d9 fe ff       	call   c00042d0 <f_close>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	90                   	nop
c00169c5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169cd:	74 41                	je     c0016a10 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169cf:	eb 33                	jmp    c0016a04 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	83 ec 0c             	sub    esp,0xc
c00169d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169de:	e8 f6 0d ff ff       	call   c00077d9 <rfree>
c00169e3:	83 c4 10             	add    esp,0x10
c00169e6:	83 ec 04             	sub    esp,0x4
c00169e9:	6a 00                	push   0x0
c00169eb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169f2:	50                   	push   eax
c00169f3:	6a 00                	push   0x0
c00169f5:	e8 c1 d0 fe ff       	call   c0003abb <f_mount>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	b0 00                	mov    al,0x0
c00169ff:	eb 17                	jmp    c0016a18 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a01:	8d 76 00             	lea    esi,[esi+0x0]
c0016a04:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016a09:	40                   	inc    eax
c0016a0a:	a3 20 62 02 c0       	mov    ds:0xc0026220,eax
c0016a0f:	90                   	nop
c0016a10:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a17:	90                   	nop
c0016a18:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a1e:	c3                   	ret    
c0016a1f:	90                   	nop

c0016a20 <FAT::allocateSwapfile(char const*, int)>:
c0016a20:	55                   	push   ebp
c0016a21:	57                   	push   edi
c0016a22:	56                   	push   esi
c0016a23:	53                   	push   ebx
c0016a24:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a2a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a35:	83 ec 0c             	sub    esp,0xc
c0016a38:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a3f:	e8 75 0d ff ff       	call   c00077b9 <malloc>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	89 c7                	mov    edi,eax
c0016a49:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0016a4e:	83 ec 04             	sub    esp,0x4
c0016a51:	50                   	push   eax
c0016a52:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a59:	57                   	push   edi
c0016a5a:	e8 69 40 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0016a5f:	83 c4 10             	add    esp,0x10
c0016a62:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a69:	83 ec 04             	sub    esp,0x4
c0016a6c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a70:	50                   	push   eax
c0016a71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a75:	50                   	push   eax
c0016a76:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a7d:	e8 b2 43 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a8c:	c1 e0 14             	shl    eax,0x14
c0016a8f:	89 c7                	mov    edi,eax
c0016a91:	89 c5                	mov    ebp,eax
c0016a93:	c1 fd 1f             	sar    ebp,0x1f
c0016a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a9e:	89 f9                	mov    ecx,edi
c0016aa0:	31 c1                	xor    ecx,eax
c0016aa2:	89 cb                	mov    ebx,ecx
c0016aa4:	89 e9                	mov    ecx,ebp
c0016aa6:	31 d1                	xor    ecx,edx
c0016aa8:	89 ce                	mov    esi,ecx
c0016aaa:	89 f0                	mov    eax,esi
c0016aac:	09 d8                	or     eax,ebx
c0016aae:	0f 84 9c 00 00 00    	je     c0016b50 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016abe:	e8 3d 42 ff ff       	call   c000ad00 <File::unlink()>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	83 ec 08             	sub    esp,0x8
c0016ac9:	6a 12                	push   0x12
c0016acb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ad2:	e8 b1 40 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ae1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ae7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016aee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016af5:	c1 e0 14             	shl    eax,0x14
c0016af8:	83 ec 04             	sub    esp,0x4
c0016afb:	6a 01                	push   0x1
c0016afd:	50                   	push   eax
c0016afe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b05:	e8 2b e6 fe ff       	call   c0005135 <f_expand>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b16:	83 c0 10             	add    eax,0x10
c0016b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b1b:	83 ec 0c             	sub    esp,0xc
c0016b1e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b22:	52                   	push   edx
c0016b23:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b27:	52                   	push   edx
c0016b28:	6a 00                	push   0x0
c0016b2a:	68 00 04 00 00       	push   0x400
c0016b2f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b36:	ff d0                	call   eax
c0016b38:	83 c4 20             	add    esp,0x20
c0016b3b:	83 ec 0c             	sub    esp,0xc
c0016b3e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b45:	e8 9c 40 ff ff       	call   c000abe6 <File::close()>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b50:	83 ec 08             	sub    esp,0x8
c0016b53:	6a 01                	push   0x1
c0016b55:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b5c:	e8 27 40 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0016b61:	83 c4 10             	add    esp,0x10
c0016b64:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b6d:	83 c0 0c             	add    eax,0xc
c0016b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b72:	83 ec 0c             	sub    esp,0xc
c0016b75:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b79:	52                   	push   edx
c0016b7a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b7e:	52                   	push   edx
c0016b7f:	6a 00                	push   0x0
c0016b81:	6a 04                	push   0x4
c0016b83:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b8a:	ff d0                	call   eax
c0016b8c:	83 c4 20             	add    esp,0x20
c0016b8f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b96:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b9c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ba3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016baa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bbe:	e8 23 40 ff ff       	call   c000abe6 <File::close()>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bcd:	ba 00 00 00 00       	mov    edx,0x0
c0016bd2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016bd8:	5b                   	pop    ebx
c0016bd9:	5e                   	pop    esi
c0016bda:	5f                   	pop    edi
c0016bdb:	5d                   	pop    ebp
c0016bdc:	c3                   	ret    
c0016bdd:	90                   	nop
c0016bde:	66 90                	xchg   ax,ax

c0016be0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016be0:	57                   	push   edi
c0016be1:	56                   	push   esi
c0016be2:	53                   	push   ebx
c0016be3:	81 ec 50 02 00 00    	sub    esp,0x250
c0016be9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016bf1:	74 0d                	je     c0016c00 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016bf3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016bfb:	75 0f                	jne    c0016c0c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016c00:	b8 04 00 00 00       	mov    eax,0x4
c0016c05:	e9 36 01 00 00       	jmp    c0016d40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c0a:	66 90                	xchg   ax,ax
c0016c0c:	83 ec 08             	sub    esp,0x8
c0016c0f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c16:	50                   	push   eax
c0016c17:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c1e:	e8 70 d9 fe ff       	call   c0004593 <f_readdir>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c2d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c34:	83 ec 0c             	sub    esp,0xc
c0016c37:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c3e:	83 c0 16             	add    eax,0x16
c0016c41:	50                   	push   eax
c0016c42:	e8 f9 98 fe ff       	call   c0000540 <strlen>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	ba 00 00 00 00       	mov    edx,0x0
c0016c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c57:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c5e:	25 ff 00 00 00       	and    eax,0xff
c0016c63:	83 e0 10             	and    eax,0x10
c0016c66:	74 08                	je     c0016c70 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c68:	b8 02 00 00 00       	mov    eax,0x2
c0016c6d:	eb 09                	jmp    c0016c78 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c6f:	90                   	nop
c0016c70:	b8 01 00 00 00       	mov    eax,0x1
c0016c75:	8d 76 00             	lea    esi,[esi+0x0]
c0016c78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c7c:	83 ec 08             	sub    esp,0x8
c0016c7f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c86:	83 c0 16             	add    eax,0x16
c0016c89:	50                   	push   eax
c0016c8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c8e:	83 c0 10             	add    eax,0x10
c0016c91:	50                   	push   eax
c0016c92:	e8 69 99 fe ff       	call   c0000600 <strcpy>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016ca1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016ca8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cb3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cc1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cc8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016ccf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016cd6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016cdd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016ce4:	89 c6                	mov    esi,eax
c0016ce6:	89 d7                	mov    edi,edx
c0016ce8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cea:	89 c8                	mov    eax,ecx
c0016cec:	89 fa                	mov    edx,edi
c0016cee:	89 f3                	mov    ebx,esi
c0016cf0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016cf7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016cfe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d05:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d0c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d12:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d19:	84 c0                	test   al,al
c0016d1b:	75 07                	jne    c0016d24 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d1d:	b8 07 00 00 00       	mov    eax,0x7
c0016d22:	eb 1c                	jmp    c0016d40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d24:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d2b:	85 c0                	test   eax,eax
c0016d2d:	75 09                	jne    c0016d38 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d2f:	b8 00 00 00 00       	mov    eax,0x0
c0016d34:	eb 0a                	jmp    c0016d40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d36:	66 90                	xchg   ax,ax
c0016d38:	b8 01 00 00 00       	mov    eax,0x1
c0016d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d40:	81 c4 50 02 00 00    	add    esp,0x250
c0016d46:	5b                   	pop    ebx
c0016d47:	5e                   	pop    esi
c0016d48:	5f                   	pop    edi
c0016d49:	c3                   	ret    
c0016d4a:	66 90                	xchg   ax,ax

c0016d4c <FAT::read(void*, unsigned long, void*, int*)>:
c0016d4c:	83 ec 1c             	sub    esp,0x1c
c0016d4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d54:	74 0a                	je     c0016d60 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d5b:	75 0b                	jne    c0016d68 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d60:	b8 04 00 00 00       	mov    eax,0x4
c0016d65:	eb 41                	jmp    c0016da8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d67:	90                   	nop
c0016d68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d6c:	50                   	push   eax
c0016d6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d79:	e8 6a d0 fe ff       	call   c0003de8 <f_read>
c0016d7e:	83 c4 10             	add    esp,0x10
c0016d81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d89:	89 c2                	mov    edx,eax
c0016d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d8f:	89 10                	mov    DWORD PTR [eax],edx
c0016d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d95:	85 c0                	test   eax,eax
c0016d97:	75 07                	jne    c0016da0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016d99:	b8 00 00 00 00       	mov    eax,0x0
c0016d9e:	eb 08                	jmp    c0016da8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016da0:	b8 01 00 00 00       	mov    eax,0x1
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]
c0016da8:	83 c4 1c             	add    esp,0x1c
c0016dab:	c3                   	ret    

c0016dac <FAT::write(void*, unsigned long, void*, int*)>:
c0016dac:	83 ec 1c             	sub    esp,0x1c
c0016daf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016db4:	74 0a                	je     c0016dc0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016db6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dbb:	75 0b                	jne    c0016dc8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc0:	b8 04 00 00 00       	mov    eax,0x4
c0016dc5:	eb 41                	jmp    c0016e08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016dc7:	90                   	nop
c0016dc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dcc:	50                   	push   eax
c0016dcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dd5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016dd9:	e8 09 d2 fe ff       	call   c0003fe7 <f_write>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016de9:	89 c2                	mov    edx,eax
c0016deb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016def:	89 10                	mov    DWORD PTR [eax],edx
c0016df1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016df5:	85 c0                	test   eax,eax
c0016df7:	75 07                	jne    c0016e00 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016df9:	b8 00 00 00 00       	mov    eax,0x0
c0016dfe:	eb 08                	jmp    c0016e08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e00:	b8 01 00 00 00       	mov    eax,0x1
c0016e05:	8d 76 00             	lea    esi,[esi+0x0]
c0016e08:	83 c4 1c             	add    esp,0x1c
c0016e0b:	c3                   	ret    

c0016e0c <FAT::close(void*)>:
c0016e0c:	83 ec 1c             	sub    esp,0x1c
c0016e0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e14:	75 0a                	jne    c0016e20 <FAT::close(void*)+0x14>
c0016e16:	b8 04 00 00 00       	mov    eax,0x4
c0016e1b:	eb 3f                	jmp    c0016e5c <FAT::close(void*)+0x50>
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e27:	e8 a4 d4 fe ff       	call   c00042d0 <f_close>
c0016e2c:	83 c4 10             	add    esp,0x10
c0016e2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e33:	83 ec 0c             	sub    esp,0xc
c0016e36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e3a:	e8 8a 09 ff ff       	call   c00077c9 <free>
c0016e3f:	83 c4 10             	add    esp,0x10
c0016e42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e46:	85 c0                	test   eax,eax
c0016e48:	75 0a                	jne    c0016e54 <FAT::close(void*)+0x48>
c0016e4a:	b8 00 00 00 00       	mov    eax,0x0
c0016e4f:	eb 0b                	jmp    c0016e5c <FAT::close(void*)+0x50>
c0016e51:	8d 76 00             	lea    esi,[esi+0x0]
c0016e54:	b8 01 00 00 00       	mov    eax,0x1
c0016e59:	8d 76 00             	lea    esi,[esi+0x0]
c0016e5c:	83 c4 1c             	add    esp,0x1c
c0016e5f:	c3                   	ret    

c0016e60 <FAT::closeDir(void*)>:
c0016e60:	83 ec 1c             	sub    esp,0x1c
c0016e63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e68:	75 0a                	jne    c0016e74 <FAT::closeDir(void*)+0x14>
c0016e6a:	b8 04 00 00 00       	mov    eax,0x4
c0016e6f:	eb 3f                	jmp    c0016eb0 <FAT::closeDir(void*)+0x50>
c0016e71:	8d 76 00             	lea    esi,[esi+0x0]
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e7b:	e8 f1 d6 fe ff       	call   c0004571 <f_closedir>
c0016e80:	83 c4 10             	add    esp,0x10
c0016e83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8e:	e8 36 09 ff ff       	call   c00077c9 <free>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e9a:	85 c0                	test   eax,eax
c0016e9c:	75 0a                	jne    c0016ea8 <FAT::closeDir(void*)+0x48>
c0016e9e:	b8 00 00 00 00       	mov    eax,0x0
c0016ea3:	eb 0b                	jmp    c0016eb0 <FAT::closeDir(void*)+0x50>
c0016ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea8:	b8 01 00 00 00       	mov    eax,0x1
c0016ead:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb0:	83 c4 1c             	add    esp,0x1c
c0016eb3:	c3                   	ret    

c0016eb4 <FAT::seek(void*, unsigned long long)>:
c0016eb4:	83 ec 2c             	sub    esp,0x2c
c0016eb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ebb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ebf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ec3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ecc:	75 0a                	jne    c0016ed8 <FAT::seek(void*, unsigned long long)+0x24>
c0016ece:	b8 04 00 00 00       	mov    eax,0x4
c0016ed3:	eb 33                	jmp    c0016f08 <FAT::seek(void*, unsigned long long)+0x54>
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016edc:	83 ec 08             	sub    esp,0x8
c0016edf:	50                   	push   eax
c0016ee0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ee4:	e8 16 d4 fe ff       	call   c00042ff <f_lseek>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ef4:	85 c0                	test   eax,eax
c0016ef6:	75 08                	jne    c0016f00 <FAT::seek(void*, unsigned long long)+0x4c>
c0016ef8:	b8 00 00 00 00       	mov    eax,0x0
c0016efd:	eb 09                	jmp    c0016f08 <FAT::seek(void*, unsigned long long)+0x54>
c0016eff:	90                   	nop
c0016f00:	b8 01 00 00 00       	mov    eax,0x1
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	83 c4 2c             	add    esp,0x2c
c0016f0b:	c3                   	ret    

c0016f0c <fatWrapperReadDisk>:
c0016f0c:	53                   	push   ebx
c0016f0d:	83 ec 18             	sub    esp,0x18
c0016f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f1c:	25 ff 00 00 00       	and    eax,0xff
c0016f21:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016f28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f30:	ba 00 00 00 00       	mov    edx,0x0
c0016f35:	83 ec 0c             	sub    esp,0xc
c0016f38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f3c:	53                   	push   ebx
c0016f3d:	52                   	push   edx
c0016f3e:	50                   	push   eax
c0016f3f:	51                   	push   ecx
c0016f40:	e8 23 5d ff ff       	call   c000cc68 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f45:	83 c4 20             	add    esp,0x20
c0016f48:	83 c4 18             	add    esp,0x18
c0016f4b:	5b                   	pop    ebx
c0016f4c:	c3                   	ret    
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f50 <fatWrapperWriteDisk>:
c0016f50:	53                   	push   ebx
c0016f51:	83 ec 18             	sub    esp,0x18
c0016f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f60:	25 ff 00 00 00       	and    eax,0xff
c0016f65:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016f6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f74:	ba 00 00 00 00       	mov    edx,0x0
c0016f79:	83 ec 0c             	sub    esp,0xc
c0016f7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f80:	53                   	push   ebx
c0016f81:	52                   	push   edx
c0016f82:	50                   	push   eax
c0016f83:	51                   	push   ecx
c0016f84:	e8 4b 5d ff ff       	call   c000ccd4 <LogicalDisk::write(unsigned long long, int, void*)>
c0016f89:	83 c4 20             	add    esp,0x20
c0016f8c:	83 c4 18             	add    esp,0x18
c0016f8f:	5b                   	pop    ebx
c0016f90:	c3                   	ret    
c0016f91:	8d 76 00             	lea    esi,[esi+0x0]

c0016f94 <fatWrapperIoctl>:
c0016f94:	53                   	push   ebx
c0016f95:	83 ec 28             	sub    esp,0x28
c0016f98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fa0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fa4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fa8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fad:	75 35                	jne    c0016fe4 <fatWrapperIoctl+0x50>
c0016faf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fbb:	25 ff 00 00 00       	and    eax,0xff
c0016fc0:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0016fc7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fd7:	66 89 02             	mov    WORD PTR [edx],ax
c0016fda:	b8 00 00 00 00       	mov    eax,0x0
c0016fdf:	e9 c4 00 00 00       	jmp    c00170a8 <fatWrapperIoctl+0x114>
c0016fe4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016fe9:	75 75                	jne    c0017060 <fatWrapperIoctl+0xcc>
c0016feb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ff3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ff7:	25 ff 00 00 00       	and    eax,0xff
c0016ffc:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0017003:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017009:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001700f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017015:	89 c8                	mov    eax,ecx
c0017017:	89 da                	mov    edx,ebx
c0017019:	0f a4 c2 0a          	shld   edx,eax,0xa
c001701d:	c1 e0 0a             	shl    eax,0xa
c0017020:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017024:	81 e1 ff 00 00 00    	and    ecx,0xff
c001702a:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c0017031:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017037:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001703d:	89 cb                	mov    ebx,ecx
c001703f:	c1 fb 1f             	sar    ebx,0x1f
c0017042:	53                   	push   ebx
c0017043:	51                   	push   ecx
c0017044:	52                   	push   edx
c0017045:	50                   	push   eax
c0017046:	e8 b5 57 00 00       	call   c001c800 <__udivdi3>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	89 c2                	mov    edx,eax
c0017050:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017054:	89 10                	mov    DWORD PTR [eax],edx
c0017056:	b8 00 00 00 00       	mov    eax,0x0
c001705b:	eb 4b                	jmp    c00170a8 <fatWrapperIoctl+0x114>
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017065:	75 09                	jne    c0017070 <fatWrapperIoctl+0xdc>
c0017067:	b8 00 00 00 00       	mov    eax,0x0
c001706c:	eb 3a                	jmp    c00170a8 <fatWrapperIoctl+0x114>
c001706e:	66 90                	xchg   ax,ax
c0017070:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017075:	75 19                	jne    c0017090 <fatWrapperIoctl+0xfc>
c0017077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001707b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001707f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017083:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017089:	b8 00 00 00 00       	mov    eax,0x0
c001708e:	eb 18                	jmp    c00170a8 <fatWrapperIoctl+0x114>
c0017090:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017095:	75 09                	jne    c00170a0 <fatWrapperIoctl+0x10c>
c0017097:	b8 00 00 00 00       	mov    eax,0x0
c001709c:	eb 0a                	jmp    c00170a8 <fatWrapperIoctl+0x114>
c001709e:	66 90                	xchg   ax,ax
c00170a0:	b8 04 00 00 00       	mov    eax,0x4
c00170a5:	8d 76 00             	lea    esi,[esi+0x0]
c00170a8:	83 c4 28             	add    esp,0x28
c00170ab:	5b                   	pop    ebx
c00170ac:	c3                   	ret    
c00170ad:	90                   	nop
c00170ae:	66 90                	xchg   ax,ax

c00170b0 <FAT::FAT()>:
c00170b0:	83 ec 1c             	sub    esp,0x1c
c00170b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b7:	83 ec 0c             	sub    esp,0xc
c00170ba:	50                   	push   eax
c00170bb:	e8 b4 37 ff ff       	call   c000a874 <Filesystem::Filesystem()>
c00170c0:	83 c4 10             	add    esp,0x10
c00170c3:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c00170c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cc:	89 10                	mov    DWORD PTR [eax],edx
c00170ce:	c7 05 20 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026220,0x0
c00170d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170e0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170e5:	7f 15                	jg     c00170fc <FAT::FAT()+0x4c>
c00170e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170eb:	c7 04 85 40 62 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9dc0],0xffffffff
c00170f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170fa:	eb e4                	jmp    c00170e0 <FAT::FAT()+0x30>
c00170fc:	90                   	nop
c00170fd:	83 c4 1c             	add    esp,0x1c
c0017100:	c3                   	ret    
c0017101:	90                   	nop
c0017102:	66 90                	xchg   ax,ax

c0017104 <FAT::fixFilepath(char*)>:
c0017104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017108:	8a 00                	mov    al,BYTE PTR [eax]
c001710a:	3c 40                	cmp    al,0x40
c001710c:	7e 2e                	jle    c001713c <FAT::fixFilepath(char*)+0x38>
c001710e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017112:	8a 00                	mov    al,BYTE PTR [eax]
c0017114:	83 e8 41             	sub    eax,0x41
c0017117:	88 c2                	mov    dl,al
c0017119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001711d:	88 10                	mov    BYTE PTR [eax],dl
c001711f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017123:	8a 00                	mov    al,BYTE PTR [eax]
c0017125:	0f be c0             	movsx  eax,al
c0017128:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001712f:	83 c0 30             	add    eax,0x30
c0017132:	88 c2                	mov    dl,al
c0017134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017138:	88 10                	mov    BYTE PTR [eax],dl
c001713a:	66 90                	xchg   ax,ax
c001713c:	90                   	nop
c001713d:	c3                   	ret    
c001713e:	66 90                	xchg   ax,ax

c0017140 <FAT::open(char const*, void**, FileOpenMode)>:
c0017140:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017146:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001714e:	74 0c                	je     c001715c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017150:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017158:	75 0e                	jne    c0017168 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001715a:	66 90                	xchg   ax,ax
c001715c:	b8 04 00 00 00       	mov    eax,0x4
c0017161:	e9 0a 01 00 00       	jmp    c0017270 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017166:	66 90                	xchg   ax,ax
c0017168:	83 ec 08             	sub    esp,0x8
c001716b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017172:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017176:	50                   	push   eax
c0017177:	e8 84 94 fe ff       	call   c0000600 <strcpy>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	83 ec 08             	sub    esp,0x8
c0017182:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017186:	50                   	push   eax
c0017187:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001718e:	e8 71 ff ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001719e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171a5:	83 e0 01             	and    eax,0x1
c00171a8:	74 0a                	je     c00171b4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171aa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171b2:	66 90                	xchg   ax,ax
c00171b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171bb:	83 e0 04             	and    eax,0x4
c00171be:	74 10                	je     c00171d0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171c0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171d7:	83 e0 02             	and    eax,0x2
c00171da:	74 08                	je     c00171e4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171dc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171eb:	83 e0 08             	and    eax,0x8
c00171ee:	74 08                	je     c00171f8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00171f0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00171f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ff:	83 e0 10             	and    eax,0x10
c0017202:	74 08                	je     c001720c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017204:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	68 28 02 00 00       	push   0x228
c0017214:	e8 a0 05 ff ff       	call   c00077b9 <malloc>
c0017219:	83 c4 10             	add    esp,0x10
c001721c:	89 c2                	mov    edx,eax
c001721e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017225:	89 10                	mov    DWORD PTR [eax],edx
c0017227:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001722e:	31 d2                	xor    edx,edx
c0017230:	88 c2                	mov    dl,al
c0017232:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017239:	8b 00                	mov    eax,DWORD PTR [eax]
c001723b:	83 ec 04             	sub    esp,0x4
c001723e:	52                   	push   edx
c001723f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017243:	52                   	push   edx
c0017244:	50                   	push   eax
c0017245:	e8 d3 c8 fe ff       	call   c0003b1d <f_open>
c001724a:	83 c4 10             	add    esp,0x10
c001724d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017254:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001725c:	74 0a                	je     c0017268 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001725e:	b8 01 00 00 00       	mov    eax,0x1
c0017263:	eb 0b                	jmp    c0017270 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017265:	8d 76 00             	lea    esi,[esi+0x0]
c0017268:	b8 00 00 00 00       	mov    eax,0x0
c001726d:	8d 76 00             	lea    esi,[esi+0x0]
c0017270:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017276:	c3                   	ret    
c0017277:	90                   	nop

c0017278 <FAT::openDir(char const*, void**)>:
c0017278:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001727e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017286:	74 0c                	je     c0017294 <FAT::openDir(char const*, void**)+0x1c>
c0017288:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017290:	75 0e                	jne    c00172a0 <FAT::openDir(char const*, void**)+0x28>
c0017292:	66 90                	xchg   ax,ax
c0017294:	b8 04 00 00 00       	mov    eax,0x4
c0017299:	e9 82 00 00 00       	jmp    c0017320 <FAT::openDir(char const*, void**)+0xa8>
c001729e:	66 90                	xchg   ax,ax
c00172a0:	83 ec 08             	sub    esp,0x8
c00172a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ae:	50                   	push   eax
c00172af:	e8 4c 93 fe ff       	call   c0000600 <strcpy>
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	83 ec 08             	sub    esp,0x8
c00172ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172be:	50                   	push   eax
c00172bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172c6:	e8 39 fe ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	83 ec 0c             	sub    esp,0xc
c00172d1:	6a 30                	push   0x30
c00172d3:	e8 e1 04 ff ff       	call   c00077b9 <malloc>
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	89 c2                	mov    edx,eax
c00172dd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172e4:	89 10                	mov    DWORD PTR [eax],edx
c00172e6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ef:	83 ec 08             	sub    esp,0x8
c00172f2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00172f6:	52                   	push   edx
c00172f7:	50                   	push   eax
c00172f8:	e8 a9 d1 fe ff       	call   c00044a6 <f_opendir>
c00172fd:	83 c4 10             	add    esp,0x10
c0017300:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017307:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001730f:	74 07                	je     c0017318 <FAT::openDir(char const*, void**)+0xa0>
c0017311:	b8 01 00 00 00       	mov    eax,0x1
c0017316:	eb 08                	jmp    c0017320 <FAT::openDir(char const*, void**)+0xa8>
c0017318:	b8 00 00 00 00       	mov    eax,0x0
c001731d:	8d 76 00             	lea    esi,[esi+0x0]
c0017320:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017326:	c3                   	ret    
c0017327:	90                   	nop

c0017328 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017328:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001732e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017336:	75 0c                	jne    c0017344 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017338:	b8 04 00 00 00       	mov    eax,0x4
c001733d:	e9 d6 00 00 00       	jmp    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017342:	66 90                	xchg   ax,ax
c0017344:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001734c:	75 0a                	jne    c0017358 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001734e:	b8 04 00 00 00       	mov    eax,0x4
c0017353:	e9 c0 00 00 00       	jmp    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017358:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017360:	75 0a                	jne    c001736c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017362:	b8 04 00 00 00       	mov    eax,0x4
c0017367:	e9 ac 00 00 00       	jmp    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001736c:	83 ec 08             	sub    esp,0x8
c001736f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017376:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001737d:	50                   	push   eax
c001737e:	e8 7d 92 fe ff       	call   c0000600 <strcpy>
c0017383:	83 c4 10             	add    esp,0x10
c0017386:	83 ec 08             	sub    esp,0x8
c0017389:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017390:	50                   	push   eax
c0017391:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017398:	e8 67 fd ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	83 ec 08             	sub    esp,0x8
c00173a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173a7:	50                   	push   eax
c00173a8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173af:	50                   	push   eax
c00173b0:	e8 70 d2 fe ff       	call   c0004625 <f_stat>
c00173b5:	83 c4 10             	add    esp,0x10
c00173b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173c6:	85 c0                	test   eax,eax
c00173c8:	74 0a                	je     c00173d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173ca:	83 f8 04             	cmp    eax,0x4
c00173cd:	74 39                	je     c0017408 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173cf:	eb 3f                	jmp    c0017410 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173d1:	8d 76 00             	lea    esi,[esi+0x0]
c00173d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173d8:	25 ff 00 00 00       	and    eax,0xff
c00173dd:	83 e0 10             	and    eax,0x10
c00173e0:	0f 95 c2             	setne  dl
c00173e3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173ea:	88 10                	mov    BYTE PTR [eax],dl
c00173ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f0:	ba 00 00 00 00       	mov    edx,0x0
c00173f5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00173fc:	89 01                	mov    DWORD PTR [ecx],eax
c00173fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017401:	b8 00 00 00 00       	mov    eax,0x0
c0017406:	eb 10                	jmp    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017408:	b8 02 00 00 00       	mov    eax,0x2
c001740d:	eb 09                	jmp    c0017418 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001740f:	90                   	nop
c0017410:	b8 01 00 00 00       	mov    eax,0x1
c0017415:	8d 76 00             	lea    esi,[esi+0x0]
c0017418:	81 c4 2c 02 00 00    	add    esp,0x22c
c001741e:	c3                   	ret    
c001741f:	90                   	nop

c0017420 <FAT::unlink(char const*)>:
c0017420:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017426:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001742e:	75 08                	jne    c0017438 <FAT::unlink(char const*)+0x18>
c0017430:	b8 04 00 00 00       	mov    eax,0x4
c0017435:	eb 61                	jmp    c0017498 <FAT::unlink(char const*)+0x78>
c0017437:	90                   	nop
c0017438:	83 ec 08             	sub    esp,0x8
c001743b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017442:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017446:	50                   	push   eax
c0017447:	e8 b4 91 fe ff       	call   c0000600 <strcpy>
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017456:	50                   	push   eax
c0017457:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001745e:	e8 a1 fc ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	83 ec 0c             	sub    esp,0xc
c0017469:	8d 44 24 18          	lea    eax,[esp+0x18]
c001746d:	50                   	push   eax
c001746e:	e8 17 d4 fe ff       	call   c000488a <f_unlink>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001747d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017484:	85 c0                	test   eax,eax
c0017486:	75 08                	jne    c0017490 <FAT::unlink(char const*)+0x70>
c0017488:	b8 00 00 00 00       	mov    eax,0x0
c001748d:	eb 09                	jmp    c0017498 <FAT::unlink(char const*)+0x78>
c001748f:	90                   	nop
c0017490:	b8 01 00 00 00       	mov    eax,0x1
c0017495:	8d 76 00             	lea    esi,[esi+0x0]
c0017498:	81 c4 1c 01 00 00    	add    esp,0x11c
c001749e:	c3                   	ret    
c001749f:	90                   	nop

c00174a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174a6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174ad:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174bc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174c4:	75 0a                	jne    c00174d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174c6:	b8 04 00 00 00       	mov    eax,0x4
c00174cb:	e9 54 01 00 00       	jmp    c0017624 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174d0:	83 ec 08             	sub    esp,0x8
c00174d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174de:	50                   	push   eax
c00174df:	e8 1c 91 fe ff       	call   c0000600 <strcpy>
c00174e4:	83 c4 10             	add    esp,0x10
c00174e7:	83 ec 08             	sub    esp,0x8
c00174ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174ee:	50                   	push   eax
c00174ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174f6:	e8 09 fc ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c00174fb:	83 c4 10             	add    esp,0x10
c00174fe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017506:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001750e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017512:	25 ff 00 00 00       	and    eax,0xff
c0017517:	83 e0 01             	and    eax,0x1
c001751a:	74 08                	je     c0017524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001751c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017524:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017528:	25 ff 00 00 00       	and    eax,0xff
c001752d:	83 e0 02             	and    eax,0x2
c0017530:	74 0a                	je     c001753c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017532:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001753a:	66 90                	xchg   ax,ax
c001753c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017540:	25 ff 00 00 00       	and    eax,0xff
c0017545:	83 e0 04             	and    eax,0x4
c0017548:	74 0a                	je     c0017554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001754a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017552:	66 90                	xchg   ax,ax
c0017554:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017558:	25 ff 00 00 00       	and    eax,0xff
c001755d:	83 e0 08             	and    eax,0x8
c0017560:	74 0a                	je     c001756c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017562:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001756a:	66 90                	xchg   ax,ax
c001756c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017570:	25 ff 00 00 00       	and    eax,0xff
c0017575:	83 e0 01             	and    eax,0x1
c0017578:	74 0a                	je     c0017584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001757a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017582:	66 90                	xchg   ax,ax
c0017584:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017588:	25 ff 00 00 00       	and    eax,0xff
c001758d:	83 e0 02             	and    eax,0x2
c0017590:	74 0a                	je     c001759c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017592:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001759a:	66 90                	xchg   ax,ax
c001759c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175a0:	25 ff 00 00 00       	and    eax,0xff
c00175a5:	83 e0 04             	and    eax,0x4
c00175a8:	74 0a                	je     c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175aa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175b2:	66 90                	xchg   ax,ax
c00175b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175b8:	25 ff 00 00 00       	and    eax,0xff
c00175bd:	83 e0 08             	and    eax,0x8
c00175c0:	74 0a                	je     c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175ca:	66 90                	xchg   ax,ax
c00175cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175d3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175e1:	31 d2                	xor    edx,edx
c00175e3:	88 c2                	mov    dl,al
c00175e5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175ec:	25 ff 00 00 00       	and    eax,0xff
c00175f1:	83 ec 04             	sub    esp,0x4
c00175f4:	52                   	push   edx
c00175f5:	50                   	push   eax
c00175f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175fa:	50                   	push   eax
c00175fb:	e8 fd d6 fe ff       	call   c0004cfd <f_chmod>
c0017600:	83 c4 10             	add    esp,0x10
c0017603:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001760a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017611:	85 c0                	test   eax,eax
c0017613:	75 07                	jne    c001761c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017615:	b8 00 00 00 00       	mov    eax,0x0
c001761a:	eb 08                	jmp    c0017624 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001761c:	b8 01 00 00 00       	mov    eax,0x1
c0017621:	8d 76 00             	lea    esi,[esi+0x0]
c0017624:	81 c4 2c 01 00 00    	add    esp,0x12c
c001762a:	c3                   	ret    
c001762b:	90                   	nop

c001762c <FAT::rename(char const*, char const*)>:
c001762c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017632:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001763a:	74 0c                	je     c0017648 <FAT::rename(char const*, char const*)+0x1c>
c001763c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017644:	75 0e                	jne    c0017654 <FAT::rename(char const*, char const*)+0x28>
c0017646:	66 90                	xchg   ax,ax
c0017648:	b8 04 00 00 00       	mov    eax,0x4
c001764d:	e9 9e 00 00 00       	jmp    c00176f0 <FAT::rename(char const*, char const*)+0xc4>
c0017652:	66 90                	xchg   ax,ax
c0017654:	83 ec 08             	sub    esp,0x8
c0017657:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001765e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017665:	50                   	push   eax
c0017666:	e8 95 8f fe ff       	call   c0000600 <strcpy>
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	83 ec 08             	sub    esp,0x8
c0017671:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017678:	50                   	push   eax
c0017679:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017680:	e8 7f fa ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c0017685:	83 c4 10             	add    esp,0x10
c0017688:	83 ec 08             	sub    esp,0x8
c001768b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017692:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017696:	50                   	push   eax
c0017697:	e8 64 8f fe ff       	call   c0000600 <strcpy>
c001769c:	83 c4 10             	add    esp,0x10
c001769f:	83 ec 08             	sub    esp,0x8
c00176a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176a6:	50                   	push   eax
c00176a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176ae:	e8 51 fa ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	83 ec 08             	sub    esp,0x8
c00176b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176bd:	50                   	push   eax
c00176be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176c5:	50                   	push   eax
c00176c6:	e8 7c d4 fe ff       	call   c0004b47 <f_rename>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176dc:	85 c0                	test   eax,eax
c00176de:	75 08                	jne    c00176e8 <FAT::rename(char const*, char const*)+0xbc>
c00176e0:	b8 00 00 00 00       	mov    eax,0x0
c00176e5:	eb 09                	jmp    c00176f0 <FAT::rename(char const*, char const*)+0xc4>
c00176e7:	90                   	nop
c00176e8:	b8 01 00 00 00       	mov    eax,0x1
c00176ed:	8d 76 00             	lea    esi,[esi+0x0]
c00176f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00176f6:	c3                   	ret    
c00176f7:	90                   	nop

c00176f8 <FAT::mkdir(char const*)>:
c00176f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00176fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017706:	75 08                	jne    c0017710 <FAT::mkdir(char const*)+0x18>
c0017708:	b8 04 00 00 00       	mov    eax,0x4
c001770d:	eb 61                	jmp    c0017770 <FAT::mkdir(char const*)+0x78>
c001770f:	90                   	nop
c0017710:	83 ec 08             	sub    esp,0x8
c0017713:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001771a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001771e:	50                   	push   eax
c001771f:	e8 dc 8e fe ff       	call   c0000600 <strcpy>
c0017724:	83 c4 10             	add    esp,0x10
c0017727:	83 ec 08             	sub    esp,0x8
c001772a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001772e:	50                   	push   eax
c001772f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017736:	e8 c9 f9 ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	83 ec 0c             	sub    esp,0xc
c0017741:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017745:	50                   	push   eax
c0017746:	e8 61 d2 fe ff       	call   c00049ac <f_mkdir>
c001774b:	83 c4 10             	add    esp,0x10
c001774e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017755:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001775c:	85 c0                	test   eax,eax
c001775e:	75 08                	jne    c0017768 <FAT::mkdir(char const*)+0x70>
c0017760:	b8 00 00 00 00       	mov    eax,0x0
c0017765:	eb 09                	jmp    c0017770 <FAT::mkdir(char const*)+0x78>
c0017767:	90                   	nop
c0017768:	b8 01 00 00 00       	mov    eax,0x1
c001776d:	8d 76 00             	lea    esi,[esi+0x0]
c0017770:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017776:	c3                   	ret    
c0017777:	90                   	nop

c0017778 <FAT::exists(char const*)>:
c0017778:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001777e:	83 ec 08             	sub    esp,0x8
c0017781:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017788:	8d 44 24 10          	lea    eax,[esp+0x10]
c001778c:	50                   	push   eax
c001778d:	e8 6e 8e fe ff       	call   c0000600 <strcpy>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	83 ec 08             	sub    esp,0x8
c0017798:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001779c:	50                   	push   eax
c001779d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177a4:	e8 5b f9 ff ff       	call   c0017104 <FAT::fixFilepath(char*)>
c00177a9:	83 c4 10             	add    esp,0x10
c00177ac:	83 ec 08             	sub    esp,0x8
c00177af:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177b6:	50                   	push   eax
c00177b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177bb:	50                   	push   eax
c00177bc:	e8 64 ce fe ff       	call   c0004625 <f_stat>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177d2:	85 c0                	test   eax,eax
c00177d4:	75 06                	jne    c00177dc <FAT::exists(char const*)+0x64>
c00177d6:	b0 01                	mov    al,0x1
c00177d8:	eb 06                	jmp    c00177e0 <FAT::exists(char const*)+0x68>
c00177da:	66 90                	xchg   ax,ax
c00177dc:	b0 00                	mov    al,0x0
c00177de:	66 90                	xchg   ax,ax
c00177e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177e6:	c3                   	ret    
c00177e7:	90                   	nop

c00177e8 <isoReadDiscSectorHelper>:
c00177e8:	83 ec 2c             	sub    esp,0x2c
c00177eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00177f3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00177f8:	83 e8 41             	sub    eax,0x41
c00177fb:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0017802:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017806:	ba 00 00 00 00       	mov    edx,0x0
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017816:	52                   	push   edx
c0017817:	50                   	push   eax
c0017818:	51                   	push   ecx
c0017819:	e8 4a 54 ff ff       	call   c000cc68 <LogicalDisk::read(unsigned long long, int, void*)>
c001781e:	83 c4 20             	add    esp,0x20
c0017821:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017825:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001782a:	74 0c                	je     c0017838 <isoReadDiscSectorHelper+0x50>
c001782c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017830:	c1 e0 0b             	shl    eax,0xb
c0017833:	eb 0b                	jmp    c0017840 <isoReadDiscSectorHelper+0x58>
c0017835:	8d 76 00             	lea    esi,[esi+0x0]
c0017838:	b8 00 00 00 00       	mov    eax,0x0
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	83 c4 2c             	add    esp,0x2c
c0017843:	c3                   	ret    

c0017844 <iso_kprintf>:
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001784c:	83 ec 08             	sub    esp,0x8
c001784f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017853:	50                   	push   eax
c0017854:	e8 dd 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	90                   	nop
c001785d:	83 c4 0c             	add    esp,0xc
c0017860:	c3                   	ret    
c0017861:	8d 76 00             	lea    esi,[esi+0x0]

c0017864 <iso_kprintfd>:
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001786c:	83 ec 08             	sub    esp,0x8
c001786f:	68 b0 f6 01 c0       	push   0xc001f6b0
c0017874:	50                   	push   eax
c0017875:	e8 bc 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0017882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017886:	83 ec 08             	sub    esp,0x8
c0017889:	52                   	push   edx
c001788a:	50                   	push   eax
c001788b:	e8 60 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	68 31 f5 01 c0       	push   0xc001f531
c00178a0:	50                   	push   eax
c00178a1:	e8 90 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	90                   	nop
c00178aa:	83 c4 0c             	add    esp,0xc
c00178ad:	c3                   	ret    

c00178ae <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178ae:	b8 08 00 00 00       	mov    eax,0x8
c00178b3:	c3                   	ret    

c00178b4 <ISO9660::getName()>:
c00178b4:	b8 b3 f6 01 c0       	mov    eax,0xc001f6b3
c00178b9:	c3                   	ret    

c00178ba <ISO9660::closeDir(void*)>:
c00178ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178be:	8b 00                	mov    eax,DWORD PTR [eax]
c00178c0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178c3:	90                   	nop

c00178c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178c4:	b8 01 00 00 00       	mov    eax,0x1
c00178c9:	c3                   	ret    

c00178ca <ISO9660::unlink(char const*)>:
c00178ca:	b8 01 00 00 00       	mov    eax,0x1
c00178cf:	c3                   	ret    

c00178d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178d0:	b8 03 00 00 00       	mov    eax,0x3
c00178d5:	c3                   	ret    

c00178d6 <ISO9660::rename(char const*, char const*)>:
c00178d6:	b8 01 00 00 00       	mov    eax,0x1
c00178db:	c3                   	ret    

c00178dc <ISO9660::mkdir(char const*)>:
c00178dc:	b8 01 00 00 00       	mov    eax,0x1
c00178e1:	c3                   	ret    

c00178e2 <ISO9660::~ISO9660()>:
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c00178ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ee:	89 10                	mov    DWORD PTR [eax],edx
c00178f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	50                   	push   eax
c00178f8:	e8 9b 2f ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c00178fd:	83 c4 10             	add    esp,0x10
c0017900:	90                   	nop
c0017901:	83 c4 0c             	add    esp,0xc
c0017904:	c3                   	ret    
c0017905:	90                   	nop

c0017906 <ISO9660::~ISO9660()>:
c0017906:	83 ec 0c             	sub    esp,0xc
c0017909:	83 ec 0c             	sub    esp,0xc
c001790c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017910:	e8 cd ff ff ff       	call   c00178e2 <ISO9660::~ISO9660()>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	83 ec 08             	sub    esp,0x8
c001791b:	6a 08                	push   0x8
c001791d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017921:	e8 36 2b ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	83 c4 0c             	add    esp,0xc
c001792c:	c3                   	ret    
c001792d:	90                   	nop

c001792e <ISO9660::exists(char const*)>:
c001792e:	83 ec 18             	sub    esp,0x18
c0017931:	68 ce f6 01 c0       	push   0xc001f6ce
c0017936:	e8 34 89 ff ff       	call   c001026f <KePanic(char const*)>
c001793b:	31 c0                	xor    eax,eax
c001793d:	83 c4 1c             	add    esp,0x1c
c0017940:	c3                   	ret    
c0017941:	90                   	nop

c0017942 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017942:	56                   	push   esi
c0017943:	53                   	push   ebx
c0017944:	50                   	push   eax
c0017945:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017949:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001794d:	85 db                	test   ebx,ebx
c001794f:	0f 84 82 00 00 00    	je     c00179d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017955:	85 f6                	test   esi,esi
c0017957:	74 7e                	je     c00179d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017959:	ba 03 00 00 00       	mov    edx,0x3
c001795e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017963:	75 77                	jne    c00179dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017965:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017968:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c001796e:	74 34                	je     c00179a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017970:	83 ec 0c             	sub    esp,0xc
c0017973:	50                   	push   eax
c0017974:	e8 46 ee fe ff       	call   c00067bf <init_percd>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	ba 0b 00 00 00       	mov    edx,0xb
c0017981:	40                   	inc    eax
c0017982:	74 58                	je     c00179dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017984:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c001798b:	74 10                	je     c001799d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001798d:	83 ec 0c             	sub    esp,0xc
c0017990:	68 ec f6 01 c0       	push   0xc001f6ec
c0017995:	e8 d5 88 ff ff       	call   c001026f <KePanic(char const*)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	8a 03                	mov    al,BYTE PTR [ebx]
c001799f:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c00179ae:	83 c3 03             	add    ebx,0x3
c00179b1:	50                   	push   eax
c00179b2:	e8 08 ee fe ff       	call   c00067bf <init_percd>
c00179b7:	59                   	pop    ecx
c00179b8:	58                   	pop    eax
c00179b9:	6a 00                	push   0x0
c00179bb:	53                   	push   ebx
c00179bc:	e8 3c e9 fe ff       	call   c00062fd <iso_open>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	ba 01 00 00 00       	mov    edx,0x1
c00179c9:	83 f8 ff             	cmp    eax,0xffffffff
c00179cc:	74 0e                	je     c00179dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179ce:	83 c0 64             	add    eax,0x64
c00179d1:	31 d2                	xor    edx,edx
c00179d3:	89 06                	mov    DWORD PTR [esi],eax
c00179d5:	eb 05                	jmp    c00179dc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179d7:	ba 04 00 00 00       	mov    edx,0x4
c00179dc:	89 d0                	mov    eax,edx
c00179de:	5a                   	pop    edx
c00179df:	5b                   	pop    ebx
c00179e0:	5e                   	pop    esi
c00179e1:	c3                   	ret    

c00179e2 <ISO9660::openDir(char const*, void**)>:
c00179e2:	56                   	push   esi
c00179e3:	53                   	push   ebx
c00179e4:	50                   	push   eax
c00179e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179ed:	85 db                	test   ebx,ebx
c00179ef:	74 76                	je     c0017a67 <ISO9660::openDir(char const*, void**)+0x85>
c00179f1:	85 f6                	test   esi,esi
c00179f3:	74 72                	je     c0017a67 <ISO9660::openDir(char const*, void**)+0x85>
c00179f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179f8:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c00179fe:	74 34                	je     c0017a34 <ISO9660::openDir(char const*, void**)+0x52>
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	50                   	push   eax
c0017a04:	e8 b6 ed fe ff       	call   c00067bf <init_percd>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	ba 0b 00 00 00       	mov    edx,0xb
c0017a11:	40                   	inc    eax
c0017a12:	74 58                	je     c0017a6c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a14:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017a1b:	74 10                	je     c0017a2d <ISO9660::openDir(char const*, void**)+0x4b>
c0017a1d:	83 ec 0c             	sub    esp,0xc
c0017a20:	68 ec f6 01 c0       	push   0xc001f6ec
c0017a25:	e8 45 88 ff ff       	call   c001026f <KePanic(char const*)>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a2f:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017a3e:	83 c3 03             	add    ebx,0x3
c0017a41:	50                   	push   eax
c0017a42:	e8 78 ed fe ff       	call   c00067bf <init_percd>
c0017a47:	59                   	pop    ecx
c0017a48:	58                   	pop    eax
c0017a49:	6a 01                	push   0x1
c0017a4b:	53                   	push   ebx
c0017a4c:	e8 ac e8 fe ff       	call   c00062fd <iso_open>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	ba 01 00 00 00       	mov    edx,0x1
c0017a59:	83 f8 ff             	cmp    eax,0xffffffff
c0017a5c:	74 0e                	je     c0017a6c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a5e:	83 c0 64             	add    eax,0x64
c0017a61:	31 d2                	xor    edx,edx
c0017a63:	89 06                	mov    DWORD PTR [esi],eax
c0017a65:	eb 05                	jmp    c0017a6c <ISO9660::openDir(char const*, void**)+0x8a>
c0017a67:	ba 04 00 00 00       	mov    edx,0x4
c0017a6c:	89 d0                	mov    eax,edx
c0017a6e:	5a                   	pop    edx
c0017a6f:	5b                   	pop    ebx
c0017a70:	5e                   	pop    esi
c0017a71:	c3                   	ret    

c0017a72 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a72:	53                   	push   ebx
c0017a73:	83 ec 08             	sub    esp,0x8
c0017a76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a7e:	85 c0                	test   eax,eax
c0017a80:	74 25                	je     c0017aa7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a82:	85 db                	test   ebx,ebx
c0017a84:	74 21                	je     c0017aa7 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a86:	83 e8 64             	sub    eax,0x64
c0017a89:	52                   	push   edx
c0017a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a92:	50                   	push   eax
c0017a93:	e8 0d e9 fe ff       	call   c00063a5 <iso_read>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	89 03                	mov    DWORD PTR [ebx],eax
c0017a9d:	09 d0                	or     eax,edx
c0017a9f:	0f 94 c0             	sete   al
c0017aa2:	0f b6 c0             	movzx  eax,al
c0017aa5:	eb 05                	jmp    c0017aac <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017aa7:	b8 04 00 00 00       	mov    eax,0x4
c0017aac:	83 c4 08             	add    esp,0x8
c0017aaf:	5b                   	pop    ebx
c0017ab0:	c3                   	ret    
c0017ab1:	90                   	nop

c0017ab2 <ISO9660::seek(void*, unsigned long long)>:
c0017ab2:	57                   	push   edi
c0017ab3:	56                   	push   esi
c0017ab4:	b8 04 00 00 00       	mov    eax,0x4
c0017ab9:	51                   	push   ecx
c0017aba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017abe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ac2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ac6:	85 d2                	test   edx,edx
c0017ac8:	74 1c                	je     c0017ae6 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017aca:	6a 00                	push   0x0
c0017acc:	83 ea 64             	sub    edx,0x64
c0017acf:	57                   	push   edi
c0017ad0:	56                   	push   esi
c0017ad1:	52                   	push   edx
c0017ad2:	e8 e4 e9 fe ff       	call   c00064bb <iso_seek>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	31 f0                	xor    eax,esi
c0017adc:	31 fa                	xor    edx,edi
c0017ade:	09 d0                	or     eax,edx
c0017ae0:	0f 95 c0             	setne  al
c0017ae3:	0f b6 c0             	movzx  eax,al
c0017ae6:	5a                   	pop    edx
c0017ae7:	5e                   	pop    esi
c0017ae8:	5f                   	pop    edi
c0017ae9:	c3                   	ret    

c0017aea <ISO9660::tell(void*, unsigned long long*)>:
c0017aea:	53                   	push   ebx
c0017aeb:	83 ec 08             	sub    esp,0x8
c0017aee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017af2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017af6:	85 c0                	test   eax,eax
c0017af8:	74 1c                	je     c0017b16 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017afa:	85 db                	test   ebx,ebx
c0017afc:	74 18                	je     c0017b16 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017afe:	83 ec 0c             	sub    esp,0xc
c0017b01:	83 e8 64             	sub    eax,0x64
c0017b04:	50                   	push   eax
c0017b05:	e8 35 ea fe ff       	call   c000653f <iso_tell>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	89 03                	mov    DWORD PTR [ebx],eax
c0017b0f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b12:	31 c0                	xor    eax,eax
c0017b14:	eb 05                	jmp    c0017b1b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b16:	b8 04 00 00 00       	mov    eax,0x4
c0017b1b:	83 c4 08             	add    esp,0x8
c0017b1e:	5b                   	pop    ebx
c0017b1f:	c3                   	ret    

c0017b20 <ISO9660::stat(void*, unsigned long long*)>:
c0017b20:	53                   	push   ebx
c0017b21:	83 ec 08             	sub    esp,0x8
c0017b24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b28:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b2c:	85 c0                	test   eax,eax
c0017b2e:	74 20                	je     c0017b50 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b30:	85 db                	test   ebx,ebx
c0017b32:	74 1c                	je     c0017b50 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b34:	83 ec 0c             	sub    esp,0xc
c0017b37:	83 e8 64             	sub    eax,0x64
c0017b3a:	50                   	push   eax
c0017b3b:	e8 30 ea fe ff       	call   c0006570 <iso_total>
c0017b40:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b47:	89 03                	mov    DWORD PTR [ebx],eax
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	31 c0                	xor    eax,eax
c0017b4e:	eb 05                	jmp    c0017b55 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b50:	b8 04 00 00 00       	mov    eax,0x4
c0017b55:	83 c4 08             	add    esp,0x8
c0017b58:	5b                   	pop    ebx
c0017b59:	c3                   	ret    

c0017b5a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b5a:	55                   	push   ebp
c0017b5b:	57                   	push   edi
c0017b5c:	56                   	push   esi
c0017b5d:	53                   	push   ebx
c0017b5e:	83 ec 0c             	sub    esp,0xc
c0017b61:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b65:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b69:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b6d:	85 ff                	test   edi,edi
c0017b6f:	0f 94 c2             	sete   dl
c0017b72:	85 f6                	test   esi,esi
c0017b74:	0f 94 c0             	sete   al
c0017b77:	08 c2                	or     dl,al
c0017b79:	0f 85 9e 00 00 00    	jne    c0017c1d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b7f:	85 db                	test   ebx,ebx
c0017b81:	0f 84 96 00 00 00    	je     c0017c1d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b87:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b8a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017b90:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017b97:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b9a:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017ba0:	74 34                	je     c0017bd6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017ba2:	83 ec 0c             	sub    esp,0xc
c0017ba5:	50                   	push   eax
c0017ba6:	e8 14 ec fe ff       	call   c00067bf <init_percd>
c0017bab:	83 c4 10             	add    esp,0x10
c0017bae:	ba 0b 00 00 00       	mov    edx,0xb
c0017bb3:	40                   	inc    eax
c0017bb4:	74 6c                	je     c0017c22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bb6:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017bbd:	74 10                	je     c0017bcf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017bbf:	83 ec 0c             	sub    esp,0xc
c0017bc2:	68 ec f6 01 c0       	push   0xc001f6ec
c0017bc7:	e8 a3 86 ff ff       	call   c001026f <KePanic(char const*)>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bd1:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017bd6:	83 c3 03             	add    ebx,0x3
c0017bd9:	52                   	push   edx
c0017bda:	52                   	push   edx
c0017bdb:	6a 00                	push   0x0
c0017bdd:	53                   	push   ebx
c0017bde:	e8 1a e7 fe ff       	call   c00062fd <iso_open>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	89 c5                	mov    ebp,eax
c0017be8:	83 f8 ff             	cmp    eax,0xffffffff
c0017beb:	75 0f                	jne    c0017bfc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017bed:	50                   	push   eax
c0017bee:	50                   	push   eax
c0017bef:	6a 01                	push   0x1
c0017bf1:	53                   	push   ebx
c0017bf2:	e8 06 e7 fe ff       	call   c00062fd <iso_open>
c0017bf7:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017bfa:	eb 1a                	jmp    c0017c16 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017bfc:	83 ec 0c             	sub    esp,0xc
c0017bff:	50                   	push   eax
c0017c00:	e8 6b e9 fe ff       	call   c0006570 <iso_total>
c0017c05:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c0c:	89 06                	mov    DWORD PTR [esi],eax
c0017c0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c11:	e8 71 e7 fe ff       	call   c0006387 <iso_close>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	31 d2                	xor    edx,edx
c0017c1b:	eb 05                	jmp    c0017c22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c1d:	ba 04 00 00 00       	mov    edx,0x4
c0017c22:	83 c4 0c             	add    esp,0xc
c0017c25:	89 d0                	mov    eax,edx
c0017c27:	5b                   	pop    ebx
c0017c28:	5e                   	pop    esi
c0017c29:	5f                   	pop    edi
c0017c2a:	5d                   	pop    ebp
c0017c2b:	c3                   	ret    

c0017c2c <ISO9660::close(void*)>:
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	b8 04 00 00 00       	mov    eax,0x4
c0017c34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c38:	85 d2                	test   edx,edx
c0017c3a:	74 11                	je     c0017c4d <ISO9660::close(void*)+0x21>
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	83 ea 64             	sub    edx,0x64
c0017c42:	52                   	push   edx
c0017c43:	e8 3f e7 fe ff       	call   c0006387 <iso_close>
c0017c48:	83 c4 10             	add    esp,0x10
c0017c4b:	31 c0                	xor    eax,eax
c0017c4d:	83 c4 0c             	add    esp,0xc
c0017c50:	c3                   	ret    
c0017c51:	90                   	nop

c0017c52 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c52:	55                   	push   ebp
c0017c53:	57                   	push   edi
c0017c54:	56                   	push   esi
c0017c55:	53                   	push   ebx
c0017c56:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c5c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c63:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c6a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c71:	85 c0                	test   eax,eax
c0017c73:	0f 84 96 00 00 00    	je     c0017d0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c79:	85 db                	test   ebx,ebx
c0017c7b:	0f 84 8e 00 00 00    	je     c0017d0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c81:	83 ec 0c             	sub    esp,0xc
c0017c84:	83 e8 64             	sub    eax,0x64
c0017c87:	50                   	push   eax
c0017c88:	e8 34 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	89 c6                	mov    esi,eax
c0017c92:	85 c0                	test   eax,eax
c0017c94:	75 18                	jne    c0017cae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017c96:	52                   	push   edx
c0017c97:	68 10 01 00 00       	push   0x110
c0017c9c:	6a 00                	push   0x0
c0017c9e:	57                   	push   edi
c0017c9f:	e8 2c 88 fe ff       	call   c00004d0 <memset>
c0017ca4:	83 c4 10             	add    esp,0x10
c0017ca7:	b8 01 00 00 00       	mov    eax,0x1
c0017cac:	eb 66                	jmp    c0017d14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cae:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cb4:	8d 68 08             	lea    ebp,[eax+0x8]
c0017cb7:	83 ec 0c             	sub    esp,0xc
c0017cba:	55                   	push   ebp
c0017cbb:	e8 80 88 fe ff       	call   c0000540 <strlen>
c0017cc0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017cd3:	75 0a                	jne    c0017cdf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017cd5:	b8 02 00 00 00       	mov    eax,0x2
c0017cda:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017cdd:	74 05                	je     c0017ce4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017cdf:	b8 01 00 00 00       	mov    eax,0x1
c0017ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ce8:	50                   	push   eax
c0017ce9:	50                   	push   eax
c0017cea:	55                   	push   ebp
c0017ceb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017cf3:	50                   	push   eax
c0017cf4:	e8 07 89 fe ff       	call   c0000600 <strcpy>
c0017cf9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d02:	31 c0                	xor    eax,eax
c0017d04:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d0a:	83 c4 10             	add    esp,0x10
c0017d0d:	eb 05                	jmp    c0017d14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d0f:	b8 04 00 00 00       	mov    eax,0x4
c0017d14:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d1a:	5b                   	pop    ebx
c0017d1b:	5e                   	pop    esi
c0017d1c:	5f                   	pop    edi
c0017d1d:	5d                   	pop    ebp
c0017d1e:	c3                   	ret    

c0017d1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d1f:	57                   	push   edi
c0017d20:	56                   	push   esi
c0017d21:	53                   	push   ebx
c0017d22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d2e:	39 35 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,esi
c0017d34:	75 08                	jne    c0017d3e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d36:	38 1d f0 00 02 c0    	cmp    BYTE PTR ds:0xc00200f0,bl
c0017d3c:	74 4a                	je     c0017d88 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d3e:	83 ec 0c             	sub    esp,0xc
c0017d41:	31 d2                	xor    edx,edx
c0017d43:	68 40 63 02 c0       	push   0xc0026340
c0017d48:	0f be c3             	movsx  eax,bl
c0017d4b:	6a 01                	push   0x1
c0017d4d:	52                   	push   edx
c0017d4e:	56                   	push   esi
c0017d4f:	ff 34 85 1c 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdace4]
c0017d56:	e8 0d 4f ff ff       	call   c000cc68 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d5b:	83 c4 20             	add    esp,0x20
c0017d5e:	85 c0                	test   eax,eax
c0017d60:	75 0e                	jne    c0017d70 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d62:	89 35 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,esi
c0017d68:	88 1d f0 00 02 c0    	mov    BYTE PTR ds:0xc00200f0,bl
c0017d6e:	eb 18                	jmp    c0017d88 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d70:	50                   	push   eax
c0017d71:	68 00 08 00 00       	push   0x800
c0017d76:	6a 00                	push   0x0
c0017d78:	57                   	push   edi
c0017d79:	e8 52 87 fe ff       	call   c00004d0 <memset>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	b8 01 00 00 00       	mov    eax,0x1
c0017d86:	eb 0e                	jmp    c0017d96 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d88:	be 40 63 02 c0       	mov    esi,0xc0026340
c0017d8d:	b9 00 08 00 00       	mov    ecx,0x800
c0017d92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d94:	31 c0                	xor    eax,eax
c0017d96:	5b                   	pop    ebx
c0017d97:	5e                   	pop    esi
c0017d98:	5f                   	pop    edi
c0017d99:	c3                   	ret    

c0017d9a <ISO9660::tryMount(LogicalDisk*, int)>:
c0017d9a:	53                   	push   ebx
c0017d9b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017da1:	c7 05 24 63 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0026324,0xdeadbeef
c0017dab:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017db2:	8d 58 41             	lea    ebx,[eax+0x41]
c0017db5:	0f be db             	movsx  ebx,bl
c0017db8:	53                   	push   ebx
c0017db9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dbd:	50                   	push   eax
c0017dbe:	6a 10                	push   0x10
c0017dc0:	e8 5a ff ff ff       	call   c0017d1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	31 d2                	xor    edx,edx
c0017dca:	85 c0                	test   eax,eax
c0017dcc:	75 33                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dce:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017dd3:	75 2c                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dd5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017dda:	75 25                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ddc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017de1:	75 1e                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017de8:	75 17                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dea:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017def:	75 10                	jne    c0017e01 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	53                   	push   ebx
c0017df5:	e8 c5 e9 fe ff       	call   c00067bf <init_percd>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	40                   	inc    eax
c0017dfe:	0f 95 c2             	setne  dl
c0017e01:	88 d0                	mov    al,dl
c0017e03:	81 c4 08 08 00 00    	add    esp,0x808
c0017e09:	5b                   	pop    ebx
c0017e0a:	c3                   	ret    
c0017e0b:	90                   	nop

c0017e0c <ISO9660::ISO9660()>:
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	50                   	push   eax
c0017e17:	e8 58 2a ff ff       	call   c000a874 <Filesystem::Filesystem()>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c0017e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e28:	89 10                	mov    DWORD PTR [eax],edx
c0017e2a:	e8 92 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e2f:	90                   	nop
c0017e30:	83 c4 0c             	add    esp,0xc
c0017e33:	c3                   	ret    

c0017e34 <SoundCard::beginPlayback()>:
c0017e34:	c7 44 24 04 64 f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f764
c0017e3c:	e9 2e 84 ff ff       	jmp    c001026f <KePanic(char const*)>
c0017e41:	90                   	nop

c0017e42 <SoundCard::stopPlayback()>:
c0017e42:	c7 44 24 04 64 f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f764
c0017e4a:	e9 20 84 ff ff       	jmp    c001026f <KePanic(char const*)>
c0017e4f:	90                   	nop

c0017e50 <SoundCard::SoundCard(char const*)>:
c0017e50:	83 ec 1c             	sub    esp,0x1c
c0017e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e57:	83 ec 08             	sub    esp,0x8
c0017e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e5e:	50                   	push   eax
c0017e5f:	e8 c4 3c ff ff       	call   c000bb28 <Device::Device(char const*)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c0017e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e70:	89 10                	mov    DWORD PTR [eax],edx
c0017e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e76:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e81:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eab:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017eb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ebd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ec2:	7f 19                	jg     c0017edd <SoundCard::SoundCard(char const*)+0x8d>
c0017ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ecc:	83 c2 54             	add    edx,0x54
c0017ecf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ed7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017edb:	eb e0                	jmp    c0017ebd <SoundCard::SoundCard(char const*)+0x6d>
c0017edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ee8:	90                   	nop
c0017ee9:	83 c4 1c             	add    esp,0x1c
c0017eec:	c3                   	ret    
c0017eed:	90                   	nop

c0017eee <SoundCard::~SoundCard()>:
c0017eee:	83 ec 0c             	sub    esp,0xc
c0017ef1:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c0017ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017efa:	89 10                	mov    DWORD PTR [eax],edx
c0017efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f00:	83 ec 0c             	sub    esp,0xc
c0017f03:	50                   	push   eax
c0017f04:	e8 89 39 ff ff       	call   c000b892 <Device::~Device()>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	90                   	nop
c0017f0d:	83 c4 0c             	add    esp,0xc
c0017f10:	c3                   	ret    
c0017f11:	90                   	nop

c0017f12 <SoundCard::~SoundCard()>:
c0017f12:	83 ec 0c             	sub    esp,0xc
c0017f15:	83 ec 0c             	sub    esp,0xc
c0017f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f1c:	e8 cd ff ff ff       	call   c0017eee <SoundCard::~SoundCard()>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	83 ec 08             	sub    esp,0x8
c0017f27:	68 e8 01 00 00       	push   0x1e8
c0017f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f30:	e8 27 25 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	83 c4 0c             	add    esp,0xc
c0017f3b:	c3                   	ret    

c0017f3c <SoundCard::configureRates(int, int, int)>:
c0017f3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f40:	31 c0                	xor    eax,eax
c0017f42:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f49:	75 20                	jne    c0017f6b <SoundCard::configureRates(int, int, int)+0x2f>
c0017f4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f4f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f59:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f63:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f69:	b0 01                	mov    al,0x1
c0017f6b:	c3                   	ret    

c0017f6c <SoundCard::getSamples16(int, short*)>:
c0017f6c:	55                   	push   ebp
c0017f6d:	57                   	push   edi
c0017f6e:	31 ff                	xor    edi,edi
c0017f70:	56                   	push   esi
c0017f71:	53                   	push   ebx
c0017f72:	31 db                	xor    ebx,ebx
c0017f74:	83 ec 10             	sub    esp,0x10
c0017f77:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f7b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f7f:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f82:	50                   	push   eax
c0017f83:	6a 00                	push   0x0
c0017f85:	55                   	push   ebp
c0017f86:	e8 45 85 fe ff       	call   c00004d0 <memset>
c0017f8b:	83 c4 10             	add    esp,0x10
c0017f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f92:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017f99:	85 c0                	test   eax,eax
c0017f9b:	74 1b                	je     c0017fb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017f9d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fa1:	75 15                	jne    c0017fb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fa7:	55                   	push   ebp
c0017fa8:	56                   	push   esi
c0017fa9:	50                   	push   eax
c0017faa:	e8 ed 02 00 00       	call   c001829c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	39 c7                	cmp    edi,eax
c0017fb4:	7d 02                	jge    c0017fb8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fb6:	89 c7                	mov    edi,eax
c0017fb8:	43                   	inc    ebx
c0017fb9:	83 fb 20             	cmp    ebx,0x20
c0017fbc:	75 d0                	jne    c0017f8e <SoundCard::getSamples16(int, short*)+0x22>
c0017fbe:	83 c4 0c             	add    esp,0xc
c0017fc1:	89 f8                	mov    eax,edi
c0017fc3:	5b                   	pop    ebx
c0017fc4:	5e                   	pop    esi
c0017fc5:	5f                   	pop    edi
c0017fc6:	5d                   	pop    ebp
c0017fc7:	c3                   	ret    

c0017fc8 <SoundCard::getSamples32(int, int*)>:
c0017fc8:	55                   	push   ebp
c0017fc9:	57                   	push   edi
c0017fca:	31 ff                	xor    edi,edi
c0017fcc:	56                   	push   esi
c0017fcd:	31 f6                	xor    esi,esi
c0017fcf:	53                   	push   ebx
c0017fd0:	83 ec 10             	sub    esp,0x10
c0017fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017fdb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fdf:	c1 e0 02             	shl    eax,0x2
c0017fe2:	50                   	push   eax
c0017fe3:	6a 00                	push   0x0
c0017fe5:	55                   	push   ebp
c0017fe6:	e8 e5 84 fe ff       	call   c00004d0 <memset>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017ff5:	85 c0                	test   eax,eax
c0017ff7:	74 1b                	je     c0018014 <SoundCard::getSamples32(int, int*)+0x4c>
c0017ff9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017ffd:	75 15                	jne    c0018014 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fff:	53                   	push   ebx
c0018000:	55                   	push   ebp
c0018001:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018005:	50                   	push   eax
c0018006:	e8 55 03 00 00       	call   c0018360 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	39 c6                	cmp    esi,eax
c0018010:	7d 02                	jge    c0018014 <SoundCard::getSamples32(int, int*)+0x4c>
c0018012:	89 c6                	mov    esi,eax
c0018014:	47                   	inc    edi
c0018015:	83 ff 20             	cmp    edi,0x20
c0018018:	75 d4                	jne    c0017fee <SoundCard::getSamples32(int, int*)+0x26>
c001801a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018020:	85 f6                	test   esi,esi
c0018022:	75 0f                	jne    c0018033 <SoundCard::getSamples32(int, int*)+0x6b>
c0018024:	84 c0                	test   al,al
c0018026:	74 1b                	je     c0018043 <SoundCard::getSamples32(int, int*)+0x7b>
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001802d:	53                   	push   ebx
c001802e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018031:	eb 0d                	jmp    c0018040 <SoundCard::getSamples32(int, int*)+0x78>
c0018033:	84 c0                	test   al,al
c0018035:	75 0c                	jne    c0018043 <SoundCard::getSamples32(int, int*)+0x7b>
c0018037:	83 ec 0c             	sub    esp,0xc
c001803a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001803c:	53                   	push   ebx
c001803d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	83 c4 0c             	add    esp,0xc
c0018046:	89 f0                	mov    eax,esi
c0018048:	5b                   	pop    ebx
c0018049:	5e                   	pop    esi
c001804a:	5f                   	pop    edi
c001804b:	5d                   	pop    ebp
c001804c:	c3                   	ret    
c001804d:	90                   	nop

c001804e <SoundCard::addChannel(SoundPort*)>:
c001804e:	83 ec 0c             	sub    esp,0xc
c0018051:	31 c0                	xor    eax,eax
c0018053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018057:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001805f:	74 1b                	je     c001807c <SoundCard::addChannel(SoundPort*)+0x2e>
c0018061:	40                   	inc    eax
c0018062:	83 f8 20             	cmp    eax,0x20
c0018065:	75 f0                	jne    c0018057 <SoundCard::addChannel(SoundPort*)+0x9>
c0018067:	83 ec 0c             	sub    esp,0xc
c001806a:	68 89 f7 01 c0       	push   0xc001f789
c001806f:	e8 fb 81 ff ff       	call   c001026f <KePanic(char const*)>
c0018074:	83 c4 10             	add    esp,0x10
c0018077:	83 c8 ff             	or     eax,0xffffffff
c001807a:	eb 0b                	jmp    c0018087 <SoundCard::addChannel(SoundPort*)+0x39>
c001807c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018080:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018087:	83 c4 0c             	add    esp,0xc
c001808a:	c3                   	ret    
c001808b:	90                   	nop

c001808c <SoundCard::removeChannel(int)>:
c001808c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018094:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001809f:	c3                   	ret    

c00180a0 <SoundPort::SoundPort(int, int, int, int)>:
c00180a0:	83 ec 0c             	sub    esp,0xc
c00180a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180be:	89 10                	mov    DWORD PTR [eax],edx
c00180c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180d6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180db:	75 13                	jne    c00180f0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e3:	05 a0 0f 00 00       	add    eax,0xfa0
c00180e8:	01 c0                	add    eax,eax
c00180ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180ee:	66 90                	xchg   ax,ax
c00180f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00180fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ff:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001810d:	c1 e0 02             	shl    eax,0x2
c0018110:	83 ec 0c             	sub    esp,0xc
c0018113:	50                   	push   eax
c0018114:	e8 a0 f6 fe ff       	call   c00077b9 <malloc>
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	89 c2                	mov    edx,eax
c001811e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018122:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018125:	90                   	nop
c0018126:	83 c4 0c             	add    esp,0xc
c0018129:	c3                   	ret    
c001812a:	66 90                	xchg   ax,ax

c001812c <SoundPort::~SoundPort()>:
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018133:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018136:	85 c0                	test   eax,eax
c0018138:	74 1e                	je     c0018158 <SoundPort::~SoundPort()+0x2c>
c001813a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018141:	83 ec 0c             	sub    esp,0xc
c0018144:	50                   	push   eax
c0018145:	e8 7f f6 fe ff       	call   c00077c9 <free>
c001814a:	83 c4 10             	add    esp,0x10
c001814d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018151:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018158:	90                   	nop
c0018159:	83 c4 0c             	add    esp,0xc
c001815c:	c3                   	ret    
c001815d:	90                   	nop
c001815e:	66 90                	xchg   ax,ax

c0018160 <SoundPort::unpause()>:
c0018160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018164:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018168:	c3                   	ret    
c0018169:	90                   	nop
c001816a:	66 90                	xchg   ax,ax

c001816c <SoundPort::pause()>:
c001816c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018170:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018174:	c3                   	ret    
c0018175:	90                   	nop
c0018176:	66 90                	xchg   ax,ax

c0018178 <SoundPort::getBufferUsed()>:
c0018178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001817c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001817f:	c3                   	ret    

c0018180 <SoundPort::getBufferSize()>:
c0018180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018187:	c3                   	ret    

c0018188 <SoundPort::buffer16(short*, int)>:
c0018188:	55                   	push   ebp
c0018189:	57                   	push   edi
c001818a:	56                   	push   esi
c001818b:	53                   	push   ebx
c001818c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018190:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018194:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0018197:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001819a:	74 68                	je     c0018204 <SoundPort::buffer16(short*, int)+0x7c>
c001819c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181a0:	85 c9                	test   ecx,ecx
c00181a2:	7e 60                	jle    c0018204 <SoundPort::buffer16(short*, int)+0x7c>
c00181a4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181a8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181ab:	c1 e1 0f             	shl    ecx,0xf
c00181ae:	8d 70 01             	lea    esi,[eax+0x1]
c00181b1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181b4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181ba:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181bd:	74 4d                	je     c001820c <SoundPort::buffer16(short*, int)+0x84>
c00181bf:	31 f6                	xor    esi,esi
c00181c1:	eb 21                	jmp    c00181e4 <SoundPort::buffer16(short*, int)+0x5c>
c00181c3:	90                   	nop
c00181c4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181c9:	8d 79 01             	lea    edi,[ecx+0x1]
c00181cc:	c1 e3 0f             	shl    ebx,0xf
c00181cf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181d2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181d5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181de:	74 1c                	je     c00181fc <SoundPort::buffer16(short*, int)+0x74>
c00181e0:	89 c6                	mov    esi,eax
c00181e2:	66 90                	xchg   ax,ax
c00181e4:	8d 46 01             	lea    eax,[esi+0x1]
c00181e7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181eb:	75 d7                	jne    c00181c4 <SoundPort::buffer16(short*, int)+0x3c>
c00181ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181f1:	8d 76 00             	lea    esi,[esi+0x0]
c00181f4:	5b                   	pop    ebx
c00181f5:	5e                   	pop    esi
c00181f6:	5f                   	pop    edi
c00181f7:	5d                   	pop    ebp
c00181f8:	c3                   	ret    
c00181f9:	8d 76 00             	lea    esi,[esi+0x0]
c00181fc:	5b                   	pop    ebx
c00181fd:	8d 46 02             	lea    eax,[esi+0x2]
c0018200:	5e                   	pop    esi
c0018201:	5f                   	pop    edi
c0018202:	5d                   	pop    ebp
c0018203:	c3                   	ret    
c0018204:	5b                   	pop    ebx
c0018205:	31 c0                	xor    eax,eax
c0018207:	5e                   	pop    esi
c0018208:	5f                   	pop    edi
c0018209:	5d                   	pop    ebp
c001820a:	c3                   	ret    
c001820b:	90                   	nop
c001820c:	b8 01 00 00 00       	mov    eax,0x1
c0018211:	eb e1                	jmp    c00181f4 <SoundPort::buffer16(short*, int)+0x6c>
c0018213:	90                   	nop

c0018214 <SoundPort::buffer32(int*, int)>:
c0018214:	55                   	push   ebp
c0018215:	57                   	push   edi
c0018216:	56                   	push   esi
c0018217:	53                   	push   ebx
c0018218:	51                   	push   ecx
c0018219:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001821d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018221:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018224:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018228:	89 04 24             	mov    DWORD PTR [esp],eax
c001822b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001822e:	74 5c                	je     c001828c <SoundPort::buffer32(int*, int)+0x78>
c0018230:	85 c0                	test   eax,eax
c0018232:	7e 58                	jle    c001828c <SoundPort::buffer32(int*, int)+0x78>
c0018234:	8d 71 01             	lea    esi,[ecx+0x1]
c0018237:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001823a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001823d:	8b 37                	mov    esi,DWORD PTR [edi]
c001823f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018242:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018245:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018248:	74 4a                	je     c0018294 <SoundPort::buffer32(int*, int)+0x80>
c001824a:	31 f6                	xor    esi,esi
c001824c:	eb 1e                	jmp    c001826c <SoundPort::buffer32(int*, int)+0x58>
c001824e:	66 90                	xchg   ax,ax
c0018250:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018253:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018256:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018259:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001825c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018260:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018263:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018266:	74 18                	je     c0018280 <SoundPort::buffer32(int*, int)+0x6c>
c0018268:	89 de                	mov    esi,ebx
c001826a:	66 90                	xchg   ax,ax
c001826c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001826f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018272:	75 dc                	jne    c0018250 <SoundPort::buffer32(int*, int)+0x3c>
c0018274:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018277:	90                   	nop
c0018278:	5a                   	pop    edx
c0018279:	5b                   	pop    ebx
c001827a:	5e                   	pop    esi
c001827b:	5f                   	pop    edi
c001827c:	5d                   	pop    ebp
c001827d:	c3                   	ret    
c001827e:	66 90                	xchg   ax,ax
c0018280:	5a                   	pop    edx
c0018281:	8d 46 02             	lea    eax,[esi+0x2]
c0018284:	5b                   	pop    ebx
c0018285:	5e                   	pop    esi
c0018286:	5f                   	pop    edi
c0018287:	5d                   	pop    ebp
c0018288:	c3                   	ret    
c0018289:	8d 76 00             	lea    esi,[esi+0x0]
c001828c:	5a                   	pop    edx
c001828d:	31 c0                	xor    eax,eax
c001828f:	5b                   	pop    ebx
c0018290:	5e                   	pop    esi
c0018291:	5f                   	pop    edi
c0018292:	5d                   	pop    ebp
c0018293:	c3                   	ret    
c0018294:	b8 01 00 00 00       	mov    eax,0x1
c0018299:	eb dd                	jmp    c0018278 <SoundPort::buffer32(int*, int)+0x64>
c001829b:	90                   	nop

c001829c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001829c:	57                   	push   edi
c001829d:	56                   	push   esi
c001829e:	53                   	push   ebx
c001829f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182a3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182a7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182ad:	39 03                	cmp    DWORD PTR [ebx],eax
c00182af:	74 13                	je     c00182c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	68 dc f7 01 c0       	push   0xc001f7dc
c00182b9:	e8 b1 7f ff ff       	call   c001026f <KePanic(char const*)>
c00182be:	83 c4 10             	add    esp,0x10
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182ca:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182cd:	74 11                	je     c00182e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182cf:	83 ec 0c             	sub    esp,0xc
c00182d2:	68 1b f8 01 c0       	push   0xc001f81b
c00182d7:	e8 93 7f ff ff       	call   c001026f <KePanic(char const*)>
c00182dc:	83 c4 10             	add    esp,0x10
c00182df:	90                   	nop
c00182e0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182e6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182e9:	74 11                	je     c00182fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	68 1b f8 01 c0       	push   0xc001f81b
c00182f3:	e8 77 7f ff ff       	call   c001026f <KePanic(char const*)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	90                   	nop
c00182fc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00182ff:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018303:	7e 07                	jle    c001830c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018305:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018309:	8d 76 00             	lea    esi,[esi+0x0]
c001830c:	85 f6                	test   esi,esi
c001830e:	7e 2c                	jle    c001833c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018310:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018314:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018317:	31 c9                	xor    ecx,ecx
c0018319:	01 d7                	add    edi,edx
c001831b:	90                   	nop
c001831c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001831f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018322:	85 c0                	test   eax,eax
c0018324:	79 06                	jns    c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018326:	05 ff 7f 00 00       	add    eax,0x7fff
c001832b:	90                   	nop
c001832c:	c1 f8 0f             	sar    eax,0xf
c001832f:	83 c1 04             	add    ecx,0x4
c0018332:	66 01 02             	add    WORD PTR [edx],ax
c0018335:	83 c2 02             	add    edx,0x2
c0018338:	39 d7                	cmp    edi,edx
c001833a:	75 e0                	jne    c001831c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001833c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001833f:	50                   	push   eax
c0018340:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018343:	29 f0                	sub    eax,esi
c0018345:	c1 e0 02             	shl    eax,0x2
c0018348:	50                   	push   eax
c0018349:	8d 04 b2             	lea    eax,[edx+esi*4]
c001834c:	50                   	push   eax
c001834d:	52                   	push   edx
c001834e:	e8 8d 80 fe ff       	call   c00003e0 <memmove>
c0018353:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	89 f0                	mov    eax,esi
c001835b:	5b                   	pop    ebx
c001835c:	5e                   	pop    esi
c001835d:	5f                   	pop    edi
c001835e:	c3                   	ret    
c001835f:	90                   	nop

c0018360 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018360:	57                   	push   edi
c0018361:	56                   	push   esi
c0018362:	53                   	push   ebx
c0018363:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018367:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001836b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001836f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018375:	39 06                	cmp    DWORD PTR [esi],eax
c0018377:	74 13                	je     c001838c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018379:	83 ec 0c             	sub    esp,0xc
c001837c:	68 fc f7 01 c0       	push   0xc001f7fc
c0018381:	e8 e9 7e ff ff       	call   c001026f <KePanic(char const*)>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	8d 76 00             	lea    esi,[esi+0x0]
c001838c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018392:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018395:	74 11                	je     c00183a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0018397:	83 ec 0c             	sub    esp,0xc
c001839a:	68 37 f8 01 c0       	push   0xc001f837
c001839f:	e8 cb 7e ff ff       	call   c001026f <KePanic(char const*)>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	90                   	nop
c00183a8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183ae:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183b1:	74 11                	je     c00183c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183b3:	83 ec 0c             	sub    esp,0xc
c00183b6:	68 37 f8 01 c0       	push   0xc001f837
c00183bb:	e8 af 7e ff ff       	call   c001026f <KePanic(char const*)>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	90                   	nop
c00183c4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183c7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183cb:	7e 07                	jle    c00183d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183cd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	85 ff                	test   edi,edi
c00183d6:	7e 1c                	jle    c00183f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183d8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183df:	31 c0                	xor    eax,eax
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183e7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183ea:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183ed:	83 c0 04             	add    eax,0x4
c00183f0:	39 c1                	cmp    ecx,eax
c00183f2:	75 f0                	jne    c00183e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00183f4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183f7:	50                   	push   eax
c00183f8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00183fb:	29 f8                	sub    eax,edi
c00183fd:	c1 e0 02             	shl    eax,0x2
c0018400:	50                   	push   eax
c0018401:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018404:	50                   	push   eax
c0018405:	52                   	push   edx
c0018406:	e8 d5 7f fe ff       	call   c00003e0 <memmove>
c001840b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001840e:	83 c4 10             	add    esp,0x10
c0018411:	89 f8                	mov    eax,edi
c0018413:	5b                   	pop    ebx
c0018414:	5e                   	pop    esi
c0018415:	5f                   	pop    edi
c0018416:	c3                   	ret    
c0018417:	90                   	nop

c0018418 <PCI::open(int, int, void*)>:
c0018418:	83 ec 18             	sub    esp,0x18
c001841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001841f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018423:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018429:	8b 10                	mov    edx,DWORD PTR [eax]
c001842b:	50                   	push   eax
c001842c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001842f:	31 c0                	xor    eax,eax
c0018431:	83 c4 1c             	add    esp,0x1c
c0018434:	c3                   	ret    
c0018435:	90                   	nop

c0018436 <PCI::close(int, int, void*)>:
c0018436:	31 c0                	xor    eax,eax
c0018438:	c3                   	ret    
c0018439:	90                   	nop

c001843a <PCI::PCI()>:
c001843a:	83 ec 0c             	sub    esp,0xc
c001843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018441:	83 ec 08             	sub    esp,0x8
c0018444:	68 53 f8 01 c0       	push   0xc001f853
c0018449:	50                   	push   eax
c001844a:	e8 95 2e ff ff       	call   c000b2e4 <Bus::Bus(char const*)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c0018457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845b:	89 10                	mov    DWORD PTR [eax],edx
c001845d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018461:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001846b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846f:	a3 40 6b 02 c0       	mov    ds:0xc0026b40,eax
c0018474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018478:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001847e:	31 d2                	xor    edx,edx
c0018480:	88 c2                	mov    dl,al
c0018482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018486:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001848d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018491:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018497:	31 d2                	xor    edx,edx
c0018499:	88 c2                	mov    dl,al
c001849b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184ae:	8d 50 01             	lea    edx,[eax+0x1]
c00184b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184bb:	31 d2                	xor    edx,edx
c00184bd:	88 c2                	mov    dl,al
c00184bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184c7:	83 c9 c0             	or     ecx,0xffffffc0
c00184ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184ce:	90                   	nop
c00184cf:	83 c4 0c             	add    esp,0xc
c00184d2:	c3                   	ret    
c00184d3:	90                   	nop

c00184d4 <PCI::readBAR8(unsigned int, int)>:
c00184d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184dc:	f6 c2 01             	test   dl,0x1
c00184df:	74 07                	je     c00184e8 <PCI::readBAR8(unsigned int, int)+0x14>
c00184e1:	83 e2 fc             	and    edx,0xfffffffc
c00184e4:	01 c2                	add    edx,eax
c00184e6:	ec                   	in     al,dx
c00184e7:	c3                   	ret    
c00184e8:	83 e2 f0             	and    edx,0xfffffff0
c00184eb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184ee:	c3                   	ret    
c00184ef:	90                   	nop

c00184f0 <PCI::readBAR16(unsigned int, int)>:
c00184f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184f8:	f6 c2 01             	test   dl,0x1
c00184fb:	74 08                	je     c0018505 <PCI::readBAR16(unsigned int, int)+0x15>
c00184fd:	83 e2 fc             	and    edx,0xfffffffc
c0018500:	01 c2                	add    edx,eax
c0018502:	66 ed                	in     ax,dx
c0018504:	c3                   	ret    
c0018505:	83 e2 f0             	and    edx,0xfffffff0
c0018508:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001850c:	c3                   	ret    
c001850d:	90                   	nop

c001850e <PCI::readBAR32(unsigned int, int)>:
c001850e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018516:	f6 c2 01             	test   dl,0x1
c0018519:	74 07                	je     c0018522 <PCI::readBAR32(unsigned int, int)+0x14>
c001851b:	83 e2 fc             	and    edx,0xfffffffc
c001851e:	01 c2                	add    edx,eax
c0018520:	ed                   	in     eax,dx
c0018521:	c3                   	ret    
c0018522:	83 e2 f0             	and    edx,0xfffffff0
c0018525:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018528:	c3                   	ret    
c0018529:	90                   	nop

c001852a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001852a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001852e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018532:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018536:	f6 c2 01             	test   dl,0x1
c0018539:	74 07                	je     c0018542 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001853b:	83 e2 fc             	and    edx,0xfffffffc
c001853e:	01 ca                	add    edx,ecx
c0018540:	ee                   	out    dx,al
c0018541:	c3                   	ret    
c0018542:	83 e2 f0             	and    edx,0xfffffff0
c0018545:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018548:	c3                   	ret    
c0018549:	90                   	nop

c001854a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001854a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001854e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018552:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018556:	f6 c2 01             	test   dl,0x1
c0018559:	74 08                	je     c0018563 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001855b:	83 e2 fc             	and    edx,0xfffffffc
c001855e:	01 ca                	add    edx,ecx
c0018560:	66 ef                	out    dx,ax
c0018562:	c3                   	ret    
c0018563:	83 e2 f0             	and    edx,0xfffffff0
c0018566:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001856a:	c3                   	ret    
c001856b:	90                   	nop

c001856c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001856c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018574:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018578:	f6 c2 01             	test   dl,0x1
c001857b:	74 07                	je     c0018584 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001857d:	83 e2 fc             	and    edx,0xfffffffc
c0018580:	01 ca                	add    edx,ecx
c0018582:	ef                   	out    dx,eax
c0018583:	c3                   	ret    
c0018584:	83 e2 f0             	and    edx,0xfffffff0
c0018587:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001858a:	c3                   	ret    
c001858b:	90                   	nop

c001858c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001858c:	55                   	push   ebp
c001858d:	57                   	push   edi
c001858e:	56                   	push   esi
c001858f:	53                   	push   ebx
c0018590:	83 ec 0c             	sub    esp,0xc
c0018593:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018597:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001859b:	89 f0                	mov    eax,esi
c001859d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185a5:	3c 07                	cmp    al,0x7
c00185a7:	76 10                	jbe    c00185b9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185a9:	83 ec 0c             	sub    esp,0xc
c00185ac:	68 5b f8 01 c0       	push   0xc001f85b
c00185b1:	e8 b9 7c ff ff       	call   c001026f <KePanic(char const*)>
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	80 fb 0f             	cmp    bl,0xf
c00185bc:	76 10                	jbe    c00185ce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	68 8b f8 01 c0       	push   0xc001f88b
c00185c6:	e8 a4 7c ff ff       	call   c001026f <KePanic(char const*)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	8d 04 36             	lea    eax,[esi+esi*1]
c00185d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185d6:	83 c8 f0             	or     eax,0xfffffff0
c00185d9:	ee                   	out    dx,al
c00185da:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185df:	89 e8                	mov    eax,ebp
c00185e1:	ee                   	out    dx,al
c00185e2:	83 c4 0c             	add    esp,0xc
c00185e5:	89 d8                	mov    eax,ebx
c00185e7:	66 81 e7 fc 00       	and    di,0xfc
c00185ec:	5b                   	pop    ebx
c00185ed:	c1 e0 08             	shl    eax,0x8
c00185f0:	5e                   	pop    esi
c00185f1:	09 f8                	or     eax,edi
c00185f3:	5f                   	pop    edi
c00185f4:	66 0d 00 c0          	or     ax,0xc000
c00185f8:	5d                   	pop    ebp
c00185f9:	c3                   	ret    

c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185fa:	57                   	push   edi
c00185fb:	56                   	push   esi
c00185fc:	53                   	push   ebx
c00185fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018605:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001860b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001860f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018613:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018617:	83 ff 01             	cmp    edi,0x1
c001861a:	75 3e                	jne    c001865a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001861c:	89 de                	mov    esi,ebx
c001861e:	0f b6 c0             	movzx  eax,al
c0018621:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018627:	c1 e0 10             	shl    eax,0x10
c001862a:	0f b6 c9             	movzx  ecx,cl
c001862d:	09 f0                	or     eax,esi
c001862f:	c1 e1 08             	shl    ecx,0x8
c0018632:	0f b6 d2             	movzx  edx,dl
c0018635:	09 c8                	or     eax,ecx
c0018637:	c1 e2 0b             	shl    edx,0xb
c001863a:	09 d0                	or     eax,edx
c001863c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018641:	0d 00 00 00 80       	or     eax,0x80000000
c0018646:	ef                   	out    dx,eax
c0018647:	ba fc 0c 00 00       	mov    edx,0xcfc
c001864c:	ed                   	in     eax,dx
c001864d:	83 e3 02             	and    ebx,0x2
c0018650:	0f b6 cb             	movzx  ecx,bl
c0018653:	c1 e1 03             	shl    ecx,0x3
c0018656:	d3 e8                	shr    eax,cl
c0018658:	eb 43                	jmp    c001869d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001865a:	83 ff 02             	cmp    edi,0x2
c001865d:	75 2c                	jne    c001868b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	0f b6 c9             	movzx  ecx,cl
c0018665:	0f b6 d2             	movzx  edx,dl
c0018668:	0f b6 fb             	movzx  edi,bl
c001866b:	0f b6 c0             	movzx  eax,al
c001866e:	57                   	push   edi
c001866f:	51                   	push   ecx
c0018670:	52                   	push   edx
c0018671:	50                   	push   eax
c0018672:	56                   	push   esi
c0018673:	e8 14 ff ff ff       	call   c001858c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018678:	89 c2                	mov    edx,eax
c001867a:	ed                   	in     eax,dx
c001867b:	83 e3 02             	and    ebx,0x2
c001867e:	83 c4 20             	add    esp,0x20
c0018681:	0f b6 cb             	movzx  ecx,bl
c0018684:	c1 e1 03             	shl    ecx,0x3
c0018687:	d3 e8                	shr    eax,cl
c0018689:	eb 12                	jmp    c001869d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001868b:	83 ec 0c             	sub    esp,0xc
c001868e:	68 bb f8 01 c0       	push   0xc001f8bb
c0018693:	e8 d7 7b ff ff       	call   c001026f <KePanic(char const*)>
c0018698:	83 c4 10             	add    esp,0x10
c001869b:	31 c0                	xor    eax,eax
c001869d:	5b                   	pop    ebx
c001869e:	5e                   	pop    esi
c001869f:	5f                   	pop    edi
c00186a0:	c3                   	ret    
c00186a1:	90                   	nop

c00186a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186a2:	83 ec 18             	sub    esp,0x18
c00186a5:	6a 00                	push   0x0
c00186a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186ac:	50                   	push   eax
c00186ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186b2:	50                   	push   eax
c00186b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186b8:	50                   	push   eax
c00186b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186bd:	e8 38 ff ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186c2:	83 c4 2c             	add    esp,0x2c
c00186c5:	c3                   	ret    

c00186c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186c6:	83 ec 18             	sub    esp,0x18
c00186c9:	6a 0e                	push   0xe
c00186cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186d0:	50                   	push   eax
c00186d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186d6:	50                   	push   eax
c00186d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186dc:	50                   	push   eax
c00186dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e1:	e8 14 ff ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186e6:	83 c4 2c             	add    esp,0x2c
c00186e9:	0f b6 c0             	movzx  eax,al
c00186ec:	c3                   	ret    
c00186ed:	90                   	nop

c00186ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186ee:	55                   	push   ebp
c00186ef:	57                   	push   edi
c00186f0:	56                   	push   esi
c00186f1:	53                   	push   ebx
c00186f2:	83 ec 18             	sub    esp,0x18
c00186f5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00186fa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00186ff:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018704:	6a 0a                	push   0xa
c0018706:	56                   	push   esi
c0018707:	55                   	push   ebp
c0018708:	57                   	push   edi
c0018709:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001870d:	e8 e8 fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018712:	83 c4 14             	add    esp,0x14
c0018715:	89 c3                	mov    ebx,eax
c0018717:	6a 0a                	push   0xa
c0018719:	0f b6 db             	movzx  ebx,bl
c001871c:	56                   	push   esi
c001871d:	55                   	push   ebp
c001871e:	57                   	push   edi
c001871f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018723:	e8 d2 fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018728:	83 c4 2c             	add    esp,0x2c
c001872b:	25 00 ff 00 00       	and    eax,0xff00
c0018730:	09 d8                	or     eax,ebx
c0018732:	5b                   	pop    ebx
c0018733:	5e                   	pop    esi
c0018734:	5f                   	pop    edi
c0018735:	5d                   	pop    ebp
c0018736:	c3                   	ret    
c0018737:	90                   	nop

c0018738 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018738:	83 ec 18             	sub    esp,0x18
c001873b:	6a 08                	push   0x8
c001873d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018742:	50                   	push   eax
c0018743:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018748:	50                   	push   eax
c0018749:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001874e:	50                   	push   eax
c001874f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018753:	e8 a2 fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018758:	83 c4 2c             	add    esp,0x2c
c001875b:	0f b6 c4             	movzx  eax,ah
c001875e:	c3                   	ret    
c001875f:	90                   	nop

c0018760 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018760:	83 ec 18             	sub    esp,0x18
c0018763:	6a 08                	push   0x8
c0018765:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001876a:	50                   	push   eax
c001876b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018770:	50                   	push   eax
c0018771:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018776:	50                   	push   eax
c0018777:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001877b:	e8 7a fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018780:	83 c4 2c             	add    esp,0x2c
c0018783:	c3                   	ret    

c0018784 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018784:	83 ec 18             	sub    esp,0x18
c0018787:	6a 3c                	push   0x3c
c0018789:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878e:	50                   	push   eax
c001878f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018794:	50                   	push   eax
c0018795:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879a:	50                   	push   eax
c001879b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001879f:	e8 56 fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187a4:	83 c4 2c             	add    esp,0x2c
c00187a7:	c3                   	ret    

c00187a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187a8:	83 ec 18             	sub    esp,0x18
c00187ab:	6a 18                	push   0x18
c00187ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b2:	50                   	push   eax
c00187b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b8:	50                   	push   eax
c00187b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187be:	50                   	push   eax
c00187bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c3:	e8 32 fe ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187c8:	83 c4 2c             	add    esp,0x2c
c00187cb:	0f b6 c4             	movzx  eax,ah
c00187ce:	c3                   	ret    
c00187cf:	90                   	nop

c00187d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187d0:	55                   	push   ebp
c00187d1:	57                   	push   edi
c00187d2:	56                   	push   esi
c00187d3:	53                   	push   ebx
c00187d4:	83 ec 28             	sub    esp,0x28
c00187d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187db:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187e0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187e5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187ea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00187f1:	8d 43 12             	lea    eax,[ebx+0x12]
c00187f4:	83 c3 10             	add    ebx,0x10
c00187f7:	0f b6 c0             	movzx  eax,al
c00187fa:	0f b6 db             	movzx  ebx,bl
c00187fd:	50                   	push   eax
c00187fe:	51                   	push   ecx
c00187ff:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018803:	57                   	push   edi
c0018804:	55                   	push   ebp
c0018805:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018809:	e8 ec fd ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880e:	83 c4 14             	add    esp,0x14
c0018811:	89 c6                	mov    esi,eax
c0018813:	53                   	push   ebx
c0018814:	c1 e6 10             	shl    esi,0x10
c0018817:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001881b:	51                   	push   ecx
c001881c:	57                   	push   edi
c001881d:	55                   	push   ebp
c001881e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018822:	e8 d3 fd ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018827:	83 c4 3c             	add    esp,0x3c
c001882a:	0f b7 c0             	movzx  eax,ax
c001882d:	5b                   	pop    ebx
c001882e:	09 f0                	or     eax,esi
c0018830:	5e                   	pop    esi
c0018831:	5f                   	pop    edi
c0018832:	5d                   	pop    ebp
c0018833:	c3                   	ret    

c0018834 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018834:	55                   	push   ebp
c0018835:	57                   	push   edi
c0018836:	56                   	push   esi
c0018837:	53                   	push   ebx
c0018838:	83 ec 0c             	sub    esp,0xc
c001883b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001883f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018843:	89 f5                	mov    ebp,esi
c0018845:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001884b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018853:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018857:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001885b:	83 f9 01             	cmp    ecx,0x1
c001885e:	75 5d                	jne    c00188bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018860:	0f b6 c8             	movzx  ecx,al
c0018863:	0f b6 d2             	movzx  edx,dl
c0018866:	c1 e1 10             	shl    ecx,0x10
c0018869:	c1 e2 0b             	shl    edx,0xb
c001886c:	89 f0                	mov    eax,esi
c001886e:	25 fc 00 00 00       	and    eax,0xfc
c0018873:	09 c1                	or     ecx,eax
c0018875:	89 e8                	mov    eax,ebp
c0018877:	0f b6 c0             	movzx  eax,al
c001887a:	c1 e0 08             	shl    eax,0x8
c001887d:	09 c1                	or     ecx,eax
c001887f:	09 d1                	or     ecx,edx
c0018881:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018886:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001888c:	89 c8                	mov    eax,ecx
c001888e:	ef                   	out    dx,eax
c001888f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018894:	ed                   	in     eax,dx
c0018895:	0f b7 db             	movzx  ebx,bx
c0018898:	83 e6 02             	and    esi,0x2
c001889b:	74 0a                	je     c00188a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001889d:	0f b7 d0             	movzx  edx,ax
c00188a0:	c1 e3 10             	shl    ebx,0x10
c00188a3:	09 d3                	or     ebx,edx
c00188a5:	eb 05                	jmp    c00188ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188a7:	66 31 c0             	xor    ax,ax
c00188aa:	09 c3                	or     ebx,eax
c00188ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188b1:	89 c8                	mov    eax,ecx
c00188b3:	ef                   	out    dx,eax
c00188b4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188b9:	89 d8                	mov    eax,ebx
c00188bb:	eb 41                	jmp    c00188fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188bd:	83 f9 02             	cmp    ecx,0x2
c00188c0:	75 45                	jne    c0018907 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188c2:	83 ec 0c             	sub    esp,0xc
c00188c5:	0f b6 d2             	movzx  edx,dl
c00188c8:	89 f1                	mov    ecx,esi
c00188ca:	0f b6 c0             	movzx  eax,al
c00188cd:	0f b6 f1             	movzx  esi,cl
c00188d0:	89 e9                	mov    ecx,ebp
c00188d2:	56                   	push   esi
c00188d3:	0f b6 c9             	movzx  ecx,cl
c00188d6:	51                   	push   ecx
c00188d7:	52                   	push   edx
c00188d8:	50                   	push   eax
c00188d9:	57                   	push   edi
c00188da:	e8 ad fc ff ff       	call   c001858c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188df:	89 c2                	mov    edx,eax
c00188e1:	ed                   	in     eax,dx
c00188e2:	83 c4 20             	add    esp,0x20
c00188e5:	0f b7 db             	movzx  ebx,bx
c00188e8:	f6 c2 02             	test   dl,0x2
c00188eb:	74 0c                	je     c00188f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188ed:	0f b7 c8             	movzx  ecx,ax
c00188f0:	89 d8                	mov    eax,ebx
c00188f2:	c1 e0 10             	shl    eax,0x10
c00188f5:	09 c8                	or     eax,ecx
c00188f7:	eb 05                	jmp    c00188fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188f9:	66 31 c0             	xor    ax,ax
c00188fc:	09 d8                	or     eax,ebx
c00188fe:	ef                   	out    dx,eax
c00188ff:	83 c4 0c             	add    esp,0xc
c0018902:	5b                   	pop    ebx
c0018903:	5e                   	pop    esi
c0018904:	5f                   	pop    edi
c0018905:	5d                   	pop    ebp
c0018906:	c3                   	ret    
c0018907:	c7 44 24 20 bb f8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f8bb
c001890f:	83 c4 0c             	add    esp,0xc
c0018912:	5b                   	pop    ebx
c0018913:	5e                   	pop    esi
c0018914:	5f                   	pop    edi
c0018915:	5d                   	pop    ebp
c0018916:	e9 54 79 ff ff       	jmp    c001026f <KePanic(char const*)>
c001891b:	90                   	nop

c001891c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001891c:	55                   	push   ebp
c001891d:	57                   	push   edi
c001891e:	56                   	push   esi
c001891f:	53                   	push   ebx
c0018920:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018926:	80 3d 4c 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b4c,0x0
c001892d:	0f 85 84 00 00 00    	jne    c00189b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	68 14 01 00 00       	push   0x114
c001893b:	e8 79 ee fe ff       	call   c00077b9 <malloc>
c0018940:	83 c4 0c             	add    esp,0xc
c0018943:	89 c3                	mov    ebx,eax
c0018945:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001894b:	68 c1 f8 01 c0       	push   0xc001f8c1
c0018950:	50                   	push   eax
c0018951:	e8 72 21 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0018956:	5a                   	pop    edx
c0018957:	59                   	pop    ecx
c0018958:	6a 01                	push   0x1
c001895a:	53                   	push   ebx
c001895b:	e8 28 22 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0018960:	83 c4 0c             	add    esp,0xc
c0018963:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018967:	50                   	push   eax
c0018968:	8d 44 24 28          	lea    eax,[esp+0x28]
c001896c:	50                   	push   eax
c001896d:	53                   	push   ebx
c001896e:	e8 c1 24 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0018973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018977:	40                   	inc    eax
c0018978:	89 04 24             	mov    DWORD PTR [esp],eax
c001897b:	e8 39 ee fe ff       	call   c00077b9 <malloc>
c0018980:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018984:	a3 48 6b 02 c0       	mov    ds:0xc0026b48,eax
c0018989:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001898d:	5e                   	pop    esi
c001898e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018990:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018994:	51                   	push   ecx
c0018995:	50                   	push   eax
c0018996:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001899a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001899e:	53                   	push   ebx
c001899f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189a2:	83 c4 14             	add    esp,0x14
c00189a5:	53                   	push   ebx
c00189a6:	e8 3b 22 ff ff       	call   c000abe6 <File::close()>
c00189ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189af:	83 c4 10             	add    esp,0x10
c00189b2:	a3 44 6b 02 c0       	mov    ds:0xc0026b44,eax
c00189b7:	a1 44 6b 02 c0       	mov    eax,ds:0xc0026b44
c00189bc:	8b 15 48 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b48
c00189c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00189c5:	31 ff                	xor    edi,edi
c00189c7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189cf:	31 f6                	xor    esi,esi
c00189d1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189d6:	31 db                	xor    ebx,ebx
c00189d8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189e5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189ec:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00189f0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00189f7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00189fb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00189fe:	0f 8e 6b 01 00 00    	jle    c0018b6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a04:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a07:	d4 40                	aam    0x40
c0018a09:	d5 39                	aad    0x39
c0018a0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a0f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a13:	d4 40                	aam    0x40
c0018a15:	d5 39                	aad    0x39
c0018a17:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a1b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a1f:	d4 40                	aam    0x40
c0018a21:	d5 39                	aad    0x39
c0018a23:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a27:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a2b:	d4 40                	aam    0x40
c0018a2d:	d5 39                	aad    0x39
c0018a2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a33:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a37:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a3b:	3c 56                	cmp    al,0x56
c0018a3d:	74 45                	je     c0018a84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a3f:	d4 40                	aam    0x40
c0018a41:	d5 39                	aad    0x39
c0018a43:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a46:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a4a:	0f b6 c9             	movzx  ecx,cl
c0018a4d:	c1 e1 04             	shl    ecx,0x4
c0018a50:	d4 40                	aam    0x40
c0018a52:	d5 39                	aad    0x39
c0018a54:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a57:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a5b:	0f b6 db             	movzx  ebx,bl
c0018a5e:	09 cb                	or     ebx,ecx
c0018a60:	c1 e3 04             	shl    ebx,0x4
c0018a63:	d4 40                	aam    0x40
c0018a65:	d5 39                	aad    0x39
c0018a67:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a6a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a6e:	0f b6 c9             	movzx  ecx,cl
c0018a71:	09 cb                	or     ebx,ecx
c0018a73:	c1 e3 04             	shl    ebx,0x4
c0018a76:	89 d9                	mov    ecx,ebx
c0018a78:	d4 40                	aam    0x40
c0018a7a:	d5 39                	aad    0x39
c0018a7c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a7f:	0f b6 db             	movzx  ebx,bl
c0018a82:	09 cb                	or     ebx,ecx
c0018a84:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a88:	80 f9 44             	cmp    cl,0x44
c0018a8b:	74 47                	je     c0018ad4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a8d:	88 c8                	mov    al,cl
c0018a8f:	d4 40                	aam    0x40
c0018a91:	d5 39                	aad    0x39
c0018a93:	83 e8 30             	sub    eax,0x30
c0018a96:	0f b6 e8             	movzx  ebp,al
c0018a99:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018a9d:	c1 e5 04             	shl    ebp,0x4
c0018aa0:	d4 40                	aam    0x40
c0018aa2:	d5 39                	aad    0x39
c0018aa4:	83 e8 30             	sub    eax,0x30
c0018aa7:	0f b6 f0             	movzx  esi,al
c0018aaa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018aae:	09 ee                	or     esi,ebp
c0018ab0:	c1 e6 04             	shl    esi,0x4
c0018ab3:	d4 40                	aam    0x40
c0018ab5:	d5 39                	aad    0x39
c0018ab7:	83 e8 30             	sub    eax,0x30
c0018aba:	0f b6 e8             	movzx  ebp,al
c0018abd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ac1:	09 ee                	or     esi,ebp
c0018ac3:	c1 e6 04             	shl    esi,0x4
c0018ac6:	89 f5                	mov    ebp,esi
c0018ac8:	d4 40                	aam    0x40
c0018aca:	d5 39                	aad    0x39
c0018acc:	83 e8 30             	sub    eax,0x30
c0018acf:	0f b6 f0             	movzx  esi,al
c0018ad2:	09 ee                	or     esi,ebp
c0018ad4:	83 c7 10             	add    edi,0x10
c0018ad7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018adb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ade:	3c 0a                	cmp    al,0xa
c0018ae0:	74 09                	je     c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018ae2:	45                   	inc    ebp
c0018ae3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ae6:	75 16                	jne    c0018afe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018ae8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018aeb:	3c 0a                	cmp    al,0xa
c0018aed:	0f 94 c0             	sete   al
c0018af0:	0f b6 c0             	movzx  eax,al
c0018af3:	01 c7                	add    edi,eax
c0018af5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018afa:	75 0c                	jne    c0018b08 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018afc:	eb 15                	jmp    c0018b13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018afe:	47                   	inc    edi
c0018aff:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b02:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b06:	eb d3                	jmp    c0018adb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b08:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b0d:	0f 85 e8 fe ff ff    	jne    c00189fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b13:	80 f9 44             	cmp    cl,0x44
c0018b16:	74 0b                	je     c0018b23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b18:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b1d:	0f 85 d8 fe ff ff    	jne    c00189fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b23:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b27:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b2b:	c1 e1 04             	shl    ecx,0x4
c0018b2e:	83 e8 30             	sub    eax,0x30
c0018b31:	09 c8                	or     eax,ecx
c0018b33:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b37:	0f 85 be fe ff ff    	jne    c00189fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b3d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b45:	c1 e1 04             	shl    ecx,0x4
c0018b48:	83 e8 30             	sub    eax,0x30
c0018b4b:	09 c8                	or     eax,ecx
c0018b4d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b51:	0f 85 a4 fe ff ff    	jne    c00189fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b57:	50                   	push   eax
c0018b58:	50                   	push   eax
c0018b59:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b5d:	50                   	push   eax
c0018b5e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b65:	e8 96 7a fe ff       	call   c0000600 <strcpy>
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	eb 15                	jmp    c0018b84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b6f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b76:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b81:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b84:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b8b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b91:	5b                   	pop    ebx
c0018b92:	5e                   	pop    esi
c0018b93:	5f                   	pop    edi
c0018b94:	5d                   	pop    ebp
c0018b95:	c3                   	ret    

c0018b96 <PCI::checkBus(unsigned char)>:
c0018b96:	56                   	push   esi
c0018b97:	53                   	push   ebx
c0018b98:	31 f6                	xor    esi,esi
c0018b9a:	51                   	push   ecx
c0018b9b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018b9f:	0f b6 c3             	movzx  eax,bl
c0018ba2:	52                   	push   edx
c0018ba3:	56                   	push   esi
c0018ba4:	46                   	inc    esi
c0018ba5:	50                   	push   eax
c0018ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018baa:	e8 f3 02 00 00       	call   c0018ea2 <PCI::checkDevice(unsigned char, unsigned char)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	83 fe 20             	cmp    esi,0x20
c0018bb5:	75 e8                	jne    c0018b9f <PCI::checkBus(unsigned char)+0x9>
c0018bb7:	58                   	pop    eax
c0018bb8:	5b                   	pop    ebx
c0018bb9:	5e                   	pop    esi
c0018bba:	c3                   	ret    
c0018bbb:	90                   	nop

c0018bbc <PCI::foundDevice(PCIDeviceInfo)>:
c0018bbc:	55                   	push   ebp
c0018bbd:	57                   	push   edi
c0018bbe:	56                   	push   esi
c0018bbf:	53                   	push   ebx
c0018bc0:	83 ec 1c             	sub    esp,0x1c
c0018bc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bc7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bcd:	0f 84 52 01 00 00    	je     c0018d25 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bd3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018bd7:	66 81 f9 06 04       	cmp    cx,0x406
c0018bdc:	75 2c                	jne    c0018c0a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018bde:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018be3:	50                   	push   eax
c0018be4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018be9:	50                   	push   eax
c0018bea:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bef:	50                   	push   eax
c0018bf0:	56                   	push   esi
c0018bf1:	e8 b2 fb ff ff       	call   c00187a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018bf6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018bfa:	0f b6 c0             	movzx  eax,al
c0018bfd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c01:	83 c4 2c             	add    esp,0x2c
c0018c04:	5b                   	pop    ebx
c0018c05:	5e                   	pop    esi
c0018c06:	5f                   	pop    edi
c0018c07:	5d                   	pop    ebp
c0018c08:	eb 8c                	jmp    c0018b96 <PCI::checkBus(unsigned char)>
c0018c0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c0e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c18:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c1c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c20:	88 d3                	mov    bl,dl
c0018c22:	85 c0                	test   eax,eax
c0018c24:	74 33                	je     c0018c59 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c26:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c29:	85 d2                	test   edx,edx
c0018c2b:	74 28                	je     c0018c55 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c2d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c33:	31 ef                	xor    edi,ebp
c0018c35:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c3b:	75 18                	jne    c0018c55 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c3d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c41:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c47:	75 0c                	jne    c0018c55 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c49:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c4f:	0f 84 d0 00 00 00    	je     c0018d25 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c57:	eb c9                	jmp    c0018c22 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c59:	66 81 f9 01 06       	cmp    cx,0x601
c0018c5e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c62:	75 19                	jne    c0018c7d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	68 64 01 00 00       	push   0x164
c0018c6c:	e8 48 eb fe ff       	call   c00077b9 <malloc>
c0018c71:	89 c5                	mov    ebp,eax
c0018c73:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c76:	e8 47 0e 00 00       	call   c0019ac2 <SATABus::SATABus()>
c0018c7b:	eb 1e                	jmp    c0018c9b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c7d:	66 81 f9 01 01       	cmp    cx,0x101
c0018c82:	75 60                	jne    c0018ce4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	68 70 02 00 00       	push   0x270
c0018c8c:	e8 28 eb fe ff       	call   c00077b9 <malloc>
c0018c91:	89 c5                	mov    ebp,eax
c0018c93:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c96:	e8 cb 02 00 00       	call   c0018f66 <IDE::IDE()>
c0018c9b:	58                   	pop    eax
c0018c9c:	5a                   	pop    edx
c0018c9d:	55                   	push   ebp
c0018c9e:	56                   	push   esi
c0018c9f:	e8 ec 2c ff ff       	call   c000b990 <Device::addChild(Device*)>
c0018ca4:	83 ec 1c             	sub    esp,0x1c
c0018ca7:	b9 09 00 00 00       	mov    ecx,0x9
c0018cac:	fc                   	cld    
c0018cad:	89 e7                	mov    edi,esp
c0018caf:	89 de                	mov    esi,ebx
c0018cb1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cb3:	55                   	push   ebp
c0018cb4:	e8 1d 2c ff ff       	call   c000b8d6 <Device::preOpenPCI(PCIDeviceInfo)>
c0018cb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cbc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018cc0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cc8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018cd0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018cd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018cdb:	83 c4 4c             	add    esp,0x4c
c0018cde:	5b                   	pop    ebx
c0018cdf:	5e                   	pop    esi
c0018ce0:	5f                   	pop    edi
c0018ce1:	5d                   	pop    ebp
c0018ce2:	ff e0                	jmp    eax
c0018ce4:	83 ec 0c             	sub    esp,0xc
c0018ce7:	68 58 01 00 00       	push   0x158
c0018cec:	e8 c8 ea fe ff       	call   c00077b9 <malloc>
c0018cf1:	89 c5                	mov    ebp,eax
c0018cf3:	58                   	pop    eax
c0018cf4:	5a                   	pop    edx
c0018cf5:	68 da f8 01 c0       	push   0xc001f8da
c0018cfa:	55                   	push   ebp
c0018cfb:	e8 2e 2f ff ff       	call   c000bc2e <DriverlessDevice::DriverlessDevice(char const*)>
c0018d00:	59                   	pop    ecx
c0018d01:	5f                   	pop    edi
c0018d02:	55                   	push   ebp
c0018d03:	56                   	push   esi
c0018d04:	e8 87 2c ff ff       	call   c000b990 <Device::addChild(Device*)>
c0018d09:	b9 09 00 00 00       	mov    ecx,0x9
c0018d0e:	fc                   	cld    
c0018d0f:	89 df                	mov    edi,ebx
c0018d11:	89 de                	mov    esi,ebx
c0018d13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d15:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d19:	83 c4 2c             	add    esp,0x2c
c0018d1c:	5b                   	pop    ebx
c0018d1d:	5e                   	pop    esi
c0018d1e:	5f                   	pop    edi
c0018d1f:	5d                   	pop    ebp
c0018d20:	e9 b1 2b ff ff       	jmp    c000b8d6 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d25:	83 c4 1c             	add    esp,0x1c
c0018d28:	5b                   	pop    ebx
c0018d29:	5e                   	pop    esi
c0018d2a:	5f                   	pop    edi
c0018d2b:	5d                   	pop    ebp
c0018d2c:	c3                   	ret    
c0018d2d:	90                   	nop

c0018d2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d2e:	55                   	push   ebp
c0018d2f:	57                   	push   edi
c0018d30:	56                   	push   esi
c0018d31:	53                   	push   ebx
c0018d32:	83 ec 68             	sub    esp,0x68
c0018d35:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d39:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d44:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d4b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d54:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d5b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d64:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d69:	6a 0c                	push   0xc
c0018d6b:	57                   	push   edi
c0018d6c:	53                   	push   ebx
c0018d6d:	56                   	push   esi
c0018d6e:	55                   	push   ebp
c0018d6f:	e8 86 f8 ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d74:	83 c4 20             	add    esp,0x20
c0018d77:	57                   	push   edi
c0018d78:	53                   	push   ebx
c0018d79:	56                   	push   esi
c0018d7a:	55                   	push   ebp
c0018d7b:	e8 6e f9 ff ff       	call   c00186ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d80:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d85:	57                   	push   edi
c0018d86:	53                   	push   ebx
c0018d87:	56                   	push   esi
c0018d88:	55                   	push   ebp
c0018d89:	e8 f6 f9 ff ff       	call   c0018784 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d8e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d92:	83 c4 14             	add    esp,0x14
c0018d95:	6a 3c                	push   0x3c
c0018d97:	57                   	push   edi
c0018d98:	53                   	push   ebx
c0018d99:	56                   	push   esi
c0018d9a:	55                   	push   ebp
c0018d9b:	e8 5a f8 ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018da0:	0f b6 c4             	movzx  eax,ah
c0018da3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018da7:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018dab:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018daf:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0018db4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018dba:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018dc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dc4:	83 c4 20             	add    esp,0x20
c0018dc7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dcc:	74 30                	je     c0018dfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dce:	31 c0                	xor    eax,eax
c0018dd0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018dd4:	7e 28                	jle    c0018dfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dd6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018dde:	39 cb                	cmp    ebx,ecx
c0018de0:	75 19                	jne    c0018dfb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018de2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018dea:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018dee:	75 0b                	jne    c0018dfb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018df0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018df7:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018dfb:	40                   	inc    eax
c0018dfc:	eb d2                	jmp    c0018dd0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018dfe:	31 d2                	xor    edx,edx
c0018e00:	83 ec 0c             	sub    esp,0xc
c0018e03:	57                   	push   edi
c0018e04:	53                   	push   ebx
c0018e05:	56                   	push   esi
c0018e06:	52                   	push   edx
c0018e07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e0b:	55                   	push   ebp
c0018e0c:	e8 bf f9 ff ff       	call   c00187d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e15:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e19:	42                   	inc    edx
c0018e1a:	83 c4 20             	add    esp,0x20
c0018e1d:	83 fa 06             	cmp    edx,0x6
c0018e20:	75 de                	jne    c0018e00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e22:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e27:	83 ec 0c             	sub    esp,0xc
c0018e2a:	86 e0                	xchg   al,ah
c0018e2c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e31:	6a 02                	push   0x2
c0018e33:	57                   	push   edi
c0018e34:	53                   	push   ebx
c0018e35:	56                   	push   esi
c0018e36:	55                   	push   ebp
c0018e37:	e8 be f7 ff ff       	call   c00185fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e3c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e41:	83 c4 20             	add    esp,0x20
c0018e44:	57                   	push   edi
c0018e45:	53                   	push   ebx
c0018e46:	56                   	push   esi
c0018e47:	55                   	push   ebp
c0018e48:	e8 eb f8 ff ff       	call   c0018738 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e4d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e51:	57                   	push   edi
c0018e52:	53                   	push   ebx
c0018e53:	56                   	push   esi
c0018e54:	55                   	push   ebp
c0018e55:	e8 48 f8 ff ff       	call   c00186a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e5a:	b9 09 00 00 00       	mov    ecx,0x9
c0018e5f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e64:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e68:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e6c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e70:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e74:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e78:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e7c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e80:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	fc                   	cld    
c0018e88:	89 e7                	mov    edi,esp
c0018e8a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e90:	55                   	push   ebp
c0018e91:	e8 26 fd ff ff       	call   c0018bbc <PCI::foundDevice(PCIDeviceInfo)>
c0018e96:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018e9c:	5b                   	pop    ebx
c0018e9d:	5e                   	pop    esi
c0018e9e:	5f                   	pop    edi
c0018e9f:	5d                   	pop    ebp
c0018ea0:	c3                   	ret    
c0018ea1:	90                   	nop

c0018ea2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018ea2:	55                   	push   ebp
c0018ea3:	57                   	push   edi
c0018ea4:	56                   	push   esi
c0018ea5:	53                   	push   ebx
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ead:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018eb2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018eb7:	6a 00                	push   0x0
c0018eb9:	56                   	push   esi
c0018eba:	57                   	push   edi
c0018ebb:	55                   	push   ebp
c0018ebc:	e8 e1 f7 ff ff       	call   c00186a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ec1:	6a 00                	push   0x0
c0018ec3:	56                   	push   esi
c0018ec4:	57                   	push   edi
c0018ec5:	55                   	push   ebp
c0018ec6:	e8 63 fe ff ff       	call   c0018d2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ecb:	83 c4 20             	add    esp,0x20
c0018ece:	6a 00                	push   0x0
c0018ed0:	56                   	push   esi
c0018ed1:	57                   	push   edi
c0018ed2:	55                   	push   ebp
c0018ed3:	e8 ee f7 ff ff       	call   c00186c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ed8:	83 c4 10             	add    esp,0x10
c0018edb:	84 c0                	test   al,al
c0018edd:	79 27                	jns    c0018f06 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018edf:	bb 01 00 00 00       	mov    ebx,0x1
c0018ee4:	53                   	push   ebx
c0018ee5:	56                   	push   esi
c0018ee6:	57                   	push   edi
c0018ee7:	55                   	push   ebp
c0018ee8:	e8 b5 f7 ff ff       	call   c00186a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	66 40                	inc    ax
c0018ef2:	74 0c                	je     c0018f00 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018ef4:	53                   	push   ebx
c0018ef5:	56                   	push   esi
c0018ef6:	57                   	push   edi
c0018ef7:	55                   	push   ebp
c0018ef8:	e8 31 fe ff ff       	call   c0018d2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	43                   	inc    ebx
c0018f01:	83 fb 08             	cmp    ebx,0x8
c0018f04:	75 de                	jne    c0018ee4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f06:	83 c4 0c             	add    esp,0xc
c0018f09:	5b                   	pop    ebx
c0018f0a:	5e                   	pop    esi
c0018f0b:	5f                   	pop    edi
c0018f0c:	5d                   	pop    ebp
c0018f0d:	c3                   	ret    

c0018f0e <PCI::detect()>:
c0018f0e:	56                   	push   esi
c0018f0f:	53                   	push   ebx
c0018f10:	53                   	push   ebx
c0018f11:	31 db                	xor    ebx,ebx
c0018f13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f17:	6a 00                	push   0x0
c0018f19:	6a 00                	push   0x0
c0018f1b:	6a 00                	push   0x0
c0018f1d:	56                   	push   esi
c0018f1e:	e8 a3 f7 ff ff       	call   c00186c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f23:	83 c4 10             	add    esp,0x10
c0018f26:	a8 80                	test   al,0x80
c0018f28:	75 21                	jne    c0018f4b <PCI::detect()+0x3d>
c0018f2a:	51                   	push   ecx
c0018f2b:	51                   	push   ecx
c0018f2c:	6a 00                	push   0x0
c0018f2e:	56                   	push   esi
c0018f2f:	e8 62 fc ff ff       	call   c0018b96 <PCI::checkBus(unsigned char)>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	eb 24                	jmp    c0018f5d <PCI::detect()+0x4f>
c0018f39:	52                   	push   edx
c0018f3a:	52                   	push   edx
c0018f3b:	53                   	push   ebx
c0018f3c:	43                   	inc    ebx
c0018f3d:	56                   	push   esi
c0018f3e:	e8 53 fc ff ff       	call   c0018b96 <PCI::checkBus(unsigned char)>
c0018f43:	83 c4 10             	add    esp,0x10
c0018f46:	83 fb 08             	cmp    ebx,0x8
c0018f49:	74 12                	je     c0018f5d <PCI::detect()+0x4f>
c0018f4b:	53                   	push   ebx
c0018f4c:	6a 00                	push   0x0
c0018f4e:	6a 00                	push   0x0
c0018f50:	56                   	push   esi
c0018f51:	e8 4c f7 ff ff       	call   c00186a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	66 40                	inc    ax
c0018f5b:	74 dc                	je     c0018f39 <PCI::detect()+0x2b>
c0018f5d:	58                   	pop    eax
c0018f5e:	5b                   	pop    ebx
c0018f5f:	5e                   	pop    esi
c0018f60:	c3                   	ret    
c0018f61:	90                   	nop

c0018f62 <IDE::close(int, int, void*)>:
c0018f62:	83 c8 ff             	or     eax,0xffffffff
c0018f65:	c3                   	ret    

c0018f66 <IDE::IDE()>:
c0018f66:	83 ec 0c             	sub    esp,0xc
c0018f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f6d:	83 ec 08             	sub    esp,0x8
c0018f70:	68 20 f9 01 c0       	push   0xc001f920
c0018f75:	50                   	push   eax
c0018f76:	e8 59 2d ff ff       	call   c000bcd4 <HardDiskController::HardDiskController(char const*)>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	ba b0 f9 01 c0       	mov    edx,0xc001f9b0
c0018f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f87:	89 10                	mov    DWORD PTR [eax],edx
c0018f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018f94:	90                   	nop
c0018f95:	83 c4 0c             	add    esp,0xc
c0018f98:	c3                   	ret    
c0018f99:	90                   	nop

c0018f9a <IDE::prepareInterrupt(unsigned char)>:
c0018f9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fa3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018fab:	c3                   	ret    

c0018fac <selectDrive(unsigned char, unsigned char)>:
c0018fac:	c3                   	ret    
c0018fad:	90                   	nop

c0018fae <IDE::getBase(unsigned char)>:
c0018fae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fb7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fbf:	c3                   	ret    

c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fc0:	55                   	push   ebp
c0018fc1:	57                   	push   edi
c0018fc2:	56                   	push   esi
c0018fc3:	53                   	push   ebx
c0018fc4:	83 ec 1c             	sub    esp,0x1c
c0018fc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fcb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fcf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fd2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fda:	80 f9 03             	cmp    cl,0x3
c0018fdd:	77 51                	ja     c0019030 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018fdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fe3:	0f b6 f2             	movzx  esi,dl
c0018fe6:	0f b6 db             	movzx  ebx,bl
c0018fe9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018fec:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018ff0:	83 ca 80             	or     edx,0xffffff80
c0018ff3:	0f b6 d2             	movzx  edx,dl
c0018ff6:	52                   	push   edx
c0018ff7:	6a 0c                	push   0xc
c0018ff9:	56                   	push   esi
c0018ffa:	57                   	push   edi
c0018ffb:	e8 c0 ff ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019000:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019009:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001900d:	ee                   	out    dx,al
c001900e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019013:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019017:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001901b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001901f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019027:	83 c4 2c             	add    esp,0x2c
c001902a:	5b                   	pop    ebx
c001902b:	5e                   	pop    esi
c001902c:	5f                   	pop    edi
c001902d:	5d                   	pop    ebp
c001902e:	eb 90                	jmp    c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019030:	80 fb 07             	cmp    bl,0x7
c0019033:	77 12                	ja     c0019047 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019035:	0f b6 d2             	movzx  edx,dl
c0019038:	0f b6 db             	movzx  ebx,bl
c001903b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019043:	89 da                	mov    edx,ebx
c0019045:	eb 2f                	jmp    c0019076 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019047:	80 fb 0d             	cmp    bl,0xd
c001904a:	77 13                	ja     c001905f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001904c:	0f b6 d2             	movzx  edx,dl
c001904f:	0f b6 db             	movzx  ebx,bl
c0019052:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019059:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001905d:	eb 17                	jmp    c0019076 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001905f:	80 fb 15             	cmp    bl,0x15
c0019062:	77 13                	ja     c0019077 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019064:	0f b6 d2             	movzx  edx,dl
c0019067:	0f b6 db             	movzx  ebx,bl
c001906a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019072:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019076:	ee                   	out    dx,al
c0019077:	83 c4 1c             	add    esp,0x1c
c001907a:	5b                   	pop    ebx
c001907b:	5e                   	pop    esi
c001907c:	5f                   	pop    edi
c001907d:	5d                   	pop    ebp
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <IDE::read(unsigned char, unsigned char)>:
c0019080:	55                   	push   ebp
c0019081:	57                   	push   edi
c0019082:	56                   	push   esi
c0019083:	53                   	push   ebx
c0019084:	83 ec 1c             	sub    esp,0x1c
c0019087:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001908b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001908f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019092:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019096:	3c 03                	cmp    al,0x3
c0019098:	77 43                	ja     c00190dd <IDE::read(unsigned char, unsigned char)+0x5d>
c001909a:	0f b6 f2             	movzx  esi,dl
c001909d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190a0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190a4:	83 c8 80             	or     eax,0xffffff80
c00190a7:	0f b6 c0             	movzx  eax,al
c00190aa:	50                   	push   eax
c00190ab:	6a 0c                	push   0xc
c00190ad:	56                   	push   esi
c00190ae:	57                   	push   edi
c00190af:	e8 0c ff ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190b4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190b9:	0f b6 c3             	movzx  eax,bl
c00190bc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190c0:	ec                   	in     al,dx
c00190c1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190c5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190ca:	52                   	push   edx
c00190cb:	6a 0c                	push   0xc
c00190cd:	56                   	push   esi
c00190ce:	57                   	push   edi
c00190cf:	e8 ec fe ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190d4:	83 c4 20             	add    esp,0x20
c00190d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190db:	eb 49                	jmp    c0019126 <IDE::read(unsigned char, unsigned char)+0xa6>
c00190dd:	80 fb 07             	cmp    bl,0x7
c00190e0:	77 12                	ja     c00190f4 <IDE::read(unsigned char, unsigned char)+0x74>
c00190e2:	0f b6 d2             	movzx  edx,dl
c00190e5:	0f b6 c3             	movzx  eax,bl
c00190e8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00190f0:	89 c2                	mov    edx,eax
c00190f2:	eb 31                	jmp    c0019125 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190f4:	80 fb 0d             	cmp    bl,0xd
c00190f7:	77 13                	ja     c001910c <IDE::read(unsigned char, unsigned char)+0x8c>
c00190f9:	0f b6 d2             	movzx  edx,dl
c00190fc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019103:	0f b6 d3             	movzx  edx,bl
c0019106:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001910a:	eb 19                	jmp    c0019125 <IDE::read(unsigned char, unsigned char)+0xa5>
c001910c:	31 c0                	xor    eax,eax
c001910e:	80 fb 15             	cmp    bl,0x15
c0019111:	77 13                	ja     c0019126 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019113:	0f b6 d2             	movzx  edx,dl
c0019116:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001911e:	0f b6 d3             	movzx  edx,bl
c0019121:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019125:	ec                   	in     al,dx
c0019126:	83 c4 1c             	add    esp,0x1c
c0019129:	5b                   	pop    ebx
c001912a:	5e                   	pop    esi
c001912b:	5f                   	pop    edi
c001912c:	5d                   	pop    ebp
c001912d:	c3                   	ret    

c001912e <IDE::waitInterrupt(unsigned char)>:
c001912e:	57                   	push   edi
c001912f:	56                   	push   esi
c0019130:	31 f6                	xor    esi,esi
c0019132:	53                   	push   ebx
c0019133:	83 ec 10             	sub    esp,0x10
c0019136:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001913a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001913e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019142:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019147:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001914e:	84 db                	test   bl,bl
c0019150:	75 33                	jne    c0019185 <IDE::waitInterrupt(unsigned char)+0x57>
c0019152:	52                   	push   edx
c0019153:	6a 0c                	push   0xc
c0019155:	50                   	push   eax
c0019156:	57                   	push   edi
c0019157:	e8 24 ff ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	a8 01                	test   al,0x1
c0019161:	75 2a                	jne    c001918d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019163:	f7 c6 04 00 00 00    	test   esi,0x4
c0019169:	75 12                	jne    c001917d <IDE::waitInterrupt(unsigned char)+0x4f>
c001916b:	83 fe 32             	cmp    esi,0x32
c001916e:	7e 0d                	jle    c001917d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019170:	83 ec 0c             	sub    esp,0xc
c0019173:	6a 64                	push   0x64
c0019175:	e8 1a a9 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	83 fe 3c             	cmp    esi,0x3c
c0019180:	74 0b                	je     c001918d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019182:	46                   	inc    esi
c0019183:	eb bd                	jmp    c0019142 <IDE::waitInterrupt(unsigned char)+0x14>
c0019185:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	88 d8                	mov    al,bl
c0019192:	5b                   	pop    ebx
c0019193:	5e                   	pop    esi
c0019194:	5f                   	pop    edi
c0019195:	c3                   	ret    

c0019196 <ideChannel0IRQHandler(regs*, void*)>:
c0019196:	83 ec 10             	sub    esp,0x10
c0019199:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001919d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191a4:	6a 07                	push   0x7
c00191a6:	6a 00                	push   0x0
c00191a8:	50                   	push   eax
c00191a9:	e8 d2 fe ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00191ae:	83 c4 1c             	add    esp,0x1c
c00191b1:	c3                   	ret    

c00191b2 <ideChannel1IRQHandler(regs*, void*)>:
c00191b2:	83 ec 10             	sub    esp,0x10
c00191b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191b9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191c0:	6a 07                	push   0x7
c00191c2:	6a 01                	push   0x1
c00191c4:	50                   	push   eax
c00191c5:	e8 b6 fe ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00191ca:	83 c4 1c             	add    esp,0x1c
c00191cd:	c3                   	ret    

c00191ce <IDE::enableIRQs(unsigned char, bool)>:
c00191ce:	57                   	push   edi
c00191cf:	56                   	push   esi
c00191d0:	be 04 00 00 00       	mov    esi,0x4
c00191d5:	53                   	push   ebx
c00191d6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191df:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191e4:	0f 94 c0             	sete   al
c00191e7:	01 c0                	add    eax,eax
c00191e9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00191f0:	0f b6 c0             	movzx  eax,al
c00191f3:	50                   	push   eax
c00191f4:	6a 0c                	push   0xc
c00191f6:	57                   	push   edi
c00191f7:	53                   	push   ebx
c00191f8:	e8 c3 fd ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	50                   	push   eax
c0019201:	6a 0c                	push   0xc
c0019203:	57                   	push   edi
c0019204:	53                   	push   ebx
c0019205:	e8 76 fe ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001920a:	83 c4 10             	add    esp,0x10
c001920d:	4e                   	dec    esi
c001920e:	75 f0                	jne    c0019200 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019210:	5b                   	pop    ebx
c0019211:	5e                   	pop    esi
c0019212:	5f                   	pop    edi
c0019213:	c3                   	ret    

c0019214 <IDE::open(int, int, void*)>:
c0019214:	55                   	push   ebp
c0019215:	57                   	push   edi
c0019216:	56                   	push   esi
c0019217:	53                   	push   ebx
c0019218:	83 ec 1c             	sub    esp,0x1c
c001921b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001921f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019228:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019231:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019238:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001923f:	0f 85 b0 02 00 00    	jne    c00194f5 <IDE::open(int, int, void*)+0x2e1>
c0019245:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001924b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001924f:	83 e0 7f             	and    eax,0x7f
c0019252:	3c 05                	cmp    al,0x5
c0019254:	74 04                	je     c001925a <IDE::open(int, int, void*)+0x46>
c0019256:	3c 0f                	cmp    al,0xf
c0019258:	75 32                	jne    c001928c <IDE::open(int, int, void*)+0x78>
c001925a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019260:	83 e0 fc             	and    eax,0xfffffffc
c0019263:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001926a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019270:	83 e0 fc             	and    eax,0xfffffffc
c0019273:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001927a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019280:	83 e0 fc             	and    eax,0xfffffffc
c0019283:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001928a:	eb 14                	jmp    c00192a0 <IDE::open(int, int, void*)+0x8c>
c001928c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0019296:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192a0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192a7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192b2:	89 c6                	mov    esi,eax
c00192b4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192b9:	c1 e6 10             	shl    esi,0x10
c00192bc:	89 e8                	mov    eax,ebp
c00192be:	89 fa                	mov    edx,edi
c00192c0:	c1 e0 0b             	shl    eax,0xb
c00192c3:	09 f0                	or     eax,esi
c00192c5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192cc:	c1 e6 08             	shl    esi,0x8
c00192cf:	09 c6                	or     esi,eax
c00192d1:	89 f0                	mov    eax,esi
c00192d3:	0d 08 00 00 80       	or     eax,0x80000008
c00192d8:	ef                   	out    dx,eax
c00192d9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192de:	89 ca                	mov    edx,ecx
c00192e0:	ed                   	in     eax,dx
c00192e1:	c1 e8 10             	shr    eax,0x10
c00192e4:	3d ff ff 00 00       	cmp    eax,0xffff
c00192e9:	0f 84 f5 00 00 00    	je     c00193e4 <IDE::open(int, int, void*)+0x1d0>
c00192ef:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00192f5:	89 fa                	mov    edx,edi
c00192f7:	89 f0                	mov    eax,esi
c00192f9:	ef                   	out    dx,eax
c00192fa:	b0 fe                	mov    al,0xfe
c00192fc:	89 ca                	mov    edx,ecx
c00192fe:	ee                   	out    dx,al
c00192ff:	89 f0                	mov    eax,esi
c0019301:	89 fa                	mov    edx,edi
c0019303:	ef                   	out    dx,eax
c0019304:	89 ca                	mov    edx,ecx
c0019306:	ed                   	in     eax,dx
c0019307:	3c fe                	cmp    al,0xfe
c0019309:	0f 85 a9 00 00 00    	jne    c00193b8 <IDE::open(int, int, void*)+0x1a4>
c001930f:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c0019315:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001931c:	74 33                	je     c0019351 <IDE::open(int, int, void*)+0x13d>
c001931e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019324:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019328:	40                   	inc    eax
c0019329:	83 ec 0c             	sub    esp,0xc
c001932c:	0f b6 c0             	movzx  eax,al
c001932f:	50                   	push   eax
c0019330:	55                   	push   ebp
c0019331:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019335:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001933b:	51                   	push   ecx
c001933c:	e8 47 54 ff ff       	call   c000e788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019341:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019346:	83 c4 1c             	add    esp,0x1c
c0019349:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001934f:	eb 0a                	jmp    c001935b <IDE::open(int, int, void*)+0x147>
c0019351:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001935b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019362:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019369:	c1 e1 10             	shl    ecx,0x10
c001936c:	c1 e0 08             	shl    eax,0x8
c001936f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019374:	09 c1                	or     ecx,eax
c0019376:	89 fa                	mov    edx,edi
c0019378:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001937f:	c1 e0 0b             	shl    eax,0xb
c0019382:	09 c1                	or     ecx,eax
c0019384:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001938a:	89 c8                	mov    eax,ecx
c001938c:	ef                   	out    dx,eax
c001938d:	be fc 0c 00 00       	mov    esi,0xcfc
c0019392:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019398:	89 f2                	mov    edx,esi
c001939a:	ee                   	out    dx,al
c001939b:	89 c8                	mov    eax,ecx
c001939d:	89 fa                	mov    edx,edi
c001939f:	ef                   	out    dx,eax
c00193a0:	89 f2                	mov    edx,esi
c00193a2:	ed                   	in     eax,dx
c00193a3:	0f b6 c0             	movzx  eax,al
c00193a6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193ac:	74 46                	je     c00193f4 <IDE::open(int, int, void*)+0x1e0>
c00193ae:	83 ec 0c             	sub    esp,0xc
c00193b1:	68 38 f9 01 c0       	push   0xc001f938
c00193b6:	eb 34                	jmp    c00193ec <IDE::open(int, int, void*)+0x1d8>
c00193b8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193c1:	75 17                	jne    c00193da <IDE::open(int, int, void*)+0x1c6>
c00193c3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193c8:	74 07                	je     c00193d1 <IDE::open(int, int, void*)+0x1bd>
c00193ca:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193cf:	75 09                	jne    c00193da <IDE::open(int, int, void*)+0x1c6>
c00193d1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193d8:	eb 1a                	jmp    c00193f4 <IDE::open(int, int, void*)+0x1e0>
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	68 40 f9 01 c0       	push   0xc001f940
c00193e2:	eb 08                	jmp    c00193ec <IDE::open(int, int, void*)+0x1d8>
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	68 71 f9 01 c0       	push   0xc001f971
c00193ec:	e8 7e 6e ff ff       	call   c001026f <KePanic(char const*)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00193fb:	79 1a                	jns    c0019417 <IDE::open(int, int, void*)+0x203>
c00193fd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019403:	83 e0 fc             	and    eax,0xfffffffc
c0019406:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001940d:	83 c0 08             	add    eax,0x8
c0019410:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019417:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001941d:	89 c2                	mov    edx,eax
c001941f:	83 e2 0f             	and    edx,0xf
c0019422:	66 83 fa 08          	cmp    dx,0x8
c0019426:	75 0a                	jne    c0019432 <IDE::open(int, int, void*)+0x21e>
c0019428:	83 e8 02             	sub    eax,0x2
c001942b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019432:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019438:	89 c2                	mov    edx,eax
c001943a:	83 e2 0f             	and    edx,0xf
c001943d:	66 83 fa 08          	cmp    dx,0x8
c0019441:	75 0a                	jne    c001944d <IDE::open(int, int, void*)+0x239>
c0019443:	83 e8 02             	sub    eax,0x2
c0019446:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001944d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019454:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001945b:	89 d0                	mov    eax,edx
c001945d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019460:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019464:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019468:	8d 4a 01             	lea    ecx,[edx+0x1]
c001946b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019470:	0f b6 c9             	movzx  ecx,cl
c0019473:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001947a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001947d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019481:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019485:	8d 50 02             	lea    edx,[eax+0x2]
c0019488:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001948d:	0f b6 d2             	movzx  edx,dl
c0019490:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019496:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019499:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001949d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194a1:	8d 48 03             	lea    ecx,[eax+0x3]
c00194a4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194a9:	0f b6 c9             	movzx  ecx,cl
c00194ac:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194b2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194b5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194b9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194bd:	8d 50 04             	lea    edx,[eax+0x4]
c00194c0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194c6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194cb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194d2:	66 85 f6             	test   si,si
c00194d5:	74 5b                	je     c0019532 <IDE::open(int, int, void*)+0x31e>
c00194d7:	0f b6 d2             	movzx  edx,dl
c00194da:	83 c0 05             	add    eax,0x5
c00194dd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194e0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194e4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194e8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194ee:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194f3:	eb 3d                	jmp    c0019532 <IDE::open(int, int, void*)+0x31e>
c00194f5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00194fb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019502:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019509:	66 05 06 02          	add    ax,0x206
c001950d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019514:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001951b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019522:	66 05 06 02          	add    ax,0x206
c0019526:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001952d:	e9 e5 fe ff ff       	jmp    c0019417 <IDE::open(int, int, void*)+0x203>
c0019532:	50                   	push   eax
c0019533:	50                   	push   eax
c0019534:	6a 00                	push   0x0
c0019536:	53                   	push   ebx
c0019537:	e8 5e fa ff ff       	call   c0018f9a <IDE::prepareInterrupt(unsigned char)>
c001953c:	5a                   	pop    edx
c001953d:	59                   	pop    ecx
c001953e:	6a 01                	push   0x1
c0019540:	53                   	push   ebx
c0019541:	e8 54 fa ff ff       	call   c0018f9a <IDE::prepareInterrupt(unsigned char)>
c0019546:	83 c4 0c             	add    esp,0xc
c0019549:	6a 00                	push   0x0
c001954b:	6a 00                	push   0x0
c001954d:	53                   	push   ebx
c001954e:	e8 7b fc ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c0019553:	83 c4 0c             	add    esp,0xc
c0019556:	6a 00                	push   0x0
c0019558:	6a 01                	push   0x1
c001955a:	53                   	push   ebx
c001955b:	e8 6e fc ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001956a:	74 34                	je     c00195a0 <IDE::open(int, int, void*)+0x38c>
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	53                   	push   ebx
c0019570:	6a 01                	push   0x1
c0019572:	68 96 91 01 c0       	push   0xc0019196
c0019577:	6a 0e                	push   0xe
c0019579:	53                   	push   ebx
c001957a:	e8 bd 23 ff ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001957f:	83 c4 14             	add    esp,0x14
c0019582:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019588:	53                   	push   ebx
c0019589:	6a 01                	push   0x1
c001958b:	68 b2 91 01 c0       	push   0xc00191b2
c0019590:	6a 0f                	push   0xf
c0019592:	53                   	push   ebx
c0019593:	e8 a4 23 ff ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019598:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001959e:	eb 38                	jmp    c00195d8 <IDE::open(int, int, void*)+0x3c4>
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195ad:	53                   	push   ebx
c00195ae:	6a 00                	push   0x0
c00195b0:	68 96 91 01 c0       	push   0xc0019196
c00195b5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195bb:	53                   	push   ebx
c00195bc:	e8 7b 23 ff ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195c1:	83 c4 14             	add    esp,0x14
c00195c4:	53                   	push   ebx
c00195c5:	6a 00                	push   0x0
c00195c7:	68 b2 91 01 c0       	push   0xc00191b2
c00195cc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195d2:	53                   	push   ebx
c00195d3:	e8 64 23 ff ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195da:	83 c4 20             	add    esp,0x20
c00195dd:	83 ec 0c             	sub    esp,0xc
c00195e0:	53                   	push   ebx
c00195e1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195e4:	83 c4 0c             	add    esp,0xc
c00195e7:	6a 07                	push   0x7
c00195e9:	6a 00                	push   0x0
c00195eb:	53                   	push   ebx
c00195ec:	e8 8f fa ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00195f1:	83 c4 0c             	add    esp,0xc
c00195f4:	6a 07                	push   0x7
c00195f6:	6a 01                	push   0x1
c00195f8:	53                   	push   ebx
c00195f9:	e8 82 fa ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00195fe:	83 c4 0c             	add    esp,0xc
c0019601:	6a 01                	push   0x1
c0019603:	6a 00                	push   0x0
c0019605:	53                   	push   ebx
c0019606:	e8 c3 fb ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c001960b:	83 c4 0c             	add    esp,0xc
c001960e:	6a 01                	push   0x1
c0019610:	6a 01                	push   0x1
c0019612:	53                   	push   ebx
c0019613:	e8 b6 fb ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c0019618:	83 c4 2c             	add    esp,0x2c
c001961b:	31 c0                	xor    eax,eax
c001961d:	5b                   	pop    ebx
c001961e:	5e                   	pop    esi
c001961f:	5f                   	pop    edi
c0019620:	5d                   	pop    ebp
c0019621:	c3                   	ret    

c0019622 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019622:	55                   	push   ebp
c0019623:	57                   	push   edi
c0019624:	56                   	push   esi
c0019625:	53                   	push   ebx
c0019626:	83 ec 1c             	sub    esp,0x1c
c0019629:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001962d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019631:	8d 50 f8             	lea    edx,[eax-0x8]
c0019634:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019638:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001963c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019640:	80 fa 03             	cmp    dl,0x3
c0019643:	77 5d                	ja     c00196a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019645:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001964d:	0f b6 db             	movzx  ebx,bl
c0019650:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019653:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019657:	83 ca 80             	or     edx,0xffffff80
c001965a:	0f b6 d2             	movzx  edx,dl
c001965d:	52                   	push   edx
c001965e:	6a 0c                	push   0xc
c0019660:	53                   	push   ebx
c0019661:	56                   	push   esi
c0019662:	e8 59 f9 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019667:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001966c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019670:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019674:	0f b6 c0             	movzx  eax,al
c0019677:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001967b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001967d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019682:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019686:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001968a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001968e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019696:	83 c4 2c             	add    esp,0x2c
c0019699:	5b                   	pop    ebx
c001969a:	5e                   	pop    esi
c001969b:	5f                   	pop    edi
c001969c:	5d                   	pop    ebp
c001969d:	e9 1e f9 ff ff       	jmp    c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a2:	3c 07                	cmp    al,0x7
c00196a4:	77 10                	ja     c00196b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196a6:	0f b6 db             	movzx  ebx,bl
c00196a9:	0f b6 d0             	movzx  edx,al
c00196ac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196b4:	eb 2d                	jmp    c00196e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196b6:	3c 0d                	cmp    al,0xd
c00196b8:	77 13                	ja     c00196cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196ba:	0f b6 db             	movzx  ebx,bl
c00196bd:	0f b6 c0             	movzx  eax,al
c00196c0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196c7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196cb:	eb 16                	jmp    c00196e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196cd:	3c 15                	cmp    al,0x15
c00196cf:	77 14                	ja     c00196e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196d1:	0f b6 db             	movzx  ebx,bl
c00196d4:	0f b6 c0             	movzx  eax,al
c00196d7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196df:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196e5:	83 c4 1c             	add    esp,0x1c
c00196e8:	5b                   	pop    ebx
c00196e9:	5e                   	pop    esi
c00196ea:	5f                   	pop    edi
c00196eb:	5d                   	pop    ebp
c00196ec:	c3                   	ret    
c00196ed:	90                   	nop

c00196ee <IDE::detect()>:
c00196ee:	55                   	push   ebp
c00196ef:	57                   	push   edi
c00196f0:	56                   	push   esi
c00196f1:	53                   	push   ebx
c00196f2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00196f8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00196ff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019706:	0f 85 97 02 00 00    	jne    c00199a3 <IDE::detect()+0x2b5>
c001970c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019713:	31 f6                	xor    esi,esi
c0019715:	31 ed                	xor    ebp,ebp
c0019717:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001971f:	89 e8                	mov    eax,ebp
c0019721:	c1 e0 06             	shl    eax,0x6
c0019724:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001972c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019730:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019734:	c1 e0 04             	shl    eax,0x4
c0019737:	83 c8 a0             	or     eax,0xffffffa0
c001973a:	0f b6 c0             	movzx  eax,al
c001973d:	50                   	push   eax
c001973e:	6a 06                	push   0x6
c0019740:	56                   	push   esi
c0019741:	53                   	push   ebx
c0019742:	e8 79 f8 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019747:	83 c4 0c             	add    esp,0xc
c001974a:	6a 0c                	push   0xc
c001974c:	56                   	push   esi
c001974d:	53                   	push   ebx
c001974e:	e8 2d f9 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019753:	83 c4 0c             	add    esp,0xc
c0019756:	6a 0c                	push   0xc
c0019758:	56                   	push   esi
c0019759:	53                   	push   ebx
c001975a:	e8 21 f9 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001975f:	83 c4 0c             	add    esp,0xc
c0019762:	6a 0c                	push   0xc
c0019764:	56                   	push   esi
c0019765:	53                   	push   ebx
c0019766:	e8 15 f9 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001976b:	83 c4 0c             	add    esp,0xc
c001976e:	6a 0c                	push   0xc
c0019770:	56                   	push   esi
c0019771:	53                   	push   ebx
c0019772:	e8 09 f9 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019777:	68 ec 00 00 00       	push   0xec
c001977c:	6a 07                	push   0x7
c001977e:	56                   	push   esi
c001977f:	53                   	push   ebx
c0019780:	e8 3b f8 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019785:	83 c4 1c             	add    esp,0x1c
c0019788:	6a 0c                	push   0xc
c001978a:	56                   	push   esi
c001978b:	53                   	push   ebx
c001978c:	e8 ef f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019791:	83 c4 0c             	add    esp,0xc
c0019794:	6a 0c                	push   0xc
c0019796:	56                   	push   esi
c0019797:	53                   	push   ebx
c0019798:	e8 e3 f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001979d:	83 c4 0c             	add    esp,0xc
c00197a0:	6a 0c                	push   0xc
c00197a2:	56                   	push   esi
c00197a3:	53                   	push   ebx
c00197a4:	e8 d7 f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00197a9:	83 c4 0c             	add    esp,0xc
c00197ac:	6a 0c                	push   0xc
c00197ae:	56                   	push   esi
c00197af:	53                   	push   ebx
c00197b0:	e8 cb f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00197b5:	83 c4 0c             	add    esp,0xc
c00197b8:	6a 0c                	push   0xc
c00197ba:	56                   	push   esi
c00197bb:	53                   	push   ebx
c00197bc:	e8 bf f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00197c1:	83 c4 10             	add    esp,0x10
c00197c4:	84 c0                	test   al,al
c00197c6:	0f 84 5f 01 00 00    	je     c001992b <IDE::detect()+0x23d>
c00197cc:	31 ff                	xor    edi,edi
c00197ce:	50                   	push   eax
c00197cf:	6a 0c                	push   0xc
c00197d1:	56                   	push   esi
c00197d2:	53                   	push   ebx
c00197d3:	e8 a8 f8 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c00197d8:	83 c4 10             	add    esp,0x10
c00197db:	a8 01                	test   al,0x1
c00197dd:	0f 85 69 01 00 00    	jne    c001994c <IDE::detect()+0x25e>
c00197e3:	84 c0                	test   al,al
c00197e5:	78 04                	js     c00197eb <IDE::detect()+0xfd>
c00197e7:	a8 08                	test   al,0x8
c00197e9:	75 23                	jne    c001980e <IDE::detect()+0x120>
c00197eb:	47                   	inc    edi
c00197ec:	81 ff 17 01 00 00    	cmp    edi,0x117
c00197f2:	7e da                	jle    c00197ce <IDE::detect()+0xe0>
c00197f4:	83 ec 0c             	sub    esp,0xc
c00197f7:	6a 32                	push   0x32
c00197f9:	e8 96 a2 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c00197fe:	83 c4 10             	add    esp,0x10
c0019801:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019807:	75 c5                	jne    c00197ce <IDE::detect()+0xe0>
c0019809:	e9 3e 01 00 00       	jmp    c001994c <IDE::detect()+0x25e>
c001980e:	31 c9                	xor    ecx,ecx
c0019810:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019814:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019818:	83 ec 0c             	sub    esp,0xc
c001981b:	68 80 00 00 00       	push   0x80
c0019820:	57                   	push   edi
c0019821:	6a 00                	push   0x0
c0019823:	56                   	push   esi
c0019824:	53                   	push   ebx
c0019825:	e8 f8 fd ff ff       	call   c0019622 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001982a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001982f:	89 e8                	mov    eax,ebp
c0019831:	89 d1                	mov    ecx,edx
c0019833:	c1 e0 06             	shl    eax,0x6
c0019836:	01 d8                	add    eax,ebx
c0019838:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001983f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019846:	89 f2                	mov    edx,esi
c0019848:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001984e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019852:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019858:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001985c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019863:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001986b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019872:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001987a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019880:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019887:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001988d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019891:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019895:	83 c4 20             	add    esp,0x20
c0019898:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001989b:	83 c0 02             	add    eax,0x2
c001989e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198a4:	83 c7 02             	add    edi,0x2
c00198a7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198aa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198b0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198b4:	75 e2                	jne    c0019898 <IDE::detect()+0x1aa>
c00198b6:	89 e8                	mov    eax,ebp
c00198b8:	c1 e0 06             	shl    eax,0x6
c00198bb:	01 d8                	add    eax,ebx
c00198bd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198c3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198ca:	66 c1 ea 09          	shr    dx,0x9
c00198ce:	83 e2 01             	and    edx,0x1
c00198d1:	84 c9                	test   cl,cl
c00198d3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198d9:	75 22                	jne    c00198fd <IDE::detect()+0x20f>
c00198db:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198e2:	74 46                	je     c001992a <IDE::detect()+0x23c>
c00198e4:	83 ec 0c             	sub    esp,0xc
c00198e7:	68 7c 01 00 00       	push   0x17c
c00198ec:	e8 c8 de fe ff       	call   c00077b9 <malloc>
c00198f1:	89 c7                	mov    edi,eax
c00198f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f6:	e8 11 05 00 00       	call   c0019e0c <ATA::ATA()>
c00198fb:	eb 17                	jmp    c0019914 <IDE::detect()+0x226>
c00198fd:	83 ec 0c             	sub    esp,0xc
c0019900:	68 84 01 00 00       	push   0x184
c0019905:	e8 af de fe ff       	call   c00077b9 <malloc>
c001990a:	89 c7                	mov    edi,eax
c001990c:	89 04 24             	mov    DWORD PTR [esp],eax
c001990f:	e8 1e 0e 00 00       	call   c001a732 <ATAPI::ATAPI()>
c0019914:	5a                   	pop    edx
c0019915:	59                   	pop    ecx
c0019916:	57                   	push   edi
c0019917:	53                   	push   ebx
c0019918:	e8 73 20 ff ff       	call   c000b990 <Device::addChild(Device*)>
c001991d:	8b 07                	mov    eax,DWORD PTR [edi]
c001991f:	53                   	push   ebx
c0019920:	55                   	push   ebp
c0019921:	6a 00                	push   0x0
c0019923:	57                   	push   edi
c0019924:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019927:	83 c4 20             	add    esp,0x20
c001992a:	45                   	inc    ebp
c001992b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019930:	74 0d                	je     c001993f <IDE::detect()+0x251>
c0019932:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001993a:	e9 e0 fd ff ff       	jmp    c001971f <IDE::detect()+0x31>
c001993f:	4e                   	dec    esi
c0019940:	74 61                	je     c00199a3 <IDE::detect()+0x2b5>
c0019942:	be 01 00 00 00       	mov    esi,0x1
c0019947:	e9 cb fd ff ff       	jmp    c0019717 <IDE::detect()+0x29>
c001994c:	50                   	push   eax
c001994d:	6a 04                	push   0x4
c001994f:	56                   	push   esi
c0019950:	53                   	push   ebx
c0019951:	e8 2a f7 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019956:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001995a:	83 c4 0c             	add    esp,0xc
c001995d:	6a 05                	push   0x5
c001995f:	56                   	push   esi
c0019960:	53                   	push   ebx
c0019961:	e8 1a f7 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019966:	83 c4 10             	add    esp,0x10
c0019969:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001996d:	80 fa 14             	cmp    dl,0x14
c0019970:	75 04                	jne    c0019976 <IDE::detect()+0x288>
c0019972:	3c eb                	cmp    al,0xeb
c0019974:	eb 07                	jmp    c001997d <IDE::detect()+0x28f>
c0019976:	3c 96                	cmp    al,0x96
c0019978:	75 b1                	jne    c001992b <IDE::detect()+0x23d>
c001997a:	80 fa 69             	cmp    dl,0x69
c001997d:	75 ac                	jne    c001992b <IDE::detect()+0x23d>
c001997f:	68 a1 00 00 00       	push   0xa1
c0019984:	6a 07                	push   0x7
c0019986:	56                   	push   esi
c0019987:	53                   	push   ebx
c0019988:	e8 33 f6 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001998d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019994:	e8 fb a0 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c0019999:	83 c4 10             	add    esp,0x10
c001999c:	b1 01                	mov    cl,0x1
c001999e:	e9 6d fe ff ff       	jmp    c0019810 <IDE::detect()+0x122>
c00199a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199a9:	5b                   	pop    ebx
c00199aa:	5e                   	pop    esi
c00199ab:	5f                   	pop    edi
c00199ac:	5d                   	pop    ebp
c00199ad:	c3                   	ret    

c00199ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199ae:	55                   	push   ebp
c00199af:	57                   	push   edi
c00199b0:	56                   	push   esi
c00199b1:	53                   	push   ebx
c00199b2:	83 ec 1c             	sub    esp,0x1c
c00199b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199c5:	88 c3                	mov    bl,al
c00199c7:	84 c0                	test   al,al
c00199c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199cd:	0f 84 81 00 00 00    	je     c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199d3:	83 ec 0c             	sub    esp,0xc
c00199d6:	68 9b f9 01 c0       	push   0xc001f99b
c00199db:	e8 72 0b ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00199e0:	83 c4 10             	add    esp,0x10
c00199e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199e7:	3c 01                	cmp    al,0x1
c00199e9:	74 63                	je     c0019a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199eb:	3c 02                	cmp    al,0x2
c00199ed:	75 53                	jne    c0019a42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199ef:	01 f6                	add    esi,esi
c00199f1:	09 ee                	or     esi,ebp
c00199f3:	50                   	push   eax
c00199f4:	89 f0                	mov    eax,esi
c00199f6:	6a 01                	push   0x1
c00199f8:	0f b6 f0             	movzx  esi,al
c00199fb:	c1 e6 06             	shl    esi,0x6
c00199fe:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a06:	50                   	push   eax
c0019a07:	57                   	push   edi
c0019a08:	e8 73 f6 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	a8 01                	test   al,0x1
c0019a12:	74 02                	je     c0019a16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a14:	b3 07                	mov    bl,0x7
c0019a16:	a8 02                	test   al,0x2
c0019a18:	74 02                	je     c0019a1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a1a:	b3 03                	mov    bl,0x3
c0019a1c:	a8 04                	test   al,0x4
c0019a1e:	74 02                	je     c0019a22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a20:	b3 14                	mov    bl,0x14
c0019a22:	a8 08                	test   al,0x8
c0019a24:	74 02                	je     c0019a28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a26:	b3 03                	mov    bl,0x3
c0019a28:	a8 10                	test   al,0x10
c0019a2a:	74 02                	je     c0019a2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a2c:	b3 15                	mov    bl,0x15
c0019a2e:	a8 20                	test   al,0x20
c0019a30:	74 02                	je     c0019a34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a32:	b3 03                	mov    bl,0x3
c0019a34:	a8 40                	test   al,0x40
c0019a36:	74 02                	je     c0019a3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a38:	b3 16                	mov    bl,0x16
c0019a3a:	84 c0                	test   al,al
c0019a3c:	79 16                	jns    c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a3e:	b3 0d                	mov    bl,0xd
c0019a40:	eb 12                	jmp    c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a42:	3c 03                	cmp    al,0x3
c0019a44:	74 0c                	je     c0019a52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a46:	3c 04                	cmp    al,0x4
c0019a48:	75 0a                	jne    c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4a:	b3 08                	mov    bl,0x8
c0019a4c:	eb 06                	jmp    c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4e:	b3 13                	mov    bl,0x13
c0019a50:	eb 02                	jmp    c0019a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a52:	b3 17                	mov    bl,0x17
c0019a54:	83 c4 1c             	add    esp,0x1c
c0019a57:	88 d8                	mov    al,bl
c0019a59:	5b                   	pop    ebx
c0019a5a:	5e                   	pop    esi
c0019a5b:	5f                   	pop    edi
c0019a5c:	5d                   	pop    ebp
c0019a5d:	c3                   	ret    

c0019a5e <IDE::polling(unsigned char, unsigned int)>:
c0019a5e:	55                   	push   ebp
c0019a5f:	bd 04 00 00 00       	mov    ebp,0x4
c0019a64:	57                   	push   edi
c0019a65:	56                   	push   esi
c0019a66:	53                   	push   ebx
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a6e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a72:	0f b6 f3             	movzx  esi,bl
c0019a75:	52                   	push   edx
c0019a76:	6a 0c                	push   0xc
c0019a78:	56                   	push   esi
c0019a79:	57                   	push   edi
c0019a7a:	e8 01 f6 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019a7f:	83 c4 10             	add    esp,0x10
c0019a82:	4d                   	dec    ebp
c0019a83:	75 ed                	jne    c0019a72 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a85:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a8a:	50                   	push   eax
c0019a8b:	6a 0c                	push   0xc
c0019a8d:	56                   	push   esi
c0019a8e:	57                   	push   edi
c0019a8f:	e8 ec f5 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019a94:	83 c4 10             	add    esp,0x10
c0019a97:	a8 01                	test   al,0x1
c0019a99:	75 17                	jne    c0019ab2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a9b:	a8 20                	test   al,0x20
c0019a9d:	75 0f                	jne    c0019aae <IDE::polling(unsigned char, unsigned int)+0x50>
c0019a9f:	4b                   	dec    ebx
c0019aa0:	74 10                	je     c0019ab2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aa2:	84 c0                	test   al,al
c0019aa4:	78 e4                	js     c0019a8a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aa6:	a8 08                	test   al,0x8
c0019aa8:	74 e0                	je     c0019a8a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019aaa:	31 c0                	xor    eax,eax
c0019aac:	eb 06                	jmp    c0019ab4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019aae:	b0 01                	mov    al,0x1
c0019ab0:	eb 02                	jmp    c0019ab4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ab2:	b0 02                	mov    al,0x2
c0019ab4:	83 c4 0c             	add    esp,0xc
c0019ab7:	5b                   	pop    ebx
c0019ab8:	5e                   	pop    esi
c0019ab9:	5f                   	pop    edi
c0019aba:	5d                   	pop    ebp
c0019abb:	c3                   	ret    

c0019abc <SATABus::close(int, int, void*)>:
c0019abc:	31 c0                	xor    eax,eax
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <SATABus::detect()>:
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <SATABus::SATABus()>:
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac9:	83 ec 08             	sub    esp,0x8
c0019acc:	68 d4 f9 01 c0       	push   0xc001f9d4
c0019ad1:	50                   	push   eax
c0019ad2:	e8 fd 21 ff ff       	call   c000bcd4 <HardDiskController::HardDiskController(char const*)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	ba 00 fa 01 c0       	mov    edx,0xc001fa00
c0019adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae3:	89 10                	mov    DWORD PTR [eax],edx
c0019ae5:	83 ec 0c             	sub    esp,0xc
c0019ae8:	6a 50                	push   0x50
c0019aea:	e8 64 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019aef:	83 c4 10             	add    esp,0x10
c0019af2:	89 c2                	mov    edx,eax
c0019af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	6a 50                	push   0x50
c0019b03:	e8 8d f7 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0019b08:	83 c4 10             	add    esp,0x10
c0019b0b:	89 c2                	mov    edx,eax
c0019b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b11:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b17:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0019b1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b20:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b2a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b30:	83 ec 0c             	sub    esp,0xc
c0019b33:	6a 03                	push   0x3
c0019b35:	6a 50                	push   0x50
c0019b37:	51                   	push   ecx
c0019b38:	52                   	push   edx
c0019b39:	50                   	push   eax
c0019b3a:	e8 13 01 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b3f:	83 c4 20             	add    esp,0x20
c0019b42:	90                   	nop
c0019b43:	83 c4 0c             	add    esp,0xc
c0019b46:	c3                   	ret    
c0019b47:	90                   	nop

c0019b48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b4c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b52:	09 c2                	or     edx,eax
c0019b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b60:	31 c0                	xor    eax,eax
c0019b62:	c1 e9 08             	shr    ecx,0x8
c0019b65:	83 e1 0f             	and    ecx,0xf
c0019b68:	39 c8                	cmp    eax,ecx
c0019b6a:	74 0a                	je     c0019b76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b6c:	f6 c2 01             	test   dl,0x1
c0019b6f:	74 08                	je     c0019b79 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b71:	d1 ea                	shr    edx,1
c0019b73:	40                   	inc    eax
c0019b74:	eb f2                	jmp    c0019b68 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b76:	83 c8 ff             	or     eax,0xffffffff
c0019b79:	c3                   	ret    

c0019b7a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b7e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b81:	89 c2                	mov    edx,eax
c0019b83:	c1 ea 08             	shr    edx,0x8
c0019b86:	83 e2 0f             	and    edx,0xf
c0019b89:	fe ca                	dec    dl
c0019b8b:	75 31                	jne    c0019bbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b8d:	83 e0 0f             	and    eax,0xf
c0019b90:	3c 03                	cmp    al,0x3
c0019b92:	75 2a                	jne    c0019bbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b94:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019b97:	b8 02 00 00 00       	mov    eax,0x2
c0019b9c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019ba2:	74 1c                	je     c0019bc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ba4:	b8 04 00 00 00       	mov    eax,0x4
c0019ba9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019baf:	74 0f                	je     c0019bc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bb1:	31 c0                	xor    eax,eax
c0019bb3:	83 fa 03             	cmp    edx,0x3
c0019bb6:	0f 94 c0             	sete   al
c0019bb9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bbd:	c3                   	ret    
c0019bbe:	31 c0                	xor    eax,eax
c0019bc0:	c3                   	ret    
c0019bc1:	90                   	nop

c0019bc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bc6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bc9:	0f ba e2 0f          	bt     edx,0xf
c0019bcd:	72 f7                	jb     c0019bc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bcf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bd2:	83 ca 10             	or     edx,0x10
c0019bd5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bd8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bdb:	83 ca 01             	or     edx,0x1
c0019bde:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019be1:	c3                   	ret    

c0019be2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019be2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019be6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019be9:	83 e2 fe             	and    edx,0xfffffffe
c0019bec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf2:	83 e2 ef             	and    edx,0xffffffef
c0019bf5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bf8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bfb:	0f ba e2 0e          	bt     edx,0xe
c0019bff:	72 f7                	jb     c0019bf8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c01:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c04:	0f ba e2 0f          	bt     edx,0xf
c0019c08:	72 ee                	jb     c0019bf8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c0a:	c3                   	ret    
c0019c0b:	90                   	nop

c0019c0c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c0c:	55                   	push   ebp
c0019c0d:	57                   	push   edi
c0019c0e:	56                   	push   esi
c0019c0f:	53                   	push   ebx
c0019c10:	83 ec 1c             	sub    esp,0x1c
c0019c13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c1b:	53                   	push   ebx
c0019c1c:	56                   	push   esi
c0019c1d:	e8 c0 ff ff ff       	call   c0019be2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c22:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c26:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c2c:	83 ec 0c             	sub    esp,0xc
c0019c2f:	c1 e5 0a             	shl    ebp,0xa
c0019c32:	01 e8                	add    eax,ebp
c0019c34:	89 03                	mov    DWORD PTR [ebx],eax
c0019c36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c38:	68 00 04 00 00       	push   0x400
c0019c3d:	6a 00                	push   0x0
c0019c3f:	50                   	push   eax
c0019c40:	e8 8b 68 fe ff       	call   c00004d0 <memset>
c0019c45:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c4b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c4f:	01 e8                	add    eax,ebp
c0019c51:	83 c4 1c             	add    esp,0x1c
c0019c54:	89 03                	mov    DWORD PTR [ebx],eax
c0019c56:	c1 e2 08             	shl    edx,0x8
c0019c59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c60:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c66:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c6c:	01 f8                	add    eax,edi
c0019c6e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c74:	68 00 01 00 00       	push   0x100
c0019c79:	6a 00                	push   0x0
c0019c7b:	50                   	push   eax
c0019c7c:	e8 4f 68 fe ff       	call   c00004d0 <memset>
c0019c81:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c87:	01 fa                	add    edx,edi
c0019c89:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c8d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c90:	c1 e7 0d             	shl    edi,0xd
c0019c93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019c9a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019ca0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019ca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019caa:	31 ff                	xor    edi,edi
c0019cac:	83 c4 10             	add    esp,0x10
c0019caf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cb9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019cbf:	83 c5 20             	add    ebp,0x20
c0019cc2:	01 f8                	add    eax,edi
c0019cc4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cc7:	52                   	push   edx
c0019cc8:	68 00 01 00 00       	push   0x100
c0019ccd:	6a 00                	push   0x0
c0019ccf:	50                   	push   eax
c0019cd0:	e8 fb 67 fe ff       	call   c00004d0 <memset>
c0019cd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cd9:	83 c4 10             	add    esp,0x10
c0019cdc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019ce2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019ce9:	01 f8                	add    eax,edi
c0019ceb:	81 c7 00 01 00 00    	add    edi,0x100
c0019cf1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cf4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019cfa:	75 b3                	jne    c0019caf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019cfc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d03:	50                   	push   eax
c0019d04:	50                   	push   eax
c0019d05:	53                   	push   ebx
c0019d06:	56                   	push   esi
c0019d07:	e8 b6 fe ff ff       	call   c0019bc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d0c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d13:	83 c4 2c             	add    esp,0x2c
c0019d16:	5b                   	pop    ebx
c0019d17:	5e                   	pop    esi
c0019d18:	5f                   	pop    edi
c0019d19:	5d                   	pop    ebp
c0019d1a:	c3                   	ret    
c0019d1b:	90                   	nop

c0019d1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d1c:	55                   	push   ebp
c0019d1d:	57                   	push   edi
c0019d1e:	56                   	push   esi
c0019d1f:	53                   	push   ebx
c0019d20:	31 db                	xor    ebx,ebx
c0019d22:	83 ec 0c             	sub    esp,0xc
c0019d25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d2d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d30:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d36:	74 7a                	je     c0019db2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d38:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d3c:	89 d8                	mov    eax,ebx
c0019d3e:	c1 e0 07             	shl    eax,0x7
c0019d41:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d48:	55                   	push   ebp
c0019d49:	56                   	push   esi
c0019d4a:	e8 2b fe ff ff       	call   c0019b7a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d4f:	5a                   	pop    edx
c0019d50:	83 f8 01             	cmp    eax,0x1
c0019d53:	59                   	pop    ecx
c0019d54:	75 21                	jne    c0019d77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d56:	50                   	push   eax
c0019d57:	53                   	push   ebx
c0019d58:	55                   	push   ebp
c0019d59:	56                   	push   esi
c0019d5a:	e8 ad fe ff ff       	call   c0019c0c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d5f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d66:	e8 4e da fe ff       	call   c00077b9 <malloc>
c0019d6b:	89 c5                	mov    ebp,eax
c0019d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d70:	e8 71 10 00 00       	call   c001ade6 <SATA::SATA()>
c0019d75:	eb 24                	jmp    c0019d9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d77:	83 f8 04             	cmp    eax,0x4
c0019d7a:	75 36                	jne    c0019db2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d7c:	51                   	push   ecx
c0019d7d:	53                   	push   ebx
c0019d7e:	55                   	push   ebp
c0019d7f:	56                   	push   esi
c0019d80:	e8 87 fe ff ff       	call   c0019c0c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d85:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d8c:	e8 28 da fe ff       	call   c00077b9 <malloc>
c0019d91:	89 c5                	mov    ebp,eax
c0019d93:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d96:	e8 a5 17 00 00       	call   c001b540 <SATAPI::SATAPI()>
c0019d9b:	58                   	pop    eax
c0019d9c:	5a                   	pop    edx
c0019d9d:	55                   	push   ebp
c0019d9e:	56                   	push   esi
c0019d9f:	e8 ec 1b ff ff       	call   c000b990 <Device::addChild(Device*)>
c0019da4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019da7:	56                   	push   esi
c0019da8:	6a 00                	push   0x0
c0019daa:	53                   	push   ebx
c0019dab:	55                   	push   ebp
c0019dac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019daf:	83 c4 20             	add    esp,0x20
c0019db2:	d1 ef                	shr    edi,1
c0019db4:	43                   	inc    ebx
c0019db5:	83 fb 20             	cmp    ebx,0x20
c0019db8:	0f 85 72 ff ff ff    	jne    c0019d30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dbe:	83 c4 0c             	add    esp,0xc
c0019dc1:	5b                   	pop    ebx
c0019dc2:	5e                   	pop    esi
c0019dc3:	5f                   	pop    edi
c0019dc4:	5d                   	pop    ebp
c0019dc5:	c3                   	ret    

c0019dc6 <SATABus::open(int, int, void*)>:
c0019dc6:	83 ec 14             	sub    esp,0x14
c0019dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dcd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019dd3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019dd9:	52                   	push   edx
c0019dda:	50                   	push   eax
c0019ddb:	e8 3c ff ff ff       	call   c0019d1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019de0:	31 c0                	xor    eax,eax
c0019de2:	83 c4 1c             	add    esp,0x1c
c0019de5:	c3                   	ret    

c0019de6 <ATA::close(int, int, void*)>:
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ded:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019df3:	85 c0                	test   eax,eax
c0019df5:	74 0c                	je     c0019e03 <ATA::close(int, int, void*)+0x1d>
c0019df7:	83 ec 0c             	sub    esp,0xc
c0019dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dfc:	50                   	push   eax
c0019dfd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	31 c0                	xor    eax,eax
c0019e05:	83 c4 0c             	add    esp,0xc
c0019e08:	c3                   	ret    
c0019e09:	90                   	nop

c0019e0a <ATA::powerSaving(PowerSavingLevel)>:
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop

c0019e0c <ATA::ATA()>:
c0019e0c:	83 ec 0c             	sub    esp,0xc
c0019e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e13:	83 ec 04             	sub    esp,0x4
c0019e16:	68 00 02 00 00       	push   0x200
c0019e1b:	68 cd fa 01 c0       	push   0xc001facd
c0019e20:	50                   	push   eax
c0019e21:	e8 38 1f ff ff       	call   c000bd5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e26:	83 c4 10             	add    esp,0x10
c0019e29:	ba 40 fa 01 c0       	mov    edx,0xc001fa40
c0019e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e32:	89 10                	mov    DWORD PTR [eax],edx
c0019e34:	90                   	nop
c0019e35:	83 c4 0c             	add    esp,0xc
c0019e38:	c3                   	ret    
c0019e39:	90                   	nop

c0019e3a <ATA::flush(bool)>:
c0019e3a:	53                   	push   ebx
c0019e3b:	83 ec 08             	sub    esp,0x8
c0019e3e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e47:	19 c0                	sbb    eax,eax
c0019e49:	83 e0 fd             	and    eax,0xfffffffd
c0019e4c:	05 ea 00 00 00       	add    eax,0xea
c0019e51:	50                   	push   eax
c0019e52:	6a 07                	push   0x7
c0019e54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e5b:	50                   	push   eax
c0019e5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e62:	e8 59 f1 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e67:	83 c4 0c             	add    esp,0xc
c0019e6a:	6a 00                	push   0x0
c0019e6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e73:	50                   	push   eax
c0019e74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e7a:	e8 df fb ff ff       	call   c0019a5e <IDE::polling(unsigned char, unsigned int)>
c0019e7f:	83 c4 18             	add    esp,0x18
c0019e82:	5b                   	pop    ebx
c0019e83:	c3                   	ret    

c0019e84 <ATA::readyForCommand()>:
c0019e84:	56                   	push   esi
c0019e85:	53                   	push   ebx
c0019e86:	53                   	push   ebx
c0019e87:	31 db                	xor    ebx,ebx
c0019e89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e8d:	51                   	push   ecx
c0019e8e:	6a 0c                	push   0xc
c0019e90:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019e97:	50                   	push   eax
c0019e98:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019e9e:	e8 dd f1 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c0019ea3:	83 c4 10             	add    esp,0x10
c0019ea6:	a8 88                	test   al,0x88
c0019ea8:	74 1f                	je     c0019ec9 <ATA::readyForCommand()+0x45>
c0019eaa:	43                   	inc    ebx
c0019eab:	83 fb 63             	cmp    ebx,0x63
c0019eae:	7e dd                	jle    c0019e8d <ATA::readyForCommand()+0x9>
c0019eb0:	83 ec 0c             	sub    esp,0xc
c0019eb3:	6a 0a                	push   0xa
c0019eb5:	e8 da 9b ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c0019eba:	83 c4 10             	add    esp,0x10
c0019ebd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ec3:	75 c8                	jne    c0019e8d <ATA::readyForCommand()+0x9>
c0019ec5:	31 c0                	xor    eax,eax
c0019ec7:	eb 02                	jmp    c0019ecb <ATA::readyForCommand()+0x47>
c0019ec9:	b0 01                	mov    al,0x1
c0019ecb:	5a                   	pop    edx
c0019ecc:	5b                   	pop    ebx
c0019ecd:	5e                   	pop    esi
c0019ece:	c3                   	ret    
c0019ecf:	90                   	nop

c0019ed0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ed0:	55                   	push   ebp
c0019ed1:	57                   	push   edi
c0019ed2:	56                   	push   esi
c0019ed3:	53                   	push   ebx
c0019ed4:	83 ec 2c             	sub    esp,0x2c
c0019ed7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019edb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019edf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ee3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ee7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019eeb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019eef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ef3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ef9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019efd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f07:	c1 e0 06             	shl    eax,0x6
c0019f0a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f12:	74 5d                	je     c0019f71 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f14:	89 fa                	mov    edx,edi
c0019f16:	89 f0                	mov    eax,esi
c0019f18:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f1c:	c1 ea 1c             	shr    edx,0x1c
c0019f1f:	89 d1                	mov    ecx,edx
c0019f21:	09 c1                	or     ecx,eax
c0019f23:	74 25                	je     c0019f4a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f25:	31 ed                	xor    ebp,ebp
c0019f27:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f2e:	89 fa                	mov    edx,edi
c0019f30:	89 f0                	mov    eax,esi
c0019f32:	0f ad d0             	shrd   eax,edx,cl
c0019f35:	d3 ea                	shr    edx,cl
c0019f37:	f6 c1 20             	test   cl,0x20
c0019f3a:	74 02                	je     c0019f3e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f3c:	89 d0                	mov    eax,edx
c0019f3e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f42:	45                   	inc    ebp
c0019f43:	83 fd 06             	cmp    ebp,0x6
c0019f46:	75 df                	jne    c0019f27 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f48:	eb 76                	jmp    c0019fc0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f4a:	89 f0                	mov    eax,esi
c0019f4c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f51:	89 fa                	mov    edx,edi
c0019f53:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f5a:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f63:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f67:	c1 ee 18             	shr    esi,0x18
c0019f6a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f6f:	eb 56                	jmp    c0019fc7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f71:	6a 00                	push   0x0
c0019f73:	6a 3f                	push   0x3f
c0019f75:	57                   	push   edi
c0019f76:	56                   	push   esi
c0019f77:	e8 84 29 00 00       	call   c001c900 <__umoddi3>
c0019f7c:	83 c4 10             	add    esp,0x10
c0019f7f:	40                   	inc    eax
c0019f80:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f84:	6a 00                	push   0x0
c0019f86:	68 f0 03 00 00       	push   0x3f0
c0019f8b:	57                   	push   edi
c0019f8c:	56                   	push   esi
c0019f8d:	e8 6e 28 00 00       	call   c001c800 <__udivdi3>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019f9a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fa1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fa6:	6a 00                	push   0x0
c0019fa8:	6a 3f                	push   0x3f
c0019faa:	57                   	push   edi
c0019fab:	56                   	push   esi
c0019fac:	e8 4f 28 00 00       	call   c001c800 <__udivdi3>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	89 c6                	mov    esi,eax
c0019fb6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fbb:	83 e6 0f             	and    esi,0xf
c0019fbe:	eb 07                	jmp    c0019fc7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fc0:	31 f6                	xor    esi,esi
c0019fc2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fc7:	bf 01 00 00 00       	mov    edi,0x1
c0019fcc:	50                   	push   eax
c0019fcd:	6a 00                	push   0x0
c0019fcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fd6:	50                   	push   eax
c0019fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fdb:	e8 ee f1 ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c0019fe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe3:	e8 9c fe ff ff       	call   c0019e84 <ATA::readyForCommand()>
c0019fe8:	83 c4 10             	add    esp,0x10
c0019feb:	84 c0                	test   al,al
c0019fed:	0f 84 4e 02 00 00    	je     c001a241 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019ff3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019ff9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019fff:	c1 e0 04             	shl    eax,0x4
c001a002:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a009:	09 c6                	or     esi,eax
c001a00b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a010:	75 05                	jne    c001a017 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a012:	83 ce a0             	or     esi,0xffffffa0
c001a015:	eb 03                	jmp    c001a01a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a017:	83 ce e0             	or     esi,0xffffffe0
c001a01a:	89 f0                	mov    eax,esi
c001a01c:	0f b6 f0             	movzx  esi,al
c001a01f:	56                   	push   esi
c001a020:	6a 06                	push   0x6
c001a022:	51                   	push   ecx
c001a023:	52                   	push   edx
c001a024:	e8 97 ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	6a 00                	push   0x0
c001a02e:	6a 01                	push   0x1
c001a030:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a037:	50                   	push   eax
c001a038:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a03e:	e8 7d ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a04b:	75 6e                	jne    c001a0bb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a04d:	6a 00                	push   0x0
c001a04f:	6a 08                	push   0x8
c001a051:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a058:	50                   	push   eax
c001a059:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a05f:	e8 5c ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a064:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a069:	50                   	push   eax
c001a06a:	6a 09                	push   0x9
c001a06c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a073:	50                   	push   eax
c001a074:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a07a:	e8 41 ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a07f:	83 c4 20             	add    esp,0x20
c001a082:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a087:	50                   	push   eax
c001a088:	6a 0a                	push   0xa
c001a08a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a091:	50                   	push   eax
c001a092:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a098:	e8 23 ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a09d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0a2:	50                   	push   eax
c001a0a3:	6a 0b                	push   0xb
c001a0a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ac:	50                   	push   eax
c001a0ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0b3:	e8 08 ef ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b8:	83 c4 20             	add    esp,0x20
c001a0bb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0c0:	50                   	push   eax
c001a0c1:	6a 02                	push   0x2
c001a0c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ca:	50                   	push   eax
c001a0cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0d1:	e8 ea ee ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0db:	50                   	push   eax
c001a0dc:	6a 03                	push   0x3
c001a0de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0e5:	50                   	push   eax
c001a0e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ec:	e8 cf ee ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f1:	83 c4 20             	add    esp,0x20
c001a0f4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a0f9:	50                   	push   eax
c001a0fa:	6a 04                	push   0x4
c001a0fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a103:	50                   	push   eax
c001a104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a10a:	e8 b1 ee ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a114:	50                   	push   eax
c001a115:	6a 05                	push   0x5
c001a117:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a11e:	50                   	push   eax
c001a11f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a125:	e8 96 ee ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a12a:	83 c4 20             	add    esp,0x20
c001a12d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a132:	0f 94 c0             	sete   al
c001a135:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a13a:	74 09                	je     c001a145 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a13c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a143:	eb 07                	jmp    c001a14c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a145:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a14c:	0f b6 c0             	movzx  eax,al
c001a14f:	50                   	push   eax
c001a150:	6a 07                	push   0x7
c001a152:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a159:	50                   	push   eax
c001a15a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a160:	e8 5b ee ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a165:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a169:	83 c4 10             	add    esp,0x10
c001a16c:	85 f6                	test   esi,esi
c001a16e:	0f 84 ae 00 00 00    	je     c001a222 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a174:	50                   	push   eax
c001a175:	6a 01                	push   0x1
c001a177:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a17e:	50                   	push   eax
c001a17f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a185:	e8 d4 f8 ff ff       	call   c0019a5e <IDE::polling(unsigned char, unsigned int)>
c001a18a:	83 c4 10             	add    esp,0x10
c001a18d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a193:	84 c0                	test   al,al
c001a195:	74 20                	je     c001a1b7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a197:	0f b6 f8             	movzx  edi,al
c001a19a:	0f b6 d2             	movzx  edx,dl
c001a19d:	57                   	push   edi
c001a19e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1a5:	50                   	push   eax
c001a1a6:	52                   	push   edx
c001a1a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ad:	e8 fc f7 ff ff       	call   c00199ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1b2:	e9 87 00 00 00       	jmp    c001a23e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1bc:	74 33                	je     c001a1f1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1be:	31 ed                	xor    ebp,ebp
c001a1c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1c4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1c8:	50                   	push   eax
c001a1c9:	50                   	push   eax
c001a1ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d1:	50                   	push   eax
c001a1d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d8:	e8 d1 ed ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001a1dd:	89 c2                	mov    edx,eax
c001a1df:	89 f8                	mov    eax,edi
c001a1e1:	66 ef                	out    dx,ax
c001a1e3:	45                   	inc    ebp
c001a1e4:	83 c4 10             	add    esp,0x10
c001a1e7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1ed:	75 d1                	jne    c001a1c0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1ef:	eb 23                	jmp    c001a214 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a1f1:	0f b6 d2             	movzx  edx,dl
c001a1f4:	51                   	push   ecx
c001a1f5:	51                   	push   ecx
c001a1f6:	52                   	push   edx
c001a1f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1fd:	e8 ac ed ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001a202:	b9 00 01 00 00       	mov    ecx,0x100
c001a207:	89 c2                	mov    edx,eax
c001a209:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a20d:	fc                   	cld    
c001a20e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a21c:	4e                   	dec    esi
c001a21d:	e9 4a ff ff ff       	jmp    c001a16c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a222:	31 ff                	xor    edi,edi
c001a224:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a229:	74 16                	je     c001a241 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a22b:	50                   	push   eax
c001a22c:	50                   	push   eax
c001a22d:	31 c0                	xor    eax,eax
c001a22f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a234:	0f 94 c0             	sete   al
c001a237:	50                   	push   eax
c001a238:	53                   	push   ebx
c001a239:	e8 fc fb ff ff       	call   c0019e3a <ATA::flush(bool)>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	83 c4 2c             	add    esp,0x2c
c001a244:	89 f8                	mov    eax,edi
c001a246:	5b                   	pop    ebx
c001a247:	5e                   	pop    esi
c001a248:	5f                   	pop    edi
c001a249:	5d                   	pop    ebp
c001a24a:	c3                   	ret    
c001a24b:	90                   	nop

c001a24c <ATA::detectCHS()>:
c001a24c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a250:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a256:	c1 e0 06             	shl    eax,0x6
c001a259:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a25f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a269:	c7 44 24 04 24 fa 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fa24
c001a271:	e9 f9 5f ff ff       	jmp    c001026f <KePanic(char const*)>

c001a276 <ATA::open(int, int, void*)>:
c001a276:	53                   	push   ebx
c001a277:	83 ec 08             	sub    esp,0x8
c001a27a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a27e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a286:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a28c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a292:	c1 e0 06             	shl    eax,0x6
c001a295:	01 d0                	add    eax,edx
c001a297:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a29e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a2a4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a2ab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a2b5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a2bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a2c2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a2c9:	75 0c                	jne    c001a2d7 <ATA::open(int, int, void*)+0x61>
c001a2cb:	83 ec 0c             	sub    esp,0xc
c001a2ce:	53                   	push   ebx
c001a2cf:	e8 78 ff ff ff       	call   c001a24c <ATA::detectCHS()>
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a2dd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a2e3:	c1 e0 06             	shl    eax,0x6
c001a2e6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a2ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a2f7:	d1 e8                	shr    eax,1
c001a2f9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a2ff:	6a 04                	push   0x4
c001a301:	6a 0c                	push   0xc
c001a303:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a30a:	50                   	push   eax
c001a30b:	52                   	push   edx
c001a30c:	e8 af ec ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a311:	90                   	nop
c001a312:	90                   	nop
c001a313:	6a 00                	push   0x0
c001a315:	6a 0c                	push   0xc
c001a317:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a31e:	50                   	push   eax
c001a31f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a325:	e8 96 ec ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a32a:	83 c4 14             	add    esp,0x14
c001a32d:	53                   	push   ebx
c001a32e:	e8 93 1a ff ff       	call   c000bdc6 <PhysicalDisk::startCache()>
c001a333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a336:	e8 33 2b ff ff       	call   c000ce6e <createPartitionsForDisk(PhysicalDisk*)>
c001a33b:	31 c0                	xor    eax,eax
c001a33d:	83 c4 18             	add    esp,0x18
c001a340:	5b                   	pop    ebx
c001a341:	c3                   	ret    

c001a342 <combineCharAndColour(char, unsigned char)>:
c001a342:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a347:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001a34d:	c1 e0 08             	shl    eax,0x8
c001a350:	09 d0                	or     eax,edx
c001a352:	c3                   	ret    

c001a353 <combineColours(unsigned char, unsigned char)>:
c001a353:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a358:	c1 e0 04             	shl    eax,0x4
c001a35b:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001a35f:	c3                   	ret    

c001a360 <ATA::read(unsigned long long, int, void*)>:
c001a360:	55                   	push   ebp
c001a361:	57                   	push   edi
c001a362:	56                   	push   esi
c001a363:	be 04 00 00 00       	mov    esi,0x4
c001a368:	53                   	push   ebx
c001a369:	83 ec 0c             	sub    esp,0xc
c001a36c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a374:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a377:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a37b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a37f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a385:	0f 87 a1 01 00 00    	ja     c001a52c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a38b:	be 06 00 00 00       	mov    esi,0x6
c001a390:	85 c9                	test   ecx,ecx
c001a392:	0f 84 94 01 00 00    	je     c001a52c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a398:	55                   	push   ebp
c001a399:	55                   	push   ebp
c001a39a:	6a 00                	push   0x0
c001a39c:	51                   	push   ecx
c001a39d:	53                   	push   ebx
c001a39e:	52                   	push   edx
c001a39f:	50                   	push   eax
c001a3a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3a4:	e8 27 fb ff ff       	call   c0019ed0 <ATA::access(unsigned long long, int, void*, bool)>
c001a3a9:	83 c4 20             	add    esp,0x20
c001a3ac:	89 c6                	mov    esi,eax
c001a3ae:	85 c0                	test   eax,eax
c001a3b0:	0f 85 71 01 00 00    	jne    c001a527 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001a3b6:	03 1d 54 6b 02 c0    	add    ebx,DWORD PTR ds:0xc0026b54
c001a3bc:	89 da                	mov    edx,ebx
c001a3be:	50                   	push   eax
c001a3bf:	bd 10 27 00 00       	mov    ebp,0x2710
c001a3c4:	50                   	push   eax
c001a3c5:	89 1d 54 6b 02 c0    	mov    DWORD PTR ds:0xc0026b54,ebx
c001a3cb:	6a 0f                	push   0xf
c001a3cd:	6a 00                	push   0x0
c001a3cf:	e8 7f ff ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001a3d4:	59                   	pop    ecx
c001a3d5:	b9 0a 00 00 00       	mov    ecx,0xa
c001a3da:	5b                   	pop    ebx
c001a3db:	0f b6 d8             	movzx  ebx,al
c001a3de:	89 d0                	mov    eax,edx
c001a3e0:	53                   	push   ebx
c001a3e1:	99                   	cdq    
c001a3e2:	f7 fd                	idiv   ebp
c001a3e4:	99                   	cdq    
c001a3e5:	f7 f9                	idiv   ecx
c001a3e7:	83 c2 30             	add    edx,0x30
c001a3ea:	0f b6 d2             	movzx  edx,dl
c001a3ed:	52                   	push   edx
c001a3ee:	e8 4f ff ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a3f3:	5f                   	pop    edi
c001a3f4:	bf e8 03 00 00       	mov    edi,0x3e8
c001a3f9:	5a                   	pop    edx
c001a3fa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a400:	53                   	push   ebx
c001a401:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a406:	99                   	cdq    
c001a407:	f7 ff                	idiv   edi
c001a409:	99                   	cdq    
c001a40a:	f7 f9                	idiv   ecx
c001a40c:	8d 42 30             	lea    eax,[edx+0x30]
c001a40f:	0f b6 c0             	movzx  eax,al
c001a412:	50                   	push   eax
c001a413:	e8 2a ff ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a418:	5f                   	pop    edi
c001a419:	bf 64 00 00 00       	mov    edi,0x64
c001a41e:	5a                   	pop    edx
c001a41f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a425:	53                   	push   ebx
c001a426:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a42b:	99                   	cdq    
c001a42c:	f7 ff                	idiv   edi
c001a42e:	99                   	cdq    
c001a42f:	f7 f9                	idiv   ecx
c001a431:	8d 42 30             	lea    eax,[edx+0x30]
c001a434:	0f b6 c0             	movzx  eax,al
c001a437:	50                   	push   eax
c001a438:	e8 05 ff ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a43d:	5a                   	pop    edx
c001a43e:	5a                   	pop    edx
c001a43f:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a445:	53                   	push   ebx
c001a446:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a44b:	99                   	cdq    
c001a44c:	f7 f9                	idiv   ecx
c001a44e:	99                   	cdq    
c001a44f:	f7 f9                	idiv   ecx
c001a451:	8d 42 30             	lea    eax,[edx+0x30]
c001a454:	0f b6 c0             	movzx  eax,al
c001a457:	50                   	push   eax
c001a458:	e8 e5 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a45d:	5a                   	pop    edx
c001a45e:	5a                   	pop    edx
c001a45f:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a465:	53                   	push   ebx
c001a466:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a46b:	99                   	cdq    
c001a46c:	f7 f9                	idiv   ecx
c001a46e:	83 c2 30             	add    edx,0x30
c001a471:	0f b6 d2             	movzx  edx,dl
c001a474:	52                   	push   edx
c001a475:	e8 c8 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a47a:	5a                   	pop    edx
c001a47b:	5a                   	pop    edx
c001a47c:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a482:	53                   	push   ebx
c001a483:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a488:	99                   	cdq    
c001a489:	f7 fd                	idiv   ebp
c001a48b:	99                   	cdq    
c001a48c:	f7 f9                	idiv   ecx
c001a48e:	8d 42 30             	lea    eax,[edx+0x30]
c001a491:	0f b6 c0             	movzx  eax,al
c001a494:	50                   	push   eax
c001a495:	e8 a8 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a49a:	5d                   	pop    ebp
c001a49b:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a4a0:	5a                   	pop    edx
c001a4a1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a4a7:	53                   	push   ebx
c001a4a8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a4ad:	99                   	cdq    
c001a4ae:	f7 fd                	idiv   ebp
c001a4b0:	99                   	cdq    
c001a4b1:	f7 f9                	idiv   ecx
c001a4b3:	8d 42 30             	lea    eax,[edx+0x30]
c001a4b6:	0f b6 c0             	movzx  eax,al
c001a4b9:	50                   	push   eax
c001a4ba:	e8 83 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a4bf:	5d                   	pop    ebp
c001a4c0:	5a                   	pop    edx
c001a4c1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a4c7:	53                   	push   ebx
c001a4c8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a4cd:	99                   	cdq    
c001a4ce:	f7 ff                	idiv   edi
c001a4d0:	99                   	cdq    
c001a4d1:	f7 f9                	idiv   ecx
c001a4d3:	8d 42 30             	lea    eax,[edx+0x30]
c001a4d6:	0f b6 c0             	movzx  eax,al
c001a4d9:	50                   	push   eax
c001a4da:	e8 63 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a4df:	5f                   	pop    edi
c001a4e0:	5d                   	pop    ebp
c001a4e1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a4e7:	53                   	push   ebx
c001a4e8:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a4ed:	99                   	cdq    
c001a4ee:	f7 f9                	idiv   ecx
c001a4f0:	99                   	cdq    
c001a4f1:	f7 f9                	idiv   ecx
c001a4f3:	8d 42 30             	lea    eax,[edx+0x30]
c001a4f6:	0f b6 c0             	movzx  eax,al
c001a4f9:	50                   	push   eax
c001a4fa:	e8 43 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a4ff:	5a                   	pop    edx
c001a500:	5f                   	pop    edi
c001a501:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a507:	53                   	push   ebx
c001a508:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a50d:	99                   	cdq    
c001a50e:	f7 f9                	idiv   ecx
c001a510:	83 c2 30             	add    edx,0x30
c001a513:	0f b6 d2             	movzx  edx,dl
c001a516:	52                   	push   edx
c001a517:	e8 26 fe ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a51c:	83 c4 10             	add    esp,0x10
c001a51f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a525:	eb 05                	jmp    c001a52c <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a527:	be 01 00 00 00       	mov    esi,0x1
c001a52c:	83 c4 0c             	add    esp,0xc
c001a52f:	89 f0                	mov    eax,esi
c001a531:	5b                   	pop    ebx
c001a532:	5e                   	pop    esi
c001a533:	5f                   	pop    edi
c001a534:	5d                   	pop    ebp
c001a535:	c3                   	ret    

c001a536 <ATA::write(unsigned long long, int, void*)>:
c001a536:	55                   	push   ebp
c001a537:	57                   	push   edi
c001a538:	56                   	push   esi
c001a539:	be 04 00 00 00       	mov    esi,0x4
c001a53e:	53                   	push   ebx
c001a53f:	83 ec 0c             	sub    esp,0xc
c001a542:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a546:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a54a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a551:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a555:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a55b:	0f 87 9c 01 00 00    	ja     c001a6fd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a561:	be 06 00 00 00       	mov    esi,0x6
c001a566:	85 c9                	test   ecx,ecx
c001a568:	0f 84 8f 01 00 00    	je     c001a6fd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a56e:	55                   	push   ebp
c001a56f:	55                   	push   ebp
c001a570:	6a 01                	push   0x1
c001a572:	51                   	push   ecx
c001a573:	53                   	push   ebx
c001a574:	52                   	push   edx
c001a575:	50                   	push   eax
c001a576:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a57a:	e8 51 f9 ff ff       	call   c0019ed0 <ATA::access(unsigned long long, int, void*, bool)>
c001a57f:	83 c4 20             	add    esp,0x20
c001a582:	89 c6                	mov    esi,eax
c001a584:	85 c0                	test   eax,eax
c001a586:	0f 85 6c 01 00 00    	jne    c001a6f8 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001a58c:	01 1d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebx
c001a592:	bd 10 27 00 00       	mov    ebp,0x2710
c001a597:	50                   	push   eax
c001a598:	50                   	push   eax
c001a599:	6a 0f                	push   0xf
c001a59b:	6a 00                	push   0x0
c001a59d:	e8 b1 fd ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001a5a2:	5a                   	pop    edx
c001a5a3:	0f b6 d8             	movzx  ebx,al
c001a5a6:	59                   	pop    ecx
c001a5a7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a5ac:	53                   	push   ebx
c001a5ad:	b9 0a 00 00 00       	mov    ecx,0xa
c001a5b2:	99                   	cdq    
c001a5b3:	f7 fd                	idiv   ebp
c001a5b5:	99                   	cdq    
c001a5b6:	f7 f9                	idiv   ecx
c001a5b8:	8d 42 30             	lea    eax,[edx+0x30]
c001a5bb:	0f b6 c0             	movzx  eax,al
c001a5be:	50                   	push   eax
c001a5bf:	e8 7e fd ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a5c4:	5f                   	pop    edi
c001a5c5:	bf e8 03 00 00       	mov    edi,0x3e8
c001a5ca:	5a                   	pop    edx
c001a5cb:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a5d1:	53                   	push   ebx
c001a5d2:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a5d7:	99                   	cdq    
c001a5d8:	f7 ff                	idiv   edi
c001a5da:	99                   	cdq    
c001a5db:	f7 f9                	idiv   ecx
c001a5dd:	8d 42 30             	lea    eax,[edx+0x30]
c001a5e0:	0f b6 c0             	movzx  eax,al
c001a5e3:	50                   	push   eax
c001a5e4:	e8 59 fd ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a5e9:	5f                   	pop    edi
c001a5ea:	bf 64 00 00 00       	mov    edi,0x64
c001a5ef:	5a                   	pop    edx
c001a5f0:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a5f6:	53                   	push   ebx
c001a5f7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a5fc:	99                   	cdq    
c001a5fd:	f7 ff                	idiv   edi
c001a5ff:	99                   	cdq    
c001a600:	f7 f9                	idiv   ecx
c001a602:	8d 42 30             	lea    eax,[edx+0x30]
c001a605:	0f b6 c0             	movzx  eax,al
c001a608:	50                   	push   eax
c001a609:	e8 34 fd ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a60e:	5a                   	pop    edx
c001a60f:	5a                   	pop    edx
c001a610:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a616:	53                   	push   ebx
c001a617:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a61c:	99                   	cdq    
c001a61d:	f7 f9                	idiv   ecx
c001a61f:	99                   	cdq    
c001a620:	f7 f9                	idiv   ecx
c001a622:	8d 42 30             	lea    eax,[edx+0x30]
c001a625:	0f b6 c0             	movzx  eax,al
c001a628:	50                   	push   eax
c001a629:	e8 14 fd ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a62e:	5a                   	pop    edx
c001a62f:	5a                   	pop    edx
c001a630:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a636:	53                   	push   ebx
c001a637:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a63c:	99                   	cdq    
c001a63d:	f7 f9                	idiv   ecx
c001a63f:	8d 42 30             	lea    eax,[edx+0x30]
c001a642:	0f b6 c0             	movzx  eax,al
c001a645:	50                   	push   eax
c001a646:	e8 f7 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a64b:	5a                   	pop    edx
c001a64c:	5a                   	pop    edx
c001a64d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a653:	53                   	push   ebx
c001a654:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a659:	99                   	cdq    
c001a65a:	f7 fd                	idiv   ebp
c001a65c:	99                   	cdq    
c001a65d:	f7 f9                	idiv   ecx
c001a65f:	8d 42 30             	lea    eax,[edx+0x30]
c001a662:	0f b6 c0             	movzx  eax,al
c001a665:	50                   	push   eax
c001a666:	e8 d7 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a66b:	5d                   	pop    ebp
c001a66c:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a671:	5a                   	pop    edx
c001a672:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a678:	53                   	push   ebx
c001a679:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a67e:	99                   	cdq    
c001a67f:	f7 fd                	idiv   ebp
c001a681:	99                   	cdq    
c001a682:	f7 f9                	idiv   ecx
c001a684:	8d 42 30             	lea    eax,[edx+0x30]
c001a687:	0f b6 c0             	movzx  eax,al
c001a68a:	50                   	push   eax
c001a68b:	e8 b2 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a690:	5d                   	pop    ebp
c001a691:	5a                   	pop    edx
c001a692:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a698:	53                   	push   ebx
c001a699:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a69e:	99                   	cdq    
c001a69f:	f7 ff                	idiv   edi
c001a6a1:	99                   	cdq    
c001a6a2:	f7 f9                	idiv   ecx
c001a6a4:	8d 42 30             	lea    eax,[edx+0x30]
c001a6a7:	0f b6 c0             	movzx  eax,al
c001a6aa:	50                   	push   eax
c001a6ab:	e8 92 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a6b0:	5f                   	pop    edi
c001a6b1:	5d                   	pop    ebp
c001a6b2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a6b8:	53                   	push   ebx
c001a6b9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a6be:	99                   	cdq    
c001a6bf:	f7 f9                	idiv   ecx
c001a6c1:	99                   	cdq    
c001a6c2:	f7 f9                	idiv   ecx
c001a6c4:	8d 42 30             	lea    eax,[edx+0x30]
c001a6c7:	0f b6 c0             	movzx  eax,al
c001a6ca:	50                   	push   eax
c001a6cb:	e8 72 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a6d0:	5a                   	pop    edx
c001a6d1:	5f                   	pop    edi
c001a6d2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a6d8:	53                   	push   ebx
c001a6d9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a6de:	99                   	cdq    
c001a6df:	f7 f9                	idiv   ecx
c001a6e1:	83 c2 30             	add    edx,0x30
c001a6e4:	0f b6 d2             	movzx  edx,dl
c001a6e7:	52                   	push   edx
c001a6e8:	e8 55 fc ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001a6ed:	83 c4 10             	add    esp,0x10
c001a6f0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a6f6:	eb 05                	jmp    c001a6fd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a6f8:	be 01 00 00 00       	mov    esi,0x1
c001a6fd:	83 c4 0c             	add    esp,0xc
c001a700:	89 f0                	mov    eax,esi
c001a702:	5b                   	pop    ebx
c001a703:	5e                   	pop    esi
c001a704:	5f                   	pop    edi
c001a705:	5d                   	pop    ebp
c001a706:	c3                   	ret    
c001a707:	90                   	nop

c001a708 <ATAPI::write(unsigned long long, int, void*)>:
c001a708:	b8 03 00 00 00       	mov    eax,0x3
c001a70d:	c3                   	ret    

c001a70e <ATAPI::close(int, int, void*)>:
c001a70e:	83 ec 0c             	sub    esp,0xc
c001a711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a715:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a71b:	85 c0                	test   eax,eax
c001a71d:	74 0c                	je     c001a72b <ATAPI::close(int, int, void*)+0x1d>
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	8b 10                	mov    edx,DWORD PTR [eax]
c001a724:	50                   	push   eax
c001a725:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	31 c0                	xor    eax,eax
c001a72d:	83 c4 0c             	add    esp,0xc
c001a730:	c3                   	ret    
c001a731:	90                   	nop

c001a732 <ATAPI::ATAPI()>:
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a739:	83 ec 04             	sub    esp,0x4
c001a73c:	68 00 08 00 00       	push   0x800
c001a741:	68 6d fb 01 c0       	push   0xc001fb6d
c001a746:	50                   	push   eax
c001a747:	e8 12 16 ff ff       	call   c000bd5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	ba 88 fa 01 c0       	mov    edx,0xc001fa88
c001a754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a758:	89 10                	mov    DWORD PTR [eax],edx
c001a75a:	90                   	nop
c001a75b:	83 c4 0c             	add    esp,0xc
c001a75e:	c3                   	ret    
c001a75f:	90                   	nop

c001a760 <ATAPI::readyForCommand()>:
c001a760:	56                   	push   esi
c001a761:	53                   	push   ebx
c001a762:	53                   	push   ebx
c001a763:	31 db                	xor    ebx,ebx
c001a765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a769:	51                   	push   ecx
c001a76a:	6a 0c                	push   0xc
c001a76c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a773:	50                   	push   eax
c001a774:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a77a:	e8 01 e9 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	a8 88                	test   al,0x88
c001a784:	74 25                	je     c001a7ab <ATAPI::readyForCommand()+0x4b>
c001a786:	43                   	inc    ebx
c001a787:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a78d:	7e da                	jle    c001a769 <ATAPI::readyForCommand()+0x9>
c001a78f:	83 ec 0c             	sub    esp,0xc
c001a792:	68 5e 01 00 00       	push   0x15e
c001a797:	e8 f8 92 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a7a5:	75 c2                	jne    c001a769 <ATAPI::readyForCommand()+0x9>
c001a7a7:	31 c0                	xor    eax,eax
c001a7a9:	eb 02                	jmp    c001a7ad <ATAPI::readyForCommand()+0x4d>
c001a7ab:	b0 01                	mov    al,0x1
c001a7ad:	5a                   	pop    edx
c001a7ae:	5b                   	pop    ebx
c001a7af:	5e                   	pop    esi
c001a7b0:	c3                   	ret    
c001a7b1:	90                   	nop

c001a7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a7b2:	55                   	push   ebp
c001a7b3:	57                   	push   edi
c001a7b4:	56                   	push   esi
c001a7b5:	53                   	push   ebx
c001a7b6:	83 ec 20             	sub    esp,0x20
c001a7b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7bd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a7c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a7c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a7c9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a7cd:	6a 01                	push   0x1
c001a7cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7d6:	50                   	push   eax
c001a7d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7dd:	e8 ec e9 ff ff       	call   c00191ce <IDE::enableIRQs(unsigned char, bool)>
c001a7e2:	5e                   	pop    esi
c001a7e3:	58                   	pop    eax
c001a7e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7eb:	50                   	push   eax
c001a7ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7f2:	e8 a3 e7 ff ff       	call   c0018f9a <IDE::prepareInterrupt(unsigned char)>
c001a7f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7fa:	e8 61 ff ff ff       	call   c001a760 <ATAPI::readyForCommand()>
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	84 c0                	test   al,al
c001a804:	75 0a                	jne    c001a810 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a806:	bb 01 00 00 00       	mov    ebx,0x1
c001a80b:	e9 57 02 00 00       	jmp    c001aa67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a810:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a816:	c1 e0 04             	shl    eax,0x4
c001a819:	0f b6 c0             	movzx  eax,al
c001a81c:	50                   	push   eax
c001a81d:	6a 06                	push   0x6
c001a81f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a826:	50                   	push   eax
c001a827:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a82d:	e8 8e e7 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a832:	6a 00                	push   0x0
c001a834:	6a 01                	push   0x1
c001a836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a83d:	50                   	push   eax
c001a83e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a844:	e8 77 e7 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a849:	83 c4 20             	add    esp,0x20
c001a84c:	0f b6 c3             	movzx  eax,bl
c001a84f:	0f b6 df             	movzx  ebx,bh
c001a852:	50                   	push   eax
c001a853:	6a 04                	push   0x4
c001a855:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a85c:	50                   	push   eax
c001a85d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a863:	e8 58 e7 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a868:	53                   	push   ebx
c001a869:	6a 05                	push   0x5
c001a86b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a872:	50                   	push   eax
c001a873:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a879:	e8 42 e7 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a87e:	83 c4 20             	add    esp,0x20
c001a881:	68 a0 00 00 00       	push   0xa0
c001a886:	6a 07                	push   0x7
c001a888:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a88f:	50                   	push   eax
c001a890:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a896:	e8 25 e7 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a89b:	83 c4 0c             	add    esp,0xc
c001a89e:	6a 01                	push   0x1
c001a8a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8a7:	50                   	push   eax
c001a8a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8ae:	e8 ab f1 ff ff       	call   c0019a5e <IDE::polling(unsigned char, unsigned int)>
c001a8b3:	83 c4 10             	add    esp,0x10
c001a8b6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a8bc:	84 c0                	test   al,al
c001a8be:	74 23                	je     c001a8e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a8c0:	0f b6 d8             	movzx  ebx,al
c001a8c3:	0f b6 d2             	movzx  edx,dl
c001a8c6:	53                   	push   ebx
c001a8c7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a8ce:	50                   	push   eax
c001a8cf:	52                   	push   edx
c001a8d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8d6:	e8 d3 f0 ff ff       	call   c00199ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a8db:	83 c4 10             	add    esp,0x10
c001a8de:	e9 84 01 00 00       	jmp    c001aa67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8e3:	0f b6 d2             	movzx  edx,dl
c001a8e6:	53                   	push   ebx
c001a8e7:	53                   	push   ebx
c001a8e8:	52                   	push   edx
c001a8e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8ef:	e8 ba e6 ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001a8f4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a8f8:	b9 06 00 00 00       	mov    ecx,0x6
c001a8fd:	89 c2                	mov    edx,eax
c001a8ff:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a902:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a90f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a916:	85 db                	test   ebx,ebx
c001a918:	0f 84 ec 00 00 00    	je     c001aa0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a91e:	51                   	push   ecx
c001a91f:	51                   	push   ecx
c001a920:	52                   	push   edx
c001a921:	50                   	push   eax
c001a922:	e8 07 e8 ff ff       	call   c001912e <IDE::waitInterrupt(unsigned char)>
c001a927:	83 c4 10             	add    esp,0x10
c001a92a:	84 c0                	test   al,al
c001a92c:	0f 84 d4 fe ff ff    	je     c001a806 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a932:	56                   	push   esi
c001a933:	56                   	push   esi
c001a934:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a93b:	50                   	push   eax
c001a93c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a942:	e8 53 e6 ff ff       	call   c0018f9a <IDE::prepareInterrupt(unsigned char)>
c001a947:	83 c4 0c             	add    esp,0xc
c001a94a:	6a 04                	push   0x4
c001a94c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a953:	50                   	push   eax
c001a954:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a95a:	e8 21 e7 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001a95f:	83 c4 0c             	add    esp,0xc
c001a962:	89 c6                	mov    esi,eax
c001a964:	6a 05                	push   0x5
c001a966:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a96d:	50                   	push   eax
c001a96e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a974:	e8 07 e7 ff ff       	call   c0019080 <IDE::read(unsigned char, unsigned char)>
c001a979:	89 f1                	mov    ecx,esi
c001a97b:	0f b6 c0             	movzx  eax,al
c001a97e:	0f b6 f1             	movzx  esi,cl
c001a981:	c1 e0 08             	shl    eax,0x8
c001a984:	09 c6                	or     esi,eax
c001a986:	d1 fe                	sar    esi,1
c001a988:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a98c:	83 c4 10             	add    esp,0x10
c001a98f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a994:	74 41                	je     c001a9d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a996:	31 c9                	xor    ecx,ecx
c001a998:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a99e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9a5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a9a9:	75 0a                	jne    c001a9b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a9ab:	01 c9                	add    ecx,ecx
c001a9ad:	01 cd                	add    ebp,ecx
c001a9af:	4b                   	dec    ebx
c001a9b0:	e9 54 ff ff ff       	jmp    c001a909 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a9b5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a9ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a9be:	51                   	push   ecx
c001a9bf:	51                   	push   ecx
c001a9c0:	52                   	push   edx
c001a9c1:	50                   	push   eax
c001a9c2:	e8 e7 e5 ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001a9c7:	89 c2                	mov    edx,eax
c001a9c9:	89 f0                	mov    eax,esi
c001a9cb:	66 ef                	out    dx,ax
c001a9cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	41                   	inc    ecx
c001a9d5:	eb c1                	jmp    c001a998 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a9d7:	31 f6                	xor    esi,esi
c001a9d9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a9df:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9e6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a9ea:	75 06                	jne    c001a9f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a9ec:	01 f6                	add    esi,esi
c001a9ee:	01 f5                	add    ebp,esi
c001a9f0:	eb bd                	jmp    c001a9af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a9f2:	51                   	push   ecx
c001a9f3:	51                   	push   ecx
c001a9f4:	52                   	push   edx
c001a9f5:	50                   	push   eax
c001a9f6:	e8 b3 e5 ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001a9fb:	89 c2                	mov    edx,eax
c001a9fd:	66 ed                	in     ax,dx
c001a9ff:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aa04:	83 c4 10             	add    esp,0x10
c001aa07:	46                   	inc    esi
c001aa08:	eb cf                	jmp    c001a9d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aa0a:	51                   	push   ecx
c001aa0b:	51                   	push   ecx
c001aa0c:	52                   	push   edx
c001aa0d:	50                   	push   eax
c001aa0e:	e8 1b e7 ff ff       	call   c001912e <IDE::waitInterrupt(unsigned char)>
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	84 c0                	test   al,al
c001aa18:	0f 84 e8 fd ff ff    	je     c001a806 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aa1e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aa23:	52                   	push   edx
c001aa24:	52                   	push   edx
c001aa25:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa2c:	50                   	push   eax
c001aa2d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa33:	e8 62 e5 ff ff       	call   c0018f9a <IDE::prepareInterrupt(unsigned char)>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	50                   	push   eax
c001aa3c:	50                   	push   eax
c001aa3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa44:	50                   	push   eax
c001aa45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa4b:	e8 5e e5 ff ff       	call   c0018fae <IDE::getBase(unsigned char)>
c001aa50:	8d 50 07             	lea    edx,[eax+0x7]
c001aa53:	ec                   	in     al,dx
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	a8 88                	test   al,0x88
c001aa59:	74 0a                	je     c001aa65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001aa5b:	4b                   	dec    ebx
c001aa5c:	75 dd                	jne    c001aa3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001aa5e:	bb 02 00 00 00       	mov    ebx,0x2
c001aa63:	eb 02                	jmp    c001aa67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001aa65:	31 db                	xor    ebx,ebx
c001aa67:	83 c4 1c             	add    esp,0x1c
c001aa6a:	89 d8                	mov    eax,ebx
c001aa6c:	5b                   	pop    ebx
c001aa6d:	5e                   	pop    esi
c001aa6e:	5f                   	pop    edi
c001aa6f:	5d                   	pop    ebp
c001aa70:	c3                   	ret    
c001aa71:	90                   	nop

c001aa72 <ATAPI::diskRemoved()>:
c001aa72:	53                   	push   ebx
c001aa73:	83 ec 14             	sub    esp,0x14
c001aa76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa7a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa81:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001aa87:	e8 62 21 ff ff       	call   c000cbee <LogicalDisk::unmount()>
c001aa8c:	58                   	pop    eax
c001aa8d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001aa93:	e8 a4 2a ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c001aa98:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001aa9e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aaa2:	83 c4 18             	add    esp,0x18
c001aaa5:	5b                   	pop    ebx
c001aaa6:	e9 81 2a ff ff       	jmp    c000d52c <VCache::invalidateReadBuffer()>
c001aaab:	90                   	nop

c001aaac <ATAPI::eject()>:
c001aaac:	57                   	push   edi
c001aaad:	b9 03 00 00 00       	mov    ecx,0x3
c001aab2:	53                   	push   ebx
c001aab3:	83 ec 14             	sub    esp,0x14
c001aab6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aaba:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aabe:	fc                   	cld    
c001aabf:	31 c0                	xor    eax,eax
c001aac1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aac3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001aac8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001aacd:	50                   	push   eax
c001aace:	50                   	push   eax
c001aacf:	6a 00                	push   0x0
c001aad1:	6a 00                	push   0x0
c001aad3:	6a 00                	push   0x0
c001aad5:	6a 02                	push   0x2
c001aad7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aadb:	50                   	push   eax
c001aadc:	53                   	push   ebx
c001aadd:	e8 d0 fc ff ff       	call   c001a7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aae2:	83 c4 14             	add    esp,0x14
c001aae5:	53                   	push   ebx
c001aae6:	e8 87 ff ff ff       	call   c001aa72 <ATAPI::diskRemoved()>
c001aaeb:	83 c4 24             	add    esp,0x24
c001aaee:	31 c0                	xor    eax,eax
c001aaf0:	5b                   	pop    ebx
c001aaf1:	5f                   	pop    edi
c001aaf2:	c3                   	ret    
c001aaf3:	90                   	nop

c001aaf4 <ATAPI::diskInserted()>:
c001aaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf8:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001aaff:	c3                   	ret    

c001ab00 <ATAPI::detectMedia()>:
c001ab00:	56                   	push   esi
c001ab01:	53                   	push   ebx
c001ab02:	83 ec 28             	sub    esp,0x28
c001ab05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ab09:	6a 0c                	push   0xc
c001ab0b:	6a 00                	push   0x0
c001ab0d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ab11:	56                   	push   esi
c001ab12:	e8 b9 59 fe ff       	call   c00004d0 <memset>
c001ab17:	58                   	pop    eax
c001ab18:	5a                   	pop    edx
c001ab19:	6a 00                	push   0x0
c001ab1b:	6a 00                	push   0x0
c001ab1d:	6a 00                	push   0x0
c001ab1f:	6a 00                	push   0x0
c001ab21:	56                   	push   esi
c001ab22:	53                   	push   ebx
c001ab23:	e8 8a fc ff ff       	call   c001a7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab28:	83 c4 1c             	add    esp,0x1c
c001ab2b:	6a 0c                	push   0xc
c001ab2d:	6a 00                	push   0x0
c001ab2f:	56                   	push   esi
c001ab30:	e8 9b 59 fe ff       	call   c00004d0 <memset>
c001ab35:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ab3a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ab3f:	59                   	pop    ecx
c001ab40:	58                   	pop    eax
c001ab41:	6a 01                	push   0x1
c001ab43:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ab47:	50                   	push   eax
c001ab48:	6a 00                	push   0x0
c001ab4a:	6a 12                	push   0x12
c001ab4c:	56                   	push   esi
c001ab4d:	53                   	push   ebx
c001ab4e:	e8 5f fc ff ff       	call   c001a7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab53:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ab57:	83 c4 20             	add    esp,0x20
c001ab5a:	83 e0 7f             	and    eax,0x7f
c001ab5d:	3c 70                	cmp    al,0x70
c001ab5f:	74 15                	je     c001ab76 <ATAPI::detectMedia()+0x76>
c001ab61:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab68:	75 0c                	jne    c001ab76 <ATAPI::detectMedia()+0x76>
c001ab6a:	83 ec 0c             	sub    esp,0xc
c001ab6d:	53                   	push   ebx
c001ab6e:	e8 81 ff ff ff       	call   c001aaf4 <ATAPI::diskInserted()>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ab7a:	83 e0 0f             	and    eax,0xf
c001ab7d:	3c 02                	cmp    al,0x2
c001ab7f:	75 1b                	jne    c001ab9c <ATAPI::detectMedia()+0x9c>
c001ab81:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ab86:	75 2d                	jne    c001abb5 <ATAPI::detectMedia()+0xb5>
c001ab88:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab8f:	74 24                	je     c001abb5 <ATAPI::detectMedia()+0xb5>
c001ab91:	83 ec 0c             	sub    esp,0xc
c001ab94:	53                   	push   ebx
c001ab95:	e8 d8 fe ff ff       	call   c001aa72 <ATAPI::diskRemoved()>
c001ab9a:	eb 16                	jmp    c001abb2 <ATAPI::detectMedia()+0xb2>
c001ab9c:	84 c0                	test   al,al
c001ab9e:	75 15                	jne    c001abb5 <ATAPI::detectMedia()+0xb5>
c001aba0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aba7:	75 0c                	jne    c001abb5 <ATAPI::detectMedia()+0xb5>
c001aba9:	83 ec 0c             	sub    esp,0xc
c001abac:	53                   	push   ebx
c001abad:	e8 42 ff ff ff       	call   c001aaf4 <ATAPI::diskInserted()>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	83 c4 24             	add    esp,0x24
c001abb8:	5b                   	pop    ebx
c001abb9:	5e                   	pop    esi
c001abba:	c3                   	ret    
c001abbb:	90                   	nop

c001abbc <ATAPI::open(int, int, void*)>:
c001abbc:	56                   	push   esi
c001abbd:	53                   	push   ebx
c001abbe:	50                   	push   eax
c001abbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001abcb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abd1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001abd7:	c1 e0 06             	shl    eax,0x6
c001abda:	01 d0                	add    eax,edx
c001abdc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001abe3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001abe9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001abf0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001abfa:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ac00:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ac07:	6a 04                	push   0x4
c001ac09:	6a 0c                	push   0xc
c001ac0b:	51                   	push   ecx
c001ac0c:	52                   	push   edx
c001ac0d:	e8 ae e3 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac12:	90                   	nop
c001ac13:	90                   	nop
c001ac14:	6a 00                	push   0x0
c001ac16:	6a 0c                	push   0xc
c001ac18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ac1f:	50                   	push   eax
c001ac20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ac26:	e8 95 e3 ff ff       	call   c0018fc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac2b:	83 c4 14             	add    esp,0x14
c001ac2e:	68 74 01 00 00       	push   0x174
c001ac33:	e8 81 cb fe ff       	call   c00077b9 <malloc>
c001ac38:	83 c4 0c             	add    esp,0xc
c001ac3b:	89 c6                	mov    esi,eax
c001ac3d:	6a 00                	push   0x0
c001ac3f:	68 ff ff ff 7f       	push   0x7fffffff
c001ac44:	6a 00                	push   0x0
c001ac46:	6a 00                	push   0x0
c001ac48:	53                   	push   ebx
c001ac49:	68 0a fc 01 c0       	push   0xc001fc0a
c001ac4e:	50                   	push   eax
c001ac4f:	e8 e6 1d ff ff       	call   c000ca3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ac54:	83 c4 14             	add    esp,0x14
c001ac57:	56                   	push   esi
c001ac58:	e8 93 1e ff ff       	call   c000caf0 <LogicalDisk::assignDriveLetter()>
c001ac5d:	5a                   	pop    edx
c001ac5e:	0f be c0             	movsx  eax,al
c001ac61:	59                   	pop    ecx
c001ac62:	50                   	push   eax
c001ac63:	68 70 fa 01 c0       	push   0xc001fa70
c001ac68:	e8 e5 f8 fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001ac6d:	58                   	pop    eax
c001ac6e:	5a                   	pop    edx
c001ac6f:	56                   	push   esi
c001ac70:	53                   	push   ebx
c001ac71:	e8 1a 0d ff ff       	call   c000b990 <Device::addChild(Device*)>
c001ac76:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ac7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac7f:	e8 42 11 ff ff       	call   c000bdc6 <PhysicalDisk::startCache()>
c001ac84:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ac8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac8e:	e8 6d fe ff ff       	call   c001ab00 <ATAPI::detectMedia()>
c001ac93:	83 c4 14             	add    esp,0x14
c001ac96:	31 c0                	xor    eax,eax
c001ac98:	5b                   	pop    ebx
c001ac99:	5e                   	pop    esi
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <ATAPI::read(unsigned long long, int, void*)>:
c001ac9c:	55                   	push   ebp
c001ac9d:	57                   	push   edi
c001ac9e:	56                   	push   esi
c001ac9f:	53                   	push   ebx
c001aca0:	83 ec 1c             	sub    esp,0x1c
c001aca3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aca7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001acab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001acaf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acb6:	74 3c                	je     c001acf4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001acb8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001acbc:	b9 03 00 00 00       	mov    ecx,0x3
c001acc1:	fc                   	cld    
c001acc2:	31 c0                	xor    eax,eax
c001acc4:	0f ce                	bswap  esi
c001acc6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001acc8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001accd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001acd1:	89 e8                	mov    eax,ebp
c001acd3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001acd7:	50                   	push   eax
c001acd8:	50                   	push   eax
c001acd9:	55                   	push   ebp
c001acda:	c1 e5 0b             	shl    ebp,0xb
c001acdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ace1:	6a 00                	push   0x0
c001ace3:	55                   	push   ebp
c001ace4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ace8:	50                   	push   eax
c001ace9:	53                   	push   ebx
c001acea:	e8 c3 fa ff ff       	call   c001a7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001acef:	83 c4 20             	add    esp,0x20
c001acf2:	eb 1a                	jmp    c001ad0e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	53                   	push   ebx
c001acf8:	e8 03 fe ff ff       	call   c001ab00 <ATAPI::detectMedia()>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad07:	75 af                	jne    c001acb8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ad09:	b8 02 00 00 00       	mov    eax,0x2
c001ad0e:	83 c4 1c             	add    esp,0x1c
c001ad11:	5b                   	pop    ebx
c001ad12:	5e                   	pop    esi
c001ad13:	5f                   	pop    edi
c001ad14:	5d                   	pop    ebp
c001ad15:	c3                   	ret    

c001ad16 <SATA::close(int, int, void*)>:
c001ad16:	83 ec 0c             	sub    esp,0xc
c001ad19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ad23:	85 c0                	test   eax,eax
c001ad25:	74 0c                	je     c001ad33 <SATA::close(int, int, void*)+0x1d>
c001ad27:	83 ec 0c             	sub    esp,0xc
c001ad2a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad2c:	50                   	push   eax
c001ad2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	31 c0                	xor    eax,eax
c001ad35:	83 c4 0c             	add    esp,0xc
c001ad38:	c3                   	ret    
c001ad39:	90                   	nop

c001ad3a <SATA::powerSaving(PowerSavingLevel)>:
c001ad3a:	c3                   	ret    
c001ad3b:	90                   	nop

c001ad3c <SATA::open(int, int, void*)>:
c001ad3c:	56                   	push   esi
c001ad3d:	53                   	push   ebx
c001ad3e:	50                   	push   eax
c001ad3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad47:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ad51:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad57:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad65:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad75:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ad7c:	e8 14 cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad81:	89 c6                	mov    esi,eax
c001ad83:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ad89:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad8f:	e8 01 cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad94:	39 c6                	cmp    esi,eax
c001ad96:	74 10                	je     c001ada8 <SATA::open(int, int, void*)+0x6c>
c001ad98:	83 ec 0c             	sub    esp,0xc
c001ad9b:	68 b8 fa 01 c0       	push   0xc001fab8
c001ada0:	e8 ca 54 ff ff       	call   c001026f <KePanic(char const*)>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	6a 02                	push   0x2
c001adad:	e8 e3 e4 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001adb2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001adb8:	6a 03                	push   0x3
c001adba:	50                   	push   eax
c001adbb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001adc1:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001adc7:	e8 8c eb fe ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001adcc:	83 c4 14             	add    esp,0x14
c001adcf:	53                   	push   ebx
c001add0:	e8 f1 0f ff ff       	call   c000bdc6 <PhysicalDisk::startCache()>
c001add5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001add8:	e8 91 20 ff ff       	call   c000ce6e <createPartitionsForDisk(PhysicalDisk*)>
c001addd:	83 c4 14             	add    esp,0x14
c001ade0:	31 c0                	xor    eax,eax
c001ade2:	5b                   	pop    ebx
c001ade3:	5e                   	pop    esi
c001ade4:	c3                   	ret    
c001ade5:	90                   	nop

c001ade6 <SATA::SATA()>:
c001ade6:	83 ec 0c             	sub    esp,0xc
c001ade9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aded:	83 ec 04             	sub    esp,0x4
c001adf0:	68 00 02 00 00       	push   0x200
c001adf5:	68 cc fa 01 c0       	push   0xc001facc
c001adfa:	50                   	push   eax
c001adfb:	e8 5e 0f ff ff       	call   c000bd5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	ba 3c fb 01 c0       	mov    edx,0xc001fb3c
c001ae08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0c:	89 10                	mov    DWORD PTR [eax],edx
c001ae0e:	90                   	nop
c001ae0f:	83 c4 0c             	add    esp,0xc
c001ae12:	c3                   	ret    
c001ae13:	90                   	nop

c001ae14 <SATA::access(unsigned long long, int, void*, bool)>:
c001ae14:	55                   	push   ebp
c001ae15:	57                   	push   edi
c001ae16:	56                   	push   esi
c001ae17:	53                   	push   ebx
c001ae18:	83 ec 2c             	sub    esp,0x2c
c001ae1b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ae1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ae23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae27:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ae2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae2f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ae34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae38:	7e 10                	jle    c001ae4a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ae3a:	83 ec 0c             	sub    esp,0xc
c001ae3d:	68 dc fa 01 c0       	push   0xc001fadc
c001ae42:	e8 28 54 ff ff       	call   c001026f <KePanic(char const*)>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ae50:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ae56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ae5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae60:	89 d0                	mov    eax,edx
c001ae62:	c1 e0 07             	shl    eax,0x7
c001ae65:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ae69:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ae73:	51                   	push   ecx
c001ae74:	8d 42 02             	lea    eax,[edx+0x2]
c001ae77:	51                   	push   ecx
c001ae78:	c1 e0 07             	shl    eax,0x7
c001ae7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ae7f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ae83:	50                   	push   eax
c001ae84:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ae8a:	e8 b9 ec ff ff       	call   c0019b48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ae8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ae9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae9f:	0f 84 4f 01 00 00    	je     c001aff4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001aea5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aea9:	c1 e0 09             	shl    eax,0x9
c001aeac:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aeb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb5:	74 0e                	je     c001aec5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001aeb7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001aebd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001aec1:	89 c1                	mov    ecx,eax
c001aec3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aec9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001aecf:	8d 42 02             	lea    eax,[edx+0x2]
c001aed2:	c1 e0 07             	shl    eax,0x7
c001aed5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aed9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aedb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aee1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aee7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aeeb:	c1 e1 05             	shl    ecx,0x5
c001aeee:	01 c8                	add    eax,ecx
c001aef0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001aef4:	83 e1 01             	and    ecx,0x1
c001aef7:	89 ce                	mov    esi,ecx
c001aef9:	8a 08                	mov    cl,BYTE PTR [eax]
c001aefb:	c1 e6 06             	shl    esi,0x6
c001aefe:	83 e1 bf             	and    ecx,0xffffffbf
c001af01:	09 f1                	or     ecx,esi
c001af03:	88 08                	mov    BYTE PTR [eax],cl
c001af05:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af07:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001af0d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001af13:	89 08                	mov    DWORD PTR [eax],ecx
c001af15:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001af1b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001af21:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001af27:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001af2a:	50                   	push   eax
c001af2b:	68 90 00 00 00       	push   0x90
c001af30:	6a 00                	push   0x0
c001af32:	56                   	push   esi
c001af33:	e8 98 55 fe ff       	call   c00004d0 <memset>
c001af38:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001af3e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001af42:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001af48:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001af4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	48                   	dec    eax
c001af54:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af59:	89 c1                	mov    ecx,eax
c001af5b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001af61:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af66:	09 c8                	or     eax,ecx
c001af68:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001af6e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001af71:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001af78:	66 25 00 7f          	and    ax,0x7f00
c001af7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af80:	66 0d 27 80          	or     ax,0x8027
c001af84:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001af89:	66 89 06             	mov    WORD PTR [esi],ax
c001af8c:	19 c0                	sbb    eax,eax
c001af8e:	83 e0 f0             	and    eax,0xfffffff0
c001af91:	83 c0 35             	add    eax,0x35
c001af94:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001af97:	89 e8                	mov    eax,ebp
c001af99:	c1 e8 10             	shr    eax,0x10
c001af9c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001af9f:	89 e8                	mov    eax,ebp
c001afa1:	c1 e8 18             	shr    eax,0x18
c001afa4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001afa7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001afab:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001afae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afb2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001afb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afb9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001afbd:	89 d6                	mov    esi,edx
c001afbf:	31 c0                	xor    eax,eax
c001afc1:	c1 e6 07             	shl    esi,0x7
c001afc4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001afc8:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001afce:	80 e1 88             	and    cl,0x88
c001afd1:	74 0a                	je     c001afdd <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001afd3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afd8:	74 0a                	je     c001afe4 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001afda:	40                   	inc    eax
c001afdb:	eb eb                	jmp    c001afc8 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001afdd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afe2:	75 17                	jne    c001affb <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	68 15 fb 01 c0       	push   0xc001fb15
c001afec:	e8 61 f5 fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	b8 01 00 00 00       	mov    eax,0x1
c001aff9:	eb 5d                	jmp    c001b058 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001affb:	b8 01 00 00 00       	mov    eax,0x1
c001b000:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b004:	c1 e2 07             	shl    edx,0x7
c001b007:	d3 e0                	shl    eax,cl
c001b009:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b00d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b013:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b019:	85 c8                	test   eax,ecx
c001b01b:	74 16                	je     c001b033 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b01d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b023:	0f ba e1 1e          	bt     ecx,0x1e
c001b027:	73 ea                	jae    c001b013 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b029:	83 ec 0c             	sub    esp,0xc
c001b02c:	68 23 fb 01 c0       	push   0xc001fb23
c001b031:	eb b9                	jmp    c001afec <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b033:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b039:	0f ba e0 1e          	bt     eax,0x1e
c001b03d:	72 b5                	jb     c001aff4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b03f:	31 c0                	xor    eax,eax
c001b041:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b046:	75 10                	jne    c001b058 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b048:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b04e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b052:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b056:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b058:	83 c4 2c             	add    esp,0x2c
c001b05b:	5b                   	pop    ebx
c001b05c:	5e                   	pop    esi
c001b05d:	5f                   	pop    edi
c001b05e:	5d                   	pop    ebp
c001b05f:	c3                   	ret    

c001b060 <SATA::read(unsigned long long, int, void*)>:
c001b060:	55                   	push   ebp
c001b061:	57                   	push   edi
c001b062:	56                   	push   esi
c001b063:	be 04 00 00 00       	mov    esi,0x4
c001b068:	53                   	push   ebx
c001b069:	83 ec 0c             	sub    esp,0xc
c001b06c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b070:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b074:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b077:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b07b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b07f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b085:	0f 87 1a 02 00 00    	ja     c001b2a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001b08b:	be 06 00 00 00       	mov    esi,0x6
c001b090:	85 c9                	test   ecx,ecx
c001b092:	0f 84 0d 02 00 00    	je     c001b2a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001b098:	56                   	push   esi
c001b099:	56                   	push   esi
c001b09a:	6a 00                	push   0x0
c001b09c:	51                   	push   ecx
c001b09d:	53                   	push   ebx
c001b09e:	52                   	push   edx
c001b09f:	50                   	push   eax
c001b0a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0a4:	e8 6b fd ff ff       	call   c001ae14 <SATA::access(unsigned long long, int, void*, bool)>
c001b0a9:	83 c4 20             	add    esp,0x20
c001b0ac:	89 c6                	mov    esi,eax
c001b0ae:	85 c0                	test   eax,eax
c001b0b0:	0f 85 ea 01 00 00    	jne    c001b2a0 <SATA::read(unsigned long long, int, void*)+0x240>
c001b0b6:	01 1d 54 6b 02 c0    	add    DWORD PTR ds:0xc0026b54,ebx
c001b0bc:	bb 0a 00 00 00       	mov    ebx,0xa
c001b0c1:	50                   	push   eax
c001b0c2:	50                   	push   eax
c001b0c3:	6a 0f                	push   0xf
c001b0c5:	6a 00                	push   0x0
c001b0c7:	e8 87 f2 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b0cc:	5a                   	pop    edx
c001b0cd:	0f b6 c0             	movzx  eax,al
c001b0d0:	59                   	pop    ecx
c001b0d1:	b9 10 27 00 00       	mov    ecx,0x2710
c001b0d6:	50                   	push   eax
c001b0d7:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b0dc:	99                   	cdq    
c001b0dd:	f7 f9                	idiv   ecx
c001b0df:	99                   	cdq    
c001b0e0:	f7 fb                	idiv   ebx
c001b0e2:	8d 42 30             	lea    eax,[edx+0x30]
c001b0e5:	0f b6 c0             	movzx  eax,al
c001b0e8:	50                   	push   eax
c001b0e9:	e8 54 f2 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b0ee:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b0f4:	5f                   	pop    edi
c001b0f5:	5d                   	pop    ebp
c001b0f6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b0fb:	6a 0f                	push   0xf
c001b0fd:	6a 00                	push   0x0
c001b0ff:	e8 4f f2 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b104:	5a                   	pop    edx
c001b105:	0f b6 c0             	movzx  eax,al
c001b108:	59                   	pop    ecx
c001b109:	50                   	push   eax
c001b10a:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b10f:	99                   	cdq    
c001b110:	f7 fd                	idiv   ebp
c001b112:	99                   	cdq    
c001b113:	f7 fb                	idiv   ebx
c001b115:	8d 42 30             	lea    eax,[edx+0x30]
c001b118:	0f b6 c0             	movzx  eax,al
c001b11b:	50                   	push   eax
c001b11c:	e8 21 f2 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b121:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b127:	5f                   	pop    edi
c001b128:	bf 64 00 00 00       	mov    edi,0x64
c001b12d:	58                   	pop    eax
c001b12e:	6a 0f                	push   0xf
c001b130:	6a 00                	push   0x0
c001b132:	e8 1c f2 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b137:	5a                   	pop    edx
c001b138:	0f b6 c0             	movzx  eax,al
c001b13b:	59                   	pop    ecx
c001b13c:	50                   	push   eax
c001b13d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b142:	99                   	cdq    
c001b143:	f7 ff                	idiv   edi
c001b145:	99                   	cdq    
c001b146:	f7 fb                	idiv   ebx
c001b148:	8d 42 30             	lea    eax,[edx+0x30]
c001b14b:	0f b6 c0             	movzx  eax,al
c001b14e:	50                   	push   eax
c001b14f:	e8 ee f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b154:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b15a:	58                   	pop    eax
c001b15b:	5a                   	pop    edx
c001b15c:	6a 0f                	push   0xf
c001b15e:	6a 00                	push   0x0
c001b160:	e8 ee f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b165:	59                   	pop    ecx
c001b166:	0f b6 c0             	movzx  eax,al
c001b169:	5a                   	pop    edx
c001b16a:	50                   	push   eax
c001b16b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b170:	99                   	cdq    
c001b171:	f7 fb                	idiv   ebx
c001b173:	99                   	cdq    
c001b174:	f7 fb                	idiv   ebx
c001b176:	8d 42 30             	lea    eax,[edx+0x30]
c001b179:	0f b6 c0             	movzx  eax,al
c001b17c:	50                   	push   eax
c001b17d:	e8 c0 f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b182:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b188:	59                   	pop    ecx
c001b189:	58                   	pop    eax
c001b18a:	6a 0f                	push   0xf
c001b18c:	6a 00                	push   0x0
c001b18e:	e8 c0 f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b193:	5a                   	pop    edx
c001b194:	0f b6 c0             	movzx  eax,al
c001b197:	59                   	pop    ecx
c001b198:	50                   	push   eax
c001b199:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b19e:	99                   	cdq    
c001b19f:	f7 fb                	idiv   ebx
c001b1a1:	8d 42 30             	lea    eax,[edx+0x30]
c001b1a4:	0f b6 c0             	movzx  eax,al
c001b1a7:	50                   	push   eax
c001b1a8:	e8 95 f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b1ad:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b1b3:	58                   	pop    eax
c001b1b4:	5a                   	pop    edx
c001b1b5:	6a 0f                	push   0xf
c001b1b7:	6a 00                	push   0x0
c001b1b9:	e8 95 f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b1be:	59                   	pop    ecx
c001b1bf:	0f b6 c0             	movzx  eax,al
c001b1c2:	5a                   	pop    edx
c001b1c3:	b9 10 27 00 00       	mov    ecx,0x2710
c001b1c8:	50                   	push   eax
c001b1c9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b1ce:	99                   	cdq    
c001b1cf:	f7 f9                	idiv   ecx
c001b1d1:	99                   	cdq    
c001b1d2:	f7 fb                	idiv   ebx
c001b1d4:	8d 42 30             	lea    eax,[edx+0x30]
c001b1d7:	0f b6 c0             	movzx  eax,al
c001b1da:	50                   	push   eax
c001b1db:	e8 62 f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b1e0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b1e6:	59                   	pop    ecx
c001b1e7:	58                   	pop    eax
c001b1e8:	6a 0f                	push   0xf
c001b1ea:	6a 00                	push   0x0
c001b1ec:	e8 62 f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b1f1:	5a                   	pop    edx
c001b1f2:	0f b6 c0             	movzx  eax,al
c001b1f5:	59                   	pop    ecx
c001b1f6:	50                   	push   eax
c001b1f7:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b1fc:	99                   	cdq    
c001b1fd:	f7 fd                	idiv   ebp
c001b1ff:	99                   	cdq    
c001b200:	f7 fb                	idiv   ebx
c001b202:	8d 42 30             	lea    eax,[edx+0x30]
c001b205:	0f b6 c0             	movzx  eax,al
c001b208:	50                   	push   eax
c001b209:	e8 34 f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b20e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b214:	5d                   	pop    ebp
c001b215:	58                   	pop    eax
c001b216:	6a 0f                	push   0xf
c001b218:	6a 00                	push   0x0
c001b21a:	e8 34 f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b21f:	5a                   	pop    edx
c001b220:	0f b6 c0             	movzx  eax,al
c001b223:	59                   	pop    ecx
c001b224:	50                   	push   eax
c001b225:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b22a:	99                   	cdq    
c001b22b:	f7 ff                	idiv   edi
c001b22d:	99                   	cdq    
c001b22e:	f7 fb                	idiv   ebx
c001b230:	8d 42 30             	lea    eax,[edx+0x30]
c001b233:	0f b6 c0             	movzx  eax,al
c001b236:	50                   	push   eax
c001b237:	e8 06 f1 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b23c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b242:	5f                   	pop    edi
c001b243:	5d                   	pop    ebp
c001b244:	6a 0f                	push   0xf
c001b246:	6a 00                	push   0x0
c001b248:	e8 06 f1 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b24d:	5a                   	pop    edx
c001b24e:	0f b6 c0             	movzx  eax,al
c001b251:	59                   	pop    ecx
c001b252:	50                   	push   eax
c001b253:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b258:	99                   	cdq    
c001b259:	f7 fb                	idiv   ebx
c001b25b:	99                   	cdq    
c001b25c:	f7 fb                	idiv   ebx
c001b25e:	8d 42 30             	lea    eax,[edx+0x30]
c001b261:	0f b6 c0             	movzx  eax,al
c001b264:	50                   	push   eax
c001b265:	e8 d8 f0 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b26a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b270:	5f                   	pop    edi
c001b271:	5d                   	pop    ebp
c001b272:	6a 0f                	push   0xf
c001b274:	6a 00                	push   0x0
c001b276:	e8 d8 f0 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b27b:	5a                   	pop    edx
c001b27c:	0f b6 c0             	movzx  eax,al
c001b27f:	59                   	pop    ecx
c001b280:	50                   	push   eax
c001b281:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b286:	99                   	cdq    
c001b287:	f7 fb                	idiv   ebx
c001b289:	83 c2 30             	add    edx,0x30
c001b28c:	0f b6 d2             	movzx  edx,dl
c001b28f:	52                   	push   edx
c001b290:	e8 ad f0 ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b29e:	eb 05                	jmp    c001b2a5 <SATA::read(unsigned long long, int, void*)+0x245>
c001b2a0:	be 01 00 00 00       	mov    esi,0x1
c001b2a5:	83 c4 0c             	add    esp,0xc
c001b2a8:	89 f0                	mov    eax,esi
c001b2aa:	5b                   	pop    ebx
c001b2ab:	5e                   	pop    esi
c001b2ac:	5f                   	pop    edi
c001b2ad:	5d                   	pop    ebp
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <SATA::write(unsigned long long, int, void*)>:
c001b2b0:	55                   	push   ebp
c001b2b1:	b8 04 00 00 00       	mov    eax,0x4
c001b2b6:	57                   	push   edi
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	83 ec 1c             	sub    esp,0x1c
c001b2bc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b2c0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b2c4:	8d 75 ff             	lea    esi,[ebp-0x1]
c001b2c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b2cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b2cf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b2d5:	0f 87 32 02 00 00    	ja     c001b50d <SATA::write(unsigned long long, int, void*)+0x25d>
c001b2db:	b8 06 00 00 00       	mov    eax,0x6
c001b2e0:	85 ff                	test   edi,edi
c001b2e2:	0f 84 25 02 00 00    	je     c001b50d <SATA::write(unsigned long long, int, void*)+0x25d>
c001b2e8:	89 ee                	mov    esi,ebp
c001b2ea:	c1 e6 09             	shl    esi,0x9
c001b2ed:	01 fe                	add    esi,edi
c001b2ef:	89 c8                	mov    eax,ecx
c001b2f1:	89 da                	mov    edx,ebx
c001b2f3:	83 c0 01             	add    eax,0x1
c001b2f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2fa:	83 d2 00             	adc    edx,0x0
c001b2fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b301:	50                   	push   eax
c001b302:	50                   	push   eax
c001b303:	6a 01                	push   0x1
c001b305:	57                   	push   edi
c001b306:	81 c7 00 02 00 00    	add    edi,0x200
c001b30c:	6a 01                	push   0x1
c001b30e:	53                   	push   ebx
c001b30f:	51                   	push   ecx
c001b310:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b314:	e8 fb fa ff ff       	call   c001ae14 <SATA::access(unsigned long long, int, void*, bool)>
c001b319:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b31d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b321:	83 c4 20             	add    esp,0x20
c001b324:	39 f7                	cmp    edi,esi
c001b326:	75 c7                	jne    c001b2ef <SATA::write(unsigned long long, int, void*)+0x3f>
c001b328:	bb 0a 00 00 00       	mov    ebx,0xa
c001b32d:	01 2d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebp
c001b333:	bd 10 27 00 00       	mov    ebp,0x2710
c001b338:	50                   	push   eax
c001b339:	50                   	push   eax
c001b33a:	6a 0f                	push   0xf
c001b33c:	6a 00                	push   0x0
c001b33e:	e8 10 f0 ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b343:	5a                   	pop    edx
c001b344:	0f b6 c0             	movzx  eax,al
c001b347:	59                   	pop    ecx
c001b348:	50                   	push   eax
c001b349:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b34e:	99                   	cdq    
c001b34f:	f7 fd                	idiv   ebp
c001b351:	99                   	cdq    
c001b352:	f7 fb                	idiv   ebx
c001b354:	8d 42 30             	lea    eax,[edx+0x30]
c001b357:	0f b6 c0             	movzx  eax,al
c001b35a:	50                   	push   eax
c001b35b:	e8 e2 ef ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b360:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b366:	5e                   	pop    esi
c001b367:	5f                   	pop    edi
c001b368:	bf e8 03 00 00       	mov    edi,0x3e8
c001b36d:	6a 0f                	push   0xf
c001b36f:	6a 00                	push   0x0
c001b371:	e8 dd ef ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b376:	5a                   	pop    edx
c001b377:	0f b6 c0             	movzx  eax,al
c001b37a:	59                   	pop    ecx
c001b37b:	50                   	push   eax
c001b37c:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b381:	99                   	cdq    
c001b382:	f7 ff                	idiv   edi
c001b384:	99                   	cdq    
c001b385:	f7 fb                	idiv   ebx
c001b387:	8d 42 30             	lea    eax,[edx+0x30]
c001b38a:	0f b6 c0             	movzx  eax,al
c001b38d:	50                   	push   eax
c001b38e:	e8 af ef ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b393:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b399:	5e                   	pop    esi
c001b39a:	be 64 00 00 00       	mov    esi,0x64
c001b39f:	58                   	pop    eax
c001b3a0:	6a 0f                	push   0xf
c001b3a2:	6a 00                	push   0x0
c001b3a4:	e8 aa ef ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b3a9:	5a                   	pop    edx
c001b3aa:	0f b6 c0             	movzx  eax,al
c001b3ad:	59                   	pop    ecx
c001b3ae:	50                   	push   eax
c001b3af:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b3b4:	99                   	cdq    
c001b3b5:	f7 fe                	idiv   esi
c001b3b7:	99                   	cdq    
c001b3b8:	f7 fb                	idiv   ebx
c001b3ba:	8d 42 30             	lea    eax,[edx+0x30]
c001b3bd:	0f b6 c0             	movzx  eax,al
c001b3c0:	50                   	push   eax
c001b3c1:	e8 7c ef ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b3c6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b3cc:	58                   	pop    eax
c001b3cd:	5a                   	pop    edx
c001b3ce:	6a 0f                	push   0xf
c001b3d0:	6a 00                	push   0x0
c001b3d2:	e8 7c ef ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b3d7:	59                   	pop    ecx
c001b3d8:	0f b6 c0             	movzx  eax,al
c001b3db:	5a                   	pop    edx
c001b3dc:	50                   	push   eax
c001b3dd:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b3e2:	99                   	cdq    
c001b3e3:	f7 fb                	idiv   ebx
c001b3e5:	99                   	cdq    
c001b3e6:	f7 fb                	idiv   ebx
c001b3e8:	8d 42 30             	lea    eax,[edx+0x30]
c001b3eb:	0f b6 c0             	movzx  eax,al
c001b3ee:	50                   	push   eax
c001b3ef:	e8 4e ef ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b3f4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b3fa:	59                   	pop    ecx
c001b3fb:	58                   	pop    eax
c001b3fc:	6a 0f                	push   0xf
c001b3fe:	6a 00                	push   0x0
c001b400:	e8 4e ef ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b405:	5a                   	pop    edx
c001b406:	0f b6 c0             	movzx  eax,al
c001b409:	59                   	pop    ecx
c001b40a:	50                   	push   eax
c001b40b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b410:	99                   	cdq    
c001b411:	f7 fb                	idiv   ebx
c001b413:	83 c2 30             	add    edx,0x30
c001b416:	0f b6 d2             	movzx  edx,dl
c001b419:	52                   	push   edx
c001b41a:	e8 23 ef ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b41f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b425:	58                   	pop    eax
c001b426:	5a                   	pop    edx
c001b427:	6a 0f                	push   0xf
c001b429:	6a 00                	push   0x0
c001b42b:	e8 23 ef ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b430:	59                   	pop    ecx
c001b431:	0f b6 c0             	movzx  eax,al
c001b434:	5a                   	pop    edx
c001b435:	50                   	push   eax
c001b436:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b43b:	99                   	cdq    
c001b43c:	f7 fd                	idiv   ebp
c001b43e:	99                   	cdq    
c001b43f:	f7 fb                	idiv   ebx
c001b441:	8d 42 30             	lea    eax,[edx+0x30]
c001b444:	0f b6 c0             	movzx  eax,al
c001b447:	50                   	push   eax
c001b448:	e8 f5 ee ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b44d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b453:	59                   	pop    ecx
c001b454:	5d                   	pop    ebp
c001b455:	6a 0f                	push   0xf
c001b457:	6a 00                	push   0x0
c001b459:	e8 f5 ee ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b45e:	5a                   	pop    edx
c001b45f:	0f b6 c0             	movzx  eax,al
c001b462:	59                   	pop    ecx
c001b463:	50                   	push   eax
c001b464:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b469:	99                   	cdq    
c001b46a:	f7 ff                	idiv   edi
c001b46c:	99                   	cdq    
c001b46d:	f7 fb                	idiv   ebx
c001b46f:	8d 42 30             	lea    eax,[edx+0x30]
c001b472:	0f b6 c0             	movzx  eax,al
c001b475:	50                   	push   eax
c001b476:	e8 c7 ee ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b47b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b481:	5f                   	pop    edi
c001b482:	5d                   	pop    ebp
c001b483:	6a 0f                	push   0xf
c001b485:	6a 00                	push   0x0
c001b487:	e8 c7 ee ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b48c:	5a                   	pop    edx
c001b48d:	0f b6 c0             	movzx  eax,al
c001b490:	59                   	pop    ecx
c001b491:	50                   	push   eax
c001b492:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b497:	99                   	cdq    
c001b498:	f7 fe                	idiv   esi
c001b49a:	99                   	cdq    
c001b49b:	f7 fb                	idiv   ebx
c001b49d:	8d 42 30             	lea    eax,[edx+0x30]
c001b4a0:	0f b6 c0             	movzx  eax,al
c001b4a3:	50                   	push   eax
c001b4a4:	e8 99 ee ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b4a9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b4af:	5e                   	pop    esi
c001b4b0:	5f                   	pop    edi
c001b4b1:	6a 0f                	push   0xf
c001b4b3:	6a 00                	push   0x0
c001b4b5:	e8 99 ee ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b4ba:	5d                   	pop    ebp
c001b4bb:	0f b6 c0             	movzx  eax,al
c001b4be:	5a                   	pop    edx
c001b4bf:	50                   	push   eax
c001b4c0:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b4c5:	99                   	cdq    
c001b4c6:	f7 fb                	idiv   ebx
c001b4c8:	99                   	cdq    
c001b4c9:	f7 fb                	idiv   ebx
c001b4cb:	8d 42 30             	lea    eax,[edx+0x30]
c001b4ce:	0f b6 c0             	movzx  eax,al
c001b4d1:	50                   	push   eax
c001b4d2:	e8 6b ee ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b4d7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b4dd:	59                   	pop    ecx
c001b4de:	5e                   	pop    esi
c001b4df:	6a 0f                	push   0xf
c001b4e1:	6a 00                	push   0x0
c001b4e3:	e8 6b ee ff ff       	call   c001a353 <combineColours(unsigned char, unsigned char)>
c001b4e8:	5f                   	pop    edi
c001b4e9:	0f b6 c0             	movzx  eax,al
c001b4ec:	5d                   	pop    ebp
c001b4ed:	50                   	push   eax
c001b4ee:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b4f3:	99                   	cdq    
c001b4f4:	f7 fb                	idiv   ebx
c001b4f6:	83 c2 30             	add    edx,0x30
c001b4f9:	0f b6 d2             	movzx  edx,dl
c001b4fc:	52                   	push   edx
c001b4fd:	e8 40 ee ff ff       	call   c001a342 <combineCharAndColour(char, unsigned char)>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b50b:	31 c0                	xor    eax,eax
c001b50d:	83 c4 1c             	add    esp,0x1c
c001b510:	5b                   	pop    ebx
c001b511:	5e                   	pop    esi
c001b512:	5f                   	pop    edi
c001b513:	5d                   	pop    ebp
c001b514:	c3                   	ret    
c001b515:	90                   	nop

c001b516 <SATAPI::write(unsigned long long, int, void*)>:
c001b516:	b8 03 00 00 00       	mov    eax,0x3
c001b51b:	c3                   	ret    

c001b51c <SATAPI::close(int, int, void*)>:
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b523:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b529:	85 c0                	test   eax,eax
c001b52b:	74 0c                	je     c001b539 <SATAPI::close(int, int, void*)+0x1d>
c001b52d:	83 ec 0c             	sub    esp,0xc
c001b530:	8b 10                	mov    edx,DWORD PTR [eax]
c001b532:	50                   	push   eax
c001b533:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	31 c0                	xor    eax,eax
c001b53b:	83 c4 0c             	add    esp,0xc
c001b53e:	c3                   	ret    
c001b53f:	90                   	nop

c001b540 <SATAPI::SATAPI()>:
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b547:	83 ec 04             	sub    esp,0x4
c001b54a:	68 00 08 00 00       	push   0x800
c001b54f:	68 6c fb 01 c0       	push   0xc001fb6c
c001b554:	50                   	push   eax
c001b555:	e8 04 08 ff ff       	call   c000bd5e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b55a:	83 c4 10             	add    esp,0x10
c001b55d:	ba 4c fc 01 c0       	mov    edx,0xc001fc4c
c001b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b566:	89 10                	mov    DWORD PTR [eax],edx
c001b568:	90                   	nop
c001b569:	83 c4 0c             	add    esp,0xc
c001b56c:	c3                   	ret    
c001b56d:	90                   	nop

c001b56e <SATAPI::diskRemoved()>:
c001b56e:	c3                   	ret    
c001b56f:	90                   	nop

c001b570 <SATAPI::diskInserted()>:
c001b570:	83 ec 18             	sub    esp,0x18
c001b573:	68 78 fb 01 c0       	push   0xc001fb78
c001b578:	e8 d5 ef fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b581:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b588:	83 c4 1c             	add    esp,0x1c
c001b58b:	c3                   	ret    

c001b58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b58c:	55                   	push   ebp
c001b58d:	57                   	push   edi
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	83 ec 34             	sub    esp,0x34
c001b593:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b597:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b59b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b59f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001b5a7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b5ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5b7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b5bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5c1:	83 c0 02             	add    eax,0x2
c001b5c4:	c1 e0 07             	shl    eax,0x7
c001b5c7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b5cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5d3:	c1 e0 07             	shl    eax,0x7
c001b5d6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b5da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b5de:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b5e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b5ec:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b5f2:	e8 51 e5 ff ff       	call   c0019b48 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b5f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	b8 01 00 00 00       	mov    eax,0x1
c001b603:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b608:	0f 84 49 02 00 00    	je     c001b857 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b60e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b618:	8b 00                	mov    eax,DWORD PTR [eax]
c001b61a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b620:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b62a:	c1 e1 05             	shl    ecx,0x5
c001b62d:	01 c8                	add    eax,ecx
c001b62f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b631:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b637:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b63d:	89 08                	mov    DWORD PTR [eax],ecx
c001b63f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b645:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b64b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b651:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b654:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b657:	50                   	push   eax
c001b658:	68 90 00 00 00       	push   0x90
c001b65d:	6a 00                	push   0x0
c001b65f:	53                   	push   ebx
c001b660:	e8 6b 4e fe ff       	call   c00004d0 <memset>
c001b665:	b9 0c 00 00 00       	mov    ecx,0xc
c001b66a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b66e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b670:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b676:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b67a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b680:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b684:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b688:	48                   	dec    eax
c001b689:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b68e:	89 c1                	mov    ecx,eax
c001b690:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b696:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b69b:	09 c8                	or     eax,ecx
c001b69d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b6a3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b6a6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b6ad:	66 25 00 7f          	and    ax,0x7f00
c001b6b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b6b5:	66 0d 27 80          	or     ax,0x8027
c001b6b9:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b6bd:	66 89 03             	mov    WORD PTR [ebx],ax
c001b6c0:	89 d0                	mov    eax,edx
c001b6c2:	c1 ea 18             	shr    edx,0x18
c001b6c5:	c1 e8 10             	shr    eax,0x10
c001b6c8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b6cb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b6ce:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b6d2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b6d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6d9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b6dc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b6e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6eb:	31 c0                	xor    eax,eax
c001b6ed:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b6f3:	80 e1 88             	and    cl,0x88
c001b6f6:	74 0a                	je     c001b702 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001b6f8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b6fd:	74 0a                	je     c001b709 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001b6ff:	40                   	inc    eax
c001b700:	eb eb                	jmp    c001b6ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001b702:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b707:	75 43                	jne    c001b74c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	68 90 fb 01 c0       	push   0xc001fb90
c001b711:	e8 3c ee fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b716:	58                   	pop    eax
c001b717:	5a                   	pop    edx
c001b718:	68 a5 fb 01 c0       	push   0xc001fba5
c001b71d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001b723:	e8 0e d0 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b728:	59                   	pop    ecx
c001b729:	5b                   	pop    ebx
c001b72a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b72e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b734:	e8 a9 e4 ff ff       	call   c0019be2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b739:	5e                   	pop    esi
c001b73a:	5f                   	pop    edi
c001b73b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b73f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b745:	e8 78 e4 ff ff       	call   c0019bc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b74a:	eb 48                	jmp    c001b794 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001b74c:	be 01 00 00 00       	mov    esi,0x1
c001b751:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b755:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b759:	d3 e6                	shl    esi,cl
c001b75b:	c1 e7 07             	shl    edi,0x7
c001b75e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b764:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b769:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b76d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b773:	85 c6                	test   esi,eax
c001b775:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b77b:	0f 84 a3 00 00 00    	je     c001b824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001b781:	0f ba e0 1e          	bt     eax,0x1e
c001b785:	73 1a                	jae    c001b7a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001b787:	83 ec 0c             	sub    esp,0xc
c001b78a:	68 b7 fb 01 c0       	push   0xc001fbb7
c001b78f:	e8 be ed fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b794:	83 c4 10             	add    esp,0x10
c001b797:	b8 01 00 00 00       	mov    eax,0x1
c001b79c:	e9 b6 00 00 00       	jmp    c001b857 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b7a1:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b7a7:	83 f8 0d             	cmp    eax,0xd
c001b7aa:	77 0a                	ja     c001b7b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	68 c8 00 00 00       	push   0xc8
c001b7b4:	eb 28                	jmp    c001b7de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b7b6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b7bc:	83 f8 0d             	cmp    eax,0xd
c001b7bf:	77 0a                	ja     c001b7cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	68 58 02 00 00       	push   0x258
c001b7c9:	eb 13                	jmp    c001b7de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b7cb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b7d1:	83 f8 06             	cmp    eax,0x6
c001b7d4:	77 10                	ja     c001b7e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	68 dc 05 00 00       	push   0x5dc
c001b7de:	e8 b1 82 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b7ea:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b7ed:	75 06                	jne    c001b7f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001b7ef:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b7f3:	74 15                	je     c001b80a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b7f5:	83 fb 06             	cmp    ebx,0x6
c001b7f8:	77 10                	ja     c001b80a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	68 c4 09 00 00       	push   0x9c4
c001b802:	e8 8d 82 ff ff       	call   c0013a94 <milliTenthSleep(unsigned int)>
c001b807:	83 c4 10             	add    esp,0x10
c001b80a:	43                   	inc    ebx
c001b80b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b811:	0f 85 56 ff ff ff    	jne    c001b76d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001b817:	83 ec 0c             	sub    esp,0xc
c001b81a:	68 ca fb 01 c0       	push   0xc001fbca
c001b81f:	e9 6b ff ff ff       	jmp    c001b78f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b824:	0f ba e0 1e          	bt     eax,0x1e
c001b828:	73 0d                	jae    c001b837 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001b82a:	83 ec 0c             	sub    esp,0xc
c001b82d:	68 de fb 01 c0       	push   0xc001fbde
c001b832:	e9 58 ff ff ff       	jmp    c001b78f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b837:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b83c:	74 17                	je     c001b855 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b83e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b843:	74 10                	je     c001b855 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b845:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b84b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b84f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b853:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b855:	31 c0                	xor    eax,eax
c001b857:	83 c4 2c             	add    esp,0x2c
c001b85a:	5b                   	pop    ebx
c001b85b:	5e                   	pop    esi
c001b85c:	5f                   	pop    edi
c001b85d:	5d                   	pop    ebp
c001b85e:	c3                   	ret    
c001b85f:	90                   	nop

c001b860 <SATAPI::eject()>:
c001b860:	57                   	push   edi
c001b861:	b9 03 00 00 00       	mov    ecx,0x3
c001b866:	83 ec 18             	sub    esp,0x18
c001b869:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b86d:	fc                   	cld    
c001b86e:	31 c0                	xor    eax,eax
c001b870:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b872:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b877:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b87c:	50                   	push   eax
c001b87d:	6a 00                	push   0x0
c001b87f:	6a 00                	push   0x0
c001b881:	6a 00                	push   0x0
c001b883:	6a 00                	push   0x0
c001b885:	6a 02                	push   0x2
c001b887:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b88b:	50                   	push   eax
c001b88c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b890:	e8 f7 fc ff ff       	call   c001b58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b895:	31 c0                	xor    eax,eax
c001b897:	83 c4 38             	add    esp,0x38
c001b89a:	5f                   	pop    edi
c001b89b:	c3                   	ret    

c001b89c <SATAPI::detectMedia()>:
c001b89c:	53                   	push   ebx
c001b89d:	83 ec 14             	sub    esp,0x14
c001b8a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b8a4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b8aa:	e8 8d 1c ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c001b8af:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b8b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b8b9:	83 c4 18             	add    esp,0x18
c001b8bc:	5b                   	pop    ebx
c001b8bd:	e9 6a 1c ff ff       	jmp    c000d52c <VCache::invalidateReadBuffer()>

c001b8c2 <SATAPI::open(int, int, void*)>:
c001b8c2:	56                   	push   esi
c001b8c3:	53                   	push   ebx
c001b8c4:	51                   	push   ecx
c001b8c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8cd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b8d7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b8dd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b8e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8eb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b8f5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b8fb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b902:	e8 8e c1 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b907:	89 c6                	mov    esi,eax
c001b909:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b90f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b915:	e8 7b c1 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b91a:	39 c6                	cmp    esi,eax
c001b91c:	74 10                	je     c001b92e <SATAPI::open(int, int, void*)+0x6c>
c001b91e:	83 ec 0c             	sub    esp,0xc
c001b921:	68 f3 fb 01 c0       	push   0xc001fbf3
c001b926:	e8 44 49 ff ff       	call   c001026f <KePanic(char const*)>
c001b92b:	83 c4 10             	add    esp,0x10
c001b92e:	83 ec 0c             	sub    esp,0xc
c001b931:	6a 02                	push   0x2
c001b933:	e8 5d d9 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001b938:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b93e:	6a 03                	push   0x3
c001b940:	50                   	push   eax
c001b941:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b947:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001b94d:	e8 06 e0 fe ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b952:	83 c4 14             	add    esp,0x14
c001b955:	68 74 01 00 00       	push   0x174
c001b95a:	e8 5a be fe ff       	call   c00077b9 <malloc>
c001b95f:	83 c4 0c             	add    esp,0xc
c001b962:	89 c6                	mov    esi,eax
c001b964:	6a 00                	push   0x0
c001b966:	68 ff ff ff 7f       	push   0x7fffffff
c001b96b:	6a 00                	push   0x0
c001b96d:	6a 00                	push   0x0
c001b96f:	53                   	push   ebx
c001b970:	68 09 fc 01 c0       	push   0xc001fc09
c001b975:	50                   	push   eax
c001b976:	e8 bf 10 ff ff       	call   c000ca3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b97b:	83 c4 14             	add    esp,0x14
c001b97e:	56                   	push   esi
c001b97f:	e8 6c 11 ff ff       	call   c000caf0 <LogicalDisk::assignDriveLetter()>
c001b984:	5a                   	pop    edx
c001b985:	0f be c0             	movsx  eax,al
c001b988:	59                   	pop    ecx
c001b989:	50                   	push   eax
c001b98a:	68 70 fa 01 c0       	push   0xc001fa70
c001b98f:	e8 be eb fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b994:	58                   	pop    eax
c001b995:	5a                   	pop    edx
c001b996:	56                   	push   esi
c001b997:	53                   	push   ebx
c001b998:	e8 f3 ff fe ff       	call   c000b990 <Device::addChild(Device*)>
c001b99d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b9a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9a6:	e8 1b 04 ff ff       	call   c000bdc6 <PhysicalDisk::startCache()>
c001b9ab:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b9b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9b5:	e8 e2 fe ff ff       	call   c001b89c <SATAPI::detectMedia()>
c001b9ba:	83 c4 14             	add    esp,0x14
c001b9bd:	31 c0                	xor    eax,eax
c001b9bf:	5b                   	pop    ebx
c001b9c0:	5e                   	pop    esi
c001b9c1:	c3                   	ret    

c001b9c2 <SATAPI::read(unsigned long long, int, void*)>:
c001b9c2:	57                   	push   edi
c001b9c3:	56                   	push   esi
c001b9c4:	53                   	push   ebx
c001b9c5:	83 ec 30             	sub    esp,0x30
c001b9c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b9cc:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001b9d0:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b9d4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b9d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9e0:	83 fe 04             	cmp    esi,0x4
c001b9e3:	7e 10                	jle    c001b9f5 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001b9e5:	83 ec 0c             	sub    esp,0xc
c001b9e8:	68 17 fc 01 c0       	push   0xc001fc17
c001b9ed:	e8 7d 48 ff ff       	call   c001026f <KePanic(char const*)>
c001b9f2:	83 c4 10             	add    esp,0x10
c001b9f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b9fb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ba01:	51                   	push   ecx
c001ba02:	50                   	push   eax
c001ba03:	83 c0 02             	add    eax,0x2
c001ba06:	c1 e0 07             	shl    eax,0x7
c001ba09:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ba0f:	50                   	push   eax
c001ba10:	52                   	push   edx
c001ba11:	e8 f6 e1 ff ff       	call   c0019c0c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba16:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ba1a:	b9 03 00 00 00       	mov    ecx,0x3
c001ba1f:	fc                   	cld    
c001ba20:	31 c0                	xor    eax,eax
c001ba22:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ba24:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ba29:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ba2e:	83 c4 0c             	add    esp,0xc
c001ba31:	6a 00                	push   0x0
c001ba33:	6a 00                	push   0x0
c001ba35:	6a 00                	push   0x0
c001ba37:	6a 00                	push   0x0
c001ba39:	6a 02                	push   0x2
c001ba3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ba3f:	50                   	push   eax
c001ba40:	53                   	push   ebx
c001ba41:	e8 46 fb ff ff       	call   c001b58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ba46:	83 c4 20             	add    esp,0x20
c001ba49:	85 c0                	test   eax,eax
c001ba4b:	75 44                	jne    c001ba91 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ba4d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ba51:	b9 03 00 00 00       	mov    ecx,0x3
c001ba56:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5c:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ba61:	0f c8                	bswap  eax
c001ba63:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ba67:	89 f0                	mov    eax,esi
c001ba69:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ba6d:	50                   	push   eax
c001ba6e:	56                   	push   esi
c001ba6f:	c1 e6 0b             	shl    esi,0xb
c001ba72:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ba76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba7e:	56                   	push   esi
c001ba7f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ba83:	50                   	push   eax
c001ba84:	53                   	push   ebx
c001ba85:	e8 02 fb ff ff       	call   c001b58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ba8a:	83 c4 20             	add    esp,0x20
c001ba8d:	85 c0                	test   eax,eax
c001ba8f:	74 14                	je     c001baa5 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ba91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba95:	83 ec 0c             	sub    esp,0xc
c001ba98:	53                   	push   ebx
c001ba99:	e8 fe fd ff ff       	call   c001b89c <SATAPI::detectMedia()>
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baa5:	83 c4 30             	add    esp,0x30
c001baa8:	5b                   	pop    ebx
c001baa9:	5e                   	pop    esi
c001baaa:	5f                   	pop    edi
c001baab:	c3                   	ret    

c001baac <IOAPIC::close(int, int, void*)>:
c001baac:	b8 00 00 00 00       	mov    eax,0x0
c001bab1:	c3                   	ret    

c001bab2 <apicGetBase()>:
c001bab2:	55                   	push   ebp
c001bab3:	89 e5                	mov    ebp,esp
c001bab5:	83 ec 18             	sub    esp,0x18
c001bab8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001babd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001bac3:	83 e0 08             	and    eax,0x8
c001bac6:	84 c0                	test   al,al
c001bac8:	75 07                	jne    c001bad1 <apicGetBase()+0x1f>
c001baca:	b8 00 00 00 00       	mov    eax,0x0
c001bacf:	eb 21                	jmp    c001baf2 <apicGetBase()+0x40>
c001bad1:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bad6:	83 ec 08             	sub    esp,0x8
c001bad9:	6a 1b                	push   0x1b
c001badb:	50                   	push   eax
c001badc:	e8 11 b3 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001bae1:	83 c4 10             	add    esp,0x10
c001bae4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bae7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001baea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001baed:	25 00 00 ff ff       	and    eax,0xffff0000
c001baf2:	c9                   	leave  
c001baf3:	c3                   	ret    

c001baf4 <IOAPIC::IOAPIC()>:
c001baf4:	83 ec 0c             	sub    esp,0xc
c001baf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafb:	83 ec 08             	sub    esp,0x8
c001bafe:	68 7c fc 01 c0       	push   0xc001fc7c
c001bb03:	50                   	push   eax
c001bb04:	e8 1f 00 ff ff       	call   c000bb28 <Device::Device(char const*)>
c001bb09:	83 c4 10             	add    esp,0x10
c001bb0c:	ba 8c fc 01 c0       	mov    edx,0xc001fc8c
c001bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb15:	89 10                	mov    DWORD PTR [eax],edx
c001bb17:	90                   	nop
c001bb18:	83 c4 0c             	add    esp,0xc
c001bb1b:	c3                   	ret    

c001bb1c <apicOpen()>:
c001bb1c:	55                   	push   ebp
c001bb1d:	89 e5                	mov    ebp,esp
c001bb1f:	53                   	push   ebx
c001bb20:	83 ec 34             	sub    esp,0x34
c001bb23:	a0 a0 6b 02 c0       	mov    al,ds:0xc0026ba0
c001bb28:	83 f0 01             	xor    eax,0x1
c001bb2b:	84 c0                	test   al,al
c001bb2d:	0f 84 9d 00 00 00    	je     c001bbd0 <apicOpen()+0xb4>
c001bb33:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bb37:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c001bb3c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bb3f:	0f 83 84 00 00 00    	jae    c001bbc9 <apicOpen()+0xad>
c001bb45:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bb4c:	83 ec 0c             	sub    esp,0xc
c001bb4f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bb52:	e8 62 bc fe ff       	call   c00077b9 <malloc>
c001bb57:	83 c4 10             	add    esp,0x10
c001bb5a:	89 c3                	mov    ebx,eax
c001bb5c:	83 ec 0c             	sub    esp,0xc
c001bb5f:	53                   	push   ebx
c001bb60:	e8 8f ff ff ff       	call   c001baf4 <IOAPIC::IOAPIC()>
c001bb65:	83 c4 10             	add    esp,0x10
c001bb68:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bb6b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bb6e:	25 ff 00 00 00       	and    eax,0xff
c001bb73:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bb76:	89 14 85 80 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9480],edx
c001bb7d:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c001bb82:	40                   	inc    eax
c001bb83:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c001bb88:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bb8d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001bb93:	83 ec 08             	sub    esp,0x8
c001bb96:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bb99:	50                   	push   eax
c001bb9a:	e8 f1 fd fe ff       	call   c000b990 <Device::addChild(Device*)>
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bba5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bba7:	83 c0 08             	add    eax,0x8
c001bbaa:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbac:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bbaf:	25 ff 00 00 00       	and    eax,0xff
c001bbb4:	6a 00                	push   0x0
c001bbb6:	6a 00                	push   0x0
c001bbb8:	50                   	push   eax
c001bbb9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bbbc:	ff d2                	call   edx
c001bbbe:	83 c4 10             	add    esp,0x10
c001bbc1:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bbc4:	e9 6e ff ff ff       	jmp    c001bb37 <apicOpen()+0x1b>
c001bbc9:	c6 05 a0 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026ba0,0x1
c001bbd0:	e8 dd fe ff ff       	call   c001bab2 <apicGetBase()>
c001bbd5:	05 f0 00 00 00       	add    eax,0xf0
c001bbda:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bbdd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bbe5:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bbec:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bbf3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bbf6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bbf9:	89 10                	mov    DWORD PTR [eax],edx
c001bbfb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bc02:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c001bc07:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bc0a:	7d 70                	jge    c001bc7c <apicOpen()+0x160>
c001bc0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc0f:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bc16:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bc19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc1c:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bc23:	c1 e8 08             	shr    eax,0x8
c001bc26:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bc2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc2d:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bc34:	c1 e8 18             	shr    eax,0x18
c001bc37:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bc3a:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bc3e:	75 37                	jne    c001bc77 <apicOpen()+0x15b>
c001bc40:	e8 6d fe ff ff       	call   c001bab2 <apicGetBase()>
c001bc45:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bc49:	75 07                	jne    c001bc52 <apicOpen()+0x136>
c001bc4b:	ba 60 03 00 00       	mov    edx,0x360
c001bc50:	eb 05                	jmp    c001bc57 <apicOpen()+0x13b>
c001bc52:	ba 50 03 00 00       	mov    edx,0x350
c001bc57:	01 d0                	add    eax,edx
c001bc59:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bc5c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bc5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc61:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bc64:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bc6b:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bc6f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bc72:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bc75:	89 10                	mov    DWORD PTR [eax],edx
c001bc77:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bc7a:	eb 86                	jmp    c001bc02 <apicOpen()+0xe6>
c001bc7c:	90                   	nop
c001bc7d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bc80:	c9                   	leave  
c001bc81:	c3                   	ret    

c001bc82 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bc82:	55                   	push   ebp
c001bc83:	89 e5                	mov    ebp,esp
c001bc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bc8e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bc91:	72 1d                	jb     c001bcb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bc93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc96:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001bc9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc9f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001bca5:	01 d0                	add    eax,edx
c001bca7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bcaa:	73 04                	jae    c001bcb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bcac:	b0 01                	mov    al,0x1
c001bcae:	eb 02                	jmp    c001bcb2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001bcb0:	b0 00                	mov    al,0x0
c001bcb2:	5d                   	pop    ebp
c001bcb3:	c3                   	ret    

c001bcb4 <IOAPIC::read(int)>:
c001bcb4:	55                   	push   ebp
c001bcb5:	89 e5                	mov    ebp,esp
c001bcb7:	83 ec 10             	sub    esp,0x10
c001bcba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bcc3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bcc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcc9:	31 d2                	xor    edx,edx
c001bccb:	88 c2                	mov    dl,al
c001bccd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bcd0:	89 10                	mov    DWORD PTR [eax],edx
c001bcd2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bcd5:	83 c0 10             	add    eax,0x10
c001bcd8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcda:	c9                   	leave  
c001bcdb:	c3                   	ret    

c001bcdc <IOAPIC::open(int, int, void*)>:
c001bcdc:	55                   	push   ebp
c001bcdd:	89 e5                	mov    ebp,esp
c001bcdf:	57                   	push   edi
c001bce0:	56                   	push   esi
c001bce1:	53                   	push   ebx
c001bce2:	83 ec 04             	sub    esp,0x4
c001bce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bce8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bceb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bcf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcf4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bcfa:	8b 14 85 c0 57 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda840]
c001bd01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd04:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bd0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd13:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c001bd1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd1d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bd23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd26:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bd2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd2f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bd35:	89 c6                	mov    esi,eax
c001bd37:	81 e6 ff 00 00 00    	and    esi,0xff
c001bd3d:	89 d0                	mov    eax,edx
c001bd3f:	ba 00 00 00 00       	mov    edx,0x0
c001bd44:	89 c7                	mov    edi,eax
c001bd46:	83 e7 ff             	and    edi,0xffffffff
c001bd49:	89 f9                	mov    ecx,edi
c001bd4b:	89 d0                	mov    eax,edx
c001bd4d:	25 ff 00 00 00       	and    eax,0xff
c001bd52:	89 c3                	mov    ebx,eax
c001bd54:	89 c8                	mov    eax,ecx
c001bd56:	89 da                	mov    edx,ebx
c001bd58:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bd5b:	8d 5e 08             	lea    ebx,[esi+0x8]
c001bd5e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001bd62:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001bd66:	83 e0 00             	and    eax,0x0
c001bd69:	09 d0                	or     eax,edx
c001bd6b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001bd6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd72:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001bd78:	8d 50 01             	lea    edx,[eax+0x1]
c001bd7b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bd7e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001bd84:	31 d2                	xor    edx,edx
c001bd86:	88 c2                	mov    dl,al
c001bd88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd8b:	83 c2 08             	add    edx,0x8
c001bd8e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001bd92:	81 e1 ff 00 00 00    	and    ecx,0xff
c001bd98:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001bd9e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001bda2:	6a 01                	push   0x1
c001bda4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bda7:	e8 08 ff ff ff       	call   c001bcb4 <IOAPIC::read(int)>
c001bdac:	83 c4 08             	add    esp,0x8
c001bdaf:	c1 f8 10             	sar    eax,0x10
c001bdb2:	25 ff 00 00 00       	and    eax,0xff
c001bdb7:	8d 50 01             	lea    edx,[eax+0x1]
c001bdba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001bdc3:	b8 00 00 00 00       	mov    eax,0x0
c001bdc8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bdcb:	5b                   	pop    ebx
c001bdcc:	5e                   	pop    esi
c001bdcd:	5f                   	pop    edi
c001bdce:	5d                   	pop    ebp
c001bdcf:	c3                   	ret    

c001bdd0 <IOAPIC::write(int, int)>:
c001bdd0:	55                   	push   ebp
c001bdd1:	89 e5                	mov    ebp,esp
c001bdd3:	83 ec 10             	sub    esp,0x10
c001bdd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bddf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bde2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bde5:	31 d2                	xor    edx,edx
c001bde7:	88 c2                	mov    dl,al
c001bde9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bdec:	89 10                	mov    DWORD PTR [eax],edx
c001bdee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bdf1:	8d 50 10             	lea    edx,[eax+0x10]
c001bdf4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdf7:	89 02                	mov    DWORD PTR [edx],eax
c001bdf9:	90                   	nop
c001bdfa:	c9                   	leave  
c001bdfb:	c3                   	ret    

c001bdfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bdfc:	55                   	push   ebp
c001bdfd:	89 e5                	mov    ebp,esp
c001bdff:	53                   	push   ebx
c001be00:	83 ec 2c             	sub    esp,0x2c
c001be03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001be06:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001be09:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001be0c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001be0f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001be12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001be18:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001be1b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001be1e:	88 d8                	mov    al,bl
c001be20:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001be23:	88 c8                	mov    al,cl
c001be25:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001be28:	88 d0                	mov    al,dl
c001be2a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001be2d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001be30:	25 ff 00 00 00       	and    eax,0xff
c001be35:	83 c0 08             	add    eax,0x8
c001be38:	01 c0                	add    eax,eax
c001be3a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001be3d:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001be40:	25 ff 00 00 00       	and    eax,0xff
c001be45:	83 c0 08             	add    eax,0x8
c001be48:	01 c0                	add    eax,eax
c001be4a:	40                   	inc    eax
c001be4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001be4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001be51:	50                   	push   eax
c001be52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001be55:	e8 5a fe ff ff       	call   c001bcb4 <IOAPIC::read(int)>
c001be5a:	83 c4 08             	add    esp,0x8
c001be5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001be60:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001be67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001be6a:	c1 e0 18             	shl    eax,0x18
c001be6d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001be70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001be73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001be76:	52                   	push   edx
c001be77:	50                   	push   eax
c001be78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001be7b:	e8 50 ff ff ff       	call   c001bdd0 <IOAPIC::write(int, int)>
c001be80:	83 c4 0c             	add    esp,0xc
c001be83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001be86:	50                   	push   eax
c001be87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001be8a:	e8 25 fe ff ff       	call   c001bcb4 <IOAPIC::read(int)>
c001be8f:	83 c4 08             	add    esp,0x8
c001be92:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001be95:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001be9c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bea3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001beaa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001beae:	74 09                	je     c001beb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001beb0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001beb7:	eb 07                	jmp    c001bec0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001beb9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bec0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bec4:	74 09                	je     c001becf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001bec6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001becd:	eb 07                	jmp    c001bed6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001becf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bed6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bedd:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001bee0:	25 ff 00 00 00       	and    eax,0xff
c001bee5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bee8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001beeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001beee:	52                   	push   edx
c001beef:	50                   	push   eax
c001bef0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bef3:	e8 d8 fe ff ff       	call   c001bdd0 <IOAPIC::write(int, int)>
c001bef8:	83 c4 0c             	add    esp,0xc
c001befb:	90                   	nop
c001befc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001beff:	c9                   	leave  
c001bf00:	c3                   	ret    
c001bf01:	66 90                	xchg   ax,ax
c001bf03:	90                   	nop

c001bf04 <APICTimer::close(int, int, void*)>:
c001bf04:	b8 00 00 00 00       	mov    eax,0x0
c001bf09:	c3                   	ret    
c001bf0a:	66 90                	xchg   ax,ax

c001bf0c <apicTimerHandler(regs*, void*)>:
c001bf0c:	83 ec 0c             	sub    esp,0xc
c001bf0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf13:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf15:	b8 10 27 00 00       	mov    eax,0x2710
c001bf1a:	ba 00 00 00 00       	mov    edx,0x0
c001bf1f:	f7 f1                	div    ecx
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	50                   	push   eax
c001bf25:	e8 2a 13 ff ff       	call   c000d254 <timerHandler(unsigned int)>
c001bf2a:	83 c4 10             	add    esp,0x10
c001bf2d:	90                   	nop
c001bf2e:	83 c4 0c             	add    esp,0xc
c001bf31:	c3                   	ret    
c001bf32:	66 90                	xchg   ax,ax

c001bf34 <APICTimer::open(int, int, void*)>:
c001bf34:	83 ec 0c             	sub    esp,0xc
c001bf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf3d:	83 c0 24             	add    eax,0x24
c001bf40:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf42:	83 ec 08             	sub    esp,0x8
c001bf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf4d:	ff d0                	call   eax
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bf60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf68:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001bf6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf72:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	51                   	push   ecx
c001bf7c:	6a 01                	push   0x1
c001bf7e:	68 0c bf 01 c0       	push   0xc001bf0c
c001bf83:	52                   	push   edx
c001bf84:	50                   	push   eax
c001bf85:	e8 b2 f9 fe ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf8a:	83 c4 20             	add    esp,0x20
c001bf8d:	89 c2                	mov    edx,eax
c001bf8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf93:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bf99:	b8 00 00 00 00       	mov    eax,0x0
c001bf9e:	83 c4 0c             	add    esp,0xc
c001bfa1:	c3                   	ret    
c001bfa2:	66 90                	xchg   ax,ax

c001bfa4 <APICTimer::write(int)>:
c001bfa4:	83 ec 0c             	sub    esp,0xc
c001bfa7:	83 ec 0c             	sub    esp,0xc
c001bfaa:	68 b0 fc 01 c0       	push   0xc001fcb0
c001bfaf:	e8 bb 42 ff ff       	call   c001026f <KePanic(char const*)>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bfc5:	90                   	nop
c001bfc6:	83 c4 0c             	add    esp,0xc
c001bfc9:	c3                   	ret    
c001bfca:	66 90                	xchg   ax,ax

c001bfcc <APICTimer::APICTimer()>:
c001bfcc:	83 ec 0c             	sub    esp,0xc
c001bfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd3:	83 ec 08             	sub    esp,0x8
c001bfd6:	68 c0 fc 01 c0       	push   0xc001fcc0
c001bfdb:	50                   	push   eax
c001bfdc:	e8 a7 11 ff ff       	call   c000d188 <Timer::Timer(char const*)>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	ba d4 fc 01 c0       	mov    edx,0xc001fcd4
c001bfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfed:	89 10                	mov    DWORD PTR [eax],edx
c001bfef:	90                   	nop
c001bff0:	83 c4 0c             	add    esp,0xc
c001bff3:	c3                   	ret    

c001bff4 <PIT::write(int)>:
c001bff4:	83 ec 10             	sub    esp,0x10
c001bff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bffb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c009:	a3 a4 6b 02 c0       	mov    ds:0xc0026ba4,eax
c001c00e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c013:	99                   	cdq    
c001c014:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c01c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c023:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c028:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c02c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c031:	ee                   	out    dx,al
c001c032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c036:	25 ff 00 00 00       	and    eax,0xff
c001c03b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c042:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c046:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c04a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c04f:	ee                   	out    dx,al
c001c050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c054:	c1 f8 08             	sar    eax,0x8
c001c057:	25 ff 00 00 00       	and    eax,0xff
c001c05c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c063:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c067:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c06b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c070:	ee                   	out    dx,al
c001c071:	90                   	nop
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	c3                   	ret    
c001c076:	66 90                	xchg   ax,ax

c001c078 <pitHandler(regs*, void*)>:
c001c078:	83 ec 0c             	sub    esp,0xc
c001c07b:	8b 0d a4 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ba4
c001c081:	b8 10 27 00 00       	mov    eax,0x2710
c001c086:	99                   	cdq    
c001c087:	f7 f9                	idiv   ecx
c001c089:	83 ec 0c             	sub    esp,0xc
c001c08c:	50                   	push   eax
c001c08d:	e8 c2 11 ff ff       	call   c000d254 <timerHandler(unsigned int)>
c001c092:	83 c4 10             	add    esp,0x10
c001c095:	90                   	nop
c001c096:	83 c4 0c             	add    esp,0xc
c001c099:	c3                   	ret    
c001c09a:	66 90                	xchg   ax,ax

c001c09c <PIT::open(int, int, void*)>:
c001c09c:	83 ec 0c             	sub    esp,0xc
c001c09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0a5:	83 c0 24             	add    eax,0x24
c001c0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0aa:	83 ec 08             	sub    esp,0x8
c001c0ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b5:	ff d0                	call   eax
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0be:	83 ec 0c             	sub    esp,0xc
c001c0c1:	6a 00                	push   0x0
c001c0c3:	6a 01                	push   0x1
c001c0c5:	68 78 c0 01 c0       	push   0xc001c078
c001c0ca:	6a 00                	push   0x0
c001c0cc:	50                   	push   eax
c001c0cd:	e8 6a f8 fe ff       	call   c000b93c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0d2:	83 c4 20             	add    esp,0x20
c001c0d5:	89 c2                	mov    edx,eax
c001c0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c0e1:	b8 00 00 00 00       	mov    eax,0x0
c001c0e6:	83 c4 0c             	add    esp,0xc
c001c0e9:	c3                   	ret    
c001c0ea:	66 90                	xchg   ax,ax

c001c0ec <PIT::close(int, int, void*)>:
c001c0ec:	83 ec 0c             	sub    esp,0xc
c001c0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c101:	6a 01                	push   0x1
c001c103:	68 78 c0 01 c0       	push   0xc001c078
c001c108:	6a 00                	push   0x0
c001c10a:	50                   	push   eax
c001c10b:	e8 62 f8 fe ff       	call   c000b972 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	b8 00 00 00 00       	mov    eax,0x0
c001c118:	83 c4 0c             	add    esp,0xc
c001c11b:	c3                   	ret    

c001c11c <PIT::PIT()>:
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c123:	83 ec 08             	sub    esp,0x8
c001c126:	68 fc fc 01 c0       	push   0xc001fcfc
c001c12b:	50                   	push   eax
c001c12c:	e8 57 10 ff ff       	call   c000d188 <Timer::Timer(char const*)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	ba 24 fd 01 c0       	mov    edx,0xc001fd24
c001c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c13d:	89 10                	mov    DWORD PTR [eax],edx
c001c13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c149:	31 d2                	xor    edx,edx
c001c14b:	88 c2                	mov    dl,al
c001c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c151:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c162:	31 d2                	xor    edx,edx
c001c164:	88 c2                	mov    dl,al
c001c166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c173:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c179:	8d 50 01             	lea    edx,[eax+0x1]
c001c17c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c180:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c186:	31 d2                	xor    edx,edx
c001c188:	88 c2                	mov    dl,al
c001c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c192:	83 e1 3f             	and    ecx,0x3f
c001c195:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c199:	90                   	nop
c001c19a:	83 c4 0c             	add    esp,0xc
c001c19d:	c3                   	ret    
c001c19e:	66 90                	xchg   ax,ax

c001c1a0 <avxDetect>:
c001c1a0:	b8 01 00 00 00       	mov    eax,0x1
c001c1a5:	0f a2                	cpuid  
c001c1a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c1ad:	74 15                	je     c001c1c4 <avxDetect.noAVX>
c001c1af:	b8 01 00 00 00       	mov    eax,0x1
c001c1b4:	0f a2                	cpuid  
c001c1b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c1bc:	74 06                	je     c001c1c4 <avxDetect.noAVX>
c001c1be:	b8 01 00 00 00       	mov    eax,0x1
c001c1c3:	c3                   	ret    

c001c1c4 <avxDetect.noAVX>:
c001c1c4:	b8 00 00 00 00       	mov    eax,0x0
c001c1c9:	c3                   	ret    

c001c1ca <avxSave>:
c001c1ca:	53                   	push   ebx
c001c1cb:	52                   	push   edx
c001c1cc:	31 c0                	xor    eax,eax
c001c1ce:	48                   	dec    eax
c001c1cf:	89 c2                	mov    edx,eax
c001c1d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c1d5:	0f ae 23             	xsave  [ebx]
c001c1d8:	5a                   	pop    edx
c001c1d9:	5b                   	pop    ebx
c001c1da:	c3                   	ret    

c001c1db <avxLoad>:
c001c1db:	53                   	push   ebx
c001c1dc:	52                   	push   edx
c001c1dd:	31 c0                	xor    eax,eax
c001c1df:	48                   	dec    eax
c001c1e0:	89 c2                	mov    edx,eax
c001c1e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c1e6:	0f ae 2b             	xrstor [ebx]
c001c1e9:	5a                   	pop    edx
c001c1ea:	5b                   	pop    ebx
c001c1eb:	c3                   	ret    

c001c1ec <avxInit>:
c001c1ec:	e8 b7 02 00 00       	call   c001c4a8 <sseInit>
c001c1f1:	50                   	push   eax
c001c1f2:	51                   	push   ecx
c001c1f3:	0f 20 e0             	mov    eax,cr4
c001c1f6:	0d 00 00 04 00       	or     eax,0x40000
c001c1fb:	0f 22 e0             	mov    cr4,eax
c001c1fe:	31 c9                	xor    ecx,ecx
c001c200:	0f 01 d0             	xgetbv 
c001c203:	0d 07 00 00 00       	or     eax,0x7
c001c208:	0f 01 d1             	xsetbv 
c001c20b:	59                   	pop    ecx
c001c20c:	58                   	pop    eax
c001c20d:	c3                   	ret    

c001c20e <avxClose>:
c001c20e:	c3                   	ret    

c001c20f <wouldSheSayYes>:
c001c20f:	c3                   	ret    
c001c210:	49                   	dec    ecx
c001c211:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c215:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c219:	75 20                	jne    c001c23b <isr0+0xb>
c001c21b:	4e                   	dec    esi
c001c21c:	79 61                	jns    c001c27f <isr7+0x3>
c001c21e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c223:	66 90                	xchg   ax,ax
c001c225:	66 90                	xchg   ax,ax
c001c227:	66 90                	xchg   ax,ax
c001c229:	66 90                	xchg   ax,ax
c001c22b:	66 90                	xchg   ax,ax
c001c22d:	66 90                	xchg   ax,ax
c001c22f:	90                   	nop

c001c230 <isr0>:
c001c230:	fa                   	cli    
c001c231:	68 00 00 00 00       	push   0x0
c001c236:	68 00 00 00 00       	push   0x0
c001c23b:	e9 44 01 00 00       	jmp    c001c384 <int_common_stub>

c001c240 <isr1>:
c001c240:	fa                   	cli    
c001c241:	6a 00                	push   0x0
c001c243:	6a 01                	push   0x1
c001c245:	e9 3a 01 00 00       	jmp    c001c384 <int_common_stub>

c001c24a <isr2>:
c001c24a:	fa                   	cli    
c001c24b:	6a 00                	push   0x0
c001c24d:	6a 02                	push   0x2
c001c24f:	e9 30 01 00 00       	jmp    c001c384 <int_common_stub>

c001c254 <isr3>:
c001c254:	fa                   	cli    
c001c255:	6a 00                	push   0x0
c001c257:	6a 03                	push   0x3
c001c259:	e9 26 01 00 00       	jmp    c001c384 <int_common_stub>

c001c25e <isr4>:
c001c25e:	fa                   	cli    
c001c25f:	6a 00                	push   0x0
c001c261:	6a 04                	push   0x4
c001c263:	e9 1c 01 00 00       	jmp    c001c384 <int_common_stub>

c001c268 <isr5>:
c001c268:	fa                   	cli    
c001c269:	6a 00                	push   0x0
c001c26b:	6a 05                	push   0x5
c001c26d:	e9 12 01 00 00       	jmp    c001c384 <int_common_stub>

c001c272 <isr6>:
c001c272:	fa                   	cli    
c001c273:	6a 00                	push   0x0
c001c275:	6a 06                	push   0x6
c001c277:	e9 08 01 00 00       	jmp    c001c384 <int_common_stub>

c001c27c <isr7>:
c001c27c:	fa                   	cli    
c001c27d:	6a 00                	push   0x0
c001c27f:	6a 07                	push   0x7
c001c281:	e9 fe 00 00 00       	jmp    c001c384 <int_common_stub>

c001c286 <isr8>:
c001c286:	fa                   	cli    
c001c287:	6a 08                	push   0x8
c001c289:	e9 f6 00 00 00       	jmp    c001c384 <int_common_stub>

c001c28e <isr9>:
c001c28e:	fa                   	cli    
c001c28f:	6a 00                	push   0x0
c001c291:	6a 09                	push   0x9
c001c293:	e9 ec 00 00 00       	jmp    c001c384 <int_common_stub>

c001c298 <isr10>:
c001c298:	fa                   	cli    
c001c299:	6a 0a                	push   0xa
c001c29b:	e9 e4 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2a0 <isr11>:
c001c2a0:	fa                   	cli    
c001c2a1:	6a 0b                	push   0xb
c001c2a3:	e9 dc 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2a8 <isr12>:
c001c2a8:	fa                   	cli    
c001c2a9:	6a 0c                	push   0xc
c001c2ab:	e9 d4 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2b0 <isr13>:
c001c2b0:	fa                   	cli    
c001c2b1:	6a 0d                	push   0xd
c001c2b3:	e9 cc 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2b8 <isr14>:
c001c2b8:	fa                   	cli    
c001c2b9:	6a 0e                	push   0xe
c001c2bb:	e9 c4 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2c0 <isr15>:
c001c2c0:	fa                   	cli    
c001c2c1:	6a 00                	push   0x0
c001c2c3:	6a 0f                	push   0xf
c001c2c5:	e9 ba 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2ca <isr16>:
c001c2ca:	fa                   	cli    
c001c2cb:	6a 00                	push   0x0
c001c2cd:	6a 10                	push   0x10
c001c2cf:	e9 b0 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2d4 <isr17>:
c001c2d4:	fa                   	cli    
c001c2d5:	6a 00                	push   0x0
c001c2d7:	6a 11                	push   0x11
c001c2d9:	e9 a6 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2de <isr18>:
c001c2de:	fa                   	cli    
c001c2df:	6a 00                	push   0x0
c001c2e1:	6a 12                	push   0x12
c001c2e3:	e9 9c 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2e8 <irq3>:
c001c2e8:	fa                   	cli    
c001c2e9:	6a 00                	push   0x0
c001c2eb:	6a 23                	push   0x23
c001c2ed:	e9 92 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2f2 <irq4>:
c001c2f2:	fa                   	cli    
c001c2f3:	6a 00                	push   0x0
c001c2f5:	6a 24                	push   0x24
c001c2f7:	e9 88 00 00 00       	jmp    c001c384 <int_common_stub>

c001c2fc <irq5>:
c001c2fc:	fa                   	cli    
c001c2fd:	6a 00                	push   0x0
c001c2ff:	6a 25                	push   0x25
c001c301:	e9 7e 00 00 00       	jmp    c001c384 <int_common_stub>

c001c306 <irq6>:
c001c306:	fa                   	cli    
c001c307:	6a 00                	push   0x0
c001c309:	6a 26                	push   0x26
c001c30b:	e9 74 00 00 00       	jmp    c001c384 <int_common_stub>

c001c310 <irq7>:
c001c310:	fa                   	cli    
c001c311:	6a 00                	push   0x0
c001c313:	6a 27                	push   0x27
c001c315:	e9 6a 00 00 00       	jmp    c001c384 <int_common_stub>

c001c31a <irq8>:
c001c31a:	fa                   	cli    
c001c31b:	6a 00                	push   0x0
c001c31d:	6a 28                	push   0x28
c001c31f:	e9 60 00 00 00       	jmp    c001c384 <int_common_stub>

c001c324 <irq9>:
c001c324:	fa                   	cli    
c001c325:	6a 00                	push   0x0
c001c327:	6a 29                	push   0x29
c001c329:	e9 56 00 00 00       	jmp    c001c384 <int_common_stub>

c001c32e <irq10>:
c001c32e:	fa                   	cli    
c001c32f:	6a 00                	push   0x0
c001c331:	6a 2a                	push   0x2a
c001c333:	e9 4c 00 00 00       	jmp    c001c384 <int_common_stub>

c001c338 <irq11>:
c001c338:	fa                   	cli    
c001c339:	6a 00                	push   0x0
c001c33b:	6a 2b                	push   0x2b
c001c33d:	e9 42 00 00 00       	jmp    c001c384 <int_common_stub>

c001c342 <irq12>:
c001c342:	fa                   	cli    
c001c343:	6a 00                	push   0x0
c001c345:	6a 2c                	push   0x2c
c001c347:	e9 38 00 00 00       	jmp    c001c384 <int_common_stub>

c001c34c <irq13>:
c001c34c:	fa                   	cli    
c001c34d:	6a 00                	push   0x0
c001c34f:	6a 2d                	push   0x2d
c001c351:	e9 2e 00 00 00       	jmp    c001c384 <int_common_stub>

c001c356 <irq14>:
c001c356:	fa                   	cli    
c001c357:	6a 00                	push   0x0
c001c359:	6a 2e                	push   0x2e
c001c35b:	e9 24 00 00 00       	jmp    c001c384 <int_common_stub>

c001c360 <irq15>:
c001c360:	fa                   	cli    
c001c361:	6a 00                	push   0x0
c001c363:	6a 2f                	push   0x2f
c001c365:	e9 1a 00 00 00       	jmp    c001c384 <int_common_stub>

c001c36a <irq1>:
c001c36a:	fa                   	cli    
c001c36b:	6a 00                	push   0x0
c001c36d:	6a 21                	push   0x21
c001c36f:	eb 13                	jmp    c001c384 <int_common_stub>

c001c371 <irq2>:
c001c371:	fa                   	cli    
c001c372:	6a 00                	push   0x0
c001c374:	6a 22                	push   0x22
c001c376:	eb 0c                	jmp    c001c384 <int_common_stub>

c001c378 <isr96>:
c001c378:	6a 00                	push   0x0
c001c37a:	6a 60                	push   0x60
c001c37c:	fb                   	sti    
c001c37d:	eb 37                	jmp    c001c3b6 <syscall_common_stub>

c001c37f <irq0>:
c001c37f:	fa                   	cli    
c001c380:	6a 00                	push   0x0
c001c382:	6a 20                	push   0x20

c001c384 <int_common_stub>:
c001c384:	60                   	pusha  
c001c385:	1e                   	push   ds
c001c386:	06                   	push   es
c001c387:	0f a0                	push   fs
c001c389:	0f a8                	push   gs
c001c38b:	66 b8 10 00          	mov    ax,0x10
c001c38f:	66 8e d8             	mov    ds,ax
c001c392:	66 8e c0             	mov    es,ax
c001c395:	66 8e e0             	mov    fs,ax
c001c398:	66 8e e8             	mov    gs,ax
c001c39b:	54                   	push   esp
c001c39c:	fc                   	cld    
c001c39d:	e8 9a fa fe ff       	call   c000be3c <int_handler>
c001c3a2:	81 c4 04 00 00 00    	add    esp,0x4
c001c3a8:	0f a9                	pop    gs
c001c3aa:	0f a1                	pop    fs
c001c3ac:	07                   	pop    es
c001c3ad:	1f                   	pop    ds
c001c3ae:	61                   	popa   
c001c3af:	81 c4 08 00 00 00    	add    esp,0x8
c001c3b5:	cf                   	iret   

c001c3b6 <syscall_common_stub>:
c001c3b6:	60                   	pusha  
c001c3b7:	1e                   	push   ds
c001c3b8:	06                   	push   es
c001c3b9:	0f a0                	push   fs
c001c3bb:	0f a8                	push   gs
c001c3bd:	66 b8 10 00          	mov    ax,0x10
c001c3c1:	66 8e d8             	mov    ds,ax
c001c3c4:	66 8e c0             	mov    es,ax
c001c3c7:	66 8e e0             	mov    fs,ax
c001c3ca:	66 8e e8             	mov    gs,ax
c001c3cd:	54                   	push   esp
c001c3ce:	fc                   	cld    
c001c3cf:	e8 68 fa fe ff       	call   c000be3c <int_handler>
c001c3d4:	81 c4 04 00 00 00    	add    esp,0x4
c001c3da:	0f a9                	pop    gs
c001c3dc:	0f a1                	pop    fs
c001c3de:	07                   	pop    es
c001c3df:	1f                   	pop    ds
c001c3e0:	e8 de 43 ff ff       	call   c00107c3 <KiCheckSignalZ>
c001c3e5:	3d 00 00 00 00       	cmp    eax,0x0
c001c3ea:	74 1d                	je     c001c409 <syscall_common_stub.skipSignals>
c001c3ec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c3f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3f4:	89 e3                	mov    ebx,esp
c001c3f6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001c3f9:	51                   	push   ecx
c001c3fa:	68 11 c4 01 c0       	push   0xc001c411
c001c3ff:	89 dc                	mov    esp,ebx
c001c401:	61                   	popa   
c001c402:	81 c4 08 00 00 00    	add    esp,0x8
c001c408:	cf                   	iret   

c001c409 <syscall_common_stub.skipSignals>:
c001c409:	61                   	popa   
c001c40a:	81 c4 08 00 00 00    	add    esp,0x8
c001c410:	cf                   	iret   

c001c411 <irq16>:
c001c411:	fa                   	cli    
c001c412:	6a 00                	push   0x0
c001c414:	6a 30                	push   0x30
c001c416:	e9 69 ff ff ff       	jmp    c001c384 <int_common_stub>

c001c41b <irq17>:
c001c41b:	fa                   	cli    
c001c41c:	6a 00                	push   0x0
c001c41e:	6a 31                	push   0x31
c001c420:	e9 5f ff ff ff       	jmp    c001c384 <int_common_stub>

c001c425 <irq18>:
c001c425:	fa                   	cli    
c001c426:	6a 00                	push   0x0
c001c428:	6a 32                	push   0x32
c001c42a:	e9 55 ff ff ff       	jmp    c001c384 <int_common_stub>

c001c42f <irq19>:
c001c42f:	fa                   	cli    
c001c430:	6a 00                	push   0x0
c001c432:	6a 33                	push   0x33
c001c434:	e9 4b ff ff ff       	jmp    c001c384 <int_common_stub>

c001c439 <irq20>:
c001c439:	fa                   	cli    
c001c43a:	6a 00                	push   0x0
c001c43c:	6a 34                	push   0x34
c001c43e:	e9 41 ff ff ff       	jmp    c001c384 <int_common_stub>

c001c443 <irq21>:
c001c443:	fa                   	cli    
c001c444:	6a 00                	push   0x0
c001c446:	6a 35                	push   0x35
c001c448:	e9 37 ff ff ff       	jmp    c001c384 <int_common_stub>

c001c44d <irq22>:
c001c44d:	fa                   	cli    
c001c44e:	6a 00                	push   0x0
c001c450:	6a 36                	push   0x36
c001c452:	e9 2d ff ff ff       	jmp    c001c384 <int_common_stub>

c001c457 <irq23>:
c001c457:	fa                   	cli    
c001c458:	6a 00                	push   0x0
c001c45a:	6a 37                	push   0x37
c001c45c:	e9 23 ff ff ff       	jmp    c001c384 <int_common_stub>
c001c461:	66 90                	xchg   ax,ax
c001c463:	66 90                	xchg   ax,ax
c001c465:	66 90                	xchg   ax,ax
c001c467:	66 90                	xchg   ax,ax
c001c469:	66 90                	xchg   ax,ax
c001c46b:	66 90                	xchg   ax,ax
c001c46d:	66 90                	xchg   ax,ax
c001c46f:	90                   	nop

c001c470 <i386GetRDRAND>:
c001c470:	b9 64 00 00 00       	mov    ecx,0x64

c001c475 <retry>:
c001c475:	0f c7 f0             	rdrand eax
c001c478:	72 05                	jb     c001c47f <retry.done>
c001c47a:	e2 f9                	loop   c001c475 <retry>

c001c47c <retry.fail>:
c001c47c:	31 c0                	xor    eax,eax
c001c47e:	c3                   	ret    

c001c47f <retry.done>:
c001c47f:	c3                   	ret    

c001c480 <absolutelyNoChanceInHell>:
c001c480:	b8 01 00 00 00       	mov    eax,0x1
c001c485:	0f a2                	cpuid  
c001c487:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c48d:	74 06                	je     c001c495 <sseDetect.noSSE>
c001c48f:	b8 01 00 00 00       	mov    eax,0x1
c001c494:	c3                   	ret    

c001c495 <sseDetect.noSSE>:
c001c495:	31 c0                	xor    eax,eax
c001c497:	c3                   	ret    

c001c498 <sseSave>:
c001c498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49c:	0f ae 00             	fxsave [eax]
c001c49f:	c3                   	ret    

c001c4a0 <sseLoad>:
c001c4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a4:	0f ae 08             	fxrstor [eax]
c001c4a7:	c3                   	ret    

c001c4a8 <sseInit>:
c001c4a8:	e8 42 00 00 00       	call   c001c4ef <x87Init>
c001c4ad:	0f 20 e0             	mov    eax,cr4
c001c4b0:	66 0d 00 06          	or     ax,0x600
c001c4b4:	0f 22 e0             	mov    cr4,eax
c001c4b7:	c3                   	ret    

c001c4b8 <sseClose>:
c001c4b8:	c3                   	ret    
c001c4b9:	66 90                	xchg   ax,ax
c001c4bb:	66 90                	xchg   ax,ax
c001c4bd:	66 90                	xchg   ax,ax
c001c4bf:	90                   	nop

c001c4c0 <value_37F>:
c001c4c0:	7f 03                	jg     c001c4c5 <value_37A+0x1>

c001c4c2 <value_37E>:
c001c4c2:	7e 03                	jle    c001c4c7 <x87Detect+0x1>

c001c4c4 <value_37A>:
c001c4c4:	7a 03                	jp     c001c4c9 <x87Detect+0x3>

c001c4c6 <x87Detect>:
c001c4c6:	b8 01 00 00 00       	mov    eax,0x1
c001c4cb:	0f a2                	cpuid  
c001c4cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001c4d3:	74 06                	je     c001c4db <x87Detect.nox87>
c001c4d5:	b8 01 00 00 00       	mov    eax,0x1
c001c4da:	c3                   	ret    

c001c4db <x87Detect.nox87>:
c001c4db:	b8 00 00 00 00       	mov    eax,0x0
c001c4e0:	c3                   	ret    

c001c4e1 <x87Save>:
c001c4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e5:	dd 30                	fnsave [eax]
c001c4e7:	c3                   	ret    

c001c4e8 <x87Load>:
c001c4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ec:	dd 20                	frstor [eax]
c001c4ee:	c3                   	ret    

c001c4ef <x87Init>:
c001c4ef:	0f 20 c0             	mov    eax,cr0
c001c4f2:	66 25 fb ff          	and    ax,0xfffb
c001c4f6:	66 0d 22 00          	or     ax,0x22
c001c4fa:	0f 22 c0             	mov    cr0,eax
c001c4fd:	db e3                	fninit 
c001c4ff:	0f 06                	clts   
c001c501:	d9 2d c4 c4 01 c0    	fldcw  WORD PTR ds:0xc001c4c4
c001c507:	c3                   	ret    

c001c508 <x87Close>:
c001c508:	c3                   	ret    
c001c509:	66 90                	xchg   ax,ax
c001c50b:	90                   	nop

c001c50c <__do_global_ctors_aux>:
c001c50c:	a1 bc d4 01 c0       	mov    eax,ds:0xc001d4bc
c001c511:	83 f8 ff             	cmp    eax,0xffffffff
c001c514:	74 1a                	je     c001c530 <__do_global_ctors_aux+0x24>
c001c516:	55                   	push   ebp
c001c517:	89 e5                	mov    ebp,esp
c001c519:	53                   	push   ebx
c001c51a:	52                   	push   edx
c001c51b:	bb bc d4 01 c0       	mov    ebx,0xc001d4bc
c001c520:	ff d0                	call   eax
c001c522:	83 eb 04             	sub    ebx,0x4
c001c525:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c527:	83 f8 ff             	cmp    eax,0xffffffff
c001c52a:	75 f4                	jne    c001c520 <__do_global_ctors_aux+0x14>
c001c52c:	58                   	pop    eax
c001c52d:	5b                   	pop    ebx
c001c52e:	5d                   	pop    ebp
c001c52f:	c3                   	ret    
c001c530:	c3                   	ret    
c001c531:	66 90                	xchg   ax,ax
c001c533:	90                   	nop

c001c534 <__divdi3>:
c001c534:	55                   	push   ebp
c001c535:	57                   	push   edi
c001c536:	56                   	push   esi
c001c537:	53                   	push   ebx
c001c538:	83 ec 1c             	sub    esp,0x1c
c001c53b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c53f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c546:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c54a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c54e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c552:	85 db                	test   ebx,ebx
c001c554:	0f 88 8e 00 00 00    	js     c001c5e8 <__divdi3+0xb4>
c001c55a:	89 dd                	mov    ebp,ebx
c001c55c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c564:	89 d3                	mov    ebx,edx
c001c566:	85 d2                	test   edx,edx
c001c568:	79 0d                	jns    c001c577 <__divdi3+0x43>
c001c56a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c56e:	f7 d8                	neg    eax
c001c570:	83 d2 00             	adc    edx,0x0
c001c573:	f7 da                	neg    edx
c001c575:	89 d3                	mov    ebx,edx
c001c577:	89 c7                	mov    edi,eax
c001c579:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c57c:	85 db                	test   ebx,ebx
c001c57e:	75 48                	jne    c001c5c8 <__divdi3+0x94>
c001c580:	39 ef                	cmp    edi,ebp
c001c582:	76 24                	jbe    c001c5a8 <__divdi3+0x74>
c001c584:	89 ea                	mov    edx,ebp
c001c586:	f7 f7                	div    edi
c001c588:	89 c1                	mov    ecx,eax
c001c58a:	31 f6                	xor    esi,esi
c001c58c:	89 c8                	mov    eax,ecx
c001c58e:	89 f2                	mov    edx,esi
c001c590:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c594:	85 c9                	test   ecx,ecx
c001c596:	74 07                	je     c001c59f <__divdi3+0x6b>
c001c598:	f7 d8                	neg    eax
c001c59a:	83 d2 00             	adc    edx,0x0
c001c59d:	f7 da                	neg    edx
c001c59f:	83 c4 1c             	add    esp,0x1c
c001c5a2:	5b                   	pop    ebx
c001c5a3:	5e                   	pop    esi
c001c5a4:	5f                   	pop    edi
c001c5a5:	5d                   	pop    ebp
c001c5a6:	c3                   	ret    
c001c5a7:	90                   	nop
c001c5a8:	85 ff                	test   edi,edi
c001c5aa:	75 0b                	jne    c001c5b7 <__divdi3+0x83>
c001c5ac:	b8 01 00 00 00       	mov    eax,0x1
c001c5b1:	31 d2                	xor    edx,edx
c001c5b3:	f7 f3                	div    ebx
c001c5b5:	89 c7                	mov    edi,eax
c001c5b7:	31 d2                	xor    edx,edx
c001c5b9:	89 e8                	mov    eax,ebp
c001c5bb:	f7 f7                	div    edi
c001c5bd:	89 c6                	mov    esi,eax
c001c5bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5c2:	f7 f7                	div    edi
c001c5c4:	89 c1                	mov    ecx,eax
c001c5c6:	eb c4                	jmp    c001c58c <__divdi3+0x58>
c001c5c8:	39 eb                	cmp    ebx,ebp
c001c5ca:	77 3c                	ja     c001c608 <__divdi3+0xd4>
c001c5cc:	0f bd f3             	bsr    esi,ebx
c001c5cf:	83 f6 1f             	xor    esi,0x1f
c001c5d2:	75 40                	jne    c001c614 <__divdi3+0xe0>
c001c5d4:	39 eb                	cmp    ebx,ebp
c001c5d6:	72 09                	jb     c001c5e1 <__divdi3+0xad>
c001c5d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c5db:	0f 87 97 00 00 00    	ja     c001c678 <__divdi3+0x144>
c001c5e1:	b9 01 00 00 00       	mov    ecx,0x1
c001c5e6:	eb a4                	jmp    c001c58c <__divdi3+0x58>
c001c5e8:	f7 d9                	neg    ecx
c001c5ea:	83 d3 00             	adc    ebx,0x0
c001c5ed:	f7 db                	neg    ebx
c001c5ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c5f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c5f6:	89 dd                	mov    ebp,ebx
c001c5f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c600:	e9 5f ff ff ff       	jmp    c001c564 <__divdi3+0x30>
c001c605:	8d 76 00             	lea    esi,[esi+0x0]
c001c608:	31 f6                	xor    esi,esi
c001c60a:	31 c9                	xor    ecx,ecx
c001c60c:	e9 7b ff ff ff       	jmp    c001c58c <__divdi3+0x58>
c001c611:	8d 76 00             	lea    esi,[esi+0x0]
c001c614:	b8 20 00 00 00       	mov    eax,0x20
c001c619:	29 f0                	sub    eax,esi
c001c61b:	89 f1                	mov    ecx,esi
c001c61d:	d3 e3                	shl    ebx,cl
c001c61f:	89 fa                	mov    edx,edi
c001c621:	88 c1                	mov    cl,al
c001c623:	d3 ea                	shr    edx,cl
c001c625:	09 da                	or     edx,ebx
c001c627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c62b:	89 f1                	mov    ecx,esi
c001c62d:	d3 e7                	shl    edi,cl
c001c62f:	89 eb                	mov    ebx,ebp
c001c631:	88 c1                	mov    cl,al
c001c633:	d3 eb                	shr    ebx,cl
c001c635:	89 f1                	mov    ecx,esi
c001c637:	d3 e5                	shl    ebp,cl
c001c639:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c63c:	88 c1                	mov    cl,al
c001c63e:	d3 ea                	shr    edx,cl
c001c640:	09 d5                	or     ebp,edx
c001c642:	89 e8                	mov    eax,ebp
c001c644:	89 da                	mov    edx,ebx
c001c646:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c64a:	89 d3                	mov    ebx,edx
c001c64c:	89 c5                	mov    ebp,eax
c001c64e:	f7 e7                	mul    edi
c001c650:	39 d3                	cmp    ebx,edx
c001c652:	72 18                	jb     c001c66c <__divdi3+0x138>
c001c654:	74 0a                	je     c001c660 <__divdi3+0x12c>
c001c656:	89 e9                	mov    ecx,ebp
c001c658:	31 f6                	xor    esi,esi
c001c65a:	e9 2d ff ff ff       	jmp    c001c58c <__divdi3+0x58>
c001c65f:	90                   	nop
c001c660:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c663:	89 f1                	mov    ecx,esi
c001c665:	d3 e7                	shl    edi,cl
c001c667:	39 c7                	cmp    edi,eax
c001c669:	73 eb                	jae    c001c656 <__divdi3+0x122>
c001c66b:	90                   	nop
c001c66c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c66f:	31 f6                	xor    esi,esi
c001c671:	e9 16 ff ff ff       	jmp    c001c58c <__divdi3+0x58>
c001c676:	66 90                	xchg   ax,ax
c001c678:	31 c9                	xor    ecx,ecx
c001c67a:	e9 0d ff ff ff       	jmp    c001c58c <__divdi3+0x58>
c001c67f:	90                   	nop

c001c680 <__moddi3>:
c001c680:	55                   	push   ebp
c001c681:	57                   	push   edi
c001c682:	56                   	push   esi
c001c683:	53                   	push   ebx
c001c684:	83 ec 2c             	sub    esp,0x2c
c001c687:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c68b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c68f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c693:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c697:	85 db                	test   ebx,ebx
c001c699:	0f 88 85 00 00 00    	js     c001c724 <__moddi3+0xa4>
c001c69f:	89 de                	mov    esi,ebx
c001c6a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6a9:	89 d7                	mov    edi,edx
c001c6ab:	85 d2                	test   edx,edx
c001c6ad:	79 09                	jns    c001c6b8 <__moddi3+0x38>
c001c6af:	f7 d8                	neg    eax
c001c6b1:	83 d2 00             	adc    edx,0x0
c001c6b4:	f7 da                	neg    edx
c001c6b6:	89 d7                	mov    edi,edx
c001c6b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6bc:	89 cd                	mov    ebp,ecx
c001c6be:	85 ff                	test   edi,edi
c001c6c0:	75 52                	jne    c001c714 <__moddi3+0x94>
c001c6c2:	89 c3                	mov    ebx,eax
c001c6c4:	39 f0                	cmp    eax,esi
c001c6c6:	76 24                	jbe    c001c6ec <__moddi3+0x6c>
c001c6c8:	89 c8                	mov    eax,ecx
c001c6ca:	89 f2                	mov    edx,esi
c001c6cc:	f7 f3                	div    ebx
c001c6ce:	89 d6                	mov    esi,edx
c001c6d0:	89 f0                	mov    eax,esi
c001c6d2:	31 d2                	xor    edx,edx
c001c6d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6d8:	85 c9                	test   ecx,ecx
c001c6da:	74 07                	je     c001c6e3 <__moddi3+0x63>
c001c6dc:	f7 d8                	neg    eax
c001c6de:	83 d2 00             	adc    edx,0x0
c001c6e1:	f7 da                	neg    edx
c001c6e3:	83 c4 2c             	add    esp,0x2c
c001c6e6:	5b                   	pop    ebx
c001c6e7:	5e                   	pop    esi
c001c6e8:	5f                   	pop    edi
c001c6e9:	5d                   	pop    ebp
c001c6ea:	c3                   	ret    
c001c6eb:	90                   	nop
c001c6ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c6f0:	85 db                	test   ebx,ebx
c001c6f2:	75 0d                	jne    c001c701 <__moddi3+0x81>
c001c6f4:	b8 01 00 00 00       	mov    eax,0x1
c001c6f9:	31 d2                	xor    edx,edx
c001c6fb:	f7 f7                	div    edi
c001c6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c701:	89 f0                	mov    eax,esi
c001c703:	31 d2                	xor    edx,edx
c001c705:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c709:	f7 f7                	div    edi
c001c70b:	89 e8                	mov    eax,ebp
c001c70d:	f7 f7                	div    edi
c001c70f:	89 d6                	mov    esi,edx
c001c711:	eb bd                	jmp    c001c6d0 <__moddi3+0x50>
c001c713:	90                   	nop
c001c714:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c718:	39 f7                	cmp    edi,esi
c001c71a:	76 20                	jbe    c001c73c <__moddi3+0xbc>
c001c71c:	89 c8                	mov    eax,ecx
c001c71e:	89 f2                	mov    edx,esi
c001c720:	eb b2                	jmp    c001c6d4 <__moddi3+0x54>
c001c722:	66 90                	xchg   ax,ax
c001c724:	f7 d9                	neg    ecx
c001c726:	83 d3 00             	adc    ebx,0x0
c001c729:	f7 db                	neg    ebx
c001c72b:	89 de                	mov    esi,ebx
c001c72d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c735:	e9 6f ff ff ff       	jmp    c001c6a9 <__moddi3+0x29>
c001c73a:	66 90                	xchg   ax,ax
c001c73c:	0f bd c7             	bsr    eax,edi
c001c73f:	83 f0 1f             	xor    eax,0x1f
c001c742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c746:	75 24                	jne    c001c76c <__moddi3+0xec>
c001c748:	39 f7                	cmp    edi,esi
c001c74a:	72 06                	jb     c001c752 <__moddi3+0xd2>
c001c74c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c750:	77 0c                	ja     c001c75e <__moddi3+0xde>
c001c752:	89 e9                	mov    ecx,ebp
c001c754:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c758:	19 fe                	sbb    esi,edi
c001c75a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c762:	89 f2                	mov    edx,esi
c001c764:	e9 6b ff ff ff       	jmp    c001c6d4 <__moddi3+0x54>
c001c769:	8d 76 00             	lea    esi,[esi+0x0]
c001c76c:	b8 20 00 00 00       	mov    eax,0x20
c001c771:	89 c2                	mov    edx,eax
c001c773:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c777:	29 da                	sub    edx,ebx
c001c779:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c77d:	88 d9                	mov    cl,bl
c001c77f:	d3 e7                	shl    edi,cl
c001c781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c785:	88 d1                	mov    cl,dl
c001c787:	d3 e8                	shr    eax,cl
c001c789:	09 c7                	or     edi,eax
c001c78b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c78f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c793:	89 d8                	mov    eax,ebx
c001c795:	88 d9                	mov    cl,bl
c001c797:	d3 e7                	shl    edi,cl
c001c799:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c79d:	89 f3                	mov    ebx,esi
c001c79f:	88 d1                	mov    cl,dl
c001c7a1:	d3 eb                	shr    ebx,cl
c001c7a3:	89 c7                	mov    edi,eax
c001c7a5:	88 c1                	mov    cl,al
c001c7a7:	d3 e6                	shl    esi,cl
c001c7a9:	89 e8                	mov    eax,ebp
c001c7ab:	88 d1                	mov    cl,dl
c001c7ad:	d3 e8                	shr    eax,cl
c001c7af:	09 f0                	or     eax,esi
c001c7b1:	89 f9                	mov    ecx,edi
c001c7b3:	d3 e5                	shl    ebp,cl
c001c7b5:	89 da                	mov    edx,ebx
c001c7b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c7bb:	89 d3                	mov    ebx,edx
c001c7bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c7c1:	89 c6                	mov    esi,eax
c001c7c3:	89 d1                	mov    ecx,edx
c001c7c5:	39 d3                	cmp    ebx,edx
c001c7c7:	72 27                	jb     c001c7f0 <__moddi3+0x170>
c001c7c9:	74 21                	je     c001c7ec <__moddi3+0x16c>
c001c7cb:	29 f5                	sub    ebp,esi
c001c7cd:	19 cb                	sbb    ebx,ecx
c001c7cf:	89 de                	mov    esi,ebx
c001c7d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c7d5:	d3 e6                	shl    esi,cl
c001c7d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c7db:	89 f9                	mov    ecx,edi
c001c7dd:	d3 ed                	shr    ebp,cl
c001c7df:	09 ee                	or     esi,ebp
c001c7e1:	89 f0                	mov    eax,esi
c001c7e3:	d3 eb                	shr    ebx,cl
c001c7e5:	89 da                	mov    edx,ebx
c001c7e7:	e9 e8 fe ff ff       	jmp    c001c6d4 <__moddi3+0x54>
c001c7ec:	39 c5                	cmp    ebp,eax
c001c7ee:	73 db                	jae    c001c7cb <__moddi3+0x14b>
c001c7f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c7f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c7f8:	89 d1                	mov    ecx,edx
c001c7fa:	89 c6                	mov    esi,eax
c001c7fc:	eb cd                	jmp    c001c7cb <__moddi3+0x14b>
c001c7fe:	66 90                	xchg   ax,ax

c001c800 <__udivdi3>:
c001c800:	55                   	push   ebp
c001c801:	57                   	push   edi
c001c802:	56                   	push   esi
c001c803:	53                   	push   ebx
c001c804:	83 ec 1c             	sub    esp,0x1c
c001c807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c80b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c80f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c813:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c817:	85 d2                	test   edx,edx
c001c819:	75 41                	jne    c001c85c <__udivdi3+0x5c>
c001c81b:	39 f7                	cmp    edi,esi
c001c81d:	76 15                	jbe    c001c834 <__udivdi3+0x34>
c001c81f:	89 e8                	mov    eax,ebp
c001c821:	89 f2                	mov    edx,esi
c001c823:	f7 f7                	div    edi
c001c825:	31 db                	xor    ebx,ebx
c001c827:	89 da                	mov    edx,ebx
c001c829:	83 c4 1c             	add    esp,0x1c
c001c82c:	5b                   	pop    ebx
c001c82d:	5e                   	pop    esi
c001c82e:	5f                   	pop    edi
c001c82f:	5d                   	pop    ebp
c001c830:	c3                   	ret    
c001c831:	8d 76 00             	lea    esi,[esi+0x0]
c001c834:	89 f9                	mov    ecx,edi
c001c836:	85 ff                	test   edi,edi
c001c838:	75 0b                	jne    c001c845 <__udivdi3+0x45>
c001c83a:	b8 01 00 00 00       	mov    eax,0x1
c001c83f:	31 d2                	xor    edx,edx
c001c841:	f7 f7                	div    edi
c001c843:	89 c1                	mov    ecx,eax
c001c845:	31 d2                	xor    edx,edx
c001c847:	89 f0                	mov    eax,esi
c001c849:	f7 f1                	div    ecx
c001c84b:	89 c3                	mov    ebx,eax
c001c84d:	89 e8                	mov    eax,ebp
c001c84f:	f7 f1                	div    ecx
c001c851:	89 da                	mov    edx,ebx
c001c853:	83 c4 1c             	add    esp,0x1c
c001c856:	5b                   	pop    ebx
c001c857:	5e                   	pop    esi
c001c858:	5f                   	pop    edi
c001c859:	5d                   	pop    ebp
c001c85a:	c3                   	ret    
c001c85b:	90                   	nop
c001c85c:	39 f2                	cmp    edx,esi
c001c85e:	77 1c                	ja     c001c87c <__udivdi3+0x7c>
c001c860:	0f bd da             	bsr    ebx,edx
c001c863:	83 f3 1f             	xor    ebx,0x1f
c001c866:	75 24                	jne    c001c88c <__udivdi3+0x8c>
c001c868:	39 f2                	cmp    edx,esi
c001c86a:	72 08                	jb     c001c874 <__udivdi3+0x74>
c001c86c:	39 ef                	cmp    edi,ebp
c001c86e:	0f 87 84 00 00 00    	ja     c001c8f8 <__udivdi3+0xf8>
c001c874:	b8 01 00 00 00       	mov    eax,0x1
c001c879:	eb ac                	jmp    c001c827 <__udivdi3+0x27>
c001c87b:	90                   	nop
c001c87c:	31 db                	xor    ebx,ebx
c001c87e:	31 c0                	xor    eax,eax
c001c880:	89 da                	mov    edx,ebx
c001c882:	83 c4 1c             	add    esp,0x1c
c001c885:	5b                   	pop    ebx
c001c886:	5e                   	pop    esi
c001c887:	5f                   	pop    edi
c001c888:	5d                   	pop    ebp
c001c889:	c3                   	ret    
c001c88a:	66 90                	xchg   ax,ax
c001c88c:	b8 20 00 00 00       	mov    eax,0x20
c001c891:	29 d8                	sub    eax,ebx
c001c893:	88 d9                	mov    cl,bl
c001c895:	d3 e2                	shl    edx,cl
c001c897:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c89b:	89 fa                	mov    edx,edi
c001c89d:	88 c1                	mov    cl,al
c001c89f:	d3 ea                	shr    edx,cl
c001c8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8a5:	09 d1                	or     ecx,edx
c001c8a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c8ab:	88 d9                	mov    cl,bl
c001c8ad:	d3 e7                	shl    edi,cl
c001c8af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c8b3:	89 f7                	mov    edi,esi
c001c8b5:	88 c1                	mov    cl,al
c001c8b7:	d3 ef                	shr    edi,cl
c001c8b9:	88 d9                	mov    cl,bl
c001c8bb:	d3 e6                	shl    esi,cl
c001c8bd:	89 ea                	mov    edx,ebp
c001c8bf:	88 c1                	mov    cl,al
c001c8c1:	d3 ea                	shr    edx,cl
c001c8c3:	09 d6                	or     esi,edx
c001c8c5:	89 f0                	mov    eax,esi
c001c8c7:	89 fa                	mov    edx,edi
c001c8c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c8cd:	89 d7                	mov    edi,edx
c001c8cf:	89 c6                	mov    esi,eax
c001c8d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c8d5:	39 d7                	cmp    edi,edx
c001c8d7:	72 13                	jb     c001c8ec <__udivdi3+0xec>
c001c8d9:	74 09                	je     c001c8e4 <__udivdi3+0xe4>
c001c8db:	89 f0                	mov    eax,esi
c001c8dd:	31 db                	xor    ebx,ebx
c001c8df:	e9 43 ff ff ff       	jmp    c001c827 <__udivdi3+0x27>
c001c8e4:	88 d9                	mov    cl,bl
c001c8e6:	d3 e5                	shl    ebp,cl
c001c8e8:	39 c5                	cmp    ebp,eax
c001c8ea:	73 ef                	jae    c001c8db <__udivdi3+0xdb>
c001c8ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c8ef:	31 db                	xor    ebx,ebx
c001c8f1:	e9 31 ff ff ff       	jmp    c001c827 <__udivdi3+0x27>
c001c8f6:	66 90                	xchg   ax,ax
c001c8f8:	31 c0                	xor    eax,eax
c001c8fa:	e9 28 ff ff ff       	jmp    c001c827 <__udivdi3+0x27>
c001c8ff:	90                   	nop

c001c900 <__umoddi3>:
c001c900:	55                   	push   ebp
c001c901:	57                   	push   edi
c001c902:	56                   	push   esi
c001c903:	53                   	push   ebx
c001c904:	83 ec 1c             	sub    esp,0x1c
c001c907:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c90b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c90f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c913:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c917:	89 da                	mov    edx,ebx
c001c919:	85 c0                	test   eax,eax
c001c91b:	75 37                	jne    c001c954 <__umoddi3+0x54>
c001c91d:	39 df                	cmp    edi,ebx
c001c91f:	76 13                	jbe    c001c934 <__umoddi3+0x34>
c001c921:	89 f0                	mov    eax,esi
c001c923:	f7 f7                	div    edi
c001c925:	89 d0                	mov    eax,edx
c001c927:	31 d2                	xor    edx,edx
c001c929:	83 c4 1c             	add    esp,0x1c
c001c92c:	5b                   	pop    ebx
c001c92d:	5e                   	pop    esi
c001c92e:	5f                   	pop    edi
c001c92f:	5d                   	pop    ebp
c001c930:	c3                   	ret    
c001c931:	8d 76 00             	lea    esi,[esi+0x0]
c001c934:	89 fd                	mov    ebp,edi
c001c936:	85 ff                	test   edi,edi
c001c938:	75 0b                	jne    c001c945 <__umoddi3+0x45>
c001c93a:	b8 01 00 00 00       	mov    eax,0x1
c001c93f:	31 d2                	xor    edx,edx
c001c941:	f7 f7                	div    edi
c001c943:	89 c5                	mov    ebp,eax
c001c945:	89 d8                	mov    eax,ebx
c001c947:	31 d2                	xor    edx,edx
c001c949:	f7 f5                	div    ebp
c001c94b:	89 f0                	mov    eax,esi
c001c94d:	f7 f5                	div    ebp
c001c94f:	89 d0                	mov    eax,edx
c001c951:	eb d4                	jmp    c001c927 <__umoddi3+0x27>
c001c953:	90                   	nop
c001c954:	89 f1                	mov    ecx,esi
c001c956:	39 d8                	cmp    eax,ebx
c001c958:	76 0a                	jbe    c001c964 <__umoddi3+0x64>
c001c95a:	89 f0                	mov    eax,esi
c001c95c:	83 c4 1c             	add    esp,0x1c
c001c95f:	5b                   	pop    ebx
c001c960:	5e                   	pop    esi
c001c961:	5f                   	pop    edi
c001c962:	5d                   	pop    ebp
c001c963:	c3                   	ret    
c001c964:	0f bd e8             	bsr    ebp,eax
c001c967:	83 f5 1f             	xor    ebp,0x1f
c001c96a:	75 1c                	jne    c001c988 <__umoddi3+0x88>
c001c96c:	39 d8                	cmp    eax,ebx
c001c96e:	72 04                	jb     c001c974 <__umoddi3+0x74>
c001c970:	39 f7                	cmp    edi,esi
c001c972:	77 08                	ja     c001c97c <__umoddi3+0x7c>
c001c974:	89 da                	mov    edx,ebx
c001c976:	29 fe                	sub    esi,edi
c001c978:	19 c2                	sbb    edx,eax
c001c97a:	89 f1                	mov    ecx,esi
c001c97c:	89 c8                	mov    eax,ecx
c001c97e:	83 c4 1c             	add    esp,0x1c
c001c981:	5b                   	pop    ebx
c001c982:	5e                   	pop    esi
c001c983:	5f                   	pop    edi
c001c984:	5d                   	pop    ebp
c001c985:	c3                   	ret    
c001c986:	66 90                	xchg   ax,ax
c001c988:	ba 20 00 00 00       	mov    edx,0x20
c001c98d:	29 ea                	sub    edx,ebp
c001c98f:	89 e9                	mov    ecx,ebp
c001c991:	d3 e0                	shl    eax,cl
c001c993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c997:	89 f8                	mov    eax,edi
c001c999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c99d:	88 d1                	mov    cl,dl
c001c99f:	d3 e8                	shr    eax,cl
c001c9a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9a5:	09 c1                	or     ecx,eax
c001c9a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9ab:	89 e9                	mov    ecx,ebp
c001c9ad:	d3 e7                	shl    edi,cl
c001c9af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c9b3:	89 d8                	mov    eax,ebx
c001c9b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9b9:	88 d1                	mov    cl,dl
c001c9bb:	d3 e8                	shr    eax,cl
c001c9bd:	89 c7                	mov    edi,eax
c001c9bf:	89 e9                	mov    ecx,ebp
c001c9c1:	d3 e3                	shl    ebx,cl
c001c9c3:	89 f0                	mov    eax,esi
c001c9c5:	88 d1                	mov    cl,dl
c001c9c7:	d3 e8                	shr    eax,cl
c001c9c9:	09 d8                	or     eax,ebx
c001c9cb:	89 e9                	mov    ecx,ebp
c001c9cd:	d3 e6                	shl    esi,cl
c001c9cf:	89 f3                	mov    ebx,esi
c001c9d1:	89 fa                	mov    edx,edi
c001c9d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c9d7:	89 d1                	mov    ecx,edx
c001c9d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c9dd:	89 c6                	mov    esi,eax
c001c9df:	89 d7                	mov    edi,edx
c001c9e1:	39 d1                	cmp    ecx,edx
c001c9e3:	72 27                	jb     c001ca0c <__umoddi3+0x10c>
c001c9e5:	74 21                	je     c001ca08 <__umoddi3+0x108>
c001c9e7:	89 ca                	mov    edx,ecx
c001c9e9:	29 f3                	sub    ebx,esi
c001c9eb:	19 fa                	sbb    edx,edi
c001c9ed:	89 d0                	mov    eax,edx
c001c9ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c9f3:	d3 e0                	shl    eax,cl
c001c9f5:	89 e9                	mov    ecx,ebp
c001c9f7:	d3 eb                	shr    ebx,cl
c001c9f9:	09 d8                	or     eax,ebx
c001c9fb:	d3 ea                	shr    edx,cl
c001c9fd:	83 c4 1c             	add    esp,0x1c
c001ca00:	5b                   	pop    ebx
c001ca01:	5e                   	pop    esi
c001ca02:	5f                   	pop    edi
c001ca03:	5d                   	pop    ebp
c001ca04:	c3                   	ret    
c001ca05:	8d 76 00             	lea    esi,[esi+0x0]
c001ca08:	39 c3                	cmp    ebx,eax
c001ca0a:	73 db                	jae    c001c9e7 <__umoddi3+0xe7>
c001ca0c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ca10:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ca14:	89 d7                	mov    edi,edx
c001ca16:	89 c6                	mov    esi,eax
c001ca18:	eb cd                	jmp    c001c9e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001ca1a <_init>:
c001ca1a:	55                   	push   ebp
c001ca1b:	89 e5                	mov    ebp,esp
c001ca1d:	e8 d2 36 fe ff       	call   c00000f4 <frame_dummy>
c001ca22:	e8 e5 fa ff ff       	call   c001c50c <__do_global_ctors_aux>
c001ca27:	5d                   	pop    ebp
c001ca28:	c3                   	ret    

Disassembly of section .fini:

c001ca29 <_fini>:
c001ca29:	55                   	push   ebp
c001ca2a:	89 e5                	mov    ebp,esp
c001ca2c:	e8 53 36 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ca31:	5d                   	pop    ebp
c001ca32:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ca34 <Computer::~Computer()>:
c001ca34:	83 ec 0c             	sub    esp,0xc
c001ca37:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c001ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca40:	89 10                	mov    DWORD PTR [eax],edx
c001ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca46:	83 ec 0c             	sub    esp,0xc
c001ca49:	50                   	push   eax
c001ca4a:	e8 43 ee fe ff       	call   c000b892 <Device::~Device()>
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	90                   	nop
c001ca53:	83 c4 0c             	add    esp,0xc
c001ca56:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ca58 <Computer::~Computer()>:
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	83 ec 0c             	sub    esp,0xc
c001ca5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca62:	e8 cd ff ff ff       	call   c001ca34 <Computer::~Computer()>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	83 ec 08             	sub    esp,0x8
c001ca6d:	68 70 01 00 00       	push   0x170
c001ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca76:	e8 e1 d9 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	83 c4 0c             	add    esp,0xc
c001ca81:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ca82 <idleCommon()>:
c001ca82:	83 ec 0c             	sub    esp,0xc
c001ca85:	fa                   	cli    
c001ca86:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001ca8c:	e8 03 6d ff ff       	call   c0013794 <schedule()>
c001ca91:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001ca96:	48                   	dec    eax
c001ca97:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001ca9c:	75 01                	jne    c001ca9f <idleCommon()+0x1d>
c001ca9e:	fb                   	sti    
c001ca9f:	83 c4 0c             	add    esp,0xc
c001caa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001caa4 <LinkedList<UnixFile>::~LinkedList()>:
c001caa4:	90                   	nop
c001caa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001caa6 <LinkedList<UnixFile>::LinkedList()>:
c001caa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cabb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cabf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cadf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cae6:	90                   	nop
c001cae7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cae8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001caf0:	75 10                	jne    c001cb02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	68 0c df 01 c0       	push   0xc001df0c
c001cafa:	e8 70 37 ff ff       	call   c001026f <KePanic(char const*)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	74 34                	je     c001cb40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb13:	85 c0                	test   eax,eax
c001cb15:	74 29                	je     c001cb40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb3e:	eb 65                	jmp    c001cba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb44:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb46:	85 c0                	test   eax,eax
c001cb48:	75 4b                	jne    c001cb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb51:	85 c0                	test   eax,eax
c001cb53:	75 40                	jne    c001cb95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb5d:	89 10                	mov    DWORD PTR [eax],edx
c001cb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb7f:	85 c0                	test   eax,eax
c001cb81:	74 22                	je     c001cba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	68 2e df 01 c0       	push   0xc001df2e
c001cb8b:	e8 df 36 ff ff       	call   c001026f <KePanic(char const*)>
c001cb90:	83 c4 10             	add    esp,0x10
c001cb93:	eb 10                	jmp    c001cba5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cb95:	83 ec 0c             	sub    esp,0xc
c001cb98:	68 38 df 01 c0       	push   0xc001df38
c001cb9d:	e8 cd 36 ff ff       	call   c001026f <KePanic(char const*)>
c001cba2:	83 c4 10             	add    esp,0x10
c001cba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cbac:	8d 50 01             	lea    edx,[eax+0x1]
c001cbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cbb6:	90                   	nop
c001cbb7:	83 c4 0c             	add    esp,0xc
c001cbba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001cbbc <LinkedList<UnixFile>::getFirstElement()>:
c001cbbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001cbc4 <LinkedList<UnixFile>::removeFirst()>:
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbcd:	85 c0                	test   eax,eax
c001cbcf:	75 12                	jne    c001cbe3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001cbd1:	83 ec 0c             	sub    esp,0xc
c001cbd4:	68 44 df 01 c0       	push   0xc001df44
c001cbd9:	e8 91 36 ff ff       	call   c001026f <KePanic(char const*)>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	eb 7e                	jmp    c001cc61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001cbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cbed:	85 c0                	test   eax,eax
c001cbef:	74 10                	je     c001cc01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001cbf1:	83 ec 0c             	sub    esp,0xc
c001cbf4:	68 8f df 01 c0       	push   0xc001df8f
c001cbf9:	e8 71 36 ff ff       	call   c001026f <KePanic(char const*)>
c001cbfe:	83 c4 10             	add    esp,0x10
c001cc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc05:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc0a:	85 c0                	test   eax,eax
c001cc0c:	75 33                	jne    c001cc41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc2a:	83 f8 01             	cmp    eax,0x1
c001cc2d:	74 21                	je     c001cc50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cc2f:	83 ec 0c             	sub    esp,0xc
c001cc32:	68 68 df 01 c0       	push   0xc001df68
c001cc37:	e8 33 36 ff ff       	call   c001026f <KePanic(char const*)>
c001cc3c:	83 c4 10             	add    esp,0x10
c001cc3f:	eb 0f                	jmp    c001cc50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc45:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4e:	89 10                	mov    DWORD PTR [eax],edx
c001cc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc57:	8d 50 ff             	lea    edx,[eax-0x1]
c001cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc61:	83 c4 0c             	add    esp,0xc
c001cc64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cc66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cc6e <DriverlessDevice::~DriverlessDevice()>:
c001cc6e:	ba dc e5 01 c0       	mov    edx,0xc001e5dc
c001cc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc77:	89 10                	mov    DWORD PTR [eax],edx
c001cc79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc7d:	50                   	push   eax
c001cc7e:	e8 0f ec fe ff       	call   c000b892 <Device::~Device()>
c001cc83:	83 c4 04             	add    esp,0x4
c001cc86:	90                   	nop
c001cc87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cc88 <DriverlessDevice::~DriverlessDevice()>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	83 ec 0c             	sub    esp,0xc
c001cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc92:	e8 d7 ff ff ff       	call   c001cc6e <DriverlessDevice::~DriverlessDevice()>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	83 ec 08             	sub    esp,0x8
c001cc9d:	68 58 01 00 00       	push   0x158
c001cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca6:	e8 b1 d7 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	83 c4 0c             	add    esp,0xc
c001ccb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ccb2 <LinkedList<Device>::addElement(Device*)>:
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ccba:	75 10                	jne    c001cccc <LinkedList<Device>::addElement(Device*)+0x1a>
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	68 0c df 01 c0       	push   0xc001df0c
c001ccc4:	e8 a6 35 ff ff       	call   c001026f <KePanic(char const*)>
c001ccc9:	83 c4 10             	add    esp,0x10
c001cccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccd2:	85 c0                	test   eax,eax
c001ccd4:	74 3a                	je     c001cd10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccdd:	85 c0                	test   eax,eax
c001ccdf:	74 2f                	je     c001cd10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ccfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cd0e:	eb 68                	jmp    c001cd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd14:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd16:	85 c0                	test   eax,eax
c001cd18:	75 4e                	jne    c001cd68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001cd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd21:	85 c0                	test   eax,eax
c001cd23:	75 43                	jne    c001cd68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001cd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd2d:	89 10                	mov    DWORD PTR [eax],edx
c001cd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd52:	85 c0                	test   eax,eax
c001cd54:	74 22                	je     c001cd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cd56:	83 ec 0c             	sub    esp,0xc
c001cd59:	68 2e df 01 c0       	push   0xc001df2e
c001cd5e:	e8 0c 35 ff ff       	call   c001026f <KePanic(char const*)>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	eb 10                	jmp    c001cd78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	68 38 df 01 c0       	push   0xc001df38
c001cd70:	e8 fa 34 ff ff       	call   c001026f <KePanic(char const*)>
c001cd75:	83 c4 10             	add    esp,0x10
c001cd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd7f:	8d 50 01             	lea    edx,[eax+0x1]
c001cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd89:	90                   	nop
c001cd8a:	83 c4 0c             	add    esp,0xc
c001cd8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001cd8e <LinkedList<Device>::LinkedList()>:
c001cd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cda3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cda7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cdae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cdce:	90                   	nop
c001cdcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001cdd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001cdd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdd6:	85 c0                	test   eax,eax
c001cdd8:	75 0e                	jne    c001cde8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cdda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cde1:	85 c0                	test   eax,eax
c001cde3:	75 03                	jne    c001cde8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cde5:	b0 01                	mov    al,0x1
c001cde7:	c3                   	ret    
c001cde8:	b0 00                	mov    al,0x0
c001cdea:	90                   	nop
c001cdeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cdec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001cdf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001cdf4:	83 ec 0c             	sub    esp,0xc
c001cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdfd:	85 c0                	test   eax,eax
c001cdff:	75 17                	jne    c001ce18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ce01:	83 ec 0c             	sub    esp,0xc
c001ce04:	68 44 df 01 c0       	push   0xc001df44
c001ce09:	e8 61 34 ff ff       	call   c001026f <KePanic(char const*)>
c001ce0e:	83 c4 10             	add    esp,0x10
c001ce11:	e9 92 00 00 00       	jmp    c001cea8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001ce16:	66 90                	xchg   ax,ax
c001ce18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ce22:	85 c0                	test   eax,eax
c001ce24:	0f 95 c0             	setne  al
c001ce27:	84 c0                	test   al,al
c001ce29:	74 11                	je     c001ce3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001ce2b:	83 ec 0c             	sub    esp,0xc
c001ce2e:	68 8f df 01 c0       	push   0xc001df8f
c001ce33:	e8 37 34 ff ff       	call   c001026f <KePanic(char const*)>
c001ce38:	83 c4 10             	add    esp,0x10
c001ce3b:	90                   	nop
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ce45:	85 c0                	test   eax,eax
c001ce47:	0f 94 c0             	sete   al
c001ce4a:	84 c0                	test   al,al
c001ce4c:	74 36                	je     c001ce84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001ce4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce6a:	83 f8 01             	cmp    eax,0x1
c001ce6d:	74 25                	je     c001ce94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001ce6f:	83 ec 0c             	sub    esp,0xc
c001ce72:	68 68 df 01 c0       	push   0xc001df68
c001ce77:	e8 f3 33 ff ff       	call   c001026f <KePanic(char const*)>
c001ce7c:	83 c4 10             	add    esp,0x10
c001ce7f:	eb 13                	jmp    c001ce94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001ce81:	8d 76 00             	lea    esi,[esi+0x0]
c001ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce88:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce8a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ce8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce91:	89 10                	mov    DWORD PTR [eax],edx
c001ce93:	90                   	nop
c001ce94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce9b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ce9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cea5:	8d 76 00             	lea    esi,[esi+0x0]
c001cea8:	83 c4 0c             	add    esp,0xc
c001ceab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ceac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ceac:	83 ec 0c             	sub    esp,0xc
c001ceaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ceb4:	75 12                	jne    c001cec8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	68 0c df 01 c0       	push   0xc001df0c
c001cebe:	e8 ac 33 ff ff       	call   c001026f <KePanic(char const*)>
c001cec3:	83 c4 10             	add    esp,0x10
c001cec6:	66 90                	xchg   ax,ax
c001cec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cecc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cece:	85 c0                	test   eax,eax
c001ced0:	74 36                	je     c001cf08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ced2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ced9:	85 c0                	test   eax,eax
c001cedb:	74 2b                	je     c001cf08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cee4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cee8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ceeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cef3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cefa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cefd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cf04:	eb 6a                	jmp    c001cf70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cf06:	66 90                	xchg   ax,ax
c001cf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf0e:	85 c0                	test   eax,eax
c001cf10:	75 4e                	jne    c001cf60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cf12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf19:	85 c0                	test   eax,eax
c001cf1b:	75 43                	jne    c001cf60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cf1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf25:	89 10                	mov    DWORD PTR [eax],edx
c001cf27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cf32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cf39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cf40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf47:	85 c0                	test   eax,eax
c001cf49:	74 25                	je     c001cf70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cf4b:	83 ec 0c             	sub    esp,0xc
c001cf4e:	68 2e df 01 c0       	push   0xc001df2e
c001cf53:	e8 17 33 ff ff       	call   c001026f <KePanic(char const*)>
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	eb 13                	jmp    c001cf70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cf5d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	68 38 df 01 c0       	push   0xc001df38
c001cf68:	e8 02 33 ff ff       	call   c001026f <KePanic(char const*)>
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf77:	8d 50 01             	lea    edx,[eax+0x1]
c001cf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf81:	90                   	nop
c001cf82:	83 c4 0c             	add    esp,0xc
c001cf85:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001cf88 <ACPI::~ACPI()>:
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	ba 44 eb 01 c0       	mov    edx,0xc001eb44
c001cf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf94:	89 10                	mov    DWORD PTR [eax],edx
c001cf96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf9a:	83 ec 0c             	sub    esp,0xc
c001cf9d:	50                   	push   eax
c001cf9e:	e8 ef e8 fe ff       	call   c000b892 <Device::~Device()>
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	90                   	nop
c001cfa7:	83 c4 0c             	add    esp,0xc
c001cfaa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001cfac <ACPI::~ACPI()>:
c001cfac:	83 ec 0c             	sub    esp,0xc
c001cfaf:	83 ec 0c             	sub    esp,0xc
c001cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfb6:	e8 cd ff ff ff       	call   c001cf88 <ACPI::~ACPI()>
c001cfbb:	83 c4 10             	add    esp,0x10
c001cfbe:	83 ec 08             	sub    esp,0x8
c001cfc1:	68 64 12 00 00       	push   0x1264
c001cfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfca:	e8 8d d4 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001cfcf:	83 c4 10             	add    esp,0x10
c001cfd2:	83 c4 0c             	add    esp,0xc
c001cfd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001cfd8 <LinkedList<Device>::~LinkedList()>:
c001cfd8:	90                   	nop
c001cfd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001cfdc <LinkedList<Device>::isEmpty()>:
c001cfdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfe2:	85 c0                	test   eax,eax
c001cfe4:	75 0e                	jne    c001cff4 <LinkedList<Device>::isEmpty()+0x18>
c001cfe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfed:	85 c0                	test   eax,eax
c001cfef:	75 03                	jne    c001cff4 <LinkedList<Device>::isEmpty()+0x18>
c001cff1:	b0 01                	mov    al,0x1
c001cff3:	c3                   	ret    
c001cff4:	b0 00                	mov    al,0x0
c001cff6:	90                   	nop
c001cff7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001cff8 <LinkedList<Device>::getFirstElement()>:
c001cff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cffe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d000 <LinkedList<Device>::removeFirst()>:
c001d000:	83 ec 0c             	sub    esp,0xc
c001d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d007:	8b 00                	mov    eax,DWORD PTR [eax]
c001d009:	85 c0                	test   eax,eax
c001d00b:	75 17                	jne    c001d024 <LinkedList<Device>::removeFirst()+0x24>
c001d00d:	83 ec 0c             	sub    esp,0xc
c001d010:	68 44 df 01 c0       	push   0xc001df44
c001d015:	e8 55 32 ff ff       	call   c001026f <KePanic(char const*)>
c001d01a:	83 c4 10             	add    esp,0x10
c001d01d:	e9 92 00 00 00       	jmp    c001d0b4 <LinkedList<Device>::removeFirst()+0xb4>
c001d022:	66 90                	xchg   ax,ax
c001d024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d02b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d031:	85 c0                	test   eax,eax
c001d033:	74 13                	je     c001d048 <LinkedList<Device>::removeFirst()+0x48>
c001d035:	83 ec 0c             	sub    esp,0xc
c001d038:	68 8f df 01 c0       	push   0xc001df8f
c001d03d:	e8 2d 32 ff ff       	call   c001026f <KePanic(char const*)>
c001d042:	83 c4 10             	add    esp,0x10
c001d045:	8d 76 00             	lea    esi,[esi+0x0]
c001d048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d04e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d054:	85 c0                	test   eax,eax
c001d056:	75 34                	jne    c001d08c <LinkedList<Device>::removeFirst()+0x8c>
c001d058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d066:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d071:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d074:	83 f8 01             	cmp    eax,0x1
c001d077:	74 27                	je     c001d0a0 <LinkedList<Device>::removeFirst()+0xa0>
c001d079:	83 ec 0c             	sub    esp,0xc
c001d07c:	68 68 df 01 c0       	push   0xc001df68
c001d081:	e8 e9 31 ff ff       	call   c001026f <KePanic(char const*)>
c001d086:	83 c4 10             	add    esp,0x10
c001d089:	eb 15                	jmp    c001d0a0 <LinkedList<Device>::removeFirst()+0xa0>
c001d08b:	90                   	nop
c001d08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d090:	8b 00                	mov    eax,DWORD PTR [eax]
c001d092:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09c:	89 10                	mov    DWORD PTR [eax],edx
c001d09e:	66 90                	xchg   ax,ax
c001d0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d0a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001d0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d0b4:	83 c4 0c             	add    esp,0xc
c001d0b7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d0b8 <CPU::~CPU()>:
c001d0b8:	83 ec 0c             	sub    esp,0xc
c001d0bb:	ba e0 ec 01 c0       	mov    edx,0xc001ece0
c001d0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c4:	89 10                	mov    DWORD PTR [eax],edx
c001d0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ca:	83 ec 0c             	sub    esp,0xc
c001d0cd:	50                   	push   eax
c001d0ce:	e8 bf e7 fe ff       	call   c000b892 <Device::~Device()>
c001d0d3:	83 c4 10             	add    esp,0x10
c001d0d6:	90                   	nop
c001d0d7:	83 c4 0c             	add    esp,0xc
c001d0da:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d0dc <CPU::~CPU()>:
c001d0dc:	83 ec 0c             	sub    esp,0xc
c001d0df:	83 ec 0c             	sub    esp,0xc
c001d0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e6:	e8 cd ff ff ff       	call   c001d0b8 <CPU::~CPU()>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	83 ec 08             	sub    esp,0x8
c001d0f1:	68 94 11 00 00       	push   0x1194
c001d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0fa:	e8 5d d3 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d0ff:	83 c4 10             	add    esp,0x10
c001d102:	83 c4 0c             	add    esp,0xc
c001d105:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d108 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d108:	90                   	nop
c001d109:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d10c <ThreadControlBlock::ThreadControlBlock()>:
c001d10c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d110:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d11b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d126:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d12d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d131:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d13c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d147:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d14b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d14f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d153:	90                   	nop
c001d154:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d158 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d15c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d166:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d16d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d171:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d17c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d186:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d18d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d191:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d198:	90                   	nop
c001d199:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d19c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d19c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d1a3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d1a4 <PCI::~PCI()>:
c001d1a4:	83 ec 0c             	sub    esp,0xc
c001d1a7:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c001d1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b0:	89 10                	mov    DWORD PTR [eax],edx
c001d1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b6:	83 ec 0c             	sub    esp,0xc
c001d1b9:	50                   	push   eax
c001d1ba:	e8 5d e1 fe ff       	call   c000b31c <Bus::~Bus()>
c001d1bf:	83 c4 10             	add    esp,0x10
c001d1c2:	90                   	nop
c001d1c3:	83 c4 0c             	add    esp,0xc
c001d1c6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d1c8 <PCI::~PCI()>:
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	83 ec 0c             	sub    esp,0xc
c001d1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1d2:	e8 cd ff ff ff       	call   c001d1a4 <PCI::~PCI()>
c001d1d7:	83 c4 10             	add    esp,0x10
c001d1da:	83 ec 08             	sub    esp,0x8
c001d1dd:	68 5c 01 00 00       	push   0x15c
c001d1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1e6:	e8 71 d2 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	83 c4 0c             	add    esp,0xc
c001d1f1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d1f2 <IDE::~IDE()>:
c001d1f2:	83 ec 0c             	sub    esp,0xc
c001d1f5:	ba b0 f9 01 c0       	mov    edx,0xc001f9b0
c001d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fe:	89 10                	mov    DWORD PTR [eax],edx
c001d200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d204:	83 ec 0c             	sub    esp,0xc
c001d207:	50                   	push   eax
c001d208:	e8 ff ea fe ff       	call   c000bd0c <HardDiskController::~HardDiskController()>
c001d20d:	83 c4 10             	add    esp,0x10
c001d210:	90                   	nop
c001d211:	83 c4 0c             	add    esp,0xc
c001d214:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d216 <IDE::~IDE()>:
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	83 ec 0c             	sub    esp,0xc
c001d21c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d220:	e8 cd ff ff ff       	call   c001d1f2 <IDE::~IDE()>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	83 ec 08             	sub    esp,0x8
c001d22b:	68 70 02 00 00       	push   0x270
c001d230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d234:	e8 23 d2 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d239:	83 c4 10             	add    esp,0x10
c001d23c:	83 c4 0c             	add    esp,0xc
c001d23f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d240 <SATABus::~SATABus()>:
c001d240:	83 ec 0c             	sub    esp,0xc
c001d243:	ba 00 fa 01 c0       	mov    edx,0xc001fa00
c001d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d24c:	89 10                	mov    DWORD PTR [eax],edx
c001d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d252:	83 ec 0c             	sub    esp,0xc
c001d255:	50                   	push   eax
c001d256:	e8 b1 ea fe ff       	call   c000bd0c <HardDiskController::~HardDiskController()>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	90                   	nop
c001d25f:	83 c4 0c             	add    esp,0xc
c001d262:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d264 <SATABus::~SATABus()>:
c001d264:	83 ec 0c             	sub    esp,0xc
c001d267:	83 ec 0c             	sub    esp,0xc
c001d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d26e:	e8 cd ff ff ff       	call   c001d240 <SATABus::~SATABus()>
c001d273:	83 c4 10             	add    esp,0x10
c001d276:	83 ec 08             	sub    esp,0x8
c001d279:	68 64 01 00 00       	push   0x164
c001d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d282:	e8 d5 d1 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	83 c4 0c             	add    esp,0xc
c001d28d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d28e <ATA::~ATA()>:
c001d28e:	83 ec 0c             	sub    esp,0xc
c001d291:	ba 40 fa 01 c0       	mov    edx,0xc001fa40
c001d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29a:	89 10                	mov    DWORD PTR [eax],edx
c001d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	50                   	push   eax
c001d2a4:	e8 45 eb fe ff       	call   c000bdee <PhysicalDisk::~PhysicalDisk()>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	90                   	nop
c001d2ad:	83 c4 0c             	add    esp,0xc
c001d2b0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d2b2 <ATA::~ATA()>:
c001d2b2:	83 ec 0c             	sub    esp,0xc
c001d2b5:	83 ec 0c             	sub    esp,0xc
c001d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2bc:	e8 cd ff ff ff       	call   c001d28e <ATA::~ATA()>
c001d2c1:	83 c4 10             	add    esp,0x10
c001d2c4:	83 ec 08             	sub    esp,0x8
c001d2c7:	68 7c 01 00 00       	push   0x17c
c001d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d0:	e8 87 d1 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d2d5:	83 c4 10             	add    esp,0x10
c001d2d8:	83 c4 0c             	add    esp,0xc
c001d2db:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d2dc <ATAPI::~ATAPI()>:
c001d2dc:	83 ec 0c             	sub    esp,0xc
c001d2df:	ba 88 fa 01 c0       	mov    edx,0xc001fa88
c001d2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e8:	89 10                	mov    DWORD PTR [eax],edx
c001d2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	50                   	push   eax
c001d2f2:	e8 f7 ea fe ff       	call   c000bdee <PhysicalDisk::~PhysicalDisk()>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	90                   	nop
c001d2fb:	83 c4 0c             	add    esp,0xc
c001d2fe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d300 <ATAPI::~ATAPI()>:
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	83 ec 0c             	sub    esp,0xc
c001d306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d30a:	e8 cd ff ff ff       	call   c001d2dc <ATAPI::~ATAPI()>
c001d30f:	83 c4 10             	add    esp,0x10
c001d312:	83 ec 08             	sub    esp,0x8
c001d315:	68 84 01 00 00       	push   0x184
c001d31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d31e:	e8 39 d1 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	83 c4 0c             	add    esp,0xc
c001d329:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d32a <SATA::~SATA()>:
c001d32a:	83 ec 0c             	sub    esp,0xc
c001d32d:	ba 3c fb 01 c0       	mov    edx,0xc001fb3c
c001d332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d336:	89 10                	mov    DWORD PTR [eax],edx
c001d338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	50                   	push   eax
c001d340:	e8 a9 ea fe ff       	call   c000bdee <PhysicalDisk::~PhysicalDisk()>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	90                   	nop
c001d349:	83 c4 0c             	add    esp,0xc
c001d34c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d34e <SATA::~SATA()>:
c001d34e:	83 ec 0c             	sub    esp,0xc
c001d351:	83 ec 0c             	sub    esp,0xc
c001d354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d358:	e8 cd ff ff ff       	call   c001d32a <SATA::~SATA()>
c001d35d:	83 c4 10             	add    esp,0x10
c001d360:	83 ec 08             	sub    esp,0x8
c001d363:	68 7c 01 00 00       	push   0x17c
c001d368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d36c:	e8 eb d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	83 c4 0c             	add    esp,0xc
c001d377:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d378 <SATAPI::~SATAPI()>:
c001d378:	83 ec 0c             	sub    esp,0xc
c001d37b:	ba 4c fc 01 c0       	mov    edx,0xc001fc4c
c001d380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d384:	89 10                	mov    DWORD PTR [eax],edx
c001d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38a:	83 ec 0c             	sub    esp,0xc
c001d38d:	50                   	push   eax
c001d38e:	e8 5b ea fe ff       	call   c000bdee <PhysicalDisk::~PhysicalDisk()>
c001d393:	83 c4 10             	add    esp,0x10
c001d396:	90                   	nop
c001d397:	83 c4 0c             	add    esp,0xc
c001d39a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d39c <SATAPI::~SATAPI()>:
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	83 ec 0c             	sub    esp,0xc
c001d3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a6:	e8 cd ff ff ff       	call   c001d378 <SATAPI::~SATAPI()>
c001d3ab:	83 c4 10             	add    esp,0x10
c001d3ae:	83 ec 08             	sub    esp,0x8
c001d3b1:	68 84 01 00 00       	push   0x184
c001d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ba:	e8 9d d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d3bf:	83 c4 10             	add    esp,0x10
c001d3c2:	83 c4 0c             	add    esp,0xc
c001d3c5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d3c6 <IOAPIC::~IOAPIC()>:
c001d3c6:	83 ec 0c             	sub    esp,0xc
c001d3c9:	ba 8c fc 01 c0       	mov    edx,0xc001fc8c
c001d3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d2:	89 10                	mov    DWORD PTR [eax],edx
c001d3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d8:	83 ec 0c             	sub    esp,0xc
c001d3db:	50                   	push   eax
c001d3dc:	e8 b1 e4 fe ff       	call   c000b892 <Device::~Device()>
c001d3e1:	83 c4 10             	add    esp,0x10
c001d3e4:	90                   	nop
c001d3e5:	83 c4 0c             	add    esp,0xc
c001d3e8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d3ea <IOAPIC::~IOAPIC()>:
c001d3ea:	83 ec 0c             	sub    esp,0xc
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f4:	e8 cd ff ff ff       	call   c001d3c6 <IOAPIC::~IOAPIC()>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	83 ec 08             	sub    esp,0x8
c001d3ff:	68 68 01 00 00       	push   0x168
c001d404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d408:	e8 4f d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d40d:	83 c4 10             	add    esp,0x10
c001d410:	83 c4 0c             	add    esp,0xc
c001d413:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d414 <APICTimer::~APICTimer()>:
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	ba d4 fc 01 c0       	mov    edx,0xc001fcd4
c001d41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d420:	89 10                	mov    DWORD PTR [eax],edx
c001d422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	50                   	push   eax
c001d42a:	e8 91 fd fe ff       	call   c000d1c0 <Timer::~Timer()>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	90                   	nop
c001d433:	83 c4 0c             	add    esp,0xc
c001d436:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d438 <APICTimer::~APICTimer()>:
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	83 ec 0c             	sub    esp,0xc
c001d43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d442:	e8 cd ff ff ff       	call   c001d414 <APICTimer::~APICTimer()>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	83 ec 08             	sub    esp,0x8
c001d44d:	68 60 01 00 00       	push   0x160
c001d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d456:	e8 01 d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	83 c4 0c             	add    esp,0xc
c001d461:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d464 <PIT::~PIT()>:
c001d464:	83 ec 0c             	sub    esp,0xc
c001d467:	ba 24 fd 01 c0       	mov    edx,0xc001fd24
c001d46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d470:	89 10                	mov    DWORD PTR [eax],edx
c001d472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	50                   	push   eax
c001d47a:	e8 41 fd fe ff       	call   c000d1c0 <Timer::~Timer()>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	90                   	nop
c001d483:	83 c4 0c             	add    esp,0xc
c001d486:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d488 <PIT::~PIT()>:
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	83 ec 0c             	sub    esp,0xc
c001d48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d492:	e8 cd ff ff ff       	call   c001d464 <PIT::~PIT()>
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	83 ec 08             	sub    esp,0x8
c001d49d:	68 5c 01 00 00       	push   0x15c
c001d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4a6:	e8 b1 cf fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d4ab:	83 c4 10             	add    esp,0x10
c001d4ae:	83 c4 0c             	add    esp,0xc
c001d4b1:	c3                   	ret    

Disassembly of section userkernel:

c0021000 <KiDefaultSignalHandlerAbort(int)>:
c0021000:	57                   	push   edi
c0021001:	b9 07 00 00 00       	mov    ecx,0x7
c0021006:	56                   	push   esi
c0021007:	be d1 ed 01 c0       	mov    esi,0xc001edd1
c002100c:	83 ec 24             	sub    esp,0x24
c002100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021013:	fc                   	cld    
c0021014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002101a:	50                   	push   eax
c002101b:	6a 00                	push   0x0
c002101d:	6a 38                	push   0x38
c002101f:	6a 01                	push   0x1
c0021021:	e8 2c 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0021026:	83 c4 34             	add    esp,0x34
c0021029:	5e                   	pop    esi
c002102a:	5f                   	pop    edi
c002102b:	c3                   	ret    

c002102c <KiDefaultSignalHandlerTerminate(int)>:
c002102c:	57                   	push   edi
c002102d:	b9 08 00 00 00       	mov    ecx,0x8
c0021032:	56                   	push   esi
c0021033:	be ed ed 01 c0       	mov    esi,0xc001eded
c0021038:	83 ec 24             	sub    esp,0x24
c002103b:	89 e7                	mov    edi,esp
c002103d:	fc                   	cld    
c002103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021040:	54                   	push   esp
c0021041:	6a 00                	push   0x0
c0021043:	6a 37                	push   0x37
c0021045:	6a 01                	push   0x1
c0021047:	e8 06 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002104c:	83 c4 34             	add    esp,0x34
c002104f:	5e                   	pop    esi
c0021050:	5f                   	pop    edi
c0021051:	c3                   	ret    

c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0021052:	53                   	push   ebx
c0021053:	83 ec 10             	sub    esp,0x10
c0021056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021066:	cd 60                	int    0x60
c0021068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021078:	83 c4 10             	add    esp,0x10
c002107b:	5b                   	pop    ebx
c002107c:	c3                   	ret    

Disassembly of section align_previous:

c0022000 <DO_NOT_DELETE()>:
c0022000:	c3                   	ret    
