
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 8e 02 00       	call   c0028eb8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 4e 9b 02 c0       	mov    ebx,0xc0029b4e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 5c 9b 02 c0    	cmp    ebx,0xc0029b5c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 e5 02 c0       	mov    eax,0xc002e5b8
c0000049:	3d b8 e5 02 c0       	cmp    eax,0xc002e5b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 e5 02 c0       	push   0xc002e5b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 e5 02 c0       	mov    eax,0xc002e5b8
c0000075:	2d b8 e5 02 c0       	sub    eax,0xc002e5b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 e5 02 c0       	push   0xc002e5b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebe8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 64 9b 02 c0       	mov    ebx,0xc0029b64
c00000bb:	81 eb 60 9b 02 c0    	sub    ebx,0xc0029b60
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 60 9b 02 c0       	mov    esi,0xc0029b60
c00000ca:	a1 ec eb 02 c0       	mov    eax,ds:0xc002ebec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec eb 02 c0       	mov    ds:0xc002ebec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec eb 02 c0       	mov    eax,ds:0xc002ebec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 e5 02 c0       	push   0xc002e5b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 eb 02 c0       	push   0xc002ebf0
c000012c:	68 b8 e5 02 c0       	push   0xc002e5b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 dd d5 01 00       	call   c001d980 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 0e 23 01 00       	call   c00126c9 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 bb d5 01 00       	call   c001d980 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 63 da 01 00       	call   c001de47 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 c1 e0 01 00       	call   c001e4ae <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 f0 02 c0 	lgdtd  ds:0xc002f030
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 1f 40 01 00       	call   c0014601 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 ec 02 c0       	mov    ds:0xc002ec08,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 ec 02 c0    	mov    DWORD PTR ds:0xc002ec08,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec08
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 80 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6480],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 80 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6480],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 80 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6480],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 80 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6480],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 80 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6480],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec20
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 ec 02 c0    	mov    DWORD PTR ds:0xc002ec20,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13dc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13dc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 ec 02 c0    	mov    DWORD PTR ds:0xc002ec20,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec4c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec5c
c0000e38:	c7 42 0c 54 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ec54
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 ec 02 c0 02 	test   BYTE PTR ds:0xc002ec20,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec20
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13dc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd13dc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 ec 02 c0 	lea    edx,[eax*8-0x3ffd13ac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec60
c00011ba:	81 fb 54 ec 02 c0    	cmp    ebx,0xc002ec54
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 ec 02 c0       	cmp    eax,0xc002ec54
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c ec 02 c0       	mov    ds:0xc002ec5c,eax
c00011f6:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c00011fb:	a3 50 ec 02 c0       	mov    ds:0xc002ec50,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec54
c0001209:	c7 40 0c 54 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ec54
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec54
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 ec 02 c0 	lea    ebp,[edx*4-0x3ffd13e8]
c000125a:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 ec 02 c0 	lea    ecx,[edx*4-0x3ffd13e0]
c0001275:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd10ac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 ec 02 c0 	lea    eax,[eax*8-0x3ffd13ac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,ecx
c000132f:	89 0d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,ecx
c0001335:	c7 41 08 54 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ec54
c000133c:	c7 41 0c 54 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ec54
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c ec 02 c0 	lea    edx,[ecx*8-0x3ffd13b4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10ac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10ac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c ec 02 c0 	lea    edx,[eax*4-0x3ffd13b4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd10ac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,edi
c0001402:	89 3d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,edi
c0001408:	c7 47 08 54 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ec54
c000140f:	c7 47 0c 54 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ec54
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 ec 02 c0    	mov    DWORD PTR ds:0xc002ec50,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 ec 02 c0       	mov    edx,0xc002ec20
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef74
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef74,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 ef 02 c0    	mov    DWORD PTR ds:0xc002ef74,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec4c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c ef 02 c0    	push   DWORD PTR ds:0xc002ef7c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c ef 02 c0       	mov    eax,ds:0xc002ef7c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec4c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13dc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 ec 02 c0       	mov    eax,0xc002ec54
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c ef 02 c0       	cmp    eax,0xc002ef4c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef70
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef84
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef94
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 84 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd637c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 ec 02 c0       	mov    eax,ds:0xc002ec20
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 ec 02 c0       	mov    ds:0xc002ec20,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 ef 02 c0    	mov    DWORD PTR ds:0xc002ef64,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 ef 02 c0    	mov    DWORD PTR ds:0xc002ef68,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c ef 02 c0    	mov    DWORD PTR ds:0xc002ef6c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef74,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 0c f4 01 00       	jmp    c0020ffe <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 3d f4 01 00       	jmp    c0021045 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 65 f4 01 00       	jmp    c002108c <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 53 02 00       	call   c0027214 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 a0 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6260]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 a0 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6260]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba c0 9d 02 c0       	mov    edx,0xc0029dc0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba cc 9d 02 c0       	mov    edx,0xc0029dcc
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba b0 9d 02 c0       	mov    edx,0xc0029db0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 ef 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1040]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 ef 02 c0    	mov    ax,ds:0xc002efa0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 ef 02 c0    	mov    ds:0xc002efa0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 41 02 00       	call   c0027214 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 d2 9d 02 c0       	mov    eax,0xc0029dd2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 20 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd62e0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 db 9d 02 c0       	mov    eax,0xc0029ddb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 a0 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6260]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 2a 02 00       	call   c0027214 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba b0 9d 02 c0       	mov    edx,0xc0029db0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1040]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1040],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 14 02 00       	call   c0027214 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 14 02 00       	call   c0027214 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 f7 9c 02 c0       	mov    eax,0xc0029cf7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 f0 9c 02 c0       	mov    eax,0xc0029cf0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 c0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1040]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be e0 9c 02 c0       	mov    esi,0xc0029ce0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 fb 01 00       	call   c0027214 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba c0 9d 02 c0       	mov    edx,0xc0029dc0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba e2 9d 02 c0       	mov    edx,0xc0029de2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ee 9d 02 c0       	mov    edx,0xc0029dee
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 02 9e 02 c0       	mov    edx,0xc0029e02
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 20 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a120
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 20 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a120
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 20 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61e0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 05 02 00       	call   c0028ce7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 04 02 00       	call   c0028cc9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad 04 02 00       	call   c0028ce7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 fb 01 00       	call   c00283ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 05 02 00       	call   c0028e80 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 04 02 00       	call   c0028ce7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 03 02 00       	call   c0028ce7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 03 02 00       	call   c0028cc9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 02 02 00       	call   c0028ce7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb 01 02 00       	call   c0028cc9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 ff 01 00       	call   c0028ce7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc ff 01 00       	call   c0028cc9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 80 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5980]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc fc 01 00       	call   c0028a7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a f6 01 00       	call   c0028418 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 ff 01 00       	call   c0028ceb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 ff 01 00       	call   c0028e0f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de f5 01 00       	call   c0028418 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 fe 01 00       	call   c0028ce5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a fe 01 00       	call   c0028ce9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 00 02 00       	call   c0028ea0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa fb 01 00       	call   c0028a7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 f5 01 00       	call   c0028418 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 fd 01 00       	call   c0028ceb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 fe 01 00       	call   c0028e0f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc f4 01 00       	call   c0028418 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 fd 01 00       	call   c0028ce5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 fd 01 00       	call   c0028ce9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc fe 01 00       	call   c0028ea0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 fc 01 00       	call   c0028ce7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 fc 01 00       	call   c0028cc9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 fc 01 00       	call   c0028ce7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a f9 01 00       	call   c0028a7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c ec 01 00       	call   c0027d9b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff f2 01 00       	call   c0028418 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 f9 01 00       	call   c0028a7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 ec 01 00       	call   c0027d9b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 f9 01 00       	call   c0028a7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 fb 01 00       	call   c0028ce5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 f2 01 00       	call   c00283ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 fc 01 00       	call   c0028e80 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc fa 01 00       	call   c0028cc9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 f1 01 00       	call   c00283ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 f8 01 00       	call   c0028a7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 f1 01 00       	call   c0028418 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a f8 01 00       	call   c0028a7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 f4 01 00       	call   c00286fc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 eb 01 00       	call   c0027d9b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 e4 01 00       	call   c0027730 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 fb 01 00       	call   c0028e0f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 f1 01 00       	call   c0028418 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 fb 01 00       	call   c0028e0f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 ea 01 00       	call   c0027d9b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 f9 01 00       	call   c0028ceb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca f3 01 00       	call   c00286fc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 ea 01 00       	call   c0027d9b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e fb 01 00       	call   c0028ea0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 f7 01 00       	call   c0028a7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 f0 01 00       	call   c00283ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 f9 01 00       	call   c0028ce7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df e9 01 00       	call   c0027d9b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b f0 01 00       	call   c00283ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad fa 01 00       	call   c0028ea0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e f6 01 00       	call   c0028a7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db ef 01 00       	call   c0028418 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e f6 01 00       	call   c0028a7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 e9 01 00       	call   c0027d9b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 f6 01 00       	call   c0028a7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 f8 01 00       	call   c0028ce7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d ef 01 00       	call   c00283ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af f9 01 00       	call   c0028e80 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 f7 01 00       	call   c0028cc9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 ee 01 00       	call   c00283ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e f5 01 00       	call   c0028a7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 ee 01 00       	call   c0028418 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 f5 01 00       	call   c0028a7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a f1 01 00       	call   c00286fc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 e8 01 00       	call   c0027d9b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 e1 01 00       	call   c0027730 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 f8 01 00       	call   c0028e0f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 ee 01 00       	call   c0028418 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 f8 01 00       	call   c0028e0f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 e7 01 00       	call   c0027d9b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab f6 01 00       	call   c0028ceb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 f0 01 00       	call   c00286fc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 e7 01 00       	call   c0027d9b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff f7 01 00       	call   c0028ea0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 f3 01 00       	call   c0028a7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 ed 01 00       	call   c00283ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 f6 01 00       	call   c0028ce7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 e6 01 00       	call   c0027d9b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc ec 01 00       	call   c00283ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 f3 01 00       	call   c0028a7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 e6 01 00       	call   c0027d9b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 e0 a6 02 c0       	mov    eax,0xc002a6e0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 f4 a6 02 c0       	mov    eax,0xc002a6f4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc f1 01 00       	call   c0028a7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a eb 01 00       	call   c0028418 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc dd 01 00       	call   c0027730 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 f4 01 00       	call   c0028e0f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c ea 01 00       	call   c0028418 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f f4 01 00       	call   c0028e0f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 e3 01 00       	call   c0027d9b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 f4 01 00       	call   c0028e0f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 ea 01 00       	call   c0028418 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 e3 01 00       	call   c0027d9b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba dc 01 00       	call   c0027730 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 f3 01 00       	call   c0028e0f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a e9 01 00       	call   c0028418 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d f3 01 00       	call   c0028e0f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf e2 01 00       	call   c0027d9b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f f3 01 00       	call   c0028e0f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e e9 01 00       	call   c0028418 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 e2 01 00       	call   c0027d9b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 e2 01 00       	call   c0027d9b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 db 01 00       	call   c0027730 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 f2 01 00       	call   c0028e0f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 e8 01 00       	call   c0028418 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 f1 01 00       	call   c0028e0f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 e1 01 00       	call   c0027d9b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 f1 01 00       	call   c0028e0f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f e7 01 00       	call   c0028418 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 e1 01 00       	call   c0027d9b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 f1 01 00       	call   c0028e0f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 e7 01 00       	call   c0028418 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba e0 01 00       	call   c0027d9b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf d9 01 00       	call   c0027730 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 f0 01 00       	call   c0028e0f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f e6 01 00       	call   c0028418 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 f0 01 00       	call   c0028e0f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 df 01 00       	call   c0027d9b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 f0 01 00       	call   c0028e0f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 e6 01 00       	call   c0028418 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a df 01 00       	call   c0027d9b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa ef 01 00       	call   c0028e0f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 e5 01 00       	call   c0028418 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c df 01 00       	call   c0027d9b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 df 01 00       	call   c0027d9b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d e5 01 00       	call   c0028418 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 ee 01 00       	call   c0028ceb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 de 01 00       	call   c0027d9b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 e5 01 00       	call   c0028418 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 ed 01 00       	call   c0028ceb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b d7 01 00       	call   c0027730 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 ee 01 00       	call   c0028e0f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b e4 01 00       	call   c0028418 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe ed 01 00       	call   c0028e0f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 dd 01 00       	call   c0027d9b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 ed 01 00       	call   c0028e0f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 e3 01 00       	call   c0028418 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 dd 01 00       	call   c0027d9b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 ed 01 00       	call   c0028e0f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b e3 01 00       	call   c0028418 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 dc 01 00       	call   c0027d9b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 ed 01 00       	call   c0028e0f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d e3 01 00       	call   c0028418 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 dc 01 00       	call   c0027d9b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 ec 01 00       	call   c0028e0f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf e2 01 00       	call   c0028418 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 dc 01 00       	call   c0027d9b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a d5 01 00       	call   c0027730 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 ec 01 00       	call   c0028e0f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa e1 01 00       	call   c0028418 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 eb 01 00       	call   c0028e0f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 db 01 00       	call   c0027d9b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 eb 01 00       	call   c0028e0f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c e1 01 00       	call   c0028418 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 db 01 00       	call   c0027d9b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 eb 01 00       	call   c0028e0f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e e1 01 00       	call   c0028418 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 da 01 00       	call   c0027d9b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 eb 01 00       	call   c0028e0f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 e1 01 00       	call   c0028418 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 da 01 00       	call   c0027d9b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 ea 01 00       	call   c0028e0f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 e0 01 00       	call   c0028418 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b da 01 00       	call   c0027d9b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef d9 01 00       	call   c0027d9b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c e0 01 00       	call   c0028418 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 e9 01 00       	call   c0028ceb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 d9 01 00       	call   c0027d9b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 df 01 00       	call   c0028418 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 e8 01 00       	call   c0028ceb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e d9 01 00       	call   c0027d9b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b df 01 00       	call   c0028418 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 e8 01 00       	call   c0028ceb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 d8 01 00       	call   c0027d9b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 df 01 00       	call   c0028418 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe e7 01 00       	call   c0028ceb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c d1 01 00       	call   c0027730 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 e8 01 00       	call   c0028e0f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c de 01 00       	call   c0028418 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff e7 01 00       	call   c0028e0f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 d7 01 00       	call   c0027d9b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 e7 01 00       	call   c0028e0f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba dd 01 00       	call   c0028418 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 d7 01 00       	call   c0027d9b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 e7 01 00       	call   c0028e0f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c dd 01 00       	call   c0028418 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 d6 01 00       	call   c0027d9b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 e7 01 00       	call   c0028e0f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e dd 01 00       	call   c0028418 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 d6 01 00       	call   c0027d9b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 e6 01 00       	call   c0028e0f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 dc 01 00       	call   c0028418 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 d6 01 00       	call   c0027d9b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 e6 01 00       	call   c0028e0f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 dc 01 00       	call   c0028418 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 d5 01 00       	call   c0027d9b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 e6 01 00       	call   c0028e0f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 dc 01 00       	call   c0028418 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a d5 01 00       	call   c0027d9b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 ce 01 00       	call   c0027730 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b e5 01 00       	call   c0028e0f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 db 01 00       	call   c0028418 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 e5 01 00       	call   c0028e0f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 d4 01 00       	call   c0027d9b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 e5 01 00       	call   c0028e0f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef da 01 00       	call   c0028418 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 d4 01 00       	call   c0027d9b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 e4 01 00       	call   c0028e0f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 da 01 00       	call   c0028418 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a d4 01 00       	call   c0027d9b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a e4 01 00       	call   c0028e0f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 da 01 00       	call   c0028418 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc d3 01 00       	call   c0027d9b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c e4 01 00       	call   c0028e0f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 da 01 00       	call   c0028418 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e d3 01 00       	call   c0027d9b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce e3 01 00       	call   c0028e0f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 d9 01 00       	call   c0028418 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d d3 01 00       	call   c0027d9b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d e3 01 00       	call   c0028e0f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 d9 01 00       	call   c0028418 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 d2 01 00       	call   c0027d9b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae d2 01 00       	call   c0027d9b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c d9 01 00       	call   c0028418 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 e1 01 00       	call   c0028ceb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 d2 01 00       	call   c0027d9b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 d8 01 00       	call   c0028418 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 e1 01 00       	call   c0028ceb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff d1 01 00       	call   c0027d9b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d d8 01 00       	call   c0028418 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 e1 01 00       	call   c0028ceb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 d1 01 00       	call   c0027d9b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 d8 01 00       	call   c0028418 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 e0 01 00       	call   c0028ceb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f d1 01 00       	call   c0027d9b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad d7 01 00       	call   c0028418 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 e0 01 00       	call   c0028ceb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd d0 01 00       	call   c0027d9b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b d7 01 00       	call   c0028418 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 e0 01 00       	call   c0028ceb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b c9 01 00       	call   c0027730 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 e0 01 00       	call   c0028e0f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb d5 01 00       	call   c0028418 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 df 01 00       	call   c0028e0f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 cf 01 00       	call   c0027d9b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 24 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58dc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 df 01 00       	call   c0028e0f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 d5 01 00       	call   c0028418 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc ce 01 00       	call   c0027d9b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 df 01 00       	call   c0028e0f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 d5 01 00       	call   c0028418 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d ce 01 00       	call   c0027d9b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba de 01 00       	call   c0028e0f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 d4 01 00       	call   c0028418 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e ce 01 00       	call   c0027d9b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b de 01 00       	call   c0028e0f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 d4 01 00       	call   c0028418 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af cd 01 00       	call   c0027d9b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc dd 01 00       	call   c0028e0f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 d3 01 00       	call   c0028418 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 cd 01 00       	call   c0027d9b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d dd 01 00       	call   c0028e0f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 d3 01 00       	call   c0028418 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 cc 01 00       	call   c0027d9b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e dd 01 00       	call   c0028e0f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 d3 01 00       	call   c0028418 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 cc 01 00       	call   c0027d9b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df dc 01 00       	call   c0028e0f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 d2 01 00       	call   c0028418 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 cc 01 00       	call   c0027d9b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d c5 01 00       	call   c0027730 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 dc 01 00       	call   c0028e0f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd d1 01 00       	call   c0028418 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 db 01 00       	call   c0028e0f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 cb 01 00       	call   c0027d9b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 40 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58c0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 db 01 00       	call   c0028e0f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 d1 01 00       	call   c0028418 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd ca 01 00       	call   c0027d9b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 db 01 00       	call   c0028e0f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 d1 01 00       	call   c0028418 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d ca 01 00       	call   c0027d9b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 da 01 00       	call   c0028e0f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 d0 01 00       	call   c0028418 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d ca 01 00       	call   c0027d9b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 da 01 00       	call   c0028e0f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 d0 01 00       	call   c0028418 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd c9 01 00       	call   c0027d9b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 da 01 00       	call   c0028e0f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 cf 01 00       	call   c0028418 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d c9 01 00       	call   c0027d9b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 d9 01 00       	call   c0028e0f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 cf 01 00       	call   c0028418 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd c8 01 00       	call   c0027d9b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 d9 01 00       	call   c0028e0f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 cf 01 00       	call   c0028418 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d c8 01 00       	call   c0027d9b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 d8 01 00       	call   c0028e0f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 ce 01 00       	call   c0028418 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d c8 01 00       	call   c0027d9b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 5c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58a4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 c7 01 00       	call   c0027d9b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f ce 01 00       	call   c0028418 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb d6 01 00       	call   c0028ceb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 c7 01 00       	call   c0027d9b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 cd 01 00       	call   c0028418 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e d6 01 00       	call   c0028ceb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 c7 01 00       	call   c0027d9b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 cd 01 00       	call   c0028418 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 d6 01 00       	call   c0028ceb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb c6 01 00       	call   c0027d9b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 cd 01 00       	call   c0028418 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 d5 01 00       	call   c0028ceb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e c6 01 00       	call   c0027d9b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb cc 01 00       	call   c0028418 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 d5 01 00       	call   c0028ceb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 c6 01 00       	call   c0027d9b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e cc 01 00       	call   c0028418 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a d5 01 00       	call   c0028ceb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 c5 01 00       	call   c0027d9b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 cc 01 00       	call   c0028418 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd d4 01 00       	call   c0028ceb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 c5 01 00       	call   c0027d9b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 cb 01 00       	call   c0028418 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 d4 01 00       	call   c0028ceb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c cb 01 00       	call   c0028418 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 d5 01 00       	jmp    c0028ea0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e d2 01 00       	call   c0028ce7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c d2 01 00       	call   c0028cc9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 cf 01 00       	call   c0028a7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 c2 01 00       	call   c0027d9b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 cf 01 00       	call   c0028a7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da cb 01 00       	call   c00286fc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 d1 01 00       	call   c0028cc9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c d1 01 00       	call   c0028ce7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f d1 01 00       	call   c0028ce7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 cb 01 00       	call   c00286fc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 d2 01 00       	call   c0028ea0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad d2 01 00       	call   c0028ea0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f ce 01 00       	call   c0028a7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 c7 01 00       	call   c00283ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 d0 01 00       	call   c0028ce7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e c1 01 00       	call   c0027d9b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 c7 01 00       	call   c00283ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 d2 01 00       	call   c0028ea0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c ca 01 00       	call   c00286fc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 c0 01 00       	call   c0027d9b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 cc 01 00       	call   c0028a7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 bf 01 00       	call   c0027d9b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 bf 01 00       	call   c0027d9b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 cc 01 00       	call   c0028a7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 ce 01 00       	call   c0028ce5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 c5 01 00       	call   c00283ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 d0 01 00       	call   c0028e80 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d ce 01 00       	call   c0028cc9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b c5 01 00       	call   c00283ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 cb 01 00       	call   c0028a7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c c5 01 00       	call   c0028418 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce cb 01 00       	call   c0028a7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 c8 01 00       	call   c00286fc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 be 01 00       	call   c0027d9b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e cb 01 00       	call   c0028a7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca cd 01 00       	call   c0028ce7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf c4 01 00       	call   c0028418 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 c4 01 00       	call   c0028418 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca ca 01 00       	call   c0028a7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e c7 01 00       	call   c00286fc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 c6 01 00       	call   c00286fc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 bd 01 00       	call   c0027d9b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 ce 01 00       	call   c0028ea0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 ca 01 00       	call   c0028a7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b c3 01 00       	call   c00283ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a cc 01 00       	call   c0028ce7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 bd 01 00       	call   c0027d9b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 c3 01 00       	call   c00283ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 cd 01 00       	call   c0028ea0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 cb 01 00       	call   c0028ce7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 cb 01 00       	call   c0028cc9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de c8 01 00       	call   c0028a7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df bb 01 00       	call   c0027d9b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae c8 01 00       	call   c0028a7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 c5 01 00       	call   c00286fc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 ca 01 00       	call   c0028cc9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 ca 01 00       	call   c0028ce7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a ca 01 00       	call   c0028ce7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 c4 01 00       	call   c00286fc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d cc 01 00       	call   c0028ea0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 cb 01 00       	call   c0028ea0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba c7 01 00       	call   c0028a7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 c1 01 00       	call   c00283ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 c9 01 00       	call   c0028ce7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 ba 01 00       	call   c0027d9b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad c0 01 00       	call   c00283ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f cb 01 00       	call   c0028ea0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 c3 01 00       	call   c00286fc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 ba 01 00       	call   c0027d9b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f c6 01 00       	call   c0028a7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f b9 01 00       	call   c0027d9b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f b9 01 00       	call   c0027d9b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df c5 01 00       	call   c0028a7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f c8 01 00       	call   c0028ce5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d bf 01 00       	call   c00283ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f c9 01 00       	call   c0028e80 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 c7 01 00       	call   c0028cc9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 be 01 00       	call   c00283ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 c5 01 00       	call   c0028a7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 be 01 00       	call   c0028418 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 c5 01 00       	call   c0028a7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d c1 01 00       	call   c00286fc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec b7 01 00       	call   c0027d9b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 c4 01 00       	call   c0028a7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 c7 01 00       	call   c0028ce7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 bd 01 00       	call   c0028418 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 bd 01 00       	call   c0028418 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 c4 01 00       	call   c0028a7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 c0 01 00       	call   c00286fc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 c0 01 00       	call   c00286fc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 b6 01 00       	call   c0027d9b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d c7 01 00       	call   c0028ea0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f c3 01 00       	call   c0028a7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 bc 01 00       	call   c00283ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 c5 01 00       	call   c0028ce7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d b6 01 00       	call   c0027d9b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 bc 01 00       	call   c00283ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 c7 01 00       	call   c0028ea0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 c4 01 00       	call   c0028ce7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 c4 01 00       	call   c0028cc9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 c2 01 00       	call   c0028a7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a b5 01 00       	call   c0027d9b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 c1 01 00       	call   c0028a7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 be 01 00       	call   c00286fc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef c3 01 00       	call   c0028cc9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 c3 01 00       	call   c0028ce7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 c3 01 00       	call   c0028ce7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be bd 01 00       	call   c00286fc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 c5 01 00       	call   c0028ea0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 c5 01 00       	call   c0028ea0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 c0 01 00       	call   c0028a7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c ba 01 00       	call   c00283ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b c3 01 00       	call   c0028ce7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 b3 01 00       	call   c0027d9b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 b9 01 00       	call   c00283ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a c4 01 00       	call   c0028ea0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 bc 01 00       	call   c00286fc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f b3 01 00       	call   c0027d9b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a bf 01 00       	call   c0028a7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a b2 01 00       	call   c0027d9b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a b2 01 00       	call   c0027d9b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a bf 01 00       	call   c0028a7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a c1 01 00       	call   c0028ce5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 b8 01 00       	call   c00283ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca c2 01 00       	call   c0028e80 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 c0 01 00       	call   c0028cc9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee b7 01 00       	call   c00283ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c be 01 00       	call   c0028a7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef b7 01 00       	call   c0028418 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 be 01 00       	call   c0028a7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 ba 01 00       	call   c00286fc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 b1 01 00       	call   c0027d9b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 bd 01 00       	call   c0028a7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d c0 01 00       	call   c0028ce7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 b7 01 00       	call   c0028418 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 b7 01 00       	call   c0028418 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b bd 01 00       	call   c0028a7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f b9 01 00       	call   c00286fc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c b9 01 00       	call   c00286fc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb af 01 00       	call   c0027d9b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 c0 01 00       	call   c0028ea0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa bc 01 00       	call   c0028a7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 b6 01 00       	call   c00283ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 be 01 00       	call   c0028ce7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 af 01 00       	call   c0027d9b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c b5 01 00       	call   c00283ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e c0 01 00       	call   c0028ea0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff bd 01 00       	call   c0028ce7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd bd 01 00       	call   c0028cc9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 bb 01 00       	call   c0028a7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 ae 01 00       	call   c0027d9b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 bb 01 00       	call   c0028a7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b b7 01 00       	call   c00286fc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a bd 01 00       	call   c0028cc9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d bd 01 00       	call   c0028ce7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 bd 01 00       	call   c0028ce7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 b6 01 00       	call   c00286fc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 be 01 00       	call   c0028ea0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e be 01 00       	call   c0028ea0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 ba 01 00       	call   c0028a7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 b3 01 00       	call   c00283ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 bc 01 00       	call   c0028ce7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff ac 01 00       	call   c0027d9b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 b3 01 00       	call   c00283ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 bd 01 00       	call   c0028ea0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd b5 01 00       	call   c00286fc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a ac 01 00       	call   c0027d9b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 b8 01 00       	call   c0028a7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 ab 01 00       	call   c0027d9b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 ab 01 00       	call   c0027d9b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 b8 01 00       	call   c0028a7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 ba 01 00       	call   c0028ce5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 b1 01 00       	call   c00283ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 bc 01 00       	call   c0028e80 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c ba 01 00       	call   c0028cc9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 b1 01 00       	call   c00283ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 b7 01 00       	call   c0028a7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a b1 01 00       	call   c0028418 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c b7 01 00       	call   c0028a7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 b3 01 00       	call   c00286fc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 aa 01 00       	call   c0027d9b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c b7 01 00       	call   c0028a7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 b9 01 00       	call   c0028ce7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d b0 01 00       	call   c0028418 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f b0 01 00       	call   c0028418 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 b6 01 00       	call   c0028a7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da b2 01 00       	call   c00286fc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 b2 01 00       	call   c00286fc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 a9 01 00       	call   c0027d9b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 ba 01 00       	call   c0028ea0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 b5 01 00       	call   c0028a7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c af 01 00       	call   c00283ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b b8 01 00       	call   c0028ce7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 a8 01 00       	call   c0027d9b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 ae 01 00       	call   c00283ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 b9 01 00       	call   c0028ea0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 b7 01 00       	call   c0028ce7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 b6 01 00       	call   c0028cc9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c b4 01 00       	call   c0028a7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d a7 01 00       	call   c0027d9b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c b4 01 00       	call   c0028a7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 b0 01 00       	call   c00286fc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 b6 01 00       	call   c0028cc9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 b6 01 00       	call   c0028ce7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 b6 01 00       	call   c0028ce7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 b0 01 00       	call   c00286fc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb b7 01 00       	call   c0028ea0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 b7 01 00       	call   c0028ea0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 b3 01 00       	call   c0028a7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb ac 01 00       	call   c00283ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a b5 01 00       	call   c0028ce7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 a6 01 00       	call   c0027d9b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b ac 01 00       	call   c00283ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd b6 01 00       	call   c0028ea0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 af 01 00       	call   c00286fc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 a5 01 00       	call   c0027d9b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df b1 01 00       	call   c0028a7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df a4 01 00       	call   c0027d9b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf a4 01 00       	call   c0027d9b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f b1 01 00       	call   c0028a7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 b3 01 00       	call   c0028cc9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba aa 01 00       	call   c00283ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c b5 01 00       	call   c0028e80 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 b3 01 00       	call   c0028cc9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d aa 01 00       	call   c00283ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db b0 01 00       	call   c0028a7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e aa 01 00       	call   c0028418 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 b0 01 00       	call   c0028a7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 ad 01 00       	call   c00286fc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 a3 01 00       	call   c0027d9b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 b0 01 00       	call   c0028a7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac b2 01 00       	call   c0028ce7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 a9 01 00       	call   c0028418 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 a9 01 00       	call   c0028418 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 af 01 00       	call   c0028a7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e ac 01 00       	call   c00286fc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 a9 01 00       	call   c0028418 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 b1 01 00       	call   c0028ceb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 ab 01 00       	call   c00286fc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 a2 01 00       	call   c0027d9b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 b3 01 00       	call   c0028ea0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 ae 01 00       	call   c0028a7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b a8 01 00       	call   c00283ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a b1 01 00       	call   c0028ce7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 a1 01 00       	call   c0027d9b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea a7 01 00       	call   c00283ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c b2 01 00       	call   c0028ea0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 84 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd587c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 78 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5888]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f af 01 00       	call   c0028ce7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd ae 01 00       	call   c0028cc9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 ae 01 00       	call   c0028ce7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b ac 01 00       	call   c0028a7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 a5 01 00       	call   c0028418 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b ac 01 00       	call   c0028a7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 9f 01 00       	call   c0027d9b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 ac 01 00       	call   c0028a7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 ae 01 00       	call   c0028ce5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 a5 01 00       	call   c00283ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 af 01 00       	call   c0028e80 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da ad 01 00       	call   c0028cc9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 a4 01 00       	call   c00283ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 ab 01 00       	call   c0028a7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da a4 01 00       	call   c0028418 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c ab 01 00       	call   c0028a7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 a7 01 00       	call   c00286fc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 9e 01 00       	call   c0027d9b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a a7 01 00       	call   c00286fc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 9d 01 00       	call   c0027d9b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae ae 01 00       	call   c0028ea0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 aa 01 00       	call   c0028a7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 a3 01 00       	call   c00283ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 ac 01 00       	call   c0028ce7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 9d 01 00       	call   c0027d9b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b a3 01 00       	call   c00283ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d ae 01 00       	call   c0028ea0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca a9 01 00       	call   c0028a7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 a3 01 00       	call   c0028418 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 a9 01 00       	call   c0028a7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 9c 01 00       	call   c0027d9b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e a9 01 00       	call   c0028a7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 ab 01 00       	call   c0028ce9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b a2 01 00       	call   c00283ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d ad 01 00       	call   c0028e80 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 ab 01 00       	call   c0028cc9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 a2 01 00       	call   c00283ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 a8 01 00       	call   c0028a7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 a2 01 00       	call   c0028418 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 a8 01 00       	call   c0028a7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc a4 01 00       	call   c00286fc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 9b 01 00       	call   c0027d9b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 a4 01 00       	call   c00286fc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 9b 01 00       	call   c0027d9b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 ac 01 00       	call   c0028ea0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 a7 01 00       	call   c0028a7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d a1 01 00       	call   c00283ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c aa 01 00       	call   c0028ce7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 9a 01 00       	call   c0027d9b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 a0 01 00       	call   c00283ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 a7 01 00       	call   c0028a7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 9a 01 00       	call   c0027d9b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 9e a8 02 c0       	mov    eax,0xc002a89e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 af a8 02 c0       	mov    eax,0xc002a8af
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4e3:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c000e50d:	e8 c2 fb 00 00       	call   c001e0d4 <schedule()>
c000e512:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e517:	48                   	dec    eax
c000e518:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 90 f1 02 c0       	mov    eax,ds:0xc002f190
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 e6 a8 02 c0       	push   0xc002a8e6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 28 f0 02 c0       	mov    eax,0xc002f028
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 ef a8 02 c0       	push   0xc002a8ef
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 72 02 c0       	mov    eax,0xc0027214
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 f9 a8 02 c0       	push   0xc002a8f9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 6f 02 c0       	mov    eax,0xc0026f48
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 02 a9 02 c0       	push   0xc002a902
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 73 02 c0       	mov    eax,0xc0027314
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 0c a9 02 c0       	push   0xc002a90c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 70 02 c0       	mov    eax,0xc0027094
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 15 a9 02 c0       	push   0xc002a915
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 2c f0 02 c0       	mov    eax,0xc002f02c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 22 a9 02 c0       	push   0xc002a922
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 2d f0 02 c0       	mov    eax,0xc002f02d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 41 58 00 00       	call   c0013eae <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c000e6b2:	68 2f a9 02 c0       	push   0xc002a92f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 d9 f5 00 00       	call   c001dc98 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 bc f7 00 00       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 0e e9 01 c0       	push   0xc001e90e
c000e6dd:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c000e6e3:	e8 a8 f7 00 00       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e6f0:	c6 05 2d f0 02 c0 01 	mov    BYTE PTR ds:0xc002f02d,0x1
c000e6f7:	e8 49 06 01 00       	call   c001ed45 <Vm::initialise8086()>
c000e6fc:	e8 75 45 00 00       	call   c0012c76 <Fs::initVFS()>
c000e701:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 08 de 00 00       	call   c001c525 <Sys::loadSyscalls()>
c000e71d:	e8 c6 ba 00 00       	call   c001a1e8 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 3c a9 02 c0       	push   0xc002a93c
c000e72c:	68 45 a9 02 c0       	push   0xc002a945
c000e731:	e8 a1 c9 00 00       	call   c001b0d7 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 28 50 00 00       	call   c0013766 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 1f 57 00 00       	call   c0013e6e <Device::loadDriversForAll()>
c000e74f:	e8 e0 b5 00 00       	call   c0019d34 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 4d a9 02 c0       	push   0xc002a94d
c000e763:	e8 8d ef 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 af f1 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 55 fb 00 00       	call   c001e2d3 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 69 a9 02 c0       	push   0xc002a969
c000e793:	50                   	push   eax
c000e794:	e8 8f 57 00 00       	call   c0013f28 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 41 f0 02 c0 04 	test   BYTE PTR ds:0xc002f041,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 a9 85 01 00       	call   c0026ed6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 dc a0 00 00       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 b5 a0 00 00       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 93 a0 00 00       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 71 a0 00 00       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 40 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f040,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 7f 9f 00 00       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 5a 9f 00 00       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 13 84 01 00       	call   c0026e90 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 d0 83 01 00       	call   c0026e70 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 76 9f 00 00       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 79 a9 02 c0       	push   0xc002a979
c000eaf9:	e8 ed 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 8c a9 02 c0       	push   0xc002a98c
c000eb1c:	e8 ca 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 9d a9 02 c0       	push   0xc002a99d
c000eb3f:	e8 a7 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 ae a9 02 c0       	push   0xc002a9ae
c000eb62:	e8 84 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 bf a9 02 c0       	push   0xc002a9bf
c000eb85:	e8 61 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 d0 a9 02 c0       	push   0xc002a9d0
c000eba8:	e8 3e 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 e1 a9 02 c0       	push   0xc002a9e1
c000ebcb:	e8 1b 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 f2 a9 02 c0       	push   0xc002a9f2
c000ebee:	e8 f8 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 03 aa 02 c0       	push   0xc002aa03
c000ec11:	e8 d5 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 14 aa 02 c0       	push   0xc002aa14
c000ec34:	e8 b2 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 25 aa 02 c0       	push   0xc002aa25
c000ec57:	e8 8f 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 36 aa 02 c0       	push   0xc002aa36
c000ec7a:	e8 6c 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 47 aa 02 c0       	push   0xc002aa47
c000ec9d:	e8 49 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 58 aa 02 c0       	push   0xc002aa58
c000ecc0:	e8 26 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 69 aa 02 c0       	push   0xc002aa69
c000ece3:	e8 03 3c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 7a aa 02 c0       	push   0xc002aa7a
c000ed06:	e8 e0 3b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 8b aa 02 c0       	push   0xc002aa8b
c000ed29:	e8 bd 3b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 9c aa 02 c0       	push   0xc002aa9c
c000ed4c:	e8 9a 3b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 ad aa 02 c0       	push   0xc002aaad
c000ed6b:	e8 7b 3b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 90 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c490
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 6a 3b 00 00       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 be aa 02 c0       	push   0xc002aabe
c000ee54:	e8 c8 b4 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 c4 aa 02 c0       	push   0xc002aac4
c000ee8c:	e8 90 b4 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 40 f0 02 c0 04 	test   BYTE PTR ds:0xc002f040,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 60 df 02 c0 	sete   BYTE PTR ds:0xc002df60
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 81 8e 00 00       	call   c0017d80 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 16 4e 00 00       	call   c0013d24 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 be 9b 00 00       	call   c0018afc <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 d7 4d 00 00       	call   c0013d24 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 63 53 00 00       	call   c00142cc <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 a7 4d 00 00       	call   c0013d24 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 13 f0 00 00       	call   c001dfb2 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 ca aa 02 c0       	push   0xc002aaca
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 fe 38 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 db aa 02 c0       	push   0xc002aadb
c000f00a:	e8 12 b3 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 e8 aa 02 c0       	push   0xc002aae8
c000f01f:	e8 fd b2 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 f2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aaf2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 e6 b2 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 2c ab 02 c0       	push   0xc002ab2c
c000f0d0:	e8 16 38 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 32 f0 02 c0       	mov    ds:0xc002f032,eax
c000f111:	66 89 15 30 f0 02 c0 	mov    WORD PTR ds:0xc002f030,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000f228:	48                   	dec    eax
c000f229:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 a1 9c 01 00       	call   c0028f20 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 98 9c 01 00       	call   c0028f20 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 38 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f038,0x7ff
c000f375:	a3 3a f0 02 c0       	mov    ds:0xc002f03a,eax
c000f37a:	0f 01 1d 38 f0 02 c0 	lidtd  ds:0xc002f038
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f66c:	e8 ad 27 00 00       	call   c0011e1e <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 87 17 00 00       	call   c0010e16 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 b8 17 00 00       	call   c0010e56 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d e0 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dde0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 48 ab 02 c0       	push   0xc002ab48
c000f745:	e8 a1 31 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 e0 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dde0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c000f771:	8b 2d e0 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dde0
c000f777:	e8 31 04 00 00       	call   c000fbad <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 93 25 00 00       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d e0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 78 ab 02 c0       	push   0xc002ab78
c000f7fd:	e8 1f ab 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 7d ab 02 c0       	push   0xc002ab7d
c000f813:	e8 09 ab 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000f833:	48                   	dec    eax
c000f834:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f854:	e8 c5 25 00 00       	call   c0011e1e <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f86a:	e8 59 22 00 00       	call   c0011ac8 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 84 ab 02 c0       	push   0xc002ab84
c000f92b:	e8 bb 2f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000f930:	e8 f9 08 00 00       	call   c001022e <installVgaTextImplementation()>
c000f935:	0f b6 05 00 de 02 c0 	movzx  eax,BYTE PTR ds:0xc002de00
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	84 c0                	test   al,al
c000f941:	74 61                	je     c000f9a4 <kernel_main+0xbe>
c000f943:	31 db                	xor    ebx,ebx
c000f945:	31 ff                	xor    edi,edi
c000f947:	be 05 00 00 00       	mov    esi,0x5
c000f94c:	b9 0a 00 00 00       	mov    ecx,0xa
c000f951:	eb 2a                	jmp    c000f97d <kernel_main+0x97>
c000f953:	3c 0d                	cmp    al,0xd
c000f955:	74 1a                	je     c000f971 <kernel_main+0x8b>
c000f957:	3c 0a                	cmp    al,0xa
c000f959:	74 37                	je     c000f992 <kernel_main+0xac>
c000f95b:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f95e:	80 cc 0e             	or     ah,0xe
c000f961:	c1 e2 04             	shl    edx,0x4
c000f964:	01 ca                	add    edx,ecx
c000f966:	41                   	inc    ecx
c000f967:	01 fa                	add    edx,edi
c000f969:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f971:	43                   	inc    ebx
c000f972:	0f b6 83 00 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2200]
c000f979:	84 c0                	test   al,al
c000f97b:	74 27                	je     c000f9a4 <kernel_main+0xbe>
c000f97d:	80 b9 35 de 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd21cb],0xdb
c000f984:	75 cd                	jne    c000f953 <kernel_main+0x6d>
c000f986:	80 b9 34 de 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd21cc],0xdb
c000f98d:	74 c4                	je     c000f953 <kernel_main+0x6d>
c000f98f:	47                   	inc    edi
c000f990:	eb c1                	jmp    c000f953 <kernel_main+0x6d>
c000f992:	43                   	inc    ebx
c000f993:	46                   	inc    esi
c000f994:	0f b6 83 00 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2200]
c000f99b:	b9 0a 00 00 00       	mov    ecx,0xa
c000f9a0:	84 c0                	test   al,al
c000f9a2:	75 d9                	jne    c000f97d <kernel_main+0x97>
c000f9a4:	83 ec 0c             	sub    esp,0xc
c000f9a7:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9ac:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c000f9b1:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9b6:	05 ff 0f 00 00       	add    eax,0xfff
c000f9bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9c0:	50                   	push   eax
c000f9c1:	e8 30 03 00 00       	call   c000fcf6 <Phys::physicalMemorySetup(unsigned int)>
c000f9c6:	e8 d9 1c 00 00       	call   c00116a4 <Virt::virtualMemorySetup()>
c000f9cb:	58                   	pop    eax
c000f9cc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9d0:	53                   	push   ebx
c000f9d1:	e8 1a 1f 00 00       	call   c00118f0 <VAS::VAS()>
c000f9d6:	89 1d 90 f1 02 c0    	mov    DWORD PTR ds:0xc002f190,ebx
c000f9dc:	e8 3f 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9e1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9e8:	e8 9f fe ff ff       	call   c000f88c <malloc>
c000f9ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9f0:	89 c6                	mov    esi,eax
c000f9f2:	e8 8d ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9f7:	6a 00                	push   0x0
c000f9f9:	89 35 28 f0 02 c0    	mov    DWORD PTR ds:0xc002f028,esi
c000f9ff:	6a 00                	push   0x0
c000fa01:	6a 00                	push   0x0
c000fa03:	56                   	push   esi
c000fa04:	e8 cb f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000fa09:	83 c4 14             	add    esp,0x14
c000fa0c:	53                   	push   ebx
c000fa0d:	e8 8e 21 00 00       	call   c0011ba0 <VAS::~VAS()>
c000fa12:	83 c4 30             	add    esp,0x30
c000fa15:	5b                   	pop    ebx
c000fa16:	5e                   	pop    esi
c000fa17:	5f                   	pop    edi
c000fa18:	c3                   	ret    

c000fa19 <Phys::allocateDMA(unsigned long)>:
c000fa19:	55                   	push   ebp
c000fa1a:	31 d2                	xor    edx,edx
c000fa1c:	57                   	push   edi
c000fa1d:	31 ed                	xor    ebp,ebp
c000fa1f:	56                   	push   esi
c000fa20:	31 c9                	xor    ecx,ecx
c000fa22:	53                   	push   ebx
c000fa23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa27:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa2d:	31 c0                	xor    eax,eax
c000fa2f:	c1 ee 0c             	shr    esi,0xc
c000fa32:	eb 17                	jmp    c000fa4b <Phys::allocateDMA(unsigned long)+0x32>
c000fa34:	85 c9                	test   ecx,ecx
c000fa36:	75 04                	jne    c000fa3c <Phys::allocateDMA(unsigned long)+0x23>
c000fa38:	89 d5                	mov    ebp,edx
c000fa3a:	89 d0                	mov    eax,edx
c000fa3c:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa3f:	39 de                	cmp    esi,ebx
c000fa41:	74 20                	je     c000fa63 <Phys::allocateDMA(unsigned long)+0x4a>
c000fa43:	42                   	inc    edx
c000fa44:	89 d9                	mov    ecx,ebx
c000fa46:	83 fa 2f             	cmp    edx,0x2f
c000fa49:	7f 11                	jg     c000fa5c <Phys::allocateDMA(unsigned long)+0x43>
c000fa4b:	80 ba 80 f0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0f80],0x0
c000fa52:	74 e0                	je     c000fa34 <Phys::allocateDMA(unsigned long)+0x1b>
c000fa54:	31 c9                	xor    ecx,ecx
c000fa56:	42                   	inc    edx
c000fa57:	83 fa 2f             	cmp    edx,0x2f
c000fa5a:	7e ef                	jle    c000fa4b <Phys::allocateDMA(unsigned long)+0x32>
c000fa5c:	5b                   	pop    ebx
c000fa5d:	31 c0                	xor    eax,eax
c000fa5f:	5e                   	pop    esi
c000fa60:	5f                   	pop    edi
c000fa61:	5d                   	pop    ebp
c000fa62:	c3                   	ret    
c000fa63:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa66:	89 d7                	mov    edi,edx
c000fa68:	4f                   	dec    edi
c000fa69:	79 03                	jns    c000fa6e <Phys::allocateDMA(unsigned long)+0x55>
c000fa6b:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa6e:	c1 ff 04             	sar    edi,0x4
c000fa71:	89 c2                	mov    edx,eax
c000fa73:	c1 fa 04             	sar    edx,0x4
c000fa76:	39 fa                	cmp    edx,edi
c000fa78:	75 2f                	jne    c000faa9 <Phys::allocateDMA(unsigned long)+0x90>
c000fa7a:	85 db                	test   ebx,ebx
c000fa7c:	74 1a                	je     c000fa98 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa7e:	be 80 f0 02 c0       	mov    esi,0xc002f080
c000fa83:	8d 90 80 f0 02 c0    	lea    edx,[eax-0x3ffd0f80]
c000fa89:	f7 d6                	not    esi
c000fa8b:	29 c6                	sub    esi,eax
c000fa8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa90:	42                   	inc    edx
c000fa91:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa94:	39 d9                	cmp    ecx,ebx
c000fa96:	7f f5                	jg     c000fa8d <Phys::allocateDMA(unsigned long)+0x74>
c000fa98:	85 ff                	test   edi,edi
c000fa9a:	74 13                	je     c000faaf <Phys::allocateDMA(unsigned long)+0x96>
c000fa9c:	5b                   	pop    ebx
c000fa9d:	05 50 20 0c 00       	add    eax,0xc2050
c000faa2:	5e                   	pop    esi
c000faa3:	c1 e0 0c             	shl    eax,0xc
c000faa6:	5f                   	pop    edi
c000faa7:	5d                   	pop    ebp
c000faa8:	c3                   	ret    
c000faa9:	89 ea                	mov    edx,ebp
c000faab:	31 c9                	xor    ecx,ecx
c000faad:	eb a7                	jmp    c000fa56 <Phys::allocateDMA(unsigned long)+0x3d>
c000faaf:	5b                   	pop    ebx
c000fab0:	c1 e0 0c             	shl    eax,0xc
c000fab3:	5e                   	pop    esi
c000fab4:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fab9:	5f                   	pop    edi
c000faba:	5d                   	pop    ebp
c000fabb:	c3                   	ret    

c000fabc <Phys::freeDMA(unsigned long, unsigned long)>:
c000fabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fac0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fac4:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000faca:	c1 e9 0c             	shr    ecx,0xc
c000facd:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fad2:	76 25                	jbe    c000faf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fad4:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fad9:	c1 e8 0c             	shr    eax,0xc
c000fadc:	8d 50 10             	lea    edx,[eax+0x10]
c000fadf:	85 c9                	test   ecx,ecx
c000fae1:	74 15                	je     c000faf8 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fae3:	8d 82 80 f0 02 c0    	lea    eax,[edx-0x3ffd0f80]
c000fae9:	8d 94 11 80 f0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0f80]
c000faf0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000faf3:	40                   	inc    eax
c000faf4:	39 d0                	cmp    eax,edx
c000faf6:	75 f8                	jne    c000faf0 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000faf8:	c3                   	ret    
c000faf9:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000faff:	c1 ea 0c             	shr    edx,0xc
c000fb02:	eb db                	jmp    c000fadf <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fb04 <Phys::setPageState(unsigned long, bool)>:
c000fb04:	56                   	push   esi
c000fb05:	ba 01 00 00 00       	mov    edx,0x1
c000fb0a:	53                   	push   ebx
c000fb0b:	8b 35 44 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df44
c000fb11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb19:	89 c8                	mov    eax,ecx
c000fb1b:	83 e1 07             	and    ecx,0x7
c000fb1e:	c1 e8 03             	shr    eax,0x3
c000fb21:	d3 e3                	shl    ebx,cl
c000fb23:	01 c6                	add    esi,eax
c000fb25:	d3 e2                	shl    edx,cl
c000fb27:	f7 d2                	not    edx
c000fb29:	20 16                	and    BYTE PTR [esi],dl
c000fb2b:	03 05 44 df 02 c0    	add    eax,DWORD PTR ds:0xc002df44
c000fb31:	08 18                	or     BYTE PTR [eax],bl
c000fb33:	5b                   	pop    ebx
c000fb34:	5e                   	pop    esi
c000fb35:	c3                   	ret    

c000fb36 <Phys::getPageState(unsigned long)>:
c000fb36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb3a:	8b 15 44 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df44
c000fb40:	89 c8                	mov    eax,ecx
c000fb42:	83 e1 07             	and    ecx,0x7
c000fb45:	c1 e8 03             	shr    eax,0x3
c000fb48:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb4c:	d3 f8                	sar    eax,cl
c000fb4e:	83 e0 01             	and    eax,0x1
c000fb51:	c3                   	ret    

c000fb52 <Phys::freePage(unsigned long)>:
c000fb52:	53                   	push   ebx
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5a:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fb5f:	76 3a                	jbe    c000fb9b <Phys::freePage(unsigned long)+0x49>
c000fb61:	c1 e8 0c             	shr    eax,0xc
c000fb64:	50                   	push   eax
c000fb65:	89 c3                	mov    ebx,eax
c000fb67:	e8 ca ff ff ff       	call   c000fb36 <Phys::getPageState(unsigned long)>
c000fb6c:	5a                   	pop    edx
c000fb6d:	84 c0                	test   al,al
c000fb6f:	74 19                	je     c000fb8a <Phys::freePage(unsigned long)+0x38>
c000fb71:	83 ec 08             	sub    esp,0x8
c000fb74:	ff 0d 70 f0 02 c0    	dec    DWORD PTR ds:0xc002f070
c000fb7a:	6a 00                	push   0x0
c000fb7c:	53                   	push   ebx
c000fb7d:	e8 82 ff ff ff       	call   c000fb04 <Phys::setPageState(unsigned long, bool)>
c000fb82:	83 c4 10             	add    esp,0x10
c000fb85:	83 c4 08             	add    esp,0x8
c000fb88:	5b                   	pop    ebx
c000fb89:	c3                   	ret    
c000fb8a:	c7 44 24 10 9b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab9b
c000fb92:	83 c4 08             	add    esp,0x8
c000fb95:	5b                   	pop    ebx
c000fb96:	e9 86 a7 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c000fb9b:	68 00 10 00 00       	push   0x1000
c000fba0:	50                   	push   eax
c000fba1:	e8 16 ff ff ff       	call   c000fabc <Phys::freeDMA(unsigned long, unsigned long)>
c000fba6:	59                   	pop    ecx
c000fba7:	5b                   	pop    ebx
c000fba8:	83 c4 08             	add    esp,0x8
c000fbab:	5b                   	pop    ebx
c000fbac:	c3                   	ret    

c000fbad <Phys::allocatePage()>:
c000fbad:	56                   	push   esi
c000fbae:	53                   	push   ebx
c000fbaf:	51                   	push   ecx
c000fbb0:	8b 35 64 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f064
c000fbb6:	89 f3                	mov    ebx,esi
c000fbb8:	eb 0a                	jmp    c000fbc4 <Phys::allocatePage()+0x17>
c000fbba:	89 1d 64 f0 02 c0    	mov    DWORD PTR ds:0xc002f064,ebx
c000fbc0:	39 de                	cmp    esi,ebx
c000fbc2:	74 24                	je     c000fbe8 <Phys::allocatePage()+0x3b>
c000fbc4:	53                   	push   ebx
c000fbc5:	e8 6c ff ff ff       	call   c000fb36 <Phys::getPageState(unsigned long)>
c000fbca:	5a                   	pop    edx
c000fbcb:	84 c0                	test   al,al
c000fbcd:	74 77                	je     c000fc46 <Phys::allocatePage()+0x99>
c000fbcf:	43                   	inc    ebx
c000fbd0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbd6:	75 e2                	jne    c000fbba <Phys::allocatePage()+0xd>
c000fbd8:	31 db                	xor    ebx,ebx
c000fbda:	c7 05 64 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f064,0x0
c000fbe4:	39 de                	cmp    esi,ebx
c000fbe6:	75 dc                	jne    c000fbc4 <Phys::allocatePage()+0x17>
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbf0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbf3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fbf9:	e8 1a 2a 00 00       	call   c0012618 <VAS::scanForEviction()>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	85 c0                	test   eax,eax
c000fc03:	75 59                	jne    c000fc5e <Phys::allocatePage()+0xb1>
c000fc05:	83 ec 0c             	sub    esp,0xc
c000fc08:	68 b1 ab 02 c0       	push   0xc002abb1
c000fc0d:	e8 d9 2c 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fc12:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc19:	e8 fb fd ff ff       	call   c000fa19 <Phys::allocateDMA(unsigned long)>
c000fc1e:	83 c4 10             	add    esp,0x10
c000fc21:	85 c0                	test   eax,eax
c000fc23:	75 39                	jne    c000fc5e <Phys::allocatePage()+0xb1>
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	68 c2 ab 02 c0       	push   0xc002abc2
c000fc2d:	e8 ef a6 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	8b 1d 64 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f064
c000fc3b:	53                   	push   ebx
c000fc3c:	e8 f5 fe ff ff       	call   c000fb36 <Phys::getPageState(unsigned long)>
c000fc41:	5a                   	pop    edx
c000fc42:	84 c0                	test   al,al
c000fc44:	75 89                	jne    c000fbcf <Phys::allocatePage()+0x22>
c000fc46:	6a 01                	push   0x1
c000fc48:	53                   	push   ebx
c000fc49:	e8 b6 fe ff ff       	call   c000fb04 <Phys::setPageState(unsigned long, bool)>
c000fc4e:	a1 64 f0 02 c0       	mov    eax,ds:0xc002f064
c000fc53:	59                   	pop    ecx
c000fc54:	ff 05 70 f0 02 c0    	inc    DWORD PTR ds:0xc002f070
c000fc5a:	c1 e0 0c             	shl    eax,0xc
c000fc5d:	5b                   	pop    ebx
c000fc5e:	5a                   	pop    edx
c000fc5f:	5b                   	pop    ebx
c000fc60:	5e                   	pop    esi
c000fc61:	c3                   	ret    

c000fc62 <Phys::allocateContiguousPages(int)>:
c000fc62:	57                   	push   edi
c000fc63:	56                   	push   esi
c000fc64:	53                   	push   ebx
c000fc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc69:	fa                   	cli    
c000fc6a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000fc70:	31 db                	xor    ebx,ebx
c000fc72:	85 db                	test   ebx,ebx
c000fc74:	75 11                	jne    c000fc87 <Phys::allocateContiguousPages(int)+0x25>
c000fc76:	e8 32 ff ff ff       	call   c000fbad <Phys::allocatePage()>
c000fc7b:	83 fe 01             	cmp    esi,0x1
c000fc7e:	89 c7                	mov    edi,eax
c000fc80:	74 21                	je     c000fca3 <Phys::allocateContiguousPages(int)+0x41>
c000fc82:	bb 01 00 00 00       	mov    ebx,0x1
c000fc87:	e8 21 ff ff ff       	call   c000fbad <Phys::allocatePage()>
c000fc8c:	89 da                	mov    edx,ebx
c000fc8e:	c1 e2 0c             	shl    edx,0xc
c000fc91:	01 fa                	add    edx,edi
c000fc93:	39 c2                	cmp    edx,eax
c000fc95:	74 20                	je     c000fcb7 <Phys::allocateContiguousPages(int)+0x55>
c000fc97:	bb 01 00 00 00       	mov    ebx,0x1
c000fc9c:	89 c7                	mov    edi,eax
c000fc9e:	83 fe 01             	cmp    esi,0x1
c000fca1:	75 e4                	jne    c000fc87 <Phys::allocateContiguousPages(int)+0x25>
c000fca3:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000fca8:	48                   	dec    eax
c000fca9:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000fcae:	75 01                	jne    c000fcb1 <Phys::allocateContiguousPages(int)+0x4f>
c000fcb0:	fb                   	sti    
c000fcb1:	89 f8                	mov    eax,edi
c000fcb3:	5b                   	pop    ebx
c000fcb4:	5e                   	pop    esi
c000fcb5:	5f                   	pop    edi
c000fcb6:	c3                   	ret    
c000fcb7:	43                   	inc    ebx
c000fcb8:	39 f3                	cmp    ebx,esi
c000fcba:	75 b6                	jne    c000fc72 <Phys::allocateContiguousPages(int)+0x10>
c000fcbc:	eb e5                	jmp    c000fca3 <Phys::allocateContiguousPages(int)+0x41>

c000fcbe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fcbe:	56                   	push   esi
c000fcbf:	53                   	push   ebx
c000fcc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcc4:	39 1d 68 f0 02 c0    	cmp    DWORD PTR ds:0xc002f068,ebx
c000fcca:	73 06                	jae    c000fcd2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fccc:	89 1d 68 f0 02 c0    	mov    DWORD PTR ds:0xc002f068,ebx
c000fcd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd6:	c1 eb 0c             	shr    ebx,0xc
c000fcd9:	c1 e8 0c             	shr    eax,0xc
c000fcdc:	39 d8                	cmp    eax,ebx
c000fcde:	73 13                	jae    c000fcf3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fce0:	6a 00                	push   0x0
c000fce2:	8d 70 01             	lea    esi,[eax+0x1]
c000fce5:	50                   	push   eax
c000fce6:	e8 19 fe ff ff       	call   c000fb04 <Phys::setPageState(unsigned long, bool)>
c000fceb:	5a                   	pop    edx
c000fcec:	89 f0                	mov    eax,esi
c000fcee:	59                   	pop    ecx
c000fcef:	39 f3                	cmp    ebx,esi
c000fcf1:	75 ed                	jne    c000fce0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcf3:	5b                   	pop    ebx
c000fcf4:	5e                   	pop    esi
c000fcf5:	c3                   	ret    

c000fcf6 <Phys::physicalMemorySetup(unsigned int)>:
c000fcf6:	55                   	push   ebp
c000fcf7:	57                   	push   edi
c000fcf8:	56                   	push   esi
c000fcf9:	53                   	push   ebx
c000fcfa:	31 db                	xor    ebx,ebx
c000fcfc:	83 ec 40             	sub    esp,0x40
c000fcff:	6a 30                	push   0x30
c000fd01:	6a 00                	push   0x0
c000fd03:	68 80 f0 02 c0       	push   0xc002f080
c000fd08:	e8 43 0a ff ff       	call   c0000750 <memset>
c000fd0d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd11:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd16:	05 00 10 00 00       	add    eax,0x1000
c000fd1b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	83 ec 08             	sub    esp,0x8
c000fd25:	6a 01                	push   0x1
c000fd27:	53                   	push   ebx
c000fd28:	43                   	inc    ebx
c000fd29:	e8 d6 fd ff ff       	call   c000fb04 <Phys::setPageState(unsigned long, bool)>
c000fd2e:	83 c4 10             	add    esp,0x10
c000fd31:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd37:	75 e9                	jne    c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd39:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd40:	66 85 c0             	test   ax,ax
c000fd43:	0f 84 8e 01 00 00    	je     c000fed7 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd4d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd59:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd62:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd6a:	eb 15                	jmp    c000fd81 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd6c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd70:	83 c3 18             	add    ebx,0x18
c000fd73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd77:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd7b:	0f 84 66 01 00 00    	je     c000fee7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd81:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd87:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd92:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd94:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd97:	01 f0                	add    eax,esi
c000fd99:	55                   	push   ebp
c000fd9a:	11 fa                	adc    edx,edi
c000fd9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fda0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fda4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fda8:	56                   	push   esi
c000fda9:	68 fc ab 02 c0       	push   0xc002abfc
c000fdae:	e8 38 2b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fdb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	09 f8                	or     eax,edi
c000fdbc:	0f 85 25 01 00 00    	jne    c000fee7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fdc2:	4d                   	dec    ebp
c000fdc3:	75 a7                	jne    c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdc5:	ba 00 00 08 00       	mov    edx,0x80000
c000fdca:	89 c1                	mov    ecx,eax
c000fdcc:	39 f2                	cmp    edx,esi
c000fdce:	19 f9                	sbb    ecx,edi
c000fdd0:	0f 82 a7 00 00 00    	jb     c000fe7d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdd6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fdda:	89 c1                	mov    ecx,eax
c000fddc:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fde0:	0f 83 97 00 00 00    	jae    c000fe7d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fde6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdeb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdef:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdf3:	39 fa                	cmp    edx,edi
c000fdf5:	19 e8                	sbb    eax,ebp
c000fdf7:	0f 82 14 01 00 00    	jb     c000ff11 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fdfd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe01:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe05:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe0b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe10:	83 d5 ff             	adc    ebp,0xffffffff
c000fe13:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe17:	31 c0                	xor    eax,eax
c000fe19:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe1d:	39 fa                	cmp    edx,edi
c000fe1f:	89 c1                	mov    ecx,eax
c000fe21:	19 e9                	sbb    ecx,ebp
c000fe23:	0f 83 43 ff ff ff    	jae    c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe29:	be 00 00 08 00       	mov    esi,0x80000
c000fe2e:	50                   	push   eax
c000fe2f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe33:	57                   	push   edi
c000fe34:	56                   	push   esi
c000fe35:	68 20 ac 02 c0       	push   0xc002ac20
c000fe3a:	e8 ac 2a 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fe3f:	5a                   	pop    edx
c000fe40:	59                   	pop    ecx
c000fe41:	57                   	push   edi
c000fe42:	56                   	push   esi
c000fe43:	e8 76 fe ff ff       	call   c000fcbe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe50:	83 c4 0c             	add    esp,0xc
c000fe53:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe57:	03 05 74 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f074
c000fe5d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe64:	a3 74 f0 02 c0       	mov    ds:0xc002f074,eax
c000fe69:	52                   	push   edx
c000fe6a:	50                   	push   eax
c000fe6b:	68 de ab 02 c0       	push   0xc002abde
c000fe70:	e8 76 2a 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	e9 ef fe ff ff       	jmp    c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe7d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe89:	39 ea                	cmp    edx,ebp
c000fe8b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe8f:	0f 82 d7 fe ff ff    	jb     c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe95:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe9a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe9e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fea2:	0f 83 c4 fe ff ff    	jae    c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fea8:	39 ee                	cmp    esi,ebp
c000feaa:	89 f8                	mov    eax,edi
c000feac:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000feb0:	0f 83 78 ff ff ff    	jae    c000fe2e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000feb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000feba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000febe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fec2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fec6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000feca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fece:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fed2:	e9 57 ff ff ff       	jmp    c000fe2e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	68 d0 ab 02 c0       	push   0xc002abd0
c000fedf:	e8 3d a4 00 00       	call   c001a321 <Krnl::panic(char const*)>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	bb 40 01 00 00       	mov    ebx,0x140
c000feec:	83 ec 08             	sub    esp,0x8
c000feef:	6a 00                	push   0x0
c000fef1:	53                   	push   ebx
c000fef2:	43                   	inc    ebx
c000fef3:	e8 0c fc ff ff       	call   c000fb04 <Phys::setPageState(unsigned long, bool)>
c000fef8:	ff 05 74 f0 02 c0    	inc    DWORD PTR ds:0xc002f074
c000fefe:	83 c4 10             	add    esp,0x10
c000ff01:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff07:	75 e3                	jne    c000feec <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ff09:	83 c4 3c             	add    esp,0x3c
c000ff0c:	5b                   	pop    ebx
c000ff0d:	5e                   	pop    esi
c000ff0e:	5f                   	pop    edi
c000ff0f:	5d                   	pop    ebp
c000ff10:	c3                   	ret    
c000ff11:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff21:	e9 d7 fe ff ff       	jmp    c000fdfd <Phys::physicalMemorySetup(unsigned int)+0x107>

c000ff26 <Pipe::isAtty()>:
c000ff26:	31 c0                	xor    eax,eax
c000ff28:	c3                   	ret    
c000ff29:	90                   	nop

c000ff2a <Pipe::~Pipe()>:
c000ff2a:	83 ec 0c             	sub    esp,0xc
c000ff2d:	ba 8c ac 02 c0       	mov    edx,0xc002ac8c
c000ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff36:	89 10                	mov    DWORD PTR [eax],edx
c000ff38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	50                   	push   eax
c000ff40:	e8 3f 13 00 00       	call   c0011284 <UnixFile::~UnixFile()>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	90                   	nop
c000ff49:	83 c4 0c             	add    esp,0xc
c000ff4c:	c3                   	ret    
c000ff4d:	90                   	nop

c000ff4e <Pipe::~Pipe()>:
c000ff4e:	83 ec 0c             	sub    esp,0xc
c000ff51:	83 ec 0c             	sub    esp,0xc
c000ff54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff58:	e8 cd ff ff ff       	call   c000ff2a <Pipe::~Pipe()>
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	83 ec 08             	sub    esp,0x8
c000ff63:	6a 20                	push   0x20
c000ff65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff69:	e8 9d 28 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	83 c4 0c             	add    esp,0xc
c000ff74:	c3                   	ret    
c000ff75:	90                   	nop

c000ff76 <Pipe::read(unsigned long long, void*, int*)>:
c000ff76:	55                   	push   ebp
c000ff77:	57                   	push   edi
c000ff78:	56                   	push   esi
c000ff79:	53                   	push   ebx
c000ff7a:	83 ec 1c             	sub    esp,0x1c
c000ff7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff81:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff85:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff89:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff8c:	89 c8                	mov    eax,ecx
c000ff8e:	99                   	cdq    
c000ff8f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff93:	74 24                	je     c000ffb9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff95:	39 f9                	cmp    ecx,edi
c000ff97:	89 d1                	mov    ecx,edx
c000ff99:	19 f1                	sbb    ecx,esi
c000ff9b:	73 1c                	jae    c000ffb9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff9d:	fa                   	cli    
c000ff9e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000ffa4:	e8 2b e1 00 00       	call   c001e0d4 <schedule()>
c000ffa9:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000ffae:	48                   	dec    eax
c000ffaf:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000ffb4:	75 d3                	jne    c000ff89 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffb6:	fb                   	sti    
c000ffb7:	eb d0                	jmp    c000ff89 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffb9:	39 f8                	cmp    eax,edi
c000ffbb:	89 d1                	mov    ecx,edx
c000ffbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffc4:	19 f1                	sbb    ecx,esi
c000ffc6:	73 07                	jae    c000ffcf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffc8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffcf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffd2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffd5:	29 f7                	sub    edi,esi
c000ffd7:	89 f8                	mov    eax,edi
c000ffd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffdd:	99                   	cdq    
c000ffde:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe5:	19 d0                	sbb    eax,edx
c000ffe7:	73 07                	jae    c000fff0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ffe9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fff0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fff3:	89 ea                	mov    edx,ebp
c000fff5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fff9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fffe:	74 0d                	je     c001000d <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010000:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010003:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010007:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001000b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001000d:	85 d2                	test   edx,edx
c001000f:	74 11                	je     c0010022 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010011:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010015:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010018:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001001c:	89 d1                	mov    ecx,edx
c001001e:	89 c7                	mov    edi,eax
c0010020:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010022:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010025:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010028:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001002b:	99                   	cdq    
c001002c:	89 f7                	mov    edi,esi
c001002e:	03 04 24             	add    eax,DWORD PTR [esp]
c0010031:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010035:	c1 ff 1f             	sar    edi,0x1f
c0010038:	57                   	push   edi
c0010039:	56                   	push   esi
c001003a:	52                   	push   edx
c001003b:	50                   	push   eax
c001003c:	e8 d3 72 01 00       	call   c0027314 <__umoddi3>
c0010041:	83 c4 10             	add    esp,0x10
c0010044:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010047:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001004c:	75 10                	jne    c001005e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001004e:	83 ec 0c             	sub    esp,0xc
c0010051:	68 49 ac 02 c0       	push   0xc002ac49
c0010056:	e8 c6 a2 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010062:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010065:	89 10                	mov    DWORD PTR [eax],edx
c0010067:	83 c4 1c             	add    esp,0x1c
c001006a:	31 c0                	xor    eax,eax
c001006c:	5b                   	pop    ebx
c001006d:	5e                   	pop    esi
c001006e:	5f                   	pop    edi
c001006f:	5d                   	pop    ebp
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <Pipe::write(unsigned long long, void*, int*)>:
c0010072:	55                   	push   ebp
c0010073:	57                   	push   edi
c0010074:	56                   	push   esi
c0010075:	53                   	push   ebx
c0010076:	83 ec 1c             	sub    esp,0x1c
c0010079:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001007d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010081:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010084:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010088:	89 04 24             	mov    DWORD PTR [esp],eax
c001008b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001008f:	89 d8                	mov    eax,ebx
c0010091:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010094:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010098:	89 d6                	mov    esi,edx
c001009a:	89 d7                	mov    edi,edx
c001009c:	c1 ff 1f             	sar    edi,0x1f
c001009f:	03 34 24             	add    esi,DWORD PTR [esp]
c00100a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00100a6:	c1 f8 1f             	sar    eax,0x1f
c00100a9:	39 f3                	cmp    ebx,esi
c00100ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100b3:	19 f8                	sbb    eax,edi
c00100b5:	b8 01 00 00 00       	mov    eax,0x1
c00100ba:	72 6e                	jb     c001012a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00100bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00100bf:	01 d0                	add    eax,edx
c00100c1:	99                   	cdq    
c00100c2:	f7 fb                	idiv   ebx
c00100c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c8:	29 d3                	sub    ebx,edx
c00100ca:	89 d7                	mov    edi,edx
c00100cc:	89 de                	mov    esi,ebx
c00100ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100d1:	c1 fb 1f             	sar    ebx,0x1f
c00100d4:	39 f2                	cmp    edx,esi
c00100d6:	19 d8                	sbb    eax,ebx
c00100d8:	b8 00 00 00 00       	mov    eax,0x0
c00100dd:	72 04                	jb     c00100e3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100df:	89 d0                	mov    eax,edx
c00100e1:	29 f0                	sub    eax,esi
c00100e3:	89 d3                	mov    ebx,edx
c00100e5:	29 c3                	sub    ebx,eax
c00100e7:	74 0b                	je     c00100f4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100e9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100ec:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100f0:	89 d9                	mov    ecx,ebx
c00100f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100f4:	85 c0                	test   eax,eax
c00100f6:	74 0d                	je     c0010105 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00100f8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00100fc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00100ff:	89 de                	mov    esi,ebx
c0010101:	89 c1                	mov    ecx,eax
c0010103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010105:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010108:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001010d:	75 10                	jne    c001011f <Pipe::write(unsigned long long, void*, int*)+0xad>
c001010f:	83 ec 0c             	sub    esp,0xc
c0010112:	68 65 ac 02 c0       	push   0xc002ac65
c0010117:	e8 05 a2 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010123:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010126:	89 08                	mov    DWORD PTR [eax],ecx
c0010128:	31 c0                	xor    eax,eax
c001012a:	83 c4 1c             	add    esp,0x1c
c001012d:	5b                   	pop    ebx
c001012e:	5e                   	pop    esi
c001012f:	5f                   	pop    edi
c0010130:	5d                   	pop    ebp
c0010131:	c3                   	ret    

c0010132 <Pipe::Pipe(int)>:
c0010132:	83 ec 0c             	sub    esp,0xc
c0010135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010139:	83 ec 08             	sub    esp,0x8
c001013c:	6a 00                	push   0x0
c001013e:	50                   	push   eax
c001013f:	e8 5e 0f 00 00       	call   c00110a2 <UnixFile::UnixFile(int)>
c0010144:	83 c4 10             	add    esp,0x10
c0010147:	ba 8c ac 02 c0       	mov    edx,0xc002ac8c
c001014c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010150:	89 10                	mov    DWORD PTR [eax],edx
c0010152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010156:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001015a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001015d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010161:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010173:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010177:	83 ec 0c             	sub    esp,0xc
c001017a:	50                   	push   eax
c001017b:	e8 0c f7 ff ff       	call   c000f88c <malloc>
c0010180:	83 c4 10             	add    esp,0x10
c0010183:	89 c2                	mov    edx,eax
c0010185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010189:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001018c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010190:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010194:	90                   	nop
c0010195:	83 c4 0c             	add    esp,0xc
c0010198:	c3                   	ret    
c0010199:	90                   	nop

c001019a <VgaText::isAtty()>:
c001019a:	b0 01                	mov    al,0x1
c001019c:	c3                   	ret    
c001019d:	90                   	nop

c001019e <VgaText::~VgaText()>:
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c00101a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101aa:	89 10                	mov    DWORD PTR [eax],edx
c00101ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b0:	83 ec 0c             	sub    esp,0xc
c00101b3:	50                   	push   eax
c00101b4:	e8 cb 10 00 00       	call   c0011284 <UnixFile::~UnixFile()>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	90                   	nop
c00101bd:	83 c4 0c             	add    esp,0xc
c00101c0:	c3                   	ret    
c00101c1:	90                   	nop

c00101c2 <VgaText::~VgaText()>:
c00101c2:	83 ec 0c             	sub    esp,0xc
c00101c5:	83 ec 0c             	sub    esp,0xc
c00101c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101cc:	e8 cd ff ff ff       	call   c001019e <VgaText::~VgaText()>
c00101d1:	83 c4 10             	add    esp,0x10
c00101d4:	83 ec 08             	sub    esp,0x8
c00101d7:	68 c4 02 00 00       	push   0x2c4
c00101dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e0:	e8 26 26 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c00101e5:	83 c4 10             	add    esp,0x10
c00101e8:	83 c4 0c             	add    esp,0xc
c00101eb:	c3                   	ret    

c00101ec <VgaText::read(unsigned long long, void*, int*)>:
c00101ec:	83 ec 10             	sub    esp,0x10
c00101ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fb:	e8 a0 5b 00 00       	call   c0015da0 <readKeyboard(VgaText*, char*, unsigned long)>
c0010200:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010204:	89 02                	mov    DWORD PTR [edx],eax
c0010206:	31 c0                	xor    eax,eax
c0010208:	83 c4 1c             	add    esp,0x1c
c001020b:	c3                   	ret    

c001020c <setTerminalScrollLock(bool)>:
c001020c:	c3                   	ret    

c001020d <addToTerminalCycle(VgaText*)>:
c001020d:	8b 15 e0 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e0
c0010213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010217:	85 d2                	test   edx,edx
c0010219:	75 09                	jne    c0010224 <addToTerminalCycle(VgaText*)+0x17>
c001021b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001021e:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c0010223:	c3                   	ret    
c0010224:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010227:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001022a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001022d:	c3                   	ret    

c001022e <installVgaTextImplementation()>:
c001022e:	83 ec 10             	sub    esp,0x10
c0010231:	6a 20                	push   0x20
c0010233:	6a 00                	push   0x0
c0010235:	68 c0 f0 02 c0       	push   0xc002f0c0
c001023a:	e8 11 05 ff ff       	call   c0000750 <memset>
c001023f:	83 c4 1c             	add    esp,0x1c
c0010242:	c3                   	ret    

c0010243 <scrollTerminalScrollLock(int)>:
c0010243:	c3                   	ret    

c0010244 <VgaText::updateTitle()>:
c0010244:	53                   	push   ebx
c0010245:	31 c0                	xor    eax,eax
c0010247:	83 ec 58             	sub    esp,0x58
c001024a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001024e:	89 e1                	mov    ecx,esp
c0010250:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010254:	40                   	inc    eax
c0010255:	83 f8 50             	cmp    eax,0x50
c0010258:	75 f6                	jne    c0010250 <VgaText::updateTitle()+0xc>
c001025a:	31 c0                	xor    eax,eax
c001025c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010263:	84 db                	test   bl,bl
c0010265:	74 06                	je     c001026d <VgaText::updateTitle()+0x29>
c0010267:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001026a:	40                   	inc    eax
c001026b:	eb ef                	jmp    c001025c <VgaText::updateTitle()+0x18>
c001026d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010270:	85 c0                	test   eax,eax
c0010272:	74 09                	je     c001027d <VgaText::updateTitle()+0x39>
c0010274:	53                   	push   ebx
c0010275:	53                   	push   ebx
c0010276:	51                   	push   ecx
c0010277:	52                   	push   edx
c0010278:	ff d0                	call   eax
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	83 c4 58             	add    esp,0x58
c0010280:	5b                   	pop    ebx
c0010281:	c3                   	ret    

c0010282 <VgaText::load()>:
c0010282:	53                   	push   ebx
c0010283:	31 c0                	xor    eax,eax
c0010285:	83 ec 58             	sub    esp,0x58
c0010288:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001028c:	89 e2                	mov    edx,esp
c001028e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010292:	40                   	inc    eax
c0010293:	83 f8 50             	cmp    eax,0x50
c0010296:	75 f6                	jne    c001028e <VgaText::load()+0xc>
c0010298:	31 c0                	xor    eax,eax
c001029a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00102a1:	84 c9                	test   cl,cl
c00102a3:	74 06                	je     c00102ab <VgaText::load()+0x29>
c00102a5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00102a8:	40                   	inc    eax
c00102a9:	eb ef                	jmp    c001029a <VgaText::load()+0x18>
c00102ab:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00102ae:	85 c0                	test   eax,eax
c00102b0:	74 09                	je     c00102bb <VgaText::load()+0x39>
c00102b2:	51                   	push   ecx
c00102b3:	51                   	push   ecx
c00102b4:	52                   	push   edx
c00102b5:	53                   	push   ebx
c00102b6:	ff d0                	call   eax
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102be:	85 c0                	test   eax,eax
c00102c0:	74 09                	je     c00102cb <VgaText::load()+0x49>
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	53                   	push   ebx
c00102c6:	ff d0                	call   eax
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	83 c4 58             	add    esp,0x58
c00102ce:	5b                   	pop    ebx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::updateCursor()>:
c00102d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d4:	39 05 e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,eax
c00102da:	75 09                	jne    c00102e5 <VgaText::updateCursor()+0x15>
c00102dc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102df:	85 c0                	test   eax,eax
c00102e1:	74 02                	je     c00102e5 <VgaText::updateCursor()+0x15>
c00102e3:	ff e0                	jmp    eax
c00102e5:	c3                   	ret    

c00102e6 <VgaText::showCursor(bool)>:
c00102e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ee:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102f1:	c3                   	ret    

c00102f2 <VgaText::disableBlink(bool)>:
c00102f2:	56                   	push   esi
c00102f3:	53                   	push   ebx
c00102f4:	51                   	push   ecx
c00102f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102fd:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c0010303:	75 15                	jne    c001031a <VgaText::disableBlink(bool)+0x28>
c0010305:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010308:	85 c0                	test   eax,eax
c001030a:	74 0e                	je     c001031a <VgaText::disableBlink(bool)+0x28>
c001030c:	89 f1                	mov    ecx,esi
c001030e:	52                   	push   edx
c001030f:	52                   	push   edx
c0010310:	0f b6 d1             	movzx  edx,cl
c0010313:	52                   	push   edx
c0010314:	53                   	push   ebx
c0010315:	ff d0                	call   eax
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	89 f0                	mov    eax,esi
c001031c:	83 f0 01             	xor    eax,0x1
c001031f:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010322:	58                   	pop    eax
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	c3                   	ret    

c0010326 <VgaText::doANSI_SGR(int)>:
c0010326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001032a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032e:	85 d2                	test   edx,edx
c0010330:	75 0b                	jne    c001033d <VgaText::doANSI_SGR(int)+0x17>
c0010332:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010335:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010338:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001033b:	eb 59                	jmp    c0010396 <VgaText::doANSI_SGR(int)+0x70>
c001033d:	83 fa 07             	cmp    edx,0x7
c0010340:	75 0b                	jne    c001034d <VgaText::doANSI_SGR(int)+0x27>
c0010342:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010345:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010348:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001034b:	eb 49                	jmp    c0010396 <VgaText::doANSI_SGR(int)+0x70>
c001034d:	83 fa 1b             	cmp    edx,0x1b
c0010350:	74 e0                	je     c0010332 <VgaText::doANSI_SGR(int)+0xc>
c0010352:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010355:	83 f9 07             	cmp    ecx,0x7
c0010358:	77 09                	ja     c0010363 <VgaText::doANSI_SGR(int)+0x3d>
c001035a:	8b 14 8d 80 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2080]
c0010361:	eb 20                	jmp    c0010383 <VgaText::doANSI_SGR(int)+0x5d>
c0010363:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010366:	83 f9 07             	cmp    ecx,0x7
c0010369:	77 09                	ja     c0010374 <VgaText::doANSI_SGR(int)+0x4e>
c001036b:	8b 14 8d 80 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2080]
c0010372:	eb 22                	jmp    c0010396 <VgaText::doANSI_SGR(int)+0x70>
c0010374:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010377:	83 f9 07             	cmp    ecx,0x7
c001037a:	77 0b                	ja     c0010387 <VgaText::doANSI_SGR(int)+0x61>
c001037c:	8b 14 95 38 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c8]
c0010383:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010386:	c3                   	ret    
c0010387:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001038a:	83 f9 07             	cmp    ecx,0x7
c001038d:	77 0a                	ja     c0010399 <VgaText::doANSI_SGR(int)+0x73>
c001038f:	8b 14 95 10 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21f0]
c0010396:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010399:	c3                   	ret    

c001039a <VgaText::setDefaultBgColour(VgaColour)>:
c001039a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001039e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00103a5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103a8:	c3                   	ret    
c00103a9:	90                   	nop

c00103aa <VgaText::setDefaultFgColour(VgaColour)>:
c00103aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103b2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00103b5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103b8:	c3                   	ret    
c00103b9:	90                   	nop

c00103ba <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103ba:	53                   	push   ebx
c00103bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103c7:	51                   	push   ecx
c00103c8:	e8 cd ff ff ff       	call   c001039a <VgaText::setDefaultBgColour(VgaColour)>
c00103cd:	58                   	pop    eax
c00103ce:	5a                   	pop    edx
c00103cf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103d7:	5b                   	pop    ebx
c00103d8:	eb d0                	jmp    c00103aa <VgaText::setDefaultFgColour(VgaColour)>

c00103da <VgaText::setTitleTextColour(VgaColour)>:
c00103da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00103e5:	e9 5a fe ff ff       	jmp    c0010244 <VgaText::updateTitle()>

c00103ea <VgaText::setTitleColour(VgaColour)>:
c00103ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00103f5:	e9 4a fe ff ff       	jmp    c0010244 <VgaText::updateTitle()>

c00103fa <VgaText::setTitle(char*)>:
c00103fa:	53                   	push   ebx
c00103fb:	83 ec 10             	sub    esp,0x10
c00103fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010406:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001040c:	50                   	push   eax
c001040d:	e8 fa 03 ff ff       	call   c000080c <strcpy>
c0010412:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010416:	83 c4 18             	add    esp,0x18
c0010419:	5b                   	pop    ebx
c001041a:	e9 25 fe ff ff       	jmp    c0010244 <VgaText::updateTitle()>
c001041f:	90                   	nop

c0010420 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010420:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010424:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010429:	83 e0 0f             	and    eax,0xf
c001042c:	c1 e2 04             	shl    edx,0x4
c001042f:	09 d0                	or     eax,edx
c0010431:	c3                   	ret    

c0010432 <VgaText::scrollScreen()>:
c0010432:	55                   	push   ebp
c0010433:	b9 01 00 00 00       	mov    ecx,0x1
c0010438:	57                   	push   edi
c0010439:	56                   	push   esi
c001043a:	53                   	push   ebx
c001043b:	83 ec 0c             	sub    esp,0xc
c001043e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010442:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010448:	31 ff                	xor    edi,edi
c001044a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001044d:	83 f9 17             	cmp    ecx,0x17
c0010450:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010453:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001045a:	75 27                	jne    c0010483 <VgaText::scrollScreen()+0x51>
c001045c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001045f:	01 f5                	add    ebp,esi
c0010461:	f7 c7 01 00 00 00    	test   edi,0x1
c0010467:	74 16                	je     c001047f <VgaText::scrollScreen()+0x4d>
c0010469:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001046d:	50                   	push   eax
c001046e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010472:	50                   	push   eax
c0010473:	e8 a8 ff ff ff       	call   c0010420 <VgaText::combineColours(unsigned char, unsigned char)>
c0010478:	5a                   	pop    edx
c0010479:	5a                   	pop    edx
c001047a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001047d:	eb 04                	jmp    c0010483 <VgaText::scrollScreen()+0x51>
c001047f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010483:	47                   	inc    edi
c0010484:	46                   	inc    esi
c0010485:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001048b:	75 bd                	jne    c001044a <VgaText::scrollScreen()+0x18>
c001048d:	41                   	inc    ecx
c001048e:	83 f9 18             	cmp    ecx,0x18
c0010491:	75 af                	jne    c0010442 <VgaText::scrollScreen()+0x10>
c0010493:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c0010499:	75 1b                	jne    c00104b6 <VgaText::scrollScreen()+0x84>
c001049b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001049f:	74 05                	je     c00104a6 <VgaText::scrollScreen()+0x74>
c00104a1:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00104a4:	eb 10                	jmp    c00104b6 <VgaText::scrollScreen()+0x84>
c00104a6:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00104a9:	85 c0                	test   eax,eax
c00104ab:	74 09                	je     c00104b6 <VgaText::scrollScreen()+0x84>
c00104ad:	83 ec 0c             	sub    esp,0xc
c00104b0:	53                   	push   ebx
c00104b1:	ff d0                	call   eax
c00104b3:	83 c4 10             	add    esp,0x10
c00104b6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104ba:	83 c4 0c             	add    esp,0xc
c00104bd:	5b                   	pop    ebx
c00104be:	5e                   	pop    esi
c00104bf:	5f                   	pop    edi
c00104c0:	5d                   	pop    ebp
c00104c1:	e9 0a fe ff ff       	jmp    c00102d0 <VgaText::updateCursor()>

c00104c6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00104c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104cb:	c1 e0 08             	shl    eax,0x8
c00104ce:	89 c2                	mov    edx,eax
c00104d0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104d5:	09 d0                	or     eax,edx
c00104d7:	c3                   	ret    

c00104d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104d8:	56                   	push   esi
c00104d9:	53                   	push   ebx
c00104da:	51                   	push   ecx
c00104db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104df:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104e4:	50                   	push   eax
c00104e5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104ea:	50                   	push   eax
c00104eb:	e8 30 ff ff ff       	call   c0010420 <VgaText::combineColours(unsigned char, unsigned char)>
c00104f0:	5b                   	pop    ebx
c00104f1:	0f b6 c0             	movzx  eax,al
c00104f4:	5e                   	pop    esi
c00104f5:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104fa:	50                   	push   eax
c00104fb:	53                   	push   ebx
c00104fc:	e8 c5 ff ff ff       	call   c00104c6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010501:	5a                   	pop    edx
c0010502:	5e                   	pop    esi
c0010503:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010506:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001050c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010510:	0f b7 d2             	movzx  edx,dx
c0010513:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010517:	39 0d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ecx
c001051d:	75 10                	jne    c001052f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001051f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010522:	85 c0                	test   eax,eax
c0010524:	74 09                	je     c001052f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010526:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001052a:	5a                   	pop    edx
c001052b:	5b                   	pop    ebx
c001052c:	5e                   	pop    esi
c001052d:	ff e0                	jmp    eax
c001052f:	58                   	pop    eax
c0010530:	5b                   	pop    ebx
c0010531:	5e                   	pop    esi
c0010532:	c3                   	ret    
c0010533:	90                   	nop

c0010534 <VgaText::getCursorX()>:
c0010534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010538:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001053b:	c3                   	ret    

c001053c <VgaText::getCursorY()>:
c001053c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010540:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010543:	c3                   	ret    

c0010544 <VgaText::setCursor(int, int)>:
c0010544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001054c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001054f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010553:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010556:	e9 75 fd ff ff       	jmp    c00102d0 <VgaText::updateCursor()>
c001055b:	90                   	nop

c001055c <VgaText::setCursorX(int)>:
c001055c:	83 ec 10             	sub    esp,0x10
c001055f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010563:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056a:	50                   	push   eax
c001056b:	e8 d4 ff ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010570:	83 c4 1c             	add    esp,0x1c
c0010573:	c3                   	ret    

c0010574 <VgaText::setCursorY(int)>:
c0010574:	83 ec 10             	sub    esp,0x10
c0010577:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001057b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001057f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010582:	50                   	push   eax
c0010583:	e8 bc ff ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010588:	83 c4 1c             	add    esp,0x1c
c001058b:	c3                   	ret    

c001058c <VgaText::incrementCursor(bool)>:
c001058c:	56                   	push   esi
c001058d:	53                   	push   ebx
c001058e:	51                   	push   ecx
c001058f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010593:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010597:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001059a:	40                   	inc    eax
c001059b:	83 f8 50             	cmp    eax,0x50
c001059e:	74 05                	je     c00105a5 <VgaText::incrementCursor(bool)+0x19>
c00105a0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00105a3:	eb 24                	jmp    c00105c9 <VgaText::incrementCursor(bool)+0x3d>
c00105a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105af:	8d 50 01             	lea    edx,[eax+0x1]
c00105b2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00105b5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00105b8:	75 0f                	jne    c00105c9 <VgaText::incrementCursor(bool)+0x3d>
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105c0:	53                   	push   ebx
c00105c1:	e8 6c fe ff ff       	call   c0010432 <VgaText::scrollScreen()>
c00105c6:	83 c4 10             	add    esp,0x10
c00105c9:	89 f0                	mov    eax,esi
c00105cb:	84 c0                	test   al,al
c00105cd:	74 0c                	je     c00105db <VgaText::incrementCursor(bool)+0x4f>
c00105cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105d3:	5a                   	pop    edx
c00105d4:	5b                   	pop    ebx
c00105d5:	5e                   	pop    esi
c00105d6:	e9 f5 fc ff ff       	jmp    c00102d0 <VgaText::updateCursor()>
c00105db:	58                   	pop    eax
c00105dc:	5b                   	pop    ebx
c00105dd:	5e                   	pop    esi
c00105de:	c3                   	ret    
c00105df:	90                   	nop

c00105e0 <VgaText::decrementCursor(bool)>:
c00105e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00105e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00105eb:	85 c0                	test   eax,eax
c00105ed:	74 04                	je     c00105f3 <VgaText::decrementCursor(bool)+0x13>
c00105ef:	48                   	dec    eax
c00105f0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00105f3:	84 c9                	test   cl,cl
c00105f5:	74 09                	je     c0010600 <VgaText::decrementCursor(bool)+0x20>
c00105f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00105fb:	e9 d0 fc ff ff       	jmp    c00102d0 <VgaText::updateCursor()>
c0010600:	c3                   	ret    
c0010601:	90                   	nop

c0010602 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010602:	53                   	push   ebx
c0010603:	83 ec 08             	sub    esp,0x8
c0010606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001060a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001060e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010612:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010616:	3c 07                	cmp    al,0x7
c0010618:	75 2a                	jne    c0010644 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001061a:	a1 98 f1 02 c0       	mov    eax,ds:0xc002f198
c001061f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010627:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001062f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010637:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001063b:	83 c4 08             	add    esp,0x8
c001063e:	5b                   	pop    ebx
c001063f:	e9 b4 30 00 00       	jmp    c00136f8 <Buzzer::beep(int, int, bool)>
c0010644:	3c 0d                	cmp    al,0xd
c0010646:	75 09                	jne    c0010651 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010648:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001064f:	eb 2c                	jmp    c001067d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010651:	3c 0a                	cmp    al,0xa
c0010653:	75 31                	jne    c0010686 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010655:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010658:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001065f:	8d 50 01             	lea    edx,[eax+0x1]
c0010662:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010665:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010668:	75 0f                	jne    c0010679 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001066a:	83 ec 0c             	sub    esp,0xc
c001066d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010670:	53                   	push   ebx
c0010671:	e8 bc fd ff ff       	call   c0010432 <VgaText::scrollScreen()>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001067d:	83 c4 08             	add    esp,0x8
c0010680:	5b                   	pop    ebx
c0010681:	e9 4a fc ff ff       	jmp    c00102d0 <VgaText::updateCursor()>
c0010686:	3c 08                	cmp    al,0x8
c0010688:	75 25                	jne    c00106af <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001068a:	50                   	push   eax
c001068b:	50                   	push   eax
c001068c:	6a 01                	push   0x1
c001068e:	53                   	push   ebx
c001068f:	e8 4c ff ff ff       	call   c00105e0 <VgaText::decrementCursor(bool)>
c0010694:	5a                   	pop    edx
c0010695:	59                   	pop    ecx
c0010696:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010699:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001069c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001069f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106a2:	6a 20                	push   0x20
c00106a4:	53                   	push   ebx
c00106a5:	e8 2e fe ff ff       	call   c00104d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106aa:	83 c4 28             	add    esp,0x28
c00106ad:	5b                   	pop    ebx
c00106ae:	c3                   	ret    
c00106af:	83 ec 08             	sub    esp,0x8
c00106b2:	0f be c0             	movsx  eax,al
c00106b5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00106b8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106bb:	51                   	push   ecx
c00106bc:	52                   	push   edx
c00106bd:	50                   	push   eax
c00106be:	53                   	push   ebx
c00106bf:	e8 14 fe ff ff       	call   c00104d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106c4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00106c8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00106d0:	83 c4 28             	add    esp,0x28
c00106d3:	5b                   	pop    ebx
c00106d4:	e9 b3 fe ff ff       	jmp    c001058c <VgaText::incrementCursor(bool)>
c00106d9:	90                   	nop

c00106da <VgaText::isShowingCursor()>:
c00106da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106de:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00106e1:	c3                   	ret    

c00106e2 <VgaText::isBlinkDisabled()>:
c00106e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e6:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00106e9:	83 f0 01             	xor    eax,0x1
c00106ec:	c3                   	ret    
c00106ed:	90                   	nop

c00106ee <VgaText::setCursorHeight(int)>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00106f9:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00106fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010701:	e9 e0 fb ff ff       	jmp    c00102e6 <VgaText::showCursor(bool)>

c0010706 <VgaText::getCursorHeight()>:
c0010706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001070a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001070d:	c3                   	ret    

c001070e <setActiveTerminal(VgaText*)>:
c001070e:	53                   	push   ebx
c001070f:	83 ec 08             	sub    esp,0x8
c0010712:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010716:	85 db                	test   ebx,ebx
c0010718:	75 11                	jne    c001072b <setActiveTerminal(VgaText*)+0x1d>
c001071a:	c7 44 24 10 a0 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aca0
c0010722:	83 c4 08             	add    esp,0x8
c0010725:	5b                   	pop    ebx
c0010726:	e9 f6 9b 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c001072b:	50                   	push   eax
c001072c:	50                   	push   eax
c001072d:	53                   	push   ebx
c001072e:	68 ae ac 02 c0       	push   0xc002acae
c0010733:	e8 b3 21 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0010738:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c001073d:	83 c4 10             	add    esp,0x10
c0010740:	85 c0                	test   eax,eax
c0010742:	74 0c                	je     c0010750 <setActiveTerminal(VgaText*)+0x42>
c0010744:	83 ec 0c             	sub    esp,0xc
c0010747:	50                   	push   eax
c0010748:	e8 83 fb ff ff       	call   c00102d0 <VgaText::updateCursor()>
c001074d:	83 c4 10             	add    esp,0x10
c0010750:	89 1d e4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e4,ebx
c0010756:	51                   	push   ecx
c0010757:	51                   	push   ecx
c0010758:	53                   	push   ebx
c0010759:	68 c6 ac 02 c0       	push   0xc002acc6
c001075e:	e8 88 21 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0010763:	83 c4 0c             	add    esp,0xc
c0010766:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010769:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001076c:	53                   	push   ebx
c001076d:	e8 d2 fd ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010775:	e8 68 ff ff ff       	call   c00106e2 <VgaText::isBlinkDisabled()>
c001077a:	5a                   	pop    edx
c001077b:	0f b6 c0             	movzx  eax,al
c001077e:	59                   	pop    ecx
c001077f:	50                   	push   eax
c0010780:	53                   	push   ebx
c0010781:	e8 6c fb ff ff       	call   c00102f2 <VgaText::disableBlink(bool)>
c0010786:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010789:	e8 78 ff ff ff       	call   c0010706 <VgaText::getCursorHeight()>
c001078e:	5a                   	pop    edx
c001078f:	59                   	pop    ecx
c0010790:	50                   	push   eax
c0010791:	53                   	push   ebx
c0010792:	e8 57 ff ff ff       	call   c00106ee <VgaText::setCursorHeight(int)>
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001079e:	75 07                	jne    c00107a7 <setActiveTerminal(VgaText*)+0x99>
c00107a0:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00107a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ab:	83 c4 08             	add    esp,0x8
c00107ae:	5b                   	pop    ebx
c00107af:	e9 ce fa ff ff       	jmp    c0010282 <VgaText::load()>

c00107b4 <doTerminalCycle()>:
c00107b4:	83 ec 18             	sub    esp,0x18
c00107b7:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c00107bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107bf:	50                   	push   eax
c00107c0:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c00107c5:	e8 44 ff ff ff       	call   c001070e <setActiveTerminal(VgaText*)>
c00107ca:	83 c4 1c             	add    esp,0x1c
c00107cd:	c3                   	ret    

c00107ce <VgaText::doUpdate()>:
c00107ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107d5:	85 c0                	test   eax,eax
c00107d7:	74 02                	je     c00107db <VgaText::doUpdate()+0xd>
c00107d9:	ff e0                	jmp    eax
c00107db:	c3                   	ret    

c00107dc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107dc:	55                   	push   ebp
c00107dd:	31 ed                	xor    ebp,ebp
c00107df:	57                   	push   edi
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	83 ec 1c             	sub    esp,0x1c
c00107e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107e9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107ee:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107f5:	50                   	push   eax
c00107f6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107fb:	50                   	push   eax
c00107fc:	e8 1f fc ff ff       	call   c0010420 <VgaText::combineColours(unsigned char, unsigned char)>
c0010801:	59                   	pop    ecx
c0010802:	0f b6 c0             	movzx  eax,al
c0010805:	5e                   	pop    esi
c0010806:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001080b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001080f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010816:	0f b7 f6             	movzx  esi,si
c0010819:	01 f6                	add    esi,esi
c001081b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001081e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010821:	84 c0                	test   al,al
c0010823:	0f 84 fd 00 00 00    	je     c0010926 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010829:	3c 0d                	cmp    al,0xd
c001082b:	75 0c                	jne    c0010839 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001082d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010834:	e9 e7 00 00 00       	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010839:	3c 0a                	cmp    al,0xa
c001083b:	75 47                	jne    c0010884 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001083d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010847:	8d 48 01             	lea    ecx,[eax+0x1]
c001084a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001084d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010850:	75 0f                	jne    c0010861 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010852:	83 ec 0c             	sub    esp,0xc
c0010855:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010858:	53                   	push   ebx
c0010859:	e8 d4 fb ff ff       	call   c0010432 <VgaText::scrollScreen()>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	83 ec 0c             	sub    esp,0xc
c0010864:	31 ed                	xor    ebp,ebp
c0010866:	53                   	push   ebx
c0010867:	e8 64 fa ff ff       	call   c00102d0 <VgaText::updateCursor()>
c001086c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010871:	83 c4 10             	add    esp,0x10
c0010874:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010877:	0f b7 f6             	movzx  esi,si
c001087a:	01 f6                	add    esi,esi
c001087c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001087f:	e9 9c 00 00 00       	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010884:	3c 08                	cmp    al,0x8
c0010886:	75 35                	jne    c00108bd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010888:	56                   	push   esi
c0010889:	56                   	push   esi
c001088a:	6a 01                	push   0x1
c001088c:	53                   	push   ebx
c001088d:	e8 4e fd ff ff       	call   c00105e0 <VgaText::decrementCursor(bool)>
c0010892:	58                   	pop    eax
c0010893:	5a                   	pop    edx
c0010894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010897:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001089a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001089d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108a0:	6a 20                	push   0x20
c00108a2:	53                   	push   ebx
c00108a3:	e8 30 fc ff ff       	call   c00104d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108a8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108ad:	83 c4 20             	add    esp,0x20
c00108b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108b3:	0f b7 f6             	movzx  esi,si
c00108b6:	01 f6                	add    esi,esi
c00108b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108bb:	eb 63                	jmp    c0010920 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108bd:	51                   	push   ecx
c00108be:	51                   	push   ecx
c00108bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108c3:	50                   	push   eax
c00108c4:	e8 fd fb ff ff       	call   c00104c6 <VgaText::combineCharAndColour(char, unsigned char)>
c00108c9:	83 c4 10             	add    esp,0x10
c00108cc:	66 89 06             	mov    WORD PTR [esi],ax
c00108cf:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c00108d5:	75 21                	jne    c00108f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108d7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108da:	85 c0                	test   eax,eax
c00108dc:	74 1a                	je     c00108f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108de:	52                   	push   edx
c00108df:	52                   	push   edx
c00108e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ee:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108f1:	51                   	push   ecx
c00108f2:	53                   	push   ebx
c00108f3:	ff d0                	call   eax
c00108f5:	83 c4 20             	add    esp,0x20
c00108f8:	83 c6 02             	add    esi,0x2
c00108fb:	50                   	push   eax
c00108fc:	50                   	push   eax
c00108fd:	6a 00                	push   0x0
c00108ff:	53                   	push   ebx
c0010900:	e8 87 fc ff ff       	call   c001058c <VgaText::incrementCursor(bool)>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001090c:	75 0d                	jne    c001091b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001090e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010913:	0f b7 f6             	movzx  esi,si
c0010916:	01 f6                	add    esi,esi
c0010918:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001091b:	bd 01 00 00 00       	mov    ebp,0x1
c0010920:	47                   	inc    edi
c0010921:	e9 f8 fe ff ff       	jmp    c001081e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	53                   	push   ebx
c001092a:	e8 a1 f9 ff ff       	call   c00102d0 <VgaText::updateCursor()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	89 e8                	mov    eax,ebp
c0010934:	84 c0                	test   al,al
c0010936:	74 0c                	je     c0010944 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	53                   	push   ebx
c001093c:	e8 8d fe ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001094b:	83 c4 1c             	add    esp,0x1c
c001094e:	5b                   	pop    ebx
c001094f:	5e                   	pop    esi
c0010950:	5f                   	pop    edi
c0010951:	5d                   	pop    ebp
c0010952:	c3                   	ret    
c0010953:	90                   	nop

c0010954 <VgaText::clearScreen()>:
c0010954:	57                   	push   edi
c0010955:	56                   	push   esi
c0010956:	31 f6                	xor    esi,esi
c0010958:	53                   	push   ebx
c0010959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001095d:	52                   	push   edx
c001095e:	6a 00                	push   0x0
c0010960:	6a 00                	push   0x0
c0010962:	53                   	push   ebx
c0010963:	e8 dc fb ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010968:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010975:	7e 20                	jle    c0010997 <VgaText::clearScreen()+0x43>
c0010977:	31 ff                	xor    edi,edi
c0010979:	50                   	push   eax
c001097a:	50                   	push   eax
c001097b:	56                   	push   esi
c001097c:	57                   	push   edi
c001097d:	47                   	inc    edi
c001097e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010981:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010984:	6a 20                	push   0x20
c0010986:	53                   	push   ebx
c0010987:	e8 4c fb ff ff       	call   c00104d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001098c:	83 c4 20             	add    esp,0x20
c001098f:	83 ff 50             	cmp    edi,0x50
c0010992:	75 e5                	jne    c0010979 <VgaText::clearScreen()+0x25>
c0010994:	46                   	inc    esi
c0010995:	eb db                	jmp    c0010972 <VgaText::clearScreen()+0x1e>
c0010997:	83 ec 0c             	sub    esp,0xc
c001099a:	53                   	push   ebx
c001099b:	e8 2e fe ff ff       	call   c00107ce <VgaText::doUpdate()>
c00109a0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109a7:	83 c4 10             	add    esp,0x10
c00109aa:	5b                   	pop    ebx
c00109ab:	5e                   	pop    esi
c00109ac:	5f                   	pop    edi
c00109ad:	c3                   	ret    

c00109ae <VgaText::putchar(char)>:
c00109ae:	56                   	push   esi
c00109af:	53                   	push   ebx
c00109b0:	83 ec 14             	sub    esp,0x14
c00109b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109bb:	3c 5b                	cmp    al,0x5b
c00109bd:	75 18                	jne    c00109d7 <VgaText::putchar(char)+0x29>
c00109bf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109c3:	74 1f                	je     c00109e4 <VgaText::putchar(char)+0x36>
c00109c5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109cb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109d2:	e9 bd 00 00 00       	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c00109d7:	3c 1b                	cmp    al,0x1b
c00109d9:	75 09                	jne    c00109e4 <VgaText::putchar(char)+0x36>
c00109db:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109df:	e9 b0 00 00 00       	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c00109e4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109e7:	84 c9                	test   cl,cl
c00109e9:	0f 84 92 00 00 00    	je     c0010a81 <VgaText::putchar(char)+0xd3>
c00109ef:	8d 50 c0             	lea    edx,[eax-0x40]
c00109f2:	80 fa 3e             	cmp    dl,0x3e
c00109f5:	77 76                	ja     c0010a6d <VgaText::putchar(char)+0xbf>
c00109f7:	3c 6d                	cmp    al,0x6d
c00109f9:	75 47                	jne    c0010a42 <VgaText::putchar(char)+0x94>
c00109fb:	31 f6                	xor    esi,esi
c00109fd:	31 d2                	xor    edx,edx
c00109ff:	31 c0                	xor    eax,eax
c0010a01:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a04:	7e 2d                	jle    c0010a33 <VgaText::putchar(char)+0x85>
c0010a06:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a0b:	80 fa 3b             	cmp    dl,0x3b
c0010a0e:	75 17                	jne    c0010a27 <VgaText::putchar(char)+0x79>
c0010a10:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a14:	50                   	push   eax
c0010a15:	53                   	push   ebx
c0010a16:	e8 0b f9 ff ff       	call   c0010326 <VgaText::doANSI_SGR(int)>
c0010a1b:	59                   	pop    ecx
c0010a1c:	31 d2                	xor    edx,edx
c0010a1e:	58                   	pop    eax
c0010a1f:	31 c0                	xor    eax,eax
c0010a21:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a25:	eb 09                	jmp    c0010a30 <VgaText::putchar(char)+0x82>
c0010a27:	6b c0 0a             	imul   eax,eax,0xa
c0010a2a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a2e:	88 ca                	mov    dl,cl
c0010a30:	46                   	inc    esi
c0010a31:	eb ce                	jmp    c0010a01 <VgaText::putchar(char)+0x53>
c0010a33:	84 d2                	test   dl,dl
c0010a35:	74 2e                	je     c0010a65 <VgaText::putchar(char)+0xb7>
c0010a37:	50                   	push   eax
c0010a38:	53                   	push   ebx
c0010a39:	e8 e8 f8 ff ff       	call   c0010326 <VgaText::doANSI_SGR(int)>
c0010a3e:	58                   	pop    eax
c0010a3f:	5a                   	pop    edx
c0010a40:	eb 23                	jmp    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a42:	3c 4a                	cmp    al,0x4a
c0010a44:	75 1f                	jne    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a46:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a4a:	75 19                	jne    c0010a65 <VgaText::putchar(char)+0xb7>
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	53                   	push   ebx
c0010a50:	e8 ff fe ff ff       	call   c0010954 <VgaText::clearScreen()>
c0010a55:	83 c4 0c             	add    esp,0xc
c0010a58:	6a 00                	push   0x0
c0010a5a:	6a 00                	push   0x0
c0010a5c:	53                   	push   ebx
c0010a5d:	e8 e2 fa ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a6b:	eb 27                	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c0010a6d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a70:	83 fa 0e             	cmp    edx,0xe
c0010a73:	7f 1f                	jg     c0010a94 <VgaText::putchar(char)+0xe6>
c0010a75:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a78:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a7b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a7f:	eb 13                	jmp    c0010a94 <VgaText::putchar(char)+0xe6>
c0010a81:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a84:	0f be c0             	movsx  eax,al
c0010a87:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a8a:	50                   	push   eax
c0010a8b:	53                   	push   ebx
c0010a8c:	e8 71 fb ff ff       	call   c0010602 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	83 c4 14             	add    esp,0x14
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	c3                   	ret    

c0010a9a <VgaText::putx(unsigned int)>:
c0010a9a:	57                   	push   edi
c0010a9b:	b9 11 00 00 00       	mov    ecx,0x11
c0010aa0:	56                   	push   esi
c0010aa1:	be e2 ac 02 c0       	mov    esi,0xc002ace2
c0010aa6:	53                   	push   ebx
c0010aa7:	83 ec 20             	sub    esp,0x20
c0010aaa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ab2:	fc                   	cld    
c0010ab3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ab5:	be 08 00 00 00       	mov    esi,0x8
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	89 d8                	mov    eax,ebx
c0010abe:	c1 e3 04             	shl    ebx,0x4
c0010ac1:	c1 e8 1c             	shr    eax,0x1c
c0010ac4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ac9:	50                   	push   eax
c0010aca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ace:	e8 db fe ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	4e                   	dec    esi
c0010ad7:	75 e1                	jne    c0010aba <VgaText::putx(unsigned int)+0x20>
c0010ad9:	83 c4 20             	add    esp,0x20
c0010adc:	5b                   	pop    ebx
c0010add:	5e                   	pop    esi
c0010ade:	5f                   	pop    edi
c0010adf:	c3                   	ret    

c0010ae0 <VgaText::puts(char const*)>:
c0010ae0:	53                   	push   ebx
c0010ae1:	83 ec 08             	sub    esp,0x8
c0010ae4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ae8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010aeb:	84 c0                	test   al,al
c0010aed:	74 12                	je     c0010b01 <VgaText::puts(char const*)+0x21>
c0010aef:	43                   	inc    ebx
c0010af0:	51                   	push   ecx
c0010af1:	51                   	push   ecx
c0010af2:	50                   	push   eax
c0010af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af7:	e8 b2 fe ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	eb e7                	jmp    c0010ae8 <VgaText::puts(char const*)+0x8>
c0010b01:	83 c4 08             	add    esp,0x8
c0010b04:	5b                   	pop    ebx
c0010b05:	c3                   	ret    

c0010b06 <VgaText::VgaText(char const*)>:
c0010b06:	57                   	push   edi
c0010b07:	56                   	push   esi
c0010b08:	53                   	push   ebx
c0010b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0d:	83 ec 08             	sub    esp,0x8
c0010b10:	6a 00                	push   0x0
c0010b12:	50                   	push   eax
c0010b13:	e8 8a 05 00 00       	call   c00110a2 <UnixFile::UnixFile(int)>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0010b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b24:	89 10                	mov    DWORD PTR [eax],edx
c0010b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b35:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b40:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b48:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b66:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b71:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7c:	8d 50 60             	lea    edx,[eax+0x60]
c0010b7f:	bb c0 f0 02 c0       	mov    ebx,0xc002f0c0
c0010b84:	b8 08 00 00 00       	mov    eax,0x8
c0010b89:	fc                   	cld    
c0010b8a:	89 d7                	mov    edi,edx
c0010b8c:	89 de                	mov    esi,ebx
c0010b8e:	89 c1                	mov    ecx,eax
c0010b90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b96:	05 82 00 00 00       	add    eax,0x82
c0010b9b:	83 ec 08             	sub    esp,0x8
c0010b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba2:	50                   	push   eax
c0010ba3:	e8 64 fc fe ff       	call   c000080c <strcpy>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010baf:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	6a 01                	push   0x1
c0010bbb:	e8 25 09 00 00       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0010bc0:	83 c4 10             	add    esp,0x10
c0010bc3:	89 c2                	mov    edx,eax
c0010bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bcc:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c0010bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bd9:	89 c6                	mov    esi,eax
c0010bdb:	e8 cd ef ff ff       	call   c000fbad <Phys::allocatePage()>
c0010be0:	6a 05                	push   0x5
c0010be2:	56                   	push   esi
c0010be3:	50                   	push   eax
c0010be4:	53                   	push   ebx
c0010be5:	e8 32 11 00 00       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bf4:	83 ec 04             	sub    esp,0x4
c0010bf7:	68 00 0f 00 00       	push   0xf00
c0010bfc:	6a 00                	push   0x0
c0010bfe:	50                   	push   eax
c0010bff:	e8 4c fb fe ff       	call   c0000750 <memset>
c0010c04:	83 c4 10             	add    esp,0x10
c0010c07:	83 ec 04             	sub    esp,0x4
c0010c0a:	6a 00                	push   0x0
c0010c0c:	6a 07                	push   0x7
c0010c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c12:	e8 a3 f7 ff ff       	call   c00103ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	83 ec 08             	sub    esp,0x8
c0010c1d:	6a 02                	push   0x2
c0010c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c23:	e8 c6 fa ff ff       	call   c00106ee <VgaText::setCursorHeight(int)>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	83 ec 04             	sub    esp,0x4
c0010c2e:	6a 00                	push   0x0
c0010c30:	6a 00                	push   0x0
c0010c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c36:	e8 09 f9 ff ff       	call   c0010544 <VgaText::setCursor(int, int)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	83 ec 08             	sub    esp,0x8
c0010c41:	6a 01                	push   0x1
c0010c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c47:	e8 9a f6 ff ff       	call   c00102e6 <VgaText::showCursor(bool)>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	83 ec 08             	sub    esp,0x8
c0010c52:	6a 01                	push   0x1
c0010c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c58:	e8 95 f6 ff ff       	call   c00102f2 <VgaText::disableBlink(bool)>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	83 ec 0c             	sub    esp,0xc
c0010c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c67:	e8 e8 fc ff ff       	call   c0010954 <VgaText::clearScreen()>
c0010c6c:	83 c4 10             	add    esp,0x10
c0010c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c73:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7b:	05 02 01 00 00       	add    eax,0x102
c0010c80:	83 ec 04             	sub    esp,0x4
c0010c83:	68 96 00 00 00       	push   0x96
c0010c88:	6a 00                	push   0x0
c0010c8a:	50                   	push   eax
c0010c8b:	e8 c0 fa fe ff       	call   c0000750 <memset>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c97:	05 98 01 00 00       	add    eax,0x198
c0010c9c:	83 ec 04             	sub    esp,0x4
c0010c9f:	68 2c 01 00 00       	push   0x12c
c0010ca4:	6a 00                	push   0x0
c0010ca6:	50                   	push   eax
c0010ca7:	e8 a4 fa fe ff       	call   c0000750 <memset>
c0010cac:	83 c4 10             	add    esp,0x10
c0010caf:	90                   	nop
c0010cb0:	5b                   	pop    ebx
c0010cb1:	5e                   	pop    esi
c0010cb2:	5f                   	pop    edi
c0010cb3:	c3                   	ret    

c0010cb4 <VgaText::receiveKey(unsigned char)>:
c0010cb4:	55                   	push   ebp
c0010cb5:	57                   	push   edi
c0010cb6:	56                   	push   esi
c0010cb7:	53                   	push   ebx
c0010cb8:	83 ec 1c             	sub    esp,0x1c
c0010cbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cc3:	84 db                	test   bl,bl
c0010cc5:	0f 84 c9 00 00 00    	je     c0010d94 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ccb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010cd1:	80 fb 08             	cmp    bl,0x8
c0010cd4:	75 2c                	jne    c0010d02 <VgaText::receiveKey(unsigned char)+0x4e>
c0010cd6:	83 ec 0c             	sub    esp,0xc
c0010cd9:	57                   	push   edi
c0010cda:	e8 8d fa fe ff       	call   c000076c <strlen>
c0010cdf:	83 c4 10             	add    esp,0x10
c0010ce2:	85 c0                	test   eax,eax
c0010ce4:	74 41                	je     c0010d27 <VgaText::receiveKey(unsigned char)+0x73>
c0010ce6:	50                   	push   eax
c0010ce7:	50                   	push   eax
c0010ce8:	6a 08                	push   0x8
c0010cea:	56                   	push   esi
c0010ceb:	e8 be fc ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010cf0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cf3:	e8 74 fa fe ff       	call   c000076c <strlen>
c0010cf8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010d00:	eb 22                	jmp    c0010d24 <VgaText::receiveKey(unsigned char)+0x70>
c0010d02:	0f be c3             	movsx  eax,bl
c0010d05:	52                   	push   edx
c0010d06:	52                   	push   edx
c0010d07:	50                   	push   eax
c0010d08:	56                   	push   esi
c0010d09:	e8 a0 fc ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010d0e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d17:	59                   	pop    ecx
c0010d18:	5d                   	pop    ebp
c0010d19:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d1d:	50                   	push   eax
c0010d1e:	57                   	push   edi
c0010d1f:	e8 28 fc fe ff       	call   c000094c <strcat>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d2e:	75 05                	jne    c0010d35 <VgaText::receiveKey(unsigned char)+0x81>
c0010d30:	80 fb 0a             	cmp    bl,0xa
c0010d33:	75 53                	jne    c0010d88 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d35:	83 ec 0c             	sub    esp,0xc
c0010d38:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d3e:	53                   	push   ebx
c0010d3f:	e8 28 fa fe ff       	call   c000076c <strlen>
c0010d44:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d47:	89 c5                	mov    ebp,eax
c0010d49:	e8 1e fa fe ff       	call   c000076c <strlen>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d55:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d5a:	76 10                	jbe    c0010d6c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	68 f3 ac 02 c0       	push   0xc002acf3
c0010d64:	e8 b8 95 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	50                   	push   eax
c0010d6d:	50                   	push   eax
c0010d6e:	57                   	push   edi
c0010d6f:	53                   	push   ebx
c0010d70:	e8 d7 fb fe ff       	call   c000094c <strcat>
c0010d75:	83 c4 0c             	add    esp,0xc
c0010d78:	68 96 00 00 00       	push   0x96
c0010d7d:	6a 00                	push   0x0
c0010d7f:	57                   	push   edi
c0010d80:	e8 cb f9 fe ff       	call   c0000750 <memset>
c0010d85:	83 c4 10             	add    esp,0x10
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	56                   	push   esi
c0010d8c:	e8 3d fa ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	83 c4 1c             	add    esp,0x1c
c0010d97:	5b                   	pop    ebx
c0010d98:	5e                   	pop    esi
c0010d99:	5f                   	pop    edi
c0010d9a:	5d                   	pop    ebp
c0010d9b:	c3                   	ret    

c0010d9c <VgaText::write(unsigned long long, void*, int*)>:
c0010d9c:	55                   	push   ebp
c0010d9d:	57                   	push   edi
c0010d9e:	56                   	push   esi
c0010d9f:	53                   	push   ebx
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010da7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010dab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010daf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010db6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010db9:	39 eb                	cmp    ebx,ebp
c0010dbb:	74 13                	je     c0010dd0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010dbd:	43                   	inc    ebx
c0010dbe:	50                   	push   eax
c0010dbf:	50                   	push   eax
c0010dc0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010dc4:	50                   	push   eax
c0010dc5:	56                   	push   esi
c0010dc6:	e8 e3 fb ff ff       	call   c00109ae <VgaText::putchar(char)>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	eb e9                	jmp    c0010db9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010dd0:	83 ec 0c             	sub    esp,0xc
c0010dd3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dda:	56                   	push   esi
c0010ddb:	e8 ee f9 ff ff       	call   c00107ce <VgaText::doUpdate()>
c0010de0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010de4:	89 38                	mov    DWORD PTR [eax],edi
c0010de6:	83 c4 1c             	add    esp,0x1c
c0010de9:	31 c0                	xor    eax,eax
c0010deb:	5b                   	pop    ebx
c0010dec:	5e                   	pop    esi
c0010ded:	5f                   	pop    edi
c0010dee:	5d                   	pop    ebp
c0010def:	c3                   	ret    

c0010df0 <newTerminal(char*)>:
c0010df0:	83 ec 28             	sub    esp,0x28
c0010df3:	68 c4 02 00 00       	push   0x2c4
c0010df8:	e8 8f ea ff ff       	call   c000f88c <malloc>
c0010dfd:	5a                   	pop    edx
c0010dfe:	59                   	pop    ecx
c0010dff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e03:	50                   	push   eax
c0010e04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e08:	e8 f9 fc ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c0010e0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e11:	83 c4 2c             	add    esp,0x2c
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <TSS::TSS()>:
c0010e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e21:	90                   	nop
c0010e22:	c3                   	ret    
c0010e23:	90                   	nop

c0010e24 <TSS::setESP(unsigned long)>:
c0010e24:	55                   	push   ebp
c0010e25:	89 e5                	mov    ebp,esp
c0010e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e2d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e33:	90                   	nop
c0010e34:	5d                   	pop    ebp
c0010e35:	c3                   	ret    

c0010e36 <TSS::flush()>:
c0010e36:	55                   	push   ebp
c0010e37:	89 e5                	mov    ebp,esp
c0010e39:	83 ec 10             	sub    esp,0x10
c0010e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e41:	83 c8 03             	or     eax,0x3
c0010e44:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e48:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e4c:	66 89 d0             	mov    ax,dx
c0010e4f:	0f 00 d8             	ltr    ax
c0010e52:	90                   	nop
c0010e53:	c9                   	leave  
c0010e54:	c3                   	ret    
c0010e55:	90                   	nop

c0010e56 <TSS::setup(unsigned long, unsigned long)>:
c0010e56:	55                   	push   ebp
c0010e57:	89 e5                	mov    ebp,esp
c0010e59:	83 ec 18             	sub    esp,0x18
c0010e5c:	83 ec 0c             	sub    esp,0xc
c0010e5f:	6a 68                	push   0x68
c0010e61:	e8 26 ea ff ff       	call   c000f88c <malloc>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	89 c2                	mov    edx,eax
c0010e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e77:	83 ec 04             	sub    esp,0x4
c0010e7a:	6a 68                	push   0x68
c0010e7c:	6a 00                	push   0x0
c0010e7e:	50                   	push   eax
c0010e7f:	e8 cc f8 fe ff       	call   c0000750 <memset>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e99:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ea8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eed:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010efc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f11:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1e:	0f 20 da             	mov    edx,cr3
c0010f21:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f27:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f30:	83 ec 08             	sub    esp,0x8
c0010f33:	50                   	push   eax
c0010f34:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f37:	50                   	push   eax
c0010f38:	e8 2b e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	83 ec 08             	sub    esp,0x8
c0010f43:	6a 68                	push   0x68
c0010f45:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f48:	50                   	push   eax
c0010f49:	e8 36 e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f55:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f58:	83 e0 0f             	and    eax,0xf
c0010f5b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f5e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f61:	83 c8 40             	or     eax,0x40
c0010f64:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f67:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0010f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f72:	05 78 01 00 00       	add    eax,0x178
c0010f77:	83 ec 04             	sub    esp,0x4
c0010f7a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f7d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f80:	50                   	push   eax
c0010f81:	e8 32 e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	89 c2                	mov    edx,eax
c0010f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8e:	89 10                	mov    DWORD PTR [eax],edx
c0010f90:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0010f95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f9b:	05 78 01 00 00       	add    eax,0x178
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	50                   	push   eax
c0010fa4:	e8 53 e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fb1:	83 ec 08             	sub    esp,0x8
c0010fb4:	50                   	push   eax
c0010fb5:	68 5c ad 02 c0       	push   0xc002ad5c
c0010fba:	e8 2c 19 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fc7:	c9                   	leave  
c0010fc8:	c3                   	ret    
c0010fc9:	90                   	nop

c0010fca <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fda:	75 08                	jne    c0010fe4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fdc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fe2:	eb 38                	jmp    c001101c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fe4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fe9:	75 17                	jne    c0011002 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ff3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010ff9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ffb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011002:	89 c1                	mov    ecx,eax
c0011004:	83 e1 fd             	and    ecx,0xfffffffd
c0011007:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001100d:	74 cd                	je     c0010fdc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001100f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011014:	83 e0 ef             	and    eax,0xffffffef
c0011017:	83 f8 08             	cmp    eax,0x8
c001101a:	76 c0                	jbe    c0010fdc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001101c:	31 c0                	xor    eax,eax
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <ReservedFilename::isAtty()>:
c0011020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011024:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011027:	31 c0                	xor    eax,eax
c0011029:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001102f:	74 09                	je     c001103a <ReservedFilename::isAtty()+0x1a>
c0011031:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011037:	0f 94 c0             	sete   al
c001103a:	c3                   	ret    
c001103b:	90                   	nop

c001103c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001103c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011040:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011047:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001104b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011050:	75 08                	jne    c001105a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011052:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011058:	eb 3d                	jmp    c0011097 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001105a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001105f:	75 17                	jne    c0011078 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011066:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011069:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001106f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011071:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011075:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011078:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001107d:	75 04                	jne    c0011083 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001107f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011081:	eb 14                	jmp    c0011097 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011083:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011088:	74 c8                	je     c0011052 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001108a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001108f:	83 e0 ef             	and    eax,0xffffffef
c0011092:	83 f8 08             	cmp    eax,0x8
c0011095:	76 bb                	jbe    c0011052 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011097:	31 c0                	xor    eax,eax
c0011099:	c3                   	ret    

c001109a <UnixFile::getFileDescriptor()>:
c001109a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001109e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a1:	c3                   	ret    

c00110a2 <UnixFile::UnixFile(int)>:
c00110a2:	53                   	push   ebx
c00110a3:	83 ec 28             	sub    esp,0x28
c00110a6:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c00110ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110af:	89 10                	mov    DWORD PTR [eax],edx
c00110b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00110b9:	0f 8f 8c 01 00 00    	jg     c001124b <UnixFile::UnixFile(int)+0x1a9>
c00110bf:	a1 c0 df 02 c0       	mov    eax,ds:0xc002dfc0
c00110c4:	8d 50 01             	lea    edx,[eax+0x1]
c00110c7:	89 15 c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edx
c00110cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110d4:	83 ec 08             	sub    esp,0x8
c00110d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110db:	68 78 f1 02 c0       	push   0xc002f178
c00110e0:	e8 b7 7e 01 00       	call   c0028f9c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110e5:	83 c4 10             	add    esp,0x10
c00110e8:	a0 74 f1 02 c0       	mov    al,ds:0xc002f174
c00110ed:	83 f0 01             	xor    eax,0x1
c00110f0:	84 c0                	test   al,al
c00110f2:	0f 84 54 01 00 00    	je     c001124c <UnixFile::UnixFile(int)+0x1aa>
c00110f8:	c6 05 74 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f174,0x1
c00110ff:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011107:	83 ec 0c             	sub    esp,0xc
c001110a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001110e:	e8 79 e7 ff ff       	call   c000f88c <malloc>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	89 c3                	mov    ebx,eax
c0011118:	83 ec 08             	sub    esp,0x8
c001111b:	68 03 ff ff 0f       	push   0xfffff03
c0011120:	53                   	push   ebx
c0011121:	e8 2c 01 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	89 1d 6c f1 02 c0    	mov    DWORD PTR ds:0xc002f16c,ebx
c001112f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113e:	e8 49 e7 ff ff       	call   c000f88c <malloc>
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	89 c3                	mov    ebx,eax
c0011148:	83 ec 08             	sub    esp,0x8
c001114b:	68 01 ff ff 0f       	push   0xfffff01
c0011150:	53                   	push   ebx
c0011151:	e8 fc 00 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c0011156:	83 c4 10             	add    esp,0x10
c0011159:	89 1d 70 f1 02 c0    	mov    DWORD PTR ds:0xc002f170,ebx
c001115f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011167:	83 ec 0c             	sub    esp,0xc
c001116a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001116e:	e8 19 e7 ff ff       	call   c000f88c <malloc>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	89 c3                	mov    ebx,eax
c0011178:	83 ec 08             	sub    esp,0x8
c001117b:	68 00 ff ff 0f       	push   0xfffff00
c0011180:	53                   	push   ebx
c0011181:	e8 cc 00 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	89 1d 64 f1 02 c0    	mov    DWORD PTR ds:0xc002f164,ebx
c001118f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011197:	83 ec 0c             	sub    esp,0xc
c001119a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001119e:	e8 e9 e6 ff ff       	call   c000f88c <malloc>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	89 c3                	mov    ebx,eax
c00111a8:	83 ec 08             	sub    esp,0x8
c00111ab:	68 02 ff ff 0f       	push   0xfffff02
c00111b0:	53                   	push   ebx
c00111b1:	e8 9c 00 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	89 1d 68 f1 02 c0    	mov    DWORD PTR ds:0xc002f168,ebx
c00111bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111c7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111cc:	7f 7e                	jg     c001124c <UnixFile::UnixFile(int)+0x1aa>
c00111ce:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111d6:	83 ec 0c             	sub    esp,0xc
c00111d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111dd:	e8 aa e6 ff ff       	call   c000f88c <malloc>
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	89 c3                	mov    ebx,eax
c00111e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111eb:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111f0:	83 ec 08             	sub    esp,0x8
c00111f3:	50                   	push   eax
c00111f4:	53                   	push   ebx
c00111f5:	e8 58 00 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011201:	89 1c 85 40 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ec0],ebx
c0011208:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011217:	e8 70 e6 ff ff       	call   c000f88c <malloc>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	89 c3                	mov    ebx,eax
c0011221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011225:	05 20 ff ff 0f       	add    eax,0xfffff20
c001122a:	83 ec 08             	sub    esp,0x8
c001122d:	50                   	push   eax
c001122e:	53                   	push   ebx
c001122f:	e8 1e 00 00 00       	call   c0011252 <ReservedFilename::ReservedFilename(int)>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001123b:	89 1c 85 00 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f00],ebx
c0011242:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011246:	e9 7c ff ff ff       	jmp    c00111c7 <UnixFile::UnixFile(int)+0x125>
c001124b:	90                   	nop
c001124c:	83 c4 28             	add    esp,0x28
c001124f:	5b                   	pop    ebx
c0011250:	c3                   	ret    
c0011251:	90                   	nop

c0011252 <ReservedFilename::ReservedFilename(int)>:
c0011252:	83 ec 0c             	sub    esp,0xc
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	83 ec 08             	sub    esp,0x8
c001125c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011260:	50                   	push   eax
c0011261:	e8 3c fe ff ff       	call   c00110a2 <UnixFile::UnixFile(int)>
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	89 10                	mov    DWORD PTR [eax],edx
c0011274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001127c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001127f:	90                   	nop
c0011280:	83 c4 0c             	add    esp,0xc
c0011283:	c3                   	ret    

c0011284 <UnixFile::~UnixFile()>:
c0011284:	83 ec 1c             	sub    esp,0x1c
c0011287:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c001128c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011290:	89 10                	mov    DWORD PTR [eax],edx
c0011292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011299:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001129e:	7f 73                	jg     c0011313 <UnixFile::~UnixFile()+0x8f>
c00112a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112a8:	83 ec 0c             	sub    esp,0xc
c00112ab:	68 78 f1 02 c0       	push   0xc002f178
c00112b0:	e8 bb 7d 01 00       	call   c0029070 <LinkedList<UnixFile>::getFirstElement()>
c00112b5:	83 c4 10             	add    esp,0x10
c00112b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112bc:	83 ec 0c             	sub    esp,0xc
c00112bf:	68 78 f1 02 c0       	push   0xc002f178
c00112c4:	e8 af 7d 01 00       	call   c0029078 <LinkedList<UnixFile>::removeFirst()>
c00112c9:	83 c4 10             	add    esp,0x10
c00112cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112d4:	74 40                	je     c0011316 <UnixFile::~UnixFile()+0x92>
c00112d6:	83 ec 08             	sub    esp,0x8
c00112d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112dd:	68 78 f1 02 c0       	push   0xc002f178
c00112e2:	e8 b5 7c 01 00       	call   c0028f9c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112ee:	8d 50 01             	lea    edx,[eax+0x1]
c00112f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112f5:	3d 88 13 00 00       	cmp    eax,0x1388
c00112fa:	0f 94 c0             	sete   al
c00112fd:	84 c0                	test   al,al
c00112ff:	74 a7                	je     c00112a8 <UnixFile::~UnixFile()+0x24>
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	68 20 ae 02 c0       	push   0xc002ae20
c0011309:	e8 13 90 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	eb 95                	jmp    c00112a8 <UnixFile::~UnixFile()+0x24>
c0011313:	90                   	nop
c0011314:	eb 01                	jmp    c0011317 <UnixFile::~UnixFile()+0x93>
c0011316:	90                   	nop
c0011317:	90                   	nop
c0011318:	83 c4 1c             	add    esp,0x1c
c001131b:	c3                   	ret    

c001131c <UnixFile::~UnixFile()>:
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	83 ec 0c             	sub    esp,0xc
c0011322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011326:	e8 59 ff ff ff       	call   c0011284 <UnixFile::~UnixFile()>
c001132b:	83 c4 10             	add    esp,0x10
c001132e:	83 ec 08             	sub    esp,0x8
c0011331:	6a 0c                	push   0xc
c0011333:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011337:	e8 cf 14 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	83 c4 0c             	add    esp,0xc
c0011342:	c3                   	ret    
c0011343:	90                   	nop

c0011344 <ReservedFilename::~ReservedFilename()>:
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c001134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011350:	89 10                	mov    DWORD PTR [eax],edx
c0011352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011356:	83 ec 0c             	sub    esp,0xc
c0011359:	50                   	push   eax
c001135a:	e8 25 ff ff ff       	call   c0011284 <UnixFile::~UnixFile()>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	90                   	nop
c0011363:	83 c4 0c             	add    esp,0xc
c0011366:	c3                   	ret    
c0011367:	90                   	nop

c0011368 <ReservedFilename::~ReservedFilename()>:
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	83 ec 0c             	sub    esp,0xc
c001136e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011372:	e8 cd ff ff ff       	call   c0011344 <ReservedFilename::~ReservedFilename()>
c0011377:	83 c4 10             	add    esp,0x10
c001137a:	83 ec 08             	sub    esp,0x8
c001137d:	6a 0c                	push   0xc
c001137f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011383:	e8 83 14 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	83 c4 0c             	add    esp,0xc
c001138e:	c3                   	ret    

c001138f <getFromFileDescriptor(int)>:
c001138f:	53                   	push   ebx
c0011390:	83 ec 08             	sub    esp,0x8
c0011393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011397:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001139d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00113a3:	7f 2c                	jg     c00113d1 <getFromFileDescriptor(int)+0x42>
c00113a5:	83 ec 0c             	sub    esp,0xc
c00113a8:	68 78 f1 02 c0       	push   0xc002f178
c00113ad:	e8 be 7c 01 00       	call   c0029070 <LinkedList<UnixFile>::getFirstElement()>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	85 c0                	test   eax,eax
c00113b7:	75 04                	jne    c00113bd <getFromFileDescriptor(int)+0x2e>
c00113b9:	31 c0                	xor    eax,eax
c00113bb:	eb 6e                	jmp    c001142b <getFromFileDescriptor(int)+0x9c>
c00113bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113c0:	74 69                	je     c001142b <getFromFileDescriptor(int)+0x9c>
c00113c2:	52                   	push   edx
c00113c3:	52                   	push   edx
c00113c4:	50                   	push   eax
c00113c5:	68 78 f1 02 c0       	push   0xc002f178
c00113ca:	e8 4b 7d 01 00       	call   c002911a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113cf:	eb e1                	jmp    c00113b2 <getFromFileDescriptor(int)+0x23>
c00113d1:	a1 6c f1 02 c0       	mov    eax,ds:0xc002f16c
c00113d6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113dc:	74 4d                	je     c001142b <getFromFileDescriptor(int)+0x9c>
c00113de:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c00113e3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113e9:	74 40                	je     c001142b <getFromFileDescriptor(int)+0x9c>
c00113eb:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00113f0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113f6:	74 33                	je     c001142b <getFromFileDescriptor(int)+0x9c>
c00113f8:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c00113fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011403:	74 26                	je     c001142b <getFromFileDescriptor(int)+0x9c>
c0011405:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001140b:	83 f8 08             	cmp    eax,0x8
c001140e:	77 09                	ja     c0011419 <getFromFileDescriptor(int)+0x8a>
c0011410:	8b 04 85 40 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ec0]
c0011417:	eb 12                	jmp    c001142b <getFromFileDescriptor(int)+0x9c>
c0011419:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001141f:	83 fb 08             	cmp    ebx,0x8
c0011422:	77 95                	ja     c00113b9 <getFromFileDescriptor(int)+0x2a>
c0011424:	8b 04 9d 00 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0f00]
c001142b:	83 c4 08             	add    esp,0x8
c001142e:	5b                   	pop    ebx
c001142f:	c3                   	ret    

c0011430 <__static_initialization_and_destruction_0(int, int)>:
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011438:	75 34                	jne    c001146e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001143a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011442:	75 2a                	jne    c001146e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011444:	83 ec 0c             	sub    esp,0xc
c0011447:	68 78 f1 02 c0       	push   0xc002f178
c001144c:	e8 f3 7a 01 00       	call   c0028f44 <LinkedList<UnixFile>::LinkedList()>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	83 ec 04             	sub    esp,0x4
c0011457:	68 dc dd 02 c0       	push   0xc002dddc
c001145c:	68 78 f1 02 c0       	push   0xc002f178
c0011461:	68 42 8f 02 c0       	push   0xc0028f42
c0011466:	e8 1a 13 00 00       	call   c0012785 <__cxa_atexit>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	90                   	nop
c001146f:	83 c4 0c             	add    esp,0xc
c0011472:	c3                   	ret    

c0011473 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	83 ec 08             	sub    esp,0x8
c0011479:	68 ff ff 00 00       	push   0xffff
c001147e:	6a 01                	push   0x1
c0011480:	e8 ab ff ff ff       	call   c0011430 <__static_initialization_and_destruction_0(int, int)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	83 c4 0c             	add    esp,0xc
c001148b:	c3                   	ret    

c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001148c:	53                   	push   ebx
c001148d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011491:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011495:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001149b:	89 c8                	mov    eax,ecx
c001149d:	d1 e8                	shr    eax,1
c001149f:	03 05 c8 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfc8
c00114a5:	83 e1 01             	and    ecx,0x1
c00114a8:	8a 10                	mov    dl,BYTE PTR [eax]
c00114aa:	75 09                	jne    c00114b5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00114ac:	83 e2 f0             	and    edx,0xfffffff0
c00114af:	09 da                	or     edx,ebx
c00114b1:	88 10                	mov    BYTE PTR [eax],dl
c00114b3:	5b                   	pop    ebx
c00114b4:	c3                   	ret    
c00114b5:	c1 e3 04             	shl    ebx,0x4
c00114b8:	83 e2 0f             	and    edx,0xf
c00114bb:	09 da                	or     edx,ebx
c00114bd:	88 10                	mov    BYTE PTR [eax],dl
c00114bf:	5b                   	pop    ebx
c00114c0:	c3                   	ret    

c00114c1 <Virt::getPageState(unsigned long)>:
c00114c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c5:	8b 0d c8 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfc8
c00114cb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114d1:	89 d0                	mov    eax,edx
c00114d3:	d1 e8                	shr    eax,1
c00114d5:	83 e2 01             	and    edx,0x1
c00114d8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114db:	75 04                	jne    c00114e1 <Virt::getPageState(unsigned long)+0x20>
c00114dd:	83 e0 0f             	and    eax,0xf
c00114e0:	c3                   	ret    
c00114e1:	c0 e8 04             	shr    al,0x4
c00114e4:	c3                   	ret    

c00114e5 <Virt::allocateKernelVirtualPages(int)>:
c00114e5:	55                   	push   ebp
c00114e6:	31 ed                	xor    ebp,ebp
c00114e8:	57                   	push   edi
c00114e9:	56                   	push   esi
c00114ea:	53                   	push   ebx
c00114eb:	31 db                	xor    ebx,ebx
c00114ed:	83 ec 1c             	sub    esp,0x1c
c00114f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114f4:	8b 3d c4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc4
c00114fa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114ff:	57                   	push   edi
c0011500:	e8 bc ff ff ff       	call   c00114c1 <Virt::getPageState(unsigned long)>
c0011505:	5a                   	pop    edx
c0011506:	84 c0                	test   al,al
c0011508:	75 3a                	jne    c0011544 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001150a:	85 db                	test   ebx,ebx
c001150c:	75 02                	jne    c0011510 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001150e:	89 fd                	mov    ebp,edi
c0011510:	43                   	inc    ebx
c0011511:	39 f3                	cmp    ebx,esi
c0011513:	74 5a                	je     c001156f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011515:	47                   	inc    edi
c0011516:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001151c:	76 31                	jbe    c001154f <Virt::allocateKernelVirtualPages(int)+0x6a>
c001151e:	c7 05 c4 df 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dfc4,0xc8000
c0011528:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001152d:	75 28                	jne    c0011557 <Virt::allocateKernelVirtualPages(int)+0x72>
c001152f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011534:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011539:	57                   	push   edi
c001153a:	e8 82 ff ff ff       	call   c00114c1 <Virt::getPageState(unsigned long)>
c001153f:	5a                   	pop    edx
c0011540:	84 c0                	test   al,al
c0011542:	74 c6                	je     c001150a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011544:	31 db                	xor    ebx,ebx
c0011546:	47                   	inc    edi
c0011547:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001154d:	77 cf                	ja     c001151e <Virt::allocateKernelVirtualPages(int)+0x39>
c001154f:	89 3d c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,edi
c0011555:	eb a8                	jmp    c00114ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011557:	83 ec 0c             	sub    esp,0xc
c001155a:	68 78 ae 02 c0       	push   0xc002ae78
c001155f:	e8 bd 8d 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011564:	8b 3d c4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc4
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	eb 90                	jmp    c00114ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c001156f:	89 2d c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,ebp
c0011575:	4b                   	dec    ebx
c0011576:	74 5f                	je     c00115d7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011578:	85 f6                	test   esi,esi
c001157a:	74 3d                	je     c00115b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001157c:	89 e8                	mov    eax,ebp
c001157e:	31 db                	xor    ebx,ebx
c0011580:	8d 7e ff             	lea    edi,[esi-0x1]
c0011583:	eb 14                	jmp    c0011599 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011585:	6a 01                	push   0x1
c0011587:	43                   	inc    ebx
c0011588:	50                   	push   eax
c0011589:	e8 fe fe ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001158e:	58                   	pop    eax
c001158f:	39 f3                	cmp    ebx,esi
c0011591:	5a                   	pop    edx
c0011592:	74 25                	je     c00115b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011594:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c0011599:	8d 50 01             	lea    edx,[eax+0x1]
c001159c:	85 db                	test   ebx,ebx
c001159e:	89 15 c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,edx
c00115a4:	74 20                	je     c00115c6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00115a6:	39 df                	cmp    edi,ebx
c00115a8:	75 db                	jne    c0011585 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00115aa:	6a 03                	push   0x3
c00115ac:	43                   	inc    ebx
c00115ad:	50                   	push   eax
c00115ae:	e8 d9 fe ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115b3:	59                   	pop    ecx
c00115b4:	39 f3                	cmp    ebx,esi
c00115b6:	58                   	pop    eax
c00115b7:	75 db                	jne    c0011594 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115b9:	83 c4 1c             	add    esp,0x1c
c00115bc:	89 e8                	mov    eax,ebp
c00115be:	5b                   	pop    ebx
c00115bf:	c1 e0 0c             	shl    eax,0xc
c00115c2:	5e                   	pop    esi
c00115c3:	5f                   	pop    edi
c00115c4:	5d                   	pop    ebp
c00115c5:	c3                   	ret    
c00115c6:	6a 02                	push   0x2
c00115c8:	bb 01 00 00 00       	mov    ebx,0x1
c00115cd:	50                   	push   eax
c00115ce:	e8 b9 fe ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115d3:	58                   	pop    eax
c00115d4:	5a                   	pop    edx
c00115d5:	eb bd                	jmp    c0011594 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115d7:	6a 04                	push   0x4
c00115d9:	8d 45 01             	lea    eax,[ebp+0x1]
c00115dc:	55                   	push   ebp
c00115dd:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c00115e2:	e8 a5 fe ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115e7:	59                   	pop    ecx
c00115e8:	89 e8                	mov    eax,ebp
c00115ea:	5b                   	pop    ebx
c00115eb:	c1 e0 0c             	shl    eax,0xc
c00115ee:	83 c4 1c             	add    esp,0x1c
c00115f1:	5b                   	pop    ebx
c00115f2:	5e                   	pop    esi
c00115f3:	5f                   	pop    edi
c00115f4:	5d                   	pop    ebp
c00115f5:	c3                   	ret    

c00115f6 <Virt::freeSwapfilePage(unsigned long)>:
c00115f6:	53                   	push   ebx
c00115f7:	8b 15 8c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f18c
c00115fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011601:	b8 01 00 00 00       	mov    eax,0x1
c0011606:	89 cb                	mov    ebx,ecx
c0011608:	d3 e0                	shl    eax,cl
c001160a:	c1 eb 05             	shr    ebx,0x5
c001160d:	f7 d0                	not    eax
c001160f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011612:	5b                   	pop    ebx
c0011613:	c3                   	ret    

c0011614 <Virt::swapIDToSector(unsigned long)>:
c0011614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011618:	0f af 05 cc df 02 c0 	imul   eax,DWORD PTR ds:0xc002dfcc
c001161f:	03 05 d4 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfd4
c0011625:	c3                   	ret    

c0011626 <Virt::allocateSwapfilePage()>:
c0011626:	55                   	push   ebp
c0011627:	31 d2                	xor    edx,edx
c0011629:	57                   	push   edi
c001162a:	56                   	push   esi
c001162b:	53                   	push   ebx
c001162c:	83 ec 0c             	sub    esp,0xc
c001162f:	8b 0d cc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfcc
c0011635:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c001163a:	f7 f1                	div    ecx
c001163c:	39 0d d0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfd0,ecx
c0011642:	72 2d                	jb     c0011671 <Virt::allocateSwapfilePage()+0x4b>
c0011644:	8b 35 8c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f18c
c001164a:	8b 16                	mov    edx,DWORD PTR [esi]
c001164c:	f6 c2 01             	test   dl,0x1
c001164f:	74 3c                	je     c001168d <Virt::allocateSwapfilePage()+0x67>
c0011651:	31 c9                	xor    ecx,ecx
c0011653:	bf 01 00 00 00       	mov    edi,0x1
c0011658:	eb 12                	jmp    c001166c <Virt::allocateSwapfilePage()+0x46>
c001165a:	89 fd                	mov    ebp,edi
c001165c:	89 ca                	mov    edx,ecx
c001165e:	d3 e5                	shl    ebp,cl
c0011660:	c1 ea 05             	shr    edx,0x5
c0011663:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011666:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011668:	85 ea                	test   edx,ebp
c001166a:	74 2a                	je     c0011696 <Virt::allocateSwapfilePage()+0x70>
c001166c:	41                   	inc    ecx
c001166d:	39 c8                	cmp    eax,ecx
c001166f:	77 e9                	ja     c001165a <Virt::allocateSwapfilePage()+0x34>
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	68 ff af 02 c0       	push   0xc002afff
c0011679:	e8 a3 8c 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001167e:	83 c4 10             	add    esp,0x10
c0011681:	31 c9                	xor    ecx,ecx
c0011683:	83 c4 0c             	add    esp,0xc
c0011686:	89 c8                	mov    eax,ecx
c0011688:	5b                   	pop    ebx
c0011689:	5e                   	pop    esi
c001168a:	5f                   	pop    edi
c001168b:	5d                   	pop    ebp
c001168c:	c3                   	ret    
c001168d:	89 f3                	mov    ebx,esi
c001168f:	bd 01 00 00 00       	mov    ebp,0x1
c0011694:	31 c9                	xor    ecx,ecx
c0011696:	09 ea                	or     edx,ebp
c0011698:	89 c8                	mov    eax,ecx
c001169a:	89 13                	mov    DWORD PTR [ebx],edx
c001169c:	83 c4 0c             	add    esp,0xc
c001169f:	5b                   	pop    ebx
c00116a0:	5e                   	pop    esi
c00116a1:	5f                   	pop    edi
c00116a2:	5d                   	pop    ebp
c00116a3:	c3                   	ret    

c00116a4 <Virt::virtualMemorySetup()>:
c00116a4:	53                   	push   ebx
c00116a5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116aa:	83 ec 08             	sub    esp,0x8
c00116ad:	6a 0f                	push   0xf
c00116af:	53                   	push   ebx
c00116b0:	43                   	inc    ebx
c00116b1:	e8 d6 fd ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116b6:	59                   	pop    ecx
c00116b7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116bd:	58                   	pop    eax
c00116be:	75 ed                	jne    c00116ad <Virt::virtualMemorySetup()+0x9>
c00116c0:	83 ec 08             	sub    esp,0x8
c00116c3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116c8:	68 00 00 00 c8       	push   0xc8000000
c00116cd:	68 16 b0 02 c0       	push   0xc002b016
c00116d2:	e8 14 12 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00116d7:	58                   	pop    eax
c00116d8:	5a                   	pop    edx
c00116d9:	68 00 f0 ff ef       	push   0xeffff000
c00116de:	68 2a b0 02 c0       	push   0xc002b02a
c00116e3:	e8 03 12 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00116e8:	83 c4 10             	add    esp,0x10
c00116eb:	83 ec 08             	sub    esp,0x8
c00116ee:	6a 00                	push   0x0
c00116f0:	53                   	push   ebx
c00116f1:	43                   	inc    ebx
c00116f2:	e8 95 fd ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011700:	75 e9                	jne    c00116eb <Virt::virtualMemorySetup()+0x47>
c0011702:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011707:	83 ec 08             	sub    esp,0x8
c001170a:	6a 0f                	push   0xf
c001170c:	53                   	push   ebx
c001170d:	43                   	inc    ebx
c001170e:	e8 79 fd ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001171c:	75 e9                	jne    c0011707 <Virt::virtualMemorySetup()+0x63>
c001171e:	83 c4 08             	add    esp,0x8
c0011721:	5b                   	pop    ebx
c0011722:	c3                   	ret    

c0011723 <Virt::setupPageSwapping(int)>:
c0011723:	57                   	push   edi
c0011724:	56                   	push   esi
c0011725:	53                   	push   ebx
c0011726:	83 ec 1c             	sub    esp,0x1c
c0011729:	68 3e b0 02 c0       	push   0xc002b03e
c001172e:	e8 b8 11 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011733:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001173a:	e8 4d e1 ff ff       	call   c000f88c <malloc>
c001173f:	83 c4 0c             	add    esp,0xc
c0011742:	89 c6                	mov    esi,eax
c0011744:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001174a:	68 52 b0 02 c0       	push   0xc002b052
c001174f:	50                   	push   eax
c0011750:	e8 f5 16 00 00       	call   c0012e4a <File::File(char const*, Process*)>
c0011755:	89 34 24             	mov    DWORD PTR [esp],esi
c0011758:	e8 c9 18 00 00       	call   c0013026 <File::unlink()>
c001175d:	59                   	pop    ecx
c001175e:	5b                   	pop    ebx
c001175f:	6a 12                	push   0x12
c0011761:	56                   	push   esi
c0011762:	e8 47 17 00 00       	call   c0012eae <File::open(FileOpenMode)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	85 c0                	test   eax,eax
c001176c:	0f 85 5b 01 00 00    	jne    c00118cd <Virt::setupPageSwapping(int)+0x1aa>
c0011772:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011776:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001177e:	c1 e3 08             	shl    ebx,0x8
c0011781:	83 ec 0c             	sub    esp,0xc
c0011784:	68 00 00 01 00       	push   0x10000
c0011789:	e8 fe e0 ff ff       	call   c000f88c <malloc>
c001178e:	83 c4 0c             	add    esp,0xc
c0011791:	89 c7                	mov    edi,eax
c0011793:	68 00 00 01 00       	push   0x10000
c0011798:	68 ee 00 00 00       	push   0xee
c001179d:	50                   	push   eax
c001179e:	e8 ad ef fe ff       	call   c0000750 <memset>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	85 db                	test   ebx,ebx
c00117a8:	79 03                	jns    c00117ad <Virt::setupPageSwapping(int)+0x8a>
c00117aa:	83 c3 0f             	add    ebx,0xf
c00117ad:	c1 fb 04             	sar    ebx,0x4
c00117b0:	4b                   	dec    ebx
c00117b1:	83 fb ff             	cmp    ebx,0xffffffff
c00117b4:	74 4f                	je     c0011805 <Virt::setupPageSwapping(int)+0xe2>
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00117bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117bf:	52                   	push   edx
c00117c0:	57                   	push   edi
c00117c1:	6a 00                	push   0x0
c00117c3:	68 00 00 01 00       	push   0x10000
c00117c8:	56                   	push   esi
c00117c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117cc:	83 c4 20             	add    esp,0x20
c00117cf:	85 c0                	test   eax,eax
c00117d1:	0f 85 e0 00 00 00    	jne    c00118b7 <Virt::setupPageSwapping(int)+0x194>
c00117d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117db:	3d 00 00 01 00       	cmp    eax,0x10000
c00117e0:	74 ce                	je     c00117b0 <Virt::setupPageSwapping(int)+0x8d>
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	4b                   	dec    ebx
c00117e6:	50                   	push   eax
c00117e7:	68 a5 b0 02 c0       	push   0xc002b0a5
c00117ec:	e8 fa 10 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00117f1:	c7 04 24 ae b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ae
c00117f8:	e8 24 8b 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	83 fb ff             	cmp    ebx,0xffffffff
c0011803:	75 b1                	jne    c00117b6 <Virt::setupPageSwapping(int)+0x93>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	56                   	push   esi
c0011809:	e8 fe 16 00 00       	call   c0012f0c <File::close()>
c001180e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011811:	e8 96 e0 ff ff       	call   c000f8ac <rfree>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	85 f6                	test   esi,esi
c001181b:	74 0c                	je     c0011829 <Virt::setupPageSwapping(int)+0x106>
c001181d:	83 ec 0c             	sub    esp,0xc
c0011820:	8b 06                	mov    eax,DWORD PTR [esi]
c0011822:	56                   	push   esi
c0011823:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011826:	83 c4 10             	add    esp,0x10
c0011829:	83 ec 08             	sub    esp,0x8
c001182c:	a1 28 f6 02 c0       	mov    eax,ds:0xc002f628
c0011831:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011837:	8b 10                	mov    edx,DWORD PTR [eax]
c0011839:	68 52 b0 02 c0       	push   0xc002b052
c001183e:	50                   	push   eax
c001183f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011842:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011846:	c6 05 d8 df 02 c0 43 	mov    BYTE PTR ds:0xc002dfd8,0x43
c001184d:	c1 e2 0b             	shl    edx,0xb
c0011850:	a3 d4 df 02 c0       	mov    ds:0xc002dfd4,eax
c0011855:	89 15 d0 df 02 c0    	mov    DWORD PTR ds:0xc002dfd0,edx
c001185b:	c7 05 cc df 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dfcc,0x8
c0011865:	c1 ea 08             	shr    edx,0x8
c0011868:	89 14 24             	mov    DWORD PTR [esp],edx
c001186b:	e8 1c e0 ff ff       	call   c000f88c <malloc>
c0011870:	83 c4 0c             	add    esp,0xc
c0011873:	89 c1                	mov    ecx,eax
c0011875:	a3 8c f1 02 c0       	mov    ds:0xc002f18c,eax
c001187a:	31 d2                	xor    edx,edx
c001187c:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c0011881:	f7 35 cc df 02 c0    	div    DWORD PTR ds:0xc002dfcc
c0011887:	c1 e8 05             	shr    eax,0x5
c001188a:	50                   	push   eax
c001188b:	6a 00                	push   0x0
c001188d:	51                   	push   ecx
c001188e:	e8 bd ee fe ff       	call   c0000750 <memset>
c0011893:	58                   	pop    eax
c0011894:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c0011899:	5a                   	pop    edx
c001189a:	31 d2                	xor    edx,edx
c001189c:	f7 35 cc df 02 c0    	div    DWORD PTR ds:0xc002dfcc
c00118a2:	c1 e8 05             	shr    eax,0x5
c00118a5:	50                   	push   eax
c00118a6:	68 b4 b0 02 c0       	push   0xc002b0b4
c00118ab:	e8 3b 10 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00118b0:	83 c4 20             	add    esp,0x20
c00118b3:	5b                   	pop    ebx
c00118b4:	5e                   	pop    esi
c00118b5:	5f                   	pop    edi
c00118b6:	c3                   	ret    
c00118b7:	83 ec 08             	sub    esp,0x8
c00118ba:	50                   	push   eax
c00118bb:	68 8d b0 02 c0       	push   0xc002b08d
c00118c0:	e8 26 10 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	e9 0a ff ff ff       	jmp    c00117d7 <Virt::setupPageSwapping(int)+0xb4>
c00118cd:	83 ec 08             	sub    esp,0x8
c00118d0:	50                   	push   eax
c00118d1:	68 69 b0 02 c0       	push   0xc002b069
c00118d6:	e8 10 10 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00118db:	c7 04 24 72 b0 02 c0 	mov    DWORD PTR [esp],0xc002b072
c00118e2:	e8 3a 8a 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00118e7:	83 c4 10             	add    esp,0x10
c00118ea:	e9 83 fe ff ff       	jmp    c0011772 <Virt::setupPageSwapping(int)+0x4f>
c00118ef:	90                   	nop

c00118f0 <VAS::VAS()>:
c00118f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190a:	a3 90 f1 02 c0       	mov    ds:0xc002f190,eax
c001190f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011913:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011917:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001191b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001191e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011922:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011929:	90                   	nop
c001192a:	c3                   	ret    
c001192b:	90                   	nop

c001192c <VAS::VAS(VAS*)>:
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011933:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011945:	83 ec 0c             	sub    esp,0xc
c0011948:	68 98 ae 02 c0       	push   0xc002ae98
c001194d:	e8 cf 89 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	90                   	nop
c0011956:	83 c4 0c             	add    esp,0xc
c0011959:	c3                   	ret    

c001195a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001195a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001195e:	89 c2                	mov    edx,eax
c0011960:	c1 e8 0a             	shr    eax,0xa
c0011963:	c1 ea 16             	shr    edx,0x16
c0011966:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001196b:	19 c9                	sbb    ecx,ecx
c001196d:	c1 e2 0c             	shl    edx,0xc
c0011970:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011976:	25 fc 0f 00 00       	and    eax,0xffc
c001197b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011982:	01 d0                	add    eax,edx
c0011984:	c3                   	ret    
c0011985:	90                   	nop

c0011986 <VAS::getPageTableEntry(unsigned long)>:
c0011986:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001198a:	89 ca                	mov    edx,ecx
c001198c:	c1 e9 0a             	shr    ecx,0xa
c001198f:	c1 ea 16             	shr    edx,0x16
c0011992:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011998:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001199e:	c1 e0 0c             	shl    eax,0xc
c00119a1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119a4:	c3                   	ret    

c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119a5:	57                   	push   edi
c00119a6:	56                   	push   esi
c00119a7:	be 01 00 00 00       	mov    esi,0x1
c00119ac:	53                   	push   ebx
c00119ad:	83 ec 10             	sub    esp,0x10
c00119b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119b4:	c1 eb 0c             	shr    ebx,0xc
c00119b7:	eb 3f                	jmp    c00119f8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119b9:	83 ec 08             	sub    esp,0x8
c00119bc:	57                   	push   edi
c00119bd:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c00119c3:	e8 be ff ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00119cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119d1:	f6 c4 04             	test   ah,0x4
c00119d4:	75 5f                	jne    c0011a35 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119d6:	80 fa 04             	cmp    dl,0x4
c00119d9:	74 78                	je     c0011a53 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119db:	80 fa 02             	cmp    dl,0x2
c00119de:	0f 84 88 00 00 00    	je     c0011a6c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119e4:	80 fa 03             	cmp    dl,0x3
c00119e7:	0f 84 ad 00 00 00    	je     c0011a9a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119ed:	fe ca                	dec    dl
c00119ef:	0f 84 92 00 00 00    	je     c0011a87 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119f5:	43                   	inc    ebx
c00119f6:	31 f6                	xor    esi,esi
c00119f8:	53                   	push   ebx
c00119f9:	89 df                	mov    edi,ebx
c00119fb:	e8 c1 fa ff ff       	call   c00114c1 <Virt::getPageState(unsigned long)>
c0011a00:	c1 e7 0c             	shl    edi,0xc
c0011a03:	59                   	pop    ecx
c0011a04:	84 c0                	test   al,al
c0011a06:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a0a:	75 ad                	jne    c00119b9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a0c:	83 ec 0c             	sub    esp,0xc
c0011a0f:	68 cf b0 02 c0       	push   0xc002b0cf
c0011a14:	e8 08 89 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011a19:	58                   	pop    eax
c0011a1a:	5a                   	pop    edx
c0011a1b:	57                   	push   edi
c0011a1c:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c0011a22:	e8 5f ff ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c0011a27:	83 c4 10             	add    esp,0x10
c0011a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a30:	f6 c4 04             	test   ah,0x4
c0011a33:	74 c0                	je     c00119f5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a35:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	50                   	push   eax
c0011a42:	e8 0b e1 ff ff       	call   c000fb52 <Phys::freePage(unsigned long)>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a4e:	80 fa 04             	cmp    dl,0x4
c0011a51:	75 88                	jne    c00119db <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a53:	89 f0                	mov    eax,esi
c0011a55:	84 c0                	test   al,al
c0011a57:	75 47                	jne    c0011aa0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a59:	c7 44 24 20 bc ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aebc
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	5b                   	pop    ebx
c0011a65:	5e                   	pop    esi
c0011a66:	5f                   	pop    edi
c0011a67:	e9 b5 88 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c0011a6c:	89 f0                	mov    eax,esi
c0011a6e:	84 c0                	test   al,al
c0011a70:	75 15                	jne    c0011a87 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a72:	83 ec 0c             	sub    esp,0xc
c0011a75:	68 eb b0 02 c0       	push   0xc002b0eb
c0011a7a:	e8 a2 88 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011a7f:	83 c4 10             	add    esp,0x10
c0011a82:	e9 6e ff ff ff       	jmp    c00119f5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a87:	83 ec 08             	sub    esp,0x8
c0011a8a:	6a 00                	push   0x0
c0011a8c:	53                   	push   ebx
c0011a8d:	e8 fa f9 ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	e9 5b ff ff ff       	jmp    c00119f5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a9a:	89 f0                	mov    eax,esi
c0011a9c:	84 c0                	test   al,al
c0011a9e:	75 15                	jne    c0011ab5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011aa0:	83 ec 08             	sub    esp,0x8
c0011aa3:	6a 00                	push   0x0
c0011aa5:	53                   	push   ebx
c0011aa6:	e8 e1 f9 ff ff       	call   c001148c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	83 c4 10             	add    esp,0x10
c0011ab1:	5b                   	pop    ebx
c0011ab2:	5e                   	pop    esi
c0011ab3:	5f                   	pop    edi
c0011ab4:	c3                   	ret    
c0011ab5:	c7 44 24 20 07 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b107
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	5b                   	pop    ebx
c0011ac1:	5e                   	pop    esi
c0011ac2:	5f                   	pop    edi
c0011ac3:	e9 59 88 00 00       	jmp    c001a321 <Krnl::panic(char const*)>

c0011ac8 <VAS::freeAllocatedPages(unsigned long)>:
c0011ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011acc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ad0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ad4:	74 09                	je     c0011adf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ad6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ada:	e9 c6 fe ff ff       	jmp    c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011adf:	c7 44 24 04 e0 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aee0
c0011ae7:	e9 ff 0d 00 00       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>

c0011aec <VAS::virtualToPhysical(unsigned long)>:
c0011aec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af4:	e8 8d fe ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c0011af9:	5a                   	pop    edx
c0011afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011afc:	59                   	pop    ecx
c0011afd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b02:	c3                   	ret    
c0011b03:	90                   	nop

c0011b04 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b04:	55                   	push   ebp
c0011b05:	57                   	push   edi
c0011b06:	56                   	push   esi
c0011b07:	53                   	push   ebx
c0011b08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b0c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b10:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b14:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b18:	85 db                	test   ebx,ebx
c0011b1a:	7e 22                	jle    c0011b3e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b1c:	c1 e3 0c             	shl    ebx,0xc
c0011b1f:	01 f3                	add    ebx,esi
c0011b21:	56                   	push   esi
c0011b22:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b28:	55                   	push   ebp
c0011b29:	e8 58 fe ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c0011b2e:	5a                   	pop    edx
c0011b2f:	59                   	pop    ecx
c0011b30:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b32:	21 f9                	and    ecx,edi
c0011b34:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b38:	39 f3                	cmp    ebx,esi
c0011b3a:	89 08                	mov    DWORD PTR [eax],ecx
c0011b3c:	75 e3                	jne    c0011b21 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b3e:	5b                   	pop    ebx
c0011b3f:	5e                   	pop    esi
c0011b40:	5f                   	pop    edi
c0011b41:	5d                   	pop    ebp
c0011b42:	c3                   	ret    
c0011b43:	90                   	nop

c0011b44 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b44:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011b49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b4f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b56:	75 01                	jne    c0011b59 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b58:	c3                   	ret    
c0011b59:	68 80 00 00 00       	push   0x80
c0011b5e:	6a ff                	push   0xffffffff
c0011b60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b6c:	e8 93 ff ff ff       	call   c0011b04 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b71:	83 c4 14             	add    esp,0x14
c0011b74:	c3                   	ret    
c0011b75:	90                   	nop

c0011b76 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b86:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b89:	19 c0                	sbb    eax,eax
c0011b8b:	83 ca 03             	or     edx,0x3
c0011b8e:	83 e0 fc             	and    eax,0xfffffffc
c0011b91:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b98:	0f 20 d8             	mov    eax,cr3
c0011b9b:	0f 22 d8             	mov    cr3,eax
c0011b9e:	c3                   	ret    
c0011b9f:	90                   	nop

c0011ba0 <VAS::~VAS()>:
c0011ba0:	83 ec 2c             	sub    esp,0x2c
c0011ba3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bab:	fa                   	cli    
c0011bac:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011bb1:	40                   	inc    eax
c0011bb2:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0011bb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bc1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011bcb:	6a 01                	push   0x1
c0011bcd:	50                   	push   eax
c0011bce:	e8 a3 ff ff ff       	call   c0011b76 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bd3:	83 c4 0c             	add    esp,0xc
c0011bd6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bde:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011be6:	0f 8f d4 00 00 00    	jg     c0011cc0 <VAS::~VAS()+0x120>
c0011bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bf7:	c1 e2 02             	shl    edx,0x2
c0011bfa:	01 d0                	add    eax,edx
c0011bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c06:	83 e0 01             	and    eax,0x1
c0011c09:	0f 84 a8 00 00 00    	je     c0011cb7 <VAS::~VAS()+0x117>
c0011c0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c17:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c1f:	7f 72                	jg     c0011c93 <VAS::~VAS()+0xf3>
c0011c21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c25:	c1 e0 0a             	shl    eax,0xa
c0011c28:	89 c2                	mov    edx,eax
c0011c2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c2e:	01 d0                	add    eax,edx
c0011c30:	c1 e0 0c             	shl    eax,0xc
c0011c33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c37:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c41:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c4b:	6a 01                	push   0x1
c0011c4d:	50                   	push   eax
c0011c4e:	e8 07 fd ff ff       	call   c001195a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c53:	83 c4 0c             	add    esp,0xc
c0011c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c68:	25 01 04 00 00       	and    eax,0x401
c0011c6d:	3d 01 04 00 00       	cmp    eax,0x401
c0011c72:	75 19                	jne    c0011c8d <VAS::~VAS()+0xed>
c0011c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c78:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c7d:	83 ec 0c             	sub    esp,0xc
c0011c80:	50                   	push   eax
c0011c81:	e8 cc de ff ff       	call   c000fb52 <Phys::freePage(unsigned long)>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c8d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c91:	eb 84                	jmp    c0011c17 <VAS::~VAS()+0x77>
c0011c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c97:	25 00 04 00 00       	and    eax,0x400
c0011c9c:	74 19                	je     c0011cb7 <VAS::~VAS()+0x117>
c0011c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ca7:	83 ec 0c             	sub    esp,0xc
c0011caa:	50                   	push   eax
c0011cab:	e8 a2 de ff ff       	call   c000fb52 <Phys::freePage(unsigned long)>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cb7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cbb:	e9 1e ff ff ff       	jmp    c0011bde <VAS::~VAS()+0x3e>
c0011cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	50                   	push   eax
c0011ccb:	e8 d5 fc ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	50                   	push   eax
c0011cde:	e8 6f de ff ff       	call   c000fb52 <Phys::freePage(unsigned long)>
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cee:	c1 e0 02             	shl    eax,0x2
c0011cf1:	83 ec 08             	sub    esp,0x8
c0011cf4:	50                   	push   eax
c0011cf5:	68 04 af 02 c0       	push   0xc002af04
c0011cfa:	e8 ec 0b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011cff:	83 c4 10             	add    esp,0x10
c0011d02:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011d07:	48                   	dec    eax
c0011d08:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0011d0d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011d12:	85 c0                	test   eax,eax
c0011d14:	75 01                	jne    c0011d17 <VAS::~VAS()+0x177>
c0011d16:	fb                   	sti    
c0011d17:	90                   	nop
c0011d18:	83 c4 2c             	add    esp,0x2c
c0011d1b:	c3                   	ret    

c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d1c:	55                   	push   ebp
c0011d1d:	57                   	push   edi
c0011d1e:	56                   	push   esi
c0011d1f:	53                   	push   ebx
c0011d20:	83 ec 1c             	sub    esp,0x1c
c0011d23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d2b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d31:	77 08                	ja     c0011d3b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d33:	0f 20 d8             	mov    eax,cr3
c0011d36:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d39:	75 47                	jne    c0011d82 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d3f:	09 d8                	or     eax,ebx
c0011d41:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d46:	75 57                	jne    c0011d9f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d48:	89 de                	mov    esi,ebx
c0011d4a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d4d:	c1 ee 16             	shr    esi,0x16
c0011d50:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d57:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d5b:	74 54                	je     c0011db1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d61:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d67:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d6b:	c1 e6 0c             	shl    esi,0xc
c0011d6e:	c1 eb 0a             	shr    ebx,0xa
c0011d71:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d77:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d7a:	83 c4 1c             	add    esp,0x1c
c0011d7d:	5b                   	pop    ebx
c0011d7e:	5e                   	pop    esi
c0011d7f:	5f                   	pop    edi
c0011d80:	5d                   	pop    ebp
c0011d81:	c3                   	ret    
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 24 af 02 c0       	push   0xc002af24
c0011d8a:	e8 5c 0b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d96:	09 d8                	or     eax,ebx
c0011d98:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d9d:	74 a9                	je     c0011d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d9f:	83 ec 0c             	sub    esp,0xc
c0011da2:	68 8c af 02 c0       	push   0xc002af8c
c0011da7:	e8 75 85 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011dac:	83 c4 10             	add    esp,0x10
c0011daf:	eb 97                	jmp    c0011d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db5:	e8 f3 dd ff ff       	call   c000fbad <Phys::allocatePage()>
c0011dba:	83 ec 0c             	sub    esp,0xc
c0011dbd:	89 c5                	mov    ebp,eax
c0011dbf:	8b 0d 90 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f190
c0011dc5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dc9:	6a 01                	push   0x1
c0011dcb:	e8 15 f7 ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0011dd0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dd7:	6a 01                	push   0x1
c0011dd9:	50                   	push   eax
c0011dda:	55                   	push   ebp
c0011ddb:	81 cd 07 04 00 00    	or     ebp,0x407
c0011de1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011de5:	51                   	push   ecx
c0011de6:	e8 27 02 00 00       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011deb:	83 c4 1c             	add    esp,0x1c
c0011dee:	68 00 10 00 00       	push   0x1000
c0011df3:	6a 00                	push   0x0
c0011df5:	50                   	push   eax
c0011df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dfa:	e8 51 e9 fe ff       	call   c0000750 <memset>
c0011dff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e06:	e8 9a fb ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e0f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e18:	e9 40 ff ff ff       	jmp    c0011d5d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e1d:	90                   	nop

c0011e1e <VAS::allocatePages(int, int)>:
c0011e1e:	55                   	push   ebp
c0011e1f:	57                   	push   edi
c0011e20:	56                   	push   esi
c0011e21:	53                   	push   ebx
c0011e22:	83 ec 1c             	sub    esp,0x1c
c0011e25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e29:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011e2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e34:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e3a:	83 e0 01             	and    eax,0x1
c0011e3d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e45:	0f 85 cc 00 00 00    	jne    c0011f17 <VAS::allocatePages(int, int)+0xf9>
c0011e4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e52:	85 c0                	test   eax,eax
c0011e54:	0f 84 a1 00 00 00    	je     c0011efb <VAS::allocatePages(int, int)+0xdd>
c0011e5a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e62:	c1 e6 0c             	shl    esi,0xc
c0011e65:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e69:	85 c0                	test   eax,eax
c0011e6b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e6e:	7e 33                	jle    c0011ea3 <VAS::allocatePages(int, int)+0x85>
c0011e70:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e78:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e7e:	e8 2a dd ff ff       	call   c000fbad <Phys::allocatePage()>
c0011e83:	55                   	push   ebp
c0011e84:	53                   	push   ebx
c0011e85:	50                   	push   eax
c0011e86:	57                   	push   edi
c0011e87:	e8 90 fe ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e8c:	83 c4 10             	add    esp,0x10
c0011e8f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e94:	74 03                	je     c0011e99 <VAS::allocatePages(int, int)+0x7b>
c0011e96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e9f:	39 de                	cmp    esi,ebx
c0011ea1:	75 db                	jne    c0011e7e <VAS::allocatePages(int, int)+0x60>
c0011ea3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ea8:	75 12                	jne    c0011ebc <VAS::allocatePages(int, int)+0x9e>
c0011eaa:	0f 20 d8             	mov    eax,cr3
c0011ead:	0f 22 d8             	mov    cr3,eax
c0011eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb4:	83 c4 1c             	add    esp,0x1c
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	5f                   	pop    edi
c0011eba:	5d                   	pop    ebp
c0011ebb:	c3                   	ret    
c0011ebc:	c1 ee 0a             	shr    esi,0xa
c0011ebf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ec3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ec9:	c1 eb 0a             	shr    ebx,0xa
c0011ecc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ed2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ed8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ede:	39 c3                	cmp    ebx,eax
c0011ee0:	77 ce                	ja     c0011eb0 <VAS::allocatePages(int, int)+0x92>
c0011ee2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eeb:	39 d8                	cmp    eax,ebx
c0011eed:	73 f3                	jae    c0011ee2 <VAS::allocatePages(int, int)+0xc4>
c0011eef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef3:	83 c4 1c             	add    esp,0x1c
c0011ef6:	5b                   	pop    ebx
c0011ef7:	5e                   	pop    esi
c0011ef8:	5f                   	pop    edi
c0011ef9:	5d                   	pop    ebp
c0011efa:	c3                   	ret    
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	68 b0 af 02 c0       	push   0xc002afb0
c0011f03:	e8 19 84 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0011f08:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	e9 43 ff ff ff       	jmp    c0011e5a <VAS::allocatePages(int, int)+0x3c>
c0011f17:	83 ec 0c             	sub    esp,0xc
c0011f1a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f1e:	e8 c2 f5 ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0011f23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f2f:	0f 87 9b 00 00 00    	ja     c0011fd0 <VAS::allocatePages(int, int)+0x1b2>
c0011f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f39:	85 d2                	test   edx,edx
c0011f3b:	7e 3c                	jle    c0011f79 <VAS::allocatePages(int, int)+0x15b>
c0011f3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f41:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f49:	c1 e5 0c             	shl    ebp,0xc
c0011f4c:	81 ce 00 04 00 00    	or     esi,0x400
c0011f52:	01 dd                	add    ebp,ebx
c0011f54:	e8 54 dc ff ff       	call   c000fbad <Phys::allocatePage()>
c0011f59:	56                   	push   esi
c0011f5a:	53                   	push   ebx
c0011f5b:	50                   	push   eax
c0011f5c:	57                   	push   edi
c0011f5d:	e8 ba fd ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f62:	83 c4 10             	add    esp,0x10
c0011f65:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f6a:	74 03                	je     c0011f6f <VAS::allocatePages(int, int)+0x151>
c0011f6c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f6f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f75:	39 dd                	cmp    ebp,ebx
c0011f77:	75 db                	jne    c0011f54 <VAS::allocatePages(int, int)+0x136>
c0011f79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f7e:	0f 84 26 ff ff ff    	je     c0011eaa <VAS::allocatePages(int, int)+0x8c>
c0011f84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f8c:	89 d3                	mov    ebx,edx
c0011f8e:	c1 e0 0c             	shl    eax,0xc
c0011f91:	c1 eb 0a             	shr    ebx,0xa
c0011f94:	01 d0                	add    eax,edx
c0011f96:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f9c:	c1 e8 0a             	shr    eax,0xa
c0011f9f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fa5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011faa:	2d 00 00 40 00       	sub    eax,0x400000
c0011faf:	39 c3                	cmp    ebx,eax
c0011fb1:	0f 87 f9 fe ff ff    	ja     c0011eb0 <VAS::allocatePages(int, int)+0x92>
c0011fb7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fba:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fc0:	39 d8                	cmp    eax,ebx
c0011fc2:	73 f3                	jae    c0011fb7 <VAS::allocatePages(int, int)+0x199>
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	83 c4 1c             	add    esp,0x1c
c0011fcb:	5b                   	pop    ebx
c0011fcc:	5e                   	pop    esi
c0011fcd:	5f                   	pop    edi
c0011fce:	5d                   	pop    ebp
c0011fcf:	c3                   	ret    
c0011fd0:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011fd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fdb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fe2:	0f 84 4d ff ff ff    	je     c0011f35 <VAS::allocatePages(int, int)+0x117>
c0011fe8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011ff0:	e9 40 ff ff ff       	jmp    c0011f35 <VAS::allocatePages(int, int)+0x117>
c0011ff5:	90                   	nop

c0011ff6 <VAS::setCPUSpecific(unsigned long)>:
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	6a 05                	push   0x5
c0011ffb:	68 00 00 40 c2       	push   0xc2400000
c0012000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012008:	e8 0f fd ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c001200d:	83 c4 1c             	add    esp,0x1c
c0012010:	c3                   	ret    
c0012011:	90                   	nop

c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012012:	55                   	push   ebp
c0012013:	57                   	push   edi
c0012014:	56                   	push   esi
c0012015:	53                   	push   ebx
c0012016:	83 ec 1c             	sub    esp,0x1c
c0012019:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001201e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012028:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001202c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012032:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012036:	83 e0 01             	and    eax,0x1
c0012039:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001203d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012041:	85 c0                	test   eax,eax
c0012043:	7e 39                	jle    c001207e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012045:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012049:	89 f3                	mov    ebx,esi
c001204b:	c1 e0 0c             	shl    eax,0xc
c001204e:	01 f0                	add    eax,esi
c0012050:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012054:	55                   	push   ebp
c0012055:	53                   	push   ebx
c0012056:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001205a:	29 f0                	sub    eax,esi
c001205c:	01 d8                	add    eax,ebx
c001205e:	50                   	push   eax
c001205f:	57                   	push   edi
c0012060:	e8 b7 fc ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001206d:	74 03                	je     c0012072 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001206f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012072:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012078:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001207c:	75 d6                	jne    c0012054 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001207e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012083:	75 10                	jne    c0012095 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012085:	0f 20 d8             	mov    eax,cr3
c0012088:	0f 22 d8             	mov    cr3,eax
c001208b:	83 c4 1c             	add    esp,0x1c
c001208e:	89 f0                	mov    eax,esi
c0012090:	5b                   	pop    ebx
c0012091:	5e                   	pop    esi
c0012092:	5f                   	pop    edi
c0012093:	5d                   	pop    ebp
c0012094:	c3                   	ret    
c0012095:	89 f3                	mov    ebx,esi
c0012097:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209b:	c1 eb 0a             	shr    ebx,0xa
c001209e:	c1 e0 0c             	shl    eax,0xc
c00120a1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120a7:	01 f0                	add    eax,esi
c00120a9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120af:	c1 e8 0a             	shr    eax,0xa
c00120b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b7:	2d 00 00 40 00       	sub    eax,0x400000
c00120bc:	39 c3                	cmp    ebx,eax
c00120be:	77 cb                	ja     c001208b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120c0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120c9:	39 d8                	cmp    eax,ebx
c00120cb:	73 f3                	jae    c00120c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120cd:	83 c4 1c             	add    esp,0x1c
c00120d0:	89 f0                	mov    eax,esi
c00120d2:	5b                   	pop    ebx
c00120d3:	5e                   	pop    esi
c00120d4:	5f                   	pop    edi
c00120d5:	5d                   	pop    ebp
c00120d6:	c3                   	ret    
c00120d7:	90                   	nop

c00120d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120d8:	55                   	push   ebp
c00120d9:	57                   	push   edi
c00120da:	56                   	push   esi
c00120db:	53                   	push   ebx
c00120dc:	83 ec 1c             	sub    esp,0x1c
c00120df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120e7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120ef:	a9 ff 0f 00 00       	test   eax,0xfff
c00120f4:	75 4a                	jne    c0012140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120fa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120fd:	c1 eb 16             	shr    ebx,0x16
c0012100:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012107:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001210b:	74 4d                	je     c001215a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001210d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012111:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012115:	c1 e8 0a             	shr    eax,0xa
c0012118:	80 fa 01             	cmp    dl,0x1
c001211b:	19 d2                	sbb    edx,edx
c001211d:	c1 e3 0c             	shl    ebx,0xc
c0012120:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012124:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001212a:	25 fc 0f 00 00       	and    eax,0xffc
c001212f:	01 d8                	add    eax,ebx
c0012131:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012138:	83 c4 1c             	add    esp,0x1c
c001213b:	5b                   	pop    ebx
c001213c:	5e                   	pop    esi
c001213d:	5f                   	pop    edi
c001213e:	5d                   	pop    ebp
c001213f:	c3                   	ret    
c0012140:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012144:	83 ec 0c             	sub    esp,0xc
c0012147:	68 dc af 02 c0       	push   0xc002afdc
c001214c:	e8 d0 81 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012158:	eb 9c                	jmp    c00120f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001215a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001215e:	e8 4a da ff ff       	call   c000fbad <Phys::allocatePage()>
c0012163:	83 ec 0c             	sub    esp,0xc
c0012166:	89 c5                	mov    ebp,eax
c0012168:	8b 0d 90 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f190
c001216e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012172:	6a 01                	push   0x1
c0012174:	e8 6c f3 ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0012179:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012180:	6a 01                	push   0x1
c0012182:	50                   	push   eax
c0012183:	55                   	push   ebp
c0012184:	81 cd 07 04 00 00    	or     ebp,0x407
c001218a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001218e:	51                   	push   ecx
c001218f:	e8 7e fe ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012194:	83 c4 1c             	add    esp,0x1c
c0012197:	68 00 10 00 00       	push   0x1000
c001219c:	6a 00                	push   0x0
c001219e:	50                   	push   eax
c001219f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121a3:	e8 a8 e5 fe ff       	call   c0000750 <memset>
c00121a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121af:	e8 f1 f7 ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121b4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00121b7:	83 c4 10             	add    esp,0x10
c00121ba:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121c1:	e9 47 ff ff ff       	jmp    c001210d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121c6 <VAS::VAS(bool)>:
c00121c6:	53                   	push   ebx
c00121c7:	83 ec 28             	sub    esp,0x28
c00121ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ec:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121f0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121f3:	e8 b5 d9 ff ff       	call   c000fbad <Phys::allocatePage()>
c00121f8:	89 c2                	mov    edx,eax
c00121fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121fe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012201:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	6a 01                	push   0x1
c001220c:	e8 d4 f2 ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0012211:	83 c4 10             	add    esp,0x10
c0012214:	89 c2                	mov    edx,eax
c0012216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001221d:	83 ec 0c             	sub    esp,0xc
c0012220:	6a 03                	push   0x3
c0012222:	6a 01                	push   0x1
c0012224:	52                   	push   edx
c0012225:	50                   	push   eax
c0012226:	53                   	push   ebx
c0012227:	e8 e6 fd ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001222c:	83 c4 20             	add    esp,0x20
c001222f:	89 c2                	mov    edx,eax
c0012231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012235:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012238:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012240:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012248:	7f 1c                	jg     c0012266 <VAS::VAS(bool)+0xa0>
c001224a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012251:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012255:	c1 e2 02             	shl    edx,0x2
c0012258:	01 d0                	add    eax,edx
c001225a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012260:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012264:	eb da                	jmp    c0012240 <VAS::VAS(bool)+0x7a>
c0012266:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001226e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012276:	7f 7a                	jg     c00122f2 <VAS::VAS(bool)+0x12c>
c0012278:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001227c:	2d 00 02 00 00       	sub    eax,0x200
c0012281:	c1 e0 0c             	shl    eax,0xc
c0012284:	83 c8 03             	or     eax,0x3
c0012287:	89 c2                	mov    edx,eax
c0012289:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001228e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012294:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001229a:	83 e0 10             	and    eax,0x10
c001229d:	84 c0                	test   al,al
c001229f:	74 07                	je     c00122a8 <VAS::VAS(bool)+0xe2>
c00122a1:	b8 00 01 00 00       	mov    eax,0x100
c00122a6:	eb 05                	jmp    c00122ad <VAS::VAS(bool)+0xe7>
c00122a8:	b8 00 00 00 00       	mov    eax,0x0
c00122ad:	09 d0                	or     eax,edx
c00122af:	89 c1                	mov    ecx,eax
c00122b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122bc:	c1 e2 02             	shl    edx,0x2
c00122bf:	01 d0                	add    eax,edx
c00122c1:	89 ca                	mov    edx,ecx
c00122c3:	89 10                	mov    DWORD PTR [eax],edx
c00122c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c9:	2d 40 03 00 00       	sub    eax,0x340
c00122ce:	83 f8 7f             	cmp    eax,0x7f
c00122d1:	77 16                	ja     c00122e9 <VAS::VAS(bool)+0x123>
c00122d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122de:	c1 e2 02             	shl    edx,0x2
c00122e1:	01 d0                	add    eax,edx
c00122e3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122e9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122ed:	e9 7c ff ff ff       	jmp    c001226e <VAS::VAS(bool)+0xa8>
c00122f2:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00122f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122fd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012303:	83 e0 10             	and    eax,0x10
c0012306:	84 c0                	test   al,al
c0012308:	74 07                	je     c0012311 <VAS::VAS(bool)+0x14b>
c001230a:	b8 03 41 00 00       	mov    eax,0x4103
c001230f:	eb 05                	jmp    c0012316 <VAS::VAS(bool)+0x150>
c0012311:	b8 03 40 00 00       	mov    eax,0x4003
c0012316:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001231a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001231d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012323:	89 02                	mov    DWORD PTR [edx],eax
c0012325:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001232a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012330:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012336:	83 ec 08             	sub    esp,0x8
c0012339:	50                   	push   eax
c001233a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001233e:	e8 b3 fc ff ff       	call   c0011ff6 <VAS::setCPUSpecific(unsigned long)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001234a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001234d:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0012352:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012358:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001235e:	83 e0 10             	and    eax,0x10
c0012361:	84 c0                	test   al,al
c0012363:	74 07                	je     c001236c <VAS::VAS(bool)+0x1a6>
c0012365:	b8 00 01 00 00       	mov    eax,0x100
c001236a:	eb 05                	jmp    c0012371 <VAS::VAS(bool)+0x1ab>
c001236c:	b8 00 00 00 00       	mov    eax,0x0
c0012371:	09 c2                	or     edx,eax
c0012373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012377:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001237a:	05 fc 0f 00 00       	add    eax,0xffc
c001237f:	83 ca 03             	or     edx,0x3
c0012382:	89 10                	mov    DWORD PTR [eax],edx
c0012384:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0012389:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001238f:	83 ec 0c             	sub    esp,0xc
c0012392:	50                   	push   eax
c0012393:	e8 8c 1c 00 00       	call   c0014024 <Device::getName()>
c0012398:	83 c4 10             	add    esp,0x10
c001239b:	83 ec 08             	sub    esp,0x8
c001239e:	68 21 b1 02 c0       	push   0xc002b121
c00123a3:	50                   	push   eax
c00123a4:	e8 ef e4 fe ff       	call   c0000898 <strcmp>
c00123a9:	83 c4 10             	add    esp,0x10
c00123ac:	85 c0                	test   eax,eax
c00123ae:	0f 94 c0             	sete   al
c00123b1:	84 c0                	test   al,al
c00123b3:	0f 84 87 00 00 00    	je     c0012440 <VAS::VAS(bool)+0x27a>
c00123b9:	fa                   	cli    
c00123ba:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00123bf:	40                   	inc    eax
c00123c0:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00123c5:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00123ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d0:	05 7c 09 00 00       	add    eax,0x97c
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	50                   	push   eax
c00123d9:	e8 30 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123de:	83 c4 10             	add    esp,0x10
c00123e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123e6:	89 c3                	mov    ebx,eax
c00123e8:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00123ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123f3:	05 7c 09 00 00       	add    eax,0x97c
c00123f8:	83 ec 0c             	sub    esp,0xc
c00123fb:	50                   	push   eax
c00123fc:	e8 0d cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	83 ec 08             	sub    esp,0x8
c0012407:	50                   	push   eax
c0012408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001240c:	e8 75 f5 ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	8b 00                	mov    eax,DWORD PTR [eax]
c0012416:	25 00 f0 ff ff       	and    eax,0xfffff000
c001241b:	6a 11                	push   0x11
c001241d:	53                   	push   ebx
c001241e:	50                   	push   eax
c001241f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012423:	e8 f4 f8 ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0012430:	48                   	dec    eax
c0012431:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0012436:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001243b:	85 c0                	test   eax,eax
c001243d:	75 01                	jne    c0012440 <VAS::VAS(bool)+0x27a>
c001243f:	fb                   	sti    
c0012440:	90                   	nop
c0012441:	83 c4 28             	add    esp,0x28
c0012444:	5b                   	pop    ebx
c0012445:	c3                   	ret    

c0012446 <VAS::evict(unsigned long)>:
c0012446:	55                   	push   ebp
c0012447:	57                   	push   edi
c0012448:	56                   	push   esi
c0012449:	53                   	push   ebx
c001244a:	83 ec 1c             	sub    esp,0x1c
c001244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012451:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012459:	e8 c8 f1 ff ff       	call   c0011626 <Virt::allocateSwapfilePage()>
c001245e:	89 c7                	mov    edi,eax
c0012460:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c0012465:	85 c0                	test   eax,eax
c0012467:	7e 3d                	jle    c00124a6 <VAS::evict(unsigned long)+0x60>
c0012469:	89 ee                	mov    esi,ebp
c001246b:	31 db                	xor    ebx,ebx
c001246d:	83 ec 0c             	sub    esp,0xc
c0012470:	57                   	push   edi
c0012471:	e8 9e f1 ff ff       	call   c0011614 <Virt::swapIDToSector(unsigned long)>
c0012476:	89 34 24             	mov    DWORD PTR [esp],esi
c0012479:	01 d8                	add    eax,ebx
c001247b:	6a 01                	push   0x1
c001247d:	31 d2                	xor    edx,edx
c001247f:	43                   	inc    ebx
c0012480:	52                   	push   edx
c0012481:	81 c6 00 02 00 00    	add    esi,0x200
c0012487:	50                   	push   eax
c0012488:	0f be 05 d8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfd8
c001248f:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c0012496:	e8 39 3e 00 00       	call   c00162d4 <LogicalDisk::write(unsigned long long, int, void*)>
c001249b:	83 c4 20             	add    esp,0x20
c001249e:	39 1d cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,ebx
c00124a4:	7f c7                	jg     c001246d <VAS::evict(unsigned long)+0x27>
c00124a6:	83 ec 08             	sub    esp,0x8
c00124a9:	c1 e7 0b             	shl    edi,0xb
c00124ac:	55                   	push   ebp
c00124ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124b1:	e8 d0 f4 ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c00124b6:	83 c4 0c             	add    esp,0xc
c00124b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00124bb:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124c1:	09 d7                	or     edi,edx
c00124c3:	89 38                	mov    DWORD PTR [eax],edi
c00124c5:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00124ca:	40                   	inc    eax
c00124cb:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c00124d0:	0f 20 da             	mov    edx,cr3
c00124d3:	0f 22 da             	mov    cr3,edx
c00124d6:	50                   	push   eax
c00124d7:	55                   	push   ebp
c00124d8:	68 2f b1 02 c0       	push   0xc002b12f
c00124dd:	e8 09 04 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00124e2:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00124e7:	c7 44 24 40 44 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b144
c00124ef:	8d 50 01             	lea    edx,[eax+0x1]
c00124f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124f6:	89 15 84 f1 02 c0    	mov    DWORD PTR ds:0xc002f184,edx
c00124fc:	83 c4 2c             	add    esp,0x2c
c00124ff:	5b                   	pop    ebx
c0012500:	5e                   	pop    esi
c0012501:	5f                   	pop    edi
c0012502:	5d                   	pop    ebp
c0012503:	e9 e3 03 00 00       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>

c0012508 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012508:	55                   	push   ebp
c0012509:	57                   	push   edi
c001250a:	56                   	push   esi
c001250b:	53                   	push   ebx
c001250c:	83 ec 0c             	sub    esp,0xc
c001250f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012513:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012519:	0f 84 dc 00 00 00    	je     c00125fb <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001251f:	56                   	push   esi
c0012520:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012524:	e8 5d f4 ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c0012529:	5b                   	pop    ebx
c001252a:	85 c0                	test   eax,eax
c001252c:	5f                   	pop    edi
c001252d:	89 c3                	mov    ebx,eax
c001252f:	0f 84 c6 00 00 00    	je     c00125fb <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012535:	8b 38                	mov    edi,DWORD PTR [eax]
c0012537:	31 c0                	xor    eax,eax
c0012539:	89 fa                	mov    edx,edi
c001253b:	81 e2 01 04 00 00    	and    edx,0x401
c0012541:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012547:	0f 85 b0 00 00 00    	jne    c00125fd <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001254d:	e8 5b d6 ff ff       	call   c000fbad <Phys::allocatePage()>
c0012552:	c1 ef 0b             	shr    edi,0xb
c0012555:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012557:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001255d:	09 c2                	or     edx,eax
c001255f:	81 ca 01 08 00 00    	or     edx,0x801
c0012565:	89 13                	mov    DWORD PTR [ebx],edx
c0012567:	8b 0d cc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfcc
c001256d:	85 c9                	test   ecx,ecx
c001256f:	7e 3d                	jle    c00125ae <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012571:	89 f5                	mov    ebp,esi
c0012573:	31 db                	xor    ebx,ebx
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	57                   	push   edi
c0012579:	e8 96 f0 ff ff       	call   c0011614 <Virt::swapIDToSector(unsigned long)>
c001257e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012581:	01 d8                	add    eax,ebx
c0012583:	6a 01                	push   0x1
c0012585:	31 d2                	xor    edx,edx
c0012587:	43                   	inc    ebx
c0012588:	52                   	push   edx
c0012589:	81 c5 00 02 00 00    	add    ebp,0x200
c001258f:	50                   	push   eax
c0012590:	0f be 05 d8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfd8
c0012597:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c001259e:	e8 c5 3c 00 00       	call   c0016268 <LogicalDisk::read(unsigned long long, int, void*)>
c00125a3:	83 c4 20             	add    esp,0x20
c00125a6:	39 1d cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,ebx
c00125ac:	7f c7                	jg     c0012575 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00125ae:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00125b3:	48                   	dec    eax
c00125b4:	52                   	push   edx
c00125b5:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c00125ba:	50                   	push   eax
c00125bb:	56                   	push   esi
c00125bc:	68 55 b1 02 c0       	push   0xc002b155
c00125c1:	e8 25 03 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00125c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125c9:	e8 28 f0 ff ff       	call   c00115f6 <Virt::freeSwapfilePage(unsigned long)>
c00125ce:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	48                   	dec    eax
c00125d7:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00125dc:	85 c0                	test   eax,eax
c00125de:	75 01                	jne    c00125e1 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125e0:	fb                   	sti    
c00125e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125e5:	25 ff 0f 00 00       	and    eax,0xfff
c00125ea:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125ef:	77 14                	ja     c0012605 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00125f1:	0f 20 d8             	mov    eax,cr3
c00125f4:	0f 22 d8             	mov    cr3,eax
c00125f7:	b0 01                	mov    al,0x1
c00125f9:	eb 02                	jmp    c00125fd <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00125fb:	31 c0                	xor    eax,eax
c00125fd:	83 c4 0c             	add    esp,0xc
c0012600:	5b                   	pop    ebx
c0012601:	5e                   	pop    esi
c0012602:	5f                   	pop    edi
c0012603:	5d                   	pop    ebp
c0012604:	c3                   	ret    
c0012605:	83 ec 0c             	sub    esp,0xc
c0012608:	68 6a b1 02 c0       	push   0xc002b16a
c001260d:	e8 d9 02 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	eb da                	jmp    c00125f1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012617:	90                   	nop

c0012618 <VAS::scanForEviction()>:
c0012618:	57                   	push   edi
c0012619:	56                   	push   esi
c001261a:	53                   	push   ebx
c001261b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001261f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012622:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012628:	75 0e                	jne    c0012638 <VAS::scanForEviction()+0x20>
c001262a:	89 da                	mov    edx,ebx
c001262c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001262f:	c1 ea 16             	shr    edx,0x16
c0012632:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012636:	74 48                	je     c0012680 <VAS::scanForEviction()+0x68>
c0012638:	53                   	push   ebx
c0012639:	56                   	push   esi
c001263a:	e8 47 f3 ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c001263f:	5a                   	pop    edx
c0012640:	8b 38                	mov    edi,DWORD PTR [eax]
c0012642:	59                   	pop    ecx
c0012643:	89 fa                	mov    edx,edi
c0012645:	81 e2 00 0c 00 00    	and    edx,0xc00
c001264b:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012651:	74 3d                	je     c0012690 <VAS::scanForEviction()+0x78>
c0012653:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012659:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001265f:	76 2a                	jbe    c001268b <VAS::scanForEviction()+0x73>
c0012661:	31 db                	xor    ebx,ebx
c0012663:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001266a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012670:	75 c6                	jne    c0012638 <VAS::scanForEviction()+0x20>
c0012672:	89 da                	mov    edx,ebx
c0012674:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012677:	c1 ea 16             	shr    edx,0x16
c001267a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001267e:	75 b8                	jne    c0012638 <VAS::scanForEviction()+0x20>
c0012680:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012686:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012689:	eb 97                	jmp    c0012622 <VAS::scanForEviction()+0xa>
c001268b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001268e:	eb 92                	jmp    c0012622 <VAS::scanForEviction()+0xa>
c0012690:	f7 c7 01 00 00 00    	test   edi,0x1
c0012696:	74 bb                	je     c0012653 <VAS::scanForEviction()+0x3b>
c0012698:	f7 c7 20 00 00 00    	test   edi,0x20
c001269e:	74 0a                	je     c00126aa <VAS::scanForEviction()+0x92>
c00126a0:	83 e7 df             	and    edi,0xffffffdf
c00126a3:	89 38                	mov    DWORD PTR [eax],edi
c00126a5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126a8:	eb a9                	jmp    c0012653 <VAS::scanForEviction()+0x3b>
c00126aa:	83 ec 08             	sub    esp,0x8
c00126ad:	53                   	push   ebx
c00126ae:	56                   	push   esi
c00126af:	e8 92 fd ff ff       	call   c0012446 <VAS::evict(unsigned long)>
c00126b4:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00126bb:	83 c4 10             	add    esp,0x10
c00126be:	89 f8                	mov    eax,edi
c00126c0:	5b                   	pop    ebx
c00126c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126c6:	5e                   	pop    esi
c00126c7:	5f                   	pop    edi
c00126c8:	c3                   	ret    

c00126c9 <mapVASFirstTime>:
c00126c9:	55                   	push   ebp
c00126ca:	57                   	push   edi
c00126cb:	56                   	push   esi
c00126cc:	53                   	push   ebx
c00126cd:	83 ec 0c             	sub    esp,0xc
c00126d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126d8:	4a                   	dec    edx
c00126d9:	0f 84 8e 00 00 00    	je     c001276d <mapVASFirstTime+0xa4>
c00126df:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126e2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126e5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126ea:	c1 e5 15             	shl    ebp,0x15
c00126ed:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126f2:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126f8:	29 eb                	sub    ebx,ebp
c00126fa:	29 ee                	sub    esi,ebp
c00126fc:	e8 ac d4 ff ff       	call   c000fbad <Phys::allocatePage()>
c0012701:	83 ec 0c             	sub    esp,0xc
c0012704:	68 03 04 00 00       	push   0x403
c0012709:	6a 01                	push   0x1
c001270b:	53                   	push   ebx
c001270c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012712:	50                   	push   eax
c0012713:	57                   	push   edi
c0012714:	e8 f9 f8 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012719:	83 c4 20             	add    esp,0x20
c001271c:	39 f3                	cmp    ebx,esi
c001271e:	75 dc                	jne    c00126fc <mapVASFirstTime+0x33>
c0012720:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012725:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001272a:	29 ee                	sub    esi,ebp
c001272c:	29 e8                	sub    eax,ebp
c001272e:	89 c5                	mov    ebp,eax
c0012730:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012734:	19 db                	sbb    ebx,ebx
c0012736:	e8 72 d4 ff ff       	call   c000fbad <Phys::allocatePage()>
c001273b:	83 e3 04             	and    ebx,0x4
c001273e:	83 ec 0c             	sub    esp,0xc
c0012741:	81 c3 03 04 00 00    	add    ebx,0x403
c0012747:	53                   	push   ebx
c0012748:	6a 01                	push   0x1
c001274a:	56                   	push   esi
c001274b:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012751:	50                   	push   eax
c0012752:	57                   	push   edi
c0012753:	e8 ba f8 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012758:	83 c4 20             	add    esp,0x20
c001275b:	39 f5                	cmp    ebp,esi
c001275d:	75 d1                	jne    c0012730 <mapVASFirstTime+0x67>
c001275f:	0f 20 d8             	mov    eax,cr3
c0012762:	0f 22 d8             	mov    cr3,eax
c0012765:	83 c4 0c             	add    esp,0xc
c0012768:	5b                   	pop    ebx
c0012769:	5e                   	pop    esi
c001276a:	5f                   	pop    edi
c001276b:	5d                   	pop    ebp
c001276c:	c3                   	ret    
c001276d:	83 ec 0c             	sub    esp,0xc
c0012770:	68 7a b1 02 c0       	push   0xc002b17a
c0012775:	e8 71 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	83 c4 0c             	add    esp,0xc
c0012780:	5b                   	pop    ebx
c0012781:	5e                   	pop    esi
c0012782:	5f                   	pop    edi
c0012783:	5d                   	pop    ebp
c0012784:	c3                   	ret    

c0012785 <__cxa_atexit>:
c0012785:	31 c0                	xor    eax,eax
c0012787:	c3                   	ret    

c0012788 <__cxa_finalize>:
c0012788:	c3                   	ret    

c0012789 <__stack_chk_fail>:
c0012789:	55                   	push   ebp
c001278a:	89 e5                	mov    ebp,esp
c001278c:	83 ec 14             	sub    esp,0x14
c001278f:	68 93 b1 02 c0       	push   0xc002b193
c0012794:	e8 52 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0012799:	58                   	pop    eax
c001279a:	5a                   	pop    edx
c001279b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001279e:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127a3:	e8 43 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127a8:	59                   	pop    ecx
c00127a9:	58                   	pop    eax
c00127aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b0:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127b5:	e8 31 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127ba:	5a                   	pop    edx
c00127bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127be:	59                   	pop    ecx
c00127bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c4:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127c9:	e8 1d 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127ce:	5a                   	pop    edx
c00127cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127d2:	59                   	pop    ecx
c00127d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127da:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127df:	e8 07 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127e4:	c7 04 24 eb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1eb
c00127eb:	e8 31 7b 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00127f0:	83 c4 10             	add    esp,0x10
c00127f3:	c9                   	leave  
c00127f4:	c3                   	ret    

c00127f5 <__cxa_pure_virtual>:
c00127f5:	83 ec 18             	sub    esp,0x18
c00127f8:	68 03 b2 02 c0       	push   0xc002b203
c00127fd:	e8 1f 7b 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0012802:	83 c4 1c             	add    esp,0x1c
c0012805:	c3                   	ret    

c0012806 <operator new[](unsigned long)>:
c0012806:	e9 81 d0 ff ff       	jmp    c000f88c <malloc>

c001280b <operator delete(void*, unsigned long)>:
c001280b:	e9 9c d0 ff ff       	jmp    c000f8ac <rfree>

c0012810 <operator delete[](void*)>:
c0012810:	e9 97 d0 ff ff       	jmp    c000f8ac <rfree>

c0012815 <operator delete[](void*, unsigned long)>:
c0012815:	e9 92 d0 ff ff       	jmp    c000f8ac <rfree>

c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001281a:	57                   	push   edi
c001281b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012820:	56                   	push   esi
c0012821:	be 18 b2 02 c0       	mov    esi,0xc002b218
c0012826:	53                   	push   ebx
c0012827:	83 ec 40             	sub    esp,0x40
c001282a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001282e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012832:	fc                   	cld    
c0012833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012835:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012839:	83 f9 3e             	cmp    ecx,0x3e
c001283c:	7e 05                	jle    c0012843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001283e:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012843:	89 df                	mov    edi,ebx
c0012845:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012849:	eb 02                	jmp    c001284d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001284b:	89 c7                	mov    edi,eax
c001284d:	31 d2                	xor    edx,edx
c001284f:	46                   	inc    esi
c0012850:	89 f8                	mov    eax,edi
c0012852:	f7 f1                	div    ecx
c0012854:	39 cf                	cmp    edi,ecx
c0012856:	73 f3                	jae    c001284b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012858:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001285b:	eb 02                	jmp    c001285f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001285d:	89 c3                	mov    ebx,eax
c001285f:	31 d2                	xor    edx,edx
c0012861:	4e                   	dec    esi
c0012862:	89 d8                	mov    eax,ebx
c0012864:	f7 f1                	div    ecx
c0012866:	39 cb                	cmp    ebx,ecx
c0012868:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001286c:	88 16                	mov    BYTE PTR [esi],dl
c001286e:	73 ed                	jae    c001285d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012870:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012874:	83 c4 40             	add    esp,0x40
c0012877:	5b                   	pop    ebx
c0012878:	5e                   	pop    esi
c0012879:	5f                   	pop    edi
c001287a:	c3                   	ret    

c001287b <Dbg::logc(char)>:
c001287b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001287f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012884:	ec                   	in     al,dx
c0012885:	a8 20                	test   al,0x20
c0012887:	74 fb                	je     c0012884 <Dbg::logc(char)+0x9>
c0012889:	ba f8 03 00 00       	mov    edx,0x3f8
c001288e:	88 c8                	mov    al,cl
c0012890:	ee                   	out    dx,al
c0012891:	c3                   	ret    

c0012892 <Dbg::logs(char*)>:
c0012892:	53                   	push   ebx
c0012893:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012897:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001289a:	84 c0                	test   al,al
c001289c:	74 0f                	je     c00128ad <Dbg::logs(char*)+0x1b>
c001289e:	50                   	push   eax
c001289f:	43                   	inc    ebx
c00128a0:	e8 d6 ff ff ff       	call   c001287b <Dbg::logc(char)>
c00128a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a8:	5a                   	pop    edx
c00128a9:	84 c0                	test   al,al
c00128ab:	75 f1                	jne    c001289e <Dbg::logs(char*)+0xc>
c00128ad:	5b                   	pop    ebx
c00128ae:	c3                   	ret    

c00128af <Dbg::logWriteInt(unsigned int)>:
c00128af:	83 ec 10             	sub    esp,0x10
c00128b2:	6a 0a                	push   0xa
c00128b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128b8:	50                   	push   eax
c00128b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128bd:	e8 58 ff ff ff       	call   c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128c2:	50                   	push   eax
c00128c3:	e8 ca ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c00128c8:	83 c4 20             	add    esp,0x20
c00128cb:	c3                   	ret    

c00128cc <Dbg::logWriteIntBase(unsigned int, int)>:
c00128cc:	83 ec 10             	sub    esp,0x10
c00128cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128d7:	50                   	push   eax
c00128d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128dc:	e8 39 ff ff ff       	call   c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e1:	50                   	push   eax
c00128e2:	e8 ab ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c00128e7:	83 c4 20             	add    esp,0x20
c00128ea:	c3                   	ret    

c00128eb <Dbg::kprintf(char const*, ...)>:
c00128eb:	55                   	push   ebp
c00128ec:	57                   	push   edi
c00128ed:	56                   	push   esi
c00128ee:	53                   	push   ebx
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012901:	84 c0                	test   al,al
c0012903:	74 4a                	je     c001294f <Dbg::kprintf(char const*, ...)+0x64>
c0012905:	31 db                	xor    ebx,ebx
c0012907:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001290a:	3c 25                	cmp    al,0x25
c001290c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001290f:	0f 85 e4 00 00 00    	jne    c00129f9 <Dbg::kprintf(char const*, ...)+0x10e>
c0012915:	83 c3 02             	add    ebx,0x2
c0012918:	8a 07                	mov    al,BYTE PTR [edi]
c001291a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001291d:	83 e8 25             	sub    eax,0x25
c0012920:	3c 53                	cmp    al,0x53
c0012922:	0f 87 ba 00 00 00    	ja     c00129e2 <Dbg::kprintf(char const*, ...)+0xf7>
c0012928:	0f b6 c0             	movzx  eax,al
c001292b:	ff 24 85 58 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4da8]
c0012932:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012936:	89 c8                	mov    eax,ecx
c0012938:	83 c1 04             	add    ecx,0x4
c001293b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001293f:	ff 30                	push   DWORD PTR [eax]
c0012941:	e8 4c ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c0012946:	58                   	pop    eax
c0012947:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001294b:	84 c0                	test   al,al
c001294d:	75 b8                	jne    c0012907 <Dbg::kprintf(char const*, ...)+0x1c>
c001294f:	83 c4 0c             	add    esp,0xc
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	5d                   	pop    ebp
c0012956:	c3                   	ret    
c0012957:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001295b:	89 d0                	mov    eax,edx
c001295d:	83 c2 04             	add    edx,0x4
c0012960:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012964:	ff 30                	push   DWORD PTR [eax]
c0012966:	e8 44 ff ff ff       	call   c00128af <Dbg::logWriteInt(unsigned int)>
c001296b:	58                   	pop    eax
c001296c:	eb d9                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c001296e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012972:	89 d0                	mov    eax,edx
c0012974:	83 c2 04             	add    edx,0x4
c0012977:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001297a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001297e:	50                   	push   eax
c001297f:	e8 f7 fe ff ff       	call   c001287b <Dbg::logc(char)>
c0012984:	58                   	pop    eax
c0012985:	eb c0                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c0012987:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001298b:	89 c8                	mov    eax,ecx
c001298d:	83 c1 04             	add    ecx,0x4
c0012990:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012994:	ff 30                	push   DWORD PTR [eax]
c0012996:	e8 14 ff ff ff       	call   c00128af <Dbg::logWriteInt(unsigned int)>
c001299b:	5f                   	pop    edi
c001299c:	eb a9                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c001299e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129a2:	89 c8                	mov    eax,ecx
c00129a4:	83 c1 04             	add    ecx,0x4
c00129a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129ab:	6a 10                	push   0x10
c00129ad:	ff 30                	push   DWORD PTR [eax]
c00129af:	e8 18 ff ff ff       	call   c00128cc <Dbg::logWriteIntBase(unsigned int, int)>
c00129b4:	59                   	pop    ecx
c00129b5:	5f                   	pop    edi
c00129b6:	eb 8f                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129bc:	89 d0                	mov    eax,edx
c00129be:	83 c2 08             	add    edx,0x8
c00129c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129c5:	6a 10                	push   0x10
c00129c7:	ff 30                	push   DWORD PTR [eax]
c00129c9:	e8 fe fe ff ff       	call   c00128cc <Dbg::logWriteIntBase(unsigned int, int)>
c00129ce:	58                   	pop    eax
c00129cf:	5a                   	pop    edx
c00129d0:	e9 72 ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129d5:	6a 25                	push   0x25
c00129d7:	e8 9f fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129dc:	58                   	pop    eax
c00129dd:	e9 65 ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e2:	6a 25                	push   0x25
c00129e4:	e8 92 fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129e9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129ec:	50                   	push   eax
c00129ed:	e8 89 fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129f2:	5a                   	pop    edx
c00129f3:	59                   	pop    ecx
c00129f4:	e9 4e ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f9:	50                   	push   eax
c00129fa:	89 eb                	mov    ebx,ebp
c00129fc:	e8 7a fe ff ff       	call   c001287b <Dbg::logc(char)>
c0012a01:	89 fd                	mov    ebp,edi
c0012a03:	58                   	pop    eax
c0012a04:	e9 3e ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a09:	90                   	nop

c0012a0a <File::read(unsigned long long, void*, int*)>:
c0012a0a:	53                   	push   ebx
c0012a0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a1a:	3c 19                	cmp    al,0x19
c0012a1c:	77 35                	ja     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a1e:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012a25:	85 c0                	test   eax,eax
c0012a27:	74 2a                	je     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a2f:	85 c0                	test   eax,eax
c0012a31:	74 20                	je     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a37:	74 21                	je     c0012a5a <File::read(unsigned long long, void*, int*)+0x50>
c0012a39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a4d:	5b                   	pop    ebx
c0012a4e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a51:	ff e0                	jmp    eax
c0012a53:	b8 0b 00 00 00       	mov    eax,0xb
c0012a58:	eb 05                	jmp    c0012a5f <File::read(unsigned long long, void*, int*)+0x55>
c0012a5a:	b8 05 00 00 00       	mov    eax,0x5
c0012a5f:	5b                   	pop    ebx
c0012a60:	c3                   	ret    
c0012a61:	90                   	nop

c0012a62 <File::write(unsigned long long, void*, int*)>:
c0012a62:	53                   	push   ebx
c0012a63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a72:	3c 19                	cmp    al,0x19
c0012a74:	77 35                	ja     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a76:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012a7d:	85 c0                	test   eax,eax
c0012a7f:	74 2a                	je     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a87:	85 c0                	test   eax,eax
c0012a89:	74 20                	je     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a8f:	74 21                	je     c0012ab2 <File::write(unsigned long long, void*, int*)+0x50>
c0012a91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aa5:	5b                   	pop    ebx
c0012aa6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012aa9:	ff e0                	jmp    eax
c0012aab:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab0:	eb 05                	jmp    c0012ab7 <File::write(unsigned long long, void*, int*)+0x55>
c0012ab2:	b8 05 00 00 00       	mov    eax,0x5
c0012ab7:	5b                   	pop    ebx
c0012ab8:	c3                   	ret    
c0012ab9:	90                   	nop

c0012aba <Directory::read(unsigned long long, void*, int*)>:
c0012aba:	53                   	push   ebx
c0012abb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ac3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012aca:	3c 19                	cmp    al,0x19
c0012acc:	77 35                	ja     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ace:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	74 2a                	je     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012adf:	85 c0                	test   eax,eax
c0012ae1:	74 20                	je     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ae7:	74 21                	je     c0012b0a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ae9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012aeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012af5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012af9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012afd:	5b                   	pop    ebx
c0012afe:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b01:	ff e0                	jmp    eax
c0012b03:	b8 0b 00 00 00       	mov    eax,0xb
c0012b08:	eb 05                	jmp    c0012b0f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b0a:	b8 05 00 00 00       	mov    eax,0x5
c0012b0f:	5b                   	pop    ebx
c0012b10:	c3                   	ret    
c0012b11:	90                   	nop

c0012b12 <Directory::write(unsigned long long, void*, int*)>:
c0012b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b16:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b22:	80 fa 19             	cmp    dl,0x19
c0012b25:	77 18                	ja     c0012b3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b27:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012b2e:	85 d2                	test   edx,edx
c0012b30:	74 0d                	je     c0012b3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b32:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b39:	19 c0                	sbb    eax,eax
c0012b3b:	83 e0 0a             	and    eax,0xa
c0012b3e:	40                   	inc    eax
c0012b3f:	c3                   	ret    

c0012b40 <File::isAtty()>:
c0012b40:	31 c0                	xor    eax,eax
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <Directory::isAtty()>:
c0012b44:	31 c0                	xor    eax,eax
c0012b46:	c3                   	ret    
c0012b47:	90                   	nop

c0012b48 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b48:	b8 0a 00 00 00       	mov    eax,0xa
c0012b4d:	c3                   	ret    

c0012b4e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b4e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b53:	c3                   	ret    

c0012b54 <Filesystem::getFileFirstSector(char const*)>:
c0012b54:	31 c0                	xor    eax,eax
c0012b56:	31 d2                	xor    edx,edx
c0012b58:	c3                   	ret    
c0012b59:	90                   	nop

c0012b5a <File::~File()>:
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c0012b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b66:	89 10                	mov    DWORD PTR [eax],edx
c0012b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	50                   	push   eax
c0012b70:	e8 0f e7 ff ff       	call   c0011284 <UnixFile::~UnixFile()>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	90                   	nop
c0012b79:	83 c4 0c             	add    esp,0xc
c0012b7c:	c3                   	ret    
c0012b7d:	90                   	nop

c0012b7e <File::~File()>:
c0012b7e:	83 ec 0c             	sub    esp,0xc
c0012b81:	83 ec 0c             	sub    esp,0xc
c0012b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b88:	e8 cd ff ff ff       	call   c0012b5a <File::~File()>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	83 ec 08             	sub    esp,0x8
c0012b93:	68 14 01 00 00       	push   0x114
c0012b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9c:	e8 6a fc ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 c4 0c             	add    esp,0xc
c0012ba7:	c3                   	ret    

c0012ba8 <Directory::~Directory()>:
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0012bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb4:	89 10                	mov    DWORD PTR [eax],edx
c0012bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	50                   	push   eax
c0012bbe:	e8 c1 e6 ff ff       	call   c0011284 <UnixFile::~UnixFile()>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	90                   	nop
c0012bc7:	83 c4 0c             	add    esp,0xc
c0012bca:	c3                   	ret    
c0012bcb:	90                   	nop

c0012bcc <Directory::~Directory()>:
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	83 ec 0c             	sub    esp,0xc
c0012bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd6:	e8 cd ff ff ff       	call   c0012ba8 <Directory::~Directory()>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	83 ec 08             	sub    esp,0x8
c0012be1:	68 14 01 00 00       	push   0x114
c0012be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bea:	e8 1c fc ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	83 c4 0c             	add    esp,0xc
c0012bf5:	c3                   	ret    

c0012bf6 <Filesystem::Filesystem()>:
c0012bf6:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0012bfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bff:	89 10                	mov    DWORD PTR [eax],edx
c0012c01:	8b 15 94 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f194
c0012c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c12:	a3 94 f1 02 c0       	mov    ds:0xc002f194,eax
c0012c17:	90                   	nop
c0012c18:	c3                   	ret    
c0012c19:	90                   	nop

c0012c1a <Filesystem::~Filesystem()>:
c0012c1a:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0012c1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c23:	89 10                	mov    DWORD PTR [eax],edx
c0012c25:	90                   	nop
c0012c26:	c3                   	ret    
c0012c27:	90                   	nop

c0012c28 <Filesystem::~Filesystem()>:
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c2f:	e8 e6 ff ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c0012c34:	83 c4 04             	add    esp,0x4
c0012c37:	83 ec 08             	sub    esp,0x8
c0012c3a:	6a 08                	push   0x8
c0012c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c40:	e8 c6 fb ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	83 c4 0c             	add    esp,0xc
c0012c4b:	c3                   	ret    

c0012c4c <Fs::getcwd(Process*, char*, int)>:
c0012c4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c50:	31 c0                	xor    eax,eax
c0012c52:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c59:	7d 15                	jge    c0012c70 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c5f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c66:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c69:	84 c9                	test   cl,cl
c0012c6b:	74 06                	je     c0012c73 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c6d:	40                   	inc    eax
c0012c6e:	eb e2                	jmp    c0012c52 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c70:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c73:	31 c0                	xor    eax,eax
c0012c75:	c3                   	ret    

c0012c76 <Fs::initVFS()>:
c0012c76:	83 ec 18             	sub    esp,0x18
c0012c79:	6a 08                	push   0x8
c0012c7b:	e8 0c cc ff ff       	call   c000f88c <malloc>
c0012c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c83:	e8 08 e5 00 00       	call   c0021190 <FAT::FAT()>
c0012c88:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c8f:	e8 f8 cb ff ff       	call   c000f88c <malloc>
c0012c94:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c97:	e8 30 f7 00 00       	call   c00223cc <ISO9660::ISO9660()>
c0012c9c:	83 c4 1c             	add    esp,0x1c
c0012c9f:	c3                   	ret    

c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ca0:	55                   	push   ebp
c0012ca1:	57                   	push   edi
c0012ca2:	56                   	push   esi
c0012ca3:	53                   	push   ebx
c0012ca4:	81 ec 10 04 00 00    	sub    esp,0x410
c0012caa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cb1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cb8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cbf:	68 00 04 00 00       	push   0x400
c0012cc4:	6a 00                	push   0x0
c0012cc6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cca:	56                   	push   esi
c0012ccb:	e8 80 da fe ff       	call   c0000750 <memset>
c0012cd0:	83 c4 10             	add    esp,0x10
c0012cd3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd7:	75 0b                	jne    c0012ce4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cd9:	50                   	push   eax
c0012cda:	50                   	push   eax
c0012cdb:	57                   	push   edi
c0012cdc:	56                   	push   esi
c0012cdd:	e8 2a db fe ff       	call   c000080c <strcpy>
c0012ce2:	eb 41                	jmp    c0012d25 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ce4:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce6:	3c 5c                	cmp    al,0x5c
c0012ce8:	74 04                	je     c0012cee <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cea:	3c 2f                	cmp    al,0x2f
c0012cec:	75 18                	jne    c0012d06 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cee:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cf1:	3c 60                	cmp    al,0x60
c0012cf3:	7e 03                	jle    c0012cf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cf5:	83 e8 20             	sub    eax,0x20
c0012cf8:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d02:	50                   	push   eax
c0012d03:	50                   	push   eax
c0012d04:	eb 18                	jmp    c0012d1e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d06:	50                   	push   eax
c0012d07:	50                   	push   eax
c0012d08:	55                   	push   ebp
c0012d09:	56                   	push   esi
c0012d0a:	e8 fd da fe ff       	call   c000080c <strcpy>
c0012d0f:	5a                   	pop    edx
c0012d10:	59                   	pop    ecx
c0012d11:	68 8d cb 02 c0       	push   0xc002cb8d
c0012d16:	56                   	push   esi
c0012d17:	e8 30 dc fe ff       	call   c000094c <strcat>
c0012d1c:	5d                   	pop    ebp
c0012d1d:	58                   	pop    eax
c0012d1e:	57                   	push   edi
c0012d1f:	56                   	push   esi
c0012d20:	e8 27 dc fe ff       	call   c000094c <strcat>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d2b:	3c 60                	cmp    al,0x60
c0012d2d:	7e 03                	jle    c0012d32 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d2f:	83 e8 20             	sub    eax,0x20
c0012d32:	88 04 24             	mov    BYTE PTR [esp],al
c0012d35:	88 03                	mov    BYTE PTR [ebx],al
c0012d37:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d3e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d44:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d48:	bf 03 00 00 00       	mov    edi,0x3
c0012d4d:	b8 03 00 00 00       	mov    eax,0x3
c0012d52:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d55:	84 d2                	test   dl,dl
c0012d57:	0f 84 91 00 00 00    	je     c0012dee <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d5d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d60:	80 fa 5c             	cmp    dl,0x5c
c0012d63:	74 05                	je     c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d65:	80 fa 2f             	cmp    dl,0x2f
c0012d68:	75 12                	jne    c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6a:	89 c5                	mov    ebp,eax
c0012d6c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d71:	74 09                	je     c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d73:	40                   	inc    eax
c0012d74:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d78:	89 cf                	mov    edi,ecx
c0012d7a:	eb d6                	jmp    c0012d52 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d7c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d81:	75 5b                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d83:	80 fa 2e             	cmp    dl,0x2e
c0012d86:	75 56                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d88:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d8c:	74 19                	je     c0012da7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d8e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d93:	74 53                	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d95:	89 f9                	mov    ecx,edi
c0012d97:	41                   	inc    ecx
c0012d98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9b:	80 fa 2f             	cmp    dl,0x2f
c0012d9e:	74 f7                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da0:	80 fa 5c             	cmp    dl,0x5c
c0012da3:	74 f2                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da5:	eb d1                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dac:	74 3a                	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012dae:	83 f8 03             	cmp    eax,0x3
c0012db1:	74 c5                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db3:	41                   	inc    ecx
c0012db4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db7:	80 fa 2f             	cmp    dl,0x2f
c0012dba:	74 f7                	je     c0012db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbc:	80 fa 5c             	cmp    dl,0x5c
c0012dbf:	74 f2                	je     c0012db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc1:	48                   	dec    eax
c0012dc2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc6:	75 06                	jne    c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dc8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dcc:	eb f3                	jmp    c0012dc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd2:	74 07                	je     c0012ddb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dd4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd8:	48                   	dec    eax
c0012dd9:	eb f3                	jmp    c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ddb:	40                   	inc    eax
c0012ddc:	eb 9a                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dde:	80 fa 2f             	cmp    dl,0x2f
c0012de1:	74 95                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de3:	80 fa 5c             	cmp    dl,0x5c
c0012de6:	74 90                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012deb:	40                   	inc    eax
c0012dec:	eb 8a                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	53                   	push   ebx
c0012df6:	e8 71 d9 fe ff       	call   c000076c <strlen>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e03:	75 26                	jne    c0012e2b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e05:	83 ec 0c             	sub    esp,0xc
c0012e08:	53                   	push   ebx
c0012e09:	e8 5e d9 fe ff       	call   c000076c <strlen>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e16:	74 26                	je     c0012e3e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	53                   	push   ebx
c0012e1c:	e8 4b d9 fe ff       	call   c000076c <strlen>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e29:	eb c7                	jmp    c0012df2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e2b:	83 ec 0c             	sub    esp,0xc
c0012e2e:	53                   	push   ebx
c0012e2f:	e8 38 d9 fe ff       	call   c000076c <strlen>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3c:	74 c7                	je     c0012e05 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e3e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e44:	5b                   	pop    ebx
c0012e45:	5e                   	pop    esi
c0012e46:	5f                   	pop    edi
c0012e47:	5d                   	pop    ebp
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <File::File(char const*, Process*)>:
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e51:	83 ec 08             	sub    esp,0x8
c0012e54:	6a 00                	push   0x0
c0012e56:	50                   	push   eax
c0012e57:	e8 46 e2 ff ff       	call   c00110a2 <UnixFile::UnixFile(int)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c0012e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e68:	89 10                	mov    DWORD PTR [eax],edx
c0012e6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	83 c0 0d             	add    eax,0xd
c0012e7b:	83 ec 04             	sub    esp,0x4
c0012e7e:	52                   	push   edx
c0012e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e83:	50                   	push   eax
c0012e84:	e8 17 fe ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e90:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e93:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ea8:	90                   	nop
c0012ea9:	83 c4 0c             	add    esp,0xc
c0012eac:	c3                   	ret    
c0012ead:	90                   	nop

c0012eae <File::open(FileOpenMode)>:
c0012eae:	53                   	push   ebx
c0012eaf:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb4:	83 ec 08             	sub    esp,0x8
c0012eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ebb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ec2:	80 fa 19             	cmp    dl,0x19
c0012ec5:	77 40                	ja     c0012f07 <File::open(FileOpenMode)+0x59>
c0012ec7:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012ece:	85 d2                	test   edx,edx
c0012ed0:	74 35                	je     c0012f07 <File::open(FileOpenMode)+0x59>
c0012ed2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ed8:	85 d2                	test   edx,edx
c0012eda:	74 2b                	je     c0012f07 <File::open(FileOpenMode)+0x59>
c0012edc:	b8 06 00 00 00       	mov    eax,0x6
c0012ee1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ee5:	75 20                	jne    c0012f07 <File::open(FileOpenMode)+0x59>
c0012ee7:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ee9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012eef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ef3:	51                   	push   ecx
c0012ef4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef7:	51                   	push   ecx
c0012ef8:	52                   	push   edx
c0012ef9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	85 c0                	test   eax,eax
c0012f01:	75 04                	jne    c0012f07 <File::open(FileOpenMode)+0x59>
c0012f03:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f07:	83 c4 08             	add    esp,0x8
c0012f0a:	5b                   	pop    ebx
c0012f0b:	c3                   	ret    

c0012f0c <File::close()>:
c0012f0c:	53                   	push   ebx
c0012f0d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f19:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f20:	80 fa 19             	cmp    dl,0x19
c0012f23:	77 41                	ja     c0012f66 <File::close()+0x5a>
c0012f25:	8b 1c 95 20 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd09e0]
c0012f2c:	85 db                	test   ebx,ebx
c0012f2e:	74 36                	je     c0012f66 <File::close()+0x5a>
c0012f30:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f37:	74 2d                	je     c0012f66 <File::close()+0x5a>
c0012f39:	b8 05 00 00 00       	mov    eax,0x5
c0012f3e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f42:	74 22                	je     c0012f66 <File::close()+0x5a>
c0012f44:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f48:	8b 04 95 20 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd09e0]
c0012f4f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f55:	53                   	push   ebx
c0012f56:	53                   	push   ebx
c0012f57:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f59:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f5f:	50                   	push   eax
c0012f60:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f63:	83 c4 10             	add    esp,0x10
c0012f66:	83 c4 08             	add    esp,0x8
c0012f69:	5b                   	pop    ebx
c0012f6a:	c3                   	ret    
c0012f6b:	90                   	nop

c0012f6c <File::seek(unsigned long long)>:
c0012f6c:	56                   	push   esi
c0012f6d:	53                   	push   ebx
c0012f6e:	b8 0b 00 00 00       	mov    eax,0xb
c0012f73:	51                   	push   ecx
c0012f74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f7c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f87:	80 fa 19             	cmp    dl,0x19
c0012f8a:	77 31                	ja     c0012fbd <File::seek(unsigned long long)+0x51>
c0012f8c:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012f93:	85 d2                	test   edx,edx
c0012f95:	74 26                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012f97:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f9d:	85 d2                	test   edx,edx
c0012f9f:	74 1c                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012fa1:	b8 05 00 00 00       	mov    eax,0x5
c0012fa6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012faa:	74 11                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012fac:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fae:	53                   	push   ebx
c0012faf:	51                   	push   ecx
c0012fb0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb6:	52                   	push   edx
c0012fb7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	5a                   	pop    edx
c0012fbe:	5b                   	pop    ebx
c0012fbf:	5e                   	pop    esi
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <File::tell(unsigned long long*)>:
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fce:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fd5:	80 fa 19             	cmp    dl,0x19
c0012fd8:	77 34                	ja     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fda:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012fe1:	85 d2                	test   edx,edx
c0012fe3:	74 29                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fe5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012feb:	85 d2                	test   edx,edx
c0012fed:	74 1f                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fef:	b8 05 00 00 00       	mov    eax,0x5
c0012ff4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ff8:	74 14                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012ffa:	50                   	push   eax
c0012ffb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013001:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013007:	52                   	push   edx
c0013008:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001300b:	83 c4 10             	add    esp,0x10
c001300e:	83 c4 0c             	add    esp,0xc
c0013011:	c3                   	ret    

c0013012 <File::rewind()>:
c0013012:	83 ec 10             	sub    esp,0x10
c0013015:	6a 00                	push   0x0
c0013017:	6a 00                	push   0x0
c0013019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301d:	e8 4a ff ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c0013022:	83 c4 1c             	add    esp,0x1c
c0013025:	c3                   	ret    

c0013026 <File::unlink()>:
c0013026:	83 ec 0c             	sub    esp,0xc
c0013029:	b8 0b 00 00 00       	mov    eax,0xb
c001302e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013032:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013039:	80 f9 19             	cmp    cl,0x19
c001303c:	77 2f                	ja     c001306d <File::unlink()+0x47>
c001303e:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013045:	85 c9                	test   ecx,ecx
c0013047:	74 24                	je     c001306d <File::unlink()+0x47>
c0013049:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001304f:	85 c9                	test   ecx,ecx
c0013051:	74 1a                	je     c001306d <File::unlink()+0x47>
c0013053:	b8 06 00 00 00       	mov    eax,0x6
c0013058:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305c:	75 0f                	jne    c001306d <File::unlink()+0x47>
c001305e:	83 c2 0d             	add    edx,0xd
c0013061:	50                   	push   eax
c0013062:	50                   	push   eax
c0013063:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013065:	52                   	push   edx
c0013066:	51                   	push   ecx
c0013067:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	83 c4 0c             	add    esp,0xc
c0013070:	c3                   	ret    
c0013071:	90                   	nop

c0013072 <File::rename(char const*)>:
c0013072:	83 ec 0c             	sub    esp,0xc
c0013075:	b8 0b 00 00 00       	mov    eax,0xb
c001307a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001307e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013085:	80 f9 19             	cmp    cl,0x19
c0013088:	77 32                	ja     c00130bc <File::rename(char const*)+0x4a>
c001308a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013091:	85 c9                	test   ecx,ecx
c0013093:	74 27                	je     c00130bc <File::rename(char const*)+0x4a>
c0013095:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309b:	85 c9                	test   ecx,ecx
c001309d:	74 1d                	je     c00130bc <File::rename(char const*)+0x4a>
c001309f:	b8 06 00 00 00       	mov    eax,0x6
c00130a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a8:	75 12                	jne    c00130bc <File::rename(char const*)+0x4a>
c00130aa:	83 c2 0d             	add    edx,0xd
c00130ad:	50                   	push   eax
c00130ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130b4:	52                   	push   edx
c00130b5:	51                   	push   ecx
c00130b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	83 c4 0c             	add    esp,0xc
c00130bf:	c3                   	ret    

c00130c0 <File::chfatattr(unsigned char, unsigned char)>:
c00130c0:	57                   	push   edi
c00130c1:	b8 0b 00 00 00       	mov    eax,0xb
c00130c6:	56                   	push   esi
c00130c7:	53                   	push   ebx
c00130c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130db:	80 f9 19             	cmp    cl,0x19
c00130de:	77 37                	ja     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e0:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c00130e7:	85 c9                	test   ecx,ecx
c00130e9:	74 2c                	je     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f1:	85 c9                	test   ecx,ecx
c00130f3:	74 22                	je     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f5:	b8 06 00 00 00       	mov    eax,0x6
c00130fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130fe:	75 17                	jne    c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013100:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013102:	89 f0                	mov    eax,esi
c0013104:	83 c2 0d             	add    edx,0xd
c0013107:	0f b6 f0             	movzx  esi,al
c001310a:	0f b6 db             	movzx  ebx,bl
c001310d:	56                   	push   esi
c001310e:	53                   	push   ebx
c001310f:	52                   	push   edx
c0013110:	51                   	push   ecx
c0013111:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	5b                   	pop    ebx
c0013118:	5e                   	pop    esi
c0013119:	5f                   	pop    edi
c001311a:	c3                   	ret    
c001311b:	90                   	nop

c001311c <File::exists()>:
c001311c:	83 ec 0c             	sub    esp,0xc
c001311f:	31 c0                	xor    eax,eax
c0013121:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013125:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001312c:	80 f9 19             	cmp    cl,0x19
c001312f:	77 24                	ja     c0013155 <File::exists()+0x39>
c0013131:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013138:	85 c9                	test   ecx,ecx
c001313a:	74 19                	je     c0013155 <File::exists()+0x39>
c001313c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013142:	85 c9                	test   ecx,ecx
c0013144:	74 0f                	je     c0013155 <File::exists()+0x39>
c0013146:	83 c2 0d             	add    edx,0xd
c0013149:	50                   	push   eax
c001314a:	50                   	push   eax
c001314b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001314d:	52                   	push   edx
c001314e:	51                   	push   ecx
c001314f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	83 c4 0c             	add    esp,0xc
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <File::stat(unsigned long long*, bool*)>:
c001315a:	56                   	push   esi
c001315b:	53                   	push   ebx
c001315c:	50                   	push   eax
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013166:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001316a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013171:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013175:	80 f9 19             	cmp    cl,0x19
c0013178:	77 3d                	ja     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c001317a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013181:	85 c9                	test   ecx,ecx
c0013183:	74 32                	je     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c0013185:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318b:	85 c9                	test   ecx,ecx
c001318d:	74 28                	je     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c001318f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013191:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013195:	74 13                	je     c00131aa <File::stat(unsigned long long*, bool*)+0x50>
c0013197:	83 ec 04             	sub    esp,0x4
c001319a:	56                   	push   esi
c001319b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131a1:	51                   	push   ecx
c00131a2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131a8:	eb 0a                	jmp    c00131b4 <File::stat(unsigned long long*, bool*)+0x5a>
c00131aa:	53                   	push   ebx
c00131ab:	83 c2 0d             	add    edx,0xd
c00131ae:	56                   	push   esi
c00131af:	52                   	push   edx
c00131b0:	51                   	push   ecx
c00131b1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131b4:	83 c4 10             	add    esp,0x10
c00131b7:	5a                   	pop    edx
c00131b8:	5b                   	pop    ebx
c00131b9:	5e                   	pop    esi
c00131ba:	c3                   	ret    

c00131bb <Fs::setcwd(Process*, char*)>:
c00131bb:	55                   	push   ebp
c00131bc:	57                   	push   edi
c00131bd:	56                   	push   esi
c00131be:	53                   	push   ebx
c00131bf:	81 ec 20 02 00 00    	sub    esp,0x220
c00131c5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131cc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131d2:	57                   	push   edi
c00131d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131da:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131de:	56                   	push   esi
c00131df:	e8 bc fa ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e7:	e8 80 d5 fe ff       	call   c000076c <strlen>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	83 f8 02             	cmp    eax,0x2
c00131f2:	77 17                	ja     c001320b <Fs::setcwd(Process*, char*)+0x50>
c00131f4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131f9:	83 e8 41             	sub    eax,0x41
c00131fc:	83 f8 19             	cmp    eax,0x19
c00131ff:	76 24                	jbe    c0013225 <Fs::setcwd(Process*, char*)+0x6a>
c0013201:	b8 03 00 00 00       	mov    eax,0x3
c0013206:	e9 e0 00 00 00       	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c001320b:	83 ec 0c             	sub    esp,0xc
c001320e:	56                   	push   esi
c001320f:	e8 58 d5 fe ff       	call   c000076c <strlen>
c0013214:	83 c4 10             	add    esp,0x10
c0013217:	83 f8 03             	cmp    eax,0x3
c001321a:	75 34                	jne    c0013250 <Fs::setcwd(Process*, char*)+0x95>
c001321c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013221:	75 2d                	jne    c0013250 <Fs::setcwd(Process*, char*)+0x95>
c0013223:	eb cf                	jmp    c00131f4 <Fs::setcwd(Process*, char*)+0x39>
c0013225:	8b 14 85 20 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd09e0]
c001322c:	b8 05 00 00 00       	mov    eax,0x5
c0013231:	85 d2                	test   edx,edx
c0013233:	0f 84 b2 00 00 00    	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013239:	b8 06 00 00 00       	mov    eax,0x6
c001323e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013245:	0f 85 92 00 00 00    	jne    c00132dd <Fs::setcwd(Process*, char*)+0x122>
c001324b:	e9 9b 00 00 00       	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	68 14 01 00 00       	push   0x114
c0013258:	e8 2f c6 ff ff       	call   c000f88c <malloc>
c001325d:	83 c4 0c             	add    esp,0xc
c0013260:	89 c3                	mov    ebx,eax
c0013262:	55                   	push   ebp
c0013263:	56                   	push   esi
c0013264:	50                   	push   eax
c0013265:	e8 e0 fb ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001326a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001326f:	83 c4 0c             	add    esp,0xc
c0013272:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013276:	50                   	push   eax
c0013277:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327b:	50                   	push   eax
c001327c:	53                   	push   ebx
c001327d:	e8 d8 fe ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 f8 02             	cmp    eax,0x2
c0013288:	74 04                	je     c001328e <Fs::setcwd(Process*, char*)+0xd3>
c001328a:	85 c0                	test   eax,eax
c001328c:	74 1c                	je     c00132aa <Fs::setcwd(Process*, char*)+0xef>
c001328e:	b8 01 00 00 00       	mov    eax,0x1
c0013293:	85 db                	test   ebx,ebx
c0013295:	74 54                	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329c:	53                   	push   ebx
c001329d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	b8 01 00 00 00       	mov    eax,0x1
c00132a8:	eb 41                	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132aa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132af:	75 1c                	jne    c00132cd <Fs::setcwd(Process*, char*)+0x112>
c00132b1:	b8 02 00 00 00       	mov    eax,0x2
c00132b6:	85 db                	test   ebx,ebx
c00132b8:	74 31                	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132bf:	53                   	push   ebx
c00132c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	b8 02 00 00 00       	mov    eax,0x2
c00132cb:	eb 1e                	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132cd:	85 db                	test   ebx,ebx
c00132cf:	74 0c                	je     c00132dd <Fs::setcwd(Process*, char*)+0x122>
c00132d1:	83 ec 0c             	sub    esp,0xc
c00132d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d6:	53                   	push   ebx
c00132d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132da:	83 c4 10             	add    esp,0x10
c00132dd:	50                   	push   eax
c00132de:	50                   	push   eax
c00132df:	56                   	push   esi
c00132e0:	57                   	push   edi
c00132e1:	e8 26 d5 fe ff       	call   c000080c <strcpy>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	31 c0                	xor    eax,eax
c00132eb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132f1:	5b                   	pop    ebx
c00132f2:	5e                   	pop    esi
c00132f3:	5f                   	pop    edi
c00132f4:	5d                   	pop    ebp
c00132f5:	c3                   	ret    

c00132f6 <Directory::Directory(char const*, Process*)>:
c00132f6:	83 ec 0c             	sub    esp,0xc
c00132f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fd:	83 ec 08             	sub    esp,0x8
c0013300:	6a 00                	push   0x0
c0013302:	50                   	push   eax
c0013303:	e8 9a dd ff ff       	call   c00110a2 <UnixFile::UnixFile(int)>
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0013310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013314:	89 10                	mov    DWORD PTR [eax],edx
c0013316:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	83 c0 0d             	add    eax,0xd
c0013327:	83 ec 04             	sub    esp,0x4
c001332a:	52                   	push   edx
c001332b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332f:	50                   	push   eax
c0013330:	e8 6b f9 ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013335:	83 c4 10             	add    esp,0x10
c0013338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001333f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013354:	90                   	nop
c0013355:	83 c4 0c             	add    esp,0xc
c0013358:	c3                   	ret    
c0013359:	90                   	nop

c001335a <Directory::open()>:
c001335a:	53                   	push   ebx
c001335b:	b8 0b 00 00 00       	mov    eax,0xb
c0013360:	83 ec 08             	sub    esp,0x8
c0013363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013367:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001336e:	80 fa 19             	cmp    dl,0x19
c0013371:	77 3d                	ja     c00133b0 <Directory::open()+0x56>
c0013373:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c001337a:	85 d2                	test   edx,edx
c001337c:	74 32                	je     c00133b0 <Directory::open()+0x56>
c001337e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013384:	85 d2                	test   edx,edx
c0013386:	74 28                	je     c00133b0 <Directory::open()+0x56>
c0013388:	b8 06 00 00 00       	mov    eax,0x6
c001338d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013391:	75 1d                	jne    c00133b0 <Directory::open()+0x56>
c0013393:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013399:	50                   	push   eax
c001339a:	8b 02                	mov    eax,DWORD PTR [edx]
c001339c:	51                   	push   ecx
c001339d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a0:	51                   	push   ecx
c00133a1:	52                   	push   edx
c00133a2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	85 c0                	test   eax,eax
c00133aa:	75 04                	jne    c00133b0 <Directory::open()+0x56>
c00133ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b0:	83 c4 08             	add    esp,0x8
c00133b3:	5b                   	pop    ebx
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <Directory::close()>:
c00133b6:	53                   	push   ebx
c00133b7:	b8 0b 00 00 00       	mov    eax,0xb
c00133bc:	83 ec 08             	sub    esp,0x8
c00133bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ca:	80 fa 19             	cmp    dl,0x19
c00133cd:	77 41                	ja     c0013410 <Directory::close()+0x5a>
c00133cf:	8b 1c 95 20 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd09e0]
c00133d6:	85 db                	test   ebx,ebx
c00133d8:	74 36                	je     c0013410 <Directory::close()+0x5a>
c00133da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e1:	74 2d                	je     c0013410 <Directory::close()+0x5a>
c00133e3:	b8 05 00 00 00       	mov    eax,0x5
c00133e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ec:	74 22                	je     c0013410 <Directory::close()+0x5a>
c00133ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f2:	8b 04 95 20 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd09e0]
c00133f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133ff:	53                   	push   ebx
c0013400:	53                   	push   ebx
c0013401:	8b 10                	mov    edx,DWORD PTR [eax]
c0013403:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013409:	50                   	push   eax
c001340a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001340d:	83 c4 10             	add    esp,0x10
c0013410:	83 c4 08             	add    esp,0x8
c0013413:	5b                   	pop    ebx
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <Directory::unlink()>:
c0013416:	83 ec 0c             	sub    esp,0xc
c0013419:	b8 0b 00 00 00       	mov    eax,0xb
c001341e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013429:	80 f9 19             	cmp    cl,0x19
c001342c:	77 2f                	ja     c001345d <Directory::unlink()+0x47>
c001342e:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013435:	85 c9                	test   ecx,ecx
c0013437:	74 24                	je     c001345d <Directory::unlink()+0x47>
c0013439:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001343f:	85 c9                	test   ecx,ecx
c0013441:	74 1a                	je     c001345d <Directory::unlink()+0x47>
c0013443:	b8 06 00 00 00       	mov    eax,0x6
c0013448:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001344c:	75 0f                	jne    c001345d <Directory::unlink()+0x47>
c001344e:	83 c2 0d             	add    edx,0xd
c0013451:	50                   	push   eax
c0013452:	50                   	push   eax
c0013453:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013455:	52                   	push   edx
c0013456:	51                   	push   ecx
c0013457:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	83 c4 0c             	add    esp,0xc
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <Directory::rename(char const*)>:
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	b8 0b 00 00 00       	mov    eax,0xb
c001346a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001346e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013475:	80 f9 19             	cmp    cl,0x19
c0013478:	77 32                	ja     c00134ac <Directory::rename(char const*)+0x4a>
c001347a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013481:	85 c9                	test   ecx,ecx
c0013483:	74 27                	je     c00134ac <Directory::rename(char const*)+0x4a>
c0013485:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001348b:	85 c9                	test   ecx,ecx
c001348d:	74 1d                	je     c00134ac <Directory::rename(char const*)+0x4a>
c001348f:	b8 06 00 00 00       	mov    eax,0x6
c0013494:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013498:	75 12                	jne    c00134ac <Directory::rename(char const*)+0x4a>
c001349a:	83 c2 0d             	add    edx,0xd
c001349d:	50                   	push   eax
c001349e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a4:	52                   	push   edx
c00134a5:	51                   	push   ecx
c00134a6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	83 c4 0c             	add    esp,0xc
c00134af:	c3                   	ret    

c00134b0 <Directory::exists()>:
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	31 c0                	xor    eax,eax
c00134b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134c0:	80 f9 19             	cmp    cl,0x19
c00134c3:	77 24                	ja     c00134e9 <Directory::exists()+0x39>
c00134c5:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c00134cc:	85 c9                	test   ecx,ecx
c00134ce:	74 19                	je     c00134e9 <Directory::exists()+0x39>
c00134d0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d6:	85 c9                	test   ecx,ecx
c00134d8:	74 0f                	je     c00134e9 <Directory::exists()+0x39>
c00134da:	83 c2 0d             	add    edx,0xd
c00134dd:	50                   	push   eax
c00134de:	50                   	push   eax
c00134df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e1:	52                   	push   edx
c00134e2:	51                   	push   ecx
c00134e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	83 c4 0c             	add    esp,0xc
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <Directory::read(dirent*)>:
c00134ee:	83 ec 1c             	sub    esp,0x1c
c00134f1:	b8 0b 00 00 00       	mov    eax,0xb
c00134f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013501:	80 fa 19             	cmp    dl,0x19
c0013504:	77 30                	ja     c0013536 <Directory::read(dirent*)+0x48>
c0013506:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c001350d:	85 d2                	test   edx,edx
c001350f:	74 25                	je     c0013536 <Directory::read(dirent*)+0x48>
c0013511:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013518:	74 1c                	je     c0013536 <Directory::read(dirent*)+0x48>
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001351f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013523:	52                   	push   edx
c0013524:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013528:	6a 00                	push   0x0
c001352a:	68 10 01 00 00       	push   0x110
c001352f:	51                   	push   ecx
c0013530:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013533:	83 c4 20             	add    esp,0x20
c0013536:	83 c4 1c             	add    esp,0x1c
c0013539:	c3                   	ret    

c001353a <Directory::create()>:
c001353a:	83 ec 0c             	sub    esp,0xc
c001353d:	b8 0b 00 00 00       	mov    eax,0xb
c0013542:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013546:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354d:	80 f9 19             	cmp    cl,0x19
c0013550:	77 2f                	ja     c0013581 <Directory::create()+0x47>
c0013552:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013559:	85 c9                	test   ecx,ecx
c001355b:	74 24                	je     c0013581 <Directory::create()+0x47>
c001355d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013563:	85 c9                	test   ecx,ecx
c0013565:	74 1a                	je     c0013581 <Directory::create()+0x47>
c0013567:	b8 06 00 00 00       	mov    eax,0x6
c001356c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013570:	75 0f                	jne    c0013581 <Directory::create()+0x47>
c0013572:	83 c2 0d             	add    edx,0xd
c0013575:	50                   	push   eax
c0013576:	50                   	push   eax
c0013577:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013579:	52                   	push   edx
c001357a:	51                   	push   ecx
c001357b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	83 c4 0c             	add    esp,0xc
c0013584:	c3                   	ret    
c0013585:	90                   	nop

c0013586 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013586:	b8 0a 00 00 00       	mov    eax,0xa
c001358b:	c3                   	ret    

c001358c <Bus::Bus(char const*)>:
c001358c:	83 ec 0c             	sub    esp,0xc
c001358f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013593:	83 ec 08             	sub    esp,0x8
c0013596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359a:	50                   	push   eax
c001359b:	e8 88 09 00 00       	call   c0013f28 <Device::Device(char const*)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00135a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ac:	89 10                	mov    DWORD PTR [eax],edx
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135bc:	90                   	nop
c00135bd:	83 c4 0c             	add    esp,0xc
c00135c0:	c3                   	ret    
c00135c1:	90                   	nop

c00135c2 <Bus::~Bus()>:
c00135c2:	83 ec 0c             	sub    esp,0xc
c00135c5:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00135ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ce:	89 10                	mov    DWORD PTR [eax],edx
c00135d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 15 06 00 00       	call   c0013bf2 <Device::~Device()>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	90                   	nop
c00135e1:	83 c4 0c             	add    esp,0xc
c00135e4:	c3                   	ret    
c00135e5:	90                   	nop

c00135e6 <Bus::~Bus()>:
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	83 ec 0c             	sub    esp,0xc
c00135ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f0:	e8 cd ff ff ff       	call   c00135c2 <Bus::~Bus()>
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	83 ec 08             	sub    esp,0x8
c00135fb:	68 58 01 00 00       	push   0x158
c0013600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013604:	e8 02 f2 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	83 c4 0c             	add    esp,0xc
c001360f:	c3                   	ret    

c0013610 <Buzzer::Buzzer(char const*)>:
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013617:	83 ec 08             	sub    esp,0x8
c001361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361e:	50                   	push   eax
c001361f:	e8 04 09 00 00       	call   c0013f28 <Device::Device(char const*)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c001362c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013630:	89 10                	mov    DWORD PTR [eax],edx
c0013632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013636:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001364e:	90                   	nop
c001364f:	83 c4 0c             	add    esp,0xc
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <Buzzer::~Buzzer()>:
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c001365c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013660:	89 10                	mov    DWORD PTR [eax],edx
c0013662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013666:	83 ec 0c             	sub    esp,0xc
c0013669:	50                   	push   eax
c001366a:	e8 83 05 00 00       	call   c0013bf2 <Device::~Device()>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	90                   	nop
c0013673:	83 c4 0c             	add    esp,0xc
c0013676:	c3                   	ret    
c0013677:	90                   	nop

c0013678 <Buzzer::~Buzzer()>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	83 ec 0c             	sub    esp,0xc
c001367e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013682:	e8 cd ff ff ff       	call   c0013654 <Buzzer::~Buzzer()>
c0013687:	83 c4 10             	add    esp,0x10
c001368a:	83 ec 08             	sub    esp,0x8
c001368d:	68 5c 01 00 00       	push   0x15c
c0013692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013696:	e8 70 f1 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	83 c4 0c             	add    esp,0xc
c00136a1:	c3                   	ret    

c00136a2 <Buzzer::stop()>:
c00136a2:	83 ec 14             	sub    esp,0x14
c00136a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ab:	6a 00                	push   0x0
c00136ad:	50                   	push   eax
c00136ae:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136b1:	83 c4 1c             	add    esp,0x1c
c00136b4:	c3                   	ret    

c00136b5 <beepThread(void*)>:
c00136b5:	53                   	push   ebx
c00136b6:	83 ec 08             	sub    esp,0x8
c00136b9:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00136be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136c2:	48                   	dec    eax
c00136c3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00136c8:	75 01                	jne    c00136cb <beepThread(void*)+0x16>
c00136ca:	fb                   	sti    
c00136cb:	50                   	push   eax
c00136cc:	50                   	push   eax
c00136cd:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136d2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136d8:	52                   	push   edx
c00136d9:	50                   	push   eax
c00136da:	e8 f8 ac 00 00       	call   c001e3d7 <nanoSleep(unsigned long long)>
c00136df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136e2:	e8 bb ff ff ff       	call   c00136a2 <Buzzer::stop()>
c00136e7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136ef:	83 c4 18             	add    esp,0x18
c00136f2:	5b                   	pop    ebx
c00136f3:	e9 db ab 00 00       	jmp    c001e2d3 <blockTask(TaskState)>

c00136f8 <Buzzer::beep(int, int, bool)>:
c00136f8:	57                   	push   edi
c00136f9:	56                   	push   esi
c00136fa:	53                   	push   ebx
c00136fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013703:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013707:	52                   	push   edx
c0013708:	52                   	push   edx
c0013709:	8b 06                	mov    eax,DWORD PTR [esi]
c001370b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001370f:	56                   	push   esi
c0013710:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	89 f8                	mov    eax,edi
c0013718:	84 c0                	test   al,al
c001371a:	74 1f                	je     c001373b <Buzzer::beep(int, int, bool)+0x43>
c001371c:	50                   	push   eax
c001371d:	50                   	push   eax
c001371e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013724:	99                   	cdq    
c0013725:	52                   	push   edx
c0013726:	50                   	push   eax
c0013727:	e8 ab ac 00 00       	call   c001e3d7 <nanoSleep(unsigned long long)>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013733:	5b                   	pop    ebx
c0013734:	5e                   	pop    esi
c0013735:	5f                   	pop    edi
c0013736:	e9 67 ff ff ff       	jmp    c00136a2 <Buzzer::stop()>
c001373b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013741:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0013746:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001374e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013752:	c7 44 24 14 b5 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136b5
c001375a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001375e:	5b                   	pop    ebx
c001375f:	5e                   	pop    esi
c0013760:	5f                   	pop    edi
c0013761:	e9 2a a7 00 00       	jmp    c001de90 <Process::createThread(void (*)(void*), void*, int)>

c0013766 <User::loadClockSettings(int)>:
c0013766:	53                   	push   ebx
c0013767:	83 ec 14             	sub    esp,0x14
c001376a:	68 14 01 00 00       	push   0x114
c001376f:	e8 18 c1 ff ff       	call   c000f88c <malloc>
c0013774:	83 c4 0c             	add    esp,0xc
c0013777:	89 c3                	mov    ebx,eax
c0013779:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001377f:	68 a4 b4 02 c0       	push   0xc002b4a4
c0013784:	50                   	push   eax
c0013785:	e8 c0 f6 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001378a:	58                   	pop    eax
c001378b:	5a                   	pop    edx
c001378c:	6a 01                	push   0x1
c001378e:	53                   	push   ebx
c001378f:	e8 1a f7 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c0013794:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013797:	e8 70 f7 ff ff       	call   c0012f0c <File::close()>
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	85 db                	test   ebx,ebx
c00137a1:	74 0f                	je     c00137b2 <User::loadClockSettings(int)+0x4c>
c00137a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137ac:	83 c4 08             	add    esp,0x8
c00137af:	5b                   	pop    ebx
c00137b0:	ff e0                	jmp    eax
c00137b2:	83 c4 08             	add    esp,0x8
c00137b5:	5b                   	pop    ebx
c00137b6:	c3                   	ret    
c00137b7:	90                   	nop

c00137b8 <Clock::Clock(char const*)>:
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137bf:	83 ec 08             	sub    esp,0x8
c00137c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c6:	50                   	push   eax
c00137c7:	e8 5c 07 00 00       	call   c0013f28 <Device::Device(char const*)>
c00137cc:	83 c4 10             	add    esp,0x10
c00137cf:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c00137d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d8:	89 10                	mov    DWORD PTR [eax],edx
c00137da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137de:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137e8:	90                   	nop
c00137e9:	83 c4 0c             	add    esp,0xc
c00137ec:	c3                   	ret    
c00137ed:	90                   	nop

c00137ee <Clock::~Clock()>:
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	89 10                	mov    DWORD PTR [eax],edx
c00137fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013800:	83 ec 0c             	sub    esp,0xc
c0013803:	50                   	push   eax
c0013804:	e8 e9 03 00 00       	call   c0013bf2 <Device::~Device()>
c0013809:	83 c4 10             	add    esp,0x10
c001380c:	90                   	nop
c001380d:	83 c4 0c             	add    esp,0xc
c0013810:	c3                   	ret    
c0013811:	90                   	nop

c0013812 <Clock::~Clock()>:
c0013812:	83 ec 0c             	sub    esp,0xc
c0013815:	83 ec 0c             	sub    esp,0xc
c0013818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001381c:	e8 cd ff ff ff       	call   c00137ee <Clock::~Clock()>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	83 ec 08             	sub    esp,0x8
c0013827:	68 58 01 00 00       	push   0x158
c001382c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013830:	e8 d6 ef ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013835:	83 c4 10             	add    esp,0x10
c0013838:	83 c4 0c             	add    esp,0xc
c001383b:	c3                   	ret    

c001383c <Clock::timeInSecondsLocal()>:
c001383c:	53                   	push   ebx
c001383d:	83 ec 14             	sub    esp,0x14
c0013840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013844:	8b 10                	mov    edx,DWORD PTR [eax]
c0013846:	50                   	push   eax
c0013847:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001384a:	0f b6 0d 9c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f19c
c0013851:	03 0d a0 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f1a0
c0013857:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001385d:	89 cb                	mov    ebx,ecx
c001385f:	c1 fb 1f             	sar    ebx,0x1f
c0013862:	01 c8                	add    eax,ecx
c0013864:	11 da                	adc    edx,ebx
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	31 c9                	xor    ecx,ecx
c001386b:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c0013872:	74 05                	je     c0013879 <Clock::timeInSecondsLocal()+0x3d>
c0013874:	b9 08 07 00 00       	mov    ecx,0x708
c0013879:	31 db                	xor    ebx,ebx
c001387b:	01 c8                	add    eax,ecx
c001387d:	11 da                	adc    edx,ebx
c001387f:	83 c4 08             	add    esp,0x8
c0013882:	5b                   	pop    ebx
c0013883:	c3                   	ret    

c0013884 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013884:	57                   	push   edi
c0013885:	56                   	push   esi
c0013886:	53                   	push   ebx
c0013887:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001388b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001388f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013891:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013895:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013898:	0f b6 05 9c f1 02 c0 	movzx  eax,BYTE PTR ds:0xc002f19c
c001389f:	03 05 a0 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f1a0
c00138a5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138ab:	99                   	cdq    
c00138ac:	29 c6                	sub    esi,eax
c00138ae:	19 d7                	sbb    edi,edx
c00138b0:	89 f0                	mov    eax,esi
c00138b2:	89 fa                	mov    edx,edi
c00138b4:	31 f6                	xor    esi,esi
c00138b6:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c00138bd:	74 05                	je     c00138c4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138bf:	be 08 07 00 00       	mov    esi,0x708
c00138c4:	31 ff                	xor    edi,edi
c00138c6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138ca:	29 f0                	sub    eax,esi
c00138cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138d0:	19 fa                	sbb    edx,edi
c00138d2:	89 d8                	mov    eax,ebx
c00138d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d8:	5b                   	pop    ebx
c00138d9:	5e                   	pop    esi
c00138da:	5f                   	pop    edi
c00138db:	ff e0                	jmp    eax

c00138dd <datetimeToSeconds(datetime_t)>:
c00138dd:	55                   	push   ebp
c00138de:	57                   	push   edi
c00138df:	56                   	push   esi
c00138e0:	53                   	push   ebx
c00138e1:	83 ec 14             	sub    esp,0x14
c00138e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138ec:	89 d3                	mov    ebx,edx
c00138ee:	0f b6 c6             	movzx  eax,dh
c00138f1:	c1 eb 10             	shr    ebx,0x10
c00138f4:	48                   	dec    eax
c00138f5:	66 81 eb 6c 07       	sub    bx,0x76c
c00138fa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138fe:	0f b6 f5             	movzx  esi,ch
c0013901:	89 cf                	mov    edi,ecx
c0013903:	6b f6 3c             	imul   esi,esi,0x3c
c0013906:	c1 ef 10             	shr    edi,0x10
c0013909:	0f b6 c9             	movzx  ecx,cl
c001390c:	89 f8                	mov    eax,edi
c001390e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013914:	0f b6 f8             	movzx  edi,al
c0013917:	0f b6 d2             	movzx  edx,dl
c001391a:	01 fe                	add    esi,edi
c001391c:	01 f1                	add    ecx,esi
c001391e:	0f b7 f3             	movzx  esi,bx
c0013921:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013925:	c1 f9 1f             	sar    ecx,0x1f
c0013928:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001392d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013931:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013936:	8b 0c 8d 00 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b00]
c001393d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013941:	76 29                	jbe    c001396c <datetimeToSeconds(datetime_t)+0x8f>
c0013943:	f6 c3 03             	test   bl,0x3
c0013946:	75 24                	jne    c001396c <datetimeToSeconds(datetime_t)+0x8f>
c0013948:	31 d2                	xor    edx,edx
c001394a:	bf 64 00 00 00       	mov    edi,0x64
c001394f:	89 d8                	mov    eax,ebx
c0013951:	66 f7 f7             	div    di
c0013954:	66 85 d2             	test   dx,dx
c0013957:	75 12                	jne    c001396b <datetimeToSeconds(datetime_t)+0x8e>
c0013959:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001395f:	bf 90 01 00 00       	mov    edi,0x190
c0013964:	99                   	cdq    
c0013965:	f7 ff                	idiv   edi
c0013967:	85 d2                	test   edx,edx
c0013969:	75 01                	jne    c001396c <datetimeToSeconds(datetime_t)+0x8f>
c001396b:	41                   	inc    ecx
c001396c:	66 83 fb 46          	cmp    bx,0x46
c0013970:	76 45                	jbe    c00139b7 <datetimeToSeconds(datetime_t)+0xda>
c0013972:	bb 46 00 00 00       	mov    ebx,0x46
c0013977:	bf 64 00 00 00       	mov    edi,0x64
c001397c:	bd 90 01 00 00       	mov    ebp,0x190
c0013981:	b8 6d 01 00 00       	mov    eax,0x16d
c0013986:	f6 c3 03             	test   bl,0x3
c0013989:	75 23                	jne    c00139ae <datetimeToSeconds(datetime_t)+0xd1>
c001398b:	89 d8                	mov    eax,ebx
c001398d:	99                   	cdq    
c001398e:	f7 ff                	idiv   edi
c0013990:	b8 6e 01 00 00       	mov    eax,0x16e
c0013995:	85 d2                	test   edx,edx
c0013997:	75 15                	jne    c00139ae <datetimeToSeconds(datetime_t)+0xd1>
c0013999:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001399f:	99                   	cdq    
c00139a0:	f7 fd                	idiv   ebp
c00139a2:	83 fa 01             	cmp    edx,0x1
c00139a5:	19 c0                	sbb    eax,eax
c00139a7:	f7 d0                	not    eax
c00139a9:	05 6e 01 00 00       	add    eax,0x16e
c00139ae:	01 c1                	add    ecx,eax
c00139b0:	43                   	inc    ebx
c00139b1:	39 f3                	cmp    ebx,esi
c00139b3:	7c cc                	jl     c0013981 <datetimeToSeconds(datetime_t)+0xa4>
c00139b5:	eb 35                	jmp    c00139ec <datetimeToSeconds(datetime_t)+0x10f>
c00139b7:	74 33                	je     c00139ec <datetimeToSeconds(datetime_t)+0x10f>
c00139b9:	b8 45 00 00 00       	mov    eax,0x45
c00139be:	89 c2                	mov    edx,eax
c00139c0:	83 e2 03             	and    edx,0x3
c00139c3:	39 f0                	cmp    eax,esi
c00139c5:	7e 0f                	jle    c00139d6 <datetimeToSeconds(datetime_t)+0xf9>
c00139c7:	83 fa 01             	cmp    edx,0x1
c00139ca:	19 d2                	sbb    edx,edx
c00139cc:	48                   	dec    eax
c00139cd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139d4:	eb e8                	jmp    c00139be <datetimeToSeconds(datetime_t)+0xe1>
c00139d6:	b8 6d 01 00 00       	mov    eax,0x16d
c00139db:	85 d2                	test   edx,edx
c00139dd:	75 0b                	jne    c00139ea <datetimeToSeconds(datetime_t)+0x10d>
c00139df:	66 83 fb 01          	cmp    bx,0x1
c00139e3:	19 c0                	sbb    eax,eax
c00139e5:	05 6e 01 00 00       	add    eax,0x16e
c00139ea:	29 c1                	sub    ecx,eax
c00139ec:	b8 80 51 01 00       	mov    eax,0x15180
c00139f1:	f7 e9                	imul   ecx
c00139f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139f7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139fb:	83 c4 14             	add    esp,0x14
c00139fe:	5b                   	pop    ebx
c00139ff:	5e                   	pop    esi
c0013a00:	5f                   	pop    edi
c0013a01:	5d                   	pop    ebp
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013a04:	57                   	push   edi
c0013a05:	56                   	push   esi
c0013a06:	53                   	push   ebx
c0013a07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a0d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a18:	e8 c0 fe ff ff       	call   c00138dd <datetimeToSeconds(datetime_t)>
c0013a1d:	59                   	pop    ecx
c0013a1e:	0f b6 0d 9c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f19c
c0013a25:	5b                   	pop    ebx
c0013a26:	03 0d a0 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f1a0
c0013a2c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a32:	89 cb                	mov    ebx,ecx
c0013a34:	c1 fb 1f             	sar    ebx,0x1f
c0013a37:	29 c8                	sub    eax,ecx
c0013a39:	19 da                	sbb    edx,ebx
c0013a3b:	31 c9                	xor    ecx,ecx
c0013a3d:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c0013a44:	74 05                	je     c0013a4b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a46:	b9 08 07 00 00       	mov    ecx,0x708
c0013a4b:	31 db                	xor    ebx,ebx
c0013a4d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a51:	29 c8                	sub    eax,ecx
c0013a53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a57:	19 da                	sbb    edx,ebx
c0013a59:	89 f8                	mov    eax,edi
c0013a5b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a5f:	5b                   	pop    ebx
c0013a60:	5e                   	pop    esi
c0013a61:	5f                   	pop    edi
c0013a62:	ff e0                	jmp    eax

c0013a64 <secondsToDatetime(unsigned long long)>:
c0013a64:	55                   	push   ebp
c0013a65:	57                   	push   edi
c0013a66:	56                   	push   esi
c0013a67:	53                   	push   ebx
c0013a68:	83 ec 1c             	sub    esp,0x1c
c0013a6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a6f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a73:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a77:	6a 00                	push   0x0
c0013a79:	68 80 51 01 00       	push   0x15180
c0013a7e:	55                   	push   ebp
c0013a7f:	57                   	push   edi
c0013a80:	e8 8f 37 01 00       	call   c0027214 <__udivdi3>
c0013a85:	83 c4 10             	add    esp,0x10
c0013a88:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a92:	6a 00                	push   0x0
c0013a94:	68 80 51 01 00       	push   0x15180
c0013a99:	55                   	push   ebp
c0013a9a:	57                   	push   edi
c0013a9b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013aa0:	e8 6f 38 01 00       	call   c0027314 <__umoddi3>
c0013aa5:	83 c4 10             	add    esp,0x10
c0013aa8:	99                   	cdq    
c0013aa9:	f7 ff                	idiv   edi
c0013aab:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ab0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ab3:	89 d0                	mov    eax,edx
c0013ab5:	99                   	cdq    
c0013ab6:	f7 ff                	idiv   edi
c0013ab8:	85 db                	test   ebx,ebx
c0013aba:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013abd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013ac0:	79 11                	jns    c0013ad3 <secondsToDatetime(unsigned long long)+0x6f>
c0013ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ac6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013acc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad1:	eb 07                	jmp    c0013ada <secondsToDatetime(unsigned long long)+0x76>
c0013ad3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad8:	89 d8                	mov    eax,ebx
c0013ada:	bf b4 05 00 00       	mov    edi,0x5b4
c0013adf:	99                   	cdq    
c0013ae0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ae5:	f7 f9                	idiv   ecx
c0013ae7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013aec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013af0:	31 d2                	xor    edx,edx
c0013af2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013afa:	01 c3                	add    ebx,eax
c0013afc:	89 d8                	mov    eax,ebx
c0013afe:	f7 f1                	div    ecx
c0013b00:	31 d2                	xor    edx,edx
c0013b02:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013b05:	89 d8                	mov    eax,ebx
c0013b07:	f7 f7                	div    edi
c0013b09:	31 d2                	xor    edx,edx
c0013b0b:	29 c1                	sub    ecx,eax
c0013b0d:	89 d8                	mov    eax,ebx
c0013b0f:	f7 f5                	div    ebp
c0013b11:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b16:	29 c1                	sub    ecx,eax
c0013b18:	31 d2                	xor    edx,edx
c0013b1a:	89 c8                	mov    eax,ecx
c0013b1c:	f7 f5                	div    ebp
c0013b1e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b27:	31 d2                	xor    edx,edx
c0013b29:	89 c8                	mov    eax,ecx
c0013b2b:	f7 f5                	div    ebp
c0013b2d:	31 d2                	xor    edx,edx
c0013b2f:	01 c3                	add    ebx,eax
c0013b31:	89 c8                	mov    eax,ecx
c0013b33:	f7 f7                	div    edi
c0013b35:	bf 99 00 00 00       	mov    edi,0x99
c0013b3a:	29 c3                	sub    ebx,eax
c0013b3c:	31 d2                	xor    edx,edx
c0013b3e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b46:	29 c3                	sub    ebx,eax
c0013b48:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b4b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b4e:	bb 05 00 00 00       	mov    ebx,0x5
c0013b53:	83 c1 02             	add    ecx,0x2
c0013b56:	89 c8                	mov    eax,ecx
c0013b58:	f7 f7                	div    edi
c0013b5a:	31 d2                	xor    edx,edx
c0013b5c:	89 c7                	mov    edi,eax
c0013b5e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b64:	83 c0 02             	add    eax,0x2
c0013b67:	f7 f3                	div    ebx
c0013b69:	89 eb                	mov    ebx,ebp
c0013b6b:	29 c3                	sub    ebx,eax
c0013b6d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b73:	88 1e                	mov    BYTE PTR [esi],bl
c0013b75:	19 c0                	sbb    eax,eax
c0013b77:	31 d2                	xor    edx,edx
c0013b79:	83 e0 0c             	and    eax,0xc
c0013b7c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b80:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b88:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b8c:	83 f9 01             	cmp    ecx,0x1
c0013b8f:	0f 96 c2             	setbe  dl
c0013b92:	41                   	inc    ecx
c0013b93:	01 d0                	add    eax,edx
c0013b95:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b98:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b9c:	83 c4 1c             	add    esp,0x1c
c0013b9f:	89 f0                	mov    eax,esi
c0013ba1:	5b                   	pop    ebx
c0013ba2:	5e                   	pop    esi
c0013ba3:	5f                   	pop    edi
c0013ba4:	5d                   	pop    ebp
c0013ba5:	c2 04 00             	ret    0x4

c0013ba8 <Clock::timeInDatetimeLocal()>:
c0013ba8:	53                   	push   ebx
c0013ba9:	83 ec 14             	sub    esp,0x14
c0013bac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bb4:	e8 83 fc ff ff       	call   c001383c <Clock::timeInSecondsLocal()>
c0013bb9:	83 c4 0c             	add    esp,0xc
c0013bbc:	52                   	push   edx
c0013bbd:	50                   	push   eax
c0013bbe:	53                   	push   ebx
c0013bbf:	e8 a0 fe ff ff       	call   c0013a64 <secondsToDatetime(unsigned long long)>
c0013bc4:	89 d8                	mov    eax,ebx
c0013bc6:	83 c4 14             	add    esp,0x14
c0013bc9:	5b                   	pop    ebx
c0013bca:	c2 04 00             	ret    0x4
c0013bcd:	90                   	nop

c0013bce <Device::hibernate()>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <Device::wake()>:
c0013bd0:	c3                   	ret    
c0013bd1:	90                   	nop

c0013bd2 <Device::detect()>:
c0013bd2:	c3                   	ret    
c0013bd3:	90                   	nop

c0013bd4 <Device::disableLegacy()>:
c0013bd4:	c3                   	ret    
c0013bd5:	90                   	nop

c0013bd6 <Device::powerSaving(PowerSavingLevel)>:
c0013bd6:	c3                   	ret    
c0013bd7:	90                   	nop

c0013bd8 <DriverlessDevice::close(int, int, void*)>:
c0013bd8:	31 c0                	xor    eax,eax
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <DriverlessDevice::detect()>:
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <DriverlessDevice::open(int, int, void*)>:
c0013bde:	83 ec 18             	sub    esp,0x18
c0013be1:	68 30 b5 02 c0       	push   0xc002b530
c0013be6:	e8 36 67 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0013beb:	83 c8 ff             	or     eax,0xffffffff
c0013bee:	83 c4 1c             	add    esp,0x1c
c0013bf1:	c3                   	ret    

c0013bf2 <Device::~Device()>:
c0013bf2:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0013bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bfb:	89 10                	mov    DWORD PTR [eax],edx
c0013bfd:	90                   	nop
c0013bfe:	c3                   	ret    
c0013bff:	90                   	nop

c0013c00 <Device::~Device()>:
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c07:	e8 e6 ff ff ff       	call   c0013bf2 <Device::~Device()>
c0013c0c:	83 c4 04             	add    esp,0x4
c0013c0f:	83 ec 08             	sub    esp,0x8
c0013c12:	68 58 01 00 00       	push   0x158
c0013c17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1b:	e8 eb eb ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	83 c4 0c             	add    esp,0xc
c0013c26:	c3                   	ret    
c0013c27:	90                   	nop

c0013c28 <Device::findAndLoadDriver()>:
c0013c28:	c7 44 24 04 4e b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b54e
c0013c30:	e9 b6 ec ff ff       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>
c0013c35:	90                   	nop

c0013c36 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c36:	57                   	push   edi
c0013c37:	b9 09 00 00 00       	mov    ecx,0x9
c0013c3c:	56                   	push   esi
c0013c3d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c41:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c45:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c4f:	81 c7 18 01 00 00    	add    edi,0x118
c0013c55:	fc                   	cld    
c0013c56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c58:	5e                   	pop    esi
c0013c59:	5f                   	pop    edi
c0013c5a:	c3                   	ret    
c0013c5b:	90                   	nop

c0013c5c <Device::preOpenACPI(void*, char*, char*)>:
c0013c5c:	57                   	push   edi
c0013c5d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c62:	56                   	push   esi
c0013c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c6b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c75:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c7b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c87:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c8c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c92:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c98:	5e                   	pop    esi
c0013c99:	5f                   	pop    edi
c0013c9a:	c3                   	ret    
c0013c9b:	90                   	nop

c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ca5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cac:	75 0b                	jne    c0013cb9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb7:	eb 1e                	jmp    c0013cd7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cb9:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0013cbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cc4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ccc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd7:	ff e0                	jmp    eax
c0013cd9:	90                   	nop

c0013cda <Device::getParent()>:
c0013cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cde:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ce4:	c3                   	ret    
c0013ce5:	90                   	nop

c0013ce6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cf6:	75 0b                	jne    c0013d03 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cfa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cfe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013d01:	eb 1e                	jmp    c0013d21 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013d03:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0013d08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d0e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d1e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d21:	ff e0                	jmp    eax
c0013d23:	90                   	nop

c0013d24 <Device::addChild(Device*)>:
c0013d24:	53                   	push   ebx
c0013d25:	83 ec 08             	sub    esp,0x8
c0013d28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d36:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d3c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d3e:	85 d2                	test   edx,edx
c0013d40:	74 04                	je     c0013d46 <Device::addChild(Device*)+0x22>
c0013d42:	89 d3                	mov    ebx,edx
c0013d44:	eb f6                	jmp    c0013d3c <Device::addChild(Device*)+0x18>
c0013d46:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d49:	83 ec 0c             	sub    esp,0xc
c0013d4c:	6a 08                	push   0x8
c0013d4e:	e8 39 bb ff ff       	call   c000f88c <malloc>
c0013d53:	89 03                	mov    DWORD PTR [ebx],eax
c0013d55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d62:	83 c4 18             	add    esp,0x18
c0013d65:	5b                   	pop    ebx
c0013d66:	c3                   	ret    
c0013d67:	90                   	nop

c0013d68 <Device::removeAllChildren()>:
c0013d68:	56                   	push   esi
c0013d69:	53                   	push   ebx
c0013d6a:	52                   	push   edx
c0013d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d6f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d78:	74 17                	je     c0013d91 <Device::removeAllChildren()+0x29>
c0013d7a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d7d:	85 c0                	test   eax,eax
c0013d7f:	74 0c                	je     c0013d8d <Device::removeAllChildren()+0x25>
c0013d81:	83 ec 0c             	sub    esp,0xc
c0013d84:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d86:	50                   	push   eax
c0013d87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d8a:	83 c4 10             	add    esp,0x10
c0013d8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8f:	eb e4                	jmp    c0013d75 <Device::removeAllChildren()+0xd>
c0013d91:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013da3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013daa:	58                   	pop    eax
c0013dab:	5b                   	pop    ebx
c0013dac:	5e                   	pop    esi
c0013dad:	c3                   	ret    

c0013dae <Device::hibernateAll()>:
c0013dae:	53                   	push   ebx
c0013daf:	83 ec 14             	sub    esp,0x14
c0013db2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013db6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013db8:	53                   	push   ebx
c0013db9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013dbc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dc8:	74 0f                	je     c0013dd9 <Device::hibernateAll()+0x2b>
c0013dca:	83 ec 0c             	sub    esp,0xc
c0013dcd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dd0:	e8 d9 ff ff ff       	call   c0013dae <Device::hibernateAll()>
c0013dd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dd7:	eb e9                	jmp    c0013dc2 <Device::hibernateAll()+0x14>
c0013dd9:	83 c4 08             	add    esp,0x8
c0013ddc:	5b                   	pop    ebx
c0013ddd:	c3                   	ret    

c0013dde <Device::wakeAll()>:
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 14             	sub    esp,0x14
c0013de2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013de8:	53                   	push   ebx
c0013de9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013df8:	74 0f                	je     c0013e09 <Device::wakeAll()+0x2b>
c0013dfa:	83 ec 0c             	sub    esp,0xc
c0013dfd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e00:	e8 d9 ff ff ff       	call   c0013dde <Device::wakeAll()>
c0013e05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e07:	eb e9                	jmp    c0013df2 <Device::wakeAll()+0x14>
c0013e09:	83 c4 08             	add    esp,0x8
c0013e0c:	5b                   	pop    ebx
c0013e0d:	c3                   	ret    

c0013e0e <Device::detectAll()>:
c0013e0e:	53                   	push   ebx
c0013e0f:	83 ec 14             	sub    esp,0x14
c0013e12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e18:	53                   	push   ebx
c0013e19:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e28:	74 0f                	je     c0013e39 <Device::detectAll()+0x2b>
c0013e2a:	83 ec 0c             	sub    esp,0xc
c0013e2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e30:	e8 d9 ff ff ff       	call   c0013e0e <Device::detectAll()>
c0013e35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e37:	eb e9                	jmp    c0013e22 <Device::detectAll()+0x14>
c0013e39:	83 c4 08             	add    esp,0x8
c0013e3c:	5b                   	pop    ebx
c0013e3d:	c3                   	ret    

c0013e3e <Device::disableLegacyAll()>:
c0013e3e:	53                   	push   ebx
c0013e3f:	83 ec 14             	sub    esp,0x14
c0013e42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e48:	53                   	push   ebx
c0013e49:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e58:	74 0f                	je     c0013e69 <Device::disableLegacyAll()+0x2b>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e60:	e8 d9 ff ff ff       	call   c0013e3e <Device::disableLegacyAll()>
c0013e65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e67:	eb e9                	jmp    c0013e52 <Device::disableLegacyAll()+0x14>
c0013e69:	83 c4 08             	add    esp,0x8
c0013e6c:	5b                   	pop    ebx
c0013e6d:	c3                   	ret    

c0013e6e <Device::loadDriversForAll()>:
c0013e6e:	53                   	push   ebx
c0013e6f:	83 ec 08             	sub    esp,0x8
c0013e72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e76:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e7d:	75 0c                	jne    c0013e8b <Device::loadDriversForAll()+0x1d>
c0013e7f:	83 ec 0c             	sub    esp,0xc
c0013e82:	53                   	push   ebx
c0013e83:	e8 a0 fd ff ff       	call   c0013c28 <Device::findAndLoadDriver()>
c0013e88:	83 c4 10             	add    esp,0x10
c0013e8b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e94:	74 12                	je     c0013ea8 <Device::loadDriversForAll()+0x3a>
c0013e96:	83 ec 0c             	sub    esp,0xc
c0013e99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9c:	e8 cd ff ff ff       	call   c0013e6e <Device::loadDriversForAll()>
c0013ea1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	eb e9                	jmp    c0013e91 <Device::loadDriversForAll()+0x23>
c0013ea8:	83 c4 08             	add    esp,0x8
c0013eab:	5b                   	pop    ebx
c0013eac:	c3                   	ret    
c0013ead:	90                   	nop

c0013eae <Device::closeAll()>:
c0013eae:	53                   	push   ebx
c0013eaf:	83 ec 08             	sub    esp,0x8
c0013eb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb8:	6a 00                	push   0x0
c0013eba:	6a 00                	push   0x0
c0013ebc:	6a 00                	push   0x0
c0013ebe:	53                   	push   ebx
c0013ebf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ec2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ece:	74 0f                	je     c0013edf <Device::closeAll()+0x31>
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed6:	e8 d3 ff ff ff       	call   c0013eae <Device::closeAll()>
c0013edb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013edd:	eb e9                	jmp    c0013ec8 <Device::closeAll()+0x1a>
c0013edf:	83 c4 08             	add    esp,0x8
c0013ee2:	5b                   	pop    ebx
c0013ee3:	c3                   	ret    

c0013ee4 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ee4:	56                   	push   esi
c0013ee5:	53                   	push   ebx
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ef3:	56                   	push   esi
c0013ef4:	53                   	push   ebx
c0013ef5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ef8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f04:	74 0f                	je     c0013f15 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013f06:	52                   	push   edx
c0013f07:	52                   	push   edx
c0013f08:	56                   	push   esi
c0013f09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f0c:	e8 d3 ff ff ff       	call   c0013ee4 <Device::powerSavingAll(PowerSavingLevel)>
c0013f11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f13:	eb e9                	jmp    c0013efe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013f15:	58                   	pop    eax
c0013f16:	5b                   	pop    ebx
c0013f17:	5e                   	pop    esi
c0013f18:	c3                   	ret    
c0013f19:	90                   	nop

c0013f1a <Device::setName(char const*)>:
c0013f1a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f22:	e9 e5 c8 fe ff       	jmp    c000080c <strcpy>
c0013f27:	90                   	nop

c0013f28 <Device::Device(char const*)>:
c0013f28:	83 ec 1c             	sub    esp,0x1c
c0013f2b:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0013f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f34:	89 10                	mov    DWORD PTR [eax],edx
c0013f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f48:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f56:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f64:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f6e:	83 ec 08             	sub    esp,0x8
c0013f71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f79:	e8 9c ff ff ff       	call   c0013f1a <Device::setName(char const*)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f89:	83 ec 0c             	sub    esp,0xc
c0013f8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f90:	e8 f7 b8 ff ff       	call   c000f88c <malloc>
c0013f95:	83 c4 10             	add    esp,0x10
c0013f98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fa9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fea:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014006:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014014:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001401e:	90                   	nop
c001401f:	83 c4 1c             	add    esp,0x1c
c0014022:	c3                   	ret    
c0014023:	90                   	nop

c0014024 <Device::getName()>:
c0014024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014028:	05 d0 00 00 00       	add    eax,0xd0
c001402d:	c3                   	ret    

c001402e <DriverlessDevice::DriverlessDevice(char const*)>:
c001402e:	83 ec 0c             	sub    esp,0xc
c0014031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014035:	83 ec 08             	sub    esp,0x8
c0014038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001403c:	50                   	push   eax
c001403d:	e8 e6 fe ff ff       	call   c0013f28 <Device::Device(char const*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c001404a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404e:	89 10                	mov    DWORD PTR [eax],edx
c0014050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014054:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001405e:	90                   	nop
c001405f:	83 c4 0c             	add    esp,0xc
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014064:	57                   	push   edi
c0014065:	56                   	push   esi
c0014066:	53                   	push   ebx
c0014067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001406b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001406f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014073:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014079:	75 0c                	jne    c0014087 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001407b:	52                   	push   edx
c001407c:	52                   	push   edx
c001407d:	53                   	push   ebx
c001407e:	56                   	push   esi
c001407f:	e8 e2 50 01 00       	call   c0029166 <LinkedList<Device>::addElement(Device*)>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001408d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014090:	74 12                	je     c00140a4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014092:	50                   	push   eax
c0014093:	57                   	push   edi
c0014094:	56                   	push   esi
c0014095:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014098:	e8 c7 ff ff ff       	call   c0014064 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001409d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	eb e9                	jmp    c001408d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00140a4:	5b                   	pop    ebx
c00140a5:	5e                   	pop    esi
c00140a6:	5f                   	pop    edi
c00140a7:	c3                   	ret    

c00140a8 <getDevicesOfType(DeviceType)>:
c00140a8:	53                   	push   ebx
c00140a9:	83 ec 14             	sub    esp,0x14
c00140ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140b0:	53                   	push   ebx
c00140b1:	e8 8c 51 01 00       	call   c0029242 <LinkedList<Device>::LinkedList()>
c00140b6:	83 c4 0c             	add    esp,0xc
c00140b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140bd:	53                   	push   ebx
c00140be:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c00140c4:	e8 9b ff ff ff       	call   c0014064 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140c9:	89 d8                	mov    eax,ebx
c00140cb:	83 c4 18             	add    esp,0x18
c00140ce:	5b                   	pop    ebx
c00140cf:	c2 04 00             	ret    0x4

c00140d2 <HardDiskController::HardDiskController(char const*)>:
c00140d2:	83 ec 0c             	sub    esp,0xc
c00140d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d9:	83 ec 08             	sub    esp,0x8
c00140dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140e0:	50                   	push   eax
c00140e1:	e8 42 fe ff ff       	call   c0013f28 <Device::Device(char const*)>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c00140ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f2:	89 10                	mov    DWORD PTR [eax],edx
c00140f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014102:	90                   	nop
c0014103:	83 c4 0c             	add    esp,0xc
c0014106:	c3                   	ret    
c0014107:	90                   	nop

c0014108 <HardDiskController::~HardDiskController()>:
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c0014110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014114:	89 10                	mov    DWORD PTR [eax],edx
c0014116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411a:	83 ec 0c             	sub    esp,0xc
c001411d:	50                   	push   eax
c001411e:	e8 cf fa ff ff       	call   c0013bf2 <Device::~Device()>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	90                   	nop
c0014127:	83 c4 0c             	add    esp,0xc
c001412a:	c3                   	ret    
c001412b:	90                   	nop

c001412c <HardDiskController::~HardDiskController()>:
c001412c:	83 ec 0c             	sub    esp,0xc
c001412f:	83 ec 0c             	sub    esp,0xc
c0014132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014136:	e8 cd ff ff ff       	call   c0014108 <HardDiskController::~HardDiskController()>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	83 ec 08             	sub    esp,0x8
c0014141:	68 58 01 00 00       	push   0x158
c0014146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414a:	e8 bc e6 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	83 c4 0c             	add    esp,0xc
c0014155:	c3                   	ret    

c0014156 <PhysicalDisk::eject()>:
c0014156:	83 ec 18             	sub    esp,0x18
c0014159:	68 0c b6 02 c0       	push   0xc002b60c
c001415e:	e8 88 e7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014163:	83 c8 ff             	or     eax,0xffffffff
c0014166:	83 c4 1c             	add    esp,0x1c
c0014169:	c3                   	ret    

c001416a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001416a:	83 ec 0c             	sub    esp,0xc
c001416d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014171:	83 ec 08             	sub    esp,0x8
c0014174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014178:	50                   	push   eax
c0014179:	e8 aa fd ff ff       	call   c0013f28 <Device::Device(char const*)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c0014186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418a:	89 10                	mov    DWORD PTR [eax],edx
c001418c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014190:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00141a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00141b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141cc:	90                   	nop
c00141cd:	83 c4 0c             	add    esp,0xc
c00141d0:	c3                   	ret    
c00141d1:	90                   	nop

c00141d2 <PhysicalDisk::startCache()>:
c00141d2:	56                   	push   esi
c00141d3:	53                   	push   ebx
c00141d4:	83 ec 10             	sub    esp,0x10
c00141d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141db:	6a 44                	push   0x44
c00141dd:	e8 aa b6 ff ff       	call   c000f88c <malloc>
c00141e2:	89 c6                	mov    esi,eax
c00141e4:	58                   	pop    eax
c00141e5:	5a                   	pop    edx
c00141e6:	53                   	push   ebx
c00141e7:	56                   	push   esi
c00141e8:	e8 a9 28 00 00       	call   c0016a96 <VCache::VCache(PhysicalDisk*)>
c00141ed:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141f3:	83 c4 14             	add    esp,0x14
c00141f6:	5b                   	pop    ebx
c00141f7:	5e                   	pop    esi
c00141f8:	c3                   	ret    
c00141f9:	90                   	nop

c00141fa <PhysicalDisk::~PhysicalDisk()>:
c00141fa:	83 ec 0c             	sub    esp,0xc
c00141fd:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c0014202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014206:	89 10                	mov    DWORD PTR [eax],edx
c0014208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420c:	83 ec 0c             	sub    esp,0xc
c001420f:	50                   	push   eax
c0014210:	e8 dd f9 ff ff       	call   c0013bf2 <Device::~Device()>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	90                   	nop
c0014219:	83 c4 0c             	add    esp,0xc
c001421c:	c3                   	ret    
c001421d:	90                   	nop

c001421e <PhysicalDisk::~PhysicalDisk()>:
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	83 ec 0c             	sub    esp,0xc
c0014224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014228:	e8 cd ff ff ff       	call   c00141fa <PhysicalDisk::~PhysicalDisk()>
c001422d:	83 c4 10             	add    esp,0x10
c0014230:	83 ec 08             	sub    esp,0x8
c0014233:	68 6c 01 00 00       	push   0x16c
c0014238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423c:	e8 ca e5 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	83 c4 0c             	add    esp,0xc
c0014247:	c3                   	ret    

c0014248 <FPU::FPU(char const*)>:
c0014248:	83 ec 0c             	sub    esp,0xc
c001424b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424f:	83 ec 08             	sub    esp,0x8
c0014252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014256:	50                   	push   eax
c0014257:	e8 cc fc ff ff       	call   c0013f28 <Device::Device(char const*)>
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	ba 80 b6 02 c0       	mov    edx,0xc002b680
c0014264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014268:	89 10                	mov    DWORD PTR [eax],edx
c001426a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014278:	90                   	nop
c0014279:	83 c4 0c             	add    esp,0xc
c001427c:	c3                   	ret    
c001427d:	90                   	nop

c001427e <FPU::~FPU()>:
c001427e:	83 ec 0c             	sub    esp,0xc
c0014281:	ba 80 b6 02 c0       	mov    edx,0xc002b680
c0014286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428a:	89 10                	mov    DWORD PTR [eax],edx
c001428c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	50                   	push   eax
c0014294:	e8 59 f9 ff ff       	call   c0013bf2 <Device::~Device()>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	90                   	nop
c001429d:	83 c4 0c             	add    esp,0xc
c00142a0:	c3                   	ret    
c00142a1:	90                   	nop

c00142a2 <FPU::~FPU()>:
c00142a2:	83 ec 0c             	sub    esp,0xc
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142ac:	e8 cd ff ff ff       	call   c001427e <FPU::~FPU()>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	83 ec 08             	sub    esp,0x8
c00142b7:	68 58 01 00 00       	push   0x158
c00142bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142c0:	e8 46 e5 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c00142c5:	83 c4 10             	add    esp,0x10
c00142c8:	83 c4 0c             	add    esp,0xc
c00142cb:	c3                   	ret    

c00142cc <setupFPU()>:
c00142cc:	53                   	push   ebx
c00142cd:	83 ec 08             	sub    esp,0x8
c00142d0:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00142d6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142dd:	74 19                	je     c00142f8 <setupFPU()+0x2c>
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	68 58 01 00 00       	push   0x158
c00142e7:	e8 a0 b5 ff ff       	call   c000f88c <malloc>
c00142ec:	89 c3                	mov    ebx,eax
c00142ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f1:	e8 a2 1a 01 00       	call   c0025d98 <AVX::AVX()>
c00142f6:	eb 5b                	jmp    c0014353 <setupFPU()+0x87>
c00142f8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142fe:	84 c0                	test   al,al
c0014300:	79 19                	jns    c001431b <setupFPU()+0x4f>
c0014302:	83 ec 0c             	sub    esp,0xc
c0014305:	68 58 01 00 00       	push   0x158
c001430a:	e8 7d b5 ff ff       	call   c000f88c <malloc>
c001430f:	89 c3                	mov    ebx,eax
c0014311:	89 04 24             	mov    DWORD PTR [esp],eax
c0014314:	e8 a5 1b 01 00       	call   c0025ebe <SSE::SSE()>
c0014319:	eb 38                	jmp    c0014353 <setupFPU()+0x87>
c001431b:	a8 20                	test   al,0x20
c001431d:	74 19                	je     c0014338 <setupFPU()+0x6c>
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	68 58 01 00 00       	push   0x158
c0014327:	e8 60 b5 ff ff       	call   c000f88c <malloc>
c001432c:	89 c3                	mov    ebx,eax
c001432e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014331:	e8 f2 1a 01 00       	call   c0025e28 <MMX::MMX()>
c0014336:	eb 1b                	jmp    c0014353 <setupFPU()+0x87>
c0014338:	a8 10                	test   al,0x10
c001433a:	74 1c                	je     c0014358 <setupFPU()+0x8c>
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	68 58 01 00 00       	push   0x158
c0014344:	e8 43 b5 ff ff       	call   c000f88c <malloc>
c0014349:	89 c3                	mov    ebx,eax
c001434b:	89 04 24             	mov    DWORD PTR [esp],eax
c001434e:	e8 f9 1b 01 00       	call   c0025f4c <x87::x87()>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	eb 24                	jmp    c001437c <setupFPU()+0xb0>
c0014358:	83 e0 ef             	and    eax,0xffffffef
c001435b:	83 ec 0c             	sub    esp,0xc
c001435e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014364:	68 6c b6 02 c0       	push   0xc002b66c
c0014369:	e8 7d e5 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001436e:	0f 20 c0             	mov    eax,cr0
c0014371:	83 c8 04             	or     eax,0x4
c0014374:	0f 22 c0             	mov    cr0,eax
c0014377:	31 db                	xor    ebx,ebx
c0014379:	83 c4 10             	add    esp,0x10
c001437c:	89 d8                	mov    eax,ebx
c001437e:	83 c4 08             	add    esp,0x8
c0014381:	5b                   	pop    ebx
c0014382:	c3                   	ret    
c0014383:	90                   	nop

c0014384 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001438c:	c1 e0 04             	shl    eax,0x4
c001438f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014393:	8d 50 10             	lea    edx,[eax+0x10]
c0014396:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001439c:	74 08                	je     c00143a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001439e:	83 c0 04             	add    eax,0x4
c00143a1:	39 d0                	cmp    eax,edx
c00143a3:	75 f1                	jne    c0014396 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00143a5:	c3                   	ret    
c00143a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143b0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143ba:	eb e2                	jmp    c001439e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143bc:	57                   	push   edi
c00143bd:	31 c0                	xor    eax,eax
c00143bf:	56                   	push   esi
c00143c0:	53                   	push   ebx
c00143c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143cd:	89 da                	mov    edx,ebx
c00143cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143d3:	c1 e2 04             	shl    edx,0x4
c00143d6:	01 ca                	add    edx,ecx
c00143d8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143e0:	74 16                	je     c00143f8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143e2:	40                   	inc    eax
c00143e3:	83 f8 04             	cmp    eax,0x4
c00143e6:	75 f0                	jne    c00143d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143e8:	c7 44 24 10 b0 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b6b0
c00143f0:	5b                   	pop    ebx
c00143f1:	5e                   	pop    esi
c00143f2:	5f                   	pop    edi
c00143f3:	e9 29 5f 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c00143f8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143fb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143fe:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014404:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001440a:	5b                   	pop    ebx
c001440b:	5e                   	pop    esi
c001440c:	5f                   	pop    edi
c001440d:	c3                   	ret    

c001440e <doubleFault(regs*, void*)>:
c001440e:	55                   	push   ebp
c001440f:	89 e5                	mov    ebp,esp
c0014411:	83 ec 08             	sub    esp,0x8
c0014414:	83 ec 0c             	sub    esp,0xc
c0014417:	68 eb b6 02 c0       	push   0xc002b6eb
c001441c:	e8 00 5f 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0014421:	83 c4 10             	add    esp,0x10
c0014424:	90                   	nop
c0014425:	c9                   	leave  
c0014426:	c3                   	ret    
c0014427:	90                   	nop

c0014428 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014428:	56                   	push   esi
c0014429:	53                   	push   ebx
c001442a:	50                   	push   eax
c001442b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001442f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014433:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014438:	75 35                	jne    c001446f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001443a:	8d 43 20             	lea    eax,[ebx+0x20]
c001443d:	31 d2                	xor    edx,edx
c001443f:	89 c1                	mov    ecx,eax
c0014441:	c1 e1 04             	shl    ecx,0x4
c0014444:	01 f1                	add    ecx,esi
c0014446:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001444e:	74 3e                	je     c001448e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014450:	42                   	inc    edx
c0014451:	83 fa 04             	cmp    edx,0x4
c0014454:	75 f0                	jne    c0014446 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	68 30 b7 02 c0       	push   0xc002b730
c001445e:	e8 be 5e 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001446b:	5a                   	pop    edx
c001446c:	5b                   	pop    ebx
c001446d:	5e                   	pop    esi
c001446e:	c3                   	ret    
c001446f:	83 ec 0c             	sub    esp,0xc
c0014472:	56                   	push   esi
c0014473:	e8 ac fb ff ff       	call   c0014024 <Device::getName()>
c0014478:	83 c4 10             	add    esp,0x10
c001447b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001447e:	75 ba                	jne    c001443a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014480:	83 fb 0f             	cmp    ebx,0xf
c0014483:	7f 29                	jg     c00144ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014485:	0f b6 9b 80 e2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1d80]
c001448c:	eb ac                	jmp    c001443a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001448e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014491:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014495:	8d 04 86             	lea    eax,[esi+eax*4]
c0014498:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001449e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144a2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00144a8:	89 d8                	mov    eax,ebx
c00144aa:	5a                   	pop    edx
c00144ab:	5b                   	pop    ebx
c00144ac:	5e                   	pop    esi
c00144ad:	c3                   	ret    
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	68 f8 b6 02 c0       	push   0xc002b6f8
c00144b6:	e8 66 5e 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	e9 77 ff ff ff       	jmp    c001443a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144c3:	90                   	nop

c00144c4 <InterruptController::clearAllHandlers(int, bool)>:
c00144c4:	56                   	push   esi
c00144c5:	53                   	push   ebx
c00144c6:	52                   	push   edx
c00144c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144cf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144d4:	75 61                	jne    c0014537 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144d6:	8d 46 20             	lea    eax,[esi+0x20]
c00144d9:	c1 e6 04             	shl    esi,0x4
c00144dc:	c1 e0 04             	shl    eax,0x4
c00144df:	01 de                	add    esi,ebx
c00144e1:	01 d8                	add    eax,ebx
c00144e3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144ed:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144f7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014501:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001450b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014515:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001451f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014529:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014533:	58                   	pop    eax
c0014534:	5b                   	pop    ebx
c0014535:	5e                   	pop    esi
c0014536:	c3                   	ret    
c0014537:	83 ec 0c             	sub    esp,0xc
c001453a:	53                   	push   ebx
c001453b:	e8 e4 fa ff ff       	call   c0014024 <Device::getName()>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014546:	75 8e                	jne    c00144d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014548:	83 fe 0f             	cmp    esi,0xf
c001454b:	7f 09                	jg     c0014556 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001454d:	0f b6 b6 80 e2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1d80]
c0014554:	eb 80                	jmp    c00144d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	68 6c b7 02 c0       	push   0xc002b76c
c001455e:	e8 be 5d 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	e9 6b ff ff ff       	jmp    c00144d6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001456b:	90                   	nop

c001456c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001456c:	56                   	push   esi
c001456d:	53                   	push   ebx
c001456e:	52                   	push   edx
c001456f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014573:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014577:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001457c:	75 3a                	jne    c00145b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001457e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014582:	8d 50 20             	lea    edx,[eax+0x20]
c0014585:	c1 e2 04             	shl    edx,0x4
c0014588:	8d 04 16             	lea    eax,[esi+edx*1]
c001458b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001458f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014595:	74 0b                	je     c00145a2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014597:	83 c0 04             	add    eax,0x4
c001459a:	39 d0                	cmp    eax,edx
c001459c:	75 f1                	jne    c001458f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001459e:	58                   	pop    eax
c001459f:	5b                   	pop    ebx
c00145a0:	5e                   	pop    esi
c00145a1:	c3                   	ret    
c00145a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145ac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145b6:	eb df                	jmp    c0014597 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	56                   	push   esi
c00145bc:	e8 63 fa ff ff       	call   c0014024 <Device::getName()>
c00145c1:	83 c4 10             	add    esp,0x10
c00145c4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145c7:	75 b5                	jne    c001457e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145c9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145ce:	7f 11                	jg     c00145e1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d4:	0f b6 80 80 e2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1d80]
c00145db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145df:	eb 9d                	jmp    c001457e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145e1:	83 ec 0c             	sub    esp,0xc
c00145e4:	68 6c b7 02 c0       	push   0xc002b76c
c00145e9:	e8 33 5d 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00145ee:	83 c4 10             	add    esp,0x10
c00145f1:	eb 8b                	jmp    c001457e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145f3 <nmiHandler(regs*, void*)>:
c00145f3:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00145f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145fc:	e9 d5 a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014601 <int_handler>:
c0014601:	55                   	push   ebp
c0014602:	57                   	push   edi
c0014603:	56                   	push   esi
c0014604:	53                   	push   ebx
c0014605:	83 ec 0c             	sub    esp,0xc
c0014608:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001460c:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c0014613:	74 0b                	je     c0014620 <int_handler+0x1f>
c0014615:	fa                   	cli    
c0014616:	f4                   	hlt    
c0014617:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001461e:	75 f5                	jne    c0014615 <int_handler+0x14>
c0014620:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014625:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014628:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001462e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014634:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014637:	83 f8 17             	cmp    eax,0x17
c001463a:	77 13                	ja     c001464f <int_handler+0x4e>
c001463c:	83 ec 08             	sub    esp,0x8
c001463f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014641:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014644:	0f b6 c0             	movzx  eax,al
c0014647:	50                   	push   eax
c0014648:	57                   	push   edi
c0014649:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	83 c3 15             	add    ebx,0x15
c0014652:	c1 e3 04             	shl    ebx,0x4
c0014655:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014659:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014660:	31 db                	xor    ebx,ebx
c0014662:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014666:	85 c0                	test   eax,eax
c0014668:	74 13                	je     c001467d <int_handler+0x7c>
c001466a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001466d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014671:	74 1c                	je     c001468f <int_handler+0x8e>
c0014673:	83 ec 08             	sub    esp,0x8
c0014676:	52                   	push   edx
c0014677:	56                   	push   esi
c0014678:	ff d0                	call   eax
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	43                   	inc    ebx
c001467e:	83 fb 04             	cmp    ebx,0x4
c0014681:	75 df                	jne    c0014662 <int_handler+0x61>
c0014683:	83 c4 0c             	add    esp,0xc
c0014686:	31 c0                	xor    eax,eax
c0014688:	5b                   	pop    ebx
c0014689:	31 d2                	xor    edx,edx
c001468b:	5e                   	pop    esi
c001468c:	5f                   	pop    edi
c001468d:	5d                   	pop    ebp
c001468e:	c3                   	ret    
c001468f:	83 ec 08             	sub    esp,0x8
c0014692:	52                   	push   edx
c0014693:	56                   	push   esi
c0014694:	ff d0                	call   eax
c0014696:	83 c4 10             	add    esp,0x10
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	5b                   	pop    ebx
c001469d:	5e                   	pop    esi
c001469e:	5f                   	pop    edi
c001469f:	5d                   	pop    ebp
c00146a0:	c3                   	ret    
c00146a1:	90                   	nop

c00146a2 <InterruptController::InterruptController(char const*)>:
c00146a2:	83 ec 1c             	sub    esp,0x1c
c00146a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a9:	83 ec 08             	sub    esp,0x8
c00146ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146b0:	50                   	push   eax
c00146b1:	e8 72 f8 ff ff       	call   c0013f28 <Device::Device(char const*)>
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c00146be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c2:	89 10                	mov    DWORD PTR [eax],edx
c00146c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146da:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146e2:	7f 5e                	jg     c0014742 <InterruptController::InterruptController(char const*)+0xa0>
c00146e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146ec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146f1:	7f 49                	jg     c001473c <InterruptController::InterruptController(char const*)+0x9a>
c00146f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014706:	01 ca                	add    edx,ecx
c0014708:	83 c2 54             	add    edx,0x54
c001470b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014717:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001471b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014722:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014726:	01 ca                	add    edx,ecx
c0014728:	81 c2 54 04 00 00    	add    edx,0x454
c001472e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014736:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001473a:	eb b0                	jmp    c00146ec <InterruptController::InterruptController(char const*)+0x4a>
c001473c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014740:	eb 98                	jmp    c00146da <InterruptController::InterruptController(char const*)+0x38>
c0014742:	90                   	nop
c0014743:	83 c4 1c             	add    esp,0x1c
c0014746:	c3                   	ret    
c0014747:	90                   	nop

c0014748 <InterruptController::~InterruptController()>:
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c0014750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014754:	89 10                	mov    DWORD PTR [eax],edx
c0014756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	50                   	push   eax
c001475e:	e8 8f f4 ff ff       	call   c0013bf2 <Device::~Device()>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	90                   	nop
c0014767:	83 c4 0c             	add    esp,0xc
c001476a:	c3                   	ret    
c001476b:	90                   	nop

c001476c <InterruptController::~InterruptController()>:
c001476c:	83 ec 0c             	sub    esp,0xc
c001476f:	83 ec 0c             	sub    esp,0xc
c0014772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014776:	e8 cd ff ff ff       	call   c0014748 <InterruptController::~InterruptController()>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	83 ec 08             	sub    esp,0x8
c0014781:	68 58 21 00 00       	push   0x2158
c0014786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478a:	e8 7c e0 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001478f:	83 c4 10             	add    esp,0x10
c0014792:	83 c4 0c             	add    esp,0xc
c0014795:	c3                   	ret    

c0014796 <displayDebugInfo(regs*)>:
c0014796:	55                   	push   ebp
c0014797:	57                   	push   edi
c0014798:	56                   	push   esi
c0014799:	53                   	push   ebx
c001479a:	83 ec 24             	sub    esp,0x24
c001479d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00147a1:	0f 20 c2             	mov    edx,cr0
c00147a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00147a8:	0f 20 d7             	mov    edi,cr2
c00147ab:	0f 20 de             	mov    esi,cr3
c00147ae:	0f 20 e5             	mov    ebp,cr4
c00147b1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00147b4:	68 a6 b7 02 c0       	push   0xc002b7a6
c00147b9:	e8 2d e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147be:	59                   	pop    ecx
c00147bf:	58                   	pop    eax
c00147c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147c3:	68 b1 b7 02 c0       	push   0xc002b7b1
c00147c8:	e8 1e e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147cd:	58                   	pop    eax
c00147ce:	5a                   	pop    edx
c00147cf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147d2:	68 bc b7 02 c0       	push   0xc002b7bc
c00147d7:	e8 0f e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147dc:	59                   	pop    ecx
c00147dd:	58                   	pop    eax
c00147de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147e1:	68 c7 b7 02 c0       	push   0xc002b7c7
c00147e6:	e8 00 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147eb:	58                   	pop    eax
c00147ec:	5a                   	pop    edx
c00147ed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147f0:	68 d2 b7 02 c0       	push   0xc002b7d2
c00147f5:	e8 f1 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147fa:	59                   	pop    ecx
c00147fb:	58                   	pop    eax
c00147fc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147ff:	68 dd b7 02 c0       	push   0xc002b7dd
c0014804:	e8 e2 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014809:	58                   	pop    eax
c001480a:	5a                   	pop    edx
c001480b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001480e:	68 e8 b7 02 c0       	push   0xc002b7e8
c0014813:	e8 d3 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014818:	59                   	pop    ecx
c0014819:	58                   	pop    eax
c001481a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001481d:	68 f3 b7 02 c0       	push   0xc002b7f3
c0014822:	e8 c4 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014827:	58                   	pop    eax
c0014828:	5a                   	pop    edx
c0014829:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001482c:	68 fe b7 02 c0       	push   0xc002b7fe
c0014831:	e8 b5 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014836:	59                   	pop    ecx
c0014837:	58                   	pop    eax
c0014838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001483b:	68 0d b8 02 c0       	push   0xc002b80d
c0014840:	e8 a6 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014845:	58                   	pop    eax
c0014846:	5a                   	pop    edx
c0014847:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001484a:	68 18 b8 02 c0       	push   0xc002b818
c001484f:	e8 97 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014854:	59                   	pop    ecx
c0014855:	58                   	pop    eax
c0014856:	57                   	push   edi
c0014857:	68 23 b8 02 c0       	push   0xc002b823
c001485c:	e8 8a e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014861:	58                   	pop    eax
c0014862:	5a                   	pop    edx
c0014863:	56                   	push   esi
c0014864:	68 2e b8 02 c0       	push   0xc002b82e
c0014869:	e8 7d e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001486e:	59                   	pop    ecx
c001486f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487a:	e8 8f be ff ff       	call   c001070e <setActiveTerminal(VgaText*)>
c001487f:	58                   	pop    eax
c0014880:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014883:	5a                   	pop    edx
c0014884:	c1 e0 05             	shl    eax,0x5
c0014887:	05 e0 df 02 c0       	add    eax,0xc002dfe0
c001488c:	50                   	push   eax
c001488d:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014898:	e8 43 c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001489d:	59                   	pop    ecx
c001489e:	58                   	pop    eax
c001489f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148a4:	68 39 b8 02 c0       	push   0xc002b839
c00148a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148af:	e8 2c c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00148b4:	58                   	pop    eax
c00148b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ba:	5a                   	pop    edx
c00148bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148be:	83 c0 0c             	add    eax,0xc
c00148c1:	50                   	push   eax
c00148c2:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 0e c2 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00148d2:	59                   	pop    ecx
c00148d3:	58                   	pop    eax
c00148d4:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148d9:	68 42 b8 02 c0       	push   0xc002b842
c00148de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e4:	e8 f7 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00148e9:	58                   	pop    eax
c00148ea:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148ef:	5a                   	pop    edx
c00148f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 9c c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014905:	68 4a b8 02 c0       	push   0xc002b84a
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 cb c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014915:	58                   	pop    eax
c0014916:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001491b:	5a                   	pop    edx
c001491c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001491f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014925:	e8 70 c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001492a:	59                   	pop    ecx
c001492b:	58                   	pop    eax
c001492c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014931:	68 52 b8 02 c0       	push   0xc002b852
c0014936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493c:	e8 9f c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014941:	58                   	pop    eax
c0014942:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014947:	5a                   	pop    edx
c0014948:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001494b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014951:	e8 44 c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014956:	59                   	pop    ecx
c0014957:	58                   	pop    eax
c0014958:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001495d:	68 5a b8 02 c0       	push   0xc002b85a
c0014962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014968:	e8 73 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001496d:	58                   	pop    eax
c001496e:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014973:	5a                   	pop    edx
c0014974:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 18 c1 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014982:	59                   	pop    ecx
c0014983:	58                   	pop    eax
c0014984:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014989:	68 62 b8 02 c0       	push   0xc002b862
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 47 c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014999:	58                   	pop    eax
c001499a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001499f:	5a                   	pop    edx
c00149a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00149a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a9:	e8 ec c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149b5:	68 6a b8 02 c0       	push   0xc002b86a
c00149ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c0:	e8 1b c1 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00149c5:	58                   	pop    eax
c00149c6:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149cb:	5a                   	pop    edx
c00149cc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d5:	e8 c0 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c00149da:	59                   	pop    ecx
c00149db:	58                   	pop    eax
c00149dc:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149e1:	68 72 b8 02 c0       	push   0xc002b872
c00149e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ec:	e8 ef c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c00149f1:	58                   	pop    eax
c00149f2:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149f7:	5a                   	pop    edx
c00149f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149fc:	52                   	push   edx
c00149fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a03:	e8 92 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a08:	59                   	pop    ecx
c0014a09:	58                   	pop    eax
c0014a0a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a0f:	68 7b b8 02 c0       	push   0xc002b87b
c0014a14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1a:	e8 c1 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a1f:	58                   	pop    eax
c0014a20:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a25:	5a                   	pop    edx
c0014a26:	57                   	push   edi
c0014a27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2d:	e8 68 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a32:	59                   	pop    ecx
c0014a33:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a38:	5f                   	pop    edi
c0014a39:	68 83 b8 02 c0       	push   0xc002b883
c0014a3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a44:	e8 97 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a49:	58                   	pop    eax
c0014a4a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a4f:	5a                   	pop    edx
c0014a50:	56                   	push   esi
c0014a51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a57:	e8 3e c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a5c:	59                   	pop    ecx
c0014a5d:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a62:	5e                   	pop    esi
c0014a63:	68 8b b8 02 c0       	push   0xc002b88b
c0014a68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6e:	e8 6d c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a73:	5f                   	pop    edi
c0014a74:	58                   	pop    eax
c0014a75:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a7a:	55                   	push   ebp
c0014a7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a81:	e8 14 c0 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014a86:	58                   	pop    eax
c0014a87:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a8c:	5a                   	pop    edx
c0014a8d:	68 93 b8 02 c0       	push   0xc002b893
c0014a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a98:	e8 43 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014a9d:	0f 21 c0             	mov    eax,db0
c0014aa0:	59                   	pop    ecx
c0014aa1:	5e                   	pop    esi
c0014aa2:	50                   	push   eax
c0014aa3:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014aa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aae:	e8 e7 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014ab3:	5f                   	pop    edi
c0014ab4:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ab9:	5d                   	pop    ebp
c0014aba:	68 9c b8 02 c0       	push   0xc002b89c
c0014abf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac5:	e8 16 c0 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014aca:	0f 21 c8             	mov    eax,db1
c0014acd:	5a                   	pop    edx
c0014ace:	59                   	pop    ecx
c0014acf:	50                   	push   eax
c0014ad0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ad5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014adb:	e8 ba bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014ae0:	5e                   	pop    esi
c0014ae1:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ae6:	5f                   	pop    edi
c0014ae7:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014aec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af2:	e8 e9 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014af7:	0f 21 d0             	mov    eax,db2
c0014afa:	5d                   	pop    ebp
c0014afb:	5a                   	pop    edx
c0014afc:	50                   	push   eax
c0014afd:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b08:	e8 8d bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b0d:	59                   	pop    ecx
c0014b0e:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b13:	5e                   	pop    esi
c0014b14:	68 ac b8 02 c0       	push   0xc002b8ac
c0014b19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1f:	e8 bc bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b24:	0f 21 d8             	mov    eax,db3
c0014b27:	5f                   	pop    edi
c0014b28:	5d                   	pop    ebp
c0014b29:	50                   	push   eax
c0014b2a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b35:	e8 60 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b3a:	58                   	pop    eax
c0014b3b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b40:	5a                   	pop    edx
c0014b41:	68 b4 b8 02 c0       	push   0xc002b8b4
c0014b46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4c:	e8 8f bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b51:	0f 21 f0             	mov    eax,db6
c0014b54:	59                   	pop    ecx
c0014b55:	5e                   	pop    esi
c0014b56:	50                   	push   eax
c0014b57:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b62:	e8 33 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b67:	5f                   	pop    edi
c0014b68:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b6d:	5d                   	pop    ebp
c0014b6e:	68 bc b8 02 c0       	push   0xc002b8bc
c0014b73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b79:	e8 62 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014b7e:	0f 21 f8             	mov    eax,db7
c0014b81:	5a                   	pop    edx
c0014b82:	59                   	pop    ecx
c0014b83:	50                   	push   eax
c0014b84:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8f:	e8 06 bf ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014b94:	5e                   	pop    esi
c0014b95:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b98:	e8 07 8b 00 00       	call   c001d6a4 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	85 c0                	test   eax,eax
c0014ba2:	74 7d                	je     c0014c21 <displayDebugInfo(regs*)+0x48b>
c0014ba4:	89 c6                	mov    esi,eax
c0014ba6:	50                   	push   eax
c0014ba7:	50                   	push   eax
c0014ba8:	56                   	push   esi
c0014ba9:	68 c4 b8 02 c0       	push   0xc002b8c4
c0014bae:	e8 38 dd ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014bb3:	5a                   	pop    edx
c0014bb4:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bb9:	59                   	pop    ecx
c0014bba:	68 d2 b8 02 c0       	push   0xc002b8d2
c0014bbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc5:	e8 16 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014bca:	5f                   	pop    edi
c0014bcb:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bd0:	5d                   	pop    ebp
c0014bd1:	56                   	push   esi
c0014bd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd8:	e8 03 bf ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014bdd:	58                   	pop    eax
c0014bde:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014be3:	5a                   	pop    edx
c0014be4:	68 de b8 02 c0       	push   0xc002b8de
c0014be9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bef:	e8 ec be ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c0014bf4:	59                   	pop    ecx
c0014bf5:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bfa:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014c00:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c03:	e8 d3 8a 00 00       	call   c001d6db <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014c08:	5b                   	pop    ebx
c0014c09:	5d                   	pop    ebp
c0014c0a:	50                   	push   eax
c0014c0b:	57                   	push   edi
c0014c0c:	e8 89 be ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c0014c11:	58                   	pop    eax
c0014c12:	5a                   	pop    edx
c0014c13:	56                   	push   esi
c0014c14:	68 ea b8 02 c0       	push   0xc002b8ea
c0014c19:	e8 cd dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	fa                   	cli    
c0014c22:	f4                   	hlt    
c0014c23:	eb fe                	jmp    c0014c23 <displayDebugInfo(regs*)+0x48d>

c0014c25 <x87EmulHandler(regs*, void*)>:
c0014c25:	83 ec 0c             	sub    esp,0xc
c0014c28:	0f 20 c2             	mov    edx,cr0
c0014c2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c30:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c34:	75 4b                	jne    c0014c81 <x87EmulHandler(regs*, void*)+0x5c>
c0014c36:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014c3b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c41:	85 c0                	test   eax,eax
c0014c43:	74 05                	je     c0014c4a <x87EmulHandler(regs*, void*)+0x25>
c0014c45:	83 e2 08             	and    edx,0x8
c0014c48:	75 17                	jne    c0014c61 <x87EmulHandler(regs*, void*)+0x3c>
c0014c4a:	83 ec 0c             	sub    esp,0xc
c0014c4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c51:	e8 45 af 00 00       	call   c001fb9b <Vm::x87Handler(regs*)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	84 c0                	test   al,al
c0014c5b:	74 24                	je     c0014c81 <x87EmulHandler(regs*, void*)+0x5c>
c0014c5d:	83 c4 0c             	add    esp,0xc
c0014c60:	c3                   	ret    
c0014c61:	83 ec 0c             	sub    esp,0xc
c0014c64:	68 10 b9 02 c0       	push   0xc002b910
c0014c69:	e8 7d dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c6e:	0f 06                	clts   
c0014c70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c75:	83 c4 10             	add    esp,0x10
c0014c78:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0014c7d:	83 c4 0c             	add    esp,0xc
c0014c80:	c3                   	ret    
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	68 fa b8 02 c0       	push   0xc002b8fa
c0014c89:	e8 5d dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c8e:	5a                   	pop    edx
c0014c8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c93:	e8 fe fa ff ff       	call   c0014796 <displayDebugInfo(regs*)>

c0014c98 <gpFault(regs*, void*)>:
c0014c98:	53                   	push   ebx
c0014c99:	83 ec 14             	sub    esp,0x14
c0014c9c:	c7 05 a4 f1 02 c0 74 f0 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001f074
c0014ca6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014caa:	53                   	push   ebx
c0014cab:	e8 c4 a3 00 00       	call   c001f074 <Vm::faultHandler(regs*)>
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	84 c0                	test   al,al
c0014cb5:	74 05                	je     c0014cbc <gpFault(regs*, void*)+0x24>
c0014cb7:	83 c4 08             	add    esp,0x8
c0014cba:	5b                   	pop    ebx
c0014cbb:	c3                   	ret    
c0014cbc:	83 ec 0c             	sub    esp,0xc
c0014cbf:	68 1d b9 02 c0       	push   0xc002b91d
c0014cc4:	e8 22 dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014cc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ccc:	e8 c5 fa ff ff       	call   c0014796 <displayDebugInfo(regs*)>

c0014cd1 <pgFault(regs*, void*)>:
c0014cd1:	83 ec 18             	sub    esp,0x18
c0014cd4:	68 38 b9 02 c0       	push   0xc002b938
c0014cd9:	e8 0d dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014cde:	58                   	pop    eax
c0014cdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce3:	e8 ae fa ff ff       	call   c0014796 <displayDebugInfo(regs*)>

c0014ce8 <otherISRHandler(regs*, void*)>:
c0014ce8:	53                   	push   ebx
c0014ce9:	83 ec 0c             	sub    esp,0xc
c0014cec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cf0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cf3:	50                   	push   eax
c0014cf4:	50                   	push   eax
c0014cf5:	68 45 b9 02 c0       	push   0xc002b945
c0014cfa:	e8 ec db ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014cff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d02:	e8 8f fa ff ff       	call   c0014796 <displayDebugInfo(regs*)>

c0014d07 <opcodeFault(regs*, void*)>:
c0014d07:	55                   	push   ebp
c0014d08:	89 e5                	mov    ebp,esp
c0014d0a:	56                   	push   esi
c0014d0b:	53                   	push   ebx
c0014d0c:	83 ec 40             	sub    esp,0x40
c0014d0f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014d14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d1a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d20:	84 c0                	test   al,al
c0014d22:	74 24                	je     c0014d48 <opcodeFault(regs*, void*)+0x41>
c0014d24:	83 ec 0c             	sub    esp,0xc
c0014d27:	68 64 b9 02 c0       	push   0xc002b964
c0014d2c:	e8 ba db ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3a:	8d 50 19             	lea    edx,[eax+0x19]
c0014d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d43:	e9 d5 05 00 00       	jmp    c001531d <opcodeFault(regs*, void*)+0x616>
c0014d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d4e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d51:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d55:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d65:	8a 00                	mov    al,BYTE PTR [eax]
c0014d67:	3c f0                	cmp    al,0xf0
c0014d69:	75 17                	jne    c0014d82 <opcodeFault(regs*, void*)+0x7b>
c0014d6b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d74:	8d 50 01             	lea    edx,[eax+0x1]
c0014d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7d:	e9 da 00 00 00       	jmp    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014d82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d85:	8a 00                	mov    al,BYTE PTR [eax]
c0014d87:	3c f2                	cmp    al,0xf2
c0014d89:	74 09                	je     c0014d94 <opcodeFault(regs*, void*)+0x8d>
c0014d8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d90:	3c f3                	cmp    al,0xf3
c0014d92:	75 1b                	jne    c0014daf <opcodeFault(regs*, void*)+0xa8>
c0014d94:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d98:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da1:	8d 50 01             	lea    edx,[eax+0x1]
c0014da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014daa:	e9 ad 00 00 00       	jmp    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014daf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db2:	8a 00                	mov    al,BYTE PTR [eax]
c0014db4:	3c 66                	cmp    al,0x66
c0014db6:	75 1f                	jne    c0014dd7 <opcodeFault(regs*, void*)+0xd0>
c0014db8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dbc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014dc0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dd2:	e9 85 00 00 00       	jmp    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014dd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dda:	8a 00                	mov    al,BYTE PTR [eax]
c0014ddc:	3c 67                	cmp    al,0x67
c0014dde:	75 18                	jne    c0014df8 <opcodeFault(regs*, void*)+0xf1>
c0014de0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014de4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ded:	8d 50 01             	lea    edx,[eax+0x1]
c0014df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014df6:	eb 64                	jmp    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014df8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c 2e                	cmp    al,0x2e
c0014dff:	74 09                	je     c0014e0a <opcodeFault(regs*, void*)+0x103>
c0014e01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e04:	8a 00                	mov    al,BYTE PTR [eax]
c0014e06:	3c 3e                	cmp    al,0x3e
c0014e08:	75 18                	jne    c0014e22 <opcodeFault(regs*, void*)+0x11b>
c0014e0a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e0e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e17:	8d 50 01             	lea    edx,[eax+0x1]
c0014e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e20:	eb 3a                	jmp    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014e22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e25:	8a 00                	mov    al,BYTE PTR [eax]
c0014e27:	3c 36                	cmp    al,0x36
c0014e29:	74 1b                	je     c0014e46 <opcodeFault(regs*, void*)+0x13f>
c0014e2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e30:	3c 26                	cmp    al,0x26
c0014e32:	74 12                	je     c0014e46 <opcodeFault(regs*, void*)+0x13f>
c0014e34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e37:	8a 00                	mov    al,BYTE PTR [eax]
c0014e39:	3c 64                	cmp    al,0x64
c0014e3b:	74 09                	je     c0014e46 <opcodeFault(regs*, void*)+0x13f>
c0014e3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e40:	8a 00                	mov    al,BYTE PTR [eax]
c0014e42:	3c 65                	cmp    al,0x65
c0014e44:	75 16                	jne    c0014e5c <opcodeFault(regs*, void*)+0x155>
c0014e46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e4a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e53:	8d 50 01             	lea    edx,[eax+0x1]
c0014e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e61:	3c 0f                	cmp    al,0xf
c0014e63:	0f 85 ad 00 00 00    	jne    c0014f16 <opcodeFault(regs*, void*)+0x20f>
c0014e69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6c:	40                   	inc    eax
c0014e6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6f:	3c c2                	cmp    al,0xc2
c0014e71:	74 0e                	je     c0014e81 <opcodeFault(regs*, void*)+0x17a>
c0014e73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e76:	40                   	inc    eax
c0014e77:	8a 00                	mov    al,BYTE PTR [eax]
c0014e79:	3c c3                	cmp    al,0xc3
c0014e7b:	0f 85 95 00 00 00    	jne    c0014f16 <opcodeFault(regs*, void*)+0x20f>
c0014e81:	83 ec 0c             	sub    esp,0xc
c0014e84:	68 87 b9 02 c0       	push   0xc002b987
c0014e89:	e8 5d da ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e97:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ea3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea8:	8d 50 fe             	lea    edx,[eax-0x2]
c0014eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eae:	88 10                	mov    BYTE PTR [eax],dl
c0014eb0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014eb3:	50                   	push   eax
c0014eb4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014eb7:	50                   	push   eax
c0014eb8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ebb:	50                   	push   eax
c0014ebc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ebf:	e8 2a 4b 00 00       	call   c00199ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ecd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ed0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ed3:	01 d0                	add    eax,edx
c0014ed5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ede:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ee1:	48                   	dec    eax
c0014ee2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014eeb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	83 ec 04             	sub    esp,0x4
c0014ef4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ef7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014efa:	50                   	push   eax
c0014efb:	e8 b4 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014f06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014f09:	01 c2                	add    edx,eax
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f11:	e9 07 04 00 00       	jmp    c001531d <opcodeFault(regs*, void*)+0x616>
c0014f16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f19:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1b:	3c 0f                	cmp    al,0xf
c0014f1d:	0f 85 8b 01 00 00    	jne    c00150ae <opcodeFault(regs*, void*)+0x3a7>
c0014f23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f26:	40                   	inc    eax
c0014f27:	8a 00                	mov    al,BYTE PTR [eax]
c0014f29:	3c c7                	cmp    al,0xc7
c0014f2b:	0f 86 7d 01 00 00    	jbe    c00150ae <opcodeFault(regs*, void*)+0x3a7>
c0014f31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f34:	40                   	inc    eax
c0014f35:	8a 00                	mov    al,BYTE PTR [eax]
c0014f37:	3c cf                	cmp    al,0xcf
c0014f39:	0f 87 6f 01 00 00    	ja     c00150ae <opcodeFault(regs*, void*)+0x3a7>
c0014f3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f42:	40                   	inc    eax
c0014f43:	8a 00                	mov    al,BYTE PTR [eax]
c0014f45:	83 c0 38             	add    eax,0x38
c0014f48:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f4b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f4f:	75 0b                	jne    c0014f5c <opcodeFault(regs*, void*)+0x255>
c0014f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f54:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f5a:	eb 75                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014f5c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f60:	75 0b                	jne    c0014f6d <opcodeFault(regs*, void*)+0x266>
c0014f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f65:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6b:	eb 64                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014f6d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f71:	75 0b                	jne    c0014f7e <opcodeFault(regs*, void*)+0x277>
c0014f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f76:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7c:	eb 53                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014f7e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f82:	75 0b                	jne    c0014f8f <opcodeFault(regs*, void*)+0x288>
c0014f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f8a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f8d:	eb 42                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014f8f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f93:	75 0b                	jne    c0014fa0 <opcodeFault(regs*, void*)+0x299>
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f9e:	eb 31                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014fa0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fa4:	75 0b                	jne    c0014fb1 <opcodeFault(regs*, void*)+0x2aa>
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014faf:	eb 20                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014fb1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fb5:	75 0b                	jne    c0014fc2 <opcodeFault(regs*, void*)+0x2bb>
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fc0:	eb 0f                	jmp    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014fc2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fc6:	75 09                	jne    c0014fd1 <opcodeFault(regs*, void*)+0x2ca>
c0014fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fd1:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fd5:	74 10                	je     c0014fe7 <opcodeFault(regs*, void*)+0x2e0>
c0014fd7:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fde:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fe5:	eb 2d                	jmp    c0015014 <opcodeFault(regs*, void*)+0x30d>
c0014fe7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fea:	c1 e0 18             	shl    eax,0x18
c0014fed:	89 c2                	mov    edx,eax
c0014fef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ff2:	c1 e0 08             	shl    eax,0x8
c0014ff5:	25 00 00 ff 00       	and    eax,0xff0000
c0014ffa:	09 c2                	or     edx,eax
c0014ffc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fff:	c1 e8 08             	shr    eax,0x8
c0015002:	25 00 ff 00 00       	and    eax,0xff00
c0015007:	09 c2                	or     edx,eax
c0015009:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001500c:	c1 e8 18             	shr    eax,0x18
c001500f:	09 d0                	or     eax,edx
c0015011:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015014:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015018:	75 0b                	jne    c0015025 <opcodeFault(regs*, void*)+0x31e>
c001501a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015020:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015023:	eb 75                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c0015025:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015029:	75 0b                	jne    c0015036 <opcodeFault(regs*, void*)+0x32f>
c001502b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015031:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015034:	eb 64                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c0015036:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001503a:	75 0b                	jne    c0015047 <opcodeFault(regs*, void*)+0x340>
c001503c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015042:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015045:	eb 53                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c0015047:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001504b:	75 0b                	jne    c0015058 <opcodeFault(regs*, void*)+0x351>
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015053:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015056:	eb 42                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c0015058:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001505c:	75 0b                	jne    c0015069 <opcodeFault(regs*, void*)+0x362>
c001505e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015061:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015064:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015067:	eb 31                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c0015069:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001506d:	75 0b                	jne    c001507a <opcodeFault(regs*, void*)+0x373>
c001506f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015072:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015075:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015078:	eb 20                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c001507a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001507e:	75 0b                	jne    c001508b <opcodeFault(regs*, void*)+0x384>
c0015080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015083:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015086:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015089:	eb 0f                	jmp    c001509a <opcodeFault(regs*, void*)+0x393>
c001508b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001508f:	75 09                	jne    c001509a <opcodeFault(regs*, void*)+0x393>
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015097:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150a0:	8d 50 02             	lea    edx,[eax+0x2]
c00150a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150a9:	e9 6f 02 00 00       	jmp    c001531d <opcodeFault(regs*, void*)+0x616>
c00150ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b1:	8a 00                	mov    al,BYTE PTR [eax]
c00150b3:	3c 0f                	cmp    al,0xf
c00150b5:	0f 85 8d 01 00 00    	jne    c0015248 <opcodeFault(regs*, void*)+0x541>
c00150bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150be:	40                   	inc    eax
c00150bf:	8a 00                	mov    al,BYTE PTR [eax]
c00150c1:	3c c7                	cmp    al,0xc7
c00150c3:	0f 85 7f 01 00 00    	jne    c0015248 <opcodeFault(regs*, void*)+0x541>
c00150c9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d2:	8d 50 01             	lea    edx,[eax+0x1]
c00150d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150db:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150de:	50                   	push   eax
c00150df:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150e2:	50                   	push   eax
c00150e3:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150e6:	50                   	push   eax
c00150e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150ea:	e8 ff 48 00 00       	call   c00199ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150ef:	83 c4 10             	add    esp,0x10
c00150f2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150f5:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150f8:	83 f0 01             	xor    eax,0x1
c00150fb:	84 c0                	test   al,al
c00150fd:	0f 84 45 01 00 00    	je     c0015248 <opcodeFault(regs*, void*)+0x541>
c0015103:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015106:	3c 01                	cmp    al,0x1
c0015108:	0f 85 3a 01 00 00    	jne    c0015248 <opcodeFault(regs*, void*)+0x541>
c001510e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015111:	83 f0 01             	xor    eax,0x1
c0015114:	84 c0                	test   al,al
c0015116:	0f 84 2c 01 00 00    	je     c0015248 <opcodeFault(regs*, void*)+0x541>
c001511c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015122:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015125:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001512c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001512f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015132:	89 c2                	mov    edx,eax
c0015134:	b8 00 00 00 00       	mov    eax,0x0
c0015139:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001513c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001513f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015142:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015145:	ba 00 00 00 00       	mov    edx,0x0
c001514a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001514d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015153:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015156:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015159:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015160:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015163:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015166:	89 c2                	mov    edx,eax
c0015168:	b8 00 00 00 00       	mov    eax,0x0
c001516d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015170:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015176:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015179:	ba 00 00 00 00       	mov    edx,0x0
c001517e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015181:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015184:	fa                   	cli    
c0015185:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001518a:	40                   	inc    eax
c001518b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015190:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015193:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015196:	8b 00                	mov    eax,DWORD PTR [eax]
c0015198:	89 c1                	mov    ecx,eax
c001519a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001519d:	89 cb                	mov    ebx,ecx
c001519f:	89 d0                	mov    eax,edx
c00151a1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00151a4:	89 c6                	mov    esi,eax
c00151a6:	89 f0                	mov    eax,esi
c00151a8:	09 d8                	or     eax,ebx
c00151aa:	85 c0                	test   eax,eax
c00151ac:	75 21                	jne    c00151cf <opcodeFault(regs*, void*)+0x4c8>
c00151ae:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00151b1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00151b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00151b7:	89 01                	mov    DWORD PTR [ecx],eax
c00151b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c2:	83 c8 40             	or     eax,0x40
c00151c5:	89 c2                	mov    edx,eax
c00151c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ca:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151cd:	eb 3e                	jmp    c001520d <opcodeFault(regs*, void*)+0x506>
c00151cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151da:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151dd:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151e6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151e9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151ec:	89 d0                	mov    eax,edx
c00151ee:	31 d2                	xor    edx,edx
c00151f0:	89 c3                	mov    ebx,eax
c00151f2:	89 d6                	mov    esi,edx
c00151f4:	89 da                	mov    edx,ebx
c00151f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015202:	83 e0 bf             	and    eax,0xffffffbf
c0015205:	89 c2                	mov    edx,eax
c0015207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001520d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015212:	48                   	dec    eax
c0015213:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015218:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001521d:	85 c0                	test   eax,eax
c001521f:	75 01                	jne    c0015222 <opcodeFault(regs*, void*)+0x51b>
c0015221:	fb                   	sti    
c0015222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015228:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001522b:	01 c2                	add    edx,eax
c001522d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015230:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015233:	83 ec 0c             	sub    esp,0xc
c0015236:	68 96 b9 02 c0       	push   0xc002b996
c001523b:	e8 ab d6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	e9 d5 00 00 00       	jmp    c001531d <opcodeFault(regs*, void*)+0x616>
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	68 a9 b9 02 c0       	push   0xc002b9a9
c0015250:	e8 96 d6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001525e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015261:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015264:	c1 e0 04             	shl    eax,0x4
c0015267:	01 d0                	add    eax,edx
c0015269:	83 c0 03             	add    eax,0x3
c001526c:	8a 00                	mov    al,BYTE PTR [eax]
c001526e:	0f b6 d8             	movzx  ebx,al
c0015271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015274:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001527d:	c1 e0 04             	shl    eax,0x4
c0015280:	01 d0                	add    eax,edx
c0015282:	83 c0 02             	add    eax,0x2
c0015285:	8a 00                	mov    al,BYTE PTR [eax]
c0015287:	0f b6 c8             	movzx  ecx,al
c001528a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015296:	c1 e0 04             	shl    eax,0x4
c0015299:	01 d0                	add    eax,edx
c001529b:	40                   	inc    eax
c001529c:	8a 00                	mov    al,BYTE PTR [eax]
c001529e:	0f b6 d0             	movzx  edx,al
c00152a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a4:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00152a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152ad:	c1 e0 04             	shl    eax,0x4
c00152b0:	01 f0                	add    eax,esi
c00152b2:	8a 00                	mov    al,BYTE PTR [eax]
c00152b4:	0f b6 c0             	movzx  eax,al
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	53                   	push   ebx
c00152bb:	51                   	push   ecx
c00152bc:	52                   	push   edx
c00152bd:	50                   	push   eax
c00152be:	68 bc b9 02 c0       	push   0xc002b9bc
c00152c3:	e8 23 d6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00152c8:	83 c4 20             	add    esp,0x20
c00152cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d1:	83 c0 03             	add    eax,0x3
c00152d4:	8a 00                	mov    al,BYTE PTR [eax]
c00152d6:	0f b6 d8             	movzx  ebx,al
c00152d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152df:	83 c0 02             	add    eax,0x2
c00152e2:	8a 00                	mov    al,BYTE PTR [eax]
c00152e4:	0f b6 c8             	movzx  ecx,al
c00152e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ed:	40                   	inc    eax
c00152ee:	8a 00                	mov    al,BYTE PTR [eax]
c00152f0:	0f b6 d0             	movzx  edx,al
c00152f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f9:	8a 00                	mov    al,BYTE PTR [eax]
c00152fb:	0f b6 c0             	movzx  eax,al
c00152fe:	83 ec 0c             	sub    esp,0xc
c0015301:	53                   	push   ebx
c0015302:	51                   	push   ecx
c0015303:	52                   	push   edx
c0015304:	50                   	push   eax
c0015305:	68 e4 b9 02 c0       	push   0xc002b9e4
c001530a:	e8 dc d5 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001530f:	83 c4 20             	add    esp,0x20
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015318:	e8 79 f4 ff ff       	call   c0014796 <displayDebugInfo(regs*)>
c001531d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015320:	5b                   	pop    ebx
c0015321:	5e                   	pop    esi
c0015322:	5d                   	pop    ebp
c0015323:	c3                   	ret    

c0015324 <displayProgramFault(char const*)>:
c0015324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015329:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001532c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015332:	85 c0                	test   eax,eax
c0015334:	74 15                	je     c001534b <displayProgramFault(char const*)+0x27>
c0015336:	83 ec 0c             	sub    esp,0xc
c0015339:	6a 04                	push   0x4
c001533b:	6a 0f                	push   0xf
c001533d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015341:	50                   	push   eax
c0015342:	e8 95 b4 ff ff       	call   c00107dc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015347:	83 c4 1c             	add    esp,0x1c
c001534a:	c3                   	ret    
c001534b:	c3                   	ret    

c001534c <setupInterruptController()>:
c001534c:	55                   	push   ebp
c001534d:	89 e5                	mov    ebp,esp
c001534f:	53                   	push   ebx
c0015350:	83 ec 24             	sub    esp,0x24
c0015353:	b8 00 00 00 00       	mov    eax,0x0
c0015358:	85 c0                	test   eax,eax
c001535a:	0f 95 c0             	setne  al
c001535d:	84 c0                	test   al,al
c001535f:	74 5b                	je     c00153bc <setupInterruptController()+0x70>
c0015361:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015368:	83 ec 0c             	sub    esp,0xc
c001536b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001536e:	e8 19 a5 ff ff       	call   c000f88c <malloc>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	89 c3                	mov    ebx,eax
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	53                   	push   ebx
c001537c:	e8 09 0e 01 00       	call   c002618a <APIC::APIC()>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015387:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001538a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001538d:	8b 00                	mov    eax,DWORD PTR [eax]
c001538f:	83 c0 08             	add    eax,0x8
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	6a 00                	push   0x0
c0015396:	6a 00                	push   0x0
c0015398:	6a 00                	push   0x0
c001539a:	52                   	push   edx
c001539b:	ff d0                	call   eax
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153a5:	83 ec 08             	sub    esp,0x8
c00153a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153ab:	50                   	push   eax
c00153ac:	e8 73 e9 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153b7:	e9 89 03 00 00       	jmp    c0015745 <setupInterruptController()+0x3f9>
c00153bc:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c00153c1:	84 c0                	test   al,al
c00153c3:	75 24                	jne    c00153e9 <setupInterruptController()+0x9d>
c00153c5:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153ca:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153d0:	83 e2 fe             	and    edx,0xfffffffe
c00153d3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153d9:	83 ec 0c             	sub    esp,0xc
c00153dc:	68 09 ba 02 c0       	push   0xc002ba09
c00153e1:	e8 05 d5 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00153e6:	83 c4 10             	add    esp,0x10
c00153e9:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153ee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153f4:	83 e0 01             	and    eax,0x1
c00153f7:	84 c0                	test   al,al
c00153f9:	0f 95 c0             	setne  al
c00153fc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153ff:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015406:	83 ec 0c             	sub    esp,0xc
c0015409:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001540c:	e8 7b a4 ff ff       	call   c000f88c <malloc>
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	89 c3                	mov    ebx,eax
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	53                   	push   ebx
c001541a:	e8 c3 12 01 00       	call   c00266e2 <PIC::PIC()>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015425:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542b:	8b 00                	mov    eax,DWORD PTR [eax]
c001542d:	83 c0 08             	add    eax,0x8
c0015430:	8b 00                	mov    eax,DWORD PTR [eax]
c0015432:	6a 00                	push   0x0
c0015434:	6a 00                	push   0x0
c0015436:	6a 00                	push   0x0
c0015438:	52                   	push   edx
c0015439:	ff d0                	call   eax
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015442:	74 73                	je     c00154b7 <setupInterruptController()+0x16b>
c0015444:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	83 c0 0c             	add    eax,0xc
c001544f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015451:	6a 00                	push   0x0
c0015453:	6a 00                	push   0x0
c0015455:	6a 00                	push   0x0
c0015457:	52                   	push   edx
c0015458:	ff d0                	call   eax
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015461:	74 15                	je     c0015478 <setupInterruptController()+0x12c>
c0015463:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015466:	8b 00                	mov    eax,DWORD PTR [eax]
c0015468:	83 c0 04             	add    eax,0x4
c001546b:	8b 00                	mov    eax,DWORD PTR [eax]
c001546d:	83 ec 0c             	sub    esp,0xc
c0015470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015473:	ff d0                	call   eax
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001547f:	83 ec 0c             	sub    esp,0xc
c0015482:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015485:	e8 02 a4 ff ff       	call   c000f88c <malloc>
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	89 c3                	mov    ebx,eax
c001548f:	83 ec 0c             	sub    esp,0xc
c0015492:	53                   	push   ebx
c0015493:	e8 f2 0c 01 00       	call   c002618a <APIC::APIC()>
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001549e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00154a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a6:	83 c0 08             	add    eax,0x8
c00154a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ab:	6a 00                	push   0x0
c00154ad:	6a 00                	push   0x0
c00154af:	6a 00                	push   0x0
c00154b1:	52                   	push   edx
c00154b2:	ff d0                	call   eax
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00154bc:	83 ec 08             	sub    esp,0x8
c00154bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c2:	50                   	push   eax
c00154c3:	e8 5c e8 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	c7 05 a8 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a8,0x0
c00154d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154da:	83 c0 24             	add    eax,0x24
c00154dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154df:	6a 00                	push   0x0
c00154e1:	68 e8 4c 01 c0       	push   0xc0014ce8
c00154e6:	6a 00                	push   0x0
c00154e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154eb:	ff d0                	call   eax
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f5:	83 c0 24             	add    eax,0x24
c00154f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fa:	6a 00                	push   0x0
c00154fc:	68 e8 4c 01 c0       	push   0xc0014ce8
c0015501:	6a 01                	push   0x1
c0015503:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015506:	ff d0                	call   eax
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015510:	83 c0 24             	add    eax,0x24
c0015513:	8b 00                	mov    eax,DWORD PTR [eax]
c0015515:	6a 00                	push   0x0
c0015517:	68 f3 45 01 c0       	push   0xc00145f3
c001551c:	6a 02                	push   0x2
c001551e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015521:	ff d0                	call   eax
c0015523:	83 c4 10             	add    esp,0x10
c0015526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015529:	8b 00                	mov    eax,DWORD PTR [eax]
c001552b:	83 c0 24             	add    eax,0x24
c001552e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015530:	6a 00                	push   0x0
c0015532:	68 e8 4c 01 c0       	push   0xc0014ce8
c0015537:	6a 03                	push   0x3
c0015539:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553c:	ff d0                	call   eax
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015544:	8b 00                	mov    eax,DWORD PTR [eax]
c0015546:	83 c0 24             	add    eax,0x24
c0015549:	8b 00                	mov    eax,DWORD PTR [eax]
c001554b:	6a 00                	push   0x0
c001554d:	68 e8 4c 01 c0       	push   0xc0014ce8
c0015552:	6a 04                	push   0x4
c0015554:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015557:	ff d0                	call   eax
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015561:	83 c0 24             	add    eax,0x24
c0015564:	8b 00                	mov    eax,DWORD PTR [eax]
c0015566:	6a 00                	push   0x0
c0015568:	68 e8 4c 01 c0       	push   0xc0014ce8
c001556d:	6a 05                	push   0x5
c001556f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015572:	ff d0                	call   eax
c0015574:	83 c4 10             	add    esp,0x10
c0015577:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557a:	8b 00                	mov    eax,DWORD PTR [eax]
c001557c:	83 c0 24             	add    eax,0x24
c001557f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015581:	6a 00                	push   0x0
c0015583:	68 07 4d 01 c0       	push   0xc0014d07
c0015588:	6a 06                	push   0x6
c001558a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558d:	ff d0                	call   eax
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015595:	8b 00                	mov    eax,DWORD PTR [eax]
c0015597:	83 c0 24             	add    eax,0x24
c001559a:	8b 00                	mov    eax,DWORD PTR [eax]
c001559c:	6a 00                	push   0x0
c001559e:	68 25 4c 01 c0       	push   0xc0014c25
c00155a3:	6a 07                	push   0x7
c00155a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a8:	ff d0                	call   eax
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b2:	83 c0 24             	add    eax,0x24
c00155b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b7:	6a 00                	push   0x0
c00155b9:	68 0e 44 01 c0       	push   0xc001440e
c00155be:	6a 08                	push   0x8
c00155c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c3:	ff d0                	call   eax
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cd:	83 c0 24             	add    eax,0x24
c00155d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d2:	6a 00                	push   0x0
c00155d4:	68 e8 4c 01 c0       	push   0xc0014ce8
c00155d9:	6a 09                	push   0x9
c00155db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155de:	ff d0                	call   eax
c00155e0:	83 c4 10             	add    esp,0x10
c00155e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e8:	83 c0 24             	add    eax,0x24
c00155eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ed:	6a 00                	push   0x0
c00155ef:	68 e8 4c 01 c0       	push   0xc0014ce8
c00155f4:	6a 0a                	push   0xa
c00155f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f9:	ff d0                	call   eax
c00155fb:	83 c4 10             	add    esp,0x10
c00155fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015601:	8b 00                	mov    eax,DWORD PTR [eax]
c0015603:	83 c0 24             	add    eax,0x24
c0015606:	8b 00                	mov    eax,DWORD PTR [eax]
c0015608:	6a 00                	push   0x0
c001560a:	68 e8 4c 01 c0       	push   0xc0014ce8
c001560f:	6a 0b                	push   0xb
c0015611:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015614:	ff d0                	call   eax
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561c:	8b 00                	mov    eax,DWORD PTR [eax]
c001561e:	83 c0 24             	add    eax,0x24
c0015621:	8b 00                	mov    eax,DWORD PTR [eax]
c0015623:	6a 00                	push   0x0
c0015625:	68 e8 4c 01 c0       	push   0xc0014ce8
c001562a:	6a 0c                	push   0xc
c001562c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562f:	ff d0                	call   eax
c0015631:	83 c4 10             	add    esp,0x10
c0015634:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015637:	8b 00                	mov    eax,DWORD PTR [eax]
c0015639:	83 c0 24             	add    eax,0x24
c001563c:	8b 00                	mov    eax,DWORD PTR [eax]
c001563e:	6a 00                	push   0x0
c0015640:	68 98 4c 01 c0       	push   0xc0014c98
c0015645:	6a 0d                	push   0xd
c0015647:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564a:	ff d0                	call   eax
c001564c:	83 c4 10             	add    esp,0x10
c001564f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015652:	8b 00                	mov    eax,DWORD PTR [eax]
c0015654:	83 c0 24             	add    eax,0x24
c0015657:	8b 00                	mov    eax,DWORD PTR [eax]
c0015659:	6a 00                	push   0x0
c001565b:	68 d1 4c 01 c0       	push   0xc0014cd1
c0015660:	6a 0e                	push   0xe
c0015662:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015665:	ff d0                	call   eax
c0015667:	83 c4 10             	add    esp,0x10
c001566a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566d:	8b 00                	mov    eax,DWORD PTR [eax]
c001566f:	83 c0 24             	add    eax,0x24
c0015672:	8b 00                	mov    eax,DWORD PTR [eax]
c0015674:	6a 00                	push   0x0
c0015676:	68 e8 4c 01 c0       	push   0xc0014ce8
c001567b:	6a 0f                	push   0xf
c001567d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015680:	ff d0                	call   eax
c0015682:	83 c4 10             	add    esp,0x10
c0015685:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015688:	8b 00                	mov    eax,DWORD PTR [eax]
c001568a:	83 c0 24             	add    eax,0x24
c001568d:	8b 00                	mov    eax,DWORD PTR [eax]
c001568f:	6a 00                	push   0x0
c0015691:	68 e8 4c 01 c0       	push   0xc0014ce8
c0015696:	6a 10                	push   0x10
c0015698:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569b:	ff d0                	call   eax
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a5:	83 c0 24             	add    eax,0x24
c00156a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156aa:	6a 00                	push   0x0
c00156ac:	68 e8 4c 01 c0       	push   0xc0014ce8
c00156b1:	6a 11                	push   0x11
c00156b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b6:	ff d0                	call   eax
c00156b8:	83 c4 10             	add    esp,0x10
c00156bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156be:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c0:	83 c0 24             	add    eax,0x24
c00156c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c5:	6a 00                	push   0x0
c00156c7:	68 e8 4c 01 c0       	push   0xc0014ce8
c00156cc:	6a 12                	push   0x12
c00156ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d1:	ff d0                	call   eax
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156db:	83 c0 24             	add    eax,0x24
c00156de:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e0:	6a 00                	push   0x0
c00156e2:	68 e8 4c 01 c0       	push   0xc0014ce8
c00156e7:	6a 13                	push   0x13
c00156e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ec:	ff d0                	call   eax
c00156ee:	83 c4 10             	add    esp,0x10
c00156f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f6:	83 c0 24             	add    eax,0x24
c00156f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fb:	6a 00                	push   0x0
c00156fd:	68 e8 4c 01 c0       	push   0xc0014ce8
c0015702:	6a 14                	push   0x14
c0015704:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015707:	ff d0                	call   eax
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015711:	83 c0 24             	add    eax,0x24
c0015714:	8b 00                	mov    eax,DWORD PTR [eax]
c0015716:	6a 00                	push   0x0
c0015718:	68 e8 4c 01 c0       	push   0xc0014ce8
c001571d:	6a 1e                	push   0x1e
c001571f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015722:	ff d0                	call   eax
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572a:	8b 00                	mov    eax,DWORD PTR [eax]
c001572c:	83 c0 24             	add    eax,0x24
c001572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015731:	6a 00                	push   0x0
c0015733:	68 1a c7 01 c0       	push   0xc001c71a
c0015738:	6a 60                	push   0x60
c001573a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001573d:	ff d0                	call   eax
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015745:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015748:	c9                   	leave  
c0015749:	c3                   	ret    

c001574a <InterruptController::convertLegacyIRQNumber(int)>:
c001574a:	55                   	push   ebp
c001574b:	89 e5                	mov    ebp,esp
c001574d:	83 ec 08             	sub    esp,0x8
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	83 ec 0c             	sub    esp,0xc
c0015756:	50                   	push   eax
c0015757:	e8 c8 e8 ff ff       	call   c0014024 <Device::getName()>
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	8a 00                	mov    al,BYTE PTR [eax]
c0015761:	3c 41                	cmp    al,0x41
c0015763:	0f 94 c0             	sete   al
c0015766:	84 c0                	test   al,al
c0015768:	74 28                	je     c0015792 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001576a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001576e:	7f 12                	jg     c0015782 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015773:	05 80 e2 02 c0       	add    eax,0xc002e280
c0015778:	8a 00                	mov    al,BYTE PTR [eax]
c001577a:	0f b6 c0             	movzx  eax,al
c001577d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015780:	eb 10                	jmp    c0015792 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	68 f8 b6 02 c0       	push   0xc002b6f8
c001578a:	e8 92 4b 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015795:	c9                   	leave  
c0015796:	c3                   	ret    
c0015797:	90                   	nop

c0015798 <startGUI(void*)>:
c0015798:	55                   	push   ebp
c0015799:	89 e5                	mov    ebp,esp
c001579b:	53                   	push   ebx
c001579c:	83 ec 04             	sub    esp,0x4
c001579f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00157a4:	48                   	dec    eax
c00157a5:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00157aa:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00157af:	85 c0                	test   eax,eax
c00157b1:	75 01                	jne    c00157b4 <startGUI(void*)+0x1c>
c00157b3:	fb                   	sti    
c00157b4:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00157ba:	83 ec 08             	sub    esp,0x8
c00157bd:	6a 01                	push   0x1
c00157bf:	68 6c ba 02 c0       	push   0xc002ba6c
c00157c4:	e8 2c 7f 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	83 ec 08             	sub    esp,0x8
c00157cf:	53                   	push   ebx
c00157d0:	50                   	push   eax
c00157d1:	e8 4a 81 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00157df:	83 ec 08             	sub    esp,0x8
c00157e2:	6a 01                	push   0x1
c00157e4:	68 86 ba 02 c0       	push   0xc002ba86
c00157e9:	e8 07 7f 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	83 ec 08             	sub    esp,0x8
c00157f4:	53                   	push   ebx
c00157f5:	50                   	push   eax
c00157f6:	e8 25 81 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	90                   	nop
c00157ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015802:	c9                   	leave  
c0015803:	c3                   	ret    

c0015804 <startGUIVESA(void*)>:
c0015804:	55                   	push   ebp
c0015805:	89 e5                	mov    ebp,esp
c0015807:	53                   	push   ebx
c0015808:	83 ec 04             	sub    esp,0x4
c001580b:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015810:	48                   	dec    eax
c0015811:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015816:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001581b:	85 c0                	test   eax,eax
c001581d:	75 01                	jne    c0015820 <startGUIVESA(void*)+0x1c>
c001581f:	fb                   	sti    
c0015820:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c0015826:	83 ec 08             	sub    esp,0x8
c0015829:	6a 01                	push   0x1
c001582b:	68 a0 ba 02 c0       	push   0xc002baa0
c0015830:	e8 c0 7e 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	83 ec 08             	sub    esp,0x8
c001583b:	53                   	push   ebx
c001583c:	50                   	push   eax
c001583d:	e8 de 80 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c001584b:	83 ec 08             	sub    esp,0x8
c001584e:	6a 01                	push   0x1
c0015850:	68 86 ba 02 c0       	push   0xc002ba86
c0015855:	e8 9b 7e 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	83 ec 08             	sub    esp,0x8
c0015860:	53                   	push   ebx
c0015861:	50                   	push   eax
c0015862:	e8 b9 80 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c0015867:	83 c4 10             	add    esp,0x10
c001586a:	90                   	nop
c001586b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001586e:	c9                   	leave  
c001586f:	c3                   	ret    

c0015870 <sendKeyToTerminal(unsigned char)>:
c0015870:	55                   	push   ebp
c0015871:	89 e5                	mov    ebp,esp
c0015873:	83 ec 28             	sub    esp,0x28
c0015876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015879:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001587c:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c0015881:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015885:	83 ec 08             	sub    esp,0x8
c0015888:	52                   	push   edx
c0015889:	50                   	push   eax
c001588a:	e8 25 b4 ff ff       	call   c0010cb4 <VgaText::receiveKey(unsigned char)>
c001588f:	83 c4 10             	add    esp,0x10
c0015892:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015896:	0f 85 8f 00 00 00    	jne    c001592b <sendKeyToTerminal(unsigned char)+0xbb>
c001589c:	fa                   	cli    
c001589d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00158a2:	40                   	inc    eax
c00158a3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00158a8:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c00158ad:	40                   	inc    eax
c00158ae:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c00158b3:	a1 c0 f1 02 c0       	mov    eax,ds:0xc002f1c0
c00158b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158bb:	c7 05 c0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c0,0x0
c00158c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158c9:	74 1f                	je     c00158ea <sendKeyToTerminal(unsigned char)+0x7a>
c00158cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158da:	83 ec 0c             	sub    esp,0xc
c00158dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158e0:	e8 b3 8c 00 00       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	eb db                	jmp    c00158c5 <sendKeyToTerminal(unsigned char)+0x55>
c00158ea:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c00158ef:	48                   	dec    eax
c00158f0:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c00158f5:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c00158fa:	85 c0                	test   eax,eax
c00158fc:	75 18                	jne    c0015916 <sendKeyToTerminal(unsigned char)+0xa6>
c00158fe:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c0015903:	85 c0                	test   eax,eax
c0015905:	74 0f                	je     c0015916 <sendKeyToTerminal(unsigned char)+0xa6>
c0015907:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c0015911:	e8 be 87 00 00       	call   c001e0d4 <schedule()>
c0015916:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001591b:	48                   	dec    eax
c001591c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015921:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015926:	85 c0                	test   eax,eax
c0015928:	75 01                	jne    c001592b <sendKeyToTerminal(unsigned char)+0xbb>
c001592a:	fb                   	sti    
c001592b:	90                   	nop
c001592c:	c9                   	leave  
c001592d:	c3                   	ret    

c001592e <sendKeyboardToken(KeyboardToken)>:
c001592e:	55                   	push   ebp
c001592f:	89 e5                	mov    ebp,esp
c0015931:	83 ec 18             	sub    esp,0x18
c0015934:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593a:	0f b7 c0             	movzx  eax,ax
c001593d:	83 f2 01             	xor    edx,0x1
c0015940:	88 90 e0 f1 02 c0    	mov    BYTE PTR [eax-0x3ffd0e20],dl
c0015946:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c001594b:	85 c0                	test   eax,eax
c001594d:	74 24                	je     c0015973 <sendKeyboardToken(KeyboardToken)+0x45>
c001594f:	8b 0d c8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1c8
c0015955:	83 ec 04             	sub    esp,0x4
c0015958:	68 e0 f1 02 c0       	push   0xc002f1e0
c001595d:	83 ec 08             	sub    esp,0x8
c0015960:	89 e2                	mov    edx,esp
c0015962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015965:	89 02                	mov    DWORD PTR [edx],eax
c0015967:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001596a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001596e:	ff d1                	call   ecx
c0015970:	83 c4 10             	add    esp,0x10
c0015973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015976:	66 3d 03 02          	cmp    ax,0x203
c001597a:	75 07                	jne    c0015983 <sendKeyboardToken(KeyboardToken)+0x55>
c001597c:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c0015981:	84 c0                	test   al,al
c0015983:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015987:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001598a:	a0 e8 f5 02 c0       	mov    al,ds:0xc002f5e8
c001598f:	38 c2                	cmp    dl,al
c0015991:	74 1c                	je     c00159af <sendKeyboardToken(KeyboardToken)+0x81>
c0015993:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015996:	a2 e8 f5 02 c0       	mov    ds:0xc002f5e8,al
c001599b:	a0 e8 f5 02 c0       	mov    al,ds:0xc002f5e8
c00159a0:	0f b6 c0             	movzx  eax,al
c00159a3:	83 ec 0c             	sub    esp,0xc
c00159a6:	50                   	push   eax
c00159a7:	e8 60 a8 ff ff       	call   c001020c <setTerminalScrollLock(bool)>
c00159ac:	83 c4 10             	add    esp,0x10
c00159af:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00159b2:	84 c0                	test   al,al
c00159b4:	0f 84 ae 00 00 00    	je     c0015a68 <sendKeyboardToken(KeyboardToken)+0x13a>
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	66 3d 10 03          	cmp    ax,0x310
c00159c1:	75 06                	jne    c00159c9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159c3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	66 3d 11 03          	cmp    ax,0x311
c00159d0:	75 06                	jne    c00159d8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159d2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159db:	66 3d 12 03          	cmp    ax,0x312
c00159df:	75 06                	jne    c00159e7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00159e1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ea:	66 3d 13 03          	cmp    ax,0x313
c00159ee:	75 06                	jne    c00159f6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00159f0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f9:	66 3d 14 03          	cmp    ax,0x314
c00159fd:	75 06                	jne    c0015a05 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159ff:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a08:	66 3d 15 03          	cmp    ax,0x315
c0015a0c:	75 06                	jne    c0015a14 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015a0e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 16 03          	cmp    ax,0x316
c0015a1b:	75 06                	jne    c0015a23 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a1d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a26:	66 3d 17 03          	cmp    ax,0x317
c0015a2a:	75 06                	jne    c0015a32 <sendKeyboardToken(KeyboardToken)+0x104>
c0015a2c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a35:	66 3d 18 03          	cmp    ax,0x318
c0015a39:	75 06                	jne    c0015a41 <sendKeyboardToken(KeyboardToken)+0x113>
c0015a3b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a44:	66 3d 19 03          	cmp    ax,0x319
c0015a48:	75 06                	jne    c0015a50 <sendKeyboardToken(KeyboardToken)+0x122>
c0015a4a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a53:	66 3d 1a 03          	cmp    ax,0x31a
c0015a57:	0f 85 c9 00 00 00    	jne    c0015b26 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a5d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a63:	e9 be 00 00 00       	jmp    c0015b26 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6b:	66 3d 10 03          	cmp    ax,0x310
c0015a6f:	75 0a                	jne    c0015a7b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a71:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7e:	66 3d 11 03          	cmp    ax,0x311
c0015a82:	75 0a                	jne    c0015a8e <sendKeyboardToken(KeyboardToken)+0x160>
c0015a84:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a91:	66 3d 12 03          	cmp    ax,0x312
c0015a95:	75 0a                	jne    c0015aa1 <sendKeyboardToken(KeyboardToken)+0x173>
c0015a97:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa4:	66 3d 13 03          	cmp    ax,0x313
c0015aa8:	75 0a                	jne    c0015ab4 <sendKeyboardToken(KeyboardToken)+0x186>
c0015aaa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ab0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab7:	66 3d 14 03          	cmp    ax,0x314
c0015abb:	75 0a                	jne    c0015ac7 <sendKeyboardToken(KeyboardToken)+0x199>
c0015abd:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ac3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aca:	66 3d 15 03          	cmp    ax,0x315
c0015ace:	75 0a                	jne    c0015ada <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ad0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ad6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015add:	66 3d 16 03          	cmp    ax,0x316
c0015ae1:	75 0a                	jne    c0015aed <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ae3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ae9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af0:	66 3d 17 03          	cmp    ax,0x317
c0015af4:	75 0a                	jne    c0015b00 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015af6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015afc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b03:	66 3d 18 03          	cmp    ax,0x318
c0015b07:	75 0a                	jne    c0015b13 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015b09:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015b0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b16:	66 3d 19 03          	cmp    ax,0x319
c0015b1a:	75 0a                	jne    c0015b26 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b1c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b29:	66 3d 00 02          	cmp    ax,0x200
c0015b2d:	75 2c                	jne    c0015b5b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b2f:	a0 e0 f5 02 c0       	mov    al,ds:0xc002f5e0
c0015b34:	83 f0 01             	xor    eax,0x1
c0015b37:	84 c0                	test   al,al
c0015b39:	74 20                	je     c0015b5b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b3b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0015b40:	6a 01                	push   0x1
c0015b42:	6a 00                	push   0x0
c0015b44:	68 98 57 01 c0       	push   0xc0015798
c0015b49:	50                   	push   eax
c0015b4a:	e8 41 83 00 00       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	c6 05 e0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5e0,0x1
c0015b59:	eb 33                	jmp    c0015b8e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5e:	66 3d 01 02          	cmp    ax,0x201
c0015b62:	75 2a                	jne    c0015b8e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b64:	a0 e0 f5 02 c0       	mov    al,ds:0xc002f5e0
c0015b69:	83 f0 01             	xor    eax,0x1
c0015b6c:	84 c0                	test   al,al
c0015b6e:	74 1e                	je     c0015b8e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b70:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0015b75:	6a 01                	push   0x1
c0015b77:	6a 00                	push   0x0
c0015b79:	68 04 58 01 c0       	push   0xc0015804
c0015b7e:	50                   	push   eax
c0015b7f:	e8 0c 83 00 00       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	c6 05 e0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5e0,0x1
c0015b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b91:	66 3d 1d 03          	cmp    ax,0x31d
c0015b95:	75 06                	jne    c0015b9d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b97:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba0:	66 3d 1c 03          	cmp    ax,0x31c
c0015ba4:	75 06                	jne    c0015bac <sendKeyboardToken(KeyboardToken)+0x27e>
c0015ba6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015baf:	66 3d 1b 03          	cmp    ax,0x31b
c0015bb3:	75 06                	jne    c0015bbb <sendKeyboardToken(KeyboardToken)+0x28d>
c0015bb5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbe:	66 3d 1e 03          	cmp    ax,0x31e
c0015bc2:	75 06                	jne    c0015bca <sendKeyboardToken(KeyboardToken)+0x29c>
c0015bc4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcd:	66 3d 1f 03          	cmp    ax,0x31f
c0015bd1:	75 06                	jne    c0015bd9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bd3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdc:	66 3d 1a 03          	cmp    ax,0x31a
c0015be0:	75 06                	jne    c0015be8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015be2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015be8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bef:	83 f0 01             	xor    eax,0x1
c0015bf2:	84 c0                	test   al,al
c0015bf4:	74 77                	je     c0015c6d <sendKeyboardToken(KeyboardToken)+0x33f>
c0015bf6:	a0 e1 f2 02 c0       	mov    al,ds:0xc002f2e1
c0015bfb:	84 c0                	test   al,al
c0015bfd:	74 41                	je     c0015c40 <sendKeyboardToken(KeyboardToken)+0x312>
c0015bff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c03:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015c07:	74 2b                	je     c0015c34 <sendKeyboardToken(KeyboardToken)+0x306>
c0015c09:	8b 15 e4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5e4
c0015c0f:	89 d0                	mov    eax,edx
c0015c11:	c1 e0 02             	shl    eax,0x2
c0015c14:	01 d0                	add    eax,edx
c0015c16:	01 c0                	add    eax,eax
c0015c18:	a3 e4 f5 02 c0       	mov    ds:0xc002f5e4,eax
c0015c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c20:	0f b7 c0             	movzx  eax,ax
c0015c23:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c26:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c2b:	01 d0                	add    eax,edx
c0015c2d:	a3 e4 f5 02 c0       	mov    ds:0xc002f5e4,eax
c0015c32:	eb 6d                	jmp    c0015ca1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c34:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015c3e:	eb 61                	jmp    c0015ca1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c40:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c45:	85 c0                	test   eax,eax
c0015c47:	74 18                	je     c0015c61 <sendKeyboardToken(KeyboardToken)+0x333>
c0015c49:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c4e:	0f b6 c0             	movzx  eax,al
c0015c51:	83 ec 0c             	sub    esp,0xc
c0015c54:	50                   	push   eax
c0015c55:	e8 16 fc ff ff       	call   c0015870 <sendKeyToTerminal(unsigned char)>
c0015c5a:	83 c4 10             	add    esp,0x10
c0015c5d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c61:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015c6b:	eb 34                	jmp    c0015ca1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c70:	66 3d 01 01          	cmp    ax,0x101
c0015c74:	75 2b                	jne    c0015ca1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c76:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c7b:	85 c0                	test   eax,eax
c0015c7d:	74 18                	je     c0015c97 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c7f:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c84:	0f b6 c0             	movzx  eax,al
c0015c87:	83 ec 0c             	sub    esp,0xc
c0015c8a:	50                   	push   eax
c0015c8b:	e8 e0 fb ff ff       	call   c0015870 <sendKeyToTerminal(unsigned char)>
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c97:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015ca1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ca4:	83 f0 01             	xor    eax,0x1
c0015ca7:	84 c0                	test   al,al
c0015ca9:	74 4c                	je     c0015cf7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cae:	83 f0 01             	xor    eax,0x1
c0015cb1:	84 c0                	test   al,al
c0015cb3:	74 42                	je     c0015cf7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cb5:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c0015cba:	83 f0 01             	xor    eax,0x1
c0015cbd:	84 c0                	test   al,al
c0015cbf:	74 36                	je     c0015cf7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc4:	66 83 f8 1f          	cmp    ax,0x1f
c0015cc8:	76 09                	jbe    c0015cd3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ccd:	66 83 f8 7e          	cmp    ax,0x7e
c0015cd1:	76 12                	jbe    c0015ce5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd6:	66 83 f8 0a          	cmp    ax,0xa
c0015cda:	74 09                	je     c0015ce5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdf:	66 83 f8 08          	cmp    ax,0x8
c0015ce3:	75 12                	jne    c0015cf7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce8:	0f b6 c0             	movzx  eax,al
c0015ceb:	83 ec 0c             	sub    esp,0xc
c0015cee:	50                   	push   eax
c0015cef:	e8 7c fb ff ff       	call   c0015870 <sendKeyToTerminal(unsigned char)>
c0015cf4:	83 c4 10             	add    esp,0x10
c0015cf7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cfa:	83 f0 01             	xor    eax,0x1
c0015cfd:	84 c0                	test   al,al
c0015cff:	74 4f                	je     c0015d50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d04:	83 f0 01             	xor    eax,0x1
c0015d07:	84 c0                	test   al,al
c0015d09:	74 45                	je     c0015d50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d0b:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c0015d10:	84 c0                	test   al,al
c0015d12:	74 3c                	je     c0015d50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d17:	66 83 f8 3f          	cmp    ax,0x3f
c0015d1b:	76 33                	jbe    c0015d50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d20:	66 83 f8 7f          	cmp    ax,0x7f
c0015d24:	77 2a                	ja     c0015d50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d29:	88 c2                	mov    dl,al
c0015d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2e:	66 83 f8 5f          	cmp    ax,0x5f
c0015d32:	76 04                	jbe    c0015d38 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d34:	b0 20                	mov    al,0x20
c0015d36:	eb 02                	jmp    c0015d3a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d38:	b0 00                	mov    al,0x0
c0015d3a:	29 c2                	sub    edx,eax
c0015d3c:	88 d0                	mov    al,dl
c0015d3e:	83 e8 40             	sub    eax,0x40
c0015d41:	0f b6 c0             	movzx  eax,al
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	50                   	push   eax
c0015d48:	e8 23 fb ff ff       	call   c0015870 <sendKeyToTerminal(unsigned char)>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d53:	66 3d 00 03          	cmp    ax,0x300
c0015d57:	75 0f                	jne    c0015d68 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d59:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d5c:	83 f0 01             	xor    eax,0x1
c0015d5f:	84 c0                	test   al,al
c0015d61:	74 05                	je     c0015d68 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d63:	e8 4c aa ff ff       	call   c00107b4 <doTerminalCycle()>
c0015d68:	90                   	nop
c0015d69:	c9                   	leave  
c0015d6a:	c3                   	ret    

c0015d6b <clearInternalKeybuffer(VgaText*)>:
c0015d6b:	55                   	push   ebp
c0015d6c:	89 e5                	mov    ebp,esp
c0015d6e:	83 ec 08             	sub    esp,0x8
c0015d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d74:	05 98 01 00 00       	add    eax,0x198
c0015d79:	83 ec 0c             	sub    esp,0xc
c0015d7c:	50                   	push   eax
c0015d7d:	e8 ea a9 fe ff       	call   c000076c <strlen>
c0015d82:	83 c4 10             	add    esp,0x10
c0015d85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d88:	81 c2 98 01 00 00    	add    edx,0x198
c0015d8e:	83 ec 04             	sub    esp,0x4
c0015d91:	50                   	push   eax
c0015d92:	6a 00                	push   0x0
c0015d94:	52                   	push   edx
c0015d95:	e8 b6 a9 fe ff       	call   c0000750 <memset>
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	90                   	nop
c0015d9e:	c9                   	leave  
c0015d9f:	c3                   	ret    

c0015da0 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015da0:	55                   	push   ebp
c0015da1:	89 e5                	mov    ebp,esp
c0015da3:	83 ec 18             	sub    esp,0x18
c0015da6:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c0015dab:	85 c0                	test   eax,eax
c0015dad:	74 2a                	je     c0015dd9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015daf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015db5:	8b 0d c8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1c8
c0015dbb:	83 ec 04             	sub    esp,0x4
c0015dbe:	68 e0 f1 02 c0       	push   0xc002f1e0
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	89 e2                	mov    edx,esp
c0015dc8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015dcb:	89 02                	mov    DWORD PTR [edx],eax
c0015dcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dd0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015dd4:	ff d1                	call   ecx
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	68 bb ba 02 c0       	push   0xc002babb
c0015de1:	e8 05 cb ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	fb                   	sti    
c0015dea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015df1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015df5:	0f 84 a1 00 00 00    	je     c0015e9c <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dfe:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e04:	84 c0                	test   al,al
c0015e06:	75 28                	jne    c0015e30 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015e08:	fa                   	cli    
c0015e09:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e0e:	40                   	inc    eax
c0015e0f:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015e14:	e8 bb 82 00 00       	call   c001e0d4 <schedule()>
c0015e19:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e1e:	48                   	dec    eax
c0015e1f:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015e24:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e29:	85 c0                	test   eax,eax
c0015e2b:	75 ce                	jne    c0015dfb <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e2d:	fb                   	sti    
c0015e2e:	eb cb                	jmp    c0015dfb <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e33:	8d 50 01             	lea    edx,[eax+0x1]
c0015e36:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e39:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e3c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e42:	88 10                	mov    BYTE PTR [eax],dl
c0015e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e47:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e4d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e53:	05 98 01 00 00       	add    eax,0x198
c0015e58:	83 ec 0c             	sub    esp,0xc
c0015e5b:	50                   	push   eax
c0015e5c:	e8 0b a9 fe ff       	call   c000076c <strlen>
c0015e61:	83 c4 10             	add    esp,0x10
c0015e64:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e67:	81 c2 98 01 00 00    	add    edx,0x198
c0015e6d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e73:	81 c2 98 01 00 00    	add    edx,0x198
c0015e79:	83 ec 04             	sub    esp,0x4
c0015e7c:	50                   	push   eax
c0015e7d:	51                   	push   ecx
c0015e7e:	52                   	push   edx
c0015e7f:	e8 04 a8 fe ff       	call   c0000688 <memmove>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e8a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e8d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e91:	0f 85 5a ff ff ff    	jne    c0015df1 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015e97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e9a:	eb 03                	jmp    c0015e9f <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015e9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e9f:	c9                   	leave  
c0015ea0:	c3                   	ret    
c0015ea1:	90                   	nop

c0015ea2 <Keyboard::Keyboard(char const*)>:
c0015ea2:	83 ec 0c             	sub    esp,0xc
c0015ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea9:	83 ec 08             	sub    esp,0x8
c0015eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb0:	50                   	push   eax
c0015eb1:	e8 72 e0 ff ff       	call   c0013f28 <Device::Device(char const*)>
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0015ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ec2:	89 10                	mov    DWORD PTR [eax],edx
c0015ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ec8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ed2:	c6 05 c4 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1c4,0x1
c0015ed9:	90                   	nop
c0015eda:	83 c4 0c             	add    esp,0xc
c0015edd:	c3                   	ret    

c0015ede <Keyboard::~Keyboard()>:
c0015ede:	83 ec 0c             	sub    esp,0xc
c0015ee1:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0015ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eea:	89 10                	mov    DWORD PTR [eax],edx
c0015eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	50                   	push   eax
c0015ef4:	e8 f9 dc ff ff       	call   c0013bf2 <Device::~Device()>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	90                   	nop
c0015efd:	83 c4 0c             	add    esp,0xc
c0015f00:	c3                   	ret    
c0015f01:	90                   	nop

c0015f02 <Keyboard::~Keyboard()>:
c0015f02:	83 ec 0c             	sub    esp,0xc
c0015f05:	83 ec 0c             	sub    esp,0xc
c0015f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f0c:	e8 cd ff ff ff       	call   c0015ede <Keyboard::~Keyboard()>
c0015f11:	83 c4 10             	add    esp,0x10
c0015f14:	83 ec 08             	sub    esp,0x8
c0015f17:	68 5c 01 00 00       	push   0x15c
c0015f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f20:	e8 e6 c8 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	83 c4 0c             	add    esp,0xc
c0015f2b:	c3                   	ret    

c0015f2c <LogicalDisk::close(int, int, void*)>:
c0015f2c:	83 c8 ff             	or     eax,0xffffffff
c0015f2f:	c3                   	ret    

c0015f30 <LogicalDisk::~LogicalDisk()>:
c0015f30:	83 ec 0c             	sub    esp,0xc
c0015f33:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0015f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3c:	89 10                	mov    DWORD PTR [eax],edx
c0015f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f42:	83 ec 0c             	sub    esp,0xc
c0015f45:	50                   	push   eax
c0015f46:	e8 a7 dc ff ff       	call   c0013bf2 <Device::~Device()>
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	90                   	nop
c0015f4f:	83 c4 0c             	add    esp,0xc
c0015f52:	c3                   	ret    
c0015f53:	90                   	nop

c0015f54 <LogicalDisk::~LogicalDisk()>:
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	83 ec 0c             	sub    esp,0xc
c0015f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f5e:	e8 cd ff ff ff       	call   c0015f30 <LogicalDisk::~LogicalDisk()>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	83 ec 08             	sub    esp,0x8
c0015f69:	68 74 01 00 00       	push   0x174
c0015f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f72:	e8 94 c8 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	83 c4 0c             	add    esp,0xc
c0015f7d:	c3                   	ret    

c0015f7e <LogicalDisk::open(int, int, void*)>:
c0015f7e:	83 ec 18             	sub    esp,0x18
c0015f81:	68 08 bb 02 c0       	push   0xc002bb08
c0015f86:	e8 96 43 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0015f8b:	83 c8 ff             	or     eax,0xffffffff
c0015f8e:	83 c4 1c             	add    esp,0x1c
c0015f91:	c3                   	ret    

c0015f92 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f92:	53                   	push   ebx
c0015f93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f9f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015fa5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015fab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015fb1:	77 10                	ja     c0015fc3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015fb3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015fb9:	89 d3                	mov    ebx,edx
c0015fbb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015fc1:	72 05                	jb     c0015fc8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fc3:	83 c8 ff             	or     eax,0xffffffff
c0015fc6:	89 c2                	mov    edx,eax
c0015fc8:	5b                   	pop    ebx
c0015fc9:	c3                   	ret    

c0015fca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fca:	56                   	push   esi
c0015fcb:	83 c8 ff             	or     eax,0xffffffff
c0015fce:	53                   	push   ebx
c0015fcf:	89 c2                	mov    edx,eax
c0015fd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fd5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fdd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fe3:	77 27                	ja     c001600c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fe5:	89 d8                	mov    eax,ebx
c0015fe7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015fed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ff3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ff8:	89 c2                	mov    edx,eax
c0015ffa:	73 10                	jae    c001600c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ffc:	89 c8                	mov    eax,ecx
c0015ffe:	89 da                	mov    edx,ebx
c0016000:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016006:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001600c:	5b                   	pop    ebx
c001600d:	5e                   	pop    esi
c001600e:	c3                   	ret    
c001600f:	90                   	nop

c0016010 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016010:	83 ec 1c             	sub    esp,0x1c
c0016013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001601b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001601f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016027:	89 04 24             	mov    DWORD PTR [esp],eax
c001602a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001602e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016036:	83 ec 08             	sub    esp,0x8
c0016039:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001603d:	50                   	push   eax
c001603e:	e8 e5 de ff ff       	call   c0013f28 <Device::Device(char const*)>
c0016043:	83 c4 10             	add    esp,0x10
c0016046:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c001604b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001604f:	89 10                	mov    DWORD PTR [eax],edx
c0016051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016055:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001605c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016060:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001606b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016075:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001607d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016081:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016087:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001608d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016091:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016094:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016098:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001609e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00160a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160ac:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00160b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00160c0:	90                   	nop
c00160c1:	83 c4 1c             	add    esp,0x1c
c00160c4:	c3                   	ret    
c00160c5:	90                   	nop

c00160c6 <LogicalDisk::assignDriveLetter()>:
c00160c6:	55                   	push   ebp
c00160c7:	57                   	push   edi
c00160c8:	56                   	push   esi
c00160c9:	53                   	push   ebx
c00160ca:	83 ec 14             	sub    esp,0x14
c00160cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160d1:	8b 3d 00 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f600
c00160d7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160dd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160e1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160e7:	8b 3d 04 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f604
c00160ed:	3c 01                	cmp    al,0x1
c00160ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00160f7:	19 c0                	sbb    eax,eax
c00160f9:	83 e0 02             	and    eax,0x2
c00160fc:	83 c0 41             	add    eax,0x41
c00160ff:	0f be e8             	movsx  ebp,al
c0016102:	3c 43                	cmp    al,0x43
c0016104:	75 10                	jne    c0016116 <LogicalDisk::assignDriveLetter()+0x50>
c0016106:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001610d:	75 5d                	jne    c001616c <LogicalDisk::assignDriveLetter()+0xa6>
c001610f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016114:	75 56                	jne    c001616c <LogicalDisk::assignDriveLetter()+0xa6>
c0016116:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016119:	ba 01 00 00 00       	mov    edx,0x1
c001611e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016122:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016126:	d3 e2                	shl    edx,cl
c0016128:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001612c:	89 d7                	mov    edi,edx
c001612e:	89 d6                	mov    esi,edx
c0016130:	c1 ff 1f             	sar    edi,0x1f
c0016133:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016137:	21 f9                	and    ecx,edi
c0016139:	09 d1                	or     ecx,edx
c001613b:	75 2f                	jne    c001616c <LogicalDisk::assignDriveLetter()+0xa6>
c001613d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016141:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016145:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001614b:	09 f2                	or     edx,esi
c001614d:	89 15 00 f6 02 c0    	mov    DWORD PTR ds:0xc002f600,edx
c0016153:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016157:	09 fa                	or     edx,edi
c0016159:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001615d:	89 15 04 f6 02 c0    	mov    DWORD PTR ds:0xc002f604,edx
c0016163:	89 1c bd 20 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd09e0],ebx
c001616a:	eb 08                	jmp    c0016174 <LogicalDisk::assignDriveLetter()+0xae>
c001616c:	45                   	inc    ebp
c001616d:	40                   	inc    eax
c001616e:	3c 5b                	cmp    al,0x5b
c0016170:	75 90                	jne    c0016102 <LogicalDisk::assignDriveLetter()+0x3c>
c0016172:	31 c0                	xor    eax,eax
c0016174:	83 c4 14             	add    esp,0x14
c0016177:	5b                   	pop    ebx
c0016178:	5e                   	pop    esi
c0016179:	5f                   	pop    edi
c001617a:	5d                   	pop    ebp
c001617b:	c3                   	ret    

c001617c <LogicalDisk::mount()>:
c001617c:	56                   	push   esi
c001617d:	53                   	push   ebx
c001617e:	50                   	push   eax
c001617f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016183:	8b 1d 94 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f194
c0016189:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016193:	85 db                	test   ebx,ebx
c0016195:	74 50                	je     c00161e7 <LogicalDisk::mount()+0x6b>
c0016197:	50                   	push   eax
c0016198:	50                   	push   eax
c0016199:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c001619f:	68 2c bb 02 c0       	push   0xc002bb2c
c00161a4:	e8 42 c7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00161a9:	83 c4 0c             	add    esp,0xc
c00161ac:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00161b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161b5:	83 e8 41             	sub    eax,0x41
c00161b8:	50                   	push   eax
c00161b9:	56                   	push   esi
c00161ba:	53                   	push   ebx
c00161bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	84 c0                	test   al,al
c00161c3:	74 08                	je     c00161cd <LogicalDisk::mount()+0x51>
c00161c5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161cb:	eb 1c                	jmp    c00161e9 <LogicalDisk::mount()+0x6d>
c00161cd:	51                   	push   ecx
c00161ce:	51                   	push   ecx
c00161cf:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c00161d5:	68 47 bb 02 c0       	push   0xc002bb47
c00161da:	e8 0c c7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00161df:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	eb ac                	jmp    c0016193 <LogicalDisk::mount()+0x17>
c00161e7:	31 c0                	xor    eax,eax
c00161e9:	5a                   	pop    edx
c00161ea:	5b                   	pop    ebx
c00161eb:	5e                   	pop    esi
c00161ec:	c3                   	ret    
c00161ed:	90                   	nop

c00161ee <LogicalDisk::unmount()>:
c00161ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161f2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161fc:	c3                   	ret    
c00161fd:	90                   	nop

c00161fe <LogicalDisk::eject()>:
c00161fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016202:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016208:	8b 10                	mov    edx,DWORD PTR [eax]
c001620a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001620e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016211:	90                   	nop

c0016212 <LogicalDisk::unassignDriveLetter()>:
c0016212:	57                   	push   edi
c0016213:	56                   	push   esi
c0016214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016218:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001621f:	84 c9                	test   cl,cl
c0016221:	75 0f                	jne    c0016232 <LogicalDisk::unassignDriveLetter()+0x20>
c0016223:	c7 44 24 0c 62 bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb62
c001622b:	5e                   	pop    esi
c001622c:	5f                   	pop    edi
c001622d:	e9 ef 40 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c0016232:	83 e9 41             	sub    ecx,0x41
c0016235:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001623c:	b8 01 00 00 00       	mov    eax,0x1
c0016241:	c7 04 8d 20 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd09e0],0x0
c001624c:	d3 e0                	shl    eax,cl
c001624e:	89 c7                	mov    edi,eax
c0016250:	f7 d0                	not    eax
c0016252:	c1 ff 1f             	sar    edi,0x1f
c0016255:	21 05 00 f6 02 c0    	and    DWORD PTR ds:0xc002f600,eax
c001625b:	89 fe                	mov    esi,edi
c001625d:	f7 d6                	not    esi
c001625f:	21 35 04 f6 02 c0    	and    DWORD PTR ds:0xc002f604,esi
c0016265:	5e                   	pop    esi
c0016266:	5f                   	pop    edi
c0016267:	c3                   	ret    

c0016268 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016268:	57                   	push   edi
c0016269:	56                   	push   esi
c001626a:	53                   	push   ebx
c001626b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001626f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016273:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016277:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001627b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016281:	77 41                	ja     c00162c4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016283:	99                   	cdq    
c0016284:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001628a:	01 c8                	add    eax,ecx
c001628c:	11 da                	adc    edx,ebx
c001628e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016294:	19 d7                	sbb    edi,edx
c0016296:	72 33                	jb     c00162cb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016298:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001629e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162a8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162ac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162bc:	5b                   	pop    ebx
c00162bd:	5e                   	pop    esi
c00162be:	5f                   	pop    edi
c00162bf:	e9 ec 0a 00 00       	jmp    c0016db0 <VCache::read(unsigned long long, int, void*)>
c00162c4:	b8 05 00 00 00       	mov    eax,0x5
c00162c9:	eb 05                	jmp    c00162d0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162cb:	b8 07 00 00 00       	mov    eax,0x7
c00162d0:	5b                   	pop    ebx
c00162d1:	5e                   	pop    esi
c00162d2:	5f                   	pop    edi
c00162d3:	c3                   	ret    

c00162d4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00162d4:	57                   	push   edi
c00162d5:	56                   	push   esi
c00162d6:	53                   	push   ebx
c00162d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162ed:	77 41                	ja     c0016330 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162ef:	99                   	cdq    
c00162f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162f6:	01 c8                	add    eax,ecx
c00162f8:	11 da                	adc    edx,ebx
c00162fa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016300:	19 d7                	sbb    edi,edx
c0016302:	72 33                	jb     c0016337 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016304:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001630a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016310:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016314:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016318:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001631e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016324:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016328:	5b                   	pop    ebx
c0016329:	5e                   	pop    esi
c001632a:	5f                   	pop    edi
c001632b:	e9 96 09 00 00       	jmp    c0016cc6 <VCache::write(unsigned long long, int, void*)>
c0016330:	b8 05 00 00 00       	mov    eax,0x5
c0016335:	eb 05                	jmp    c001633c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016337:	b8 07 00 00 00       	mov    eax,0x7
c001633c:	5b                   	pop    ebx
c001633d:	5e                   	pop    esi
c001633e:	5f                   	pop    edi
c001633f:	c3                   	ret    

c0016340 <Mouse::Mouse(char const*)>:
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016347:	83 ec 08             	sub    esp,0x8
c001634a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634e:	50                   	push   eax
c001634f:	e8 d4 db ff ff       	call   c0013f28 <Device::Device(char const*)>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c001635c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016360:	89 10                	mov    DWORD PTR [eax],edx
c0016362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016366:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016370:	90                   	nop
c0016371:	83 c4 0c             	add    esp,0xc
c0016374:	c3                   	ret    
c0016375:	90                   	nop

c0016376 <Mouse::~Mouse()>:
c0016376:	83 ec 0c             	sub    esp,0xc
c0016379:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c001637e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016382:	89 10                	mov    DWORD PTR [eax],edx
c0016384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	50                   	push   eax
c001638c:	e8 61 d8 ff ff       	call   c0013bf2 <Device::~Device()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	90                   	nop
c0016395:	83 c4 0c             	add    esp,0xc
c0016398:	c3                   	ret    
c0016399:	90                   	nop

c001639a <Mouse::~Mouse()>:
c001639a:	83 ec 0c             	sub    esp,0xc
c001639d:	83 ec 0c             	sub    esp,0xc
c00163a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a4:	e8 cd ff ff ff       	call   c0016376 <Mouse::~Mouse()>
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	83 ec 08             	sub    esp,0x8
c00163af:	68 58 01 00 00       	push   0x158
c00163b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b8:	e8 4e c4 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c00163bd:	83 c4 10             	add    esp,0x10
c00163c0:	83 c4 0c             	add    esp,0xc
c00163c3:	c3                   	ret    

c00163c4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163c4:	55                   	push   ebp
c00163c5:	57                   	push   edi
c00163c6:	56                   	push   esi
c00163c7:	53                   	push   ebx
c00163c8:	81 ec 20 01 00 00    	sub    esp,0x120
c00163ce:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163d5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163dc:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163e3:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00163f6:	56                   	push   esi
c00163f7:	68 dc bb 02 c0       	push   0xc002bbdc
c00163fc:	e8 ea c4 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016401:	58                   	pop    eax
c0016402:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016409:	e8 16 dc ff ff       	call   c0014024 <Device::getName()>
c001640e:	5a                   	pop    edx
c001640f:	59                   	pop    ecx
c0016410:	50                   	push   eax
c0016411:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016415:	53                   	push   ebx
c0016416:	e8 f1 a3 fe ff       	call   c000080c <strcpy>
c001641b:	5d                   	pop    ebp
c001641c:	58                   	pop    eax
c001641d:	68 0d bc 02 c0       	push   0xc002bc0d
c0016422:	53                   	push   ebx
c0016423:	e8 24 a5 fe ff       	call   c000094c <strcat>
c0016428:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001642f:	e8 58 94 ff ff       	call   c000f88c <malloc>
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	89 c5                	mov    ebp,eax
c0016439:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001643d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016441:	57                   	push   edi
c0016442:	56                   	push   esi
c0016443:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001644a:	53                   	push   ebx
c001644b:	50                   	push   eax
c001644c:	e8 bf fb ff ff       	call   c0016010 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016451:	83 c4 14             	add    esp,0x14
c0016454:	55                   	push   ebp
c0016455:	e8 6c fc ff ff       	call   c00160c6 <LogicalDisk::assignDriveLetter()>
c001645a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001645d:	0f be d8             	movsx  ebx,al
c0016460:	e8 17 fd ff ff       	call   c001617c <LogicalDisk::mount()>
c0016465:	58                   	pop    eax
c0016466:	5a                   	pop    edx
c0016467:	55                   	push   ebp
c0016468:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001646f:	e8 b0 d8 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c0016474:	59                   	pop    ecx
c0016475:	5e                   	pop    esi
c0016476:	53                   	push   ebx
c0016477:	68 18 bc 02 c0       	push   0xc002bc18
c001647c:	e8 6a c4 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016481:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016487:	5b                   	pop    ebx
c0016488:	5e                   	pop    esi
c0016489:	5f                   	pop    edi
c001648a:	5d                   	pop    ebp
c001648b:	c3                   	ret    

c001648c <createPartitionsForDisk(PhysicalDisk*)>:
c001648c:	55                   	push   ebp
c001648d:	57                   	push   edi
c001648e:	56                   	push   esi
c001648f:	53                   	push   ebx
c0016490:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016496:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001649d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00164a3:	3d 00 02 00 00       	cmp    eax,0x200
c00164a8:	74 27                	je     c00164d1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00164aa:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00164b0:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00164b6:	83 ec 10             	sub    esp,0x10
c00164b9:	0f a4 f7 0a          	shld   edi,esi,0xa
c00164bd:	99                   	cdq    
c00164be:	c1 e6 0a             	shl    esi,0xa
c00164c1:	52                   	push   edx
c00164c2:	89 fd                	mov    ebp,edi
c00164c4:	50                   	push   eax
c00164c5:	55                   	push   ebp
c00164c6:	56                   	push   esi
c00164c7:	e8 48 0d 01 00       	call   c0027214 <__udivdi3>
c00164cc:	e9 b1 00 00 00       	jmp    c0016582 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164d6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164da:	56                   	push   esi
c00164db:	6a 01                	push   0x1
c00164dd:	6a 00                	push   0x0
c00164df:	6a 00                	push   0x0
c00164e1:	53                   	push   ebx
c00164e2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164e5:	83 c4 20             	add    esp,0x20
c00164e8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00164f0:	75 0a                	jne    c00164fc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00164f2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00164fa:	74 2c                	je     c0016528 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00164fc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016502:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016508:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001650e:	83 ec 10             	sub    esp,0x10
c0016511:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016515:	89 f7                	mov    edi,esi
c0016517:	c1 e0 0a             	shl    eax,0xa
c001651a:	c1 ff 1f             	sar    edi,0x1f
c001651d:	57                   	push   edi
c001651e:	56                   	push   esi
c001651f:	52                   	push   edx
c0016520:	50                   	push   eax
c0016521:	e8 ee 0c 01 00       	call   c0027214 <__udivdi3>
c0016526:	eb 5a                	jmp    c0016582 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016528:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001652f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016536:	83 e1 7f             	and    ecx,0x7f
c0016539:	83 e0 7f             	and    eax,0x7f
c001653c:	01 c1                	add    ecx,eax
c001653e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016545:	83 e0 7f             	and    eax,0x7f
c0016548:	01 c1                	add    ecx,eax
c001654a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016551:	83 e0 7f             	and    eax,0x7f
c0016554:	00 c1                	add    cl,al
c0016556:	74 41                	je     c0016599 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016558:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001655e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016564:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001656a:	83 ec 10             	sub    esp,0x10
c001656d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016571:	89 f7                	mov    edi,esi
c0016573:	c1 e0 0a             	shl    eax,0xa
c0016576:	c1 ff 1f             	sar    edi,0x1f
c0016579:	57                   	push   edi
c001657a:	56                   	push   esi
c001657b:	52                   	push   edx
c001657c:	50                   	push   eax
c001657d:	e8 92 0c 01 00       	call   c0027214 <__udivdi3>
c0016582:	83 c4 14             	add    esp,0x14
c0016585:	52                   	push   edx
c0016586:	50                   	push   eax
c0016587:	6a 00                	push   0x0
c0016589:	6a 00                	push   0x0
c001658b:	53                   	push   ebx
c001658c:	e8 33 fe ff ff       	call   c00163c4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016591:	83 c4 20             	add    esp,0x20
c0016594:	e9 79 01 00 00       	jmp    c0016712 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016599:	89 f0                	mov    eax,esi
c001659b:	31 f6                	xor    esi,esi
c001659d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00165a4:	75 02                	jne    c00165a8 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00165a6:	89 f1                	mov    ecx,esi
c00165a8:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00165af:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00165b6:	c1 e2 08             	shl    edx,0x8
c00165b9:	c1 e7 10             	shl    edi,0x10
c00165bc:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165c4:	09 fa                	or     edx,edi
c00165c6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165ce:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165d5:	83 c0 10             	add    eax,0x10
c00165d8:	09 fa                	or     edx,edi
c00165da:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165e1:	c1 e7 18             	shl    edi,0x18
c00165e4:	09 fa                	or     edx,edi
c00165e6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165ed:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00165f1:	c1 e7 10             	shl    edi,0x10
c00165f4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00165fb:	c1 e2 08             	shl    edx,0x8
c00165fe:	09 fa                	or     edx,edi
c0016600:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016607:	09 fa                	or     edx,edi
c0016609:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016610:	c1 e7 18             	shl    edi,0x18
c0016613:	09 fa                	or     edx,edi
c0016615:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016619:	46                   	inc    esi
c001661a:	83 fe 04             	cmp    esi,0x4
c001661d:	0f 85 7a ff ff ff    	jne    c001659d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016627:	83 f0 01             	xor    eax,0x1
c001662a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001662e:	75 57                	jne    c0016687 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016634:	83 f0 01             	xor    eax,0x1
c0016637:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001663b:	75 4a                	jne    c0016687 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001663d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016641:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016649:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016651:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016657:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001665d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016663:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016667:	89 f7                	mov    edi,esi
c0016669:	c1 e0 0a             	shl    eax,0xa
c001666c:	c1 ff 1f             	sar    edi,0x1f
c001666f:	57                   	push   edi
c0016670:	56                   	push   esi
c0016671:	52                   	push   edx
c0016672:	50                   	push   eax
c0016673:	e8 9c 0b 01 00       	call   c0027214 <__udivdi3>
c0016678:	83 c4 10             	add    esp,0x10
c001667b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001667f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016683:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016687:	84 c9                	test   cl,cl
c0016689:	74 53                	je     c00166de <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001668b:	0f b6 c9             	movzx  ecx,cl
c001668e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016692:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016696:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001669a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001669e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166a6:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00166aa:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00166ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00166b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166be:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166c2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166c6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166ca:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166d6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166da:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166de:	31 ed                	xor    ebp,ebp
c00166e0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166e4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166e8:	89 f8                	mov    eax,edi
c00166ea:	09 f0                	or     eax,esi
c00166ec:	74 1e                	je     c001670c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166ee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00166f2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00166f6:	89 d1                	mov    ecx,edx
c00166f8:	09 c1                	or     ecx,eax
c00166fa:	74 10                	je     c001670c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	57                   	push   edi
c0016700:	56                   	push   esi
c0016701:	52                   	push   edx
c0016702:	50                   	push   eax
c0016703:	53                   	push   ebx
c0016704:	e8 bb fc ff ff       	call   c00163c4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016709:	83 c4 20             	add    esp,0x20
c001670c:	45                   	inc    ebp
c001670d:	83 fd 04             	cmp    ebp,0x4
c0016710:	75 ce                	jne    c00166e0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016712:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016718:	5b                   	pop    ebx
c0016719:	5e                   	pop    esi
c001671a:	5f                   	pop    edi
c001671b:	5d                   	pop    ebp
c001671c:	c3                   	ret    
c001671d:	90                   	nop

c001671e <Serial::Serial(char const*)>:
c001671e:	83 ec 0c             	sub    esp,0xc
c0016721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016725:	83 ec 08             	sub    esp,0x8
c0016728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001672c:	50                   	push   eax
c001672d:	e8 f6 d7 ff ff       	call   c0013f28 <Device::Device(char const*)>
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	ba 44 bc 02 c0       	mov    edx,0xc002bc44
c001673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673e:	89 10                	mov    DWORD PTR [eax],edx
c0016740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016744:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001674e:	90                   	nop
c001674f:	83 c4 0c             	add    esp,0xc
c0016752:	c3                   	ret    
c0016753:	90                   	nop

c0016754 <Serial::~Serial()>:
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	ba 44 bc 02 c0       	mov    edx,0xc002bc44
c001675c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016760:	89 10                	mov    DWORD PTR [eax],edx
c0016762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	50                   	push   eax
c001676a:	e8 83 d4 ff ff       	call   c0013bf2 <Device::~Device()>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	90                   	nop
c0016773:	83 c4 0c             	add    esp,0xc
c0016776:	c3                   	ret    
c0016777:	90                   	nop

c0016778 <Serial::~Serial()>:
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	83 ec 0c             	sub    esp,0xc
c001677e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016782:	e8 cd ff ff ff       	call   c0016754 <Serial::~Serial()>
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	83 ec 08             	sub    esp,0x8
c001678d:	68 58 01 00 00       	push   0x158
c0016792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016796:	e8 70 c0 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	83 c4 0c             	add    esp,0xc
c00167a1:	c3                   	ret    

c00167a2 <Timer::Timer(char const*)>:
c00167a2:	83 ec 0c             	sub    esp,0xc
c00167a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a9:	83 ec 08             	sub    esp,0x8
c00167ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b0:	50                   	push   eax
c00167b1:	e8 72 d7 ff ff       	call   c0013f28 <Device::Device(char const*)>
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c00167be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c2:	89 10                	mov    DWORD PTR [eax],edx
c00167c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167d2:	90                   	nop
c00167d3:	83 c4 0c             	add    esp,0xc
c00167d6:	c3                   	ret    
c00167d7:	90                   	nop

c00167d8 <Timer::~Timer()>:
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c00167e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e4:	89 10                	mov    DWORD PTR [eax],edx
c00167e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	50                   	push   eax
c00167ee:	e8 ff d3 ff ff       	call   c0013bf2 <Device::~Device()>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	90                   	nop
c00167f7:	83 c4 0c             	add    esp,0xc
c00167fa:	c3                   	ret    
c00167fb:	90                   	nop

c00167fc <Timer::~Timer()>:
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	83 ec 0c             	sub    esp,0xc
c0016802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016806:	e8 cd ff ff ff       	call   c00167d8 <Timer::~Timer()>
c001680b:	83 c4 10             	add    esp,0x10
c001680e:	83 ec 08             	sub    esp,0x8
c0016811:	68 5c 01 00 00       	push   0x15c
c0016816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001681a:	e8 ec bf ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	83 c4 0c             	add    esp,0xc
c0016825:	c3                   	ret    

c0016826 <Timer::read()>:
c0016826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001682a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016830:	c3                   	ret    

c0016831 <timerHandler(unsigned long long)>:
c0016831:	55                   	push   ebp
c0016832:	57                   	push   edi
c0016833:	56                   	push   esi
c0016834:	53                   	push   ebx
c0016835:	83 ec 0c             	sub    esp,0xc
c0016838:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001683c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016840:	01 35 90 f6 02 c0    	add    DWORD PTR ds:0xc002f690,esi
c0016846:	11 3d 94 f6 02 c0    	adc    DWORD PTR ds:0xc002f694,edi
c001684c:	80 3d 2d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f02d,0x0
c0016853:	0f 84 42 01 00 00    	je     c001699b <timerHandler(unsigned long long)+0x16a>
c0016859:	fa                   	cli    
c001685a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c0016869:	68 58 25 03 c0       	push   0xc0032558
c001686e:	e8 27 2a 01 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	84 c0                	test   al,al
c0016878:	0f 85 a2 00 00 00    	jne    c0016920 <timerHandler(unsigned long long)+0xef>
c001687e:	83 ec 0c             	sub    esp,0xc
c0016881:	68 58 25 03 c0       	push   0xc0032558
c0016886:	e8 2b 2a 01 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	89 c3                	mov    ebx,eax
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	68 58 25 03 c0       	push   0xc0032558
c0016898:	e8 19 2a 01 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001689d:	c7 04 24 58 25 03 c0 	mov    DWORD PTR [esp],0xc0032558
c00168a4:	89 c5                	mov    ebp,eax
c00168a6:	e8 13 2a 01 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168ab:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00168b4:	39 15 90 f6 02 c0    	cmp    DWORD PTR ds:0xc002f690,edx
c00168ba:	a1 94 f6 02 c0       	mov    eax,ds:0xc002f694
c00168bf:	19 c8                	sbb    eax,ecx
c00168c1:	72 21                	jb     c00168e4 <timerHandler(unsigned long long)+0xb3>
c00168c3:	83 ec 0c             	sub    esp,0xc
c00168c6:	55                   	push   ebp
c00168c7:	e8 cc 7c 00 00       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c00168cc:	83 c4 10             	add    esp,0x10
c00168cf:	39 eb                	cmp    ebx,ebp
c00168d1:	75 21                	jne    c00168f4 <timerHandler(unsigned long long)+0xc3>
c00168d3:	83 ec 0c             	sub    esp,0xc
c00168d6:	68 58 25 03 c0       	push   0xc0032558
c00168db:	e8 d6 29 01 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168e0:	89 c3                	mov    ebx,eax
c00168e2:	eb 0d                	jmp    c00168f1 <timerHandler(unsigned long long)+0xc0>
c00168e4:	50                   	push   eax
c00168e5:	50                   	push   eax
c00168e6:	55                   	push   ebp
c00168e7:	68 58 25 03 c0       	push   0xc0032558
c00168ec:	e8 7b 2a 01 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	68 58 25 03 c0       	push   0xc0032558
c00168fc:	e8 99 29 01 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016901:	83 c4 10             	add    esp,0x10
c0016904:	84 c0                	test   al,al
c0016906:	75 18                	jne    c0016920 <timerHandler(unsigned long long)+0xef>
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	68 58 25 03 c0       	push   0xc0032558
c0016910:	e8 a1 29 01 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	39 d8                	cmp    eax,ebx
c001691a:	0f 85 70 ff ff ff    	jne    c0016890 <timerHandler(unsigned long long)+0x5f>
c0016920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016925:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016929:	74 3d                	je     c0016968 <timerHandler(unsigned long long)+0x137>
c001692b:	80 3d 2c f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f02c,0x0
c0016932:	74 34                	je     c0016968 <timerHandler(unsigned long long)+0x137>
c0016934:	fa                   	cli    
c0016935:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001693b:	31 d2                	xor    edx,edx
c001693d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016942:	89 f9                	mov    ecx,edi
c0016944:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001694f:	39 c6                	cmp    esi,eax
c0016951:	19 d1                	sbb    ecx,edx
c0016953:	72 05                	jb     c001695a <timerHandler(unsigned long long)+0x129>
c0016955:	e8 7a 77 00 00       	call   c001e0d4 <schedule()>
c001695a:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001695f:	48                   	dec    eax
c0016960:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0016965:	75 01                	jne    c0016968 <timerHandler(unsigned long long)+0x137>
c0016967:	fb                   	sti    
c0016968:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001696d:	48                   	dec    eax
c001696e:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c0016973:	75 18                	jne    c001698d <timerHandler(unsigned long long)+0x15c>
c0016975:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c001697c:	74 0f                	je     c001698d <timerHandler(unsigned long long)+0x15c>
c001697e:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c0016988:	e8 47 77 00 00       	call   c001e0d4 <schedule()>
c001698d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0016992:	48                   	dec    eax
c0016993:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0016998:	75 01                	jne    c001699b <timerHandler(unsigned long long)+0x16a>
c001699a:	fb                   	sti    
c001699b:	83 c4 0c             	add    esp,0xc
c001699e:	5b                   	pop    ebx
c001699f:	5e                   	pop    esi
c00169a0:	5f                   	pop    edi
c00169a1:	5d                   	pop    ebp
c00169a2:	c3                   	ret    

c00169a3 <setupTimer(int)>:
c00169a3:	57                   	push   edi
c00169a4:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00169a9:	56                   	push   esi
c00169aa:	53                   	push   ebx
c00169ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169b5:	83 ec 0c             	sub    esp,0xc
c00169b8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169be:	e8 61 d6 ff ff       	call   c0014024 <Device::getName()>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169c9:	0f 85 8d 00 00 00    	jne    c0016a5c <setupTimer(int)+0xb9>
c00169cf:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00169d4:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169db:	74 7f                	je     c0016a5c <setupTimer(int)+0xb9>
c00169dd:	83 ec 0c             	sub    esp,0xc
c00169e0:	68 5c 01 00 00       	push   0x15c
c00169e5:	e8 a2 8e ff ff       	call   c000f88c <malloc>
c00169ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00169ed:	89 c3                	mov    ebx,eax
c00169ef:	e8 f8 03 01 00       	call   c0026dec <PIT::PIT()>
c00169f4:	59                   	pop    ecx
c00169f5:	5f                   	pop    edi
c00169f6:	53                   	push   ebx
c00169f7:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c00169fd:	e8 22 d3 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c0016a02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a04:	6a 00                	push   0x0
c0016a06:	6a 00                	push   0x0
c0016a08:	56                   	push   esi
c0016a09:	53                   	push   ebx
c0016a0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a0d:	83 c4 14             	add    esp,0x14
c0016a10:	68 60 01 00 00       	push   0x160
c0016a15:	e8 72 8e ff ff       	call   c000f88c <malloc>
c0016a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a1d:	89 c7                	mov    edi,eax
c0016a1f:	e8 78 02 01 00       	call   c0026c9c <APICTimer::APICTimer()>
c0016a24:	6a 00                	push   0x0
c0016a26:	6a 00                	push   0x0
c0016a28:	56                   	push   esi
c0016a29:	57                   	push   edi
c0016a2a:	e8 6f 01 01 00       	call   c0026b9e <APICTimer::open(int, int, void*)>
c0016a2f:	83 c4 20             	add    esp,0x20
c0016a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a34:	6a 00                	push   0x0
c0016a36:	6a 00                	push   0x0
c0016a38:	6a 00                	push   0x0
c0016a3a:	53                   	push   ebx
c0016a3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a3e:	58                   	pop    eax
c0016a3f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0016a44:	5a                   	pop    edx
c0016a45:	57                   	push   edi
c0016a46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a4c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a52:	e8 cd d2 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	eb 33                	jmp    c0016a8f <setupTimer(int)+0xec>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 5c 01 00 00       	push   0x15c
c0016a64:	e8 23 8e ff ff       	call   c000f88c <malloc>
c0016a69:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a6c:	89 c3                	mov    ebx,eax
c0016a6e:	e8 79 03 01 00       	call   c0026dec <PIT::PIT()>
c0016a73:	58                   	pop    eax
c0016a74:	5a                   	pop    edx
c0016a75:	53                   	push   ebx
c0016a76:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0016a7c:	e8 a3 d2 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c0016a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a83:	6a 00                	push   0x0
c0016a85:	6a 00                	push   0x0
c0016a87:	56                   	push   esi
c0016a88:	53                   	push   ebx
c0016a89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a8c:	83 c4 20             	add    esp,0x20
c0016a8f:	89 d8                	mov    eax,ebx
c0016a91:	5b                   	pop    ebx
c0016a92:	5e                   	pop    esi
c0016a93:	5f                   	pop    edi
c0016a94:	c3                   	ret    
c0016a95:	90                   	nop

c0016a96 <VCache::VCache(PhysicalDisk*)>:
c0016a96:	53                   	push   ebx
c0016a97:	83 ec 18             	sub    esp,0x18
c0016a9a:	ba b8 bc 02 c0       	mov    edx,0xc002bcb8
c0016a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa3:	89 10                	mov    DWORD PTR [eax],edx
c0016aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ac6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ad8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016afd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b08:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b10:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b18:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b20:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b27:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b2f:	83 ec 0c             	sub    esp,0xc
c0016b32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b36:	e8 51 8d ff ff       	call   c000f88c <malloc>
c0016b3b:	83 c4 10             	add    esp,0x10
c0016b3e:	89 c3                	mov    ebx,eax
c0016b40:	83 ec 0c             	sub    esp,0xc
c0016b43:	53                   	push   ebx
c0016b44:	e8 35 73 00 00       	call   c001de7e <Mutex::Mutex()>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b50:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b62:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b6d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b7e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b8e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b91:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b98:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ba0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ba6:	05 00 01 00 00       	add    eax,0x100
c0016bab:	c1 e0 04             	shl    eax,0x4
c0016bae:	83 ec 0c             	sub    esp,0xc
c0016bb1:	50                   	push   eax
c0016bb2:	e8 d5 8c ff ff       	call   c000f88c <malloc>
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	89 c2                	mov    edx,eax
c0016bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc7:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bd6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016be0:	c1 e0 07             	shl    eax,0x7
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	50                   	push   eax
c0016be7:	e8 a0 8c ff ff       	call   c000f88c <malloc>
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	89 c2                	mov    edx,eax
c0016bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016bf8:	90                   	nop
c0016bf9:	83 c4 18             	add    esp,0x18
c0016bfc:	5b                   	pop    ebx
c0016bfd:	c3                   	ret    

c0016bfe <VCache::invalidateReadBuffer()>:
c0016bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c02:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c08:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c0c:	c3                   	ret    
c0016c0d:	90                   	nop

c0016c0e <VCache::writeWriteBuffer()>:
c0016c0e:	53                   	push   ebx
c0016c0f:	83 ec 14             	sub    esp,0x14
c0016c12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c19:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c1b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c21:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c24:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c27:	50                   	push   eax
c0016c28:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c2b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c32:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c39:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c3d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c44:	83 c4 28             	add    esp,0x28
c0016c47:	5b                   	pop    ebx
c0016c48:	c3                   	ret    
c0016c49:	90                   	nop

c0016c4a <VCache::~VCache()>:
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	ba b8 bc 02 c0       	mov    edx,0xc002bcb8
c0016c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c56:	89 10                	mov    DWORD PTR [eax],edx
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c5f:	84 c0                	test   al,al
c0016c61:	74 0f                	je     c0016c72 <VCache::~VCache()+0x28>
c0016c63:	83 ec 0c             	sub    esp,0xc
c0016c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c6a:	e8 9f ff ff ff       	call   c0016c0e <VCache::writeWriteBuffer()>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c76:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	50                   	push   eax
c0016c7d:	e8 1a 8c ff ff       	call   c000f89c <free>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	50                   	push   eax
c0016c90:	e8 07 8c ff ff       	call   c000f89c <free>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	90                   	nop
c0016c99:	83 c4 0c             	add    esp,0xc
c0016c9c:	c3                   	ret    
c0016c9d:	90                   	nop

c0016c9e <VCache::~VCache()>:
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	83 ec 0c             	sub    esp,0xc
c0016ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca8:	e8 9d ff ff ff       	call   c0016c4a <VCache::~VCache()>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 ec 08             	sub    esp,0x8
c0016cb3:	6a 44                	push   0x44
c0016cb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb9:	e8 4d bb ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	83 c4 0c             	add    esp,0xc
c0016cc4:	c3                   	ret    
c0016cc5:	90                   	nop

c0016cc6 <VCache::write(unsigned long long, int, void*)>:
c0016cc6:	55                   	push   ebp
c0016cc7:	57                   	push   edi
c0016cc8:	56                   	push   esi
c0016cc9:	53                   	push   ebx
c0016cca:	83 ec 18             	sub    esp,0x18
c0016ccd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016cd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cd5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016cd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cdc:	e8 2b 77 00 00       	call   c001e40c <Semaphore::acquire()>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ce8:	74 0c                	je     c0016cf6 <VCache::write(unsigned long long, int, void*)+0x30>
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	53                   	push   ebx
c0016cee:	e8 0b ff ff ff       	call   c0016bfe <VCache::invalidateReadBuffer()>
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016cfa:	74 5c                	je     c0016d58 <VCache::write(unsigned long long, int, void*)+0x92>
c0016cfc:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016cff:	89 e8                	mov    eax,ebp
c0016d01:	99                   	cdq    
c0016d02:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d05:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d08:	89 c1                	mov    ecx,eax
c0016d0a:	89 d0                	mov    eax,edx
c0016d0c:	31 f1                	xor    ecx,esi
c0016d0e:	31 f8                	xor    eax,edi
c0016d10:	09 c1                	or     ecx,eax
c0016d12:	75 38                	jne    c0016d4c <VCache::write(unsigned long long, int, void*)+0x86>
c0016d14:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016d19:	75 31                	jne    c0016d4c <VCache::write(unsigned long long, int, void*)+0x86>
c0016d1b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d1e:	89 ef                	mov    edi,ebp
c0016d20:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d26:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d2a:	0f af f9             	imul   edi,ecx
c0016d2d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d32:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d35:	40                   	inc    eax
c0016d36:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d39:	83 c0 80             	add    eax,0xffffff80
c0016d3c:	75 5c                	jne    c0016d9a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	53                   	push   ebx
c0016d42:	e8 c7 fe ff ff       	call   c0016c0e <VCache::writeWriteBuffer()>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	eb 4e                	jmp    c0016d9a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	53                   	push   ebx
c0016d50:	e8 b9 fe ff ff       	call   c0016c0e <VCache::writeWriteBuffer()>
c0016d55:	83 c4 10             	add    esp,0x10
c0016d58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d5b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d60:	7f 22                	jg     c0016d84 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d62:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d65:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d6c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d70:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d73:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d76:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d7c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d82:	eb 16                	jmp    c0016d9a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d91:	57                   	push   edi
c0016d92:	56                   	push   esi
c0016d93:	50                   	push   eax
c0016d94:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d97:	83 c4 20             	add    esp,0x20
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016da0:	e8 a1 7d 00 00       	call   c001eb46 <Semaphore::release()>
c0016da5:	83 c4 1c             	add    esp,0x1c
c0016da8:	31 c0                	xor    eax,eax
c0016daa:	5b                   	pop    ebx
c0016dab:	5e                   	pop    esi
c0016dac:	5f                   	pop    edi
c0016dad:	5d                   	pop    ebp
c0016dae:	c3                   	ret    
c0016daf:	90                   	nop

c0016db0 <VCache::read(unsigned long long, int, void*)>:
c0016db0:	55                   	push   ebp
c0016db1:	57                   	push   edi
c0016db2:	56                   	push   esi
c0016db3:	53                   	push   ebx
c0016db4:	83 ec 28             	sub    esp,0x28
c0016db7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dbb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016dbf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dc3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dc7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dca:	e8 3d 76 00 00       	call   c001e40c <Semaphore::acquire()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dd6:	74 0c                	je     c0016de4 <VCache::read(unsigned long long, int, void*)+0x34>
c0016dd8:	83 ec 0c             	sub    esp,0xc
c0016ddb:	53                   	push   ebx
c0016ddc:	e8 2d fe ff ff       	call   c0016c0e <VCache::writeWriteBuffer()>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	83 fd 01             	cmp    ebp,0x1
c0016de7:	0f 85 80 00 00 00    	jne    c0016e6d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ded:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016df4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016dfb:	75 70                	jne    c0016e6d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016dfd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016e00:	89 e9                	mov    ecx,ebp
c0016e02:	f7 d9                	neg    ecx
c0016e04:	89 c8                	mov    eax,ecx
c0016e06:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e0a:	c1 f8 1f             	sar    eax,0x1f
c0016e0d:	21 f1                	and    ecx,esi
c0016e0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e13:	89 c8                	mov    eax,ecx
c0016e15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e19:	21 f9                	and    ecx,edi
c0016e1b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e1f:	89 ca                	mov    edx,ecx
c0016e21:	74 0a                	je     c0016e2d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e23:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e26:	75 05                	jne    c0016e2d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e28:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e2b:	74 23                	je     c0016e50 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e2d:	83 ec 0c             	sub    esp,0xc
c0016e30:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e38:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e3b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e3e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e40:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e43:	55                   	push   ebp
c0016e44:	52                   	push   edx
c0016e45:	50                   	push   eax
c0016e46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e4a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e4d:	83 c4 20             	add    esp,0x20
c0016e50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e53:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e57:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e60:	48                   	dec    eax
c0016e61:	21 c6                	and    esi,eax
c0016e63:	0f af f1             	imul   esi,ecx
c0016e66:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e6b:	eb 1d                	jmp    c0016e8a <VCache::read(unsigned long long, int, void*)+0xda>
c0016e6d:	83 ec 0c             	sub    esp,0xc
c0016e70:	53                   	push   ebx
c0016e71:	e8 88 fd ff ff       	call   c0016bfe <VCache::invalidateReadBuffer()>
c0016e76:	5a                   	pop    edx
c0016e77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e7c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e80:	55                   	push   ebp
c0016e81:	57                   	push   edi
c0016e82:	56                   	push   esi
c0016e83:	50                   	push   eax
c0016e84:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e87:	83 c4 20             	add    esp,0x20
c0016e8a:	83 ec 0c             	sub    esp,0xc
c0016e8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e90:	e8 b1 7c 00 00       	call   c001eb46 <Semaphore::release()>
c0016e95:	83 c4 2c             	add    esp,0x2c
c0016e98:	31 c0                	xor    eax,eax
c0016e9a:	5b                   	pop    ebx
c0016e9b:	5e                   	pop    esi
c0016e9c:	5f                   	pop    edi
c0016e9d:	5d                   	pop    ebp
c0016e9e:	c3                   	ret    
c0016e9f:	90                   	nop

c0016ea0 <Video::putrect(int, int, int, int, unsigned int)>:
c0016ea0:	55                   	push   ebp
c0016ea1:	57                   	push   edi
c0016ea2:	56                   	push   esi
c0016ea3:	53                   	push   ebx
c0016ea4:	83 ec 1c             	sub    esp,0x1c
c0016ea7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016eab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eaf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016eb3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016eb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ebf:	01 df                	add    edi,ebx
c0016ec1:	39 fb                	cmp    ebx,edi
c0016ec3:	7d 1f                	jge    c0016ee4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ec5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ec9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ecd:	7d 12                	jge    c0016ee1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016ecf:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ed1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ed5:	53                   	push   ebx
c0016ed6:	55                   	push   ebp
c0016ed7:	45                   	inc    ebp
c0016ed8:	56                   	push   esi
c0016ed9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	eb e8                	jmp    c0016ec9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ee1:	43                   	inc    ebx
c0016ee2:	eb dd                	jmp    c0016ec1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ee4:	83 c4 1c             	add    esp,0x1c
c0016ee7:	5b                   	pop    ebx
c0016ee8:	5e                   	pop    esi
c0016ee9:	5f                   	pop    edi
c0016eea:	5d                   	pop    ebp
c0016eeb:	c3                   	ret    

c0016eec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016eec:	55                   	push   ebp
c0016eed:	57                   	push   edi
c0016eee:	31 ff                	xor    edi,edi
c0016ef0:	56                   	push   esi
c0016ef1:	53                   	push   ebx
c0016ef2:	83 ec 1c             	sub    esp,0x1c
c0016ef5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ef9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016efd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f04:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f0d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f11:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f15:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f18:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f1c:	01 f9                	add    ecx,edi
c0016f1e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f22:	7d 2f                	jge    c0016f53 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f24:	31 f6                	xor    esi,esi
c0016f26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f2a:	01 f2                	add    edx,esi
c0016f2c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f30:	7d 1a                	jge    c0016f4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f35:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f38:	46                   	inc    esi
c0016f39:	51                   	push   ecx
c0016f3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f3e:	52                   	push   edx
c0016f3f:	55                   	push   ebp
c0016f40:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f4a:	eb da                	jmp    c0016f26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f4c:	47                   	inc    edi
c0016f4d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f51:	eb c5                	jmp    c0016f18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f53:	83 c4 1c             	add    esp,0x1c
c0016f56:	5b                   	pop    ebx
c0016f57:	5e                   	pop    esi
c0016f58:	5f                   	pop    edi
c0016f59:	5d                   	pop    ebp
c0016f5a:	c3                   	ret    
c0016f5b:	90                   	nop

c0016f5c <Video::blit(unsigned int*, int, int, int, int)>:
c0016f5c:	55                   	push   ebp
c0016f5d:	57                   	push   edi
c0016f5e:	56                   	push   esi
c0016f5f:	53                   	push   ebx
c0016f60:	83 ec 1c             	sub    esp,0x1c
c0016f63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f6b:	85 c0                	test   eax,eax
c0016f6d:	79 02                	jns    c0016f71 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f6f:	31 c0                	xor    eax,eax
c0016f71:	c1 e0 02             	shl    eax,0x2
c0016f74:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f80:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f84:	39 d8                	cmp    eax,ebx
c0016f86:	7e 49                	jle    c0016fd1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f88:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f8e:	7c 41                	jl     c0016fd1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f90:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f94:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f98:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f9c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fa0:	39 f9                	cmp    ecx,edi
c0016fa2:	7e 22                	jle    c0016fc6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fa4:	83 c5 04             	add    ebp,0x4
c0016fa7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fad:	7c 14                	jl     c0016fc3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016faf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fb1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fbc:	56                   	push   esi
c0016fbd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	47                   	inc    edi
c0016fc4:	eb d2                	jmp    c0016f98 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fca:	43                   	inc    ebx
c0016fcb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fcf:	eb ab                	jmp    c0016f7c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fd1:	83 c4 1c             	add    esp,0x1c
c0016fd4:	5b                   	pop    ebx
c0016fd5:	5e                   	pop    esi
c0016fd6:	5f                   	pop    edi
c0016fd7:	5d                   	pop    ebp
c0016fd8:	c3                   	ret    
c0016fd9:	90                   	nop

c0016fda <Video::clearScreen(unsigned int)>:
c0016fda:	57                   	push   edi
c0016fdb:	56                   	push   esi
c0016fdc:	53                   	push   ebx
c0016fdd:	31 db                	xor    ebx,ebx
c0016fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fe3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fe9:	7e 1f                	jle    c001700a <Video::clearScreen(unsigned int)+0x30>
c0016feb:	31 ff                	xor    edi,edi
c0016fed:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ff3:	7e 12                	jle    c0017007 <Video::clearScreen(unsigned int)+0x2d>
c0016ff5:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ffb:	53                   	push   ebx
c0016ffc:	57                   	push   edi
c0016ffd:	47                   	inc    edi
c0016ffe:	56                   	push   esi
c0016fff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	eb e6                	jmp    c0016fed <Video::clearScreen(unsigned int)+0x13>
c0017007:	43                   	inc    ebx
c0017008:	eb d9                	jmp    c0016fe3 <Video::clearScreen(unsigned int)+0x9>
c001700a:	5b                   	pop    ebx
c001700b:	5e                   	pop    esi
c001700c:	5f                   	pop    edi
c001700d:	c3                   	ret    

c001700e <Video::putpixel(int, int, unsigned int)>:
c001700e:	c7 44 24 04 c0 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bcc0
c0017016:	e9 06 33 00 00       	jmp    c001a321 <Krnl::panic(char const*)>
c001701b:	90                   	nop

c001701c <Video::Video(char const*)>:
c001701c:	83 ec 0c             	sub    esp,0xc
c001701f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017023:	83 ec 08             	sub    esp,0x8
c0017026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001702a:	50                   	push   eax
c001702b:	e8 f8 ce ff ff       	call   c0013f28 <Device::Device(char const*)>
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	ba 44 bd 02 c0       	mov    edx,0xc002bd44
c0017038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001703c:	89 10                	mov    DWORD PTR [eax],edx
c001703e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017042:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001704c:	90                   	nop
c001704d:	83 c4 0c             	add    esp,0xc
c0017050:	c3                   	ret    
c0017051:	90                   	nop

c0017052 <Video::~Video()>:
c0017052:	83 ec 0c             	sub    esp,0xc
c0017055:	ba 44 bd 02 c0       	mov    edx,0xc002bd44
c001705a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705e:	89 10                	mov    DWORD PTR [eax],edx
c0017060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017064:	83 ec 0c             	sub    esp,0xc
c0017067:	50                   	push   eax
c0017068:	e8 85 cb ff ff       	call   c0013bf2 <Device::~Device()>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	90                   	nop
c0017071:	83 c4 0c             	add    esp,0xc
c0017074:	c3                   	ret    
c0017075:	90                   	nop

c0017076 <Video::~Video()>:
c0017076:	83 ec 0c             	sub    esp,0xc
c0017079:	83 ec 0c             	sub    esp,0xc
c001707c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017080:	e8 cd ff ff ff       	call   c0017052 <Video::~Video()>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	83 ec 08             	sub    esp,0x8
c001708b:	68 64 01 00 00       	push   0x164
c0017090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017094:	e8 72 b7 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	83 c4 0c             	add    esp,0xc
c001709f:	c3                   	ret    

c00170a0 <Video::isMonochrome()>:
c00170a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170aa:	c3                   	ret    
c00170ab:	90                   	nop

c00170ac <Video::getWidth()>:
c00170ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170b6:	c3                   	ret    
c00170b7:	90                   	nop

c00170b8 <Video::getHeight()>:
c00170b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170c2:	c3                   	ret    
c00170c3:	90                   	nop

c00170c4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170c4:	55                   	push   ebp
c00170c5:	57                   	push   edi
c00170c6:	56                   	push   esi
c00170c7:	53                   	push   ebx
c00170c8:	83 ec 2c             	sub    esp,0x2c
c00170cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170cf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170d3:	83 f8 01             	cmp    eax,0x1
c00170d6:	19 c9                	sbb    ecx,ecx
c00170d8:	31 db                	xor    ebx,ebx
c00170da:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170de:	89 cd                	mov    ebp,ecx
c00170e0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170e8:	f7 d5                	not    ebp
c00170ea:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170f0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170f4:	01 d8                	add    eax,ebx
c00170f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170fa:	56                   	push   esi
c00170fb:	e8 b8 ff ff ff       	call   c00170b8 <Video::getHeight()>
c0017100:	59                   	pop    ecx
c0017101:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017105:	7e 70                	jle    c0017177 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017107:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001710b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001710f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017116:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001711a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017121:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017125:	89 f8                	mov    eax,edi
c0017127:	83 c0 20             	add    eax,0x20
c001712a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001712e:	56                   	push   esi
c001712f:	e8 78 ff ff ff       	call   c00170ac <Video::getWidth()>
c0017134:	5a                   	pop    edx
c0017135:	39 c7                	cmp    edi,eax
c0017137:	7d 34                	jge    c001716d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017139:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001713e:	74 05                	je     c0017145 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017140:	8b 06                	mov    eax,DWORD PTR [esi]
c0017142:	55                   	push   ebp
c0017143:	eb 0d                	jmp    c0017152 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017145:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001714a:	74 12                	je     c001715e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001714c:	8b 06                	mov    eax,DWORD PTR [esi]
c001714e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017152:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017156:	57                   	push   edi
c0017157:	56                   	push   esi
c0017158:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017162:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017166:	47                   	inc    edi
c0017167:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001716b:	75 c1                	jne    c001712e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001716d:	43                   	inc    ebx
c001716e:	83 fb 20             	cmp    ebx,0x20
c0017171:	0f 85 79 ff ff ff    	jne    c00170f0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017177:	83 c4 2c             	add    esp,0x2c
c001717a:	5b                   	pop    ebx
c001717b:	5e                   	pop    esi
c001717c:	5f                   	pop    edi
c001717d:	5d                   	pop    ebp
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017180:	55                   	push   ebp
c0017181:	57                   	push   edi
c0017182:	56                   	push   esi
c0017183:	53                   	push   ebx
c0017184:	83 ec 28             	sub    esp,0x28
c0017187:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001718b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001718f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017193:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017197:	c1 e7 08             	shl    edi,0x8
c001719a:	01 c7                	add    edi,eax
c001719c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171a0:	c1 e0 08             	shl    eax,0x8
c00171a3:	01 d0                	add    eax,edx
c00171a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ad:	0f af c7             	imul   eax,edi
c00171b0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171b7:	50                   	push   eax
c00171b8:	e8 cf 86 ff ff       	call   c000f88c <malloc>
c00171bd:	83 c4 10             	add    esp,0x10
c00171c0:	89 c5                	mov    ebp,eax
c00171c2:	85 c0                	test   eax,eax
c00171c4:	75 15                	jne    c00171db <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171c6:	83 ec 0c             	sub    esp,0xc
c00171c9:	68 e1 bc 02 c0       	push   0xc002bce1
c00171ce:	e8 18 b7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	e9 1c 01 00 00       	jmp    c00172f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171db:	be 12 00 00 00       	mov    esi,0x12
c00171e0:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171e4:	74 11                	je     c00171f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171e6:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171ea:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171ee:	c1 fe 03             	sar    esi,0x3
c00171f1:	0f af f0             	imul   esi,eax
c00171f4:	83 c6 12             	add    esi,0x12
c00171f7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171fb:	74 04                	je     c0017201 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00171fd:	85 ff                	test   edi,edi
c00171ff:	75 12                	jne    c0017213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017201:	83 ec 0c             	sub    esp,0xc
c0017204:	68 f8 bc 02 c0       	push   0xc002bcf8
c0017209:	e8 dd b6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001720e:	e9 ce 00 00 00       	jmp    c00172e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017213:	52                   	push   edx
c0017214:	52                   	push   edx
c0017215:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017219:	50                   	push   eax
c001721a:	68 0d bd 02 c0       	push   0xc002bd0d
c001721f:	e8 c7 b6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017224:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	80 fa 02             	cmp    dl,0x2
c001722e:	0f 85 98 00 00 00    	jne    c00172cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017234:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017239:	75 10                	jne    c001724b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001723b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001723f:	75 0a                	jne    c001724b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017241:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017244:	83 e8 18             	sub    eax,0x18
c0017247:	a8 f7                	test   al,0xf7
c0017249:	74 0a                	je     c0017255 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001724b:	83 ec 0c             	sub    esp,0xc
c001724e:	68 1a bd 02 c0       	push   0xc002bd1a
c0017253:	eb 7f                	jmp    c00172d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017255:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001725d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017265:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017269:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017271:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017275:	75 0c                	jne    c0017283 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017277:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001727c:	c1 e0 18             	shl    eax,0x18
c001727f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017283:	41                   	inc    ecx
c0017284:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017289:	c1 e2 10             	shl    edx,0x10
c001728c:	89 d0                	mov    eax,edx
c001728e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017293:	c1 e2 08             	shl    edx,0x8
c0017296:	09 c2                	or     edx,eax
c0017298:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001729c:	09 c2                	or     edx,eax
c001729e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172a2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172a6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172aa:	c1 f8 03             	sar    eax,0x3
c00172ad:	01 c6                	add    esi,eax
c00172af:	89 c8                	mov    eax,ecx
c00172b1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172b5:	39 c7                	cmp    edi,eax
c00172b7:	7f b0                	jg     c0017269 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172b9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172c1:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172c4:	7e 22                	jle    c00172e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172ca:	eb 99                	jmp    c0017265 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172cc:	50                   	push   eax
c00172cd:	50                   	push   eax
c00172ce:	52                   	push   edx
c00172cf:	68 28 bd 02 c0       	push   0xc002bd28
c00172d4:	e8 12 b6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00172d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172dc:	e8 bb 85 ff ff       	call   c000f89c <free>
c00172e1:	83 c4 10             	add    esp,0x10
c00172e4:	31 ed                	xor    ebp,ebp
c00172e6:	eb 0f                	jmp    c00172f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172ec:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172ef:	89 38                	mov    DWORD PTR [eax],edi
c00172f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172f5:	89 08                	mov    DWORD PTR [eax],ecx
c00172f7:	83 c4 1c             	add    esp,0x1c
c00172fa:	89 e8                	mov    eax,ebp
c00172fc:	5b                   	pop    ebx
c00172fd:	5e                   	pop    esi
c00172fe:	5f                   	pop    edi
c00172ff:	5d                   	pop    ebp
c0017300:	c3                   	ret    
c0017301:	90                   	nop

c0017302 <Video::putTGA(int, int, unsigned char*, int)>:
c0017302:	55                   	push   ebp
c0017303:	57                   	push   edi
c0017304:	56                   	push   esi
c0017305:	53                   	push   ebx
c0017306:	83 ec 28             	sub    esp,0x28
c0017309:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001730d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017311:	50                   	push   eax
c0017312:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017316:	50                   	push   eax
c0017317:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001731b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001731f:	56                   	push   esi
c0017320:	e8 5b fe ff ff       	call   c0017180 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017325:	83 c4 20             	add    esp,0x20
c0017328:	85 c0                	test   eax,eax
c001732a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001732e:	74 35                	je     c0017365 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017330:	89 c7                	mov    edi,eax
c0017332:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017336:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001733a:	39 d8                	cmp    eax,ebx
c001733c:	7e 27                	jle    c0017365 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001733e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017342:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017346:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001734a:	39 e8                	cmp    eax,ebp
c001734c:	7e 14                	jle    c0017362 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001734e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017350:	83 c7 04             	add    edi,0x4
c0017353:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017356:	53                   	push   ebx
c0017357:	55                   	push   ebp
c0017358:	45                   	inc    ebp
c0017359:	56                   	push   esi
c001735a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	eb e0                	jmp    c0017342 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017362:	43                   	inc    ebx
c0017363:	eb cd                	jmp    c0017332 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017365:	83 c4 1c             	add    esp,0x1c
c0017368:	5b                   	pop    ebx
c0017369:	5e                   	pop    esi
c001736a:	5f                   	pop    edi
c001736b:	5d                   	pop    ebp
c001736c:	c3                   	ret    
c001736d:	90                   	nop

c001736e <ACPI::close(int, int, void*)>:
c001736e:	83 ec 1c             	sub    esp,0x1c
c0017371:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017379:	74 0a                	je     c0017385 <ACPI::close(int, int, void*)+0x17>
c001737b:	b8 00 00 00 00       	mov    eax,0x0
c0017380:	e9 9a 00 00 00       	jmp    c001741f <ACPI::close(int, int, void*)+0xb1>
c0017385:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001738a:	75 37                	jne    c00173c3 <ACPI::close(int, int, void*)+0x55>
c001738c:	83 ec 0c             	sub    esp,0xc
c001738f:	68 84 bd 02 c0       	push   0xc002bd84
c0017394:	e8 52 b5 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017399:	83 c4 10             	add    esp,0x10
c001739c:	a1 c8 16 03 c0       	mov    eax,ds:0xc00316c8
c00173a1:	85 c0                	test   eax,eax
c00173a3:	74 07                	je     c00173ac <ACPI::close(int, int, void*)+0x3e>
c00173a5:	a1 c8 16 03 c0       	mov    eax,ds:0xc00316c8
c00173aa:	ff d0                	call   eax
c00173ac:	83 ec 0c             	sub    esp,0xc
c00173af:	68 9c be 02 c0       	push   0xc002be9c
c00173b4:	e8 68 2f 00 00       	call   c001a321 <Krnl::panic(char const*)>
c00173b9:	83 c4 10             	add    esp,0x10
c00173bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173c1:	eb 5c                	jmp    c001741f <ACPI::close(int, int, void*)+0xb1>
c00173c3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173c8:	75 50                	jne    c001741a <ACPI::close(int, int, void*)+0xac>
c00173ca:	a1 c4 16 03 c0       	mov    eax,ds:0xc00316c4
c00173cf:	85 c0                	test   eax,eax
c00173d1:	74 07                	je     c00173da <ACPI::close(int, int, void*)+0x6c>
c00173d3:	a1 c4 16 03 c0       	mov    eax,ds:0xc00316c4
c00173d8:	ff d0                	call   eax
c00173da:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173e4:	83 e0 02             	and    eax,0x2
c00173e7:	74 1c                	je     c0017405 <ACPI::close(int, int, void*)+0x97>
c00173e9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173f4:	89 c2                	mov    edx,eax
c00173f6:	ec                   	in     al,dx
c00173f7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173fb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017403:	eb da                	jmp    c00173df <ACPI::close(int, int, void*)+0x71>
c0017405:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001740c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017411:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017415:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017419:	ee                   	out    dx,al
c001741a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001741f:	83 c4 1c             	add    esp,0x1c
c0017422:	c3                   	ret    

c0017423 <findRSDP()>:
c0017423:	83 ec 1c             	sub    esp,0x1c
c0017426:	83 ec 0c             	sub    esp,0xc
c0017429:	68 91 bd 02 c0       	push   0xc002bd91
c001742e:	e8 b8 b4 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001743b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017441:	83 e0 04             	and    eax,0x4
c0017444:	84 c0                	test   al,al
c0017446:	75 07                	jne    c001744f <findRSDP()+0x2c>
c0017448:	b8 00 00 00 00       	mov    eax,0x0
c001744d:	eb 6a                	jmp    c00174b9 <findRSDP()+0x96>
c001744f:	a1 74 f0 02 c0       	mov    eax,ds:0xc002f074
c0017454:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017459:	7f 1b                	jg     c0017476 <findRSDP()+0x53>
c001745b:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017460:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017466:	83 e2 fb             	and    edx,0xfffffffb
c0017469:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001746f:	b8 00 00 00 00       	mov    eax,0x0
c0017474:	eb 43                	jmp    c00174b9 <findRSDP()+0x96>
c0017476:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001747e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017486:	77 2c                	ja     c00174b4 <findRSDP()+0x91>
c0017488:	83 ec 04             	sub    esp,0x4
c001748b:	6a 08                	push   0x8
c001748d:	68 9f bd 02 c0       	push   0xc002bd9f
c0017492:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017496:	e8 b1 91 fe ff       	call   c000064c <memcmp>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	85 c0                	test   eax,eax
c00174a0:	0f 94 c0             	sete   al
c00174a3:	84 c0                	test   al,al
c00174a5:	74 06                	je     c00174ad <findRSDP()+0x8a>
c00174a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ab:	eb 0c                	jmp    c00174b9 <findRSDP()+0x96>
c00174ad:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174b2:	eb ca                	jmp    c001747e <findRSDP()+0x5b>
c00174b4:	b8 00 00 00 00       	mov    eax,0x0
c00174b9:	83 c4 1c             	add    esp,0x1c
c00174bc:	c3                   	ret    

c00174bd <loadACPITables(unsigned char*)>:
c00174bd:	57                   	push   edi
c00174be:	56                   	push   esi
c00174bf:	53                   	push   ebx
c00174c0:	83 ec 60             	sub    esp,0x60
c00174c3:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00174c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174ce:	83 e0 04             	and    eax,0x4
c00174d1:	84 c0                	test   al,al
c00174d3:	0f 84 33 02 00 00    	je     c001770c <loadACPITables(unsigned char*)+0x24f>
c00174d9:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c00174de:	84 c0                	test   al,al
c00174e0:	74 75                	je     c0017557 <loadACPITables(unsigned char*)+0x9a>
c00174e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174e6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174f1:	83 e8 24             	sub    eax,0x24
c00174f4:	c1 e8 03             	shr    eax,0x3
c00174f7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174fb:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017503:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017507:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001750b:	0f 8d b2 00 00 00    	jge    c00175c3 <loadACPITables(unsigned char*)+0x106>
c0017511:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017515:	83 c0 24             	add    eax,0x24
c0017518:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001751c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017520:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017524:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017528:	c1 e0 03             	shl    eax,0x3
c001752b:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001752f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017533:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017536:	8b 00                	mov    eax,DWORD PTR [eax]
c0017538:	89 c1                	mov    ecx,eax
c001753a:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c001753f:	8d 50 01             	lea    edx,[eax+0x1]
c0017542:	89 15 cc 16 03 c0    	mov    DWORD PTR ds:0xc00316cc,edx
c0017548:	89 ca                	mov    edx,ecx
c001754a:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c0017551:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017555:	eb ac                	jmp    c0017503 <loadACPITables(unsigned char*)+0x46>
c0017557:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001755b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001755f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017563:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017566:	83 e8 24             	sub    eax,0x24
c0017569:	c1 e8 02             	shr    eax,0x2
c001756c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017570:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017578:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001757c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017580:	7d 41                	jge    c00175c3 <loadACPITables(unsigned char*)+0x106>
c0017582:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017586:	83 c0 24             	add    eax,0x24
c0017589:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001758d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017591:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017595:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017599:	c1 e0 02             	shl    eax,0x2
c001759c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175a6:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c00175ab:	8d 50 01             	lea    edx,[eax+0x1]
c00175ae:	89 15 cc 16 03 c0    	mov    DWORD PTR ds:0xc00316cc,edx
c00175b4:	89 ca                	mov    edx,ecx
c00175b6:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c00175bd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175c1:	eb b5                	jmp    c0017578 <loadACPITables(unsigned char*)+0xbb>
c00175c3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175cb:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c00175d0:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175d4:	0f 8d 33 01 00 00    	jge    c001770d <loadACPITables(unsigned char*)+0x250>
c00175da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175de:	8b 04 c5 e4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce91c]
c00175e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175f5:	25 ff 0f 00 00       	and    eax,0xfff
c00175fa:	89 c6                	mov    esi,eax
c00175fc:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c0017602:	83 ec 0c             	sub    esp,0xc
c0017605:	6a 01                	push   0x1
c0017607:	e8 d9 9e ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c001760c:	83 c4 10             	add    esp,0x10
c001760f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017613:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017619:	83 ec 0c             	sub    esp,0xc
c001761c:	6a 01                	push   0x1
c001761e:	6a 01                	push   0x1
c0017620:	50                   	push   eax
c0017621:	52                   	push   edx
c0017622:	53                   	push   ebx
c0017623:	e8 ea a9 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017628:	83 c4 20             	add    esp,0x20
c001762b:	09 f0                	or     eax,esi
c001762d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017631:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017635:	c1 e0 03             	shl    eax,0x3
c0017638:	05 e0 16 03 c0       	add    eax,0xc00316e0
c001763d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017645:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017649:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017651:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017659:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001765d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017661:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017665:	89 c6                	mov    esi,eax
c0017667:	89 d7                	mov    edi,edx
c0017669:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001766b:	89 c8                	mov    eax,ecx
c001766d:	89 fa                	mov    edx,edi
c001766f:	89 f3                	mov    ebx,esi
c0017671:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017675:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017679:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001767d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017684:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017688:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001768c:	05 00 10 00 00       	add    eax,0x1000
c0017691:	c1 e8 0c             	shr    eax,0xc
c0017694:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001769c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a4:	25 ff 0f 00 00       	and    eax,0xfff
c00176a9:	89 c6                	mov    esi,eax
c00176ab:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00176b8:	e8 28 9e ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176ca:	83 ec 0c             	sub    esp,0xc
c00176cd:	6a 01                	push   0x1
c00176cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176d3:	50                   	push   eax
c00176d4:	52                   	push   edx
c00176d5:	53                   	push   ebx
c00176d6:	e8 37 a9 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176db:	83 c4 20             	add    esp,0x20
c00176de:	09 f0                	or     eax,esi
c00176e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e8:	83 ec 0c             	sub    esp,0xc
c00176eb:	50                   	push   eax
c00176ec:	e8 b4 a2 ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176fc:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c0017703:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017707:	e9 bf fe ff ff       	jmp    c00175cb <loadACPITables(unsigned char*)+0x10e>
c001770c:	90                   	nop
c001770d:	83 c4 60             	add    esp,0x60
c0017710:	5b                   	pop    ebx
c0017711:	5e                   	pop    esi
c0017712:	5f                   	pop    edi
c0017713:	c3                   	ret    

c0017714 <findRSDT(unsigned char*)>:
c0017714:	57                   	push   edi
c0017715:	56                   	push   esi
c0017716:	53                   	push   ebx
c0017717:	83 ec 50             	sub    esp,0x50
c001771a:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001771f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017725:	83 e0 04             	and    eax,0x4
c0017728:	84 c0                	test   al,al
c001772a:	75 0a                	jne    c0017736 <findRSDT(unsigned char*)+0x22>
c001772c:	b8 00 00 00 00       	mov    eax,0x0
c0017731:	e9 21 01 00 00       	jmp    c0017857 <findRSDT(unsigned char*)+0x143>
c0017736:	89 e0                	mov    eax,esp
c0017738:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001773c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017740:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017744:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001774c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017750:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017754:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017758:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001775c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017760:	89 c6                	mov    esi,eax
c0017762:	89 d7                	mov    edi,edx
c0017764:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017766:	89 c8                	mov    eax,ecx
c0017768:	89 fa                	mov    edx,edi
c001776a:	89 f3                	mov    ebx,esi
c001776c:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017770:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017774:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017778:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001777c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017780:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001778c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017790:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017798:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001779c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177a0:	25 ff 0f 00 00       	and    eax,0xfff
c00177a5:	89 c6                	mov    esi,eax
c00177a7:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00177ad:	83 ec 0c             	sub    esp,0xc
c00177b0:	6a 02                	push   0x2
c00177b2:	e8 2e 9d ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177be:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177c4:	83 ec 0c             	sub    esp,0xc
c00177c7:	6a 01                	push   0x1
c00177c9:	6a 02                	push   0x2
c00177cb:	50                   	push   eax
c00177cc:	52                   	push   edx
c00177cd:	53                   	push   ebx
c00177ce:	e8 3f a8 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177d3:	83 c4 20             	add    esp,0x20
c00177d6:	09 f0                	or     eax,esi
c00177d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177e0:	25 ff 0f 00 00       	and    eax,0xfff
c00177e5:	89 c6                	mov    esi,eax
c00177e7:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00177ed:	83 ec 0c             	sub    esp,0xc
c00177f0:	6a 02                	push   0x2
c00177f2:	e8 ee 9c ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177fe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017804:	83 ec 0c             	sub    esp,0xc
c0017807:	6a 01                	push   0x1
c0017809:	6a 02                	push   0x2
c001780b:	50                   	push   eax
c001780c:	52                   	push   edx
c001780d:	53                   	push   ebx
c001780e:	e8 ff a7 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017813:	83 c4 20             	add    esp,0x20
c0017816:	09 f0                	or     eax,esi
c0017818:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001781c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017821:	75 11                	jne    c0017834 <findRSDT(unsigned char*)+0x120>
c0017823:	c6 05 e0 18 03 c0 00 	mov    BYTE PTR ds:0xc00318e0,0x0
c001782a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001782e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017832:	eb 1f                	jmp    c0017853 <findRSDT(unsigned char*)+0x13f>
c0017834:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017839:	75 11                	jne    c001784c <findRSDT(unsigned char*)+0x138>
c001783b:	c6 05 e0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318e0,0x1
c0017842:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017846:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001784a:	eb 07                	jmp    c0017853 <findRSDT(unsigned char*)+0x13f>
c001784c:	b8 00 00 00 00       	mov    eax,0x0
c0017851:	eb 04                	jmp    c0017857 <findRSDT(unsigned char*)+0x143>
c0017853:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017857:	83 c4 50             	add    esp,0x50
c001785a:	5b                   	pop    ebx
c001785b:	5e                   	pop    esi
c001785c:	5f                   	pop    edi
c001785d:	c3                   	ret    

c001785e <findDataTable(unsigned char*, char*)>:
c001785e:	83 ec 1c             	sub    esp,0x1c
c0017861:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017866:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001786c:	83 e0 04             	and    eax,0x4
c001786f:	84 c0                	test   al,al
c0017871:	75 07                	jne    c001787a <findDataTable(unsigned char*, char*)+0x1c>
c0017873:	b8 00 00 00 00       	mov    eax,0x0
c0017878:	eb 7c                	jmp    c00178f6 <findDataTable(unsigned char*, char*)+0x98>
c001787a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017882:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c0017887:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001788b:	7d 3a                	jge    c00178c7 <findDataTable(unsigned char*, char*)+0x69>
c001788d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017891:	c1 e0 03             	shl    eax,0x3
c0017894:	05 e0 16 03 c0       	add    eax,0xc00316e0
c0017899:	83 ec 04             	sub    esp,0x4
c001789c:	6a 04                	push   0x4
c001789e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a2:	50                   	push   eax
c00178a3:	e8 a4 8d fe ff       	call   c000064c <memcmp>
c00178a8:	83 c4 10             	add    esp,0x10
c00178ab:	85 c0                	test   eax,eax
c00178ad:	0f 94 c0             	sete   al
c00178b0:	84 c0                	test   al,al
c00178b2:	74 0d                	je     c00178c1 <findDataTable(unsigned char*, char*)+0x63>
c00178b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b8:	8b 04 c5 e4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce91c]
c00178bf:	eb 35                	jmp    c00178f6 <findDataTable(unsigned char*, char*)+0x98>
c00178c1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178c5:	eb bb                	jmp    c0017882 <findDataTable(unsigned char*, char*)+0x24>
c00178c7:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c00178cc:	84 c0                	test   al,al
c00178ce:	74 07                	je     c00178d7 <findDataTable(unsigned char*, char*)+0x79>
c00178d0:	b8 58 00 00 00       	mov    eax,0x58
c00178d5:	eb 05                	jmp    c00178dc <findDataTable(unsigned char*, char*)+0x7e>
c00178d7:	b8 52 00 00 00       	mov    eax,0x52
c00178dc:	83 ec 04             	sub    esp,0x4
c00178df:	50                   	push   eax
c00178e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178e4:	68 c0 be 02 c0       	push   0xc002bec0
c00178e9:	e8 fd af ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00178ee:	83 c4 10             	add    esp,0x10
c00178f1:	b8 00 00 00 00       	mov    eax,0x0
c00178f6:	83 c4 1c             	add    esp,0x1c
c00178f9:	c3                   	ret    

c00178fa <scanMADT()>:
c00178fa:	53                   	push   ebx
c00178fb:	83 ec 38             	sub    esp,0x38
c00178fe:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017903:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017909:	83 e0 04             	and    eax,0x4
c001790c:	84 c0                	test   al,al
c001790e:	0f 84 63 04 00 00    	je     c0017d77 <scanMADT()+0x47d>
c0017914:	e8 0a fb ff ff       	call   c0017423 <findRSDP()>
c0017919:	a3 ec 18 03 c0       	mov    ds:0xc00318ec,eax
c001791e:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c0017923:	85 c0                	test   eax,eax
c0017925:	75 19                	jne    c0017940 <scanMADT()+0x46>
c0017927:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001792c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017932:	83 e2 fb             	and    edx,0xfffffffb
c0017935:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001793b:	e9 3b 04 00 00       	jmp    c0017d7b <scanMADT()+0x481>
c0017940:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c0017945:	83 ec 0c             	sub    esp,0xc
c0017948:	50                   	push   eax
c0017949:	e8 c6 fd ff ff       	call   c0017714 <findRSDT(unsigned char*)>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c0017956:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001795b:	85 c0                	test   eax,eax
c001795d:	75 19                	jne    c0017978 <scanMADT()+0x7e>
c001795f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017964:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001796a:	83 e2 fb             	and    edx,0xfffffffb
c001796d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017973:	e9 03 04 00 00       	jmp    c0017d7b <scanMADT()+0x481>
c0017978:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001797d:	83 ec 0c             	sub    esp,0xc
c0017980:	50                   	push   eax
c0017981:	e8 37 fb ff ff       	call   c00174bd <loadACPITables(unsigned char*)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001798e:	83 ec 08             	sub    esp,0x8
c0017991:	68 a8 bd 02 c0       	push   0xc002bda8
c0017996:	50                   	push   eax
c0017997:	e8 c2 fe ff ff       	call   c001785e <findDataTable(unsigned char*, char*)>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00179a8:	75 19                	jne    c00179c3 <scanMADT()+0xc9>
c00179aa:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00179af:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b5:	83 e2 fe             	and    edx,0xfffffffe
c00179b8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179be:	e9 b8 03 00 00       	jmp    c0017d7b <scanMADT()+0x481>
c00179c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179d2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179d6:	0f 87 9f 03 00 00    	ja     c0017d7b <scanMADT()+0x481>
c00179dc:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179e4:	0f 87 91 03 00 00    	ja     c0017d7b <scanMADT()+0x481>
c00179ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f6:	8d 50 01             	lea    edx,[eax+0x1]
c00179f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a01:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a05:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a18:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a1c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a20:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a25:	0f 86 4f 03 00 00    	jbe    c0017d7a <scanMADT()+0x480>
c0017a2b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a30:	75 57                	jne    c0017a89 <scanMADT()+0x18f>
c0017a32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a36:	8d 50 01             	lea    edx,[eax+0x1]
c0017a39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a3d:	8a 15 e0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ae0
c0017a43:	0f b6 d2             	movzx  edx,dl
c0017a46:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a4a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a4e:	88 82 20 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4e0],al
c0017a54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a58:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a5f:	8a 15 e0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ae0
c0017a65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a68:	88 0d e0 1a 03 c0    	mov    BYTE PTR ds:0xc0031ae0,cl
c0017a6e:	0f b6 d2             	movzx  edx,dl
c0017a71:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a75:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a79:	88 82 00 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce500],al
c0017a7f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a84:	e9 da 02 00 00       	jmp    c0017d63 <scanMADT()+0x469>
c0017a89:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a8e:	0f 85 14 01 00 00    	jne    c0017ba8 <scanMADT()+0x2ae>
c0017a94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a98:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a9f:	8a 15 a0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319a0
c0017aa5:	0f b6 d2             	movzx  edx,dl
c0017aa8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017aac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ab0:	88 82 c0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce640],al
c0017ab6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017aba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017abe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac2:	01 d0                	add    eax,edx
c0017ac4:	83 c0 2c             	add    eax,0x2c
c0017ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac9:	0f b6 d0             	movzx  edx,al
c0017acc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad0:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ad3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017adb:	0f b6 c0             	movzx  eax,al
c0017ade:	c1 e0 08             	shl    eax,0x8
c0017ae1:	89 d1                	mov    ecx,edx
c0017ae3:	09 c1                	or     ecx,eax
c0017ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae9:	8d 50 02             	lea    edx,[eax+0x2]
c0017aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017af0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017af4:	0f b6 c0             	movzx  eax,al
c0017af7:	c1 e0 10             	shl    eax,0x10
c0017afa:	09 c1                	or     ecx,eax
c0017afc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b00:	8d 50 03             	lea    edx,[eax+0x3]
c0017b03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b0b:	0f b6 c0             	movzx  eax,al
c0017b0e:	c1 e0 18             	shl    eax,0x18
c0017b11:	09 c1                	or     ecx,eax
c0017b13:	89 ca                	mov    edx,ecx
c0017b15:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017b1a:	0f b6 c0             	movzx  eax,al
c0017b1d:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0017b24:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b31:	01 d0                	add    eax,edx
c0017b33:	83 c0 2c             	add    eax,0x2c
c0017b36:	8a 00                	mov    al,BYTE PTR [eax]
c0017b38:	0f b6 d0             	movzx  edx,al
c0017b3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b46:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b4a:	0f b6 c0             	movzx  eax,al
c0017b4d:	c1 e0 08             	shl    eax,0x8
c0017b50:	89 d1                	mov    ecx,edx
c0017b52:	09 c1                	or     ecx,eax
c0017b54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b58:	8d 50 02             	lea    edx,[eax+0x2]
c0017b5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b5f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b63:	0f b6 c0             	movzx  eax,al
c0017b66:	c1 e0 10             	shl    eax,0x10
c0017b69:	09 c1                	or     ecx,eax
c0017b6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b6f:	8d 50 03             	lea    edx,[eax+0x3]
c0017b72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b7a:	0f b6 c0             	movzx  eax,al
c0017b7d:	c1 e0 18             	shl    eax,0x18
c0017b80:	09 c1                	or     ecx,eax
c0017b82:	89 ca                	mov    edx,ecx
c0017b84:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017b89:	0f b6 c0             	movzx  eax,al
c0017b8c:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0017b93:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b98:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017b9d:	40                   	inc    eax
c0017b9e:	a2 a0 19 03 c0       	mov    ds:0xc00319a0,al
c0017ba3:	e9 bb 01 00 00       	jmp    c0017d63 <scanMADT()+0x469>
c0017ba8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017bad:	0f 85 e9 00 00 00    	jne    c0017c9c <scanMADT()+0x3a2>
c0017bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0017bba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bc6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bce:	8d 50 01             	lea    edx,[eax+0x1]
c0017bd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bdd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017be1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be9:	01 d0                	add    eax,edx
c0017beb:	83 c0 2c             	add    eax,0x2c
c0017bee:	8a 00                	mov    al,BYTE PTR [eax]
c0017bf0:	0f b6 d0             	movzx  edx,al
c0017bf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bfe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c02:	0f b6 c0             	movzx  eax,al
c0017c05:	c1 e0 08             	shl    eax,0x8
c0017c08:	89 d1                	mov    ecx,edx
c0017c0a:	09 c1                	or     ecx,eax
c0017c0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c10:	8d 50 02             	lea    edx,[eax+0x2]
c0017c13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c17:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c1b:	0f b6 c0             	movzx  eax,al
c0017c1e:	c1 e0 10             	shl    eax,0x10
c0017c21:	09 c1                	or     ecx,eax
c0017c23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c27:	8d 50 03             	lea    edx,[eax+0x3]
c0017c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c2e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c32:	0f b6 c0             	movzx  eax,al
c0017c35:	c1 e0 18             	shl    eax,0x18
c0017c38:	09 c8                	or     eax,ecx
c0017c3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c3e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c4b:	01 d0                	add    eax,edx
c0017c4d:	83 c0 2c             	add    eax,0x2c
c0017c50:	8a 00                	mov    al,BYTE PTR [eax]
c0017c52:	0f b6 c0             	movzx  eax,al
c0017c55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c59:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c60:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c64:	0f b6 d2             	movzx  edx,dl
c0017c67:	c1 e2 08             	shl    edx,0x8
c0017c6a:	09 d0                	or     eax,edx
c0017c6c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c71:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c76:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c7f:	88 90 80 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1d80],dl
c0017c85:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c8a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c8f:	66 89 84 12 80 19 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce680],ax
c0017c97:	e9 c7 00 00 00       	jmp    c0017d63 <scanMADT()+0x469>
c0017c9c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ca1:	0f 85 b0 00 00 00    	jne    c0017d57 <scanMADT()+0x45d>
c0017ca7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cab:	8d 50 01             	lea    edx,[eax+0x1]
c0017cae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cba:	0f b6 c0             	movzx  eax,al
c0017cbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc9:	01 d0                	add    eax,edx
c0017ccb:	83 c0 2c             	add    eax,0x2c
c0017cce:	8a 00                	mov    al,BYTE PTR [eax]
c0017cd0:	0f b6 d0             	movzx  edx,al
c0017cd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ce2:	0f b6 c0             	movzx  eax,al
c0017ce5:	c1 e0 08             	shl    eax,0x8
c0017ce8:	09 d0                	or     eax,edx
c0017cea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cee:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf7:	8d 50 01             	lea    edx,[eax+0x1]
c0017cfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d06:	0f b6 c0             	movzx  eax,al
c0017d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d11:	c1 e0 08             	shl    eax,0x8
c0017d14:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d18:	89 c1                	mov    ecx,eax
c0017d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d1e:	c1 e0 18             	shl    eax,0x18
c0017d21:	89 c3                	mov    ebx,eax
c0017d23:	a1 f0 18 03 c0       	mov    eax,ds:0xc00318f0
c0017d28:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2b:	89 15 f0 18 03 c0    	mov    DWORD PTR ds:0xc00318f0,edx
c0017d31:	09 d9                	or     ecx,ebx
c0017d33:	89 ca                	mov    edx,ecx
c0017d35:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0017d3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d48:	68 f0 be 02 c0       	push   0xc002bef0
c0017d4d:	e8 99 ab ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	eb 0c                	jmp    c0017d63 <scanMADT()+0x469>
c0017d57:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d5c:	75 05                	jne    c0017d63 <scanMADT()+0x469>
c0017d5e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d63:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d6c:	01 d0                	add    eax,edx
c0017d6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d72:	e9 54 fc ff ff       	jmp    c00179cb <scanMADT()+0xd1>
c0017d77:	90                   	nop
c0017d78:	eb 01                	jmp    c0017d7b <scanMADT()+0x481>
c0017d7a:	90                   	nop
c0017d7b:	83 c4 38             	add    esp,0x38
c0017d7e:	5b                   	pop    ebx
c0017d7f:	c3                   	ret    

c0017d80 <ACPI::ACPI()>:
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d87:	83 ec 08             	sub    esp,0x8
c0017d8a:	68 ad bd 02 c0       	push   0xc002bdad
c0017d8f:	50                   	push   eax
c0017d90:	e8 93 c1 ff ff       	call   c0013f28 <Device::Device(char const*)>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	ba 8c bf 02 c0       	mov    edx,0xc002bf8c
c0017d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da1:	89 10                	mov    DWORD PTR [eax],edx
c0017da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dc0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017dca:	e8 2b fb ff ff       	call   c00178fa <scanMADT()>
c0017dcf:	90                   	nop
c0017dd0:	83 c4 0c             	add    esp,0xc
c0017dd3:	c3                   	ret    

c0017dd4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017dd4:	83 ec 2c             	sub    esp,0x2c
c0017dd7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017ddb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ddf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017de3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017de7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dec:	88 d0                	mov    al,dl
c0017dee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017df2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017df7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e03:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e09:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e0d:	0f 8d 97 00 00 00    	jge    c0017eaa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e1b:	83 c2 2a             	add    edx,0x2a
c0017e1e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e22:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e27:	75 78                	jne    c0017ea1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e31:	83 c2 2a             	add    edx,0x2a
c0017e34:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e38:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e3c:	75 63                	jne    c0017ea1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e3e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e43:	74 3a                	je     c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e4d:	83 c2 2a             	add    edx,0x2a
c0017e50:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e5b:	39 c2                	cmp    edx,eax
c0017e5d:	74 10                	je     c0017e6f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	68 2c bf 02 c0       	push   0xc002bf2c
c0017e67:	e8 b5 24 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 b2 bd 02 c0       	push   0xc002bdb2
c0017e77:	e8 a5 24 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e8b:	83 c2 2a             	add    edx,0x2a
c0017e8e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e92:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e94:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e97:	89 01                	mov    DWORD PTR [ecx],eax
c0017e99:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e9c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ea1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ea5:	e9 55 ff ff ff       	jmp    c0017dff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017eaa:	90                   	nop
c0017eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eaf:	83 c4 2c             	add    esp,0x2c
c0017eb2:	c2 04 00             	ret    0x4
c0017eb5:	90                   	nop

c0017eb6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017eb6:	83 ec 1c             	sub    esp,0x1c
c0017eb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ec1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ec5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eca:	88 c8                	mov    al,cl
c0017ecc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ed0:	88 d0                	mov    al,dl
c0017ed2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eda:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ee7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017eeb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ef9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017efd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f04:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f13:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f17:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1e:	83 c2 2a             	add    edx,0x2a
c0017f21:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f29:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f33:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f3a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f42:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f48:	8d 50 01             	lea    edx,[eax+0x1]
c0017f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f59:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f5f:	3d 00 02 00 00       	cmp    eax,0x200
c0017f64:	75 10                	jne    c0017f76 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f66:	83 ec 0c             	sub    esp,0xc
c0017f69:	68 c1 bd 02 c0       	push   0xc002bdc1
c0017f6e:	e8 ae 23 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	90                   	nop
c0017f77:	83 c4 1c             	add    esp,0x1c
c0017f7a:	c3                   	ret    
c0017f7b:	90                   	nop

c0017f7c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f7c:	b8 00 00 00 00       	mov    eax,0x0
c0017f81:	c3                   	ret    

c0017f82 <ACPI::detectPCI()>:
c0017f82:	53                   	push   ebx
c0017f83:	83 ec 28             	sub    esp,0x28
c0017f86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f8b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f90:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017f95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f9b:	83 e0 04             	and    eax,0x4
c0017f9e:	84 c0                	test   al,al
c0017fa0:	74 2b                	je     c0017fcd <ACPI::detectPCI()+0x4b>
c0017fa2:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0017fa7:	83 ec 08             	sub    esp,0x8
c0017faa:	68 de bd 02 c0       	push   0xc002bdde
c0017faf:	50                   	push   eax
c0017fb0:	e8 a9 f8 ff ff       	call   c001785e <findDataTable(unsigned char*, char*)>
c0017fb5:	83 c4 10             	add    esp,0x10
c0017fb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fbc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017fc1:	74 0a                	je     c0017fcd <ACPI::detectPCI()+0x4b>
c0017fc3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fc8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fcd:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fd9:	8a 00                	mov    al,BYTE PTR [eax]
c0017fdb:	3c 01                	cmp    al,0x1
c0017fdd:	75 0c                	jne    c0017feb <ACPI::detectPCI()+0x69>
c0017fdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fe4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fe9:	eb 26                	jmp    c0018011 <ACPI::detectPCI()+0x8f>
c0017feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fef:	8a 00                	mov    al,BYTE PTR [eax]
c0017ff1:	3c 02                	cmp    al,0x2
c0017ff3:	75 1c                	jne    c0018011 <ACPI::detectPCI()+0x8f>
c0017ff5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ffa:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fff:	74 10                	je     c0018011 <ACPI::detectPCI()+0x8f>
c0018001:	83 ec 0c             	sub    esp,0xc
c0018004:	68 5c bf 02 c0       	push   0xc002bf5c
c0018009:	e8 13 23 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001800e:	83 c4 10             	add    esp,0x10
c0018011:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018015:	83 f0 01             	xor    eax,0x1
c0018018:	84 c0                	test   al,al
c001801a:	74 3f                	je     c001805b <ACPI::detectPCI()+0xd9>
c001801c:	e8 2f 81 fe ff       	call   c0000150 <manualPCIProbe>
c0018021:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018025:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001802a:	75 0c                	jne    c0018038 <ACPI::detectPCI()+0xb6>
c001802c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018031:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018036:	eb 23                	jmp    c001805b <ACPI::detectPCI()+0xd9>
c0018038:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001803d:	75 1c                	jne    c001805b <ACPI::detectPCI()+0xd9>
c001803f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018044:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018049:	74 10                	je     c001805b <ACPI::detectPCI()+0xd9>
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	68 5c bf 02 c0       	push   0xc002bf5c
c0018053:	e8 c9 22 00 00       	call   c001a321 <Krnl::panic(char const*)>
c0018058:	83 c4 10             	add    esp,0x10
c001805b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018060:	74 0d                	je     c001806f <ACPI::detectPCI()+0xed>
c0018062:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0018066:	83 f0 01             	xor    eax,0x1
c0018069:	0f b6 c0             	movzx  eax,al
c001806c:	40                   	inc    eax
c001806d:	eb 05                	jmp    c0018074 <ACPI::detectPCI()+0xf2>
c001806f:	b8 00 00 00 00       	mov    eax,0x0
c0018074:	83 ec 08             	sub    esp,0x8
c0018077:	50                   	push   eax
c0018078:	68 e3 bd 02 c0       	push   0xc002bde3
c001807d:	e8 69 a8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001808a:	74 69                	je     c00180f5 <ACPI::detectPCI()+0x173>
c001808c:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018094:	83 ec 0c             	sub    esp,0xc
c0018097:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001809b:	e8 ec 77 ff ff       	call   c000f88c <malloc>
c00180a0:	83 c4 10             	add    esp,0x10
c00180a3:	89 c3                	mov    ebx,eax
c00180a5:	83 ec 0c             	sub    esp,0xc
c00180a8:	53                   	push   ebx
c00180a9:	e8 0e ac 00 00       	call   c0022cbc <PCI::PCI()>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00180b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b9:	83 ec 08             	sub    esp,0x8
c00180bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180c0:	50                   	push   eax
c00180c1:	e8 5e bc ff ff       	call   c0013d24 <Device::addChild(Device*)>
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00180cf:	83 c0 08             	add    eax,0x8
c00180d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00180d4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180d9:	74 07                	je     c00180e2 <ACPI::detectPCI()+0x160>
c00180db:	ba 01 00 00 00       	mov    edx,0x1
c00180e0:	eb 05                	jmp    c00180e7 <ACPI::detectPCI()+0x165>
c00180e2:	ba 02 00 00 00       	mov    edx,0x2
c00180e7:	6a 00                	push   0x0
c00180e9:	6a 00                	push   0x0
c00180eb:	52                   	push   edx
c00180ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180f0:	ff d0                	call   eax
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	90                   	nop
c00180f6:	83 c4 28             	add    esp,0x28
c00180f9:	5b                   	pop    ebx
c00180fa:	c3                   	ret    
c00180fb:	90                   	nop

c00180fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00180fc:	83 ec 1c             	sub    esp,0x1c
c00180ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018103:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018106:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001810a:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001810f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018114:	83 ec 08             	sub    esp,0x8
c0018117:	52                   	push   edx
c0018118:	50                   	push   eax
c0018119:	e8 84 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018125:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001812a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001812f:	83 ec 04             	sub    esp,0x4
c0018132:	6a 01                	push   0x1
c0018134:	52                   	push   edx
c0018135:	50                   	push   eax
c0018136:	e8 7d 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	90                   	nop
c001813f:	83 c4 1c             	add    esp,0x1c
c0018142:	c3                   	ret    
c0018143:	90                   	nop

c0018144 <ACPI::sleep()>:
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c001814c:	85 c0                	test   eax,eax
c001814e:	74 07                	je     c0018157 <ACPI::sleep()+0x13>
c0018150:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c0018155:	ff d0                	call   eax
c0018157:	90                   	nop
c0018158:	83 c4 0c             	add    esp,0xc
c001815b:	c3                   	ret    

c001815c <ACPI::open(int, int, void*)>:
c001815c:	57                   	push   edi
c001815d:	56                   	push   esi
c001815e:	53                   	push   ebx
c001815f:	81 ec 60 01 00 00    	sub    esp,0x160
c0018165:	83 ec 0c             	sub    esp,0xc
c0018168:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001816f:	e8 0e fe ff ff       	call   c0017f82 <ACPI::detectPCI()>
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	83 ec 0c             	sub    esp,0xc
c001817a:	68 ec bd 02 c0       	push   0xc002bdec
c001817f:	e8 fa 4a 00 00       	call   c001cc7e <Thr::loadKernelSymbolTable(char const*)>
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	83 ec 04             	sub    esp,0x4
c001818a:	6a 0c                	push   0xc
c001818c:	68 0a be 02 c0       	push   0xc002be0a
c0018191:	68 1b be 02 c0       	push   0xc002be1b
c0018196:	e8 3c 2f 00 00       	call   c001b0d7 <Reg::readIntWithDefault(char*, char*, int)>
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00181a5:	83 ec 0c             	sub    esp,0xc
c00181a8:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00181af:	e8 6f 95 ff ff       	call   c0011723 <Virt::setupPageSwapping(int)>
c00181b4:	83 c4 10             	add    esp,0x10
c00181b7:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00181bd:	83 ec 08             	sub    esp,0x8
c00181c0:	6a 01                	push   0x1
c00181c2:	68 22 be 02 c0       	push   0xc002be22
c00181c7:	e8 29 55 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c00181cc:	83 c4 10             	add    esp,0x10
c00181cf:	83 ec 08             	sub    esp,0x8
c00181d2:	53                   	push   ebx
c00181d3:	50                   	push   eax
c00181d4:	e8 47 57 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00181e3:	83 ec 08             	sub    esp,0x8
c00181e6:	6a 12                	push   0x12
c00181e8:	50                   	push   eax
c00181e9:	e8 ba be ff ff       	call   c00140a8 <getDevicesOfType(DeviceType)>
c00181ee:	83 c4 0c             	add    esp,0xc
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181fb:	50                   	push   eax
c00181fc:	e8 8f 12 01 00       	call   c0029490 <LinkedList<Device>::isEmpty()>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	83 f0 01             	xor    eax,0x1
c0018207:	84 c0                	test   al,al
c0018209:	0f 84 43 01 00 00    	je     c0018352 <ACPI::open(int, int, void*)+0x1f6>
c001820f:	83 ec 0c             	sub    esp,0xc
c0018212:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018219:	50                   	push   eax
c001821a:	e8 8d 12 01 00       	call   c00294ac <LinkedList<Device>::getFirstElement()>
c001821f:	83 c4 10             	add    esp,0x10
c0018222:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018229:	83 ec 0c             	sub    esp,0xc
c001822c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018233:	50                   	push   eax
c0018234:	e8 7b 12 01 00       	call   c00294b4 <LinkedList<Device>::removeFirst()>
c0018239:	83 c4 10             	add    esp,0x10
c001823c:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018243:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001824a:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018251:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018255:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001825b:	ba 09 00 00 00       	mov    edx,0x9
c0018260:	fc                   	cld    
c0018261:	89 c7                	mov    edi,eax
c0018263:	89 de                	mov    esi,ebx
c0018265:	89 d1                	mov    ecx,edx
c0018267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018269:	83 ec 08             	sub    esp,0x8
c001826c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018270:	50                   	push   eax
c0018271:	83 ec 24             	sub    esp,0x24
c0018274:	89 e0                	mov    eax,esp
c0018276:	89 c3                	mov    ebx,eax
c0018278:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001827c:	ba 09 00 00 00       	mov    edx,0x9
c0018281:	89 df                	mov    edi,ebx
c0018283:	89 c6                	mov    esi,eax
c0018285:	89 d1                	mov    ecx,edx
c0018287:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018289:	e8 2e af 00 00       	call   c00231bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001828e:	83 c4 30             	add    esp,0x30
c0018291:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018298:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00182a0:	0f 84 4b ff ff ff    	je     c00181f1 <ACPI::open(int, int, void*)+0x95>
c00182a6:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182bb:	e8 cc 75 ff ff       	call   c000f88c <malloc>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	89 c3                	mov    ebx,eax
c00182c5:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00182ca:	83 ec 04             	sub    esp,0x4
c00182cd:	50                   	push   eax
c00182ce:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182d5:	53                   	push   ebx
c00182d6:	e8 6f ab ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00182e5:	83 ec 0c             	sub    esp,0xc
c00182e8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182ef:	e8 28 ae ff ff       	call   c001311c <File::exists()>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	84 c0                	test   al,al
c00182f9:	74 27                	je     c0018322 <ACPI::open(int, int, void*)+0x1c6>
c00182fb:	83 ec 08             	sub    esp,0x8
c00182fe:	6a 01                	push   0x1
c0018300:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018307:	e8 e9 53 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	83 ec 08             	sub    esp,0x8
c0018312:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018319:	50                   	push   eax
c001831a:	e8 01 56 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001832a:	0f 84 c1 fe ff ff    	je     c00181f1 <ACPI::open(int, int, void*)+0x95>
c0018330:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018337:	8b 00                	mov    eax,DWORD PTR [eax]
c0018339:	83 c0 08             	add    eax,0x8
c001833c:	8b 00                	mov    eax,DWORD PTR [eax]
c001833e:	83 ec 0c             	sub    esp,0xc
c0018341:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018348:	ff d0                	call   eax
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	e9 9f fe ff ff       	jmp    c00181f1 <ACPI::open(int, int, void*)+0x95>
c0018352:	83 ec 0c             	sub    esp,0xc
c0018355:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001835c:	50                   	push   eax
c001835d:	e8 2c 11 01 00       	call   c002948e <LinkedList<Device>::~LinkedList()>
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c001836b:	83 ec 08             	sub    esp,0x8
c001836e:	6a 01                	push   0x1
c0018370:	68 3d be 02 c0       	push   0xc002be3d
c0018375:	e8 7b 53 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001837a:	83 c4 10             	add    esp,0x10
c001837d:	83 ec 08             	sub    esp,0x8
c0018380:	53                   	push   ebx
c0018381:	50                   	push   eax
c0018382:	e8 99 55 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c0018387:	83 c4 10             	add    esp,0x10
c001838a:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c0018390:	83 ec 08             	sub    esp,0x8
c0018393:	6a 01                	push   0x1
c0018395:	68 5a be 02 c0       	push   0xc002be5a
c001839a:	e8 56 53 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	83 ec 08             	sub    esp,0x8
c00183a5:	53                   	push   ebx
c00183a6:	50                   	push   eax
c00183a7:	e8 74 55 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00183b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183ba:	83 e0 04             	and    eax,0x4
c00183bd:	84 c0                	test   al,al
c00183bf:	0f 84 fd 00 00 00    	je     c00184c2 <ACPI::open(int, int, void*)+0x366>
c00183c5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00183d0:	83 ec 0c             	sub    esp,0xc
c00183d3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00183da:	e8 ad 74 ff ff       	call   c000f88c <malloc>
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	89 c3                	mov    ebx,eax
c00183e4:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00183e9:	83 ec 04             	sub    esp,0x4
c00183ec:	50                   	push   eax
c00183ed:	68 77 be 02 c0       	push   0xc002be77
c00183f2:	53                   	push   ebx
c00183f3:	e8 52 aa ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c00183f8:	83 c4 10             	add    esp,0x10
c00183fb:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018402:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001840a:	74 1a                	je     c0018426 <ACPI::open(int, int, void*)+0x2ca>
c001840c:	83 ec 0c             	sub    esp,0xc
c001840f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018416:	e8 01 ad ff ff       	call   c001311c <File::exists()>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	84 c0                	test   al,al
c0018420:	74 04                	je     c0018426 <ACPI::open(int, int, void*)+0x2ca>
c0018422:	b0 01                	mov    al,0x1
c0018424:	eb 02                	jmp    c0018428 <ACPI::open(int, int, void*)+0x2cc>
c0018426:	b0 00                	mov    al,0x0
c0018428:	84 c0                	test   al,al
c001842a:	74 25                	je     c0018451 <ACPI::open(int, int, void*)+0x2f5>
c001842c:	83 ec 08             	sub    esp,0x8
c001842f:	6a 01                	push   0x1
c0018431:	68 77 be 02 c0       	push   0xc002be77
c0018436:	e8 ba 52 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001843b:	83 c4 10             	add    esp,0x10
c001843e:	83 ec 08             	sub    esp,0x8
c0018441:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018448:	50                   	push   eax
c0018449:	e8 d2 54 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018459:	74 27                	je     c0018482 <ACPI::open(int, int, void*)+0x326>
c001845b:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018463:	74 1d                	je     c0018482 <ACPI::open(int, int, void*)+0x326>
c0018465:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001846c:	8b 00                	mov    eax,DWORD PTR [eax]
c001846e:	83 c0 08             	add    eax,0x8
c0018471:	8b 00                	mov    eax,DWORD PTR [eax]
c0018473:	83 ec 0c             	sub    esp,0xc
c0018476:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001847d:	ff d0                	call   eax
c001847f:	83 c4 10             	add    esp,0x10
c0018482:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	68 94 be 02 c0       	push   0xc002be94
c001848f:	50                   	push   eax
c0018490:	e8 c9 f3 ff ff       	call   c001785e <findDataTable(unsigned char*, char*)>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001849f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00184a7:	74 19                	je     c00184c2 <ACPI::open(int, int, void*)+0x366>
c00184a9:	83 ec 08             	sub    esp,0x8
c00184ac:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00184b3:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00184ba:	e8 3d fc ff ff       	call   c00180fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	b8 00 00 00 00       	mov    eax,0x0
c00184c7:	81 c4 60 01 00 00    	add    esp,0x160
c00184cd:	5b                   	pop    ebx
c00184ce:	5e                   	pop    esi
c00184cf:	5f                   	pop    edi
c00184d0:	c3                   	ret    
c00184d1:	90                   	nop

c00184d2 <CPU::close(int, int, void*)>:
c00184d2:	31 c0                	xor    eax,eax
c00184d4:	c3                   	ret    
c00184d5:	90                   	nop

c00184d6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00184d6:	55                   	push   ebp
c00184d7:	57                   	push   edi
c00184d8:	56                   	push   esi
c00184d9:	53                   	push   ebx
c00184da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00184de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184e2:	89 ce                	mov    esi,ecx
c00184e4:	89 d5                	mov    ebp,edx
c00184e6:	80 f9 04             	cmp    cl,0x4
c00184e9:	75 28                	jne    c0018513 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184eb:	8d 42 f9             	lea    eax,[edx-0x7]
c00184ee:	3c 03                	cmp    al,0x3
c00184f0:	0f 86 63 01 00 00    	jbe    c0018659 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184f6:	80 fa 03             	cmp    dl,0x3
c00184f9:	0f 84 5a 01 00 00    	je     c0018659 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184ff:	8d 7a f2             	lea    edi,[edx-0xe]
c0018502:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018507:	89 fb                	mov    ebx,edi
c0018509:	80 fb 01             	cmp    bl,0x1
c001850c:	77 4e                	ja     c001855c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001850e:	e9 52 01 00 00       	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018513:	80 f9 05             	cmp    cl,0x5
c0018516:	75 4d                	jne    c0018565 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018518:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c001851d:	80 fa 03             	cmp    dl,0x3
c0018520:	0f 86 3f 01 00 00    	jbe    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018526:	8d 7a fa             	lea    edi,[edx-0x6]
c0018529:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c001852e:	89 fb                	mov    ebx,edi
c0018530:	80 fb 01             	cmp    bl,0x1
c0018533:	0f 86 2c 01 00 00    	jbe    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018539:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c001853e:	80 fa 08             	cmp    dl,0x8
c0018541:	0f 84 1e 01 00 00    	je     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018547:	89 d7                	mov    edi,edx
c0018549:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c001854e:	83 e7 fb             	and    edi,0xfffffffb
c0018551:	89 fb                	mov    ebx,edi
c0018553:	80 fb 09             	cmp    bl,0x9
c0018556:	0f 84 09 01 00 00    	je     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855c:	31 c0                	xor    eax,eax
c001855e:	89 eb                	mov    ebx,ebp
c0018560:	0f b6 fb             	movzx  edi,bl
c0018563:	eb 30                	jmp    c0018595 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018565:	31 c0                	xor    eax,eax
c0018567:	80 f9 06             	cmp    cl,0x6
c001856a:	75 f2                	jne    c001855e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001856c:	80 fa 0a             	cmp    dl,0xa
c001856f:	77 ed                	ja     c001855e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018571:	bf de 05 00 00       	mov    edi,0x5de
c0018576:	0f a3 d7             	bt     edi,edx
c0018579:	73 e3                	jae    c001855e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001857b:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018580:	e9 e0 00 00 00       	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018585:	39 c7                	cmp    edi,eax
c0018587:	0f 84 d3 00 00 00    	je     c0018660 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001858d:	40                   	inc    eax
c001858e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018593:	74 09                	je     c001859e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018595:	89 f3                	mov    ebx,esi
c0018597:	80 fb 0f             	cmp    bl,0xf
c001859a:	75 f1                	jne    c001858d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001859c:	eb e7                	jmp    c0018585 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001859e:	80 f9 10             	cmp    cl,0x10
c00185a1:	75 14                	jne    c00185b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00185a3:	8d 42 fc             	lea    eax,[edx-0x4]
c00185a6:	83 e0 fb             	and    eax,0xfffffffb
c00185a9:	3c 02                	cmp    al,0x2
c00185ab:	76 34                	jbe    c00185e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00185ad:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185b2:	80 fa 02             	cmp    dl,0x2
c00185b5:	eb 24                	jmp    c00185db <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00185b7:	80 f9 11             	cmp    cl,0x11
c00185ba:	75 13                	jne    c00185cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00185bc:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185c1:	80 fa 03             	cmp    dl,0x3
c00185c4:	0f 85 9b 00 00 00    	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ca:	e9 91 00 00 00       	jmp    c0018660 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185cf:	80 f9 12             	cmp    cl,0x12
c00185d2:	75 14                	jne    c00185e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00185d4:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185d9:	fe ca                	dec    dl
c00185db:	0f 85 84 00 00 00    	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e1:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c00185e6:	eb 7d                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e8:	80 f9 14             	cmp    cl,0x14
c00185eb:	75 12                	jne    c00185ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185ed:	4a                   	dec    edx
c00185ee:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185f3:	80 fa 01             	cmp    dl,0x1
c00185f6:	77 6d                	ja     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f8:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c00185fd:	eb 66                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ff:	80 f9 15             	cmp    cl,0x15
c0018602:	75 31                	jne    c0018635 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018604:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018609:	80 fa 01             	cmp    dl,0x1
c001860c:	74 57                	je     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001860e:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c0018613:	80 fa 13             	cmp    dl,0x13
c0018616:	76 0c                	jbe    c0018624 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018618:	80 fa 30             	cmp    dl,0x30
c001861b:	75 48                	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861d:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018622:	eb 41                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018624:	b9 04 00 09 00       	mov    ecx,0x90004
c0018629:	0f a3 d1             	bt     ecx,edx
c001862c:	73 37                	jae    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001862e:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018633:	eb 30                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018635:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c001863a:	80 f9 16             	cmp    cl,0x16
c001863d:	75 26                	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863f:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018644:	84 d2                	test   dl,dl
c0018646:	74 1d                	je     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018648:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c001864d:	80 fa 30             	cmp    dl,0x30
c0018650:	75 13                	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018652:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018657:	eb 0c                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018659:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c001865e:	eb 05                	jmp    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018660:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018665:	5b                   	pop    ebx
c0018666:	5e                   	pop    esi
c0018667:	5f                   	pop    edi
c0018668:	5d                   	pop    ebp
c0018669:	c3                   	ret    

c001866a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001866a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001866e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018672:	80 f9 04             	cmp    cl,0x4
c0018675:	75 6b                	jne    c00186e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018677:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c001867c:	80 fa 01             	cmp    dl,0x1
c001867f:	0f 86 92 02 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018685:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c001868a:	80 fa 02             	cmp    dl,0x2
c001868d:	0f 84 84 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018693:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018698:	80 fa 03             	cmp    dl,0x3
c001869b:	0f 84 76 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a1:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c00186a6:	80 fa 04             	cmp    dl,0x4
c00186a9:	0f 84 68 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186af:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00186b4:	80 fa 05             	cmp    dl,0x5
c00186b7:	0f 84 5a 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bd:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c00186c2:	80 fa 07             	cmp    dl,0x7
c00186c5:	0f 84 4c 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cb:	83 ea 08             	sub    edx,0x8
c00186ce:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00186d3:	80 fa 01             	cmp    dl,0x1
c00186d6:	0f 87 3b 02 00 00    	ja     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186dc:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00186e1:	c3                   	ret    
c00186e2:	80 f9 05             	cmp    cl,0x5
c00186e5:	75 45                	jne    c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186ea:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c00186ef:	80 f9 02             	cmp    cl,0x2
c00186f2:	0f 86 1f 02 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f8:	80 fa 04             	cmp    dl,0x4
c00186fb:	0f 84 f3 01 00 00    	je     c00188f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018701:	80 fa 07             	cmp    dl,0x7
c0018704:	0f 84 0d 02 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870a:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c001870f:	80 fa 08             	cmp    dl,0x8
c0018712:	0f 84 ff 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018718:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c001871d:	80 fa 09             	cmp    dl,0x9
c0018720:	0f 85 f1 01 00 00    	jne    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018726:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c001872b:	c3                   	ret    
c001872c:	80 f9 06             	cmp    cl,0x6
c001872f:	0f 85 85 01 00 00    	jne    c00188ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018735:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c001873a:	80 fa 01             	cmp    dl,0x1
c001873d:	0f 84 d4 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018743:	8d 42 fb             	lea    eax,[edx-0x5]
c0018746:	3c 01                	cmp    al,0x1
c0018748:	0f 86 ac 01 00 00    	jbe    c00188fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001874e:	80 fa 03             	cmp    dl,0x3
c0018751:	0f 84 a3 01 00 00    	je     c00188fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018757:	8d 4a f9             	lea    ecx,[edx-0x7]
c001875a:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c001875f:	80 f9 01             	cmp    cl,0x1
c0018762:	0f 86 af 01 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018768:	80 fa 09             	cmp    dl,0x9
c001876b:	0f 84 8f 01 00 00    	je     c0018900 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018771:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018774:	80 f9 01             	cmp    cl,0x1
c0018777:	0f 86 9a 01 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877d:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018782:	80 fa 0d             	cmp    dl,0xd
c0018785:	0f 84 8c 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878b:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018790:	80 fa 0e             	cmp    dl,0xe
c0018793:	0f 84 7e 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018799:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c001879e:	80 fa 0f             	cmp    dl,0xf
c00187a1:	0f 84 70 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a7:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00187ac:	80 fa 15             	cmp    dl,0x15
c00187af:	0f 84 62 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b5:	8d 4a ea             	lea    ecx,[edx-0x16]
c00187b8:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00187bd:	80 f9 01             	cmp    cl,0x1
c00187c0:	0f 86 51 01 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c6:	80 fa 1a             	cmp    dl,0x1a
c00187c9:	0f 84 37 01 00 00    	je     c0018906 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00187cf:	80 fa 1c             	cmp    dl,0x1c
c00187d2:	0f 84 34 01 00 00    	je     c001890c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00187d8:	80 fa 1d             	cmp    dl,0x1d
c00187db:	0f 84 36 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e1:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c00187e6:	80 fa 25             	cmp    dl,0x25
c00187e9:	0f 84 28 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ef:	8d 4a da             	lea    ecx,[edx-0x26]
c00187f2:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c00187f7:	80 f9 01             	cmp    cl,0x1
c00187fa:	0f 86 17 01 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018800:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018805:	80 fa 2a             	cmp    dl,0x2a
c0018808:	0f 84 09 01 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880e:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018813:	80 fa 2c             	cmp    dl,0x2c
c0018816:	0f 84 fb 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881c:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018821:	80 fa 2d             	cmp    dl,0x2d
c0018824:	0f 84 ed 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882a:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c001882f:	80 fa 2e             	cmp    dl,0x2e
c0018832:	0f 84 df 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018838:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c001883d:	80 fa 2f             	cmp    dl,0x2f
c0018840:	0f 84 d1 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018846:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018849:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c001884e:	80 f9 01             	cmp    cl,0x1
c0018851:	0f 86 c0 00 00 00    	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018857:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c001885c:	80 fa 37             	cmp    dl,0x37
c001885f:	0f 84 b2 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018865:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c001886a:	80 fa 3a             	cmp    dl,0x3a
c001886d:	0f 84 a4 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018873:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018878:	80 fa 3c             	cmp    dl,0x3c
c001887b:	0f 84 96 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018881:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018886:	80 fa 3d             	cmp    dl,0x3d
c0018889:	0f 84 88 00 00 00    	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888f:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018894:	80 fa 3e             	cmp    dl,0x3e
c0018897:	74 7e                	je     c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018899:	8d 42 bb             	lea    eax,[edx-0x45]
c001889c:	3c 01                	cmp    al,0x1
c001889e:	76 72                	jbe    c0018912 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188a0:	80 fa 3f             	cmp    dl,0x3f
c00188a3:	74 6d                	je     c0018912 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188a5:	80 fa 4a             	cmp    dl,0x4a
c00188a8:	74 0a                	je     c00188b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00188aa:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188af:	80 fa 4d             	cmp    dl,0x4d
c00188b2:	75 63                	jne    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b4:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00188b9:	c3                   	ret    
c00188ba:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188bf:	80 f9 0b             	cmp    cl,0xb
c00188c2:	75 0a                	jne    c00188ce <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00188c4:	fe ca                	dec    dl
c00188c6:	75 4f                	jne    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c8:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c00188cd:	c3                   	ret    
c00188ce:	80 f9 0f             	cmp    cl,0xf
c00188d1:	75 44                	jne    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d3:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c00188d8:	80 fa 02             	cmp    dl,0x2
c00188db:	76 3a                	jbe    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188dd:	8d 42 fd             	lea    eax,[edx-0x3]
c00188e0:	3c 01                	cmp    al,0x1
c00188e2:	76 0a                	jbe    c00188ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188e4:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188e9:	80 fa 06             	cmp    dl,0x6
c00188ec:	75 29                	jne    c0018917 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ee:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c00188f3:	c3                   	ret    
c00188f4:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c00188f9:	c3                   	ret    
c00188fa:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c00188ff:	c3                   	ret    
c0018900:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018905:	c3                   	ret    
c0018906:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c001890b:	c3                   	ret    
c001890c:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018911:	c3                   	ret    
c0018912:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018917:	c3                   	ret    

c0018918 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018918:	60                   	pusha  
c0018919:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001891d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018921:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018925:	9c                   	pushf  
c0018926:	fa                   	cli    
c0018927:	0f 09                	wbinvd 
c0018929:	0f 30                	wrmsr  
c001892b:	9d                   	popf   
c001892c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018930:	89 02                	mov    DWORD PTR [edx],eax
c0018932:	61                   	popa   
c0018933:	c3                   	ret    

c0018934 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018934:	60                   	pusha  
c0018935:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018939:	9c                   	pushf  
c001893a:	fa                   	cli    
c001893b:	0f 09                	wbinvd 
c001893d:	31 c0                	xor    eax,eax
c001893f:	31 d2                	xor    edx,edx
c0018941:	0f 32                	rdmsr  
c0018943:	9d                   	popf   
c0018944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018948:	89 02                	mov    DWORD PTR [edx],eax
c001894a:	61                   	popa   
c001894b:	c3                   	ret    

c001894c <CPU::AMD_K6_writeback(int, int, int)>:
c001894c:	56                   	push   esi
c001894d:	53                   	push   ebx
c001894e:	83 ec 10             	sub    esp,0x10
c0018951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018955:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001895a:	75 5d                	jne    c00189b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001895c:	83 f8 08             	cmp    eax,0x8
c001895f:	75 09                	jne    c001896a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018961:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018966:	7e 13                	jle    c001897b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018968:	eb 30                	jmp    c001899a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001896a:	83 f8 06             	cmp    eax,0x6
c001896d:	7c 4a                	jl     c00189b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001896f:	83 f8 07             	cmp    eax,0x7
c0018972:	7e 07                	jle    c001897b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018974:	83 f8 09             	cmp    eax,0x9
c0018977:	74 21                	je     c001899a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018979:	eb 3e                	jmp    c00189b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001897b:	89 e6                	mov    esi,esp
c001897d:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c0018983:	56                   	push   esi
c0018984:	c1 eb 15             	shr    ebx,0x15
c0018987:	68 82 00 00 c0       	push   0xc0000082
c001898c:	83 e3 7e             	and    ebx,0x7e
c001898f:	e8 a0 ff ff ff       	call   c0018934 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018994:	56                   	push   esi
c0018995:	6a 00                	push   0x0
c0018997:	53                   	push   ebx
c0018998:	eb 12                	jmp    c00189ac <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001899a:	89 e3                	mov    ebx,esp
c001899c:	53                   	push   ebx
c001899d:	68 82 00 00 c0       	push   0xc0000082
c00189a2:	e8 8d ff ff ff       	call   c0018934 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00189a7:	53                   	push   ebx
c00189a8:	6a 00                	push   0x0
c00189aa:	6a 00                	push   0x0
c00189ac:	68 82 00 00 c0       	push   0xc0000082
c00189b1:	e8 62 ff ff ff       	call   c0018918 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00189b6:	83 c4 18             	add    esp,0x18
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	5b                   	pop    ebx
c00189bd:	5e                   	pop    esi
c00189be:	c3                   	ret    
c00189bf:	90                   	nop

c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00189c0:	55                   	push   ebp
c00189c1:	57                   	push   edi
c00189c2:	56                   	push   esi
c00189c3:	53                   	push   ebx
c00189c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00189cc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00189d0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189d4:	39 05 40 e5 02 c0    	cmp    DWORD PTR ds:0xc002e540,eax
c00189da:	75 23                	jne    c00189ff <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00189dc:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c00189e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189e5:	89 06                	mov    DWORD PTR [esi],eax
c00189e7:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c00189ec:	89 07                	mov    DWORD PTR [edi],eax
c00189ee:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c00189f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00189f6:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c00189fb:	89 02                	mov    DWORD PTR [edx],eax
c00189fd:	eb 3f                	jmp    c0018a3e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00189ff:	31 c9                	xor    ecx,ecx
c0018a01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a05:	0f a2                	cpuid  
c0018a07:	89 06                	mov    DWORD PTR [esi],eax
c0018a09:	89 1f                	mov    DWORD PTR [edi],ebx
c0018a0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a0f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018a12:	89 10                	mov    DWORD PTR [eax],edx
c0018a14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a18:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0018a1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a1f:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c0018a24:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a26:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c0018a2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a2e:	a3 44 1b 03 c0       	mov    ds:0xc0031b44,eax
c0018a33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a39:	a3 40 1b 03 c0       	mov    ds:0xc0031b40,eax
c0018a3e:	5b                   	pop    ebx
c0018a3f:	5e                   	pop    esi
c0018a40:	5f                   	pop    edi
c0018a41:	5d                   	pop    ebp
c0018a42:	c3                   	ret    
c0018a43:	90                   	nop

c0018a44 <CPU::cpuidCheckEDX(unsigned int)>:
c0018a44:	83 ec 10             	sub    esp,0x10
c0018a47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a4b:	50                   	push   eax
c0018a4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a50:	50                   	push   eax
c0018a51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a55:	50                   	push   eax
c0018a56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a5a:	50                   	push   eax
c0018a5b:	6a 01                	push   0x1
c0018a5d:	e8 5e ff ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a66:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a6a:	0f 95 c0             	setne  al
c0018a6d:	83 c4 24             	add    esp,0x24
c0018a70:	c3                   	ret    
c0018a71:	90                   	nop

c0018a72 <CPU::cpuidCheckECX(unsigned int)>:
c0018a72:	83 ec 10             	sub    esp,0x10
c0018a75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a79:	50                   	push   eax
c0018a7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a7e:	50                   	push   eax
c0018a7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a83:	50                   	push   eax
c0018a84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a88:	50                   	push   eax
c0018a89:	6a 01                	push   0x1
c0018a8b:	e8 30 ff ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a94:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a98:	0f 95 c0             	setne  al
c0018a9b:	83 c4 24             	add    esp,0x24
c0018a9e:	c3                   	ret    
c0018a9f:	90                   	nop

c0018aa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018aa0:	83 ec 10             	sub    esp,0x10
c0018aa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aa7:	50                   	push   eax
c0018aa8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aac:	50                   	push   eax
c0018aad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab1:	50                   	push   eax
c0018ab2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab6:	50                   	push   eax
c0018ab7:	6a 07                	push   0x7
c0018ab9:	e8 02 ff ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ac2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018ac6:	0f 95 c0             	setne  al
c0018ac9:	83 c4 24             	add    esp,0x24
c0018acc:	c3                   	ret    
c0018acd:	90                   	nop

c0018ace <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018ace:	83 ec 10             	sub    esp,0x10
c0018ad1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad5:	50                   	push   eax
c0018ad6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ada:	50                   	push   eax
c0018adb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018adf:	50                   	push   eax
c0018ae0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae4:	50                   	push   eax
c0018ae5:	6a 07                	push   0x7
c0018ae7:	e8 d4 fe ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018af0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018af4:	0f 95 c0             	setne  al
c0018af7:	83 c4 24             	add    esp,0x24
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <CPU::CPU()>:
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b03:	83 ec 08             	sub    esp,0x8
c0018b06:	68 a2 c2 02 c0       	push   0xc002c2a2
c0018b0b:	50                   	push   eax
c0018b0c:	e8 17 b4 ff ff       	call   c0013f28 <Device::Device(char const*)>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	ba 7c c3 02 c0       	mov    edx,0xc002c37c
c0018b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b1d:	89 10                	mov    DWORD PTR [eax],edx
c0018b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b23:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b31:	05 78 01 00 00       	add    eax,0x178
c0018b36:	83 ec 0c             	sub    esp,0xc
c0018b39:	50                   	push   eax
c0018b3a:	e8 63 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018b3f:	83 c4 10             	add    esp,0x10
c0018b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b46:	05 7c 09 00 00       	add    eax,0x97c
c0018b4b:	83 ec 0c             	sub    esp,0xc
c0018b4e:	50                   	push   eax
c0018b4f:	e8 b8 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018b54:	83 c4 10             	add    esp,0x10
c0018b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b5b:	05 7c 11 00 00       	add    eax,0x117c
c0018b60:	83 ec 0c             	sub    esp,0xc
c0018b63:	50                   	push   eax
c0018b64:	e8 ad 82 ff ff       	call   c0010e16 <TSS::TSS()>
c0018b69:	83 c4 10             	add    esp,0x10
c0018b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b70:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b85:	90                   	nop
c0018b86:	83 c4 0c             	add    esp,0xc
c0018b89:	c3                   	ret    

c0018b8a <CPU::displayFeatures()>:
c0018b8a:	53                   	push   ebx
c0018b8b:	83 ec 10             	sub    esp,0x10
c0018b8e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b92:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018b98:	68 b0 bf 02 c0       	push   0xc002bfb0
c0018b9d:	e8 49 9d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018ba2:	59                   	pop    ecx
c0018ba3:	58                   	pop    eax
c0018ba4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018baa:	50                   	push   eax
c0018bab:	68 c1 bf 02 c0       	push   0xc002bfc1
c0018bb0:	e8 36 9d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018bb5:	58                   	pop    eax
c0018bb6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bbc:	5a                   	pop    edx
c0018bbd:	c1 e8 0e             	shr    eax,0xe
c0018bc0:	0f b6 c0             	movzx  eax,al
c0018bc3:	50                   	push   eax
c0018bc4:	68 d2 bf 02 c0       	push   0xc002bfd2
c0018bc9:	e8 1d 9d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018bce:	59                   	pop    ecx
c0018bcf:	58                   	pop    eax
c0018bd0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bd6:	66 c1 e8 06          	shr    ax,0x6
c0018bda:	0f b6 c0             	movzx  eax,al
c0018bdd:	50                   	push   eax
c0018bde:	68 e3 bf 02 c0       	push   0xc002bfe3
c0018be3:	e8 03 9d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018be8:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c0018bef:	e8 f7 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018bfc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018c03:	74 05                	je     c0018c0a <CPU::displayFeatures()+0x80>
c0018c05:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c0a:	52                   	push   edx
c0018c0b:	52                   	push   edx
c0018c0c:	50                   	push   eax
c0018c0d:	68 f4 bf 02 c0       	push   0xc002bff4
c0018c12:	e8 d4 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018c17:	83 c4 10             	add    esp,0x10
c0018c1a:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c1f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018c26:	78 05                	js     c0018c2d <CPU::displayFeatures()+0xa3>
c0018c28:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c2d:	51                   	push   ecx
c0018c2e:	51                   	push   ecx
c0018c2f:	50                   	push   eax
c0018c30:	68 0b c0 02 c0       	push   0xc002c00b
c0018c35:	e8 b1 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018c3a:	83 c4 10             	add    esp,0x10
c0018c3d:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c42:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018c49:	75 05                	jne    c0018c50 <CPU::displayFeatures()+0xc6>
c0018c4b:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c50:	52                   	push   edx
c0018c51:	52                   	push   edx
c0018c52:	50                   	push   eax
c0018c53:	68 22 c0 02 c0       	push   0xc002c022
c0018c58:	e8 8e 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c65:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018c6c:	75 05                	jne    c0018c73 <CPU::displayFeatures()+0xe9>
c0018c6e:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c73:	51                   	push   ecx
c0018c74:	51                   	push   ecx
c0018c75:	50                   	push   eax
c0018c76:	68 39 c0 02 c0       	push   0xc002c039
c0018c7b:	e8 6b 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c88:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c8f:	75 05                	jne    c0018c96 <CPU::displayFeatures()+0x10c>
c0018c91:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c96:	52                   	push   edx
c0018c97:	52                   	push   edx
c0018c98:	50                   	push   eax
c0018c99:	68 50 c0 02 c0       	push   0xc002c050
c0018c9e:	e8 48 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cab:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018cb2:	75 05                	jne    c0018cb9 <CPU::displayFeatures()+0x12f>
c0018cb4:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018cb9:	51                   	push   ecx
c0018cba:	51                   	push   ecx
c0018cbb:	50                   	push   eax
c0018cbc:	68 67 c0 02 c0       	push   0xc002c067
c0018cc1:	e8 25 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018cc6:	83 c4 10             	add    esp,0x10
c0018cc9:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cce:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018cd5:	75 05                	jne    c0018cdc <CPU::displayFeatures()+0x152>
c0018cd7:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018cdc:	52                   	push   edx
c0018cdd:	52                   	push   edx
c0018cde:	50                   	push   eax
c0018cdf:	68 7e c0 02 c0       	push   0xc002c07e
c0018ce4:	e8 02 9c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018ce9:	83 c4 10             	add    esp,0x10
c0018cec:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cf1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018cf8:	75 05                	jne    c0018cff <CPU::displayFeatures()+0x175>
c0018cfa:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018cff:	51                   	push   ecx
c0018d00:	51                   	push   ecx
c0018d01:	50                   	push   eax
c0018d02:	68 95 c0 02 c0       	push   0xc002c095
c0018d07:	e8 df 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d14:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018d1b:	75 05                	jne    c0018d22 <CPU::displayFeatures()+0x198>
c0018d1d:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d22:	52                   	push   edx
c0018d23:	52                   	push   edx
c0018d24:	50                   	push   eax
c0018d25:	68 ac c0 02 c0       	push   0xc002c0ac
c0018d2a:	e8 bc 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d37:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018d3e:	75 05                	jne    c0018d45 <CPU::displayFeatures()+0x1bb>
c0018d40:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d45:	51                   	push   ecx
c0018d46:	51                   	push   ecx
c0018d47:	50                   	push   eax
c0018d48:	68 c3 c0 02 c0       	push   0xc002c0c3
c0018d4d:	e8 99 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018d52:	83 c4 10             	add    esp,0x10
c0018d55:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d5a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018d61:	75 05                	jne    c0018d68 <CPU::displayFeatures()+0x1de>
c0018d63:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d68:	52                   	push   edx
c0018d69:	52                   	push   edx
c0018d6a:	50                   	push   eax
c0018d6b:	68 da c0 02 c0       	push   0xc002c0da
c0018d70:	e8 76 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d7d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d84:	75 05                	jne    c0018d8b <CPU::displayFeatures()+0x201>
c0018d86:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d8b:	51                   	push   ecx
c0018d8c:	51                   	push   ecx
c0018d8d:	50                   	push   eax
c0018d8e:	68 f1 c0 02 c0       	push   0xc002c0f1
c0018d93:	e8 53 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018d98:	83 c4 10             	add    esp,0x10
c0018d9b:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018da0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018da7:	75 05                	jne    c0018dae <CPU::displayFeatures()+0x224>
c0018da9:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018dae:	52                   	push   edx
c0018daf:	52                   	push   edx
c0018db0:	50                   	push   eax
c0018db1:	68 08 c1 02 c0       	push   0xc002c108
c0018db6:	e8 30 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018dc3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018dca:	78 05                	js     c0018dd1 <CPU::displayFeatures()+0x247>
c0018dcc:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018dd1:	51                   	push   ecx
c0018dd2:	51                   	push   ecx
c0018dd3:	50                   	push   eax
c0018dd4:	68 1f c1 02 c0       	push   0xc002c11f
c0018dd9:	e8 0d 9b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018dde:	83 c4 10             	add    esp,0x10
c0018de1:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018de6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018ded:	75 05                	jne    c0018df4 <CPU::displayFeatures()+0x26a>
c0018def:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018df4:	52                   	push   edx
c0018df5:	52                   	push   edx
c0018df6:	50                   	push   eax
c0018df7:	68 36 c1 02 c0       	push   0xc002c136
c0018dfc:	e8 ea 9a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018e01:	83 c4 18             	add    esp,0x18
c0018e04:	5b                   	pop    ebx
c0018e05:	c3                   	ret    

c0018e06 <CPU::detectFeatures()>:
c0018e06:	55                   	push   ebp
c0018e07:	57                   	push   edi
c0018e08:	56                   	push   esi
c0018e09:	53                   	push   ebx
c0018e0a:	83 ec 50             	sub    esp,0x50
c0018e0d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e11:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e1b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e22:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e28:	6a 0d                	push   0xd
c0018e2a:	6a 00                	push   0x0
c0018e2c:	55                   	push   ebp
c0018e2d:	e8 1e 79 fe ff       	call   c0000750 <memset>
c0018e32:	83 c4 10             	add    esp,0x10
c0018e35:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0018e3a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e41:	0f 84 22 09 00 00    	je     c0019769 <CPU::detectFeatures()+0x963>
c0018e47:	83 ec 0c             	sub    esp,0xc
c0018e4a:	89 ef                	mov    edi,ebp
c0018e4c:	6a 10                	push   0x10
c0018e4e:	e8 f1 fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018e53:	83 e0 01             	and    eax,0x1
c0018e56:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e59:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e5f:	83 e0 fd             	and    eax,0xfffffffd
c0018e62:	09 d0                	or     eax,edx
c0018e64:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e6a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e71:	e8 ce fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018e76:	83 e0 01             	and    eax,0x1
c0018e79:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e80:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e86:	83 e0 fb             	and    eax,0xfffffffb
c0018e89:	09 d0                	or     eax,edx
c0018e8b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e91:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e98:	e8 a7 fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018e9d:	83 e0 01             	and    eax,0x1
c0018ea0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ea7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ead:	83 e0 f7             	and    eax,0xfffffff7
c0018eb0:	09 d0                	or     eax,edx
c0018eb2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eb8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018ebf:	e8 80 fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018ec4:	83 e0 01             	and    eax,0x1
c0018ec7:	c1 e0 04             	shl    eax,0x4
c0018eca:	88 c2                	mov    dl,al
c0018ecc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ed2:	83 e0 ef             	and    eax,0xffffffef
c0018ed5:	09 d0                	or     eax,edx
c0018ed7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018edd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ee4:	e8 5b fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018ee9:	83 e0 01             	and    eax,0x1
c0018eec:	c1 e0 05             	shl    eax,0x5
c0018eef:	88 c2                	mov    dl,al
c0018ef1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ef7:	83 e0 df             	and    eax,0xffffffdf
c0018efa:	09 d0                	or     eax,edx
c0018efc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f02:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f09:	e8 36 fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018f0e:	83 e0 01             	and    eax,0x1
c0018f11:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f14:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f1a:	83 e0 fd             	and    eax,0xfffffffd
c0018f1d:	09 d0                	or     eax,edx
c0018f1f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f25:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f2c:	e8 13 fb ff ff       	call   c0018a44 <CPU::cpuidCheckEDX(unsigned int)>
c0018f31:	83 e0 01             	and    eax,0x1
c0018f34:	c1 e0 06             	shl    eax,0x6
c0018f37:	88 c2                	mov    dl,al
c0018f39:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f3f:	83 e0 bf             	and    eax,0xffffffbf
c0018f42:	09 d0                	or     eax,edx
c0018f44:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f4a:	58                   	pop    eax
c0018f4b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f4f:	50                   	push   eax
c0018f50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f54:	50                   	push   eax
c0018f55:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f59:	56                   	push   esi
c0018f5a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5e:	50                   	push   eax
c0018f5f:	6a 00                	push   0x0
c0018f61:	e8 5a fa ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f66:	b8 04 00 00 00       	mov    eax,0x4
c0018f6b:	89 c1                	mov    ecx,eax
c0018f6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f6f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f75:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f79:	89 c1                	mov    ecx,eax
c0018f7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f7d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f83:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f87:	89 c1                	mov    ecx,eax
c0018f89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f8b:	83 c4 18             	add    esp,0x18
c0018f8e:	68 4d c1 02 c0       	push   0xc002c14d
c0018f93:	55                   	push   ebp
c0018f94:	e8 ff 78 fe ff       	call   c0000898 <strcmp>
c0018f99:	83 c4 10             	add    esp,0x10
c0018f9c:	85 c0                	test   eax,eax
c0018f9e:	75 0f                	jne    c0018faf <CPU::detectFeatures()+0x1a9>
c0018fa0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018faa:	e9 22 02 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0018faf:	50                   	push   eax
c0018fb0:	50                   	push   eax
c0018fb1:	68 5a c1 02 c0       	push   0xc002c15a
c0018fb6:	55                   	push   ebp
c0018fb7:	e8 dc 78 fe ff       	call   c0000898 <strcmp>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	85 c0                	test   eax,eax
c0018fc1:	74 dd                	je     c0018fa0 <CPU::detectFeatures()+0x19a>
c0018fc3:	50                   	push   eax
c0018fc4:	50                   	push   eax
c0018fc5:	68 67 c1 02 c0       	push   0xc002c167
c0018fca:	55                   	push   ebp
c0018fcb:	e8 c8 78 fe ff       	call   c0000898 <strcmp>
c0018fd0:	83 c4 10             	add    esp,0x10
c0018fd3:	85 c0                	test   eax,eax
c0018fd5:	74 2a                	je     c0019001 <CPU::detectFeatures()+0x1fb>
c0018fd7:	50                   	push   eax
c0018fd8:	50                   	push   eax
c0018fd9:	68 74 c1 02 c0       	push   0xc002c174
c0018fde:	55                   	push   ebp
c0018fdf:	e8 b4 78 fe ff       	call   c0000898 <strcmp>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	85 c0                	test   eax,eax
c0018fe9:	74 16                	je     c0019001 <CPU::detectFeatures()+0x1fb>
c0018feb:	50                   	push   eax
c0018fec:	50                   	push   eax
c0018fed:	68 81 c1 02 c0       	push   0xc002c181
c0018ff2:	55                   	push   ebp
c0018ff3:	e8 a0 78 fe ff       	call   c0000898 <strcmp>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	85 c0                	test   eax,eax
c0018ffd:	74 48                	je     c0019047 <CPU::detectFeatures()+0x241>
c0018fff:	eb 0f                	jmp    c0019010 <CPU::detectFeatures()+0x20a>
c0019001:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001900b:	e9 c1 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019010:	50                   	push   eax
c0019011:	50                   	push   eax
c0019012:	68 8e c1 02 c0       	push   0xc002c18e
c0019017:	55                   	push   ebp
c0019018:	e8 7b 78 fe ff       	call   c0000898 <strcmp>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	85 c0                	test   eax,eax
c0019022:	74 23                	je     c0019047 <CPU::detectFeatures()+0x241>
c0019024:	57                   	push   edi
c0019025:	57                   	push   edi
c0019026:	68 9b c1 02 c0       	push   0xc002c19b
c001902b:	55                   	push   ebp
c001902c:	e8 67 78 fe ff       	call   c0000898 <strcmp>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	85 c0                	test   eax,eax
c0019036:	75 1e                	jne    c0019056 <CPU::detectFeatures()+0x250>
c0019038:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019042:	e9 8a 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019047:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019051:	e9 7b 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019056:	56                   	push   esi
c0019057:	56                   	push   esi
c0019058:	68 a8 c1 02 c0       	push   0xc002c1a8
c001905d:	55                   	push   ebp
c001905e:	e8 35 78 fe ff       	call   c0000898 <strcmp>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	85 c0                	test   eax,eax
c0019068:	75 0f                	jne    c0019079 <CPU::detectFeatures()+0x273>
c001906a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019074:	e9 58 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019079:	51                   	push   ecx
c001907a:	51                   	push   ecx
c001907b:	68 67 c1 02 c0       	push   0xc002c167
c0019080:	55                   	push   ebp
c0019081:	e8 12 78 fe ff       	call   c0000898 <strcmp>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	85 c0                	test   eax,eax
c001908b:	75 0f                	jne    c001909c <CPU::detectFeatures()+0x296>
c001908d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019097:	e9 35 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c001909c:	52                   	push   edx
c001909d:	52                   	push   edx
c001909e:	68 b5 c1 02 c0       	push   0xc002c1b5
c00190a3:	55                   	push   ebp
c00190a4:	e8 ef 77 fe ff       	call   c0000898 <strcmp>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	85 c0                	test   eax,eax
c00190ae:	75 0f                	jne    c00190bf <CPU::detectFeatures()+0x2b9>
c00190b0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190ba:	e9 12 01 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c00190bf:	50                   	push   eax
c00190c0:	50                   	push   eax
c00190c1:	68 c2 c1 02 c0       	push   0xc002c1c2
c00190c6:	55                   	push   ebp
c00190c7:	e8 cc 77 fe ff       	call   c0000898 <strcmp>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	85 c0                	test   eax,eax
c00190d1:	75 0f                	jne    c00190e2 <CPU::detectFeatures()+0x2dc>
c00190d3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190dd:	e9 ef 00 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c00190e2:	50                   	push   eax
c00190e3:	50                   	push   eax
c00190e4:	68 cf c1 02 c0       	push   0xc002c1cf
c00190e9:	55                   	push   ebp
c00190ea:	e8 a9 77 fe ff       	call   c0000898 <strcmp>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	85 c0                	test   eax,eax
c00190f4:	75 0f                	jne    c0019105 <CPU::detectFeatures()+0x2ff>
c00190f6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019100:	e9 cc 00 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019105:	50                   	push   eax
c0019106:	50                   	push   eax
c0019107:	68 dc c1 02 c0       	push   0xc002c1dc
c001910c:	55                   	push   ebp
c001910d:	e8 86 77 fe ff       	call   c0000898 <strcmp>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	85 c0                	test   eax,eax
c0019117:	75 0f                	jne    c0019128 <CPU::detectFeatures()+0x322>
c0019119:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019123:	e9 a9 00 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c0019128:	50                   	push   eax
c0019129:	50                   	push   eax
c001912a:	68 e9 c1 02 c0       	push   0xc002c1e9
c001912f:	55                   	push   ebp
c0019130:	e8 63 77 fe ff       	call   c0000898 <strcmp>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	85 c0                	test   eax,eax
c001913a:	75 0f                	jne    c001914b <CPU::detectFeatures()+0x345>
c001913c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019146:	e9 86 00 00 00       	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c001914b:	50                   	push   eax
c001914c:	50                   	push   eax
c001914d:	68 f6 c1 02 c0       	push   0xc002c1f6
c0019152:	55                   	push   ebp
c0019153:	e8 40 77 fe ff       	call   c0000898 <strcmp>
c0019158:	83 c4 10             	add    esp,0x10
c001915b:	85 c0                	test   eax,eax
c001915d:	75 0c                	jne    c001916b <CPU::detectFeatures()+0x365>
c001915f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019169:	eb 66                	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c001916b:	50                   	push   eax
c001916c:	50                   	push   eax
c001916d:	68 03 c2 02 c0       	push   0xc002c203
c0019172:	55                   	push   ebp
c0019173:	e8 20 77 fe ff       	call   c0000898 <strcmp>
c0019178:	83 c4 10             	add    esp,0x10
c001917b:	85 c0                	test   eax,eax
c001917d:	75 0c                	jne    c001918b <CPU::detectFeatures()+0x385>
c001917f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019189:	eb 46                	jmp    c00191d1 <CPU::detectFeatures()+0x3cb>
c001918b:	57                   	push   edi
c001918c:	57                   	push   edi
c001918d:	68 10 c2 02 c0       	push   0xc002c210
c0019192:	55                   	push   ebp
c0019193:	e8 00 77 fe ff       	call   c0000898 <strcmp>
c0019198:	83 c4 10             	add    esp,0x10
c001919b:	85 c0                	test   eax,eax
c001919d:	74 e0                	je     c001917f <CPU::detectFeatures()+0x379>
c001919f:	56                   	push   esi
c00191a0:	56                   	push   esi
c00191a1:	68 1d c2 02 c0       	push   0xc002c21d
c00191a6:	55                   	push   ebp
c00191a7:	e8 ec 76 fe ff       	call   c0000898 <strcmp>
c00191ac:	83 c4 10             	add    esp,0x10
c00191af:	85 c0                	test   eax,eax
c00191b1:	74 cc                	je     c001917f <CPU::detectFeatures()+0x379>
c00191b3:	51                   	push   ecx
c00191b4:	51                   	push   ecx
c00191b5:	68 2a c2 02 c0       	push   0xc002c22a
c00191ba:	55                   	push   ebp
c00191bb:	e8 d8 76 fe ff       	call   c0000898 <strcmp>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	85 c0                	test   eax,eax
c00191c5:	74 b8                	je     c001917f <CPU::detectFeatures()+0x379>
c00191c7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191d1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191d6:	0f 86 be 00 00 00    	jbe    c001929a <CPU::detectFeatures()+0x494>
c00191dc:	83 ec 0c             	sub    esp,0xc
c00191df:	68 80 00 00 00       	push   0x80
c00191e4:	e8 b7 f8 ff ff       	call   c0018aa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191e9:	83 e0 01             	and    eax,0x1
c00191ec:	c1 e0 06             	shl    eax,0x6
c00191ef:	88 c2                	mov    dl,al
c00191f1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f7:	83 e0 bf             	and    eax,0xffffffbf
c00191fa:	09 d0                	or     eax,edx
c00191fc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019202:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019209:	e8 92 f8 ff ff       	call   c0018aa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001920e:	83 e0 01             	and    eax,0x1
c0019211:	c1 e0 04             	shl    eax,0x4
c0019214:	88 c2                	mov    dl,al
c0019216:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001921c:	83 e0 ef             	and    eax,0xffffffef
c001921f:	09 d0                	or     eax,edx
c0019221:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019227:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001922e:	e8 6d f8 ff ff       	call   c0018aa0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019233:	c1 e0 07             	shl    eax,0x7
c0019236:	88 c2                	mov    dl,al
c0019238:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001923e:	83 e0 7f             	and    eax,0x7f
c0019241:	09 d0                	or     eax,edx
c0019243:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019249:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019250:	e8 79 f8 ff ff       	call   c0018ace <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019255:	83 e0 01             	and    eax,0x1
c0019258:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001925f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019265:	83 e0 f7             	and    eax,0xfffffff7
c0019268:	09 d0                	or     eax,edx
c001926a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019270:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019277:	e8 52 f8 ff ff       	call   c0018ace <CPU::cpuidCheckExtendedECX(unsigned int)>
c001927c:	83 c4 10             	add    esp,0x10
c001927f:	83 e0 01             	and    eax,0x1
c0019282:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019289:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001928f:	83 e0 fb             	and    eax,0xfffffffb
c0019292:	09 d0                	or     eax,edx
c0019294:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001929a:	83 ec 0c             	sub    esp,0xc
c001929d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a1:	50                   	push   eax
c00192a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a6:	50                   	push   eax
c00192a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192ab:	56                   	push   esi
c00192ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b0:	50                   	push   eax
c00192b1:	6a 01                	push   0x1
c00192b3:	e8 08 f7 ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192bc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192c2:	88 ca                	mov    dl,cl
c00192c4:	83 e0 f0             	and    eax,0xfffffff0
c00192c7:	83 e2 0f             	and    edx,0xf
c00192ca:	09 d0                	or     eax,edx
c00192cc:	88 ca                	mov    dl,cl
c00192ce:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192d4:	c0 ea 04             	shr    dl,0x4
c00192d7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192db:	0f b6 c2             	movzx  eax,dl
c00192de:	83 c4 20             	add    esp,0x20
c00192e1:	c1 e0 06             	shl    eax,0x6
c00192e4:	89 c7                	mov    edi,eax
c00192e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ec:	66 25 3f c0          	and    ax,0xc03f
c00192f0:	09 f8                	or     eax,edi
c00192f2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192f9:	89 c8                	mov    eax,ecx
c00192fb:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019302:	c1 e8 08             	shr    eax,0x8
c0019305:	83 e5 3f             	and    ebp,0x3f
c0019308:	83 e0 0f             	and    eax,0xf
c001930b:	89 c7                	mov    edi,eax
c001930d:	c1 e7 06             	shl    edi,0x6
c0019310:	09 ef                	or     edi,ebp
c0019312:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019319:	89 fa                	mov    edx,edi
c001931b:	83 e5 c0             	and    ebp,0xffffffc0
c001931e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019324:	88 c2                	mov    dl,al
c0019326:	c0 ea 02             	shr    dl,0x2
c0019329:	89 d7                	mov    edi,edx
c001932b:	09 ef                	or     edi,ebp
c001932d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019333:	89 fa                	mov    edx,edi
c0019335:	83 e5 cf             	and    ebp,0xffffffcf
c0019338:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001933e:	89 cf                	mov    edi,ecx
c0019340:	c1 ef 0c             	shr    edi,0xc
c0019343:	83 e7 03             	and    edi,0x3
c0019346:	c1 e7 04             	shl    edi,0x4
c0019349:	09 ef                	or     edi,ebp
c001934b:	3c 06                	cmp    al,0x6
c001934d:	89 fa                	mov    edx,edi
c001934f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019355:	74 04                	je     c001935b <CPU::detectFeatures()+0x555>
c0019357:	3c 0f                	cmp    al,0xf
c0019359:	75 5c                	jne    c00193b7 <CPU::detectFeatures()+0x5b1>
c001935b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001935f:	89 cf                	mov    edi,ecx
c0019361:	c1 ef 10             	shr    edi,0x10
c0019364:	c1 e7 04             	shl    edi,0x4
c0019367:	09 fa                	or     edx,edi
c0019369:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001936f:	0f b6 d2             	movzx  edx,dl
c0019372:	66 81 e7 3f c0       	and    di,0xc03f
c0019377:	c1 e2 06             	shl    edx,0x6
c001937a:	09 fa                	or     edx,edi
c001937c:	3c 0f                	cmp    al,0xf
c001937e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019385:	75 30                	jne    c00193b7 <CPU::detectFeatures()+0x5b1>
c0019387:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001938d:	c1 e9 14             	shr    ecx,0x14
c0019390:	83 e0 3f             	and    eax,0x3f
c0019393:	83 c1 0f             	add    ecx,0xf
c0019396:	88 ca                	mov    dl,cl
c0019398:	c0 e9 02             	shr    cl,0x2
c001939b:	c1 e2 06             	shl    edx,0x6
c001939e:	09 d0                	or     eax,edx
c00193a0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00193a6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193ac:	83 e0 c0             	and    eax,0xffffffc0
c00193af:	09 c1                	or     ecx,eax
c00193b1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00193b7:	83 ec 0c             	sub    esp,0xc
c00193ba:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193c5:	50                   	push   eax
c00193c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193ca:	55                   	push   ebp
c00193cb:	56                   	push   esi
c00193cc:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193d0:	57                   	push   edi
c00193d1:	68 00 00 00 80       	push   0x80000000
c00193d6:	e8 e5 f5 ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193db:	83 c4 20             	add    esp,0x20
c00193de:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193e6:	76 22                	jbe    c001940a <CPU::detectFeatures()+0x604>
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193ef:	50                   	push   eax
c00193f0:	55                   	push   ebp
c00193f1:	56                   	push   esi
c00193f2:	57                   	push   edi
c00193f3:	68 01 00 00 80       	push   0x80000001
c00193f8:	e8 c3 f5 ff ff       	call   c00189c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193fd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019407:	83 c4 20             	add    esp,0x20
c001940a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019410:	83 f8 01             	cmp    eax,0x1
c0019413:	75 6f                	jne    c0019484 <CPU::detectFeatures()+0x67e>
c0019415:	51                   	push   ecx
c0019416:	51                   	push   ecx
c0019417:	68 36 c2 02 c0       	push   0xc002c236
c001941c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019420:	56                   	push   esi
c0019421:	e8 e6 73 fe ff       	call   c000080c <strcpy>
c0019426:	5f                   	pop    edi
c0019427:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001942d:	5d                   	pop    ebp
c001942e:	66 c1 e8 06          	shr    ax,0x6
c0019432:	0f b6 c0             	movzx  eax,al
c0019435:	50                   	push   eax
c0019436:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001943c:	c1 e8 0e             	shr    eax,0xe
c001943f:	0f b6 c0             	movzx  eax,al
c0019442:	50                   	push   eax
c0019443:	e8 22 f2 ff ff       	call   c001866a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019448:	5a                   	pop    edx
c0019449:	59                   	pop    ecx
c001944a:	50                   	push   eax
c001944b:	56                   	push   esi
c001944c:	e8 fb 74 fe ff       	call   c000094c <strcat>
c0019451:	5f                   	pop    edi
c0019452:	5d                   	pop    ebp
c0019453:	56                   	push   esi
c0019454:	53                   	push   ebx
c0019455:	e8 c0 aa ff ff       	call   c0013f1a <Device::setName(char const*)>
c001945a:	58                   	pop    eax
c001945b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019461:	5a                   	pop    edx
c0019462:	68 3d c2 02 c0       	push   0xc002c23d
c0019467:	50                   	push   eax
c0019468:	e8 2b 74 fe ff       	call   c0000898 <strcmp>
c001946d:	83 c4 10             	add    esp,0x10
c0019470:	85 c0                	test   eax,eax
c0019472:	0f 85 71 03 00 00    	jne    c00197e9 <CPU::detectFeatures()+0x9e3>
c0019478:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001947f:	e9 65 03 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x9e3>
c0019484:	83 f8 02             	cmp    eax,0x2
c0019487:	0f 85 b5 00 00 00    	jne    c0019542 <CPU::detectFeatures()+0x73c>
c001948d:	57                   	push   edi
c001948e:	57                   	push   edi
c001948f:	68 4f c2 02 c0       	push   0xc002c24f
c0019494:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019498:	56                   	push   esi
c0019499:	e8 6e 73 fe ff       	call   c000080c <strcpy>
c001949e:	5d                   	pop    ebp
c001949f:	58                   	pop    eax
c00194a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194a6:	66 c1 e8 06          	shr    ax,0x6
c00194aa:	0f b6 c0             	movzx  eax,al
c00194ad:	50                   	push   eax
c00194ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194b4:	c1 e8 0e             	shr    eax,0xe
c00194b7:	0f b6 c0             	movzx  eax,al
c00194ba:	50                   	push   eax
c00194bb:	e8 16 f0 ff ff       	call   c00184d6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194c0:	5a                   	pop    edx
c00194c1:	59                   	pop    ecx
c00194c2:	50                   	push   eax
c00194c3:	56                   	push   esi
c00194c4:	e8 83 74 fe ff       	call   c000094c <strcat>
c00194c9:	5f                   	pop    edi
c00194ca:	5d                   	pop    ebp
c00194cb:	56                   	push   esi
c00194cc:	53                   	push   ebx
c00194cd:	e8 48 aa ff ff       	call   c0013f1a <Device::setName(char const*)>
c00194d2:	58                   	pop    eax
c00194d3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194d9:	5a                   	pop    edx
c00194da:	68 54 c2 02 c0       	push   0xc002c254
c00194df:	50                   	push   eax
c00194e0:	e8 b3 73 fe ff       	call   c0000898 <strcmp>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	85 c0                	test   eax,eax
c00194ea:	75 20                	jne    c001950c <CPU::detectFeatures()+0x706>
c00194ec:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00194f2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194f8:	a8 01                	test   al,0x1
c00194fa:	74 10                	je     c001950c <CPU::detectFeatures()+0x706>
c00194fc:	83 e0 fe             	and    eax,0xfffffffe
c00194ff:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019505:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001950c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019512:	c1 e8 0e             	shr    eax,0xe
c0019515:	3c 05                	cmp    al,0x5
c0019517:	0f 85 cc 02 00 00    	jne    c00197e9 <CPU::detectFeatures()+0x9e3>
c001951d:	56                   	push   esi
c001951e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019524:	83 e0 0f             	and    eax,0xf
c0019527:	50                   	push   eax
c0019528:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001952e:	66 c1 e8 06          	shr    ax,0x6
c0019532:	0f b6 c0             	movzx  eax,al
c0019535:	50                   	push   eax
c0019536:	6a 05                	push   0x5
c0019538:	e8 0f f4 ff ff       	call   c001894c <CPU::AMD_K6_writeback(int, int, int)>
c001953d:	e9 1f 02 00 00       	jmp    c0019761 <CPU::detectFeatures()+0x95b>
c0019542:	8d 50 fd             	lea    edx,[eax-0x3]
c0019545:	83 fa 01             	cmp    edx,0x1
c0019548:	76 09                	jbe    c0019553 <CPU::detectFeatures()+0x74d>
c001954a:	83 f8 06             	cmp    eax,0x6
c001954d:	0f 85 91 01 00 00    	jne    c00196e4 <CPU::detectFeatures()+0x8de>
c0019553:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019559:	c1 ea 0e             	shr    edx,0xe
c001955c:	80 fa 05             	cmp    dl,0x5
c001955f:	75 7b                	jne    c00195dc <CPU::detectFeatures()+0x7d6>
c0019561:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019567:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001956c:	66 81 fa 00 01       	cmp    dx,0x100
c0019571:	75 0c                	jne    c001957f <CPU::detectFeatures()+0x779>
c0019573:	51                   	push   ecx
c0019574:	51                   	push   ecx
c0019575:	68 5b c2 02 c0       	push   0xc002c25b
c001957a:	e9 dc 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c001957f:	66 81 fa 00 02       	cmp    dx,0x200
c0019584:	75 0c                	jne    c0019592 <CPU::detectFeatures()+0x78c>
c0019586:	52                   	push   edx
c0019587:	52                   	push   edx
c0019588:	68 6e c2 02 c0       	push   0xc002c26e
c001958d:	e9 c9 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019592:	66 81 fa 40 02       	cmp    dx,0x240
c0019597:	75 0c                	jne    c00195a5 <CPU::detectFeatures()+0x79f>
c0019599:	50                   	push   eax
c001959a:	50                   	push   eax
c001959b:	68 80 c2 02 c0       	push   0xc002c280
c00195a0:	e9 b6 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c00195a5:	83 f8 06             	cmp    eax,0x6
c00195a8:	75 0c                	jne    c00195b6 <CPU::detectFeatures()+0x7b0>
c00195aa:	50                   	push   eax
c00195ab:	50                   	push   eax
c00195ac:	68 92 c2 02 c0       	push   0xc002c292
c00195b1:	e9 a5 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c00195b6:	83 f8 04             	cmp    eax,0x4
c00195b9:	75 0c                	jne    c00195c7 <CPU::detectFeatures()+0x7c1>
c00195bb:	50                   	push   eax
c00195bc:	50                   	push   eax
c00195bd:	68 9e c2 02 c0       	push   0xc002c29e
c00195c2:	e9 94 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c00195c7:	83 f8 03             	cmp    eax,0x3
c00195ca:	0f 85 19 02 00 00    	jne    c00197e9 <CPU::detectFeatures()+0x9e3>
c00195d0:	50                   	push   eax
c00195d1:	50                   	push   eax
c00195d2:	68 a6 c2 02 c0       	push   0xc002c2a6
c00195d7:	e9 7f 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c00195dc:	80 fa 06             	cmp    dl,0x6
c00195df:	0f 85 db 00 00 00    	jne    c00196c0 <CPU::detectFeatures()+0x8ba>
c00195e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195eb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195f0:	66 81 fa 80 01       	cmp    dx,0x180
c00195f5:	75 0c                	jne    c0019603 <CPU::detectFeatures()+0x7fd>
c00195f7:	50                   	push   eax
c00195f8:	50                   	push   eax
c00195f9:	68 b1 c2 02 c0       	push   0xc002c2b1
c00195fe:	e9 58 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019603:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019609:	66 f7 c1 80 ff       	test   cx,0xff80
c001960e:	75 0c                	jne    c001961c <CPU::detectFeatures()+0x816>
c0019610:	50                   	push   eax
c0019611:	50                   	push   eax
c0019612:	68 c1 c2 02 c0       	push   0xc002c2c1
c0019617:	e9 3f 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c001961c:	66 81 fa 40 02       	cmp    dx,0x240
c0019621:	75 0c                	jne    c001962f <CPU::detectFeatures()+0x829>
c0019623:	55                   	push   ebp
c0019624:	55                   	push   ebp
c0019625:	68 c8 c2 02 c0       	push   0xc002c2c8
c001962a:	e9 2c 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c001962f:	66 81 fa 80 02       	cmp    dx,0x280
c0019634:	75 0c                	jne    c0019642 <CPU::detectFeatures()+0x83c>
c0019636:	57                   	push   edi
c0019637:	57                   	push   edi
c0019638:	68 d1 c2 02 c0       	push   0xc002c2d1
c001963d:	e9 19 01 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019642:	66 81 fa 40 03       	cmp    dx,0x340
c0019647:	74 ed                	je     c0019636 <CPU::detectFeatures()+0x830>
c0019649:	66 81 fa c0 03       	cmp    dx,0x3c0
c001964e:	75 0c                	jne    c001965c <CPU::detectFeatures()+0x856>
c0019650:	56                   	push   esi
c0019651:	56                   	push   esi
c0019652:	68 d8 c2 02 c0       	push   0xc002c2d8
c0019657:	e9 ff 00 00 00       	jmp    c001975b <CPU::detectFeatures()+0x955>
c001965c:	83 f8 06             	cmp    eax,0x6
c001965f:	0f 84 45 ff ff ff    	je     c00195aa <CPU::detectFeatures()+0x7a4>
c0019665:	83 f8 04             	cmp    eax,0x4
c0019668:	0f 84 4d ff ff ff    	je     c00195bb <CPU::detectFeatures()+0x7b5>
c001966e:	83 f8 03             	cmp    eax,0x3
c0019671:	0f 85 72 01 00 00    	jne    c00197e9 <CPU::detectFeatures()+0x9e3>
c0019677:	51                   	push   ecx
c0019678:	51                   	push   ecx
c0019679:	68 e1 c2 02 c0       	push   0xc002c2e1
c001967e:	53                   	push   ebx
c001967f:	e8 96 a8 ff ff       	call   c0013f1a <Device::setName(char const*)>
c0019684:	b1 c1                	mov    cl,0xc1
c0019686:	88 c8                	mov    al,cl
c0019688:	e6 22                	out    0x22,al
c001968a:	e4 23                	in     al,0x23
c001968c:	88 c2                	mov    dl,al
c001968e:	88 c8                	mov    al,cl
c0019690:	e6 22                	out    0x22,al
c0019692:	88 d0                	mov    al,dl
c0019694:	83 c8 10             	or     eax,0x10
c0019697:	e6 23                	out    0x23,al
c0019699:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00196a0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00196a3:	89 d0                	mov    eax,edx
c00196a5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196ab:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196af:	40                   	inc    eax
c00196b0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00196b6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196bb:	e9 a1 00 00 00       	jmp    c0019761 <CPU::detectFeatures()+0x95b>
c00196c0:	83 f8 06             	cmp    eax,0x6
c00196c3:	0f 84 e1 fe ff ff    	je     c00195aa <CPU::detectFeatures()+0x7a4>
c00196c9:	83 f8 04             	cmp    eax,0x4
c00196cc:	0f 84 e9 fe ff ff    	je     c00195bb <CPU::detectFeatures()+0x7b5>
c00196d2:	83 f8 03             	cmp    eax,0x3
c00196d5:	0f 85 0e 01 00 00    	jne    c00197e9 <CPU::detectFeatures()+0x9e3>
c00196db:	52                   	push   edx
c00196dc:	52                   	push   edx
c00196dd:	68 ec c2 02 c0       	push   0xc002c2ec
c00196e2:	eb 77                	jmp    c001975b <CPU::detectFeatures()+0x955>
c00196e4:	83 f8 07             	cmp    eax,0x7
c00196e7:	75 09                	jne    c00196f2 <CPU::detectFeatures()+0x8ec>
c00196e9:	50                   	push   eax
c00196ea:	50                   	push   eax
c00196eb:	68 f6 c2 02 c0       	push   0xc002c2f6
c00196f0:	eb 69                	jmp    c001975b <CPU::detectFeatures()+0x955>
c00196f2:	83 f8 0a             	cmp    eax,0xa
c00196f5:	75 09                	jne    c0019700 <CPU::detectFeatures()+0x8fa>
c00196f7:	50                   	push   eax
c00196f8:	50                   	push   eax
c00196f9:	68 01 c3 02 c0       	push   0xc002c301
c00196fe:	eb 5b                	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019700:	83 f8 0b             	cmp    eax,0xb
c0019703:	75 09                	jne    c001970e <CPU::detectFeatures()+0x908>
c0019705:	50                   	push   eax
c0019706:	50                   	push   eax
c0019707:	68 09 c3 02 c0       	push   0xc002c309
c001970c:	eb 4d                	jmp    c001975b <CPU::detectFeatures()+0x955>
c001970e:	83 f8 08             	cmp    eax,0x8
c0019711:	75 09                	jne    c001971c <CPU::detectFeatures()+0x916>
c0019713:	50                   	push   eax
c0019714:	50                   	push   eax
c0019715:	68 12 c3 02 c0       	push   0xc002c312
c001971a:	eb 3f                	jmp    c001975b <CPU::detectFeatures()+0x955>
c001971c:	83 f8 09             	cmp    eax,0x9
c001971f:	75 09                	jne    c001972a <CPU::detectFeatures()+0x924>
c0019721:	50                   	push   eax
c0019722:	50                   	push   eax
c0019723:	68 1a c3 02 c0       	push   0xc002c31a
c0019728:	eb 31                	jmp    c001975b <CPU::detectFeatures()+0x955>
c001972a:	83 f8 05             	cmp    eax,0x5
c001972d:	75 09                	jne    c0019738 <CPU::detectFeatures()+0x932>
c001972f:	50                   	push   eax
c0019730:	50                   	push   eax
c0019731:	68 22 c3 02 c0       	push   0xc002c322
c0019736:	eb 23                	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019738:	83 f8 0c             	cmp    eax,0xc
c001973b:	75 09                	jne    c0019746 <CPU::detectFeatures()+0x940>
c001973d:	55                   	push   ebp
c001973e:	55                   	push   ebp
c001973f:	68 30 c3 02 c0       	push   0xc002c330
c0019744:	eb 15                	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019746:	83 f8 0d             	cmp    eax,0xd
c0019749:	75 09                	jne    c0019754 <CPU::detectFeatures()+0x94e>
c001974b:	57                   	push   edi
c001974c:	57                   	push   edi
c001974d:	68 3b c3 02 c0       	push   0xc002c33b
c0019752:	eb 07                	jmp    c001975b <CPU::detectFeatures()+0x955>
c0019754:	56                   	push   esi
c0019755:	56                   	push   esi
c0019756:	68 4f c3 02 c0       	push   0xc002c34f
c001975b:	53                   	push   ebx
c001975c:	e8 b9 a7 ff ff       	call   c0013f1a <Device::setName(char const*)>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	e9 80 00 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x9e3>
c0019769:	51                   	push   ecx
c001976a:	51                   	push   ecx
c001976b:	68 9b c1 02 c0       	push   0xc002c19b
c0019770:	55                   	push   ebp
c0019771:	e8 96 70 fe ff       	call   c000080c <strcpy>
c0019776:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019780:	e8 29 6b fe ff       	call   c00002ae <is486>
c0019785:	83 c4 10             	add    esp,0x10
c0019788:	85 c0                	test   eax,eax
c001978a:	74 2b                	je     c00197b7 <CPU::detectFeatures()+0x9b1>
c001978c:	52                   	push   edx
c001978d:	52                   	push   edx
c001978e:	68 5b c3 02 c0       	push   0xc002c35b
c0019793:	53                   	push   ebx
c0019794:	e8 81 a7 ff ff       	call   c0013f1a <Device::setName(char const*)>
c0019799:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00197a0:	0f 20 c0             	mov    eax,cr0
c00197a3:	83 e0 14             	and    eax,0x14
c00197a6:	83 c4 10             	add    esp,0x10
c00197a9:	83 f8 04             	cmp    eax,0x4
c00197ac:	75 1f                	jne    c00197cd <CPU::detectFeatures()+0x9c7>
c00197ae:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00197b5:	eb 32                	jmp    c00197e9 <CPU::detectFeatures()+0x9e3>
c00197b7:	50                   	push   eax
c00197b8:	50                   	push   eax
c00197b9:	68 66 c3 02 c0       	push   0xc002c366
c00197be:	53                   	push   ebx
c00197bf:	e8 56 a7 ff ff       	call   c0013f1a <Device::setName(char const*)>
c00197c4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197cb:	eb d3                	jmp    c00197a0 <CPU::detectFeatures()+0x99a>
c00197cd:	e8 b7 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197d2:	83 e0 01             	and    eax,0x1
c00197d5:	8d 14 00             	lea    edx,[eax+eax*1]
c00197d8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197de:	83 e0 fd             	and    eax,0xfffffffd
c00197e1:	09 d0                	or     eax,edx
c00197e3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197e9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197f0:	83 c4 4c             	add    esp,0x4c
c00197f3:	5b                   	pop    ebx
c00197f4:	5e                   	pop    esi
c00197f5:	5f                   	pop    edi
c00197f6:	5d                   	pop    ebp
c00197f7:	c3                   	ret    

c00197f8 <CPU::setupSMEP()>:
c00197f8:	0f 20 e0             	mov    eax,cr4
c00197fb:	0d 00 00 10 00       	or     eax,0x100000
c0019800:	0f 22 e0             	mov    cr4,eax
c0019803:	c3                   	ret    

c0019804 <CPU::setupUMIP()>:
c0019804:	0f 20 e0             	mov    eax,cr4
c0019807:	80 cc 08             	or     ah,0x8
c001980a:	0f 22 e0             	mov    cr4,eax
c001980d:	c3                   	ret    

c001980e <CPU::setupTSC()>:
c001980e:	0f 20 e0             	mov    eax,cr4
c0019811:	83 c8 04             	or     eax,0x4
c0019814:	0f 22 e0             	mov    cr4,eax
c0019817:	c3                   	ret    

c0019818 <CPU::setupLargePages()>:
c0019818:	0f 20 e0             	mov    eax,cr4
c001981b:	83 c8 10             	or     eax,0x10
c001981e:	0f 22 e0             	mov    cr4,eax
c0019821:	c3                   	ret    

c0019822 <CPU::setupPAT()>:
c0019822:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019827:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001982e:	74 2c                	je     c001985c <CPU::setupPAT()+0x3a>
c0019830:	53                   	push   ebx
c0019831:	83 ec 10             	sub    esp,0x10
c0019834:	68 77 02 00 00       	push   0x277
c0019839:	50                   	push   eax
c001983a:	e8 f3 55 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001983f:	83 e2 f8             	and    edx,0xfffffff8
c0019842:	83 ca 01             	or     edx,0x1
c0019845:	52                   	push   edx
c0019846:	50                   	push   eax
c0019847:	68 77 02 00 00       	push   0x277
c001984c:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0019852:	e8 07 56 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019857:	83 c4 28             	add    esp,0x28
c001985a:	5b                   	pop    ebx
c001985b:	c3                   	ret    
c001985c:	c3                   	ret    
c001985d:	90                   	nop

c001985e <CPU::setupMTRR()>:
c001985e:	c3                   	ret    
c001985f:	90                   	nop

c0019860 <CPU::setupGlobalPages()>:
c0019860:	0f 20 e0             	mov    eax,cr4
c0019863:	0c 80                	or     al,0x80
c0019865:	0f 22 e0             	mov    cr4,eax
c0019868:	c3                   	ret    
c0019869:	90                   	nop

c001986a <CPU::allowUsermodeDataAccess()>:
c001986a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001986e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019875:	74 03                	je     c001987a <CPU::allowUsermodeDataAccess()+0x10>
c0019877:	0f 01 cb             	stac   
c001987a:	c3                   	ret    
c001987b:	90                   	nop

c001987c <CPU::prohibitUsermodeDataAccess()>:
c001987c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019880:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019887:	74 03                	je     c001988c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019889:	0f 01 ca             	clac   
c001988c:	c3                   	ret    
c001988d:	90                   	nop

c001988e <CPU::setupSMAP()>:
c001988e:	0f 20 e0             	mov    eax,cr4
c0019891:	0d 00 00 20 00       	or     eax,0x200000
c0019896:	0f 22 e0             	mov    cr4,eax
c0019899:	eb e1                	jmp    c001987c <CPU::prohibitUsermodeDataAccess()>
c001989b:	90                   	nop

c001989c <CPU::setupFeatures()>:
c001989c:	83 ec 0c             	sub    esp,0xc
c001989f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198a3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198aa:	74 07                	je     c00198b3 <CPU::setupFeatures()+0x17>
c00198ac:	52                   	push   edx
c00198ad:	e8 46 ff ff ff       	call   c00197f8 <CPU::setupSMEP()>
c00198b2:	58                   	pop    eax
c00198b3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198ba:	74 07                	je     c00198c3 <CPU::setupFeatures()+0x27>
c00198bc:	52                   	push   edx
c00198bd:	e8 cc ff ff ff       	call   c001988e <CPU::setupSMAP()>
c00198c2:	58                   	pop    eax
c00198c3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198ca:	74 07                	je     c00198d3 <CPU::setupFeatures()+0x37>
c00198cc:	52                   	push   edx
c00198cd:	e8 32 ff ff ff       	call   c0019804 <CPU::setupUMIP()>
c00198d2:	58                   	pop    eax
c00198d3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198da:	74 07                	je     c00198e3 <CPU::setupFeatures()+0x47>
c00198dc:	52                   	push   edx
c00198dd:	e8 2c ff ff ff       	call   c001980e <CPU::setupTSC()>
c00198e2:	58                   	pop    eax
c00198e3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198ea:	74 07                	je     c00198f3 <CPU::setupFeatures()+0x57>
c00198ec:	52                   	push   edx
c00198ed:	e8 26 ff ff ff       	call   c0019818 <CPU::setupLargePages()>
c00198f2:	59                   	pop    ecx
c00198f3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198fa:	74 07                	je     c0019903 <CPU::setupFeatures()+0x67>
c00198fc:	52                   	push   edx
c00198fd:	e8 5e ff ff ff       	call   c0019860 <CPU::setupGlobalPages()>
c0019902:	58                   	pop    eax
c0019903:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001990a:	74 0c                	je     c0019918 <CPU::setupFeatures()+0x7c>
c001990c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019910:	83 c4 0c             	add    esp,0xc
c0019913:	e9 0a ff ff ff       	jmp    c0019822 <CPU::setupPAT()>
c0019918:	83 c4 0c             	add    esp,0xc
c001991b:	c3                   	ret    

c001991c <CPU::open(int, int, void*)>:
c001991c:	57                   	push   edi
c001991d:	56                   	push   esi
c001991e:	53                   	push   ebx
c001991f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019927:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001992d:	83 ec 0c             	sub    esp,0xc
c0019930:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019936:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001993c:	50                   	push   eax
c001993d:	e8 dc 57 ff ff       	call   c000f11e <GDT::setup()>
c0019942:	83 c4 0c             	add    esp,0xc
c0019945:	6a 00                	push   0x0
c0019947:	68 ef be ad de       	push   0xdeadbeef
c001994c:	57                   	push   edi
c001994d:	e8 04 75 ff ff       	call   c0010e56 <TSS::setup(unsigned long, unsigned long)>
c0019952:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019955:	e8 dc 74 ff ff       	call   c0010e36 <TSS::flush()>
c001995a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019960:	89 04 24             	mov    DWORD PTR [esp],eax
c0019963:	e8 1a 5a ff ff       	call   c000f382 <IDT::setup()>
c0019968:	b8 00 04 00 00       	mov    eax,0x400
c001996d:	0f 23 f8             	mov    db7,eax
c0019970:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001997a:	e8 2e 62 ff ff       	call   c000fbad <Phys::allocatePage()>
c001997f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019985:	89 30                	mov    DWORD PTR [eax],esi
c0019987:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001998d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019990:	58                   	pop    eax
c0019991:	5a                   	pop    edx
c0019992:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001999c:	e8 55 86 ff ff       	call   c0011ff6 <VAS::setCPUSpecific(unsigned long)>
c00199a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199a4:	e8 5d f4 ff ff       	call   c0018e06 <CPU::detectFeatures()>
c00199a9:	e8 9e b9 ff ff       	call   c001534c <setupInterruptController()>
c00199ae:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00199b4:	a1 40 f0 02 c0       	mov    eax,ds:0xc002f040
c00199b9:	83 e0 10             	and    eax,0x10
c00199bc:	83 f8 01             	cmp    eax,0x1
c00199bf:	19 c0                	sbb    eax,eax
c00199c1:	83 e0 46             	and    eax,0x46
c00199c4:	83 c0 1e             	add    eax,0x1e
c00199c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ca:	e8 d4 cf ff ff       	call   c00169a3 <setupTimer(int)>
c00199cf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00199d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199d8:	e8 bf fe ff ff       	call   c001989c <CPU::setupFeatures()>
c00199dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199e0:	e8 a5 f1 ff ff       	call   c0018b8a <CPU::displayFeatures()>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	31 c0                	xor    eax,eax
c00199ea:	5b                   	pop    ebx
c00199eb:	5e                   	pop    esi
c00199ec:	5f                   	pop    edi
c00199ed:	c3                   	ret    

c00199ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00199ee:	57                   	push   edi
c00199ef:	56                   	push   esi
c00199f0:	53                   	push   ebx
c00199f1:	51                   	push   ecx
c00199f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199f6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00199f9:	0f 02 c0             	lar    eax,ax
c00199fc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00199ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a03:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a06:	88 ca                	mov    dl,cl
c0019a08:	c0 ea 06             	shr    dl,0x6
c0019a0b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a0f:	89 ca                	mov    edx,ecx
c0019a11:	66 c1 ea 03          	shr    dx,0x3
c0019a15:	83 e2 07             	and    edx,0x7
c0019a18:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a1d:	88 17                	mov    BYTE PTR [edi],dl
c0019a1f:	0f 84 a6 01 00 00    	je     c0019bcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019a25:	83 e1 07             	and    ecx,0x7
c0019a28:	80 f9 04             	cmp    cl,0x4
c0019a2b:	0f 84 98 00 00 00    	je     c0019ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019a31:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a36:	0f 95 c0             	setne  al
c0019a39:	80 f9 05             	cmp    cl,0x5
c0019a3c:	0f 95 c2             	setne  dl
c0019a3f:	08 c2                	or     dl,al
c0019a41:	74 79                	je     c0019abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019a43:	84 c9                	test   cl,cl
c0019a45:	75 05                	jne    c0019a4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019a47:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a4a:	eb 3c                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a4c:	80 f9 01             	cmp    cl,0x1
c0019a4f:	75 05                	jne    c0019a56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019a51:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a54:	eb 32                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a56:	80 f9 02             	cmp    cl,0x2
c0019a59:	75 05                	jne    c0019a60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019a5b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a5e:	eb 28                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a60:	31 c0                	xor    eax,eax
c0019a62:	80 f9 03             	cmp    cl,0x3
c0019a65:	75 05                	jne    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019a67:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a6a:	eb 1c                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a6c:	80 f9 05             	cmp    cl,0x5
c0019a6f:	75 05                	jne    c0019a76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a71:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a74:	eb 12                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a76:	80 f9 06             	cmp    cl,0x6
c0019a79:	75 05                	jne    c0019a80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a7b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a7e:	eb 08                	jmp    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a80:	80 f9 07             	cmp    cl,0x7
c0019a83:	75 03                	jne    c0019a88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a85:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a88:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a8d:	75 10                	jne    c0019a9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a8f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a93:	b9 03 00 00 00       	mov    ecx,0x3
c0019a98:	01 d0                	add    eax,edx
c0019a9a:	e9 37 01 00 00       	jmp    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a9f:	b9 02 00 00 00       	mov    ecx,0x2
c0019aa4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019aa9:	0f 85 27 01 00 00    	jne    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aaf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019ab2:	b9 06 00 00 00       	mov    ecx,0x6
c0019ab7:	e9 1a 01 00 00       	jmp    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019abc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019abf:	b9 06 00 00 00       	mov    ecx,0x6
c0019ac4:	e9 0f 01 00 00       	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ac9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019acc:	88 ca                	mov    dl,cl
c0019ace:	c0 ea 06             	shr    dl,0x6
c0019ad1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ad5:	89 ca                	mov    edx,ecx
c0019ad7:	66 c1 ea 03          	shr    dx,0x3
c0019adb:	83 e2 07             	and    edx,0x7
c0019ade:	80 e1 07             	and    cl,0x7
c0019ae1:	75 05                	jne    c0019ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ae3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ae6:	eb 4c                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ae8:	80 f9 01             	cmp    cl,0x1
c0019aeb:	75 05                	jne    c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019aed:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019af0:	eb 42                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019af2:	80 f9 02             	cmp    cl,0x2
c0019af5:	75 05                	jne    c0019afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019af7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019afa:	eb 38                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019afc:	80 f9 03             	cmp    cl,0x3
c0019aff:	75 05                	jne    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b01:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b04:	eb 2e                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b06:	80 f9 04             	cmp    cl,0x4
c0019b09:	75 12                	jne    c0019b1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b0b:	f6 c4 60             	test   ah,0x60
c0019b0e:	75 08                	jne    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b10:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019b13:	8d 78 14             	lea    edi,[eax+0x14]
c0019b16:	eb 1c                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b18:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019b1b:	eb 17                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b1d:	80 f9 05             	cmp    cl,0x5
c0019b20:	75 05                	jne    c0019b27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019b22:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019b25:	eb 0d                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b27:	80 f9 06             	cmp    cl,0x6
c0019b2a:	75 05                	jne    c0019b31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019b2c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019b2f:	eb 03                	jmp    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b31:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019b34:	84 d2                	test   dl,dl
c0019b36:	75 05                	jne    c0019b3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019b38:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b3b:	eb 3c                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b3d:	80 fa 01             	cmp    dl,0x1
c0019b40:	75 05                	jne    c0019b47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019b42:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b45:	eb 32                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b47:	80 fa 02             	cmp    dl,0x2
c0019b4a:	75 05                	jne    c0019b51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019b4c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b4f:	eb 28                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b51:	80 fa 03             	cmp    dl,0x3
c0019b54:	75 05                	jne    c0019b5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019b56:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b59:	eb 1e                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b5b:	31 c0                	xor    eax,eax
c0019b5d:	80 fa 04             	cmp    dl,0x4
c0019b60:	74 17                	je     c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b62:	80 fa 05             	cmp    dl,0x5
c0019b65:	75 05                	jne    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019b67:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b6a:	eb 0d                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b6c:	80 fa 06             	cmp    dl,0x6
c0019b6f:	75 05                	jne    c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b74:	eb 03                	jmp    c0019b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b76:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b79:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b7e:	0f 94 c2             	sete   dl
c0019b81:	80 f9 05             	cmp    cl,0x5
c0019b84:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b88:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b8d:	d3 e0                	shl    eax,cl
c0019b8f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b93:	74 0a                	je     c0019b9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019b95:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b98:	b9 07 00 00 00       	mov    ecx,0x7
c0019b9d:	eb 37                	jmp    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b9f:	01 f8                	add    eax,edi
c0019ba1:	b9 03 00 00 00       	mov    ecx,0x3
c0019ba6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bab:	74 2b                	je     c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bad:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bb2:	75 0d                	jne    c0019bc1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019bb4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019bb8:	01 c8                	add    eax,ecx
c0019bba:	b9 04 00 00 00       	mov    ecx,0x4
c0019bbf:	eb 17                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bc1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019bc4:	b9 07 00 00 00       	mov    ecx,0x7
c0019bc9:	eb 0d                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bcb:	b9 02 00 00 00       	mov    ecx,0x2
c0019bd0:	b2 01                	mov    dl,0x1
c0019bd2:	31 c0                	xor    eax,eax
c0019bd4:	eb 02                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bd6:	31 d2                	xor    edx,edx
c0019bd8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019bdc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019bde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019be2:	88 11                	mov    BYTE PTR [ecx],dl
c0019be4:	5a                   	pop    edx
c0019be5:	5b                   	pop    ebx
c0019be6:	5e                   	pop    esi
c0019be7:	5f                   	pop    edi
c0019be8:	c3                   	ret    

c0019be9 <Krnl::smpEntry()>:
c0019be9:	eb fe                	jmp    c0019be9 <Krnl::smpEntry()>

c0019beb <Krnl::startCPU(int)>:
c0019beb:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019bf0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bf7:	0f 84 36 01 00 00    	je     c0019d33 <Krnl::startCPU(int)+0x148>
c0019bfd:	53                   	push   ebx
c0019bfe:	83 ec 10             	sub    esp,0x10
c0019c01:	fa                   	cli    
c0019c02:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0019c08:	6a 1b                	push   0x1b
c0019c0a:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0019c10:	e8 1d 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019c15:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c1a:	89 c3                	mov    ebx,eax
c0019c1c:	58                   	pop    eax
c0019c1d:	5a                   	pop    edx
c0019c1e:	53                   	push   ebx
c0019c1f:	68 a0 c3 02 c0       	push   0xc002c3a0
c0019c24:	e8 c2 8c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019c29:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c37:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c41:	c1 e0 18             	shl    eax,0x18
c0019c44:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019c4a:	83 c4 10             	add    esp,0x10
c0019c4d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019c53:	09 c2                	or     edx,eax
c0019c55:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019c5b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019c61:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c67:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c6d:	80 cd c5             	or     ch,0xc5
c0019c70:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c76:	f3 90                	pause  
c0019c78:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c7a:	0f ba e1 0c          	bt     ecx,0xc
c0019c7e:	72 f6                	jb     c0019c76 <Krnl::startCPU(int)+0x8b>
c0019c80:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c86:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c8c:	09 c1                	or     ecx,eax
c0019c8e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c94:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c9a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ca0:	80 cd 85             	or     ch,0x85
c0019ca3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ca9:	f3 90                	pause  
c0019cab:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cad:	0f ba e1 0c          	bt     ecx,0xc
c0019cb1:	72 f6                	jb     c0019ca9 <Krnl::startCPU(int)+0xbe>
c0019cb3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cbd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019cc3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019cc9:	09 c1                	or     ecx,eax
c0019ccb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019cd1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cd7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019cdd:	81 c9 02 06 00 00    	or     ecx,0x602
c0019ce3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ce9:	f3 90                	pause  
c0019ceb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ced:	0f ba e1 0c          	bt     ecx,0xc
c0019cf1:	72 f6                	jb     c0019ce9 <Krnl::startCPU(int)+0xfe>
c0019cf3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cfd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d03:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d09:	09 c8                	or     eax,ecx
c0019d0b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d11:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019d17:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d1c:	0d 02 06 00 00       	or     eax,0x602
c0019d21:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019d27:	f3 90                	pause  
c0019d29:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d2b:	0f ba e0 0c          	bt     eax,0xc
c0019d2f:	72 f6                	jb     c0019d27 <Krnl::startCPU(int)+0x13c>
c0019d31:	eb fe                	jmp    c0019d31 <Krnl::startCPU(int)+0x146>
c0019d33:	c3                   	ret    

c0019d34 <Krnl::startCPUs()>:
c0019d34:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019d39:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019d3f:	88 c2                	mov    dl,al
c0019d41:	83 e2 0a             	and    edx,0xa
c0019d44:	80 fa 0a             	cmp    dl,0xa
c0019d47:	75 09                	jne    c0019d52 <Krnl::startCPUs()+0x1e>
c0019d49:	a8 01                	test   al,0x1
c0019d4b:	74 05                	je     c0019d52 <Krnl::startCPUs()+0x1e>
c0019d4d:	e9 49 64 fe ff       	jmp    c000019b <prepareTramp>
c0019d52:	c3                   	ret    
c0019d53:	90                   	nop

c0019d54 <EnvVarContainer::getEnv(char const*)>:
c0019d54:	57                   	push   edi
c0019d55:	56                   	push   esi
c0019d56:	53                   	push   ebx
c0019d57:	31 db                	xor    ebx,ebx
c0019d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d5d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019d5f:	7e 2b                	jle    c0019d8c <EnvVarContainer::getEnv(char const*)+0x38>
c0019d61:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019d68:	50                   	push   eax
c0019d69:	50                   	push   eax
c0019d6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d6d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d74:	e8 1f 6b fe ff       	call   c0000898 <strcmp>
c0019d79:	83 c4 10             	add    esp,0x10
c0019d7c:	85 c0                	test   eax,eax
c0019d7e:	75 09                	jne    c0019d89 <EnvVarContainer::getEnv(char const*)+0x35>
c0019d80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d83:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d87:	eb 05                	jmp    c0019d8e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d89:	43                   	inc    ebx
c0019d8a:	eb d1                	jmp    c0019d5d <EnvVarContainer::getEnv(char const*)+0x9>
c0019d8c:	31 c0                	xor    eax,eax
c0019d8e:	5b                   	pop    ebx
c0019d8f:	5e                   	pop    esi
c0019d90:	5f                   	pop    edi
c0019d91:	c3                   	ret    

c0019d92 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d92:	55                   	push   ebp
c0019d93:	57                   	push   edi
c0019d94:	56                   	push   esi
c0019d95:	53                   	push   ebx
c0019d96:	83 ec 28             	sub    esp,0x28
c0019d99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019d9d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019da1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019da5:	56                   	push   esi
c0019da6:	e8 c1 69 fe ff       	call   c000076c <strlen>
c0019dab:	40                   	inc    eax
c0019dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0019daf:	e8 d8 5a ff ff       	call   c000f88c <malloc>
c0019db4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019db7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019dbb:	e8 ac 69 fe ff       	call   c000076c <strlen>
c0019dc0:	40                   	inc    eax
c0019dc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dc4:	e8 c3 5a ff ff       	call   c000f88c <malloc>
c0019dc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dd0:	e8 97 69 fe ff       	call   c000076c <strlen>
c0019dd5:	83 c4 0c             	add    esp,0xc
c0019dd8:	40                   	inc    eax
c0019dd9:	50                   	push   eax
c0019dda:	6a 00                	push   0x0
c0019ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019de0:	e8 6b 69 fe ff       	call   c0000750 <memset>
c0019de5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019de8:	e8 7f 69 fe ff       	call   c000076c <strlen>
c0019ded:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019df1:	8d 48 01             	lea    ecx,[eax+0x1]
c0019df4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019df9:	89 de                	mov    esi,ebx
c0019dfb:	e8 6c 69 fe ff       	call   c000076c <strlen>
c0019e00:	83 c4 0c             	add    esp,0xc
c0019e03:	40                   	inc    eax
c0019e04:	50                   	push   eax
c0019e05:	6a 00                	push   0x0
c0019e07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e0b:	e8 40 69 fe ff       	call   c0000750 <memset>
c0019e10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e13:	e8 54 69 fe ff       	call   c000076c <strlen>
c0019e18:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e1c:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e24:	40                   	inc    eax
c0019e25:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e28:	c1 e0 03             	shl    eax,0x3
c0019e2b:	5a                   	pop    edx
c0019e2c:	59                   	pop    ecx
c0019e2d:	50                   	push   eax
c0019e2e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e31:	e8 42 5a ff ff       	call   c000f878 <realloc>
c0019e36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e3a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e3d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e40:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e44:	b9 08 00 00 00       	mov    ecx,0x8
c0019e49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e4b:	83 c4 2c             	add    esp,0x2c
c0019e4e:	5b                   	pop    ebx
c0019e4f:	5e                   	pop    esi
c0019e50:	5f                   	pop    edi
c0019e51:	5d                   	pop    ebp
c0019e52:	c3                   	ret    
c0019e53:	90                   	nop

c0019e54 <EnvVarContainer::deleteEnv(char const*)>:
c0019e54:	c3                   	ret    
c0019e55:	90                   	nop

c0019e56 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019e56:	55                   	push   ebp
c0019e57:	57                   	push   edi
c0019e58:	56                   	push   esi
c0019e59:	53                   	push   ebx
c0019e5a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019e60:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019e67:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019e6e:	68 14 01 00 00       	push   0x114
c0019e73:	e8 14 5a ff ff       	call   c000f88c <malloc>
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	89 c5                	mov    ebp,eax
c0019e7d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e80:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e87:	50                   	push   eax
c0019e88:	e8 bd 8f ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c0019e8d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e90:	e8 87 92 ff ff       	call   c001311c <File::exists()>
c0019e95:	83 c4 10             	add    esp,0x10
c0019e98:	84 c0                	test   al,al
c0019e9a:	75 32                	jne    c0019ece <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019e9c:	51                   	push   ecx
c0019e9d:	51                   	push   ecx
c0019e9e:	6a 12                	push   0x12
c0019ea0:	55                   	push   ebp
c0019ea1:	e8 08 90 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c0019ea6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ea9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019eac:	89 34 24             	mov    DWORD PTR [esp],esi
c0019eaf:	e8 b8 68 fe ff       	call   c000076c <strlen>
c0019eb4:	5a                   	pop    edx
c0019eb5:	31 d2                	xor    edx,edx
c0019eb7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ebb:	51                   	push   ecx
c0019ebc:	56                   	push   esi
c0019ebd:	52                   	push   edx
c0019ebe:	50                   	push   eax
c0019ebf:	55                   	push   ebp
c0019ec0:	ff d7                	call   edi
c0019ec2:	83 c4 14             	add    esp,0x14
c0019ec5:	55                   	push   ebp
c0019ec6:	e8 41 90 ff ff       	call   c0012f0c <File::close()>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	31 f6                	xor    esi,esi
c0019ed0:	50                   	push   eax
c0019ed1:	68 00 01 00 00       	push   0x100
c0019ed6:	6a 00                	push   0x0
c0019ed8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019edc:	50                   	push   eax
c0019edd:	e8 6e 68 fe ff       	call   c0000750 <memset>
c0019ee2:	58                   	pop    eax
c0019ee3:	5a                   	pop    edx
c0019ee4:	6a 01                	push   0x1
c0019ee6:	55                   	push   ebp
c0019ee7:	e8 c2 8f ff ff       	call   c0012eae <File::open(FileOpenMode)>
c0019eec:	83 c4 10             	add    esp,0x10
c0019eef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ef7:	83 ec 0c             	sub    esp,0xc
c0019efa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019efd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f01:	51                   	push   ecx
c0019f02:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f06:	52                   	push   edx
c0019f07:	6a 00                	push   0x0
c0019f09:	6a 01                	push   0x1
c0019f0b:	55                   	push   ebp
c0019f0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f0f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f13:	83 c4 20             	add    esp,0x20
c0019f16:	3c 0d                	cmp    al,0xd
c0019f18:	0f 84 16 01 00 00    	je     c001a034 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019f1e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f23:	0f 84 fc 00 00 00    	je     c001a025 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f29:	3c 0a                	cmp    al,0xa
c0019f2b:	74 13                	je     c0019f40 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f2d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f32:	74 0c                	je     c0019f40 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019f3a:	0f 8e e5 00 00 00    	jle    c001a025 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f44:	83 ec 0c             	sub    esp,0xc
c0019f47:	8d 78 01             	lea    edi,[eax+0x1]
c0019f4a:	57                   	push   edi
c0019f4b:	e8 3c 59 ff ff       	call   c000f88c <malloc>
c0019f50:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019f54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f58:	8d 56 04             	lea    edx,[esi+0x4]
c0019f5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0019f5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f62:	e8 25 59 ff ff       	call   c000f88c <malloc>
c0019f67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f6b:	83 c4 0c             	add    esp,0xc
c0019f6e:	57                   	push   edi
c0019f6f:	6a 00                	push   0x0
c0019f71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f75:	e8 d6 67 fe ff       	call   c0000750 <memset>
c0019f7a:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f82:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f88:	83 c4 0c             	add    esp,0xc
c0019f8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f8f:	52                   	push   edx
c0019f90:	6a 00                	push   0x0
c0019f92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f96:	e8 b5 67 fe ff       	call   c0000750 <memset>
c0019f9b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f9f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019fa3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fa6:	e8 c1 67 fe ff       	call   c000076c <strlen>
c0019fab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019faf:	89 c1                	mov    ecx,eax
c0019fb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fb3:	5e                   	pop    esi
c0019fb4:	5f                   	pop    edi
c0019fb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fb9:	68 b1 c3 02 c0       	push   0xc002c3b1
c0019fbe:	e8 28 89 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc5:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019fc8:	40                   	inc    eax
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	89 03                	mov    DWORD PTR [ebx],eax
c0019fce:	85 d2                	test   edx,edx
c0019fd0:	75 0c                	jne    c0019fde <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019fd2:	83 ec 0c             	sub    esp,0xc
c0019fd5:	6a 08                	push   0x8
c0019fd7:	e8 b0 58 ff ff       	call   c000f88c <malloc>
c0019fdc:	eb 0c                	jmp    c0019fea <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019fde:	c1 e0 03             	shl    eax,0x3
c0019fe1:	51                   	push   ecx
c0019fe2:	51                   	push   ecx
c0019fe3:	50                   	push   eax
c0019fe4:	52                   	push   edx
c0019fe5:	e8 8e 58 ff ff       	call   c000f878 <realloc>
c0019fea:	83 c4 10             	add    esp,0x10
c0019fed:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ff0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019ff2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019ff5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ff9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ffd:	b9 08 00 00 00       	mov    ecx,0x8
c001a002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a004:	31 f6                	xor    esi,esi
c001a006:	52                   	push   edx
c001a007:	68 00 01 00 00       	push   0x100
c001a00c:	6a 00                	push   0x0
c001a00e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a012:	50                   	push   eax
c001a013:	e8 38 67 fe ff       	call   c0000750 <memset>
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a023:	eb 0f                	jmp    c001a034 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a025:	3c 3d                	cmp    al,0x3d
c001a027:	74 07                	je     c001a030 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a029:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a02d:	46                   	inc    esi
c001a02e:	eb 04                	jmp    c001a034 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a030:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a034:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a039:	0f 85 b8 fe ff ff    	jne    c0019ef7 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a03f:	50                   	push   eax
c001a040:	50                   	push   eax
c001a041:	ff 33                	push   DWORD PTR [ebx]
c001a043:	68 bf c3 02 c0       	push   0xc002c3bf
c001a048:	e8 9e 88 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a04d:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a053:	5b                   	pop    ebx
c001a054:	5e                   	pop    esi
c001a055:	5f                   	pop    edi
c001a056:	5d                   	pop    ebp
c001a057:	c3                   	ret    

c001a058 <EnvVarContainer::__loadSystem()>:
c001a058:	83 ec 10             	sub    esp,0x10
c001a05b:	68 60 e5 02 c0       	push   0xc002e560
c001a060:	68 ea c3 02 c0       	push   0xc002c3ea
c001a065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a069:	e8 e8 fd ff ff       	call   c0019e56 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a06e:	83 c4 1c             	add    esp,0x1c
c001a071:	c3                   	ret    

c001a072 <EnvVarContainer::__loadUser()>:
c001a072:	c3                   	ret    
c001a073:	90                   	nop

c001a074 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a078:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a086:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a08d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a094:	90                   	nop
c001a095:	c3                   	ret    

c001a096 <EnvVarContainer::~EnvVarContainer()>:
c001a096:	83 ec 0c             	sub    esp,0xc
c001a099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a0a0:	85 c0                	test   eax,eax
c001a0a2:	74 1d                	je     c001a0c1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0aa:	85 c0                	test   eax,eax
c001a0ac:	74 13                	je     c001a0c1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a0b5:	83 ec 0c             	sub    esp,0xc
c001a0b8:	50                   	push   eax
c001a0b9:	e8 de 57 ff ff       	call   c000f89c <free>
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	90                   	nop
c001a0c2:	83 c4 0c             	add    esp,0xc
c001a0c5:	c3                   	ret    

c001a0c6 <Krnl::getEnv(Process*, char const*)>:
c001a0c6:	53                   	push   ebx
c001a0c7:	83 ec 08             	sub    esp,0x8
c001a0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0d2:	39 05 70 25 03 c0    	cmp    DWORD PTR ds:0xc0032570,eax
c001a0d8:	74 04                	je     c001a0de <Krnl::getEnv(Process*, char const*)+0x18>
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	75 0b                	jne    c001a0e9 <Krnl::getEnv(Process*, char const*)+0x23>
c001a0de:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a0e3:	85 c0                	test   eax,eax
c001a0e5:	75 19                	jne    c001a100 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a0e7:	eb 27                	jmp    c001a110 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a0e9:	52                   	push   edx
c001a0ea:	52                   	push   edx
c001a0eb:	53                   	push   ebx
c001a0ec:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a0f2:	e8 5d fc ff ff       	call   c0019d54 <EnvVarContainer::getEnv(char const*)>
c001a0f7:	83 c4 10             	add    esp,0x10
c001a0fa:	85 c0                	test   eax,eax
c001a0fc:	75 28                	jne    c001a126 <Krnl::getEnv(Process*, char const*)+0x60>
c001a0fe:	eb de                	jmp    c001a0de <Krnl::getEnv(Process*, char const*)+0x18>
c001a100:	52                   	push   edx
c001a101:	52                   	push   edx
c001a102:	53                   	push   ebx
c001a103:	50                   	push   eax
c001a104:	e8 4b fc ff ff       	call   c0019d54 <EnvVarContainer::getEnv(char const*)>
c001a109:	83 c4 10             	add    esp,0x10
c001a10c:	85 c0                	test   eax,eax
c001a10e:	75 16                	jne    c001a126 <Krnl::getEnv(Process*, char const*)+0x60>
c001a110:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a114:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a119:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a11d:	83 c4 08             	add    esp,0x8
c001a120:	5b                   	pop    ebx
c001a121:	e9 2e fc ff ff       	jmp    c0019d54 <EnvVarContainer::getEnv(char const*)>
c001a126:	83 c4 08             	add    esp,0x8
c001a129:	5b                   	pop    ebx
c001a12a:	c3                   	ret    

c001a12b <Krnl::setEnvSystem(char const*, char const*)>:
c001a12b:	83 ec 10             	sub    esp,0x10
c001a12e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a132:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a136:	ff 35 58 1b 03 c0    	push   DWORD PTR ds:0xc0031b58
c001a13c:	e8 51 fc ff ff       	call   c0019d92 <EnvVarContainer::setEnv(char const*, char const*)>
c001a141:	83 c4 1c             	add    esp,0x1c
c001a144:	c3                   	ret    

c001a145 <Krnl::setEnvUser(char const*, char const*)>:
c001a145:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a14a:	85 c0                	test   eax,eax
c001a14c:	74 15                	je     c001a163 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a14e:	83 ec 10             	sub    esp,0x10
c001a151:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a155:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a159:	50                   	push   eax
c001a15a:	e8 33 fc ff ff       	call   c0019d92 <EnvVarContainer::setEnv(char const*, char const*)>
c001a15f:	83 c4 1c             	add    esp,0x1c
c001a162:	c3                   	ret    
c001a163:	c3                   	ret    

c001a164 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a168:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a16e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a172:	e9 1b fc ff ff       	jmp    c0019d92 <EnvVarContainer::setEnv(char const*, char const*)>

c001a177 <Krnl::deleteEnvSystem(char const*)>:
c001a177:	c3                   	ret    

c001a178 <Krnl::deleteEnvUser(char const*)>:
c001a178:	c3                   	ret    

c001a179 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a179:	c3                   	ret    

c001a17a <Krnl::newProcessEnv(Process*)>:
c001a17a:	83 ec 28             	sub    esp,0x28
c001a17d:	6a 0c                	push   0xc
c001a17f:	e8 08 57 ff ff       	call   c000f88c <malloc>
c001a184:	5a                   	pop    edx
c001a185:	59                   	pop    ecx
c001a186:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a18a:	50                   	push   eax
c001a18b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a18f:	e8 e0 fe ff ff       	call   c001a074 <EnvVarContainer::EnvVarContainer(Process*)>
c001a194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a198:	83 c4 2c             	add    esp,0x2c
c001a19b:	c3                   	ret    

c001a19c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a19c:	57                   	push   edi
c001a19d:	56                   	push   esi
c001a19e:	53                   	push   ebx
c001a19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1a3:	83 ec 0c             	sub    esp,0xc
c001a1a6:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a1ac:	6a 0c                	push   0xc
c001a1ae:	e8 d9 56 ff ff       	call   c000f88c <malloc>
c001a1b3:	89 c3                	mov    ebx,eax
c001a1b5:	58                   	pop    eax
c001a1b6:	5a                   	pop    edx
c001a1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1bb:	53                   	push   ebx
c001a1bc:	e8 b3 fe ff ff       	call   c001a074 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1c1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1c3:	89 03                	mov    DWORD PTR [ebx],eax
c001a1c5:	c1 e0 03             	shl    eax,0x3
c001a1c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1cb:	e8 bc 56 ff ff       	call   c000f88c <malloc>
c001a1d0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1d3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a1d5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a1d8:	c1 e1 03             	shl    ecx,0x3
c001a1db:	89 c7                	mov    edi,eax
c001a1dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1df:	83 c4 10             	add    esp,0x10
c001a1e2:	89 d8                	mov    eax,ebx
c001a1e4:	5b                   	pop    ebx
c001a1e5:	5e                   	pop    esi
c001a1e6:	5f                   	pop    edi
c001a1e7:	c3                   	ret    

c001a1e8 <Krnl::loadSystemEnv()>:
c001a1e8:	53                   	push   ebx
c001a1e9:	83 ec 14             	sub    esp,0x14
c001a1ec:	6a 0c                	push   0xc
c001a1ee:	e8 99 56 ff ff       	call   c000f88c <malloc>
c001a1f3:	89 c3                	mov    ebx,eax
c001a1f5:	58                   	pop    eax
c001a1f6:	5a                   	pop    edx
c001a1f7:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001a1fd:	53                   	push   ebx
c001a1fe:	e8 71 fe ff ff       	call   c001a074 <EnvVarContainer::EnvVarContainer(Process*)>
c001a203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a206:	89 1d 58 1b 03 c0    	mov    DWORD PTR ds:0xc0031b58,ebx
c001a20c:	e8 47 fe ff ff       	call   c001a058 <EnvVarContainer::__loadSystem()>
c001a211:	83 c4 18             	add    esp,0x18
c001a214:	5b                   	pop    ebx
c001a215:	c3                   	ret    

c001a216 <Krnl::loadUserEnv()>:
c001a216:	53                   	push   ebx
c001a217:	83 ec 14             	sub    esp,0x14
c001a21a:	6a 0c                	push   0xc
c001a21c:	e8 6b 56 ff ff       	call   c000f88c <malloc>
c001a221:	89 c3                	mov    ebx,eax
c001a223:	58                   	pop    eax
c001a224:	5a                   	pop    edx
c001a225:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001a22b:	53                   	push   ebx
c001a22c:	e8 43 fe ff ff       	call   c001a074 <EnvVarContainer::EnvVarContainer(Process*)>
c001a231:	89 1d 54 1b 03 c0    	mov    DWORD PTR ds:0xc0031b54,ebx
c001a237:	83 c4 18             	add    esp,0x18
c001a23a:	5b                   	pop    ebx
c001a23b:	c3                   	ret    

c001a23c <Krnl::flushEnv()>:
c001a23c:	c3                   	ret    

c001a23d <Krnl::getProcessTotalEnvCount(Process*)>:
c001a23d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a241:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a247:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a24d:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a252:	8b 00                	mov    eax,DWORD PTR [eax]
c001a254:	03 01                	add    eax,DWORD PTR [ecx]
c001a256:	85 d2                	test   edx,edx
c001a258:	74 02                	je     c001a25c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a25a:	03 02                	add    eax,DWORD PTR [edx]
c001a25c:	c3                   	ret    

c001a25d <Krnl::getProcessEnvPair(Process*, int)>:
c001a25d:	57                   	push   edi
c001a25e:	8b 0d 54 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b54
c001a264:	56                   	push   esi
c001a265:	85 c9                	test   ecx,ecx
c001a267:	53                   	push   ebx
c001a268:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a26c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a270:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a276:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a27a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a27c:	75 47                	jne    c001a2c5 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a27e:	39 c3                	cmp    ebx,eax
c001a280:	7c 47                	jl     c001a2c9 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a282:	8b 15 58 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b58
c001a288:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a28a:	01 c1                	add    ecx,eax
c001a28c:	39 d9                	cmp    ecx,ebx
c001a28e:	7e 6c                	jle    c001a2fc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a290:	51                   	push   ecx
c001a291:	89 d9                	mov    ecx,ebx
c001a293:	29 c1                	sub    ecx,eax
c001a295:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a298:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a29c:	53                   	push   ebx
c001a29d:	68 0c c4 02 c0       	push   0xc002c40c
c001a2a2:	e8 44 86 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a2a7:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a2ad:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a2af:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a2b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2b7:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2bb:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2be:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2c1:	89 06                	mov    DWORD PTR [esi],eax
c001a2c3:	eb 51                	jmp    c001a316 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a2c5:	39 c3                	cmp    ebx,eax
c001a2c7:	7d 05                	jge    c001a2ce <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a2c9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2cc:	eb 20                	jmp    c001a2ee <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a2ce:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a2d0:	8d 14 07             	lea    edx,[edi+eax*1]
c001a2d3:	39 da                	cmp    edx,ebx
c001a2d5:	7e 04                	jle    c001a2db <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a2d7:	29 c3                	sub    ebx,eax
c001a2d9:	eb 10                	jmp    c001a2eb <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a2db:	8b 0d 58 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b58
c001a2e1:	03 11                	add    edx,DWORD PTR [ecx]
c001a2e3:	39 da                	cmp    edx,ebx
c001a2e5:	7e 15                	jle    c001a2fc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a2e7:	29 c3                	sub    ebx,eax
c001a2e9:	29 fb                	sub    ebx,edi
c001a2eb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2ee:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2f2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2f5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2f8:	89 06                	mov    DWORD PTR [esi],eax
c001a2fa:	eb 1d                	jmp    c001a319 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a2fc:	83 ec 0c             	sub    esp,0xc
c001a2ff:	68 20 c4 02 c0       	push   0xc002c420
c001a304:	e8 18 00 00 00       	call   c001a321 <Krnl::panic(char const*)>
c001a309:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a30f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	89 f0                	mov    eax,esi
c001a31b:	5b                   	pop    ebx
c001a31c:	5e                   	pop    esi
c001a31d:	5f                   	pop    edi
c001a31e:	c2 04 00             	ret    0x4

c001a321 <Krnl::panic(char const*)>:
c001a321:	55                   	push   ebp
c001a322:	89 e5                	mov    ebp,esp
c001a324:	53                   	push   ebx
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a32b:	fa                   	cli    
c001a32c:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001a333:	53                   	push   ebx
c001a334:	c6 05 60 df 02 c0 00 	mov    BYTE PTR ds:0xc002df60,0x0
c001a33b:	68 3a c4 02 c0       	push   0xc002c43a
c001a340:	e8 a6 85 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a345:	58                   	pop    eax
c001a346:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a34b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a351:	e8 b8 63 ff ff       	call   c001070e <setActiveTerminal(VgaText*)>
c001a356:	83 c4 0c             	add    esp,0xc
c001a359:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a35e:	6a 01                	push   0x1
c001a360:	6a 0f                	push   0xf
c001a362:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a368:	e8 4d 60 ff ff       	call   c00103ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a36d:	58                   	pop    eax
c001a36e:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a373:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a379:	e8 d6 65 ff ff       	call   c0010954 <VgaText::clearScreen()>
c001a37e:	58                   	pop    eax
c001a37f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a384:	5a                   	pop    edx
c001a385:	68 53 c4 02 c0       	push   0xc002c453
c001a38a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a390:	e8 4b 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a395:	59                   	pop    ecx
c001a396:	58                   	pop    eax
c001a397:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a39c:	68 f8 c4 02 c0       	push   0xc002c4f8
c001a3a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a7:	e8 34 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3ac:	58                   	pop    eax
c001a3ad:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3b2:	5a                   	pop    edx
c001a3b3:	68 6f c4 02 c0       	push   0xc002c46f
c001a3b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3be:	e8 1d 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3c3:	59                   	pop    ecx
c001a3c4:	58                   	pop    eax
c001a3c5:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3ca:	53                   	push   ebx
c001a3cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d1:	e8 0a 67 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3d6:	58                   	pop    eax
c001a3d7:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3dc:	5a                   	pop    edx
c001a3dd:	68 8f c4 02 c0       	push   0xc002c48f
c001a3e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e8:	e8 f3 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a3ed:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c001a3f2:	83 c4 10             	add    esp,0x10
c001a3f5:	85 c0                	test   eax,eax
c001a3f7:	74 02                	je     c001a3fb <Krnl::panic(char const*)+0xda>
c001a3f9:	ff d0                	call   eax
c001a3fb:	83 ec 0c             	sub    esp,0xc
c001a3fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a401:	e8 9e 32 00 00       	call   c001d6a4 <Thr::getDriverNameFromAddress(unsigned long)>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	89 c3                	mov    ebx,eax
c001a40b:	85 c0                	test   eax,eax
c001a40d:	0f 84 50 02 00 00    	je     c001a663 <Krnl::panic(char const*)+0x342>
c001a413:	83 ec 08             	sub    esp,0x8
c001a416:	8b 15 70 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032570
c001a41c:	68 34 c5 02 c0       	push   0xc002c534
c001a421:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a427:	e8 b4 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a42c:	58                   	pop    eax
c001a42d:	5a                   	pop    edx
c001a42e:	8b 15 70 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032570
c001a434:	68 6f c4 02 c0       	push   0xc002c46f
c001a439:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a43f:	e8 9c 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a444:	59                   	pop    ecx
c001a445:	58                   	pop    eax
c001a446:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a44b:	53                   	push   ebx
c001a44c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a452:	e8 89 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a457:	83 c4 10             	add    esp,0x10
c001a45a:	83 ec 08             	sub    esp,0x8
c001a45d:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a462:	68 8e c4 02 c0       	push   0xc002c48e
c001a467:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a46d:	e8 6e 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a472:	58                   	pop    eax
c001a473:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a478:	5a                   	pop    edx
c001a479:	68 8c c5 02 c0       	push   0xc002c58c
c001a47e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a484:	e8 57 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a489:	59                   	pop    ecx
c001a48a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a48f:	5b                   	pop    ebx
c001a490:	68 cc c5 02 c0       	push   0xc002c5cc
c001a495:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a49b:	e8 40 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a4a0:	58                   	pop    eax
c001a4a1:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a4a6:	5a                   	pop    edx
c001a4a7:	68 7a c4 02 c0       	push   0xc002c47a
c001a4ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b2:	e8 29 66 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a4b7:	59                   	pop    ecx
c001a4b8:	5b                   	pop    ebx
c001a4b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4bc:	68 92 c4 02 c0       	push   0xc002c492
c001a4c1:	e8 25 84 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a4c6:	58                   	pop    eax
c001a4c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4ca:	5a                   	pop    edx
c001a4cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4ce:	68 9b c4 02 c0       	push   0xc002c49b
c001a4d3:	e8 13 84 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a4d8:	59                   	pop    ecx
c001a4d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4dc:	5b                   	pop    ebx
c001a4dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4e2:	68 a4 c4 02 c0       	push   0xc002c4a4
c001a4e7:	e8 ff 83 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a4ec:	58                   	pop    eax
c001a4ed:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a4f2:	5a                   	pop    edx
c001a4f3:	68 10 c6 02 c0       	push   0xc002c610
c001a4f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fe:	e8 dd 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a503:	59                   	pop    ecx
c001a504:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a509:	5b                   	pop    ebx
c001a50a:	68 ad c4 02 c0       	push   0xc002c4ad
c001a50f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a515:	e8 c6 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a51a:	0f 20 c0             	mov    eax,cr0
c001a51d:	5a                   	pop    edx
c001a51e:	59                   	pop    ecx
c001a51f:	50                   	push   eax
c001a520:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a525:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52b:	e8 6a 65 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a530:	5b                   	pop    ebx
c001a531:	58                   	pop    eax
c001a532:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a537:	68 b7 c4 02 c0       	push   0xc002c4b7
c001a53c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a542:	e8 99 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a547:	0f 20 d0             	mov    eax,cr2
c001a54a:	5a                   	pop    edx
c001a54b:	59                   	pop    ecx
c001a54c:	50                   	push   eax
c001a54d:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a552:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a558:	e8 3d 65 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a55d:	5b                   	pop    ebx
c001a55e:	58                   	pop    eax
c001a55f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a564:	68 c1 c4 02 c0       	push   0xc002c4c1
c001a569:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a56f:	e8 6c 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a574:	0f 20 d8             	mov    eax,cr3
c001a577:	5a                   	pop    edx
c001a578:	59                   	pop    ecx
c001a579:	50                   	push   eax
c001a57a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a57f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a585:	e8 10 65 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a58a:	5b                   	pop    ebx
c001a58b:	58                   	pop    eax
c001a58c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a591:	68 d4 c4 02 c0       	push   0xc002c4d4
c001a596:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59c:	e8 3f 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a5a1:	0f 20 e0             	mov    eax,cr4
c001a5a4:	5a                   	pop    edx
c001a5a5:	59                   	pop    ecx
c001a5a6:	50                   	push   eax
c001a5a7:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b2:	e8 e3 64 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a5b7:	5b                   	pop    ebx
c001a5b8:	58                   	pop    eax
c001a5b9:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5be:	68 de c4 02 c0       	push   0xc002c4de
c001a5c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c9:	e8 12 65 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a5ce:	5a                   	pop    edx
c001a5cf:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5d4:	59                   	pop    ecx
c001a5d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5db:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5de:	50                   	push   eax
c001a5df:	e8 b6 64 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a5e4:	5b                   	pop    ebx
c001a5e5:	58                   	pop    eax
c001a5e6:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5eb:	68 ab d3 02 c0       	push   0xc002d3ab
c001a5f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f6:	e8 e5 64 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a5fb:	5a                   	pop    edx
c001a5fc:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a601:	59                   	pop    ecx
c001a602:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a608:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a60b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a60e:	50                   	push   eax
c001a60f:	e8 86 64 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a614:	5b                   	pop    ebx
c001a615:	58                   	pop    eax
c001a616:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a61b:	68 ab d3 02 c0       	push   0xc002d3ab
c001a620:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a626:	e8 b5 64 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a62b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a630:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a633:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a639:	8b 12                	mov    edx,DWORD PTR [edx]
c001a63b:	59                   	pop    ecx
c001a63c:	5b                   	pop    ebx
c001a63d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a640:	50                   	push   eax
c001a641:	e8 54 64 ff ff       	call   c0010a9a <VgaText::putx(unsigned int)>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	b2 fe                	mov    dl,0xfe
c001a64b:	e4 60                	in     al,0x60
c001a64d:	3c 1c                	cmp    al,0x1c
c001a64f:	74 04                	je     c001a655 <Krnl::panic(char const*)+0x334>
c001a651:	3c 5a                	cmp    al,0x5a
c001a653:	75 f6                	jne    c001a64b <Krnl::panic(char const*)+0x32a>
c001a655:	e4 64                	in     al,0x64
c001a657:	a8 02                	test   al,0x2
c001a659:	75 fa                	jne    c001a655 <Krnl::panic(char const*)+0x334>
c001a65b:	88 d0                	mov    al,dl
c001a65d:	e6 64                	out    0x64,al
c001a65f:	fa                   	cli    
c001a660:	f4                   	hlt    
c001a661:	eb e8                	jmp    c001a64b <Krnl::panic(char const*)+0x32a>
c001a663:	50                   	push   eax
c001a664:	50                   	push   eax
c001a665:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a66a:	68 60 c5 02 c0       	push   0xc002c560
c001a66f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a675:	e8 66 64 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a67a:	58                   	pop    eax
c001a67b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a680:	5a                   	pop    edx
c001a681:	68 6f c4 02 c0       	push   0xc002c46f
c001a686:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68c:	e8 4f 64 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a691:	59                   	pop    ecx
c001a692:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a697:	5b                   	pop    ebx
c001a698:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a69b:	83 c0 0c             	add    eax,0xc
c001a69e:	50                   	push   eax
c001a69f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a6a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6aa:	e8 31 64 ff ff       	call   c0010ae0 <VgaText::puts(char const*)>
c001a6af:	83 c4 10             	add    esp,0x10
c001a6b2:	e9 a3 fd ff ff       	jmp    c001a45a <Krnl::panic(char const*)+0x139>

c001a6b7 <Net::switchEndian16(unsigned short)>:
c001a6b7:	83 ec 04             	sub    esp,0x4
c001a6ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6be:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6c2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6c6:	c1 f8 08             	sar    eax,0x8
c001a6c9:	89 c2                	mov    edx,eax
c001a6cb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6cf:	c1 e0 08             	shl    eax,0x8
c001a6d2:	09 d0                	or     eax,edx
c001a6d4:	83 c4 04             	add    esp,0x4
c001a6d7:	c3                   	ret    

c001a6d8 <Net::switchEndian32(unsigned int)>:
c001a6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6dc:	c1 e8 18             	shr    eax,0x18
c001a6df:	89 c2                	mov    edx,eax
c001a6e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e5:	c1 e0 08             	shl    eax,0x8
c001a6e8:	25 00 00 ff 00       	and    eax,0xff0000
c001a6ed:	09 c2                	or     edx,eax
c001a6ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f3:	c1 e8 08             	shr    eax,0x8
c001a6f6:	25 00 ff 00 00       	and    eax,0xff00
c001a6fb:	09 c2                	or     edx,eax
c001a6fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a701:	c1 e0 18             	shl    eax,0x18
c001a704:	09 d0                	or     eax,edx
c001a706:	c3                   	ret    

c001a707 <Net::crc32Calc(unsigned char*, int)>:
c001a707:	83 ec 10             	sub    esp,0x10
c001a70a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a70f:	75 07                	jne    c001a718 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a711:	b8 00 00 00 00       	mov    eax,0x0
c001a716:	eb 7c                	jmp    c001a794 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a718:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a71d:	7f 07                	jg     c001a726 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a71f:	b8 00 00 00 00       	mov    eax,0x0
c001a724:	eb 6e                	jmp    c001a794 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a726:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a72e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a73a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a73e:	7d 4e                	jge    c001a78e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a740:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a744:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a748:	01 d0                	add    eax,edx
c001a74a:	8a 00                	mov    al,BYTE PTR [eax]
c001a74c:	0f b6 c0             	movzx  eax,al
c001a74f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a753:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a75b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a760:	7f 26                	jg     c001a788 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a766:	83 e0 01             	and    eax,0x1
c001a769:	74 0d                	je     c001a778 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a76b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a76f:	d1 e8                	shr    eax,1
c001a771:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a776:	eb 06                	jmp    c001a77e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77c:	d1 e8                	shr    eax,1
c001a77e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a782:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a786:	eb d3                	jmp    c001a75b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a788:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a78c:	eb a8                	jmp    c001a736 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a792:	f7 d0                	not    eax
c001a794:	83 c4 10             	add    esp,0x10
c001a797:	c3                   	ret    

c001a798 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a798:	57                   	push   edi
c001a799:	56                   	push   esi
c001a79a:	53                   	push   ebx
c001a79b:	83 ec 60             	sub    esp,0x60
c001a79e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7a5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7a9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a7b1:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a7b6:	7f 1a                	jg     c001a7d2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a7b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7bf:	8d 50 01             	lea    edx,[eax+0x1]
c001a7c2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7c9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a7cc:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a7d0:	eb df                	jmp    c001a7b1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a7d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7d9:	8d 50 01             	lea    edx,[eax+0x1]
c001a7dc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7e3:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a7e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7f1:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a7f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7f9:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a801:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a80d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a815:	89 c6                	mov    esi,eax
c001a817:	89 d7                	mov    edi,edx
c001a819:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a81b:	89 c8                	mov    eax,ecx
c001a81d:	89 fa                	mov    edx,edi
c001a81f:	89 f3                	mov    ebx,esi
c001a821:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a825:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a829:	89 04 24             	mov    DWORD PTR [esp],eax
c001a82c:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a834:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a83b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a83f:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a843:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a847:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a84f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a853:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a857:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a85b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a85f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a863:	89 c6                	mov    esi,eax
c001a865:	89 d7                	mov    edi,edx
c001a867:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a869:	89 c8                	mov    eax,ecx
c001a86b:	89 fa                	mov    edx,edi
c001a86d:	89 f3                	mov    ebx,esi
c001a86f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a873:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a877:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a87b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a883:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a88a:	0f b7 c0             	movzx  eax,ax
c001a88d:	c1 f8 08             	sar    eax,0x8
c001a890:	89 c1                	mov    ecx,eax
c001a892:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a899:	8d 50 01             	lea    edx,[eax+0x1]
c001a89c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8a3:	88 ca                	mov    dl,cl
c001a8a5:	88 10                	mov    BYTE PTR [eax],dl
c001a8a7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a8ae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8b5:	8d 48 01             	lea    ecx,[eax+0x1]
c001a8b8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a8bf:	88 10                	mov    BYTE PTR [eax],dl
c001a8c1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8c5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a8c9:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a8d0:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a8d4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a8d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a8dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8e8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a8ec:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a8f0:	89 c6                	mov    esi,eax
c001a8f2:	89 d7                	mov    edi,edx
c001a8f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8f6:	89 c8                	mov    eax,ecx
c001a8f8:	89 fa                	mov    edx,edi
c001a8fa:	89 f3                	mov    ebx,esi
c001a8fc:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a900:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a904:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a908:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a90c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a913:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a91a:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a91e:	50                   	push   eax
c001a91f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a923:	e8 df fd ff ff       	call   c001a707 <Net::crc32Calc(unsigned char*, int)>
c001a928:	83 c4 08             	add    esp,0x8
c001a92b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a92f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a933:	c1 e8 18             	shr    eax,0x18
c001a936:	89 c1                	mov    ecx,eax
c001a938:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a93f:	8d 50 01             	lea    edx,[eax+0x1]
c001a942:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a949:	88 ca                	mov    dl,cl
c001a94b:	88 10                	mov    BYTE PTR [eax],dl
c001a94d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a951:	c1 e8 10             	shr    eax,0x10
c001a954:	89 c1                	mov    ecx,eax
c001a956:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a95d:	8d 50 01             	lea    edx,[eax+0x1]
c001a960:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a967:	88 ca                	mov    dl,cl
c001a969:	88 10                	mov    BYTE PTR [eax],dl
c001a96b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a96f:	c1 e8 08             	shr    eax,0x8
c001a972:	89 c1                	mov    ecx,eax
c001a974:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a97b:	8d 50 01             	lea    edx,[eax+0x1]
c001a97e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a985:	88 ca                	mov    dl,cl
c001a987:	88 10                	mov    BYTE PTR [eax],dl
c001a989:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a990:	8d 50 01             	lea    edx,[eax+0x1]
c001a993:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a99a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a99e:	88 10                	mov    BYTE PTR [eax],dl
c001a9a0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9a4:	83 c4 60             	add    esp,0x60
c001a9a7:	5b                   	pop    ebx
c001a9a8:	5e                   	pop    esi
c001a9a9:	5f                   	pop    edi
c001a9aa:	c3                   	ret    

c001a9ab <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a9ab:	57                   	push   edi
c001a9ac:	56                   	push   esi
c001a9ad:	53                   	push   ebx
c001a9ae:	83 ec 70             	sub    esp,0x70
c001a9b1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9b8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a9bc:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9c4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9cb:	83 c0 0e             	add    eax,0xe
c001a9ce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9d2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9dd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a9e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9f5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a9f9:	89 c6                	mov    esi,eax
c001a9fb:	89 d7                	mov    edi,edx
c001a9fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9ff:	89 c8                	mov    eax,ecx
c001aa01:	89 fa                	mov    edx,edi
c001aa03:	89 f3                	mov    ebx,esi
c001aa05:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa09:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa11:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa20:	83 c0 08             	add    eax,0x8
c001aa23:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa32:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa3a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa42:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa46:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa4a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa4e:	89 c6                	mov    esi,eax
c001aa50:	89 d7                	mov    edi,edx
c001aa52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa54:	89 c8                	mov    eax,ecx
c001aa56:	89 fa                	mov    edx,edi
c001aa58:	89 f3                	mov    ebx,esi
c001aa5a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa66:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa75:	8d 50 01             	lea    edx,[eax+0x1]
c001aa78:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa7f:	8a 00                	mov    al,BYTE PTR [eax]
c001aa81:	0f b6 c0             	movzx  eax,al
c001aa84:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa9a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa9c:	0f b6 c0             	movzx  eax,al
c001aa9f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aaa4:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aaa9:	c1 e0 08             	shl    eax,0x8
c001aaac:	89 c2                	mov    edx,eax
c001aaae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aab2:	09 d0                	or     eax,edx
c001aab4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aabb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aabf:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aac7:	75 46                	jne    c001ab0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aac9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aad0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aad3:	66 3d dc 05          	cmp    ax,0x5dc
c001aad7:	77 16                	ja     c001aaef <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aad9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aae0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aae3:	0f b7 c0             	movzx  eax,ax
c001aae6:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aaed:	eb 20                	jmp    c001ab0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aaef:	83 ec 0c             	sub    esp,0xc
c001aaf2:	68 38 c6 02 c0       	push   0xc002c638
c001aaf7:	e8 ef 7d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab06:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab0a:	e9 17 01 00 00       	jmp    c001ac26 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab0f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab16:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab1d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab23:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab46:	89 c6                	mov    esi,eax
c001ab48:	89 d7                	mov    edi,edx
c001ab4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab4c:	89 c8                	mov    eax,ecx
c001ab4e:	89 fa                	mov    edx,edi
c001ab50:	89 f3                	mov    ebx,esi
c001ab52:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab5d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab64:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ab6b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab72:	8d 50 01             	lea    edx,[eax+0x1]
c001ab75:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab7c:	8a 00                	mov    al,BYTE PTR [eax]
c001ab7e:	0f b6 c0             	movzx  eax,al
c001ab81:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab85:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab8c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab96:	8a 00                	mov    al,BYTE PTR [eax]
c001ab98:	0f b6 c0             	movzx  eax,al
c001ab9b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ab9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aba6:	8d 50 01             	lea    edx,[eax+0x1]
c001aba9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abb0:	8a 00                	mov    al,BYTE PTR [eax]
c001abb2:	0f b6 c0             	movzx  eax,al
c001abb5:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001abb9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abc0:	8d 50 01             	lea    edx,[eax+0x1]
c001abc3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abca:	8a 00                	mov    al,BYTE PTR [eax]
c001abcc:	0f b6 c0             	movzx  eax,al
c001abcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001abd3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001abd7:	c1 e0 18             	shl    eax,0x18
c001abda:	89 c2                	mov    edx,eax
c001abdc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001abe0:	c1 e0 10             	shl    eax,0x10
c001abe3:	09 c2                	or     edx,eax
c001abe5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abe9:	c1 e0 08             	shl    eax,0x8
c001abec:	09 d0                	or     eax,edx
c001abee:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001abf2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001abf6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abfd:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac01:	83 e8 04             	sub    eax,0x4
c001ac04:	83 ec 08             	sub    esp,0x8
c001ac07:	50                   	push   eax
c001ac08:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac0c:	e8 f6 fa ff ff       	call   c001a707 <Net::crc32Calc(unsigned char*, int)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac18:	0f 94 c2             	sete   dl
c001ac1b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac22:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac25:	90                   	nop
c001ac26:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac2d:	83 c4 70             	add    esp,0x70
c001ac30:	5b                   	pop    ebx
c001ac31:	5e                   	pop    esi
c001ac32:	5f                   	pop    edi
c001ac33:	c2 04 00             	ret    0x4

c001ac36 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac36:	55                   	push   ebp
c001ac37:	57                   	push   edi
c001ac38:	56                   	push   esi
c001ac39:	53                   	push   ebx
c001ac3a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac40:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac47:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac49:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac4c:	80 fb 40             	cmp    bl,0x40
c001ac4f:	75 1b                	jne    c001ac6c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac51:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac53:	84 d2                	test   dl,dl
c001ac55:	0f 84 f1 00 00 00    	je     c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac5b:	8d 46 01             	lea    eax,[esi+0x1]
c001ac5e:	80 fa 3a             	cmp    dl,0x3a
c001ac61:	74 04                	je     c001ac67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac63:	89 c6                	mov    esi,eax
c001ac65:	eb ea                	jmp    c001ac51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac67:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac6a:	89 c6                	mov    esi,eax
c001ac6c:	50                   	push   eax
c001ac6d:	6a 40                	push   0x40
c001ac6f:	6a 00                	push   0x0
c001ac71:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac75:	50                   	push   eax
c001ac76:	e8 d5 5a fe ff       	call   c0000750 <memset>
c001ac7b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac82:	31 c0                	xor    eax,eax
c001ac84:	83 c4 10             	add    esp,0x10
c001ac87:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac89:	84 c9                	test   cl,cl
c001ac8b:	0f 84 bb 00 00 00    	je     c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac91:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac96:	0f 8f b0 00 00 00    	jg     c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac9c:	80 f9 0a             	cmp    cl,0xa
c001ac9f:	0f 85 98 00 00 00    	jne    c001ad3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aca5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001acaa:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001acae:	a8 df                	test   al,0xdf
c001acb0:	0f 94 c1             	sete   cl
c001acb3:	3c 23                	cmp    al,0x23
c001acb5:	0f 94 c2             	sete   dl
c001acb8:	08 d1                	or     cl,dl
c001acba:	75 4a                	jne    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acbc:	8d 50 f7             	lea    edx,[eax-0x9]
c001acbf:	80 fa 01             	cmp    dl,0x1
c001acc2:	76 42                	jbe    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acc4:	3c 5b                	cmp    al,0x5b
c001acc6:	75 42                	jne    c001ad0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acc8:	80 fb 40             	cmp    bl,0x40
c001accb:	75 39                	jne    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001accd:	83 ec 0c             	sub    esp,0xc
c001acd0:	8d 54 24 65          	lea    edx,[esp+0x65]
c001acd4:	52                   	push   edx
c001acd5:	e8 92 5a fe ff       	call   c000076c <strlen>
c001acda:	83 c4 10             	add    esp,0x10
c001acdd:	83 f8 3f             	cmp    eax,0x3f
c001ace0:	77 6a                	ja     c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ace2:	50                   	push   eax
c001ace3:	50                   	push   eax
c001ace4:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ace8:	52                   	push   edx
c001ace9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aced:	52                   	push   edx
c001acee:	e8 19 5b fe ff       	call   c000080c <strcpy>
c001acf3:	58                   	pop    eax
c001acf4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acf8:	52                   	push   edx
c001acf9:	e8 6e 5a fe ff       	call   c000076c <strlen>
c001acfe:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad03:	83 c4 10             	add    esp,0x10
c001ad06:	31 d2                	xor    edx,edx
c001ad08:	eb 3a                	jmp    c001ad44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad0a:	80 fb 40             	cmp    bl,0x40
c001ad0d:	74 06                	je     c001ad15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad0f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad13:	eb 20                	jmp    c001ad35 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad15:	50                   	push   eax
c001ad16:	50                   	push   eax
c001ad17:	55                   	push   ebp
c001ad18:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad1c:	50                   	push   eax
c001ad1d:	e8 76 5b fe ff       	call   c0000898 <strcmp>
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	85 c0                	test   eax,eax
c001ad27:	75 dd                	jne    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad29:	eb e4                	jmp    c001ad0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad2b:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2e:	80 f9 3d             	cmp    cl,0x3d
c001ad31:	74 1d                	je     c001ad50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad33:	89 d0                	mov    eax,edx
c001ad35:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad37:	84 c9                	test   cl,cl
c001ad39:	75 f0                	jne    c001ad2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad3b:	eb 0f                	jmp    c001ad4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad3d:	8d 50 01             	lea    edx,[eax+0x1]
c001ad40:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad44:	47                   	inc    edi
c001ad45:	89 d0                	mov    eax,edx
c001ad47:	e9 3b ff ff ff       	jmp    c001ac87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad4c:	31 c0                	xor    eax,eax
c001ad4e:	eb 33                	jmp    c001ad83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad54:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad57:	50                   	push   eax
c001ad58:	50                   	push   eax
c001ad59:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad5d:	50                   	push   eax
c001ad5e:	56                   	push   esi
c001ad5f:	e8 34 5b fe ff       	call   c0000898 <strcmp>
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	85 c0                	test   eax,eax
c001ad69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad6d:	75 97                	jne    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad6f:	51                   	push   ecx
c001ad70:	51                   	push   ecx
c001ad71:	52                   	push   edx
c001ad72:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad79:	e8 8e 5a fe ff       	call   c000080c <strcpy>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	b0 01                	mov    al,0x1
c001ad83:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad89:	5b                   	pop    ebx
c001ad8a:	5e                   	pop    esi
c001ad8b:	5f                   	pop    edi
c001ad8c:	5d                   	pop    ebp
c001ad8d:	c3                   	ret    

c001ad8e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad8e:	57                   	push   edi
c001ad8f:	56                   	push   esi
c001ad90:	53                   	push   ebx
c001ad91:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad97:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad9e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ada5:	53                   	push   ebx
c001ada6:	e8 c1 59 fe ff       	call   c000076c <strlen>
c001adab:	89 34 24             	mov    DWORD PTR [esp],esi
c001adae:	89 c7                	mov    edi,eax
c001adb0:	e8 b7 59 fe ff       	call   c000076c <strlen>
c001adb5:	83 c4 10             	add    esp,0x10
c001adb8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001adbc:	3d ff 00 00 00       	cmp    eax,0xff
c001adc1:	0f 87 d3 00 00 00    	ja     c001ae9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adc7:	57                   	push   edi
c001adc8:	57                   	push   edi
c001adc9:	56                   	push   esi
c001adca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adce:	56                   	push   esi
c001adcf:	e8 38 5a fe ff       	call   c000080c <strcpy>
c001add4:	58                   	pop    eax
c001add5:	5a                   	pop    edx
c001add6:	68 8d cb 02 c0       	push   0xc002cb8d
c001addb:	56                   	push   esi
c001addc:	e8 6b 5b fe ff       	call   c000094c <strcat>
c001ade1:	59                   	pop    ecx
c001ade2:	5f                   	pop    edi
c001ade3:	53                   	push   ebx
c001ade4:	56                   	push   esi
c001ade5:	e8 62 5b fe ff       	call   c000094c <strcat>
c001adea:	58                   	pop    eax
c001adeb:	5a                   	pop    edx
c001adec:	68 84 c6 02 c0       	push   0xc002c684
c001adf1:	56                   	push   esi
c001adf2:	e8 55 5b fe ff       	call   c000094c <strcat>
c001adf7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001adfe:	e8 89 4a ff ff       	call   c000f88c <malloc>
c001ae03:	83 c4 0c             	add    esp,0xc
c001ae06:	89 c3                	mov    ebx,eax
c001ae08:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001ae0e:	56                   	push   esi
c001ae0f:	50                   	push   eax
c001ae10:	e8 35 80 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001ae15:	83 c4 10             	add    esp,0x10
c001ae18:	85 db                	test   ebx,ebx
c001ae1a:	74 7e                	je     c001ae9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae1c:	51                   	push   ecx
c001ae1d:	51                   	push   ecx
c001ae1e:	6a 01                	push   0x1
c001ae20:	53                   	push   ebx
c001ae21:	e8 88 80 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	85 c0                	test   eax,eax
c001ae2b:	74 08                	je     c001ae35 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae2d:	83 ec 0c             	sub    esp,0xc
c001ae30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae32:	53                   	push   ebx
c001ae33:	eb 5f                	jmp    c001ae94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae35:	52                   	push   edx
c001ae36:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae3a:	50                   	push   eax
c001ae3b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae3f:	50                   	push   eax
c001ae40:	53                   	push   ebx
c001ae41:	e8 14 83 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001ae46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae4a:	83 c4 10             	add    esp,0x10
c001ae4d:	89 c1                	mov    ecx,eax
c001ae4f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae53:	74 31                	je     c001ae86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae55:	83 ec 0c             	sub    esp,0xc
c001ae58:	50                   	push   eax
c001ae59:	e8 2e 4a ff ff       	call   c000f88c <malloc>
c001ae5e:	89 c6                	mov    esi,eax
c001ae60:	58                   	pop    eax
c001ae61:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae63:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae67:	52                   	push   edx
c001ae68:	56                   	push   esi
c001ae69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae71:	53                   	push   ebx
c001ae72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae75:	83 c4 20             	add    esp,0x20
c001ae78:	85 c0                	test   eax,eax
c001ae7a:	75 0a                	jne    c001ae86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae80:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae84:	74 18                	je     c001ae9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae86:	83 ec 0c             	sub    esp,0xc
c001ae89:	53                   	push   ebx
c001ae8a:	e8 7d 80 ff ff       	call   c0012f0c <File::close()>
c001ae8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	31 c0                	xor    eax,eax
c001ae9c:	eb 3b                	jmp    c001aed9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae9e:	83 ec 0c             	sub    esp,0xc
c001aea1:	53                   	push   ebx
c001aea2:	e8 65 80 ff ff       	call   c0012f0c <File::close()>
c001aea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeaf:	83 c4 0c             	add    esp,0xc
c001aeb2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aeb9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aec0:	56                   	push   esi
c001aec1:	e8 70 fd ff ff       	call   c001ac36 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aec6:	89 34 24             	mov    DWORD PTR [esp],esi
c001aec9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aecd:	e8 ca 49 ff ff       	call   c000f89c <free>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aed9:	81 c4 20 01 00 00    	add    esp,0x120
c001aedf:	5b                   	pop    ebx
c001aee0:	5e                   	pop    esi
c001aee1:	5f                   	pop    edi
c001aee2:	c3                   	ret    

c001aee3 <Reg::getLine(char*, char*, char*)>:
c001aee3:	57                   	push   edi
c001aee4:	56                   	push   esi
c001aee5:	53                   	push   ebx
c001aee6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aeea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aeee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aef2:	57                   	push   edi
c001aef3:	56                   	push   esi
c001aef4:	53                   	push   ebx
c001aef5:	68 89 c6 02 c0       	push   0xc002c689
c001aefa:	e8 8f fe ff ff       	call   c001ad8e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aeff:	83 c4 10             	add    esp,0x10
c001af02:	84 c0                	test   al,al
c001af04:	75 10                	jne    c001af16 <Reg::getLine(char*, char*, char*)+0x33>
c001af06:	57                   	push   edi
c001af07:	56                   	push   esi
c001af08:	53                   	push   ebx
c001af09:	68 ae c6 02 c0       	push   0xc002c6ae
c001af0e:	e8 7b fe ff ff       	call   c001ad8e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	5b                   	pop    ebx
c001af17:	5e                   	pop    esi
c001af18:	5f                   	pop    edi
c001af19:	c3                   	ret    

c001af1a <Reg::readInt(char*, char*, int*)>:
c001af1a:	55                   	push   ebp
c001af1b:	57                   	push   edi
c001af1c:	56                   	push   esi
c001af1d:	53                   	push   ebx
c001af1e:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af24:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af28:	57                   	push   edi
c001af29:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af30:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af37:	e8 a7 ff ff ff       	call   c001aee3 <Reg::getLine(char*, char*, char*)>
c001af3c:	83 c4 10             	add    esp,0x10
c001af3f:	84 c0                	test   al,al
c001af41:	0f 84 b3 00 00 00    	je     c001affa <Reg::readInt(char*, char*, int*)+0xe0>
c001af47:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af4b:	80 fa 2b             	cmp    dl,0x2b
c001af4e:	74 0c                	je     c001af5c <Reg::readInt(char*, char*, int*)+0x42>
c001af50:	80 fa 2d             	cmp    dl,0x2d
c001af53:	75 0e                	jne    c001af63 <Reg::readInt(char*, char*, int*)+0x49>
c001af55:	ba 01 00 00 00       	mov    edx,0x1
c001af5a:	eb 0b                	jmp    c001af67 <Reg::readInt(char*, char*, int*)+0x4d>
c001af5c:	ba 01 00 00 00       	mov    edx,0x1
c001af61:	eb 02                	jmp    c001af65 <Reg::readInt(char*, char*, int*)+0x4b>
c001af63:	31 d2                	xor    edx,edx
c001af65:	31 c0                	xor    eax,eax
c001af67:	be 0a 00 00 00       	mov    esi,0xa
c001af6c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af71:	75 20                	jne    c001af93 <Reg::readInt(char*, char*, int*)+0x79>
c001af73:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af77:	80 f9 78             	cmp    cl,0x78
c001af7a:	75 0a                	jne    c001af86 <Reg::readInt(char*, char*, int*)+0x6c>
c001af7c:	83 c2 02             	add    edx,0x2
c001af7f:	be 10 00 00 00       	mov    esi,0x10
c001af84:	eb 0d                	jmp    c001af93 <Reg::readInt(char*, char*, int*)+0x79>
c001af86:	80 f9 62             	cmp    cl,0x62
c001af89:	75 08                	jne    c001af93 <Reg::readInt(char*, char*, int*)+0x79>
c001af8b:	83 c2 02             	add    edx,0x2
c001af8e:	be 02 00 00 00       	mov    esi,0x2
c001af93:	01 d7                	add    edi,edx
c001af95:	31 d2                	xor    edx,edx
c001af97:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af99:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af9d:	80 fb 0d             	cmp    bl,0xd
c001afa0:	0f 94 c3             	sete   bl
c001afa3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afa8:	0f 94 c1             	sete   cl
c001afab:	08 cb                	or     bl,cl
c001afad:	75 3a                	jne    c001afe9 <Reg::readInt(char*, char*, int*)+0xcf>
c001afaf:	0f af d6             	imul   edx,esi
c001afb2:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001afb7:	83 fe 10             	cmp    esi,0x10
c001afba:	75 26                	jne    c001afe2 <Reg::readInt(char*, char*, int*)+0xc8>
c001afbc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afc0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afc3:	89 e9                	mov    ecx,ebp
c001afc5:	80 f9 05             	cmp    cl,0x5
c001afc8:	77 06                	ja     c001afd0 <Reg::readInt(char*, char*, int*)+0xb6>
c001afca:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afce:	eb 16                	jmp    c001afe6 <Reg::readInt(char*, char*, int*)+0xcc>
c001afd0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afd4:	83 e9 61             	sub    ecx,0x61
c001afd7:	80 f9 05             	cmp    cl,0x5
c001afda:	77 06                	ja     c001afe2 <Reg::readInt(char*, char*, int*)+0xc8>
c001afdc:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afe0:	eb 04                	jmp    c001afe6 <Reg::readInt(char*, char*, int*)+0xcc>
c001afe2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afe6:	47                   	inc    edi
c001afe7:	eb ae                	jmp    c001af97 <Reg::readInt(char*, char*, int*)+0x7d>
c001afe9:	84 c0                	test   al,al
c001afeb:	74 02                	je     c001afef <Reg::readInt(char*, char*, int*)+0xd5>
c001afed:	f7 da                	neg    edx
c001afef:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aff6:	89 10                	mov    DWORD PTR [eax],edx
c001aff8:	88 d8                	mov    al,bl
c001affa:	81 c4 ec 00 00 00    	add    esp,0xec
c001b000:	5b                   	pop    ebx
c001b001:	5e                   	pop    esi
c001b002:	5f                   	pop    edi
c001b003:	5d                   	pop    ebp
c001b004:	c3                   	ret    

c001b005 <Reg::readString(char*, char*, char*, int)>:
c001b005:	57                   	push   edi
c001b006:	56                   	push   esi
c001b007:	53                   	push   ebx
c001b008:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b00e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b015:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b019:	57                   	push   edi
c001b01a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b021:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b028:	e8 b6 fe ff ff       	call   c001aee3 <Reg::getLine(char*, char*, char*)>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	89 c6                	mov    esi,eax
c001b032:	84 c0                	test   al,al
c001b034:	74 44                	je     c001b07a <Reg::readString(char*, char*, char*, int)+0x75>
c001b036:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b03d:	31 c0                	xor    eax,eax
c001b03f:	4a                   	dec    edx
c001b040:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b043:	84 c9                	test   cl,cl
c001b045:	74 0f                	je     c001b056 <Reg::readString(char*, char*, char*, int)+0x51>
c001b047:	39 c2                	cmp    edx,eax
c001b049:	7e 0b                	jle    c001b056 <Reg::readString(char*, char*, char*, int)+0x51>
c001b04b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b04e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b053:	40                   	inc    eax
c001b054:	eb ea                	jmp    c001b040 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b056:	83 ec 0c             	sub    esp,0xc
c001b059:	53                   	push   ebx
c001b05a:	e8 0d 57 fe ff       	call   c000076c <strlen>
c001b05f:	83 c4 10             	add    esp,0x10
c001b062:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b067:	75 11                	jne    c001b07a <Reg::readString(char*, char*, char*, int)+0x75>
c001b069:	83 ec 0c             	sub    esp,0xc
c001b06c:	53                   	push   ebx
c001b06d:	e8 fa 56 fe ff       	call   c000076c <strlen>
c001b072:	83 c4 10             	add    esp,0x10
c001b075:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b07a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b080:	89 f0                	mov    eax,esi
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	5f                   	pop    edi
c001b085:	c3                   	ret    

c001b086 <Reg::readBool(char*, char*, bool*)>:
c001b086:	83 ec 20             	sub    esp,0x20
c001b089:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b08d:	50                   	push   eax
c001b08e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b096:	e8 7f fe ff ff       	call   c001af1a <Reg::readInt(char*, char*, int*)>
c001b09b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0a0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0a4:	0f 95 02             	setne  BYTE PTR [edx]
c001b0a7:	83 c4 2c             	add    esp,0x2c
c001b0aa:	c3                   	ret    

c001b0ab <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0ab:	53                   	push   ebx
c001b0ac:	83 ec 1c             	sub    esp,0x1c
c001b0af:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0b3:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0b7:	50                   	push   eax
c001b0b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c0:	e8 c1 ff ff ff       	call   c001b086 <Reg::readBool(char*, char*, bool*)>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	84 c0                	test   al,al
c001b0ca:	74 04                	je     c001b0d0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0cc:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0d0:	88 d8                	mov    al,bl
c001b0d2:	83 c4 18             	add    esp,0x18
c001b0d5:	5b                   	pop    ebx
c001b0d6:	c3                   	ret    

c001b0d7 <Reg::readIntWithDefault(char*, char*, int)>:
c001b0d7:	53                   	push   ebx
c001b0d8:	83 ec 1c             	sub    esp,0x1c
c001b0db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0df:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0e3:	50                   	push   eax
c001b0e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0ec:	e8 29 fe ff ff       	call   c001af1a <Reg::readInt(char*, char*, int*)>
c001b0f1:	83 c4 10             	add    esp,0x10
c001b0f4:	84 c0                	test   al,al
c001b0f6:	74 04                	je     c001b0fc <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0fc:	89 d8                	mov    eax,ebx
c001b0fe:	83 c4 18             	add    esp,0x18
c001b101:	5b                   	pop    ebx
c001b102:	c3                   	ret    

c001b103 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b103:	57                   	push   edi
c001b104:	56                   	push   esi
c001b105:	56                   	push   esi
c001b106:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b10a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b10e:	56                   	push   esi
c001b10f:	57                   	push   edi
c001b110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b118:	e8 e8 fe ff ff       	call   c001b005 <Reg::readString(char*, char*, char*, int)>
c001b11d:	83 c4 10             	add    esp,0x10
c001b120:	84 c0                	test   al,al
c001b122:	75 1a                	jne    c001b13e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b124:	51                   	push   ecx
c001b125:	56                   	push   esi
c001b126:	6a 00                	push   0x0
c001b128:	57                   	push   edi
c001b129:	e8 22 56 fe ff       	call   c0000750 <memset>
c001b12e:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b131:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b135:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b13e:	89 f8                	mov    eax,edi
c001b140:	5a                   	pop    edx
c001b141:	5e                   	pop    esi
c001b142:	5f                   	pop    edi
c001b143:	c3                   	ret    

c001b144 <Sys::eject(regs*)>:
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	83 ca ff             	or     edx,0xffffffff
c001b14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b151:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b156:	83 e9 41             	sub    ecx,0x41
c001b159:	83 f9 19             	cmp    ecx,0x19
c001b15c:	77 18                	ja     c001b176 <Sys::eject(regs*)+0x32>
c001b15e:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c001b165:	85 c9                	test   ecx,ecx
c001b167:	74 0d                	je     c001b176 <Sys::eject(regs*)+0x32>
c001b169:	83 ec 0c             	sub    esp,0xc
c001b16c:	51                   	push   ecx
c001b16d:	e8 8c b0 ff ff       	call   c00161fe <LogicalDisk::eject()>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	99                   	cdq    
c001b176:	83 c4 0c             	add    esp,0xc
c001b179:	c3                   	ret    

c001b17a <Sys::exit(regs*)>:
c001b17a:	83 ec 18             	sub    esp,0x18
c001b17d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b181:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b184:	e8 7e 38 00 00       	call   c001ea07 <terminateTask(int)>
c001b189:	83 c8 ff             	or     eax,0xffffffff
c001b18c:	83 c4 1c             	add    esp,0x1c
c001b18f:	89 c2                	mov    edx,eax
c001b191:	c3                   	ret    

c001b192 <Sys::getCwd(regs*)>:
c001b192:	83 ec 10             	sub    esp,0x10
c001b195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b199:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b19c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b19f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1a7:	e8 a0 7a ff ff       	call   c0012c4c <Fs::getcwd(Process*, char*, int)>
c001b1ac:	83 c4 1c             	add    esp,0x1c
c001b1af:	99                   	cdq    
c001b1b0:	c3                   	ret    

c001b1b1 <Sys::getPID(regs*)>:
c001b1b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1bb:	99                   	cdq    
c001b1bc:	c3                   	ret    

c001b1bd <Sys::getRAMData(regs*)>:
c001b1bd:	8b 0d 74 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f074
c001b1c3:	6b 05 70 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f070,0x64
c001b1ca:	99                   	cdq    
c001b1cb:	f7 f9                	idiv   ecx
c001b1cd:	c1 e0 18             	shl    eax,0x18
c001b1d0:	09 c8                	or     eax,ecx
c001b1d2:	99                   	cdq    
c001b1d3:	c3                   	ret    

c001b1d4 <Sys::getVGAPtr(regs*)>:
c001b1d4:	55                   	push   ebp
c001b1d5:	57                   	push   edi
c001b1d6:	56                   	push   esi
c001b1d7:	53                   	push   ebx
c001b1d8:	83 ec 18             	sub    esp,0x18
c001b1db:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1df:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b1e2:	e8 02 33 00 00       	call   c001e4e9 <Thr::processFromPID(int)>
c001b1e7:	83 c4 10             	add    esp,0x10
c001b1ea:	89 c1                	mov    ecx,eax
c001b1ec:	b8 01 00 00 00       	mov    eax,0x1
c001b1f1:	85 c9                	test   ecx,ecx
c001b1f3:	74 59                	je     c001b24e <Sys::getVGAPtr(regs*)+0x7a>
c001b1f5:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b1fb:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b1ff:	74 0c                	je     c001b20d <Sys::getVGAPtr(regs*)+0x39>
c001b201:	83 ec 0c             	sub    esp,0xc
c001b204:	53                   	push   ebx
c001b205:	e8 04 55 ff ff       	call   c001070e <setActiveTerminal(VgaText*)>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b210:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b213:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b218:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b21a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b21d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b220:	81 c3 82 00 00 00    	add    ebx,0x82
c001b226:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b22c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b22f:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b232:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b238:	50                   	push   eax
c001b239:	50                   	push   eax
c001b23a:	53                   	push   ebx
c001b23b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b23e:	05 a8 0f 00 00       	add    eax,0xfa8
c001b243:	50                   	push   eax
c001b244:	e8 c3 55 fe ff       	call   c000080c <strcpy>
c001b249:	83 c4 10             	add    esp,0x10
c001b24c:	31 c0                	xor    eax,eax
c001b24e:	83 c4 0c             	add    esp,0xc
c001b251:	31 d2                	xor    edx,edx
c001b253:	5b                   	pop    ebx
c001b254:	5e                   	pop    esi
c001b255:	5f                   	pop    edi
c001b256:	5d                   	pop    ebp
c001b257:	c3                   	ret    

c001b258 <Sys::loadDLL(regs*)>:
c001b258:	56                   	push   esi
c001b259:	53                   	push   ebx
c001b25a:	31 d2                	xor    edx,edx
c001b25c:	51                   	push   ecx
c001b25d:	b8 01 00 00 00       	mov    eax,0x1
c001b262:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b266:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b26a:	0f 84 8c 00 00 00    	je     c001b2fc <Sys::loadDLL(regs*)+0xa4>
c001b270:	83 ec 0c             	sub    esp,0xc
c001b273:	68 14 01 00 00       	push   0x114
c001b278:	e8 0f 46 ff ff       	call   c000f88c <malloc>
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	89 c3                	mov    ebx,eax
c001b282:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b287:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b28a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b28d:	53                   	push   ebx
c001b28e:	e8 b7 7b ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001b293:	83 c4 10             	add    esp,0x10
c001b296:	31 d2                	xor    edx,edx
c001b298:	b8 02 00 00 00       	mov    eax,0x2
c001b29d:	85 db                	test   ebx,ebx
c001b29f:	74 5b                	je     c001b2fc <Sys::loadDLL(regs*)+0xa4>
c001b2a1:	83 ec 0c             	sub    esp,0xc
c001b2a4:	53                   	push   ebx
c001b2a5:	e8 72 7e ff ff       	call   c001311c <File::exists()>
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	84 c0                	test   al,al
c001b2af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b1:	75 11                	jne    c001b2c4 <Sys::loadDLL(regs*)+0x6c>
c001b2b3:	83 ec 0c             	sub    esp,0xc
c001b2b6:	53                   	push   ebx
c001b2b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2ba:	83 c4 10             	add    esp,0x10
c001b2bd:	b8 03 00 00 00       	mov    eax,0x3
c001b2c2:	eb 36                	jmp    c001b2fa <Sys::loadDLL(regs*)+0xa2>
c001b2c4:	83 ec 0c             	sub    esp,0xc
c001b2c7:	53                   	push   ebx
c001b2c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2cb:	58                   	pop    eax
c001b2cc:	5a                   	pop    edx
c001b2cd:	6a 00                	push   0x0
c001b2cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2d2:	e8 1e 24 00 00       	call   c001d6f5 <Thr::loadDLL(char const*, bool)>
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	89 c1                	mov    ecx,eax
c001b2dc:	31 d2                	xor    edx,edx
c001b2de:	b8 04 00 00 00       	mov    eax,0x4
c001b2e3:	85 c9                	test   ecx,ecx
c001b2e5:	74 15                	je     c001b2fc <Sys::loadDLL(regs*)+0xa4>
c001b2e7:	53                   	push   ebx
c001b2e8:	53                   	push   ebx
c001b2e9:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c001b2ef:	51                   	push   ecx
c001b2f0:	e8 2b 26 00 00       	call   c001d920 <Thr::executeDLL(unsigned long, void*)>
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	31 c0                	xor    eax,eax
c001b2fa:	31 d2                	xor    edx,edx
c001b2fc:	59                   	pop    ecx
c001b2fd:	5b                   	pop    ebx
c001b2fe:	5e                   	pop    esi
c001b2ff:	c3                   	ret    

c001b300 <Sys::read(regs*)>:
c001b300:	57                   	push   edi
c001b301:	56                   	push   esi
c001b302:	53                   	push   ebx
c001b303:	83 ec 10             	sub    esp,0x10
c001b306:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b30a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b30d:	83 f8 02             	cmp    eax,0x2
c001b310:	77 10                	ja     c001b322 <Sys::read(regs*)+0x22>
c001b312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b317:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b320:	eb 0e                	jmp    c001b330 <Sys::read(regs*)+0x30>
c001b322:	83 ec 0c             	sub    esp,0xc
c001b325:	50                   	push   eax
c001b326:	e8 64 60 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b32b:	83 c4 10             	add    esp,0x10
c001b32e:	89 c1                	mov    ecx,eax
c001b330:	83 c8 ff             	or     eax,0xffffffff
c001b333:	85 c9                	test   ecx,ecx
c001b335:	89 c2                	mov    edx,eax
c001b337:	74 28                	je     c001b361 <Sys::read(regs*)+0x61>
c001b339:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b341:	31 ff                	xor    edi,edi
c001b343:	83 ec 0c             	sub    esp,0xc
c001b346:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b348:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b34c:	52                   	push   edx
c001b34d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b350:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b353:	57                   	push   edi
c001b354:	56                   	push   esi
c001b355:	51                   	push   ecx
c001b356:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b359:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b35d:	83 c4 20             	add    esp,0x20
c001b360:	99                   	cdq    
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	5b                   	pop    ebx
c001b365:	5e                   	pop    esi
c001b366:	5f                   	pop    edi
c001b367:	c3                   	ret    

c001b368 <Sys::sbrk(regs*)>:
c001b368:	56                   	push   esi
c001b369:	53                   	push   ebx
c001b36a:	50                   	push   eax
c001b36b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b370:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b374:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b377:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b37a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b380:	85 db                	test   ebx,ebx
c001b382:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b385:	74 02                	je     c001b389 <Sys::sbrk(regs*)+0x21>
c001b387:	79 06                	jns    c001b38f <Sys::sbrk(regs*)+0x27>
c001b389:	89 f0                	mov    eax,esi
c001b38b:	31 d2                	xor    edx,edx
c001b38d:	eb 2a                	jmp    c001b3b9 <Sys::sbrk(regs*)+0x51>
c001b38f:	83 c8 ff             	or     eax,0xffffffff
c001b392:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b398:	89 c2                	mov    edx,eax
c001b39a:	77 1d                	ja     c001b3b9 <Sys::sbrk(regs*)+0x51>
c001b39c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3a2:	50                   	push   eax
c001b3a3:	c1 ea 0c             	shr    edx,0xc
c001b3a6:	68 07 0c 00 00       	push   0xc07
c001b3ab:	52                   	push   edx
c001b3ac:	51                   	push   ecx
c001b3ad:	e8 6c 6a ff ff       	call   c0011e1e <VAS::allocatePages(int, int)>
c001b3b2:	89 f0                	mov    eax,esi
c001b3b4:	31 d2                	xor    edx,edx
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	59                   	pop    ecx
c001b3ba:	5b                   	pop    ebx
c001b3bb:	5e                   	pop    esi
c001b3bc:	c3                   	ret    

c001b3bd <Sys::setCwd(regs*)>:
c001b3bd:	83 ec 14             	sub    esp,0x14
c001b3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3cf:	e8 e7 7d ff ff       	call   c00131bb <Fs::setcwd(Process*, char*)>
c001b3d4:	83 c4 1c             	add    esp,0x1c
c001b3d7:	99                   	cdq    
c001b3d8:	c3                   	ret    

c001b3d9 <Sys::setTime(regs*)>:
c001b3d9:	55                   	push   ebp
c001b3da:	31 d2                	xor    edx,edx
c001b3dc:	57                   	push   edi
c001b3dd:	bf 18 00 00 00       	mov    edi,0x18
c001b3e2:	56                   	push   esi
c001b3e3:	53                   	push   ebx
c001b3e4:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3e9:	83 ec 30             	sub    esp,0x30
c001b3ec:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3f0:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3f3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3f6:	f7 f3                	div    ebx
c001b3f8:	89 d6                	mov    esi,edx
c001b3fa:	31 d2                	xor    edx,edx
c001b3fc:	f7 f3                	div    ebx
c001b3fe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b401:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b405:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b40a:	31 d2                	xor    edx,edx
c001b40c:	f7 f3                	div    ebx
c001b40e:	31 d2                	xor    edx,edx
c001b410:	bb 0c 00 00 00       	mov    ebx,0xc
c001b415:	f7 f7                	div    edi
c001b417:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b41a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b41e:	0f b7 cd             	movzx  ecx,bp
c001b421:	56                   	push   esi
c001b422:	89 c7                	mov    edi,eax
c001b424:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b428:	c1 e6 10             	shl    esi,0x10
c001b42b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b42f:	83 e7 1f             	and    edi,0x1f
c001b432:	51                   	push   ecx
c001b433:	47                   	inc    edi
c001b434:	c1 e8 05             	shr    eax,0x5
c001b437:	31 d2                	xor    edx,edx
c001b439:	f7 f3                	div    ebx
c001b43b:	31 db                	xor    ebx,ebx
c001b43d:	52                   	push   edx
c001b43e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b442:	57                   	push   edi
c001b443:	68 c9 c6 02 c0       	push   0xc002c6c9
c001b448:	e8 9e 74 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b44d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b451:	89 f8                	mov    eax,edi
c001b453:	31 c9                	xor    ecx,ecx
c001b455:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b459:	88 c1                	mov    cl,al
c001b45b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b461:	88 d5                	mov    ch,dl
c001b463:	c1 e0 10             	shl    eax,0x10
c001b466:	0f b7 d1             	movzx  edx,cx
c001b469:	09 c2                	or     edx,eax
c001b46b:	89 d8                	mov    eax,ebx
c001b46d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b472:	09 f0                	or     eax,esi
c001b474:	89 c3                	mov    ebx,eax
c001b476:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b47a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b47e:	83 c4 18             	add    esp,0x18
c001b481:	53                   	push   ebx
c001b482:	52                   	push   edx
c001b483:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b487:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b48b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b48f:	e8 49 84 ff ff       	call   c00138dd <datetimeToSeconds(datetime_t)>
c001b494:	83 c4 0c             	add    esp,0xc
c001b497:	52                   	push   edx
c001b498:	50                   	push   eax
c001b499:	56                   	push   esi
c001b49a:	e8 c5 85 ff ff       	call   c0013a64 <secondsToDatetime(unsigned long long)>
c001b49f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4a7:	51                   	push   ecx
c001b4a8:	89 d6                	mov    esi,edx
c001b4aa:	51                   	push   ecx
c001b4ab:	c1 ee 10             	shr    esi,0x10
c001b4ae:	89 f3                	mov    ebx,esi
c001b4b0:	0f b6 f3             	movzx  esi,bl
c001b4b3:	56                   	push   esi
c001b4b4:	0f b6 f6             	movzx  esi,dh
c001b4b7:	0f b6 d2             	movzx  edx,dl
c001b4ba:	56                   	push   esi
c001b4bb:	52                   	push   edx
c001b4bc:	89 c2                	mov    edx,eax
c001b4be:	c1 ea 10             	shr    edx,0x10
c001b4c1:	52                   	push   edx
c001b4c2:	0f b6 d4             	movzx  edx,ah
c001b4c5:	0f b6 c0             	movzx  eax,al
c001b4c8:	52                   	push   edx
c001b4c9:	50                   	push   eax
c001b4ca:	68 e5 c6 02 c0       	push   0xc002c6e5
c001b4cf:	e8 17 74 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b4d4:	83 c4 2c             	add    esp,0x2c
c001b4d7:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b4dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4e4:	53                   	push   ebx
c001b4e5:	51                   	push   ecx
c001b4e6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4ec:	e8 13 85 ff ff       	call   c0013a04 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4f1:	83 f0 01             	xor    eax,0x1
c001b4f4:	31 d2                	xor    edx,edx
c001b4f6:	0f b6 c0             	movzx  eax,al
c001b4f9:	83 c4 3c             	add    esp,0x3c
c001b4fc:	5b                   	pop    ebx
c001b4fd:	5e                   	pop    esi
c001b4fe:	5f                   	pop    edi
c001b4ff:	5d                   	pop    ebp
c001b500:	c3                   	ret    

c001b501 <Sys::timezone(regs*)>:
c001b501:	53                   	push   ebx
c001b502:	83 ec 08             	sub    esp,0x8
c001b505:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b509:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b50d:	75 17                	jne    c001b526 <Sys::timezone(regs*)+0x25>
c001b50f:	83 ec 0c             	sub    esp,0xc
c001b512:	68 01 c7 02 c0       	push   0xc002c701
c001b517:	e8 cf 73 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b51c:	83 c8 ff             	or     eax,0xffffffff
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	89 c2                	mov    edx,eax
c001b524:	eb 20                	jmp    c001b546 <Sys::timezone(regs*)+0x45>
c001b526:	83 ec 0c             	sub    esp,0xc
c001b529:	68 39 c7 02 c0       	push   0xc002c739
c001b52e:	e8 b8 73 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b533:	58                   	pop    eax
c001b534:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b537:	e8 2a 82 ff ff       	call   c0013766 <User::loadClockSettings(int)>
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	b8 01 00 00 00       	mov    eax,0x1
c001b544:	31 d2                	xor    edx,edx
c001b546:	83 c4 08             	add    esp,0x8
c001b549:	5b                   	pop    ebx
c001b54a:	c3                   	ret    

c001b54b <Sys::write(regs*)>:
c001b54b:	57                   	push   edi
c001b54c:	56                   	push   esi
c001b54d:	53                   	push   ebx
c001b54e:	83 ec 10             	sub    esp,0x10
c001b551:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b555:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b558:	83 f8 02             	cmp    eax,0x2
c001b55b:	77 10                	ja     c001b56d <Sys::write(regs*)+0x22>
c001b55d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b562:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b565:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b56b:	eb 0e                	jmp    c001b57b <Sys::write(regs*)+0x30>
c001b56d:	83 ec 0c             	sub    esp,0xc
c001b570:	50                   	push   eax
c001b571:	e8 19 5e ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b576:	83 c4 10             	add    esp,0x10
c001b579:	89 c1                	mov    ecx,eax
c001b57b:	83 c8 ff             	or     eax,0xffffffff
c001b57e:	85 c9                	test   ecx,ecx
c001b580:	89 c2                	mov    edx,eax
c001b582:	74 28                	je     c001b5ac <Sys::write(regs*)+0x61>
c001b584:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b58c:	31 ff                	xor    edi,edi
c001b58e:	83 ec 0c             	sub    esp,0xc
c001b591:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b593:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b597:	52                   	push   edx
c001b598:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b59b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b59e:	57                   	push   edi
c001b59f:	56                   	push   esi
c001b5a0:	51                   	push   ecx
c001b5a1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5a8:	83 c4 20             	add    esp,0x20
c001b5ab:	99                   	cdq    
c001b5ac:	83 c4 10             	add    esp,0x10
c001b5af:	5b                   	pop    ebx
c001b5b0:	5e                   	pop    esi
c001b5b1:	5f                   	pop    edi
c001b5b2:	c3                   	ret    

c001b5b3 <Sys::wsbe(regs*)>:
c001b5b3:	57                   	push   edi
c001b5b4:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5b9:	56                   	push   esi
c001b5ba:	be 78 c7 02 c0       	mov    esi,0xc002c778
c001b5bf:	53                   	push   ebx
c001b5c0:	83 ec 30             	sub    esp,0x30
c001b5c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5c7:	fc                   	cld    
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5cd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5d9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5df:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5e1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5e4:	57                   	push   edi
c001b5e5:	e8 82 51 fe ff       	call   c000076c <strlen>
c001b5ea:	5a                   	pop    edx
c001b5eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5ef:	52                   	push   edx
c001b5f0:	31 d2                	xor    edx,edx
c001b5f2:	57                   	push   edi
c001b5f3:	52                   	push   edx
c001b5f4:	50                   	push   eax
c001b5f5:	56                   	push   esi
c001b5f6:	ff d3                	call   ebx
c001b5f8:	83 c4 14             	add    esp,0x14
c001b5fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5ff:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b602:	e8 00 34 00 00       	call   c001ea07 <terminateTask(int)>
c001b607:	83 c4 40             	add    esp,0x40
c001b60a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b60f:	5b                   	pop    ebx
c001b610:	31 d2                	xor    edx,edx
c001b612:	5e                   	pop    esi
c001b613:	5f                   	pop    edi
c001b614:	c3                   	ret    

c001b615 <Sys::yield(regs*)>:
c001b615:	57                   	push   edi
c001b616:	56                   	push   esi
c001b617:	53                   	push   ebx
c001b618:	fa                   	cli    
c001b619:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001b61f:	e8 b0 2a 00 00       	call   c001e0d4 <schedule()>
c001b624:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001b629:	48                   	dec    eax
c001b62a:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001b62f:	75 01                	jne    c001b632 <Sys::yield(regs*)+0x1d>
c001b631:	fb                   	sti    
c001b632:	8b 35 90 f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f690
c001b638:	8b 3d 94 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f694
c001b63e:	89 f0                	mov    eax,esi
c001b640:	89 fb                	mov    ebx,edi
c001b642:	89 f1                	mov    ecx,esi
c001b644:	c1 e0 07             	shl    eax,0x7
c001b647:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b64b:	25 80 30 0f 00       	and    eax,0xf3080
c001b650:	c1 eb 17             	shr    ebx,0x17
c001b653:	31 c8                	xor    eax,ecx
c001b655:	89 da                	mov    edx,ebx
c001b657:	5b                   	pop    ebx
c001b658:	5e                   	pop    esi
c001b659:	5f                   	pop    edi
c001b65a:	c3                   	ret    

c001b65b <sysCallSeekDir(regs*)>:
c001b65b:	31 c0                	xor    eax,eax
c001b65d:	31 d2                	xor    edx,edx
c001b65f:	c3                   	ret    

c001b660 <sysCallTellDir(regs*)>:
c001b660:	31 c0                	xor    eax,eax
c001b662:	31 d2                	xor    edx,edx
c001b664:	c3                   	ret    

c001b665 <sysCallVerify(regs*)>:
c001b665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b669:	31 d2                	xor    edx,edx
c001b66b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b66e:	c3                   	ret    

c001b66f <sysFormatDisk(regs*)>:
c001b66f:	56                   	push   esi
c001b670:	53                   	push   ebx
c001b671:	53                   	push   ebx
c001b672:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b676:	8b 1d 94 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f194
c001b67c:	eb 25                	jmp    c001b6a3 <sysFormatDisk(regs*)+0x34>
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b684:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b686:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b689:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b68c:	50                   	push   eax
c001b68d:	ff 34 85 20 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e0]
c001b694:	53                   	push   ebx
c001b695:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b698:	83 c4 20             	add    esp,0x20
c001b69b:	83 f8 08             	cmp    eax,0x8
c001b69e:	75 12                	jne    c001b6b2 <sysFormatDisk(regs*)+0x43>
c001b6a0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6a3:	85 db                	test   ebx,ebx
c001b6a5:	75 d7                	jne    c001b67e <sysFormatDisk(regs*)+0xf>
c001b6a7:	59                   	pop    ecx
c001b6a8:	b8 03 00 00 00       	mov    eax,0x3
c001b6ad:	31 d2                	xor    edx,edx
c001b6af:	5b                   	pop    ebx
c001b6b0:	5e                   	pop    esi
c001b6b1:	c3                   	ret    
c001b6b2:	85 c0                	test   eax,eax
c001b6b4:	74 1b                	je     c001b6d1 <sysFormatDisk(regs*)+0x62>
c001b6b6:	83 f8 09             	cmp    eax,0x9
c001b6b9:	74 0b                	je     c001b6c6 <sysFormatDisk(regs*)+0x57>
c001b6bb:	59                   	pop    ecx
c001b6bc:	b8 02 00 00 00       	mov    eax,0x2
c001b6c1:	31 d2                	xor    edx,edx
c001b6c3:	5b                   	pop    ebx
c001b6c4:	5e                   	pop    esi
c001b6c5:	c3                   	ret    
c001b6c6:	59                   	pop    ecx
c001b6c7:	b8 01 00 00 00       	mov    eax,0x1
c001b6cc:	31 d2                	xor    edx,edx
c001b6ce:	5b                   	pop    ebx
c001b6cf:	5e                   	pop    esi
c001b6d0:	c3                   	ret    
c001b6d1:	59                   	pop    ecx
c001b6d2:	31 c0                	xor    eax,eax
c001b6d4:	31 d2                	xor    edx,edx
c001b6d6:	5b                   	pop    ebx
c001b6d7:	5e                   	pop    esi
c001b6d8:	c3                   	ret    

c001b6d9 <sysSetDiskVolumeLabel(regs*)>:
c001b6d9:	56                   	push   esi
c001b6da:	53                   	push   ebx
c001b6db:	53                   	push   ebx
c001b6dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6e3:	83 f8 19             	cmp    eax,0x19
c001b6e6:	77 29                	ja     c001b711 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6e8:	8b 0c 85 20 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd09e0]
c001b6ef:	85 c9                	test   ecx,ecx
c001b6f1:	74 1e                	je     c001b711 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f3:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6f6:	85 d2                	test   edx,edx
c001b6f8:	74 17                	je     c001b711 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6fa:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b700:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b702:	52                   	push   edx
c001b703:	50                   	push   eax
c001b704:	51                   	push   ecx
c001b705:	53                   	push   ebx
c001b706:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	99                   	cdq    
c001b70d:	59                   	pop    ecx
c001b70e:	5b                   	pop    ebx
c001b70f:	5e                   	pop    esi
c001b710:	c3                   	ret    
c001b711:	59                   	pop    ecx
c001b712:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b717:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b71c:	5b                   	pop    ebx
c001b71d:	5e                   	pop    esi
c001b71e:	c3                   	ret    

c001b71f <sysGetDiskVolumeLabel(regs*)>:
c001b71f:	57                   	push   edi
c001b720:	56                   	push   esi
c001b721:	53                   	push   ebx
c001b722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b726:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b729:	83 fa 19             	cmp    edx,0x19
c001b72c:	77 34                	ja     c001b762 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b72e:	8b 0c 95 20 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd09e0]
c001b735:	85 c9                	test   ecx,ecx
c001b737:	74 29                	je     c001b762 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b739:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b73c:	85 db                	test   ebx,ebx
c001b73e:	74 22                	je     c001b762 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b740:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b743:	85 c0                	test   eax,eax
c001b745:	74 1b                	je     c001b762 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b747:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b74d:	83 ec 0c             	sub    esp,0xc
c001b750:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b752:	50                   	push   eax
c001b753:	53                   	push   ebx
c001b754:	52                   	push   edx
c001b755:	51                   	push   ecx
c001b756:	56                   	push   esi
c001b757:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b75a:	83 c4 20             	add    esp,0x20
c001b75d:	99                   	cdq    
c001b75e:	5b                   	pop    ebx
c001b75f:	5e                   	pop    esi
c001b760:	5f                   	pop    edi
c001b761:	c3                   	ret    
c001b762:	5b                   	pop    ebx
c001b763:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b768:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b76d:	5e                   	pop    esi
c001b76e:	5f                   	pop    edi
c001b76f:	c3                   	ret    

c001b770 <sysShutdown(regs*)>:
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b777:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b77a:	85 c0                	test   eax,eax
c001b77c:	74 18                	je     c001b796 <sysShutdown(regs*)+0x26>
c001b77e:	83 f8 01             	cmp    eax,0x1
c001b781:	74 38                	je     c001b7bb <sysShutdown(regs*)+0x4b>
c001b783:	83 f8 02             	cmp    eax,0x2
c001b786:	74 24                	je     c001b7ac <sysShutdown(regs*)+0x3c>
c001b788:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b78d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b792:	83 c4 0c             	add    esp,0xc
c001b795:	c3                   	ret    
c001b796:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b79b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b79d:	6a 00                	push   0x0
c001b79f:	6a 00                	push   0x0
c001b7a1:	6a 00                	push   0x0
c001b7a3:	50                   	push   eax
c001b7a4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7a7:	83 c4 10             	add    esp,0x10
c001b7aa:	eb dc                	jmp    c001b788 <sysShutdown(regs*)+0x18>
c001b7ac:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b7b1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7b3:	6a 00                	push   0x0
c001b7b5:	6a 00                	push   0x0
c001b7b7:	6a 01                	push   0x1
c001b7b9:	eb e8                	jmp    c001b7a3 <sysShutdown(regs*)+0x33>
c001b7bb:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c001b7c0:	85 c0                	test   eax,eax
c001b7c2:	74 02                	je     c001b7c6 <sysShutdown(regs*)+0x56>
c001b7c4:	ff d0                	call   eax
c001b7c6:	31 c0                	xor    eax,eax
c001b7c8:	31 d2                	xor    edx,edx
c001b7ca:	83 c4 0c             	add    esp,0xc
c001b7cd:	c3                   	ret    

c001b7ce <sysCallRealpath(regs*)>:
c001b7ce:	83 ec 0c             	sub    esp,0xc
c001b7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7d8:	85 d2                	test   edx,edx
c001b7da:	74 07                	je     c001b7e3 <sysCallRealpath(regs*)+0x15>
c001b7dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7df:	85 c0                	test   eax,eax
c001b7e1:	75 0b                	jne    c001b7ee <sysCallRealpath(regs*)+0x20>
c001b7e3:	b8 01 00 00 00       	mov    eax,0x1
c001b7e8:	31 d2                	xor    edx,edx
c001b7ea:	83 c4 0c             	add    esp,0xc
c001b7ed:	c3                   	ret    
c001b7ee:	51                   	push   ecx
c001b7ef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7f5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7f8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7fe:	51                   	push   ecx
c001b7ff:	52                   	push   edx
c001b800:	50                   	push   eax
c001b801:	e8 9a 74 ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	31 c0                	xor    eax,eax
c001b80b:	31 d2                	xor    edx,edx
c001b80d:	83 c4 0c             	add    esp,0xc
c001b810:	c3                   	ret    

c001b811 <sysCallGetArgc(regs*)>:
c001b811:	83 ec 14             	sub    esp,0x14
c001b814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b819:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b81c:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b822:	68 a4 c7 02 c0       	push   0xc002c7a4
c001b827:	e8 bf 70 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b82c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b831:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b834:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b83a:	83 c4 1c             	add    esp,0x1c
c001b83d:	99                   	cdq    
c001b83e:	c3                   	ret    

c001b83f <sysCallReadDir(regs*)>:
c001b83f:	53                   	push   ebx
c001b840:	83 ec 18             	sub    esp,0x18
c001b843:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b847:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b84a:	83 f8 02             	cmp    eax,0x2
c001b84d:	76 53                	jbe    c001b8a2 <sysCallReadDir(regs*)+0x63>
c001b84f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b852:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b858:	77 4f                	ja     c001b8a9 <sysCallReadDir(regs*)+0x6a>
c001b85a:	83 ec 0c             	sub    esp,0xc
c001b85d:	50                   	push   eax
c001b85e:	e8 2c 5b ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	85 c0                	test   eax,eax
c001b868:	74 50                	je     c001b8ba <sysCallReadDir(regs*)+0x7b>
c001b86a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b872:	83 ec 0c             	sub    esp,0xc
c001b875:	8b 10                	mov    edx,DWORD PTR [eax]
c001b877:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b87b:	51                   	push   ecx
c001b87c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b87f:	6a 00                	push   0x0
c001b881:	68 10 01 00 00       	push   0x110
c001b886:	50                   	push   eax
c001b887:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b88a:	83 c4 20             	add    esp,0x20
c001b88d:	85 c0                	test   eax,eax
c001b88f:	74 38                	je     c001b8c9 <sysCallReadDir(regs*)+0x8a>
c001b891:	83 f8 07             	cmp    eax,0x7
c001b894:	74 0c                	je     c001b8a2 <sysCallReadDir(regs*)+0x63>
c001b896:	b8 02 00 00 00       	mov    eax,0x2
c001b89b:	31 d2                	xor    edx,edx
c001b89d:	83 c4 18             	add    esp,0x18
c001b8a0:	5b                   	pop    ebx
c001b8a1:	c3                   	ret    
c001b8a2:	b8 01 00 00 00       	mov    eax,0x1
c001b8a7:	eb f2                	jmp    c001b89b <sysCallReadDir(regs*)+0x5c>
c001b8a9:	83 ec 08             	sub    esp,0x8
c001b8ac:	52                   	push   edx
c001b8ad:	68 c8 c8 02 c0       	push   0xc002c8c8
c001b8b2:	e8 34 70 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8c4:	83 c4 18             	add    esp,0x18
c001b8c7:	5b                   	pop    ebx
c001b8c8:	c3                   	ret    
c001b8c9:	31 c0                	xor    eax,eax
c001b8cb:	eb ce                	jmp    c001b89b <sysCallReadDir(regs*)+0x5c>

c001b8cd <sysCallIsATTY(regs*)>:
c001b8cd:	83 ec 0c             	sub    esp,0xc
c001b8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8d7:	83 f8 02             	cmp    eax,0x2
c001b8da:	76 07                	jbe    c001b8e3 <sysCallIsATTY(regs*)+0x16>
c001b8dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8e1:	75 26                	jne    c001b909 <sysCallIsATTY(regs*)+0x3c>
c001b8e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8eb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8f1:	85 c0                	test   eax,eax
c001b8f3:	74 24                	je     c001b919 <sysCallIsATTY(regs*)+0x4c>
c001b8f5:	83 ec 0c             	sub    esp,0xc
c001b8f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8fa:	50                   	push   eax
c001b8fb:	ff 12                	call   DWORD PTR [edx]
c001b8fd:	31 d2                	xor    edx,edx
c001b8ff:	0f b6 c0             	movzx  eax,al
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	83 c4 0c             	add    esp,0xc
c001b908:	c3                   	ret    
c001b909:	83 ec 0c             	sub    esp,0xc
c001b90c:	50                   	push   eax
c001b90d:	e8 7d 5a ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b912:	83 c4 10             	add    esp,0x10
c001b915:	85 c0                	test   eax,eax
c001b917:	75 dc                	jne    c001b8f5 <sysCallIsATTY(regs*)+0x28>
c001b919:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b91e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b923:	83 c4 0c             	add    esp,0xc
c001b926:	c3                   	ret    

c001b927 <sysCallSeek(regs*)>:
c001b927:	53                   	push   ebx
c001b928:	83 ec 08             	sub    esp,0x8
c001b92b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b92f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b932:	83 f8 02             	cmp    eax,0x2
c001b935:	76 4a                	jbe    c001b981 <sysCallSeek(regs*)+0x5a>
c001b937:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b93c:	77 32                	ja     c001b970 <sysCallSeek(regs*)+0x49>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	50                   	push   eax
c001b942:	e8 48 5a ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b947:	83 c4 0c             	add    esp,0xc
c001b94a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b94d:	31 db                	xor    ebx,ebx
c001b94f:	53                   	push   ebx
c001b950:	51                   	push   ecx
c001b951:	50                   	push   eax
c001b952:	e8 15 76 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	85 c0                	test   eax,eax
c001b95c:	0f 95 c0             	setne  al
c001b95f:	31 d2                	xor    edx,edx
c001b961:	0f b6 c0             	movzx  eax,al
c001b964:	f7 d8                	neg    eax
c001b966:	83 d2 00             	adc    edx,0x0
c001b969:	83 c4 08             	add    esp,0x8
c001b96c:	f7 da                	neg    edx
c001b96e:	5b                   	pop    ebx
c001b96f:	c3                   	ret    
c001b970:	83 ec 08             	sub    esp,0x8
c001b973:	50                   	push   eax
c001b974:	68 af c7 02 c0       	push   0xc002c7af
c001b979:	e8 6d 6f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b986:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b98b:	83 c4 08             	add    esp,0x8
c001b98e:	5b                   	pop    ebx
c001b98f:	c3                   	ret    

c001b990 <sysCallTell(regs*)>:
c001b990:	53                   	push   ebx
c001b991:	83 ec 08             	sub    esp,0x8
c001b994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b998:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b99b:	83 f8 02             	cmp    eax,0x2
c001b99e:	76 5e                	jbe    c001b9fe <sysCallTell(regs*)+0x6e>
c001b9a0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9a5:	77 2d                	ja     c001b9d4 <sysCallTell(regs*)+0x44>
c001b9a7:	83 ec 0c             	sub    esp,0xc
c001b9aa:	50                   	push   eax
c001b9ab:	e8 df 59 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001b9b0:	5a                   	pop    edx
c001b9b1:	59                   	pop    ecx
c001b9b2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9b5:	50                   	push   eax
c001b9b6:	e8 07 76 ff ff       	call   c0012fc2 <File::tell(unsigned long long*)>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	85 c0                	test   eax,eax
c001b9c0:	0f 95 c0             	setne  al
c001b9c3:	31 d2                	xor    edx,edx
c001b9c5:	0f b6 c0             	movzx  eax,al
c001b9c8:	f7 d8                	neg    eax
c001b9ca:	83 d2 00             	adc    edx,0x0
c001b9cd:	83 c4 08             	add    esp,0x8
c001b9d0:	f7 da                	neg    edx
c001b9d2:	5b                   	pop    ebx
c001b9d3:	c3                   	ret    
c001b9d4:	83 ec 08             	sub    esp,0x8
c001b9d7:	50                   	push   eax
c001b9d8:	68 c9 c7 02 c0       	push   0xc002c7c9
c001b9dd:	e8 09 6f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b9e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9f5:	31 d2                	xor    edx,edx
c001b9f7:	31 c0                	xor    eax,eax
c001b9f9:	83 c4 08             	add    esp,0x8
c001b9fc:	5b                   	pop    ebx
c001b9fd:	c3                   	ret    
c001b9fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba08:	83 c4 08             	add    esp,0x8
c001ba0b:	5b                   	pop    ebx
c001ba0c:	c3                   	ret    

c001ba0d <sysCallSize(regs*)>:
c001ba0d:	53                   	push   ebx
c001ba0e:	83 ec 18             	sub    esp,0x18
c001ba11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba18:	83 f8 02             	cmp    eax,0x2
c001ba1b:	76 64                	jbe    c001ba81 <sysCallSize(regs*)+0x74>
c001ba1d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba22:	77 33                	ja     c001ba57 <sysCallSize(regs*)+0x4a>
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	50                   	push   eax
c001ba28:	e8 62 59 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001ba2d:	83 c4 0c             	add    esp,0xc
c001ba30:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba34:	52                   	push   edx
c001ba35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba38:	50                   	push   eax
c001ba39:	e8 1c 77 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	85 c0                	test   eax,eax
c001ba43:	0f 95 c0             	setne  al
c001ba46:	31 d2                	xor    edx,edx
c001ba48:	0f b6 c0             	movzx  eax,al
c001ba4b:	f7 d8                	neg    eax
c001ba4d:	83 d2 00             	adc    edx,0x0
c001ba50:	83 c4 18             	add    esp,0x18
c001ba53:	f7 da                	neg    edx
c001ba55:	5b                   	pop    ebx
c001ba56:	c3                   	ret    
c001ba57:	83 ec 08             	sub    esp,0x8
c001ba5a:	50                   	push   eax
c001ba5b:	68 e3 c7 02 c0       	push   0xc002c7e3
c001ba60:	e8 86 6e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ba65:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba78:	31 d2                	xor    edx,edx
c001ba7a:	31 c0                	xor    eax,eax
c001ba7c:	83 c4 18             	add    esp,0x18
c001ba7f:	5b                   	pop    ebx
c001ba80:	c3                   	ret    
c001ba81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba8b:	83 c4 18             	add    esp,0x18
c001ba8e:	5b                   	pop    ebx
c001ba8f:	c3                   	ret    

c001ba90 <sysCallSizeFromFilename(regs*)>:
c001ba90:	57                   	push   edi
c001ba91:	56                   	push   esi
c001ba92:	53                   	push   ebx
c001ba93:	83 ec 20             	sub    esp,0x20
c001ba96:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba9a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba9d:	83 fb 02             	cmp    ebx,0x2
c001baa0:	0f 86 99 00 00 00    	jbe    c001bb3f <sysCallSizeFromFilename(regs*)+0xaf>
c001baa6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001baac:	77 65                	ja     c001bb13 <sysCallSizeFromFilename(regs*)+0x83>
c001baae:	83 ec 0c             	sub    esp,0xc
c001bab1:	68 14 01 00 00       	push   0x114
c001bab6:	e8 d1 3d ff ff       	call   c000f88c <malloc>
c001babb:	83 c4 0c             	add    esp,0xc
c001babe:	89 c6                	mov    esi,eax
c001bac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bac8:	53                   	push   ebx
c001bac9:	56                   	push   esi
c001baca:	e8 7b 73 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001bacf:	83 c4 0c             	add    esp,0xc
c001bad2:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bad6:	50                   	push   eax
c001bad7:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bada:	56                   	push   esi
c001badb:	e8 7a 76 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001bae0:	83 c4 10             	add    esp,0x10
c001bae3:	85 f6                	test   esi,esi
c001bae5:	74 14                	je     c001bafb <sysCallSizeFromFilename(regs*)+0x6b>
c001bae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baeb:	8b 16                	mov    edx,DWORD PTR [esi]
c001baed:	83 ec 0c             	sub    esp,0xc
c001baf0:	56                   	push   esi
c001baf1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bafb:	85 c0                	test   eax,eax
c001bafd:	0f 95 c0             	setne  al
c001bb00:	31 d2                	xor    edx,edx
c001bb02:	0f b6 c0             	movzx  eax,al
c001bb05:	f7 d8                	neg    eax
c001bb07:	83 d2 00             	adc    edx,0x0
c001bb0a:	83 c4 20             	add    esp,0x20
c001bb0d:	f7 da                	neg    edx
c001bb0f:	5b                   	pop    ebx
c001bb10:	5e                   	pop    esi
c001bb11:	5f                   	pop    edi
c001bb12:	c3                   	ret    
c001bb13:	83 ec 08             	sub    esp,0x8
c001bb16:	53                   	push   ebx
c001bb17:	68 e3 c7 02 c0       	push   0xc002c7e3
c001bb1c:	e8 ca 6d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bb21:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb34:	31 d2                	xor    edx,edx
c001bb36:	83 c4 20             	add    esp,0x20
c001bb39:	31 c0                	xor    eax,eax
c001bb3b:	5b                   	pop    ebx
c001bb3c:	5e                   	pop    esi
c001bb3d:	5f                   	pop    edi
c001bb3e:	c3                   	ret    
c001bb3f:	83 c4 20             	add    esp,0x20
c001bb42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb47:	5b                   	pop    ebx
c001bb48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb4d:	5e                   	pop    esi
c001bb4e:	5f                   	pop    edi
c001bb4f:	c3                   	ret    

c001bb50 <sysCallClose(regs*)>:
c001bb50:	53                   	push   ebx
c001bb51:	83 ec 08             	sub    esp,0x8
c001bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb5b:	83 f8 02             	cmp    eax,0x2
c001bb5e:	76 50                	jbe    c001bbb0 <sysCallClose(regs*)+0x60>
c001bb60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb65:	74 58                	je     c001bbbf <sysCallClose(regs*)+0x6f>
c001bb67:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb6c:	74 60                	je     c001bbce <sysCallClose(regs*)+0x7e>
c001bb6e:	77 2f                	ja     c001bb9f <sysCallClose(regs*)+0x4f>
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	50                   	push   eax
c001bb74:	e8 16 58 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001bb79:	89 c3                	mov    ebx,eax
c001bb7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb7e:	e8 89 73 ff ff       	call   c0012f0c <File::close()>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	85 db                	test   ebx,ebx
c001bb88:	74 0c                	je     c001bb96 <sysCallClose(regs*)+0x46>
c001bb8a:	83 ec 0c             	sub    esp,0xc
c001bb8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb8f:	53                   	push   ebx
c001bb90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	31 c0                	xor    eax,eax
c001bb98:	31 d2                	xor    edx,edx
c001bb9a:	83 c4 08             	add    esp,0x8
c001bb9d:	5b                   	pop    ebx
c001bb9e:	c3                   	ret    
c001bb9f:	83 ec 08             	sub    esp,0x8
c001bba2:	50                   	push   eax
c001bba3:	68 ec c8 02 c0       	push   0xc002c8ec
c001bba8:	e8 3e 6d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbba:	83 c4 08             	add    esp,0x8
c001bbbd:	5b                   	pop    ebx
c001bbbe:	c3                   	ret    
c001bbbf:	83 ec 0c             	sub    esp,0xc
c001bbc2:	68 fe c7 02 c0       	push   0xc002c7fe
c001bbc7:	e8 1f 6d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bbcc:	eb c5                	jmp    c001bb93 <sysCallClose(regs*)+0x43>
c001bbce:	83 ec 0c             	sub    esp,0xc
c001bbd1:	68 0c c8 02 c0       	push   0xc002c80c
c001bbd6:	eb ef                	jmp    c001bbc7 <sysCallClose(regs*)+0x77>

c001bbd8 <sysCallOpenDir(regs*)>:
c001bbd8:	56                   	push   esi
c001bbd9:	53                   	push   ebx
c001bbda:	53                   	push   ebx
c001bbdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbdf:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbe2:	85 f6                	test   esi,esi
c001bbe4:	74 59                	je     c001bc3f <sysCallOpenDir(regs*)+0x67>
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	68 14 01 00 00       	push   0x114
c001bbee:	e8 99 3c ff ff       	call   c000f88c <malloc>
c001bbf3:	83 c4 0c             	add    esp,0xc
c001bbf6:	89 c6                	mov    esi,eax
c001bbf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbfd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc03:	56                   	push   esi
c001bc04:	e8 ed 76 ff ff       	call   c00132f6 <Directory::Directory(char const*, Process*)>
c001bc09:	83 c4 10             	add    esp,0x10
c001bc0c:	85 f6                	test   esi,esi
c001bc0e:	74 2f                	je     c001bc3f <sysCallOpenDir(regs*)+0x67>
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	56                   	push   esi
c001bc14:	e8 41 77 ff ff       	call   c001335a <Directory::open()>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	85 c0                	test   eax,eax
c001bc1e:	75 1f                	jne    c001bc3f <sysCallOpenDir(regs*)+0x67>
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	56                   	push   esi
c001bc24:	e8 71 54 ff ff       	call   c001109a <UnixFile::getFileDescriptor()>
c001bc29:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc2c:	83 c4 10             	add    esp,0x10
c001bc2f:	89 02                	mov    DWORD PTR [edx],eax
c001bc31:	c1 f8 1f             	sar    eax,0x1f
c001bc34:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc37:	31 c0                	xor    eax,eax
c001bc39:	59                   	pop    ecx
c001bc3a:	31 d2                	xor    edx,edx
c001bc3c:	5b                   	pop    ebx
c001bc3d:	5e                   	pop    esi
c001bc3e:	c3                   	ret    
c001bc3f:	59                   	pop    ecx
c001bc40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc4a:	5b                   	pop    ebx
c001bc4b:	5e                   	pop    esi
c001bc4c:	c3                   	ret    

c001bc4d <sysCallCloseDir(regs*)>:
c001bc4d:	53                   	push   ebx
c001bc4e:	83 ec 08             	sub    esp,0x8
c001bc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc55:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc58:	83 f8 02             	cmp    eax,0x2
c001bc5b:	76 47                	jbe    c001bca4 <sysCallCloseDir(regs*)+0x57>
c001bc5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc62:	77 2f                	ja     c001bc93 <sysCallCloseDir(regs*)+0x46>
c001bc64:	83 ec 0c             	sub    esp,0xc
c001bc67:	50                   	push   eax
c001bc68:	e8 22 57 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001bc6d:	89 c3                	mov    ebx,eax
c001bc6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc72:	e8 3f 77 ff ff       	call   c00133b6 <Directory::close()>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	85 db                	test   ebx,ebx
c001bc7c:	74 0c                	je     c001bc8a <sysCallCloseDir(regs*)+0x3d>
c001bc7e:	83 ec 0c             	sub    esp,0xc
c001bc81:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc83:	53                   	push   ebx
c001bc84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc87:	83 c4 10             	add    esp,0x10
c001bc8a:	31 c0                	xor    eax,eax
c001bc8c:	31 d2                	xor    edx,edx
c001bc8e:	83 c4 08             	add    esp,0x8
c001bc91:	5b                   	pop    ebx
c001bc92:	c3                   	ret    
c001bc93:	83 ec 08             	sub    esp,0x8
c001bc96:	50                   	push   eax
c001bc97:	68 14 c9 02 c0       	push   0xc002c914
c001bc9c:	e8 4a 6c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bca1:	83 c4 10             	add    esp,0x10
c001bca4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcae:	83 c4 08             	add    esp,0x8
c001bcb1:	5b                   	pop    ebx
c001bcb2:	c3                   	ret    

c001bcb3 <sysCallMakeDir(regs*)>:
c001bcb3:	56                   	push   esi
c001bcb4:	53                   	push   ebx
c001bcb5:	83 ec 10             	sub    esp,0x10
c001bcb8:	68 14 01 00 00       	push   0x114
c001bcbd:	e8 ca 3b ff ff       	call   c000f88c <malloc>
c001bcc2:	83 c4 0c             	add    esp,0xc
c001bcc5:	89 c3                	mov    ebx,eax
c001bcc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bccc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcd3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcd6:	53                   	push   ebx
c001bcd7:	e8 1a 76 ff ff       	call   c00132f6 <Directory::Directory(char const*, Process*)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	85 db                	test   ebx,ebx
c001bce1:	74 32                	je     c001bd15 <sysCallMakeDir(regs*)+0x62>
c001bce3:	83 ec 0c             	sub    esp,0xc
c001bce6:	53                   	push   ebx
c001bce7:	e8 4e 78 ff ff       	call   c001353a <Directory::create()>
c001bcec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcef:	89 c6                	mov    esi,eax
c001bcf1:	e8 c0 76 ff ff       	call   c00133b6 <Directory::close()>
c001bcf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	31 c0                	xor    eax,eax
c001bd03:	59                   	pop    ecx
c001bd04:	85 f6                	test   esi,esi
c001bd06:	5b                   	pop    ebx
c001bd07:	0f 95 c0             	setne  al
c001bd0a:	5e                   	pop    esi
c001bd0b:	31 d2                	xor    edx,edx
c001bd0d:	f7 d8                	neg    eax
c001bd0f:	83 d2 00             	adc    edx,0x0
c001bd12:	f7 da                	neg    edx
c001bd14:	c3                   	ret    
c001bd15:	59                   	pop    ecx
c001bd16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd20:	5b                   	pop    ebx
c001bd21:	5e                   	pop    esi
c001bd22:	c3                   	ret    

c001bd23 <sysCallWait(regs*)>:
c001bd23:	83 ec 10             	sub    esp,0x10
c001bd26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd2a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd2d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd30:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd33:	e8 c8 25 00 00       	call   c001e300 <waitTask(int, int*, int)>
c001bd38:	83 c4 1c             	add    esp,0x1c
c001bd3b:	99                   	cdq    
c001bd3c:	c3                   	ret    

c001bd3d <sysCallNotImpl(regs*)>:
c001bd3d:	83 ec 18             	sub    esp,0x18
c001bd40:	68 1a c8 02 c0       	push   0xc002c81a
c001bd45:	e8 d7 e5 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001bd4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd54:	83 c4 1c             	add    esp,0x1c
c001bd57:	c3                   	ret    

c001bd58 <sysPanic(regs*)>:
c001bd58:	83 ec 18             	sub    esp,0x18
c001bd5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd5f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd62:	e8 ba e5 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001bd67:	c7 04 24 34 c8 02 c0 	mov    DWORD PTR [esp],0xc002c834
c001bd6e:	e8 ae e5 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001bd73:	b8 01 00 00 00       	mov    eax,0x1
c001bd78:	31 d2                	xor    edx,edx
c001bd7a:	83 c4 1c             	add    esp,0x1c
c001bd7d:	c3                   	ret    

c001bd7e <sysCallRmdir(regs*)>:
c001bd7e:	56                   	push   esi
c001bd7f:	53                   	push   ebx
c001bd80:	83 ec 20             	sub    esp,0x20
c001bd83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd87:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd8a:	68 14 01 00 00       	push   0x114
c001bd8f:	e8 f8 3a ff ff       	call   c000f88c <malloc>
c001bd94:	83 c4 0c             	add    esp,0xc
c001bd97:	89 c3                	mov    ebx,eax
c001bd99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda1:	56                   	push   esi
c001bda2:	53                   	push   ebx
c001bda3:	e8 a2 70 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001bda8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdab:	e8 76 72 ff ff       	call   c0013026 <File::unlink()>
c001bdb0:	83 c4 10             	add    esp,0x10
c001bdb3:	85 db                	test   ebx,ebx
c001bdb5:	74 14                	je     c001bdcb <sysCallRmdir(regs*)+0x4d>
c001bdb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdbd:	83 ec 0c             	sub    esp,0xc
c001bdc0:	53                   	push   ebx
c001bdc1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdc4:	83 c4 10             	add    esp,0x10
c001bdc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdcb:	85 c0                	test   eax,eax
c001bdcd:	0f 95 c0             	setne  al
c001bdd0:	31 d2                	xor    edx,edx
c001bdd2:	0f b6 c0             	movzx  eax,al
c001bdd5:	f7 d8                	neg    eax
c001bdd7:	83 d2 00             	adc    edx,0x0
c001bdda:	83 c4 14             	add    esp,0x14
c001bddd:	f7 da                	neg    edx
c001bddf:	5b                   	pop    ebx
c001bde0:	5e                   	pop    esi
c001bde1:	c3                   	ret    

c001bde2 <sysCallUnlink(regs*)>:
c001bde2:	56                   	push   esi
c001bde3:	53                   	push   ebx
c001bde4:	83 ec 20             	sub    esp,0x20
c001bde7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdeb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdee:	68 14 01 00 00       	push   0x114
c001bdf3:	e8 94 3a ff ff       	call   c000f88c <malloc>
c001bdf8:	83 c4 0c             	add    esp,0xc
c001bdfb:	89 c3                	mov    ebx,eax
c001bdfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be02:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be05:	56                   	push   esi
c001be06:	53                   	push   ebx
c001be07:	e8 3e 70 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001be0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be0f:	e8 12 72 ff ff       	call   c0013026 <File::unlink()>
c001be14:	83 c4 10             	add    esp,0x10
c001be17:	85 db                	test   ebx,ebx
c001be19:	74 14                	je     c001be2f <sysCallUnlink(regs*)+0x4d>
c001be1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be21:	83 ec 0c             	sub    esp,0xc
c001be24:	53                   	push   ebx
c001be25:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be28:	83 c4 10             	add    esp,0x10
c001be2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be2f:	85 c0                	test   eax,eax
c001be31:	0f 95 c0             	setne  al
c001be34:	31 d2                	xor    edx,edx
c001be36:	0f b6 c0             	movzx  eax,al
c001be39:	f7 d8                	neg    eax
c001be3b:	83 d2 00             	adc    edx,0x0
c001be3e:	83 c4 14             	add    esp,0x14
c001be41:	f7 da                	neg    edx
c001be43:	5b                   	pop    ebx
c001be44:	5e                   	pop    esi
c001be45:	c3                   	ret    

c001be46 <sysCallGetArgv(regs*)>:
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be4d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be50:	85 c0                	test   eax,eax
c001be52:	78 2b                	js     c001be7f <sysCallGetArgv(regs*)+0x39>
c001be54:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be5a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be5d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be63:	7d 1a                	jge    c001be7f <sysCallGetArgv(regs*)+0x39>
c001be65:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be6c:	85 c0                	test   eax,eax
c001be6e:	74 17                	je     c001be87 <sysCallGetArgv(regs*)+0x41>
c001be70:	83 ec 08             	sub    esp,0x8
c001be73:	50                   	push   eax
c001be74:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be77:	e8 90 49 fe ff       	call   c000080c <strcpy>
c001be7c:	83 c4 10             	add    esp,0x10
c001be7f:	31 c0                	xor    eax,eax
c001be81:	31 d2                	xor    edx,edx
c001be83:	83 c4 0c             	add    esp,0xc
c001be86:	c3                   	ret    
c001be87:	b8 01 00 00 00       	mov    eax,0x1
c001be8c:	31 d2                	xor    edx,edx
c001be8e:	83 c4 0c             	add    esp,0xc
c001be91:	c3                   	ret    

c001be92 <sysCallTTYName(regs*)>:
c001be92:	56                   	push   esi
c001be93:	53                   	push   ebx
c001be94:	53                   	push   ebx
c001be95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be99:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be9c:	85 c0                	test   eax,eax
c001be9e:	74 5f                	je     c001beff <sysCallTTYName(regs*)+0x6d>
c001bea0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bea3:	83 f8 02             	cmp    eax,0x2
c001bea6:	77 3e                	ja     c001bee6 <sysCallTTYName(regs*)+0x54>
c001bea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bead:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001beb6:	85 db                	test   ebx,ebx
c001beb8:	74 45                	je     c001beff <sysCallTTYName(regs*)+0x6d>
c001beba:	83 ec 0c             	sub    esp,0xc
c001bebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bebf:	53                   	push   ebx
c001bec0:	ff 10                	call   DWORD PTR [eax]
c001bec2:	83 c4 10             	add    esp,0x10
c001bec5:	84 c0                	test   al,al
c001bec7:	74 41                	je     c001bf0a <sysCallTTYName(regs*)+0x78>
c001bec9:	83 ec 08             	sub    esp,0x8
c001becc:	81 c3 82 00 00 00    	add    ebx,0x82
c001bed2:	53                   	push   ebx
c001bed3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bed6:	e8 31 49 fe ff       	call   c000080c <strcpy>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	31 c0                	xor    eax,eax
c001bee0:	59                   	pop    ecx
c001bee1:	31 d2                	xor    edx,edx
c001bee3:	5b                   	pop    ebx
c001bee4:	5e                   	pop    esi
c001bee5:	c3                   	ret    
c001bee6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001beeb:	74 bb                	je     c001bea8 <sysCallTTYName(regs*)+0x16>
c001beed:	83 ec 0c             	sub    esp,0xc
c001bef0:	50                   	push   eax
c001bef1:	e8 99 54 ff ff       	call   c001138f <getFromFileDescriptor(int)>
c001bef6:	83 c4 10             	add    esp,0x10
c001bef9:	89 c3                	mov    ebx,eax
c001befb:	85 db                	test   ebx,ebx
c001befd:	75 bb                	jne    c001beba <sysCallTTYName(regs*)+0x28>
c001beff:	59                   	pop    ecx
c001bf00:	b8 01 00 00 00       	mov    eax,0x1
c001bf05:	31 d2                	xor    edx,edx
c001bf07:	5b                   	pop    ebx
c001bf08:	5e                   	pop    esi
c001bf09:	c3                   	ret    
c001bf0a:	59                   	pop    ecx
c001bf0b:	b8 02 00 00 00       	mov    eax,0x2
c001bf10:	31 d2                	xor    edx,edx
c001bf12:	5b                   	pop    ebx
c001bf13:	5e                   	pop    esi
c001bf14:	c3                   	ret    

c001bf15 <sysCallUSleep(regs*)>:
c001bf15:	83 ec 14             	sub    esp,0x14
c001bf18:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf21:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf28:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf2b:	01 ca                	add    edx,ecx
c001bf2d:	52                   	push   edx
c001bf2e:	50                   	push   eax
c001bf2f:	e8 a3 24 00 00       	call   c001e3d7 <nanoSleep(unsigned long long)>
c001bf34:	31 c0                	xor    eax,eax
c001bf36:	31 d2                	xor    edx,edx
c001bf38:	83 c4 1c             	add    esp,0x1c
c001bf3b:	c3                   	ret    

c001bf3c <sysCallSpawn(regs*)>:
c001bf3c:	56                   	push   esi
c001bf3d:	53                   	push   ebx
c001bf3e:	50                   	push   eax
c001bf3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf43:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf46:	85 c0                	test   eax,eax
c001bf48:	75 08                	jne    c001bf52 <sysCallSpawn(regs*)+0x16>
c001bf4a:	59                   	pop    ecx
c001bf4b:	31 c0                	xor    eax,eax
c001bf4d:	31 d2                	xor    edx,edx
c001bf4f:	5b                   	pop    ebx
c001bf50:	5e                   	pop    esi
c001bf51:	c3                   	ret    
c001bf52:	83 ec 08             	sub    esp,0x8
c001bf55:	50                   	push   eax
c001bf56:	68 43 c8 02 c0       	push   0xc002c843
c001bf5b:	e8 8b 69 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bf60:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bf67:	e8 20 39 ff ff       	call   c000f88c <malloc>
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	89 c6                	mov    esi,eax
c001bf71:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf77:	85 c0                	test   eax,eax
c001bf79:	75 32                	jne    c001bfad <sysCallSpawn(regs*)+0x71>
c001bf7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf83:	52                   	push   edx
c001bf84:	50                   	push   eax
c001bf85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf88:	56                   	push   esi
c001bf89:	e8 26 1b 00 00       	call   c001dab4 <Process::Process(char const*, Process*, char**)>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf98:	75 b0                	jne    c001bf4a <sysCallSpawn(regs*)+0xe>
c001bf9a:	83 ec 0c             	sub    esp,0xc
c001bf9d:	56                   	push   esi
c001bf9e:	e8 f3 1f 00 00       	call   c001df96 <Process::createUserThread()>
c001bfa3:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	99                   	cdq    
c001bfa9:	59                   	pop    ecx
c001bfaa:	5b                   	pop    ebx
c001bfab:	5e                   	pop    esi
c001bfac:	c3                   	ret    
c001bfad:	31 c0                	xor    eax,eax
c001bfaf:	eb d2                	jmp    c001bf83 <sysCallSpawn(regs*)+0x47>

c001bfb1 <sysCallGetEnv(regs*)>:
c001bfb1:	55                   	push   ebp
c001bfb2:	57                   	push   edi
c001bfb3:	56                   	push   esi
c001bfb4:	53                   	push   ebx
c001bfb5:	83 ec 28             	sub    esp,0x28
c001bfb8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfbc:	68 51 c8 02 c0       	push   0xc002c851
c001bfc1:	e8 25 69 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bfc6:	5f                   	pop    edi
c001bfc7:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfca:	5d                   	pop    ebp
c001bfcb:	53                   	push   ebx
c001bfcc:	68 7e cb 02 c0       	push   0xc002cb7e
c001bfd1:	e8 15 69 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bfd6:	58                   	pop    eax
c001bfd7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfda:	5a                   	pop    edx
c001bfdb:	57                   	push   edi
c001bfdc:	68 5a c8 02 c0       	push   0xc002c85a
c001bfe1:	e8 05 69 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bfe6:	59                   	pop    ecx
c001bfe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfef:	e8 49 e2 ff ff       	call   c001a23d <Krnl::getProcessTotalEnvCount(Process*)>
c001bff4:	5a                   	pop    edx
c001bff5:	89 c5                	mov    ebp,eax
c001bff7:	59                   	pop    ecx
c001bff8:	50                   	push   eax
c001bff9:	68 64 c8 02 c0       	push   0xc002c864
c001bffe:	e8 e8 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c003:	83 c4 10             	add    esp,0x10
c001c006:	39 ef                	cmp    edi,ebp
c001c008:	7c 15                	jl     c001c01f <sysCallGetEnv(regs*)+0x6e>
c001c00a:	85 db                	test   ebx,ebx
c001c00c:	75 0c                	jne    c001c01a <sysCallGetEnv(regs*)+0x69>
c001c00e:	83 c4 1c             	add    esp,0x1c
c001c011:	31 c0                	xor    eax,eax
c001c013:	5b                   	pop    ebx
c001c014:	31 d2                	xor    edx,edx
c001c016:	5e                   	pop    esi
c001c017:	5f                   	pop    edi
c001c018:	5d                   	pop    ebp
c001c019:	c3                   	ret    
c001c01a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c01d:	eb ef                	jmp    c001c00e <sysCallGetEnv(regs*)+0x5d>
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	68 70 c8 02 c0       	push   0xc002c870
c001c027:	e8 bf 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c02c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c030:	83 c4 0c             	add    esp,0xc
c001c033:	57                   	push   edi
c001c034:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c03a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c03d:	50                   	push   eax
c001c03e:	e8 1a e2 ff ff       	call   c001a25d <Krnl::getProcessEnvPair(Process*, int)>
c001c043:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c047:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c04b:	68 2f cc 02 c0       	push   0xc002cc2f
c001c050:	e8 96 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c05b:	85 f6                	test   esi,esi
c001c05d:	75 47                	jne    c001c0a6 <sysCallGetEnv(regs*)+0xf5>
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	55                   	push   ebp
c001c063:	e8 04 47 fe ff       	call   c000076c <strlen>
c001c068:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c06b:	89 c3                	mov    ebx,eax
c001c06d:	e8 fa 46 fe ff       	call   c000076c <strlen>
c001c072:	5a                   	pop    edx
c001c073:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c077:	59                   	pop    ecx
c001c078:	50                   	push   eax
c001c079:	68 73 c8 02 c0       	push   0xc002c873
c001c07e:	e8 68 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c083:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c086:	e8 e1 46 fe ff       	call   c000076c <strlen>
c001c08b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c08e:	89 c3                	mov    ebx,eax
c001c090:	e8 d7 46 fe ff       	call   c000076c <strlen>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c09c:	83 c4 1c             	add    esp,0x1c
c001c09f:	31 d2                	xor    edx,edx
c001c0a1:	5b                   	pop    ebx
c001c0a2:	5e                   	pop    esi
c001c0a3:	5f                   	pop    edi
c001c0a4:	5d                   	pop    ebp
c001c0a5:	c3                   	ret    
c001c0a6:	83 ec 0c             	sub    esp,0xc
c001c0a9:	68 49 cc 02 c0       	push   0xc002cc49
c001c0ae:	e8 38 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c0b3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0b6:	58                   	pop    eax
c001c0b7:	5a                   	pop    edx
c001c0b8:	55                   	push   ebp
c001c0b9:	53                   	push   ebx
c001c0ba:	e8 4d 47 fe ff       	call   c000080c <strcpy>
c001c0bf:	59                   	pop    ecx
c001c0c0:	5e                   	pop    esi
c001c0c1:	68 7d c8 02 c0       	push   0xc002c87d
c001c0c6:	53                   	push   ebx
c001c0c7:	e8 80 48 fe ff       	call   c000094c <strcat>
c001c0cc:	5d                   	pop    ebp
c001c0cd:	58                   	pop    eax
c001c0ce:	57                   	push   edi
c001c0cf:	53                   	push   ebx
c001c0d0:	e8 77 48 fe ff       	call   c000094c <strcat>
c001c0d5:	c7 04 24 63 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc63
c001c0dc:	e8 0a 68 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c0e1:	83 c4 10             	add    esp,0x10
c001c0e4:	e9 25 ff ff ff       	jmp    c001c00e <sysCallGetEnv(regs*)+0x5d>

c001c0e9 <sysAppSettings(regs*)>:
c001c0e9:	57                   	push   edi
c001c0ea:	56                   	push   esi
c001c0eb:	56                   	push   esi
c001c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0f3:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c0f9:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0fe:	66 3d c0 09          	cmp    ax,0x9c0
c001c102:	75 2e                	jne    c001c132 <sysAppSettings(regs*)+0x49>
c001c104:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c10a:	83 e0 1f             	and    eax,0x1f
c001c10d:	3c 01                	cmp    al,0x1
c001c10f:	74 2c                	je     c001c13d <sysAppSettings(regs*)+0x54>
c001c111:	3c 07                	cmp    al,0x7
c001c113:	0f 84 b3 00 00 00    	je     c001c1cc <sysAppSettings(regs*)+0xe3>
c001c119:	84 c0                	test   al,al
c001c11b:	0f 84 d2 00 00 00    	je     c001c1f3 <sysAppSettings(regs*)+0x10a>
c001c121:	3c 08                	cmp    al,0x8
c001c123:	74 63                	je     c001c188 <sysAppSettings(regs*)+0x9f>
c001c125:	59                   	pop    ecx
c001c126:	0f b6 c0             	movzx  eax,al
c001c129:	5e                   	pop    esi
c001c12a:	05 e8 03 00 00       	add    eax,0x3e8
c001c12f:	5f                   	pop    edi
c001c130:	99                   	cdq    
c001c131:	c3                   	ret    
c001c132:	b8 01 00 00 00       	mov    eax,0x1
c001c137:	59                   	pop    ecx
c001c138:	31 d2                	xor    edx,edx
c001c13a:	5e                   	pop    esi
c001c13b:	5f                   	pop    edi
c001c13c:	c3                   	ret    
c001c13d:	50                   	push   eax
c001c13e:	68 00 01 00 00       	push   0x100
c001c143:	6a 00                	push   0x0
c001c145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c14a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c14d:	83 c0 0c             	add    eax,0xc
c001c150:	50                   	push   eax
c001c151:	e8 fa 45 fe ff       	call   c0000750 <memset>
c001c156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15b:	b9 ff 00 00 00       	mov    ecx,0xff
c001c160:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c163:	83 c7 0c             	add    edi,0xc
c001c166:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c16d:	5a                   	pop    edx
c001c16e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c171:	59                   	pop    ecx
c001c172:	8d 50 0c             	lea    edx,[eax+0xc]
c001c175:	52                   	push   edx
c001c176:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c17c:	e8 79 42 ff ff       	call   c00103fa <VgaText::setTitle(char*)>
c001c181:	83 c4 10             	add    esp,0x10
c001c184:	31 c0                	xor    eax,eax
c001c186:	eb af                	jmp    c001c137 <sysAppSettings(regs*)+0x4e>
c001c188:	83 ec 08             	sub    esp,0x8
c001c18b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c191:	83 e0 0f             	and    eax,0xf
c001c194:	50                   	push   eax
c001c195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c19d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1a3:	e8 42 42 ff ff       	call   c00103ea <VgaText::setTitleColour(VgaColour)>
c001c1a8:	5f                   	pop    edi
c001c1a9:	58                   	pop    eax
c001c1aa:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c1b0:	c1 e8 04             	shr    eax,0x4
c001c1b3:	83 e0 0f             	and    eax,0xf
c001c1b6:	50                   	push   eax
c001c1b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1c5:	e8 10 42 ff ff       	call   c00103da <VgaText::setTitleTextColour(VgaColour)>
c001c1ca:	eb b5                	jmp    c001c181 <sysAppSettings(regs*)+0x98>
c001c1cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1da:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c1e0:	c0 e8 06             	shr    al,0x6
c001c1e3:	83 e0 01             	and    eax,0x1
c001c1e6:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c1ec:	31 c0                	xor    eax,eax
c001c1ee:	e9 44 ff ff ff       	jmp    c001c137 <sysAppSettings(regs*)+0x4e>
c001c1f3:	b8 02 00 00 00       	mov    eax,0x2
c001c1f8:	e9 3a ff ff ff       	jmp    c001c137 <sysAppSettings(regs*)+0x4e>

c001c1fd <sysSetFatAttrib(regs*)>:
c001c1fd:	57                   	push   edi
c001c1fe:	56                   	push   esi
c001c1ff:	53                   	push   ebx
c001c200:	83 ec 1c             	sub    esp,0x1c
c001c203:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c207:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c20a:	68 14 01 00 00       	push   0x114
c001c20f:	e8 78 36 ff ff       	call   c000f88c <malloc>
c001c214:	83 c4 0c             	add    esp,0xc
c001c217:	89 c3                	mov    ebx,eax
c001c219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c221:	57                   	push   edi
c001c222:	53                   	push   ebx
c001c223:	e8 22 6c ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001c228:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c22b:	83 c4 0c             	add    esp,0xc
c001c22e:	0f b6 d4             	movzx  edx,ah
c001c231:	0f b6 c0             	movzx  eax,al
c001c234:	52                   	push   edx
c001c235:	50                   	push   eax
c001c236:	53                   	push   ebx
c001c237:	e8 84 6e ff ff       	call   c00130c0 <File::chfatattr(unsigned char, unsigned char)>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	85 db                	test   ebx,ebx
c001c241:	74 14                	je     c001c257 <sysSetFatAttrib(regs*)+0x5a>
c001c243:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c247:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c249:	83 ec 0c             	sub    esp,0xc
c001c24c:	53                   	push   ebx
c001c24d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c250:	83 c4 10             	add    esp,0x10
c001c253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c257:	85 c0                	test   eax,eax
c001c259:	0f 95 c0             	setne  al
c001c25c:	31 d2                	xor    edx,edx
c001c25e:	0f b6 c0             	movzx  eax,al
c001c261:	f7 d8                	neg    eax
c001c263:	83 d2 00             	adc    edx,0x0
c001c266:	83 c4 10             	add    esp,0x10
c001c269:	f7 da                	neg    edx
c001c26b:	5b                   	pop    ebx
c001c26c:	5e                   	pop    esi
c001c26d:	5f                   	pop    edi
c001c26e:	c3                   	ret    

c001c26f <sysPipe(regs*)>:
c001c26f:	57                   	push   edi
c001c270:	56                   	push   esi
c001c271:	53                   	push   ebx
c001c272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c276:	83 ec 0c             	sub    esp,0xc
c001c279:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c27c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c27f:	6a 20                	push   0x20
c001c281:	e8 06 36 ff ff       	call   c000f88c <malloc>
c001c286:	89 c3                	mov    ebx,eax
c001c288:	58                   	pop    eax
c001c289:	5a                   	pop    edx
c001c28a:	68 00 50 00 00       	push   0x5000
c001c28f:	53                   	push   ebx
c001c290:	e8 9d 3e ff ff       	call   c0010132 <Pipe::Pipe(int)>
c001c295:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c298:	e8 fd 4d ff ff       	call   c001109a <UnixFile::getFileDescriptor()>
c001c29d:	89 07                	mov    DWORD PTR [edi],eax
c001c29f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2a2:	e8 f3 4d ff ff       	call   c001109a <UnixFile::getFileDescriptor()>
c001c2a7:	83 c4 10             	add    esp,0x10
c001c2aa:	89 06                	mov    DWORD PTR [esi],eax
c001c2ac:	31 d2                	xor    edx,edx
c001c2ae:	5b                   	pop    ebx
c001c2af:	31 c0                	xor    eax,eax
c001c2b1:	5e                   	pop    esi
c001c2b2:	5f                   	pop    edi
c001c2b3:	c3                   	ret    

c001c2b4 <sysGetUnixTime(regs*)>:
c001c2b4:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001c2b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2c3:	e9 74 75 ff ff       	jmp    c001383c <Clock::timeInSecondsLocal()>

c001c2c8 <string_ends_with(char const*, char const*)>:
c001c2c8:	57                   	push   edi
c001c2c9:	56                   	push   esi
c001c2ca:	53                   	push   ebx
c001c2cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2d3:	83 ec 0c             	sub    esp,0xc
c001c2d6:	53                   	push   ebx
c001c2d7:	e8 90 44 fe ff       	call   c000076c <strlen>
c001c2dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2df:	89 c6                	mov    esi,eax
c001c2e1:	e8 86 44 fe ff       	call   c000076c <strlen>
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	39 c6                	cmp    esi,eax
c001c2eb:	7d 06                	jge    c001c2f3 <string_ends_with(char const*, char const*)+0x2b>
c001c2ed:	5b                   	pop    ebx
c001c2ee:	31 c0                	xor    eax,eax
c001c2f0:	5e                   	pop    esi
c001c2f1:	5f                   	pop    edi
c001c2f2:	c3                   	ret    
c001c2f3:	83 ec 08             	sub    esp,0x8
c001c2f6:	29 c6                	sub    esi,eax
c001c2f8:	57                   	push   edi
c001c2f9:	01 f3                	add    ebx,esi
c001c2fb:	53                   	push   ebx
c001c2fc:	e8 97 45 fe ff       	call   c0000898 <strcmp>
c001c301:	83 c4 10             	add    esp,0x10
c001c304:	85 c0                	test   eax,eax
c001c306:	5b                   	pop    ebx
c001c307:	0f 94 c0             	sete   al
c001c30a:	5e                   	pop    esi
c001c30b:	0f b6 c0             	movzx  eax,al
c001c30e:	5f                   	pop    edi
c001c30f:	c3                   	ret    

c001c310 <sysCallOpen(regs*)>:
c001c310:	56                   	push   esi
c001c311:	53                   	push   ebx
c001c312:	81 ec 04 01 00 00    	sub    esp,0x104
c001c318:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c31f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c322:	85 c9                	test   ecx,ecx
c001c324:	0f 84 b3 00 00 00    	je     c001c3dd <sysCallOpen(regs*)+0xcd>
c001c32a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c32d:	85 c0                	test   eax,eax
c001c32f:	0f 84 a8 00 00 00    	je     c001c3dd <sysCallOpen(regs*)+0xcd>
c001c335:	52                   	push   edx
c001c336:	68 7f c8 02 c0       	push   0xc002c87f
c001c33b:	50                   	push   eax
c001c33c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c340:	56                   	push   esi
c001c341:	e8 5a 69 ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c346:	89 34 24             	mov    DWORD PTR [esp],esi
c001c349:	e8 1e 44 fe ff       	call   c000076c <strlen>
c001c34e:	83 c4 10             	add    esp,0x10
c001c351:	48                   	dec    eax
c001c352:	74 1d                	je     c001c371 <sysCallOpen(regs*)+0x61>
c001c354:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c357:	eb 0f                	jmp    c001c368 <sysCallOpen(regs*)+0x58>
c001c359:	80 fa 3a             	cmp    dl,0x3a
c001c35c:	74 0f                	je     c001c36d <sysCallOpen(regs*)+0x5d>
c001c35e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c362:	48                   	dec    eax
c001c363:	74 0c                	je     c001c371 <sysCallOpen(regs*)+0x61>
c001c365:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c368:	80 fa 2e             	cmp    dl,0x2e
c001c36b:	75 ec                	jne    c001c359 <sysCallOpen(regs*)+0x49>
c001c36d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c371:	83 ec 08             	sub    esp,0x8
c001c374:	68 83 c8 02 c0       	push   0xc002c883
c001c379:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c37c:	e8 47 ff ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	85 c0                	test   eax,eax
c001c386:	75 17                	jne    c001c39f <sysCallOpen(regs*)+0x8f>
c001c388:	83 ec 08             	sub    esp,0x8
c001c38b:	68 a4 c8 02 c0       	push   0xc002c8a4
c001c390:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c393:	e8 30 ff ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c398:	83 c4 10             	add    esp,0x10
c001c39b:	85 c0                	test   eax,eax
c001c39d:	74 51                	je     c001c3f0 <sysCallOpen(regs*)+0xe0>
c001c39f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3a2:	83 ec 08             	sub    esp,0x8
c001c3a5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3b5:	ff 30                	push   DWORD PTR [eax]
c001c3b7:	68 88 c8 02 c0       	push   0xc002c888
c001c3bc:	e8 2a 65 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c3c1:	c7 04 24 97 c8 02 c0 	mov    DWORD PTR [esp],0xc002c897
c001c3c8:	e8 1e 65 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	81 c4 04 01 00 00    	add    esp,0x104
c001c3d6:	31 c0                	xor    eax,eax
c001c3d8:	31 d2                	xor    edx,edx
c001c3da:	5b                   	pop    ebx
c001c3db:	5e                   	pop    esi
c001c3dc:	c3                   	ret    
c001c3dd:	81 c4 04 01 00 00    	add    esp,0x104
c001c3e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3ed:	5b                   	pop    ebx
c001c3ee:	5e                   	pop    esi
c001c3ef:	c3                   	ret    
c001c3f0:	83 ec 08             	sub    esp,0x8
c001c3f3:	68 84 c8 02 c0       	push   0xc002c884
c001c3f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fb:	e8 98 44 fe ff       	call   c0000898 <strcmp>
c001c400:	83 c4 10             	add    esp,0x10
c001c403:	85 c0                	test   eax,eax
c001c405:	74 98                	je     c001c39f <sysCallOpen(regs*)+0x8f>
c001c407:	83 ec 08             	sub    esp,0x8
c001c40a:	68 83 c8 02 c0       	push   0xc002c883
c001c40f:	56                   	push   esi
c001c410:	e8 b3 fe ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c415:	83 c4 10             	add    esp,0x10
c001c418:	85 c0                	test   eax,eax
c001c41a:	75 83                	jne    c001c39f <sysCallOpen(regs*)+0x8f>
c001c41c:	83 ec 08             	sub    esp,0x8
c001c41f:	68 a9 c8 02 c0       	push   0xc002c8a9
c001c424:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c427:	e8 9c fe ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	85 c0                	test   eax,eax
c001c431:	0f 85 d9 00 00 00    	jne    c001c510 <sysCallOpen(regs*)+0x200>
c001c437:	83 ec 08             	sub    esp,0x8
c001c43a:	68 ae c8 02 c0       	push   0xc002c8ae
c001c43f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c442:	e8 81 fe ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	85 c0                	test   eax,eax
c001c44c:	0f 85 be 00 00 00    	jne    c001c510 <sysCallOpen(regs*)+0x200>
c001c452:	83 ec 08             	sub    esp,0x8
c001c455:	68 aa c8 02 c0       	push   0xc002c8aa
c001c45a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c45d:	e8 36 44 fe ff       	call   c0000898 <strcmp>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	85 c0                	test   eax,eax
c001c467:	0f 84 a3 00 00 00    	je     c001c510 <sysCallOpen(regs*)+0x200>
c001c46d:	83 ec 08             	sub    esp,0x8
c001c470:	68 a9 c8 02 c0       	push   0xc002c8a9
c001c475:	56                   	push   esi
c001c476:	e8 4d fe ff ff       	call   c001c2c8 <string_ends_with(char const*, char const*)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	85 c0                	test   eax,eax
c001c480:	0f 85 8a 00 00 00    	jne    c001c510 <sysCallOpen(regs*)+0x200>
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	68 14 01 00 00       	push   0x114
c001c48e:	e8 f9 33 ff ff       	call   c000f88c <malloc>
c001c493:	83 c4 0c             	add    esp,0xc
c001c496:	89 c6                	mov    esi,eax
c001c498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c49d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a3:	56                   	push   esi
c001c4a4:	e8 a1 69 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001c4a9:	83 c4 10             	add    esp,0x10
c001c4ac:	85 f6                	test   esi,esi
c001c4ae:	0f 84 29 ff ff ff    	je     c001c3dd <sysCallOpen(regs*)+0xcd>
c001c4b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4b7:	0f b6 c2             	movzx  eax,dl
c001c4ba:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4bd:	89 d0                	mov    eax,edx
c001c4bf:	83 e0 01             	and    eax,0x1
c001c4c2:	f6 c2 02             	test   dl,0x2
c001c4c5:	74 03                	je     c001c4ca <sysCallOpen(regs*)+0x1ba>
c001c4c7:	83 c8 02             	or     eax,0x2
c001c4ca:	f6 c2 04             	test   dl,0x4
c001c4cd:	74 03                	je     c001c4d2 <sysCallOpen(regs*)+0x1c2>
c001c4cf:	83 c8 04             	or     eax,0x4
c001c4d2:	f6 c2 08             	test   dl,0x8
c001c4d5:	74 03                	je     c001c4da <sysCallOpen(regs*)+0x1ca>
c001c4d7:	83 c8 0a             	or     eax,0xa
c001c4da:	83 e2 10             	and    edx,0x10
c001c4dd:	74 03                	je     c001c4e2 <sysCallOpen(regs*)+0x1d2>
c001c4df:	83 c8 12             	or     eax,0x12
c001c4e2:	83 ec 08             	sub    esp,0x8
c001c4e5:	50                   	push   eax
c001c4e6:	56                   	push   esi
c001c4e7:	e8 c2 69 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001c4ec:	83 c4 10             	add    esp,0x10
c001c4ef:	85 c0                	test   eax,eax
c001c4f1:	0f 85 e6 fe ff ff    	jne    c001c3dd <sysCallOpen(regs*)+0xcd>
c001c4f7:	83 ec 0c             	sub    esp,0xc
c001c4fa:	56                   	push   esi
c001c4fb:	e8 9a 4b ff ff       	call   c001109a <UnixFile::getFileDescriptor()>
c001c500:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c503:	89 02                	mov    DWORD PTR [edx],eax
c001c505:	c1 f8 1f             	sar    eax,0x1f
c001c508:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c50b:	e9 bd fe ff ff       	jmp    c001c3cd <sysCallOpen(regs*)+0xbd>
c001c510:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c513:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c520:	e9 ab fe ff ff       	jmp    c001c3d0 <sysCallOpen(regs*)+0xc0>

c001c525 <Sys::loadSyscalls()>:
c001c525:	c7 05 80 1b 03 c0 15 b6 01 c0 	mov    DWORD PTR ds:0xc0031b80,0xc001b615
c001c52f:	c7 05 84 1b 03 c0 7a b1 01 c0 	mov    DWORD PTR ds:0xc0031b84,0xc001b17a
c001c539:	c7 05 88 1b 03 c0 68 b3 01 c0 	mov    DWORD PTR ds:0xc0031b88,0xc001b368
c001c543:	c7 05 8c 1b 03 c0 4b b5 01 c0 	mov    DWORD PTR ds:0xc0031b8c,0xc001b54b
c001c54d:	c7 05 90 1b 03 c0 00 b3 01 c0 	mov    DWORD PTR ds:0xc0031b90,0xc001b300
c001c557:	c7 05 94 1b 03 c0 b1 b1 01 c0 	mov    DWORD PTR ds:0xc0031b94,0xc001b1b1
c001c561:	c7 05 98 1b 03 c0 92 b1 01 c0 	mov    DWORD PTR ds:0xc0031b98,0xc001b192
c001c56b:	c7 05 9c 1b 03 c0 bd b3 01 c0 	mov    DWORD PTR ds:0xc0031b9c,0xc001b3bd
c001c575:	c7 05 a4 1b 03 c0 50 bb 01 c0 	mov    DWORD PTR ds:0xc0031ba4,0xc001bb50
c001c57f:	c7 05 a0 1b 03 c0 10 c3 01 c0 	mov    DWORD PTR ds:0xc0031ba0,0xc001c310
c001c589:	c7 05 a8 1b 03 c0 d8 bb 01 c0 	mov    DWORD PTR ds:0xc0031ba8,0xc001bbd8
c001c593:	c7 05 ac 1b 03 c0 3f b8 01 c0 	mov    DWORD PTR ds:0xc0031bac,0xc001b83f
c001c59d:	c7 05 b0 1b 03 c0 5b b6 01 c0 	mov    DWORD PTR ds:0xc0031bb0,0xc001b65b
c001c5a7:	c7 05 b4 1b 03 c0 60 b6 01 c0 	mov    DWORD PTR ds:0xc0031bb4,0xc001b660
c001c5b1:	c7 05 b8 1b 03 c0 b3 bc 01 c0 	mov    DWORD PTR ds:0xc0031bb8,0xc001bcb3
c001c5bb:	c7 05 bc 1b 03 c0 4d bc 01 c0 	mov    DWORD PTR ds:0xc0031bbc,0xc001bc4d
c001c5c5:	c7 05 c0 1b 03 c0 27 b9 01 c0 	mov    DWORD PTR ds:0xc0031bc0,0xc001b927
c001c5cf:	c7 05 c4 1b 03 c0 90 b9 01 c0 	mov    DWORD PTR ds:0xc0031bc4,0xc001b990
c001c5d9:	c7 05 c8 1b 03 c0 0d ba 01 c0 	mov    DWORD PTR ds:0xc0031bc8,0xc001ba0d
c001c5e3:	c7 05 cc 1b 03 c0 65 b6 01 c0 	mov    DWORD PTR ds:0xc0031bcc,0xc001b665
c001c5ed:	c7 05 d0 1b 03 c0 23 bd 01 c0 	mov    DWORD PTR ds:0xc0031bd0,0xc001bd23
c001c5f7:	c7 05 d4 1b 03 c0 3d bd 01 c0 	mov    DWORD PTR ds:0xc0031bd4,0xc001bd3d
c001c601:	c7 05 d8 1b 03 c0 3d bd 01 c0 	mov    DWORD PTR ds:0xc0031bd8,0xc001bd3d
c001c60b:	c7 05 dc 1b 03 c0 7e bd 01 c0 	mov    DWORD PTR ds:0xc0031bdc,0xc001bd7e
c001c615:	c7 05 e0 1b 03 c0 e2 bd 01 c0 	mov    DWORD PTR ds:0xc0031be0,0xc001bde2
c001c61f:	c7 05 e4 1b 03 c0 11 b8 01 c0 	mov    DWORD PTR ds:0xc0031be4,0xc001b811
c001c629:	c7 05 e8 1b 03 c0 46 be 01 c0 	mov    DWORD PTR ds:0xc0031be8,0xc001be46
c001c633:	c7 05 ec 1b 03 c0 ce b7 01 c0 	mov    DWORD PTR ds:0xc0031bec,0xc001b7ce
c001c63d:	c7 05 f0 1b 03 c0 92 be 01 c0 	mov    DWORD PTR ds:0xc0031bf0,0xc001be92
c001c647:	c7 05 f4 1b 03 c0 cd b8 01 c0 	mov    DWORD PTR ds:0xc0031bf4,0xc001b8cd
c001c651:	c7 05 f8 1b 03 c0 15 bf 01 c0 	mov    DWORD PTR ds:0xc0031bf8,0xc001bf15
c001c65b:	c7 05 fc 1b 03 c0 90 ba 01 c0 	mov    DWORD PTR ds:0xc0031bfc,0xc001ba90
c001c665:	c7 05 00 1c 03 c0 3c bf 01 c0 	mov    DWORD PTR ds:0xc0031c00,0xc001bf3c
c001c66f:	c7 05 04 1c 03 c0 b1 bf 01 c0 	mov    DWORD PTR ds:0xc0031c04,0xc001bfb1
c001c679:	c7 05 08 1c 03 c0 e9 c0 01 c0 	mov    DWORD PTR ds:0xc0031c08,0xc001c0e9
c001c683:	c7 05 0c 1c 03 c0 6f b6 01 c0 	mov    DWORD PTR ds:0xc0031c0c,0xc001b66f
c001c68d:	c7 05 10 1c 03 c0 d9 b6 01 c0 	mov    DWORD PTR ds:0xc0031c10,0xc001b6d9
c001c697:	c7 05 14 1c 03 c0 1f b7 01 c0 	mov    DWORD PTR ds:0xc0031c14,0xc001b71f
c001c6a1:	c7 05 18 1c 03 c0 fd c1 01 c0 	mov    DWORD PTR ds:0xc0031c18,0xc001c1fd
c001c6ab:	c7 05 1c 1c 03 c0 58 bd 01 c0 	mov    DWORD PTR ds:0xc0031c1c,0xc001bd58
c001c6b5:	c7 05 20 1c 03 c0 70 b7 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001b770
c001c6bf:	c7 05 24 1c 03 c0 6f c2 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001c26f
c001c6c9:	c7 05 28 1c 03 c0 b4 c2 01 c0 	mov    DWORD PTR ds:0xc0031c28,0xc001c2b4
c001c6d3:	c7 05 2c 1c 03 c0 58 b2 01 c0 	mov    DWORD PTR ds:0xc0031c2c,0xc001b258
c001c6dd:	c7 05 30 1c 03 c0 d9 b3 01 c0 	mov    DWORD PTR ds:0xc0031c30,0xc001b3d9
c001c6e7:	c7 05 34 1c 03 c0 01 b5 01 c0 	mov    DWORD PTR ds:0xc0031c34,0xc001b501
c001c6f1:	c7 05 38 1c 03 c0 44 b1 01 c0 	mov    DWORD PTR ds:0xc0031c38,0xc001b144
c001c6fb:	c7 05 3c 1c 03 c0 b3 b5 01 c0 	mov    DWORD PTR ds:0xc0031c3c,0xc001b5b3
c001c705:	c7 05 40 1c 03 c0 bd b1 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001b1bd
c001c70f:	c7 05 44 1c 03 c0 d4 b1 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001b1d4
c001c719:	c3                   	ret    

c001c71a <Sys::systemCall(regs*, void*)>:
c001c71a:	53                   	push   ebx
c001c71b:	83 ec 08             	sub    esp,0x8
c001c71e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c722:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c725:	83 f8 7f             	cmp    eax,0x7f
c001c728:	77 16                	ja     c001c740 <Sys::systemCall(regs*, void*)+0x26>
c001c72a:	8b 14 85 80 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce480]
c001c731:	85 d2                	test   edx,edx
c001c733:	74 0b                	je     c001c740 <Sys::systemCall(regs*, void*)+0x26>
c001c735:	83 ec 0c             	sub    esp,0xc
c001c738:	53                   	push   ebx
c001c739:	ff d2                	call   edx
c001c73b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c73e:	eb 0d                	jmp    c001c74d <Sys::systemCall(regs*, void*)+0x33>
c001c740:	52                   	push   edx
c001c741:	52                   	push   edx
c001c742:	50                   	push   eax
c001c743:	68 b3 c8 02 c0       	push   0xc002c8b3
c001c748:	e8 9e 61 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c74d:	83 c4 10             	add    esp,0x10
c001c750:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c755:	31 d2                	xor    edx,edx
c001c757:	83 c4 08             	add    esp,0x8
c001c75a:	5b                   	pop    ebx
c001c75b:	c3                   	ret    

c001c75c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c75c:	55                   	push   ebp
c001c75d:	57                   	push   edi
c001c75e:	56                   	push   esi
c001c75f:	53                   	push   ebx
c001c760:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c766:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c76d:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c774:	85 c0                	test   eax,eax
c001c776:	0f 95 c1             	setne  cl
c001c779:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c781:	0f 94 c2             	sete   dl
c001c784:	84 d1                	test   cl,dl
c001c786:	74 23                	je     c001c7ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c788:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c78e:	74 1b                	je     c001c7ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c790:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c796:	89 da                	mov    edx,ebx
c001c798:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c79e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c7a4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c7ab:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c7b2:	05 ff 0f 00 00       	add    eax,0xfff
c001c7b7:	83 ec 0c             	sub    esp,0xc
c001c7ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7be:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c7c4:	c1 e8 0c             	shr    eax,0xc
c001c7c7:	89 fe                	mov    esi,edi
c001c7c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7cd:	c1 ee 0c             	shr    esi,0xc
c001c7d0:	6a 01                	push   0x1
c001c7d2:	e8 0e 4d ff ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c001c7d7:	89 c5                	mov    ebp,eax
c001c7d9:	58                   	pop    eax
c001c7da:	5a                   	pop    edx
c001c7db:	56                   	push   esi
c001c7dc:	68 37 c9 02 c0       	push   0xc002c937
c001c7e1:	e8 05 61 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c7e6:	59                   	pop    ecx
c001c7e7:	58                   	pop    eax
c001c7e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7ec:	68 49 c9 02 c0       	push   0xc002c949
c001c7f1:	e8 f5 60 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c7f6:	83 c4 10             	add    esp,0x10
c001c7f9:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c7ff:	0f 86 31 01 00 00    	jbe    c001c936 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c805:	c1 e6 0c             	shl    esi,0xc
c001c808:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c80b:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c80e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c812:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c819:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c81c:	01 df                	add    edi,ebx
c001c81e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c821:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c825:	0f 84 08 01 00 00    	je     c001c933 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c82b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c831:	76 05                	jbe    c001c838 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c833:	bf 00 10 00 00       	mov    edi,0x1000
c001c838:	83 ec 0c             	sub    esp,0xc
c001c83b:	31 d2                	xor    edx,edx
c001c83d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c844:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c846:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c84a:	50                   	push   eax
c001c84b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c84f:	56                   	push   esi
c001c850:	52                   	push   edx
c001c851:	57                   	push   edi
c001c852:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c859:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c85c:	83 c4 20             	add    esp,0x20
c001c85f:	85 c0                	test   eax,eax
c001c861:	74 0a                	je     c001c86d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c863:	53                   	push   ebx
c001c864:	53                   	push   ebx
c001c865:	50                   	push   eax
c001c866:	68 5b c9 02 c0       	push   0xc002c95b
c001c86b:	eb 0f                	jmp    c001c87c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c86d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c871:	74 20                	je     c001c893 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c873:	51                   	push   ecx
c001c874:	51                   	push   ecx
c001c875:	6a 00                	push   0x0
c001c877:	68 86 c9 02 c0       	push   0xc002c986
c001c87c:	e8 6a 60 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c881:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c884:	e8 1c 51 ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c889:	83 c4 10             	add    esp,0x10
c001c88c:	31 c0                	xor    eax,eax
c001c88e:	e9 68 01 00 00       	jmp    c001c9fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c893:	fa                   	cli    
c001c894:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001c89a:	e8 0e 33 ff ff       	call   c000fbad <Phys::allocatePage()>
c001c89f:	6a 07                	push   0x7
c001c8a1:	89 c7                	mov    edi,eax
c001c8a3:	55                   	push   ebp
c001c8a4:	50                   	push   eax
c001c8a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8ad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8b3:	e8 64 54 ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8b8:	83 c4 0c             	add    esp,0xc
c001c8bb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8c8:	6a 00                	push   0x0
c001c8ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8d8:	e8 99 52 ff ff       	call   c0011b76 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8dd:	58                   	pop    eax
c001c8de:	5a                   	pop    edx
c001c8df:	68 07 0c 00 00       	push   0xc07
c001c8e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8e8:	57                   	push   edi
c001c8e9:	89 ef                	mov    edi,ebp
c001c8eb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8f2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f8:	6a 00                	push   0x0
c001c8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c902:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c908:	e8 cb 57 ff ff       	call   c00120d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c90d:	b9 00 10 00 00       	mov    ecx,0x1000
c001c912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c914:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001c919:	83 c4 20             	add    esp,0x20
c001c91c:	48                   	dec    eax
c001c91d:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001c922:	85 c0                	test   eax,eax
c001c924:	75 01                	jne    c001c927 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c926:	fb                   	sti    
c001c927:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c92e:	e9 df fe ff ff       	jmp    c001c812 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c933:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c936:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c93e:	0f 86 a9 00 00 00    	jbe    c001c9ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c944:	fa                   	cli    
c001c945:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001c94b:	51                   	push   ecx
c001c94c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c953:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c959:	6a 00                	push   0x0
c001c95b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c960:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c963:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c969:	e8 08 52 ff ff       	call   c0011b76 <VAS::mapOtherVASIn(bool, VAS*)>
c001c96e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c972:	c1 e6 0c             	shl    esi,0xc
c001c975:	01 de                	add    esi,ebx
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	39 de                	cmp    esi,ebx
c001c97c:	74 61                	je     c001c9df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c97e:	e8 2a 32 ff ff       	call   c000fbad <Phys::allocatePage()>
c001c983:	6a 07                	push   0x7
c001c985:	89 c7                	mov    edi,eax
c001c987:	55                   	push   ebp
c001c988:	50                   	push   eax
c001c989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c991:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c997:	e8 80 53 ff ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c99c:	58                   	pop    eax
c001c99d:	5a                   	pop    edx
c001c99e:	68 07 0c 00 00       	push   0xc07
c001c9a3:	53                   	push   ebx
c001c9a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9aa:	57                   	push   edi
c001c9ab:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9b2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b8:	6a 00                	push   0x0
c001c9ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c8:	e8 0b 57 ff ff       	call   c00120d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9cd:	83 c4 1c             	add    esp,0x1c
c001c9d0:	68 00 10 00 00       	push   0x1000
c001c9d5:	6a 00                	push   0x0
c001c9d7:	55                   	push   ebp
c001c9d8:	e8 73 3d fe ff       	call   c0000750 <memset>
c001c9dd:	eb 98                	jmp    c001c977 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c9df:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001c9e4:	48                   	dec    eax
c001c9e5:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001c9ea:	75 01                	jne    c001c9ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9ec:	fb                   	sti    
c001c9ed:	83 ec 0c             	sub    esp,0xc
c001c9f0:	55                   	push   ebp
c001c9f1:	e8 af 4f ff ff       	call   c00119a5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	b0 01                	mov    al,0x1
c001c9fb:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca01:	5b                   	pop    ebx
c001ca02:	5e                   	pop    esi
c001ca03:	5f                   	pop    edi
c001ca04:	5d                   	pop    ebp
c001ca05:	c3                   	ret    

c001ca06 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca06:	55                   	push   ebp
c001ca07:	57                   	push   edi
c001ca08:	56                   	push   esi
c001ca09:	53                   	push   ebx
c001ca0a:	83 ec 48             	sub    esp,0x48
c001ca0d:	68 14 01 00 00       	push   0x114
c001ca12:	e8 75 2e ff ff       	call   c000f88c <malloc>
c001ca17:	83 c4 0c             	add    esp,0xc
c001ca1a:	89 c6                	mov    esi,eax
c001ca1c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca24:	50                   	push   eax
c001ca25:	e8 20 64 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001ca2a:	58                   	pop    eax
c001ca2b:	5a                   	pop    edx
c001ca2c:	6a 01                	push   0x1
c001ca2e:	56                   	push   esi
c001ca2f:	e8 7a 64 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001ca34:	83 c4 10             	add    esp,0x10
c001ca37:	85 c0                	test   eax,eax
c001ca39:	0f 85 47 01 00 00    	jne    c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca3f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca47:	83 ec 0c             	sub    esp,0xc
c001ca4a:	6a 34                	push   0x34
c001ca4c:	e8 3b 2e ff ff       	call   c000f88c <malloc>
c001ca51:	89 c3                	mov    ebx,eax
c001ca53:	58                   	pop    eax
c001ca54:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca56:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca5a:	57                   	push   edi
c001ca5b:	53                   	push   ebx
c001ca5c:	6a 00                	push   0x0
c001ca5e:	6a 34                	push   0x34
c001ca60:	56                   	push   esi
c001ca61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca64:	83 c4 20             	add    esp,0x20
c001ca67:	85 c0                	test   eax,eax
c001ca69:	0f 85 17 01 00 00    	jne    c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca6f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca75:	0f 85 0b 01 00 00    	jne    c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca7e:	85 c0                	test   eax,eax
c001ca80:	0f 84 00 01 00 00    	je     c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca86:	31 d2                	xor    edx,edx
c001ca88:	55                   	push   ebp
c001ca89:	52                   	push   edx
c001ca8a:	50                   	push   eax
c001ca8b:	56                   	push   esi
c001ca8c:	e8 db 64 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001ca91:	83 c4 10             	add    esp,0x10
c001ca94:	85 c0                	test   eax,eax
c001ca96:	0f 85 ea 00 00 00    	jne    c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca9c:	83 ec 0c             	sub    esp,0xc
c001ca9f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caa2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caa6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caaa:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caae:	0f af c2             	imul   eax,edx
c001cab1:	50                   	push   eax
c001cab2:	e8 d5 2d ff ff       	call   c000f88c <malloc>
c001cab7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cab9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cabd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cac0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cac4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cac8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cacc:	0f af c2             	imul   eax,edx
c001cacf:	99                   	cdq    
c001cad0:	52                   	push   edx
c001cad1:	50                   	push   eax
c001cad2:	56                   	push   esi
c001cad3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cad6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cad9:	83 c4 20             	add    esp,0x20
c001cadc:	85 c0                	test   eax,eax
c001cade:	0f 84 a2 00 00 00    	je     c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae4:	31 d2                	xor    edx,edx
c001cae6:	51                   	push   ecx
c001cae7:	52                   	push   edx
c001cae8:	50                   	push   eax
c001cae9:	56                   	push   esi
c001caea:	e8 7d 64 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001caef:	83 c4 10             	add    esp,0x10
c001caf2:	85 c0                	test   eax,eax
c001caf4:	0f 85 8c 00 00 00    	jne    c001cb86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafa:	83 ec 0c             	sub    esp,0xc
c001cafd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb01:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb05:	31 ed                	xor    ebp,ebp
c001cb07:	0f af c2             	imul   eax,edx
c001cb0a:	50                   	push   eax
c001cb0b:	e8 7c 2d ff ff       	call   c000f88c <malloc>
c001cb10:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb16:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb1d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb21:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb25:	0f af c2             	imul   eax,edx
c001cb28:	99                   	cdq    
c001cb29:	52                   	push   edx
c001cb2a:	50                   	push   eax
c001cb2b:	56                   	push   esi
c001cb2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb2f:	83 c4 20             	add    esp,0x20
c001cb32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb3a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb3e:	0f 86 80 00 00 00    	jbe    c001cbc4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb44:	0f b7 fd             	movzx  edi,bp
c001cb47:	c1 e7 05             	shl    edi,0x5
c001cb4a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb4e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb51:	75 6b                	jne    c001cbbe <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb53:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb5a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb61:	52                   	push   edx
c001cb62:	31 d2                	xor    edx,edx
c001cb64:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb67:	52                   	push   edx
c001cb68:	50                   	push   eax
c001cb69:	56                   	push   esi
c001cb6a:	e8 fd 63 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	85 c0                	test   eax,eax
c001cb74:	74 17                	je     c001cb8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	68 b2 c9 02 c0       	push   0xc002c9b2
c001cb7e:	e8 68 5d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	31 c0                	xor    eax,eax
c001cb88:	e9 87 00 00 00       	jmp    c001cc14 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb8d:	83 ec 0c             	sub    esp,0xc
c001cb90:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb93:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb96:	50                   	push   eax
c001cb97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb9f:	56                   	push   esi
c001cba0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cba4:	e8 b3 fb ff ff       	call   c001c75c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cba9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbad:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbb1:	83 c4 20             	add    esp,0x20
c001cbb4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbb8:	73 04                	jae    c001cbbe <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbbe:	45                   	inc    ebp
c001cbbf:	e9 76 ff ff ff       	jmp    c001cb3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cbc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbd0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbd6:	83 ec 0c             	sub    esp,0xc
c001cbd9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbe4:	05 00 10 00 00       	add    eax,0x1000
c001cbe9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf0:	e8 a7 2c ff ff       	call   c000f89c <free>
c001cbf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbf8:	e8 9f 2c ff ff       	call   c000f89c <free>
c001cbfd:	58                   	pop    eax
c001cbfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc02:	e8 95 2c ff ff       	call   c000f89c <free>
c001cc07:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc0a:	e8 fd 62 ff ff       	call   c0012f0c <File::close()>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	b0 01                	mov    al,0x1
c001cc14:	83 c4 3c             	add    esp,0x3c
c001cc17:	5b                   	pop    ebx
c001cc18:	5e                   	pop    esi
c001cc19:	5f                   	pop    edi
c001cc1a:	5d                   	pop    ebp
c001cc1b:	c3                   	ret    

c001cc1c <Thr::runtimeReferenceHelper()>:
c001cc1c:	83 ec 18             	sub    esp,0x18
c001cc1f:	68 ba c9 02 c0       	push   0xc002c9ba
c001cc24:	e8 c2 5c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001cc29:	fa                   	cli    
c001cc2a:	83 c4 10             	add    esp,0x10
c001cc2d:	eb fe                	jmp    c001cc2d <Thr::runtimeReferenceHelper()+0x11>

c001cc2f <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc2f:	57                   	push   edi
c001cc30:	56                   	push   esi
c001cc31:	53                   	push   ebx
c001cc32:	31 db                	xor    ebx,ebx
c001cc34:	39 1d 20 25 03 c0    	cmp    DWORD PTR ds:0xc0032520,ebx
c001cc3a:	7e 3c                	jle    c001cc78 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc3c:	8b 34 9d a0 24 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdb60]
c001cc43:	31 ff                	xor    edi,edi
c001cc45:	39 3c 9d a0 23 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdc60],edi
c001cc4c:	7e 27                	jle    c001cc75 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc4e:	50                   	push   eax
c001cc4f:	50                   	push   eax
c001cc50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc54:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc56:	03 04 9d 20 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdbe0]
c001cc5d:	50                   	push   eax
c001cc5e:	e8 35 3c fe ff       	call   c0000898 <strcmp>
c001cc63:	83 c4 10             	add    esp,0x10
c001cc66:	85 c0                	test   eax,eax
c001cc68:	75 05                	jne    c001cc6f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc6d:	eb 0b                	jmp    c001cc7a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc6f:	83 c6 10             	add    esi,0x10
c001cc72:	47                   	inc    edi
c001cc73:	eb d0                	jmp    c001cc45 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc75:	43                   	inc    ebx
c001cc76:	eb bc                	jmp    c001cc34 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc78:	31 c0                	xor    eax,eax
c001cc7a:	5b                   	pop    ebx
c001cc7b:	5e                   	pop    esi
c001cc7c:	5f                   	pop    edi
c001cc7d:	c3                   	ret    

c001cc7e <Thr::loadKernelSymbolTable(char const*)>:
c001cc7e:	55                   	push   ebp
c001cc7f:	57                   	push   edi
c001cc80:	56                   	push   esi
c001cc81:	53                   	push   ebx
c001cc82:	83 ec 68             	sub    esp,0x68
c001cc85:	8b 35 70 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032570
c001cc8b:	68 14 01 00 00       	push   0x114
c001cc90:	e8 f7 2b ff ff       	call   c000f88c <malloc>
c001cc95:	83 c4 0c             	add    esp,0xc
c001cc98:	89 c3                	mov    ebx,eax
c001cc9a:	56                   	push   esi
c001cc9b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc9f:	50                   	push   eax
c001cca0:	e8 a5 61 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001cca5:	5e                   	pop    esi
c001cca6:	5f                   	pop    edi
c001cca7:	6a 01                	push   0x1
c001cca9:	53                   	push   ebx
c001ccaa:	e8 ff 61 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	85 c0                	test   eax,eax
c001ccb4:	74 0a                	je     c001ccc0 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	68 dc c9 02 c0       	push   0xc002c9dc
c001ccbe:	eb 34                	jmp    c001ccf4 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ccc0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	6a 34                	push   0x34
c001cccd:	e8 ba 2b ff ff       	call   c000f88c <malloc>
c001ccd2:	59                   	pop    ecx
c001ccd3:	89 c7                	mov    edi,eax
c001ccd5:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccdb:	56                   	push   esi
c001ccdc:	57                   	push   edi
c001ccdd:	6a 00                	push   0x0
c001ccdf:	6a 34                	push   0x34
c001cce1:	53                   	push   ebx
c001cce2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cce5:	83 c4 20             	add    esp,0x20
c001cce8:	85 c0                	test   eax,eax
c001ccea:	74 17                	je     c001cd03 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	68 f3 c9 02 c0       	push   0xc002c9f3
c001ccf4:	e8 28 d6 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	31 c0                	xor    eax,eax
c001ccfe:	e9 31 02 00 00       	jmp    c001cf34 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd03:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd09:	75 e1                	jne    c001ccec <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd0b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd0e:	85 c0                	test   eax,eax
c001cd10:	74 da                	je     c001ccec <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd12:	52                   	push   edx
c001cd13:	31 d2                	xor    edx,edx
c001cd15:	52                   	push   edx
c001cd16:	50                   	push   eax
c001cd17:	53                   	push   ebx
c001cd18:	e8 4f 62 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	85 c0                	test   eax,eax
c001cd22:	75 c8                	jne    c001ccec <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd24:	83 ec 0c             	sub    esp,0xc
c001cd27:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd2f:	31 ed                	xor    ebp,ebp
c001cd31:	0f af c2             	imul   eax,edx
c001cd34:	50                   	push   eax
c001cd35:	e8 52 2b ff ff       	call   c000f88c <malloc>
c001cd3a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd40:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd4b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd4f:	0f af c2             	imul   eax,edx
c001cd52:	99                   	cdq    
c001cd53:	52                   	push   edx
c001cd54:	50                   	push   eax
c001cd55:	53                   	push   ebx
c001cd56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd59:	83 c4 20             	add    esp,0x20
c001cd5c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd64:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd6c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd7c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd80:	0f 86 aa 00 00 00    	jbe    c001ce30 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd86:	0f b7 f5             	movzx  esi,bp
c001cd89:	6b f6 28             	imul   esi,esi,0x28
c001cd8c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd90:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd97:	50                   	push   eax
c001cd98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd9c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cda0:	8b 16                	mov    edx,DWORD PTR [esi]
c001cda2:	6b c0 28             	imul   eax,eax,0x28
c001cda5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cda9:	89 d0                	mov    eax,edx
c001cdab:	31 d2                	xor    edx,edx
c001cdad:	52                   	push   edx
c001cdae:	50                   	push   eax
c001cdaf:	53                   	push   ebx
c001cdb0:	e8 b7 61 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	6a 20                	push   0x20
c001cdba:	6a 00                	push   0x0
c001cdbc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdc0:	52                   	push   edx
c001cdc1:	e8 8a 39 fe ff       	call   c0000750 <memset>
c001cdc6:	58                   	pop    eax
c001cdc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdc9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdcd:	51                   	push   ecx
c001cdce:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdd2:	52                   	push   edx
c001cdd3:	6a 00                	push   0x0
c001cdd5:	6a 1f                	push   0x1f
c001cdd7:	53                   	push   ebx
c001cdd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cddb:	83 c4 18             	add    esp,0x18
c001cdde:	68 0a ca 02 c0       	push   0xc002ca0a
c001cde3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cde7:	52                   	push   edx
c001cde8:	e8 ab 3a fe ff       	call   c0000898 <strcmp>
c001cded:	83 c4 10             	add    esp,0x10
c001cdf0:	85 c0                	test   eax,eax
c001cdf2:	75 0f                	jne    c001ce03 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdf4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce03:	50                   	push   eax
c001ce04:	50                   	push   eax
c001ce05:	68 12 ca 02 c0       	push   0xc002ca12
c001ce0a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce0e:	50                   	push   eax
c001ce0f:	e8 84 3a fe ff       	call   c0000898 <strcmp>
c001ce14:	83 c4 10             	add    esp,0x10
c001ce17:	85 c0                	test   eax,eax
c001ce19:	75 0f                	jne    c001ce2a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce2a:	45                   	inc    ebp
c001ce2b:	e9 4c ff ff ff       	jmp    c001cd7c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce35:	75 10                	jne    c001ce47 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce37:	83 ec 0c             	sub    esp,0xc
c001ce3a:	68 1a ca 02 c0       	push   0xc002ca1a
c001ce3f:	e8 dd d4 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001ce44:	83 c4 10             	add    esp,0x10
c001ce47:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce4c:	75 10                	jne    c001ce5e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	68 1a ca 02 c0       	push   0xc002ca1a
c001ce56:	e8 c6 d4 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	31 d2                	xor    edx,edx
c001ce60:	50                   	push   eax
c001ce61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce65:	52                   	push   edx
c001ce66:	50                   	push   eax
c001ce67:	53                   	push   ebx
c001ce68:	e8 ff 60 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001ce6d:	5a                   	pop    edx
c001ce6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce72:	e8 15 2a ff ff       	call   c000f88c <malloc>
c001ce77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce7f:	31 c9                	xor    ecx,ecx
c001ce81:	5e                   	pop    esi
c001ce82:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce84:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce88:	55                   	push   ebp
c001ce89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce8d:	51                   	push   ecx
c001ce8e:	52                   	push   edx
c001ce8f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce93:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce97:	53                   	push   ebx
c001ce98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce9b:	83 c4 14             	add    esp,0x14
c001ce9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cea2:	e8 e5 29 ff ff       	call   c000f88c <malloc>
c001cea7:	89 c6                	mov    esi,eax
c001cea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceae:	56                   	push   esi
c001ceaf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ceb3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ceb7:	51                   	push   ecx
c001ceb8:	52                   	push   edx
c001ceb9:	53                   	push   ebx
c001ceba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cebd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cec1:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c001cec7:	83 c4 1c             	add    esp,0x1c
c001ceca:	c1 e8 04             	shr    eax,0x4
c001cecd:	89 04 95 a0 23 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdc60],eax
c001ced4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ced8:	31 d2                	xor    edx,edx
c001ceda:	52                   	push   edx
c001cedb:	50                   	push   eax
c001cedc:	53                   	push   ebx
c001cedd:	e8 8a 60 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cee2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cee4:	31 d2                	xor    edx,edx
c001cee6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cee9:	56                   	push   esi
c001ceea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ceee:	52                   	push   edx
c001ceef:	50                   	push   eax
c001cef0:	53                   	push   ebx
c001cef1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef4:	83 c4 14             	add    esp,0x14
c001cef7:	53                   	push   ebx
c001cef8:	e8 0f 60 ff ff       	call   c0012f0c <File::close()>
c001cefd:	5d                   	pop    ebp
c001cefe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf02:	e8 95 29 ff ff       	call   c000f89c <free>
c001cf07:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf0a:	e8 8d 29 ff ff       	call   c000f89c <free>
c001cf0f:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001cf14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf18:	8d 50 01             	lea    edx,[eax+0x1]
c001cf1b:	89 0c 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],ecx
c001cf22:	89 34 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],esi
c001cf29:	89 15 20 25 03 c0    	mov    DWORD PTR ds:0xc0032520,edx
c001cf2f:	83 c4 10             	add    esp,0x10
c001cf32:	b0 01                	mov    al,0x1
c001cf34:	83 c4 5c             	add    esp,0x5c
c001cf37:	5b                   	pop    ebx
c001cf38:	5e                   	pop    esi
c001cf39:	5f                   	pop    edi
c001cf3a:	5d                   	pop    ebp
c001cf3b:	c3                   	ret    

c001cf3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf3c:	55                   	push   ebp
c001cf3d:	57                   	push   edi
c001cf3e:	56                   	push   esi
c001cf3f:	53                   	push   ebx
c001cf40:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf46:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf4d:	8b 1d 70 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032570
c001cf53:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf57:	68 14 01 00 00       	push   0x114
c001cf5c:	e8 2b 29 ff ff       	call   c000f88c <malloc>
c001cf61:	83 c4 0c             	add    esp,0xc
c001cf64:	89 c5                	mov    ebp,eax
c001cf66:	53                   	push   ebx
c001cf67:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf6e:	50                   	push   eax
c001cf6f:	e8 d6 5e ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001cf74:	5e                   	pop    esi
c001cf75:	5f                   	pop    edi
c001cf76:	6a 01                	push   0x1
c001cf78:	55                   	push   ebp
c001cf79:	e8 30 5f ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001cf7e:	83 c4 10             	add    esp,0x10
c001cf81:	85 c0                	test   eax,eax
c001cf83:	0f 85 a7 06 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf89:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	6a 34                	push   0x34
c001cf96:	e8 f1 28 ff ff       	call   c000f88c <malloc>
c001cf9b:	5b                   	pop    ebx
c001cf9c:	89 c7                	mov    edi,eax
c001cf9e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfa2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfa5:	53                   	push   ebx
c001cfa6:	57                   	push   edi
c001cfa7:	6a 00                	push   0x0
c001cfa9:	6a 34                	push   0x34
c001cfab:	55                   	push   ebp
c001cfac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfaf:	83 c4 20             	add    esp,0x20
c001cfb2:	85 c0                	test   eax,eax
c001cfb4:	0f 85 76 06 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfba:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfc0:	0f 85 6a 06 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfc6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	0f 84 5f 06 00 00    	je     c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfd1:	31 d2                	xor    edx,edx
c001cfd3:	51                   	push   ecx
c001cfd4:	52                   	push   edx
c001cfd5:	50                   	push   eax
c001cfd6:	55                   	push   ebp
c001cfd7:	e8 90 5f ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cfdc:	83 c4 10             	add    esp,0x10
c001cfdf:	85 c0                	test   eax,eax
c001cfe1:	0f 85 49 06 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfe7:	83 ec 0c             	sub    esp,0xc
c001cfea:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cff5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cff9:	0f af c2             	imul   eax,edx
c001cffc:	50                   	push   eax
c001cffd:	e8 8a 28 ff ff       	call   c000f88c <malloc>
c001d002:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d005:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d009:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d00c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d010:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d014:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d018:	0f af c2             	imul   eax,edx
c001d01b:	99                   	cdq    
c001d01c:	52                   	push   edx
c001d01d:	50                   	push   eax
c001d01e:	55                   	push   ebp
c001d01f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d022:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d025:	83 c4 20             	add    esp,0x20
c001d028:	85 c0                	test   eax,eax
c001d02a:	0f 84 00 06 00 00    	je     c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d030:	52                   	push   edx
c001d031:	31 d2                	xor    edx,edx
c001d033:	52                   	push   edx
c001d034:	50                   	push   eax
c001d035:	55                   	push   ebp
c001d036:	e8 31 5f ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 c0                	test   eax,eax
c001d040:	0f 85 ea 05 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d04d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d051:	31 f6                	xor    esi,esi
c001d053:	0f af c2             	imul   eax,edx
c001d056:	50                   	push   eax
c001d057:	e8 30 28 ff ff       	call   c000f88c <malloc>
c001d05c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d05f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d06a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d06e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d072:	0f af c2             	imul   eax,edx
c001d075:	99                   	cdq    
c001d076:	52                   	push   edx
c001d077:	50                   	push   eax
c001d078:	55                   	push   ebp
c001d079:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d07c:	83 c4 20             	add    esp,0x20
c001d07f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d083:	0f 86 8a 00 00 00    	jbe    c001d113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d089:	0f b7 de             	movzx  ebx,si
c001d08c:	c1 e3 05             	shl    ebx,0x5
c001d08f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d093:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d096:	75 75                	jne    c001d10d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d098:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d09b:	31 d2                	xor    edx,edx
c001d09d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0a8:	50                   	push   eax
c001d0a9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0ac:	52                   	push   edx
c001d0ad:	50                   	push   eax
c001d0ae:	55                   	push   ebp
c001d0af:	e8 b8 5e ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	85 c0                	test   eax,eax
c001d0b9:	0f 85 71 05 00 00    	jne    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0bf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0c9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0cd:	31 d2                	xor    edx,edx
c001d0cf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0d3:	83 ec 0c             	sub    esp,0xc
c001d0d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0e1:	50                   	push   eax
c001d0e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ea:	52                   	push   edx
c001d0eb:	50                   	push   eax
c001d0ec:	55                   	push   ebp
c001d0ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f0:	83 c4 1c             	add    esp,0x1c
c001d0f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0f6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0f9:	50                   	push   eax
c001d0fa:	6a 00                	push   0x0
c001d0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d100:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d104:	50                   	push   eax
c001d105:	e8 46 36 fe ff       	call   c0000750 <memset>
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	46                   	inc    esi
c001d10e:	e9 6c ff ff ff       	jmp    c001d07f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d113:	53                   	push   ebx
c001d114:	31 db                	xor    ebx,ebx
c001d116:	68 00 01 00 00       	push   0x100
c001d11b:	6a 00                	push   0x0
c001d11d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d121:	50                   	push   eax
c001d122:	e8 29 36 fe ff       	call   c0000750 <memset>
c001d127:	83 c4 0c             	add    esp,0xc
c001d12a:	68 00 01 00 00       	push   0x100
c001d12f:	6a 00                	push   0x0
c001d131:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d138:	50                   	push   eax
c001d139:	e8 12 36 fe ff       	call   c0000750 <memset>
c001d13e:	83 c4 10             	add    esp,0x10
c001d141:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d149:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d151:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d159:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d161:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d169:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d16d:	0f 86 30 01 00 00    	jbe    c001d2a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d173:	0f b7 f3             	movzx  esi,bx
c001d176:	6b f6 28             	imul   esi,esi,0x28
c001d179:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d17d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d180:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d184:	52                   	push   edx
c001d185:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d189:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d18d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d18f:	6b d2 28             	imul   edx,edx,0x28
c001d192:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d196:	31 d2                	xor    edx,edx
c001d198:	52                   	push   edx
c001d199:	50                   	push   eax
c001d19a:	55                   	push   ebp
c001d19b:	e8 cc 5d ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d1a0:	83 c4 0c             	add    esp,0xc
c001d1a3:	6a 20                	push   0x20
c001d1a5:	6a 00                	push   0x0
c001d1a7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1ae:	51                   	push   ecx
c001d1af:	e8 9c 35 fe ff       	call   c0000750 <memset>
c001d1b4:	59                   	pop    ecx
c001d1b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1b8:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1bc:	52                   	push   edx
c001d1bd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1c4:	51                   	push   ecx
c001d1c5:	6a 00                	push   0x0
c001d1c7:	6a 1f                	push   0x1f
c001d1c9:	55                   	push   ebp
c001d1ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1cd:	83 c4 1c             	add    esp,0x1c
c001d1d0:	6a 09                	push   0x9
c001d1d2:	68 34 ca 02 c0       	push   0xc002ca34
c001d1d7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1de:	51                   	push   ecx
c001d1df:	e8 68 34 fe ff       	call   c000064c <memcmp>
c001d1e4:	83 c4 10             	add    esp,0x10
c001d1e7:	85 c0                	test   eax,eax
c001d1e9:	75 21                	jne    c001d20c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1f3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1fe:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d205:	89 d0                	mov    eax,edx
c001d207:	40                   	inc    eax
c001d208:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d20c:	50                   	push   eax
c001d20d:	6a 09                	push   0x9
c001d20f:	68 3e ca 02 c0       	push   0xc002ca3e
c001d214:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d21b:	50                   	push   eax
c001d21c:	e8 2b 34 fe ff       	call   c000064c <memcmp>
c001d221:	83 c4 10             	add    esp,0x10
c001d224:	85 c0                	test   eax,eax
c001d226:	75 21                	jne    c001d249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d230:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d234:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d238:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d23b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d242:	89 d0                	mov    eax,edx
c001d244:	40                   	inc    eax
c001d245:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d249:	50                   	push   eax
c001d24a:	50                   	push   eax
c001d24b:	68 0a ca 02 c0       	push   0xc002ca0a
c001d250:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d257:	50                   	push   eax
c001d258:	e8 3b 36 fe ff       	call   c0000898 <strcmp>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	85 c0                	test   eax,eax
c001d262:	75 0f                	jne    c001d273 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d264:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d267:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d26f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d273:	50                   	push   eax
c001d274:	50                   	push   eax
c001d275:	68 12 ca 02 c0       	push   0xc002ca12
c001d27a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d281:	50                   	push   eax
c001d282:	e8 11 36 fe ff       	call   c0000898 <strcmp>
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	85 c0                	test   eax,eax
c001d28c:	75 0f                	jne    c001d29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d28e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d291:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d299:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d29d:	43                   	inc    ebx
c001d29e:	e9 c6 fe ff ff       	jmp    c001d169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2a3:	31 d2                	xor    edx,edx
c001d2a5:	50                   	push   eax
c001d2a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2aa:	52                   	push   edx
c001d2ab:	50                   	push   eax
c001d2ac:	55                   	push   ebp
c001d2ad:	e8 ba 5c ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d2b2:	58                   	pop    eax
c001d2b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2b7:	e8 d0 25 ff ff       	call   c000f88c <malloc>
c001d2bc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2bf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2c3:	31 d2                	xor    edx,edx
c001d2c5:	58                   	pop    eax
c001d2c6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2ca:	53                   	push   ebx
c001d2cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2d3:	52                   	push   edx
c001d2d4:	50                   	push   eax
c001d2d5:	55                   	push   ebp
c001d2d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2d9:	83 c4 14             	add    esp,0x14
c001d2dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2e0:	e8 a7 25 ff ff       	call   c000f88c <malloc>
c001d2e5:	31 d2                	xor    edx,edx
c001d2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2eb:	83 c4 0c             	add    esp,0xc
c001d2ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2f2:	52                   	push   edx
c001d2f3:	50                   	push   eax
c001d2f4:	55                   	push   ebp
c001d2f5:	e8 72 5c ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d2fa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2fd:	31 d2                	xor    edx,edx
c001d2ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d302:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d30a:	52                   	push   edx
c001d30b:	50                   	push   eax
c001d30c:	55                   	push   ebp
c001d30d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d310:	83 c4 20             	add    esp,0x20
c001d313:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d31b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d31f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d323:	0f 84 0b 03 00 00    	je     c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d329:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d330:	31 d2                	xor    edx,edx
c001d332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d336:	c1 e8 03             	shr    eax,0x3
c001d339:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d33d:	51                   	push   ecx
c001d33e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d342:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d346:	52                   	push   edx
c001d347:	50                   	push   eax
c001d348:	55                   	push   ebp
c001d349:	e8 1e 5c ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001d34e:	5b                   	pop    ebx
c001d34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d353:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d35a:	e8 2d 25 ff ff       	call   c000f88c <malloc>
c001d35f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d366:	31 d2                	xor    edx,edx
c001d368:	5e                   	pop    esi
c001d369:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d36d:	50                   	push   eax
c001d36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d376:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d37d:	52                   	push   edx
c001d37e:	50                   	push   eax
c001d37f:	55                   	push   ebp
c001d380:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d383:	83 c4 20             	add    esp,0x20
c001d386:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d38e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d392:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d396:	0f 8d 7c 02 00 00    	jge    c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d39c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a4:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3a9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3b4:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3b8:	89 d8                	mov    eax,ebx
c001d3ba:	c1 e8 08             	shr    eax,0x8
c001d3bd:	89 c6                	mov    esi,eax
c001d3bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3c3:	c1 e6 04             	shl    esi,0x4
c001d3c6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3ca:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3cd:	85 d2                	test   edx,edx
c001d3cf:	0f 85 bf 00 00 00    	jne    c001d494 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d5:	83 ec 0c             	sub    esp,0xc
c001d3d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3dc:	03 06                	add    eax,DWORD PTR [esi]
c001d3de:	50                   	push   eax
c001d3df:	e8 4b f8 ff ff       	call   c001cc2f <Thr::getAddressOfKernelSymbol(char const*)>
c001d3e4:	83 c4 10             	add    esp,0x10
c001d3e7:	89 c2                	mov    edx,eax
c001d3e9:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3ee:	85 c0                	test   eax,eax
c001d3f0:	0f 85 9e 00 00 00    	jne    c001d494 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3f6:	83 ec 0c             	sub    esp,0xc
c001d3f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3fd:	03 06                	add    eax,DWORD PTR [esi]
c001d3ff:	50                   	push   eax
c001d400:	e8 3a 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d405:	83 c4 10             	add    esp,0x10
c001d408:	89 c2                	mov    edx,eax
c001d40a:	85 c0                	test   eax,eax
c001d40c:	0f 85 82 00 00 00    	jne    c001d494 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d412:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d416:	50                   	push   eax
c001d417:	50                   	push   eax
c001d418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41c:	03 06                	add    eax,DWORD PTR [esi]
c001d41e:	50                   	push   eax
c001d41f:	68 48 ca 02 c0       	push   0xc002ca48
c001d424:	e8 c2 54 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d429:	58                   	pop    eax
c001d42a:	5a                   	pop    edx
c001d42b:	68 62 ca 02 c0       	push   0xc002ca62
c001d430:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d437:	50                   	push   eax
c001d438:	e8 cf 33 fe ff       	call   c000080c <strcpy>
c001d43d:	59                   	pop    ecx
c001d43e:	58                   	pop    eax
c001d43f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d443:	03 06                	add    eax,DWORD PTR [esi]
c001d445:	50                   	push   eax
c001d446:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d44d:	50                   	push   eax
c001d44e:	e8 f9 34 fe ff       	call   c000094c <strcat>
c001d453:	58                   	pop    eax
c001d454:	5a                   	pop    edx
c001d455:	68 f8 ca 02 c0       	push   0xc002caf8
c001d45a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d461:	50                   	push   eax
c001d462:	e8 e5 34 fe ff       	call   c000094c <strcat>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d46f:	0f 84 5d 01 00 00    	je     c001d5d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d475:	83 ec 0c             	sub    esp,0xc
c001d478:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d47f:	50                   	push   eax
c001d480:	e8 9c ce ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d48c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d490:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d494:	80 fb 01             	cmp    bl,0x1
c001d497:	0f 85 88 00 00 00    	jne    c001d525 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d49d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4a4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4a8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4ac:	01 ce                	add    esi,ecx
c001d4ae:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4b4:	0f 94 c0             	sete   al
c001d4b7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4bd:	0f 94 c3             	sete   bl
c001d4c0:	09 c3                	or     ebx,eax
c001d4c2:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4c4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4c9:	74 41                	je     c001d50c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d4cb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4ce:	84 db                	test   bl,bl
c001d4d0:	75 15                	jne    c001d4e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d4d2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4d6:	66 83 f8 0c          	cmp    ax,0xc
c001d4da:	76 05                	jbe    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d4dc:	b8 0c 00 00 00       	mov    eax,0xc
c001d4e1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4e5:	76 37                	jbe    c001d51e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4e7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4f0:	0f 84 dc 00 00 00    	je     c001d5d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	68 79 ca 02 c0       	push   0xc002ca79
c001d4fe:	e8 1e ce ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d50a:	eb 12                	jmp    c001d51e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d50c:	01 c1                	add    ecx,eax
c001d50e:	84 db                	test   bl,bl
c001d510:	75 0c                	jne    c001d51e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d512:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d516:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d51a:	77 02                	ja     c001d51e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d51c:	01 d1                	add    ecx,edx
c001d51e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d520:	e9 ea 00 00 00       	jmp    c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d525:	80 fb 02             	cmp    bl,0x2
c001d528:	75 7c                	jne    c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d52a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d531:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d535:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d539:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d53f:	74 20                	je     c001d561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d541:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d547:	74 18                	je     c001d561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d549:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d54d:	b9 0a 00 00 00       	mov    ecx,0xa
c001d552:	66 83 f8 0e          	cmp    ax,0xe
c001d556:	77 03                	ja     c001d55b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d558:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d55b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d55f:	76 1f                	jbe    c001d580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d561:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d565:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d56a:	74 66                	je     c001d5d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	68 95 ca 02 c0       	push   0xc002ca95
c001d574:	e8 a8 cd ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d580:	8b 06                	mov    eax,DWORD PTR [esi]
c001d582:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d587:	74 13                	je     c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d589:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d58d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d594:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d598:	01 c8                	add    eax,ecx
c001d59a:	eb 04                	jmp    c001d5a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d59c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5a0:	01 c2                	add    edx,eax
c001d5a2:	89 16                	mov    DWORD PTR [esi],edx
c001d5a4:	eb 69                	jmp    c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5a6:	0f b6 db             	movzx  ebx,bl
c001d5a9:	50                   	push   eax
c001d5aa:	50                   	push   eax
c001d5ab:	53                   	push   ebx
c001d5ac:	68 b1 ca 02 c0       	push   0xc002cab1
c001d5b1:	e8 35 53 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5be:	74 12                	je     c001d5d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5c0:	83 ec 0c             	sub    esp,0xc
c001d5c3:	68 bc ca 02 c0       	push   0xc002cabc
c001d5c8:	e8 54 cd ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	eb 3d                	jmp    c001d60f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5d2:	83 ec 0c             	sub    esp,0xc
c001d5d5:	55                   	push   ebp
c001d5d6:	e8 31 59 ff ff       	call   c0012f0c <File::close()>
c001d5db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5e4:	59                   	pop    ecx
c001d5e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e9:	e8 ae 22 ff ff       	call   c000f89c <free>
c001d5ee:	5b                   	pop    ebx
c001d5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5f3:	e8 a4 22 ff ff       	call   c000f89c <free>
c001d5f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5fb:	e8 9c 22 ff ff       	call   c000f89c <free>
c001d600:	5e                   	pop    esi
c001d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d605:	e8 92 22 ff ff       	call   c000f89c <free>
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	eb 21                	jmp    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d60f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d613:	e9 76 fd ff ff       	jmp    c001d38e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d61f:	e8 78 22 ff ff       	call   c000f89c <free>
c001d624:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d628:	83 c4 10             	add    esp,0x10
c001d62b:	e9 eb fc ff ff       	jmp    c001d31b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d630:	31 c0                	xor    eax,eax
c001d632:	eb 33                	jmp    c001d667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	55                   	push   ebp
c001d638:	e8 cf 58 ff ff       	call   c0012f0c <File::close()>
c001d63d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d640:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d643:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d646:	58                   	pop    eax
c001d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d64b:	e8 4c 22 ff ff       	call   c000f89c <free>
c001d650:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d653:	e8 44 22 ff ff       	call   c000f89c <free>
c001d658:	5a                   	pop    edx
c001d659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d65d:	e8 3a 22 ff ff       	call   c000f89c <free>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	b0 01                	mov    al,0x1
c001d667:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d66d:	5b                   	pop    ebx
c001d66e:	5e                   	pop    esi
c001d66f:	5f                   	pop    edi
c001d670:	5d                   	pop    ebp
c001d671:	c3                   	ret    

c001d672 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d672:	56                   	push   esi
c001d673:	31 d2                	xor    edx,edx
c001d675:	53                   	push   ebx
c001d676:	8b 1d 80 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d80
c001d67c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d680:	39 d3                	cmp    ebx,edx
c001d682:	7e 1b                	jle    c001d69f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d684:	8b 04 95 a0 1f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce060]
c001d68b:	39 c8                	cmp    eax,ecx
c001d68d:	77 0d                	ja     c001d69c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d68f:	8b 34 95 a0 1d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce260]
c001d696:	01 c6                	add    esi,eax
c001d698:	39 ce                	cmp    esi,ecx
c001d69a:	77 05                	ja     c001d6a1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d69c:	42                   	inc    edx
c001d69d:	eb e1                	jmp    c001d680 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d69f:	31 c0                	xor    eax,eax
c001d6a1:	5b                   	pop    ebx
c001d6a2:	5e                   	pop    esi
c001d6a3:	c3                   	ret    

c001d6a4 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6a4:	53                   	push   ebx
c001d6a5:	31 c0                	xor    eax,eax
c001d6a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6ab:	8b 1d 80 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d80
c001d6b1:	39 c3                	cmp    ebx,eax
c001d6b3:	7e 22                	jle    c001d6d7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6b5:	8b 14 85 a0 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce060]
c001d6bc:	39 ca                	cmp    edx,ecx
c001d6be:	77 14                	ja     c001d6d4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6c0:	03 14 85 a0 1d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce260]
c001d6c7:	39 ca                	cmp    edx,ecx
c001d6c9:	76 09                	jbe    c001d6d4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6cb:	8b 04 85 a0 21 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcde60]
c001d6d2:	eb 05                	jmp    c001d6d9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6d4:	40                   	inc    eax
c001d6d5:	eb da                	jmp    c001d6b1 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6d7:	31 c0                	xor    eax,eax
c001d6d9:	5b                   	pop    ebx
c001d6da:	c3                   	ret    

c001d6db <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6db:	53                   	push   ebx
c001d6dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6e0:	53                   	push   ebx
c001d6e1:	e8 8c ff ff ff       	call   c001d672 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6e6:	5a                   	pop    edx
c001d6e7:	31 d2                	xor    edx,edx
c001d6e9:	85 c0                	test   eax,eax
c001d6eb:	74 04                	je     c001d6f1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6ed:	89 da                	mov    edx,ebx
c001d6ef:	29 c2                	sub    edx,eax
c001d6f1:	89 d0                	mov    eax,edx
c001d6f3:	5b                   	pop    ebx
c001d6f4:	c3                   	ret    

c001d6f5 <Thr::loadDLL(char const*, bool)>:
c001d6f5:	55                   	push   ebp
c001d6f6:	57                   	push   edi
c001d6f7:	56                   	push   esi
c001d6f8:	53                   	push   ebx
c001d6f9:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6ff:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d706:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d70d:	56                   	push   esi
c001d70e:	68 d4 ca 02 c0       	push   0xc002cad4
c001d713:	e8 d3 51 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d718:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d71f:	e8 68 21 ff ff       	call   c000f88c <malloc>
c001d724:	83 c4 0c             	add    esp,0xc
c001d727:	89 c3                	mov    ebx,eax
c001d729:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001d72f:	56                   	push   esi
c001d730:	50                   	push   eax
c001d731:	e8 14 57 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001d736:	83 c4 10             	add    esp,0x10
c001d739:	85 db                	test   ebx,ebx
c001d73b:	75 3c                	jne    c001d779 <Thr::loadDLL(char const*, bool)+0x84>
c001d73d:	89 f8                	mov    eax,edi
c001d73f:	84 c0                	test   al,al
c001d741:	0f 84 cc 01 00 00    	je     c001d913 <Thr::loadDLL(char const*, bool)+0x21e>
c001d747:	55                   	push   ebp
c001d748:	55                   	push   ebp
c001d749:	68 e5 ca 02 c0       	push   0xc002cae5
c001d74e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d752:	55                   	push   ebp
c001d753:	e8 b4 30 fe ff       	call   c000080c <strcpy>
c001d758:	58                   	pop    eax
c001d759:	5a                   	pop    edx
c001d75a:	56                   	push   esi
c001d75b:	55                   	push   ebp
c001d75c:	e8 eb 31 fe ff       	call   c000094c <strcat>
c001d761:	59                   	pop    ecx
c001d762:	58                   	pop    eax
c001d763:	68 f8 ca 02 c0       	push   0xc002caf8
c001d768:	55                   	push   ebp
c001d769:	e8 de 31 fe ff       	call   c000094c <strcat>
c001d76e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d771:	e8 ab cb ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d776:	83 c4 10             	add    esp,0x10
c001d779:	51                   	push   ecx
c001d77a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d77e:	50                   	push   eax
c001d77f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d783:	50                   	push   eax
c001d784:	53                   	push   ebx
c001d785:	e8 d0 59 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001d78a:	83 c4 10             	add    esp,0x10
c001d78d:	85 db                	test   ebx,ebx
c001d78f:	74 0c                	je     c001d79d <Thr::loadDLL(char const*, bool)+0xa8>
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d796:	53                   	push   ebx
c001d797:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d79a:	83 c4 10             	add    esp,0x10
c001d79d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7a2:	75 0a                	jne    c001d7ae <Thr::loadDLL(char const*, bool)+0xb9>
c001d7a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7a8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7ac:	75 3c                	jne    c001d7ea <Thr::loadDLL(char const*, bool)+0xf5>
c001d7ae:	89 f8                	mov    eax,edi
c001d7b0:	84 c0                	test   al,al
c001d7b2:	0f 84 43 01 00 00    	je     c001d8fb <Thr::loadDLL(char const*, bool)+0x206>
c001d7b8:	51                   	push   ecx
c001d7b9:	51                   	push   ecx
c001d7ba:	68 e5 ca 02 c0       	push   0xc002cae5
c001d7bf:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7c3:	53                   	push   ebx
c001d7c4:	e8 43 30 fe ff       	call   c000080c <strcpy>
c001d7c9:	5d                   	pop    ebp
c001d7ca:	58                   	pop    eax
c001d7cb:	56                   	push   esi
c001d7cc:	53                   	push   ebx
c001d7cd:	e8 7a 31 fe ff       	call   c000094c <strcat>
c001d7d2:	58                   	pop    eax
c001d7d3:	5a                   	pop    edx
c001d7d4:	68 f8 ca 02 c0       	push   0xc002caf8
c001d7d9:	53                   	push   ebx
c001d7da:	e8 6d 31 fe ff       	call   c000094c <strcat>
c001d7df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7e2:	e8 3a cb ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	52                   	push   edx
c001d7eb:	6a 03                	push   0x3
c001d7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d7f5:	05 ff 0f 00 00       	add    eax,0xfff
c001d7fa:	83 d2 00             	adc    edx,0x0
c001d7fd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d801:	50                   	push   eax
c001d802:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c001d808:	e8 11 46 ff ff       	call   c0011e1e <VAS::allocatePages(int, int)>
c001d80d:	59                   	pop    ecx
c001d80e:	89 c3                	mov    ebx,eax
c001d810:	5d                   	pop    ebp
c001d811:	50                   	push   eax
c001d812:	68 fa ca 02 c0       	push   0xc002cafa
c001d817:	e8 cf 50 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d81c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d81f:	e8 48 2f fe ff       	call   c000076c <strlen>
c001d824:	8b 2d 80 1d 03 c0    	mov    ebp,DWORD PTR ds:0xc0031d80
c001d82a:	40                   	inc    eax
c001d82b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d82e:	e8 59 20 ff ff       	call   c000f88c <malloc>
c001d833:	89 04 ad a0 21 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcde60],eax
c001d83a:	58                   	pop    eax
c001d83b:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c001d840:	5a                   	pop    edx
c001d841:	56                   	push   esi
c001d842:	ff 34 85 a0 21 03 c0 	push   DWORD PTR [eax*4-0x3ffcde60]
c001d849:	e8 be 2f fe ff       	call   c000080c <strcpy>
c001d84e:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c001d853:	8d 50 01             	lea    edx,[eax+0x1]
c001d856:	89 1c 85 a0 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce060],ebx
c001d85d:	89 15 80 1d 03 c0    	mov    DWORD PTR ds:0xc0031d80,edx
c001d863:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d867:	83 c4 0c             	add    esp,0xc
c001d86a:	89 14 85 a0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce260],edx
c001d871:	6a 01                	push   0x1
c001d873:	53                   	push   ebx
c001d874:	56                   	push   esi
c001d875:	e8 c2 f6 ff ff       	call   c001cf3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d87a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d886:	0f 85 83 00 00 00    	jne    c001d90f <Thr::loadDLL(char const*, bool)+0x21a>
c001d88c:	89 f8                	mov    eax,edi
c001d88e:	84 c0                	test   al,al
c001d890:	74 6d                	je     c001d8ff <Thr::loadDLL(char const*, bool)+0x20a>
c001d892:	83 ec 0c             	sub    esp,0xc
c001d895:	68 07 cb 02 c0       	push   0xc002cb07
c001d89a:	e8 82 ca ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d89f:	83 c4 10             	add    esp,0x10
c001d8a2:	eb 5b                	jmp    c001d8ff <Thr::loadDLL(char const*, bool)+0x20a>
c001d8a4:	89 ee                	mov    esi,ebp
c001d8a6:	50                   	push   eax
c001d8a7:	c1 e6 0c             	shl    esi,0xc
c001d8aa:	50                   	push   eax
c001d8ab:	01 de                	add    esi,ebx
c001d8ad:	56                   	push   esi
c001d8ae:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c001d8b4:	e8 cd 40 ff ff       	call   c0011986 <VAS::getPageTableEntry(unsigned long)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8bf:	75 0c                	jne    c001d8cd <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8c1:	83 ec 0c             	sub    esp,0xc
c001d8c4:	56                   	push   esi
c001d8c5:	e8 88 22 ff ff       	call   c000fb52 <Phys::freePage(unsigned long)>
c001d8ca:	83 c4 10             	add    esp,0x10
c001d8cd:	45                   	inc    ebp
c001d8ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8d6:	05 ff 0f 00 00       	add    eax,0xfff
c001d8db:	bf 00 00 00 00       	mov    edi,0x0
c001d8e0:	83 d2 00             	adc    edx,0x0
c001d8e3:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8e7:	c1 ea 0c             	shr    edx,0xc
c001d8ea:	39 c5                	cmp    ebp,eax
c001d8ec:	89 d1                	mov    ecx,edx
c001d8ee:	89 f8                	mov    eax,edi
c001d8f0:	19 c8                	sbb    eax,ecx
c001d8f2:	72 b0                	jb     c001d8a4 <Thr::loadDLL(char const*, bool)+0x1af>
c001d8f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d8f9:	75 18                	jne    c001d913 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8fb:	31 db                	xor    ebx,ebx
c001d8fd:	eb 14                	jmp    c001d913 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8ff:	83 ec 0c             	sub    esp,0xc
c001d902:	68 26 cb 02 c0       	push   0xc002cb26
c001d907:	e8 15 ca ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	31 ed                	xor    ebp,ebp
c001d911:	eb bb                	jmp    c001d8ce <Thr::loadDLL(char const*, bool)+0x1d9>
c001d913:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d919:	89 d8                	mov    eax,ebx
c001d91b:	5b                   	pop    ebx
c001d91c:	5e                   	pop    esi
c001d91d:	5f                   	pop    edi
c001d91e:	5d                   	pop    ebp
c001d91f:	c3                   	ret    

c001d920 <Thr::executeDLL(unsigned long, void*)>:
c001d920:	56                   	push   esi
c001d921:	53                   	push   ebx
c001d922:	52                   	push   edx
c001d923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d92b:	85 db                	test   ebx,ebx
c001d92d:	75 10                	jne    c001d93f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d92f:	83 ec 0c             	sub    esp,0xc
c001d932:	68 42 cb 02 c0       	push   0xc002cb42
c001d937:	e8 e5 c9 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	50                   	push   eax
c001d940:	50                   	push   eax
c001d941:	53                   	push   ebx
c001d942:	68 6c cb 02 c0       	push   0xc002cb6c
c001d947:	e8 9f 4f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d94c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d950:	89 d8                	mov    eax,ebx
c001d952:	83 c4 14             	add    esp,0x14
c001d955:	5b                   	pop    ebx
c001d956:	5e                   	pop    esi
c001d957:	ff e0                	jmp    eax
c001d959:	90                   	nop

c001d95a <userModeEntryPoint(void*)>:
c001d95a:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001d95f:	48                   	dec    eax
c001d960:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001d965:	75 01                	jne    c001d968 <userModeEntryPoint(void*)+0xe>
c001d967:	fb                   	sti    
c001d968:	fb                   	sti    
c001d969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d96e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d971:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d977:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d97b:	e9 aa 29 fe ff       	jmp    c000032a <goToUsermode>

c001d980 <changeTSS>:
c001d980:	83 ec 14             	sub    esp,0x14
c001d983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d988:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d98b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d990:	c1 e2 15             	shl    edx,0x15
c001d993:	29 d0                	sub    eax,edx
c001d995:	50                   	push   eax
c001d996:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001d99b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9a1:	05 7c 11 00 00       	add    eax,0x117c
c001d9a6:	50                   	push   eax
c001d9a7:	e8 78 34 ff ff       	call   c0010e24 <TSS::setESP(unsigned long)>
c001d9ac:	83 c4 1c             	add    esp,0x1c
c001d9af:	c3                   	ret    

c001d9b0 <switchToThread(ThreadControlBlock*)>:
c001d9b0:	57                   	push   edi
c001d9b1:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001d9b6:	56                   	push   esi
c001d9b7:	85 c0                	test   eax,eax
c001d9b9:	53                   	push   ebx
c001d9ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9be:	0f 85 88 00 00 00    	jne    c001da4c <switchToThread(ThreadControlBlock*)+0x9c>
c001d9c4:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d9c7:	3c ff                	cmp    al,0xff
c001d9c9:	74 7d                	je     c001da48 <switchToThread(ThreadControlBlock*)+0x98>
c001d9cb:	0f b6 d0             	movzx  edx,al
c001d9ce:	b8 84 03 00 00       	mov    eax,0x384
c001d9d3:	29 d0                	sub    eax,edx
c001d9d5:	c1 e0 10             	shl    eax,0x10
c001d9d8:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d9db:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d9de:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001d9e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9e9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d9f0:	74 4a                	je     c001da3c <switchToThread(ThreadControlBlock*)+0x8c>
c001d9f2:	0f 31                	rdtsc  
c001d9f4:	a3 88 25 03 c0       	mov    ds:0xc0032588,eax
c001d9f9:	89 c6                	mov    esi,eax
c001d9fb:	89 d7                	mov    edi,edx
c001d9fd:	2b 35 78 25 03 c0    	sub    esi,DWORD PTR ds:0xc0032578
c001da03:	89 15 8c 25 03 c0    	mov    DWORD PTR ds:0xc003258c,edx
c001da09:	1b 3d 7c 25 03 c0    	sbb    edi,DWORD PTR ds:0xc003257c
c001da0f:	89 35 80 25 03 c0    	mov    DWORD PTR ds:0xc0032580,esi
c001da15:	a3 78 25 03 c0       	mov    ds:0xc0032578,eax
c001da1a:	89 3d 84 25 03 c0    	mov    DWORD PTR ds:0xc0032584,edi
c001da20:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001da26:	89 15 7c 25 03 c0    	mov    DWORD PTR ds:0xc003257c,edx
c001da2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da2f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001da32:	01 c6                	add    esi,eax
c001da34:	11 d7                	adc    edi,edx
c001da36:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001da39:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001da3c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da40:	5b                   	pop    ebx
c001da41:	5e                   	pop    esi
c001da42:	5f                   	pop    edi
c001da43:	e9 1a 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da48:	31 c0                	xor    eax,eax
c001da4a:	eb 8f                	jmp    c001d9db <switchToThread(ThreadControlBlock*)+0x2b>
c001da4c:	5b                   	pop    ebx
c001da4d:	c7 05 40 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x1
c001da57:	5e                   	pop    esi
c001da58:	5f                   	pop    edi
c001da59:	c3                   	ret    

c001da5a <Process::addArgs(char**)>:
c001da5a:	57                   	push   edi
c001da5b:	56                   	push   esi
c001da5c:	53                   	push   ebx
c001da5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da61:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da65:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da6f:	85 ff                	test   edi,edi
c001da71:	74 3d                	je     c001dab0 <Process::addArgs(char**)+0x56>
c001da73:	8b 07                	mov    eax,DWORD PTR [edi]
c001da75:	85 c0                	test   eax,eax
c001da77:	74 37                	je     c001dab0 <Process::addArgs(char**)+0x56>
c001da79:	31 db                	xor    ebx,ebx
c001da7b:	83 ec 0c             	sub    esp,0xc
c001da7e:	50                   	push   eax
c001da7f:	e8 e8 2c fe ff       	call   c000076c <strlen>
c001da84:	40                   	inc    eax
c001da85:	89 04 24             	mov    DWORD PTR [esp],eax
c001da88:	e8 ff 1d ff ff       	call   c000f88c <malloc>
c001da8d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da94:	5a                   	pop    edx
c001da95:	59                   	pop    ecx
c001da96:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da99:	43                   	inc    ebx
c001da9a:	50                   	push   eax
c001da9b:	e8 6c 2d fe ff       	call   c000080c <strcpy>
c001daa0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001daac:	85 c0                	test   eax,eax
c001daae:	75 cb                	jne    c001da7b <Process::addArgs(char**)+0x21>
c001dab0:	5b                   	pop    ebx
c001dab1:	5e                   	pop    esi
c001dab2:	5f                   	pop    edi
c001dab3:	c3                   	ret    

c001dab4 <Process::Process(char const*, Process*, char**)>:
c001dab4:	56                   	push   esi
c001dab5:	53                   	push   ebx
c001dab6:	83 ec 14             	sub    esp,0x14
c001dab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabd:	05 0c 02 00 00       	add    eax,0x20c
c001dac2:	bb 07 00 00 00       	mov    ebx,0x7
c001dac7:	89 c6                	mov    esi,eax
c001dac9:	85 db                	test   ebx,ebx
c001dacb:	78 12                	js     c001dadf <Process::Process(char const*, Process*, char**)+0x2b>
c001dacd:	83 ec 0c             	sub    esp,0xc
c001dad0:	56                   	push   esi
c001dad1:	e8 dc ba 00 00       	call   c00295b2 <ThreadControlBlock::ThreadControlBlock()>
c001dad6:	83 c4 10             	add    esp,0x10
c001dad9:	83 c6 63             	add    esi,0x63
c001dadc:	4b                   	dec    ebx
c001dadd:	eb ea                	jmp    c001dac9 <Process::Process(char const*, Process*, char**)+0x15>
c001dadf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daf1:	e8 84 c6 ff ff       	call   c001a17a <Krnl::newProcessEnv(Process*)>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	89 c2                	mov    edx,eax
c001dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daff:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db09:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db12:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c001db17:	8d 50 01             	lea    edx,[eax+0x1]
c001db1a:	89 15 b0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b0,edx
c001db20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db24:	89 02                	mov    DWORD PTR [edx],eax
c001db26:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db2e:	83 ec 0c             	sub    esp,0xc
c001db31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db35:	e8 52 1d ff ff       	call   c000f88c <malloc>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	89 c3                	mov    ebx,eax
c001db3f:	83 ec 08             	sub    esp,0x8
c001db42:	6a 00                	push   0x0
c001db44:	53                   	push   ebx
c001db45:	e8 7c 46 ff ff       	call   c00121c6 <VAS::VAS(bool)>
c001db4a:	83 c4 10             	add    esp,0x10
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db6d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db77:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db7d:	85 c0                	test   eax,eax
c001db7f:	74 42                	je     c001dbc3 <Process::Process(char const*, Process*, char**)+0x10f>
c001db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db8b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db95:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dba5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbaf:	05 0c 01 00 00       	add    eax,0x10c
c001dbb4:	83 ec 08             	sub    esp,0x8
c001dbb7:	52                   	push   edx
c001dbb8:	50                   	push   eax
c001dbb9:	e8 4e 2c fe ff       	call   c000080c <strcpy>
c001dbbe:	83 c4 10             	add    esp,0x10
c001dbc1:	eb 63                	jmp    c001dc26 <Process::Process(char const*, Process*, char**)+0x172>
c001dbc3:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dbcb:	83 ec 0c             	sub    esp,0xc
c001dbce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbd2:	e8 b5 1c ff ff       	call   c000f88c <malloc>
c001dbd7:	83 c4 10             	add    esp,0x10
c001dbda:	89 c3                	mov    ebx,eax
c001dbdc:	83 ec 08             	sub    esp,0x8
c001dbdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe3:	53                   	push   ebx
c001dbe4:	e8 1d 2f ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	50                   	push   eax
c001dc04:	e8 04 26 ff ff       	call   c001020d <addToTerminalCycle(VgaText*)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc10:	05 0c 01 00 00       	add    eax,0x10c
c001dc15:	83 ec 08             	sub    esp,0x8
c001dc18:	68 8b cb 02 c0       	push   0xc002cb8b
c001dc1d:	50                   	push   eax
c001dc1e:	e8 e9 2b fe ff       	call   c000080c <strcpy>
c001dc23:	83 c4 10             	add    esp,0x10
c001dc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2a:	83 c0 0c             	add    eax,0xc
c001dc2d:	83 ec 08             	sub    esp,0x8
c001dc30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc34:	50                   	push   eax
c001dc35:	e8 d2 2b fe ff       	call   c000080c <strcpy>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	83 ec 08             	sub    esp,0x8
c001dc40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc48:	e8 0d fe ff ff       	call   c001da5a <Process::addArgs(char**)>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	83 ec 08             	sub    esp,0x8
c001dc53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc5b:	e8 a6 ed ff ff       	call   c001ca06 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc60:	83 c4 10             	add    esp,0x10
c001dc63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc6b:	83 f0 01             	xor    eax,0x1
c001dc6e:	88 c2                	mov    dl,al
c001dc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc74:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc7a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc7f:	83 ec 08             	sub    esp,0x8
c001dc82:	50                   	push   eax
c001dc83:	68 b8 cc 02 c0       	push   0xc002ccb8
c001dc88:	e8 5e 4c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001dc8d:	83 c4 10             	add    esp,0x10
c001dc90:	90                   	nop
c001dc91:	83 c4 14             	add    esp,0x14
c001dc94:	5b                   	pop    ebx
c001dc95:	5e                   	pop    esi
c001dc96:	c3                   	ret    
c001dc97:	90                   	nop

c001dc98 <Process::Process(bool, char const*, Process*, char**)>:
c001dc98:	56                   	push   esi
c001dc99:	53                   	push   ebx
c001dc9a:	83 ec 24             	sub    esp,0x24
c001dc9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dca1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca9:	05 0c 02 00 00       	add    eax,0x20c
c001dcae:	bb 07 00 00 00       	mov    ebx,0x7
c001dcb3:	89 c6                	mov    esi,eax
c001dcb5:	85 db                	test   ebx,ebx
c001dcb7:	78 12                	js     c001dccb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dcb9:	83 ec 0c             	sub    esp,0xc
c001dcbc:	56                   	push   esi
c001dcbd:	e8 f0 b8 00 00       	call   c00295b2 <ThreadControlBlock::ThreadControlBlock()>
c001dcc2:	83 c4 10             	add    esp,0x10
c001dcc5:	83 c6 63             	add    esi,0x63
c001dcc8:	4b                   	dec    ebx
c001dcc9:	eb ea                	jmp    c001dcb5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcdd:	e8 98 c4 ff ff       	call   c001a17a <Krnl::newProcessEnv(Process*)>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	89 c2                	mov    edx,eax
c001dce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dceb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcfe:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c001dd03:	8d 50 01             	lea    edx,[eax+0x1]
c001dd06:	89 15 b0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b0,edx
c001dd0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd10:	89 02                	mov    DWORD PTR [edx],eax
c001dd12:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd21:	e8 66 1b ff ff       	call   c000f88c <malloc>
c001dd26:	83 c4 10             	add    esp,0x10
c001dd29:	89 c3                	mov    ebx,eax
c001dd2b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd30:	83 ec 08             	sub    esp,0x8
c001dd33:	50                   	push   eax
c001dd34:	53                   	push   ebx
c001dd35:	e8 8c 44 ff ff       	call   c00121c6 <VAS::VAS(bool)>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd59:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd5d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd67:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd6d:	85 c0                	test   eax,eax
c001dd6f:	74 42                	je     c001ddb3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd75:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd7b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd85:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd95:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9f:	05 0c 01 00 00       	add    eax,0x10c
c001dda4:	83 ec 08             	sub    esp,0x8
c001dda7:	52                   	push   edx
c001dda8:	50                   	push   eax
c001dda9:	e8 5e 2a fe ff       	call   c000080c <strcpy>
c001ddae:	83 c4 10             	add    esp,0x10
c001ddb1:	eb 63                	jmp    c001de16 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ddb3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001ddbb:	83 ec 0c             	sub    esp,0xc
c001ddbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddc2:	e8 c5 1a ff ff       	call   c000f88c <malloc>
c001ddc7:	83 c4 10             	add    esp,0x10
c001ddca:	89 c3                	mov    ebx,eax
c001ddcc:	83 ec 08             	sub    esp,0x8
c001ddcf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddd3:	53                   	push   ebx
c001ddd4:	e8 2d 2d ff ff       	call   c0010b06 <VgaText::VgaText(char const*)>
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dde6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddf0:	83 ec 0c             	sub    esp,0xc
c001ddf3:	50                   	push   eax
c001ddf4:	e8 14 24 ff ff       	call   c001020d <addToTerminalCycle(VgaText*)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de00:	05 0c 01 00 00       	add    eax,0x10c
c001de05:	83 ec 08             	sub    esp,0x8
c001de08:	68 8b cb 02 c0       	push   0xc002cb8b
c001de0d:	50                   	push   eax
c001de0e:	e8 f9 29 fe ff       	call   c000080c <strcpy>
c001de13:	83 c4 10             	add    esp,0x10
c001de16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de1a:	83 c0 0c             	add    eax,0xc
c001de1d:	83 ec 08             	sub    esp,0x8
c001de20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de24:	50                   	push   eax
c001de25:	e8 e2 29 fe ff       	call   c000080c <strcpy>
c001de2a:	83 c4 10             	add    esp,0x10
c001de2d:	83 ec 08             	sub    esp,0x8
c001de30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de38:	e8 1d fc ff ff       	call   c001da5a <Process::addArgs(char**)>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	90                   	nop
c001de41:	83 c4 24             	add    esp,0x24
c001de44:	5b                   	pop    ebx
c001de45:	5e                   	pop    esi
c001de46:	c3                   	ret    

c001de47 <taskStartupFunction>:
c001de47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de4c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de4f:	c3                   	ret    

c001de50 <Semaphore::Semaphore(int)>:
c001de50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de58:	89 10                	mov    DWORD PTR [eax],edx
c001de5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de5e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de7b:	90                   	nop
c001de7c:	c3                   	ret    
c001de7d:	90                   	nop

c001de7e <Mutex::Mutex()>:
c001de7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de82:	6a 01                	push   0x1
c001de84:	50                   	push   eax
c001de85:	e8 c6 ff ff ff       	call   c001de50 <Semaphore::Semaphore(int)>
c001de8a:	83 c4 08             	add    esp,0x8
c001de8d:	90                   	nop
c001de8e:	c3                   	ret    
c001de8f:	90                   	nop

c001de90 <Process::createThread(void (*)(void*), void*, int)>:
c001de90:	55                   	push   ebp
c001de91:	31 c9                	xor    ecx,ecx
c001de93:	57                   	push   edi
c001de94:	56                   	push   esi
c001de95:	53                   	push   ebx
c001de96:	83 ec 1c             	sub    esp,0x1c
c001de99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de9d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dea4:	89 f2                	mov    edx,esi
c001dea6:	0f b7 c2             	movzx  eax,dx
c001dea9:	83 e2 01             	and    edx,0x1
c001deac:	74 16                	je     c001dec4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001deae:	d1 f8                	sar    eax,1
c001deb0:	41                   	inc    ecx
c001deb1:	89 c2                	mov    edx,eax
c001deb3:	83 f9 10             	cmp    ecx,0x10
c001deb6:	75 ee                	jne    c001dea6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001deb8:	83 c4 1c             	add    esp,0x1c
c001debb:	31 db                	xor    ebx,ebx
c001debd:	89 d8                	mov    eax,ebx
c001debf:	5b                   	pop    ebx
c001dec0:	5e                   	pop    esi
c001dec1:	5f                   	pop    edi
c001dec2:	5d                   	pop    ebp
c001dec3:	c3                   	ret    
c001dec4:	b8 01 00 00 00       	mov    eax,0x1
c001dec9:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001decc:	d3 e0                	shl    eax,cl
c001dece:	09 c6                	or     esi,eax
c001ded0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001ded3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001deda:	89 c6                	mov    esi,eax
c001dedc:	c1 e6 05             	shl    esi,0x5
c001dedf:	01 f0                	add    eax,esi
c001dee1:	01 d8                	add    eax,ebx
c001dee3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001deea:	75 0a                	jne    c001def6 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001deec:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001def6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001defc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df00:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001df03:	01 ca                	add    edx,ecx
c001df05:	83 ec 08             	sub    esp,0x8
c001df08:	89 d0                	mov    eax,edx
c001df0a:	c1 e0 05             	shl    eax,0x5
c001df0d:	01 d0                	add    eax,edx
c001df0f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001df13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df17:	01 d8                	add    eax,ebx
c001df19:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001df1f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001df25:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df2b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df31:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df37:	89 cd                	mov    ebp,ecx
c001df39:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001df3d:	f7 dd                	neg    ebp
c001df3f:	c1 e5 15             	shl    ebp,0x15
c001df42:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001df48:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001df4e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df58:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001df5e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df68:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df76:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df7d:	53                   	push   ebx
c001df7e:	68 64 25 03 c0       	push   0xc0032564
c001df83:	e8 e4 b3 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df88:	89 d8                	mov    eax,ebx
c001df8a:	83 c4 10             	add    esp,0x10
c001df8d:	83 c4 1c             	add    esp,0x1c
c001df90:	5b                   	pop    ebx
c001df91:	5e                   	pop    esi
c001df92:	5f                   	pop    edi
c001df93:	5d                   	pop    ebp
c001df94:	c3                   	ret    
c001df95:	90                   	nop

c001df96 <Process::createUserThread()>:
c001df96:	83 ec 0c             	sub    esp,0xc
c001df99:	68 80 00 00 00       	push   0x80
c001df9e:	6a 00                	push   0x0
c001dfa0:	68 5a d9 01 c0       	push   0xc001d95a
c001dfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfa9:	e8 e2 fe ff ff       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c001dfae:	83 c4 1c             	add    esp,0x1c
c001dfb1:	c3                   	ret    

c001dfb2 <setupMultitasking(void (*)())>:
c001dfb2:	56                   	push   esi
c001dfb3:	53                   	push   ebx
c001dfb4:	51                   	push   ecx
c001dfb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfb9:	eb 10                	jmp    c001dfcb <setupMultitasking(void (*)())+0x19>
c001dfbb:	83 ec 0c             	sub    esp,0xc
c001dfbe:	68 64 25 03 c0       	push   0xc0032564
c001dfc3:	e8 f6 b2 00 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfc8:	83 c4 10             	add    esp,0x10
c001dfcb:	83 ec 0c             	sub    esp,0xc
c001dfce:	68 64 25 03 c0       	push   0xc0032564
c001dfd3:	e8 c2 b2 00 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	84 c0                	test   al,al
c001dfdd:	74 dc                	je     c001dfbb <setupMultitasking(void (*)())+0x9>
c001dfdf:	83 ec 0c             	sub    esp,0xc
c001dfe2:	68 3f 07 00 00       	push   0x73f
c001dfe7:	e8 a0 18 ff ff       	call   c000f88c <malloc>
c001dfec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dff3:	89 c3                	mov    ebx,eax
c001dff5:	6a 00                	push   0x0
c001dff7:	68 8f cb 02 c0       	push   0xc002cb8f
c001dffc:	6a 01                	push   0x1
c001dffe:	50                   	push   eax
c001dfff:	e8 94 fc ff ff       	call   c001dc98 <Process::Process(bool, char const*, Process*, char**)>
c001e004:	83 c4 18             	add    esp,0x18
c001e007:	89 1d 70 25 03 c0    	mov    DWORD PTR ds:0xc0032570,ebx
c001e00d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e013:	68 e0 cc 02 c0       	push   0xc002cce0
c001e018:	e8 ce 48 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e01d:	58                   	pop    eax
c001e01e:	5a                   	pop    edx
c001e01f:	6a 63                	push   0x63
c001e021:	68 14 cd 02 c0       	push   0xc002cd14
c001e026:	e8 c0 48 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e02b:	59                   	pop    ecx
c001e02c:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e032:	e8 d7 26 ff ff       	call   c001070e <setActiveTerminal(VgaText*)>
c001e037:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e03f:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e049:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e04f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e052:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e05c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e062:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e068:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e072:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e07c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e086:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e08c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e096:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e09c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0a6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0ac:	58                   	pop    eax
c001e0ad:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0b3:	5a                   	pop    edx
c001e0b4:	68 8b cb 02 c0       	push   0xc002cb8b
c001e0b9:	50                   	push   eax
c001e0ba:	e8 4d 27 fe ff       	call   c000080c <strcpy>
c001e0bf:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0c6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0ca:	83 c4 14             	add    esp,0x14
c001e0cd:	5b                   	pop    ebx
c001e0ce:	5e                   	pop    esi
c001e0cf:	e9 80 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0d4 <schedule()>:
c001e0d4:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e0d9:	85 c0                	test   eax,eax
c001e0db:	74 0b                	je     c001e0e8 <schedule()+0x14>
c001e0dd:	c7 05 40 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x1
c001e0e7:	c3                   	ret    
c001e0e8:	53                   	push   ebx
c001e0e9:	83 ec 14             	sub    esp,0x14
c001e0ec:	68 64 25 03 c0       	push   0xc0032564
c001e0f1:	e8 a4 b1 00 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0f6:	83 c4 10             	add    esp,0x10
c001e0f9:	84 c0                	test   al,al
c001e0fb:	75 38                	jne    c001e135 <schedule()+0x61>
c001e0fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e102:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e105:	4a                   	dec    edx
c001e106:	74 32                	je     c001e13a <schedule()+0x66>
c001e108:	83 ec 0c             	sub    esp,0xc
c001e10b:	68 64 25 03 c0       	push   0xc0032564
c001e110:	e8 a1 b1 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e115:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e11c:	89 c3                	mov    ebx,eax
c001e11e:	e8 9b b1 00 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e123:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e12d:	e8 7e f8 ff ff       	call   c001d9b0 <switchToThread(ThreadControlBlock*)>
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	83 c4 08             	add    esp,0x8
c001e138:	5b                   	pop    ebx
c001e139:	c3                   	ret    
c001e13a:	83 ec 08             	sub    esp,0x8
c001e13d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e144:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e14a:	68 64 25 03 c0       	push   0xc0032564
c001e14f:	e8 18 b2 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e154:	83 c4 10             	add    esp,0x10
c001e157:	eb af                	jmp    c001e108 <schedule()+0x34>
c001e159:	90                   	nop

c001e15a <Semaphore::tryAcquire()>:
c001e15a:	53                   	push   ebx
c001e15b:	83 ec 08             	sub    esp,0x8
c001e15e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e162:	fa                   	cli    
c001e163:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e168:	8d 50 01             	lea    edx,[eax+0x1]
c001e16b:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001e171:	8b 15 44 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032544
c001e177:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e17a:	89 1d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ebx
c001e180:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e183:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e185:	7c 2a                	jl     c001e1b1 <Semaphore::tryAcquire()+0x57>
c001e187:	89 15 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,edx
c001e18d:	85 d2                	test   edx,edx
c001e18f:	75 0a                	jne    c001e19b <Semaphore::tryAcquire()+0x41>
c001e191:	8b 15 40 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032540
c001e197:	85 d2                	test   edx,edx
c001e199:	75 5b                	jne    c001e1f6 <Semaphore::tryAcquire()+0x9c>
c001e19b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e1a0:	85 c0                	test   eax,eax
c001e1a2:	74 07                	je     c001e1ab <Semaphore::tryAcquire()+0x51>
c001e1a4:	31 c0                	xor    eax,eax
c001e1a6:	83 c4 08             	add    esp,0x8
c001e1a9:	5b                   	pop    ebx
c001e1aa:	c3                   	ret    
c001e1ab:	fb                   	sti    
c001e1ac:	83 c4 08             	add    esp,0x8
c001e1af:	5b                   	pop    ebx
c001e1b0:	c3                   	ret    
c001e1b1:	43                   	inc    ebx
c001e1b2:	89 15 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,edx
c001e1b8:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e1bb:	85 d2                	test   edx,edx
c001e1bd:	75 1f                	jne    c001e1de <Semaphore::tryAcquire()+0x84>
c001e1bf:	8b 0d 40 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032540
c001e1c5:	85 c9                	test   ecx,ecx
c001e1c7:	74 15                	je     c001e1de <Semaphore::tryAcquire()+0x84>
c001e1c9:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e1d3:	e8 fc fe ff ff       	call   c001e0d4 <schedule()>
c001e1d8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e1dd:	48                   	dec    eax
c001e1de:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e1e3:	85 c0                	test   eax,eax
c001e1e5:	75 08                	jne    c001e1ef <Semaphore::tryAcquire()+0x95>
c001e1e7:	fb                   	sti    
c001e1e8:	b0 01                	mov    al,0x1
c001e1ea:	83 c4 08             	add    esp,0x8
c001e1ed:	5b                   	pop    ebx
c001e1ee:	c3                   	ret    
c001e1ef:	b0 01                	mov    al,0x1
c001e1f1:	83 c4 08             	add    esp,0x8
c001e1f4:	5b                   	pop    ebx
c001e1f5:	c3                   	ret    
c001e1f6:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e200:	e8 cf fe ff ff       	call   c001e0d4 <schedule()>
c001e205:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e20a:	48                   	dec    eax
c001e20b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e210:	85 c0                	test   eax,eax
c001e212:	75 90                	jne    c001e1a4 <Semaphore::tryAcquire()+0x4a>
c001e214:	eb 95                	jmp    c001e1ab <Semaphore::tryAcquire()+0x51>

c001e216 <Semaphore::assertLocked(char const*)>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e21d:	fa                   	cli    
c001e21e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e224:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e229:	8d 48 01             	lea    ecx,[eax+0x1]
c001e22c:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001e232:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e234:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e237:	7c 24                	jl     c001e25d <Semaphore::assertLocked(char const*)+0x47>
c001e239:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e23e:	85 c0                	test   eax,eax
c001e240:	75 09                	jne    c001e24b <Semaphore::assertLocked(char const*)+0x35>
c001e242:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e247:	85 c0                	test   eax,eax
c001e249:	75 29                	jne    c001e274 <Semaphore::assertLocked(char const*)+0x5e>
c001e24b:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e250:	48                   	dec    eax
c001e251:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e256:	75 01                	jne    c001e259 <Semaphore::assertLocked(char const*)+0x43>
c001e258:	fb                   	sti    
c001e259:	83 c4 0c             	add    esp,0xc
c001e25c:	c3                   	ret    
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e264:	e8 b8 c0 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001e269:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e26e:	83 c4 10             	add    esp,0x10
c001e271:	48                   	dec    eax
c001e272:	eb c5                	jmp    c001e239 <Semaphore::assertLocked(char const*)+0x23>
c001e274:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e27e:	e8 51 fe ff ff       	call   c001e0d4 <schedule()>
c001e283:	eb c6                	jmp    c001e24b <Semaphore::assertLocked(char const*)+0x35>

c001e285 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e285:	83 ec 14             	sub    esp,0x14
c001e288:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c001e28e:	68 38 cd 02 c0       	push   0xc002cd38
c001e293:	e8 53 46 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e29d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2a4:	e8 2b fe ff ff       	call   c001e0d4 <schedule()>
c001e2a9:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2ae:	83 c4 10             	add    esp,0x10
c001e2b1:	48                   	dec    eax
c001e2b2:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e2b7:	85 c0                	test   eax,eax
c001e2b9:	75 06                	jne    c001e2c1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e2bb:	fb                   	sti    
c001e2bc:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2c1:	83 ec 08             	sub    esp,0x8
c001e2c4:	50                   	push   eax
c001e2c5:	68 6c cd 02 c0       	push   0xc002cd6c
c001e2ca:	e8 1c 46 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e2cf:	83 c4 1c             	add    esp,0x1c
c001e2d2:	c3                   	ret    

c001e2d3 <blockTask(TaskState)>:
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	fa                   	cli    
c001e2d7:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e2dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2e9:	e8 e6 fd ff ff       	call   c001e0d4 <schedule()>
c001e2ee:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2f3:	48                   	dec    eax
c001e2f4:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e2f9:	75 01                	jne    c001e2fc <blockTask(TaskState)+0x29>
c001e2fb:	fb                   	sti    
c001e2fc:	83 c4 0c             	add    esp,0xc
c001e2ff:	c3                   	ret    

c001e300 <waitTask(int, int*, int)>:
c001e300:	83 ec 18             	sub    esp,0x18
c001e303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e308:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e30c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e30f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e318:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e31b:	6a 07                	push   0x7
c001e31d:	e8 b1 ff ff ff       	call   c001e2d3 <blockTask(TaskState)>
c001e322:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e32d:	85 d2                	test   edx,edx
c001e32f:	74 0a                	je     c001e33b <waitTask(int, int*, int)+0x3b>
c001e331:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e334:	89 02                	mov    DWORD PTR [edx],eax
c001e336:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e33e:	83 c4 0c             	add    esp,0xc
c001e341:	c3                   	ret    

c001e342 <nanoSleepUntil(unsigned long long)>:
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e349:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e34d:	3b 05 90 f6 02 c0    	cmp    eax,DWORD PTR ds:0xc002f690
c001e353:	89 d1                	mov    ecx,edx
c001e355:	1b 0d 94 f6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f694
c001e35b:	73 04                	jae    c001e361 <nanoSleepUntil(unsigned long long)+0x1f>
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	c3                   	ret    
c001e361:	fa                   	cli    
c001e362:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e368:	83 ec 08             	sub    esp,0x8
c001e36b:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001e371:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e377:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e37a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e37d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e383:	68 58 25 03 c0       	push   0xc0032558
c001e388:	e8 df af 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e38d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e394:	e8 3a ff ff ff       	call   c001e2d3 <blockTask(TaskState)>
c001e399:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e39e:	83 c4 10             	add    esp,0x10
c001e3a1:	48                   	dec    eax
c001e3a2:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e3a7:	85 c0                	test   eax,eax
c001e3a9:	75 09                	jne    c001e3b4 <nanoSleepUntil(unsigned long long)+0x72>
c001e3ab:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e3b0:	85 c0                	test   eax,eax
c001e3b2:	75 12                	jne    c001e3c6 <nanoSleepUntil(unsigned long long)+0x84>
c001e3b4:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e3b9:	48                   	dec    eax
c001e3ba:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e3bf:	75 9c                	jne    c001e35d <nanoSleepUntil(unsigned long long)+0x1b>
c001e3c1:	fb                   	sti    
c001e3c2:	83 c4 0c             	add    esp,0xc
c001e3c5:	c3                   	ret    
c001e3c6:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e3d0:	e8 ff fc ff ff       	call   c001e0d4 <schedule()>
c001e3d5:	eb dd                	jmp    c001e3b4 <nanoSleepUntil(unsigned long long)+0x72>

c001e3d7 <nanoSleep(unsigned long long)>:
c001e3d7:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c001e3dc:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c001e3e2:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3e6:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3ea:	e9 53 ff ff ff       	jmp    c001e342 <nanoSleepUntil(unsigned long long)>

c001e3ef <sleep(unsigned long long)>:
c001e3ef:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3f7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3fc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e400:	01 ca                	add    edx,ecx
c001e402:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e406:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e40a:	eb cb                	jmp    c001e3d7 <nanoSleep(unsigned long long)>

c001e40c <Semaphore::acquire()>:
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e413:	fa                   	cli    
c001e414:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e419:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e41f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e422:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001e428:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e42b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e42d:	7d 28                	jge    c001e457 <Semaphore::acquire()+0x4b>
c001e42f:	41                   	inc    ecx
c001e430:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e433:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e438:	85 c0                	test   eax,eax
c001e43a:	75 09                	jne    c001e445 <Semaphore::acquire()+0x39>
c001e43c:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e441:	85 c0                	test   eax,eax
c001e443:	75 4e                	jne    c001e493 <Semaphore::acquire()+0x87>
c001e445:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e44a:	48                   	dec    eax
c001e44b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e450:	75 01                	jne    c001e453 <Semaphore::acquire()+0x47>
c001e452:	fb                   	sti    
c001e453:	83 c4 0c             	add    esp,0xc
c001e456:	c3                   	ret    
c001e457:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e45c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e463:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e466:	85 c9                	test   ecx,ecx
c001e468:	74 3a                	je     c001e4a4 <Semaphore::acquire()+0x98>
c001e46a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e46d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e473:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e476:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e47b:	83 ec 0c             	sub    esp,0xc
c001e47e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e481:	6a 05                	push   0x5
c001e483:	e8 4b fe ff ff       	call   c001e2d3 <blockTask(TaskState)>
c001e488:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e48d:	83 c4 10             	add    esp,0x10
c001e490:	48                   	dec    eax
c001e491:	eb a0                	jmp    c001e433 <Semaphore::acquire()+0x27>
c001e493:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e49d:	e8 32 fc ff ff       	call   c001e0d4 <schedule()>
c001e4a2:	eb a1                	jmp    c001e445 <Semaphore::acquire()+0x39>
c001e4a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e4ac:	eb c8                	jmp    c001e476 <Semaphore::acquire()+0x6a>

c001e4ae <taskReturned>:
c001e4ae:	83 ec 18             	sub    esp,0x18
c001e4b1:	68 a0 cd 02 c0       	push   0xc002cda0
c001e4b6:	e8 66 be ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001e4bb:	83 c4 10             	add    esp,0x10
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	6a 02                	push   0x2
c001e4c3:	e8 0b fe ff ff       	call   c001e2d3 <blockTask(TaskState)>
c001e4c8:	fa                   	cli    
c001e4c9:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e4cf:	e8 00 fc ff ff       	call   c001e0d4 <schedule()>
c001e4d4:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	48                   	dec    eax
c001e4dd:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e4e2:	85 c0                	test   eax,eax
c001e4e4:	75 d8                	jne    c001e4be <taskReturned+0x10>
c001e4e6:	fb                   	sti    
c001e4e7:	eb d5                	jmp    c001e4be <taskReturned+0x10>

c001e4e9 <Thr::processFromPID(int)>:
c001e4e9:	57                   	push   edi
c001e4ea:	56                   	push   esi
c001e4eb:	53                   	push   ebx
c001e4ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4f0:	83 ec 0c             	sub    esp,0xc
c001e4f3:	68 96 cb 02 c0       	push   0xc002cb96
c001e4f8:	e8 ee 43 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e4fd:	fa                   	cli    
c001e4fe:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e504:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e50b:	e8 a6 ad 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	89 c7                	mov    edi,eax
c001e515:	eb 14                	jmp    c001e52b <Thr::processFromPID(int)+0x42>
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	68 64 25 03 c0       	push   0xc0032564
c001e51f:	e8 92 ad 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e524:	83 c4 10             	add    esp,0x10
c001e527:	39 f8                	cmp    eax,edi
c001e529:	74 49                	je     c001e574 <Thr::processFromPID(int)+0x8b>
c001e52b:	83 ec 0c             	sub    esp,0xc
c001e52e:	68 64 25 03 c0       	push   0xc0032564
c001e533:	e8 7e ad 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e538:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e53f:	89 c3                	mov    ebx,eax
c001e541:	e8 78 ad 00 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e546:	58                   	pop    eax
c001e547:	5a                   	pop    edx
c001e548:	53                   	push   ebx
c001e549:	68 64 25 03 c0       	push   0xc0032564
c001e54e:	e8 19 ae 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e553:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e556:	83 c4 10             	add    esp,0x10
c001e559:	39 30                	cmp    DWORD PTR [eax],esi
c001e55b:	75 ba                	jne    c001e517 <Thr::processFromPID(int)+0x2e>
c001e55d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e562:	48                   	dec    eax
c001e563:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e568:	74 07                	je     c001e571 <Thr::processFromPID(int)+0x88>
c001e56a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e56d:	5b                   	pop    ebx
c001e56e:	5e                   	pop    esi
c001e56f:	5f                   	pop    edi
c001e570:	c3                   	ret    
c001e571:	fb                   	sti    
c001e572:	eb f6                	jmp    c001e56a <Thr::processFromPID(int)+0x81>
c001e574:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e579:	48                   	dec    eax
c001e57a:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e57f:	75 01                	jne    c001e582 <Thr::processFromPID(int)+0x99>
c001e581:	fb                   	sti    
c001e582:	83 ec 0c             	sub    esp,0xc
c001e585:	68 b1 cb 02 c0       	push   0xc002cbb1
c001e58a:	e8 5c 43 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e58f:	83 c4 10             	add    esp,0x10
c001e592:	31 c0                	xor    eax,eax
c001e594:	5b                   	pop    ebx
c001e595:	5e                   	pop    esi
c001e596:	5f                   	pop    edi
c001e597:	c3                   	ret    

c001e598 <unblockTask(ThreadControlBlock*)>:
c001e598:	53                   	push   ebx
c001e599:	83 ec 08             	sub    esp,0x8
c001e59c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5a0:	fa                   	cli    
c001e5a1:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e5a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5aa:	85 c0                	test   eax,eax
c001e5ac:	74 66                	je     c001e614 <unblockTask(ThreadControlBlock*)+0x7c>
c001e5ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5b1:	48                   	dec    eax
c001e5b2:	74 31                	je     c001e5e5 <unblockTask(ThreadControlBlock*)+0x4d>
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	68 64 25 03 c0       	push   0xc0032564
c001e5bc:	e8 f5 ac 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5c1:	83 c4 10             	add    esp,0x10
c001e5c4:	85 c0                	test   eax,eax
c001e5c6:	75 17                	jne    c001e5df <unblockTask(ThreadControlBlock*)+0x47>
c001e5c8:	eb 68                	jmp    c001e632 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5ca:	83 ec 08             	sub    esp,0x8
c001e5cd:	50                   	push   eax
c001e5ce:	68 64 25 03 c0       	push   0xc0032564
c001e5d3:	e8 7c b0 00 00       	call   c0029654 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e5d8:	83 c4 10             	add    esp,0x10
c001e5db:	85 c0                	test   eax,eax
c001e5dd:	74 53                	je     c001e632 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5df:	39 c3                	cmp    ebx,eax
c001e5e1:	75 e7                	jne    c001e5ca <unblockTask(ThreadControlBlock*)+0x32>
c001e5e3:	eb 1c                	jmp    c001e601 <unblockTask(ThreadControlBlock*)+0x69>
c001e5e5:	83 ec 0c             	sub    esp,0xc
c001e5e8:	68 90 ce 02 c0       	push   0xc002ce90
c001e5ed:	e8 f9 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e5f2:	c7 04 24 1c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce1c
c001e5f9:	e8 ed 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e5fe:	83 c4 10             	add    esp,0x10
c001e601:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e606:	48                   	dec    eax
c001e607:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e60c:	75 01                	jne    c001e60f <unblockTask(ThreadControlBlock*)+0x77>
c001e60e:	fb                   	sti    
c001e60f:	83 c4 08             	add    esp,0x8
c001e612:	5b                   	pop    ebx
c001e613:	c3                   	ret    
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	68 d4 cd 02 c0       	push   0xc002cdd4
c001e61c:	e8 ca 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e621:	c7 04 24 1c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce1c
c001e628:	e8 be 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	eb cf                	jmp    c001e601 <unblockTask(ThreadControlBlock*)+0x69>
c001e632:	83 ec 08             	sub    esp,0x8
c001e635:	53                   	push   ebx
c001e636:	68 64 25 03 c0       	push   0xc0032564
c001e63b:	e8 2c ad 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e640:	83 c4 10             	add    esp,0x10
c001e643:	eb bc                	jmp    c001e601 <unblockTask(ThreadControlBlock*)+0x69>

c001e645 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e645:	55                   	push   ebp
c001e646:	57                   	push   edi
c001e647:	56                   	push   esi
c001e648:	53                   	push   ebx
c001e649:	83 ec 1c             	sub    esp,0x1c
c001e64c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e650:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e653:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e659:	85 ff                	test   edi,edi
c001e65b:	7e 20                	jle    c001e67d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e65d:	31 f6                	xor    esi,esi
c001e65f:	83 ec 0c             	sub    esp,0xc
c001e662:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e669:	46                   	inc    esi
c001e66a:	e8 2d 12 ff ff       	call   c000f89c <free>
c001e66f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e672:	83 c4 10             	add    esp,0x10
c001e675:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e67b:	7f e2                	jg     c001e65f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e67d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e687:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e68c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e68f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e692:	d3 c0                	rol    eax,cl
c001e694:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e69b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e69e:	89 f7                	mov    edi,esi
c001e6a0:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e6a8:	0f 85 74 01 00 00    	jne    c001e822 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e6ae:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e6b4:	85 ed                	test   ebp,ebp
c001e6b6:	74 1b                	je     c001e6d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	55                   	push   ebp
c001e6bc:	e8 d5 b9 ff ff       	call   c001a096 <EnvVarContainer::~EnvVarContainer()>
c001e6c1:	59                   	pop    ecx
c001e6c2:	5e                   	pop    esi
c001e6c3:	6a 0c                	push   0xc
c001e6c5:	55                   	push   ebp
c001e6c6:	e8 40 41 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001e6cb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	89 f7                	mov    edi,esi
c001e6d3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6d9:	85 c0                	test   eax,eax
c001e6db:	0f 84 aa 00 00 00    	je     c001e78b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6e1:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e6e4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6e8:	31 c9                	xor    ecx,ecx
c001e6ea:	eb 10                	jmp    c001e6fc <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e6ec:	41                   	inc    ecx
c001e6ed:	83 f9 10             	cmp    ecx,0x10
c001e6f0:	0f 84 95 00 00 00    	je     c001e78b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6f6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6fc:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e703:	d3 fa                	sar    edx,cl
c001e705:	83 e2 01             	and    edx,0x1
c001e708:	74 e2                	je     c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e70a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e70d:	01 ca                	add    edx,ecx
c001e70f:	89 d5                	mov    ebp,edx
c001e711:	c1 e5 05             	shl    ebp,0x5
c001e714:	01 ea                	add    edx,ebp
c001e716:	01 d0                	add    eax,edx
c001e718:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e71e:	83 fd 07             	cmp    ebp,0x7
c001e721:	75 c9                	jne    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e723:	05 40 02 00 00       	add    eax,0x240
c001e728:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e72b:	83 fd ff             	cmp    ebp,0xffffffff
c001e72e:	0f 8c 08 01 00 00    	jl     c001e83c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e734:	0f 84 b9 01 00 00    	je     c001e8f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e73a:	85 ed                	test   ebp,ebp
c001e73c:	0f 84 a0 01 00 00    	je     c001e8e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e742:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e744:	75 a6                	jne    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e746:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e74c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e750:	01 d0                	add    eax,edx
c001e752:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e75f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e762:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e768:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e76f:	50                   	push   eax
c001e770:	e8 23 fe ff ff       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c001e775:	83 c4 10             	add    esp,0x10
c001e778:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e77b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e77f:	89 f7                	mov    edi,esi
c001e781:	41                   	inc    ecx
c001e782:	83 f9 10             	cmp    ecx,0x10
c001e785:	0f 85 6b ff ff ff    	jne    c001e6f6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e78b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e791:	85 c0                	test   eax,eax
c001e793:	74 5d                	je     c001e7f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e795:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e79b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e7a1:	74 4f                	je     c001e7f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e7a3:	83 ec 0c             	sub    esp,0xc
c001e7a6:	68 64 25 03 c0       	push   0xc0032564
c001e7ab:	e8 06 ab 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b0:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e7b7:	89 c7                	mov    edi,eax
c001e7b9:	e8 dc aa 00 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	84 c0                	test   al,al
c001e7c3:	0f 84 e4 00 00 00    	je     c001e8ad <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e7c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7cc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e7d2:	85 d2                	test   edx,edx
c001e7d4:	74 0f                	je     c001e7e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7db:	52                   	push   edx
c001e7dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7e2:	83 c4 10             	add    esp,0x10
c001e7e5:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e7ef:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e7f2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e7f8:	85 db                	test   ebx,ebx
c001e7fa:	74 16                	je     c001e812 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	53                   	push   ebx
c001e800:	e8 9b 33 ff ff       	call   c0011ba0 <VAS::~VAS()>
c001e805:	58                   	pop    eax
c001e806:	5a                   	pop    edx
c001e807:	6a 14                	push   0x14
c001e809:	53                   	push   ebx
c001e80a:	e8 fc 3f ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	83 ec 0c             	sub    esp,0xc
c001e815:	68 c8 cb 02 c0       	push   0xc002cbc8
c001e81a:	e8 cc 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	83 ec 08             	sub    esp,0x8
c001e825:	68 3f 07 00 00       	push   0x73f
c001e82a:	68 d6 cb 02 c0       	push   0xc002cbd6
c001e82f:	e8 b7 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e834:	83 c4 2c             	add    esp,0x2c
c001e837:	5b                   	pop    ebx
c001e838:	5e                   	pop    esi
c001e839:	5f                   	pop    edi
c001e83a:	5d                   	pop    ebp
c001e83b:	c3                   	ret    
c001e83c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	68 d4 ce 02 c0       	push   0xc002ced4
c001e848:	e8 d4 ba ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001e84d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e850:	83 c4 10             	add    esp,0x10
c001e853:	89 f7                	mov    edi,esi
c001e855:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e859:	e9 8e fe ff ff       	jmp    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e85e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e864:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e86a:	75 1c                	jne    c001e888 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	68 3c cf 02 c0       	push   0xc002cf3c
c001e874:	e8 72 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e879:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e880:	e8 4e fa ff ff       	call   c001e2d3 <blockTask(TaskState)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	83 ec 08             	sub    esp,0x8
c001e88b:	56                   	push   esi
c001e88c:	68 64 25 03 c0       	push   0xc0032564
c001e891:	e8 d6 aa 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e896:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e89d:	e8 14 aa 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8a2:	83 c4 10             	add    esp,0x10
c001e8a5:	39 f8                	cmp    eax,edi
c001e8a7:	0f 84 1c ff ff ff    	je     c001e7c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e8ad:	83 ec 0c             	sub    esp,0xc
c001e8b0:	68 64 25 03 c0       	push   0xc0032564
c001e8b5:	e8 fc a9 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ba:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e8c1:	89 c6                	mov    esi,eax
c001e8c3:	e8 f6 a9 00 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8c8:	83 c4 10             	add    esp,0x10
c001e8cb:	39 f3                	cmp    ebx,esi
c001e8cd:	74 b9                	je     c001e888 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8cf:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e8d2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8d5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e8db:	75 ab                	jne    c001e888 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8dd:	e9 7c ff ff ff       	jmp    c001e85e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e8e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8e6:	83 ec 0c             	sub    esp,0xc
c001e8e9:	68 08 cf 02 c0       	push   0xc002cf08
c001e8ee:	e9 55 ff ff ff       	jmp    c001e848 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e8f3:	8b 36                	mov    esi,DWORD PTR [esi]
c001e8f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8f9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e8fc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8ff:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e905:	01 d7                	add    edi,edx
c001e907:	89 f8                	mov    eax,edi
c001e909:	e9 44 fe ff ff       	jmp    c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e90e <cleanerTaskFunction(void*)>:
c001e90e:	53                   	push   ebx
c001e90f:	83 ec 08             	sub    esp,0x8
c001e912:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e917:	48                   	dec    eax
c001e918:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e91d:	75 01                	jne    c001e920 <cleanerTaskFunction(void*)+0x12>
c001e91f:	fb                   	sti    
c001e920:	fa                   	cli    
c001e921:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e926:	80 3d 2c 25 03 c0 00 	cmp    BYTE PTR ds:0xc003252c,0x0
c001e92d:	8d 50 01             	lea    edx,[eax+0x1]
c001e930:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001e936:	0f 84 b9 00 00 00    	je     c001e9f5 <cleanerTaskFunction(void*)+0xe7>
c001e93c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e941:	85 c0                	test   eax,eax
c001e943:	75 01                	jne    c001e946 <cleanerTaskFunction(void*)+0x38>
c001e945:	fb                   	sti    
c001e946:	c6 05 2c 25 03 c0 00 	mov    BYTE PTR ds:0xc003252c,0x0
c001e94d:	fa                   	cli    
c001e94e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e954:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001e95a:	fa                   	cli    
c001e95b:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e961:	eb 3e                	jmp    c001e9a1 <cleanerTaskFunction(void*)+0x93>
c001e963:	83 ec 0c             	sub    esp,0xc
c001e966:	68 4c 25 03 c0       	push   0xc003254c
c001e96b:	e8 46 a9 00 00       	call   c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e970:	c7 04 24 4c 25 03 c0 	mov    DWORD PTR [esp],0xc003254c
c001e977:	89 c3                	mov    ebx,eax
c001e979:	e8 40 a9 00 00       	call   c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e97e:	c7 04 24 ec cb 02 c0 	mov    DWORD PTR [esp],0xc002cbec
c001e985:	e8 61 3f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e98a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e98d:	e8 b3 fc ff ff       	call   c001e645 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e992:	c7 04 24 05 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc05
c001e999:	e8 4d 3f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e99e:	83 c4 10             	add    esp,0x10
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 4c 25 03 c0       	push   0xc003254c
c001e9a9:	e8 ec a8 00 00       	call   c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	84 c0                	test   al,al
c001e9b3:	74 ae                	je     c001e963 <cleanerTaskFunction(void*)+0x55>
c001e9b5:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e9ba:	48                   	dec    eax
c001e9bb:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e9c0:	75 01                	jne    c001e9c3 <cleanerTaskFunction(void*)+0xb5>
c001e9c2:	fb                   	sti    
c001e9c3:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e9c8:	48                   	dec    eax
c001e9c9:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e9ce:	0f 85 3e ff ff ff    	jne    c001e912 <cleanerTaskFunction(void*)+0x4>
c001e9d4:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e9d9:	85 c0                	test   eax,eax
c001e9db:	0f 84 31 ff ff ff    	je     c001e912 <cleanerTaskFunction(void*)+0x4>
c001e9e1:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e9eb:	e8 e4 f6 ff ff       	call   c001e0d4 <schedule()>
c001e9f0:	e9 1d ff ff ff       	jmp    c001e912 <cleanerTaskFunction(void*)+0x4>
c001e9f5:	83 ec 0c             	sub    esp,0xc
c001e9f8:	6a 02                	push   0x2
c001e9fa:	e8 86 f8 ff ff       	call   c001e285 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9ff:	83 c4 10             	add    esp,0x10
c001ea02:	e9 3f ff ff ff       	jmp    c001e946 <cleanerTaskFunction(void*)+0x38>

c001ea07 <terminateTask(int)>:
c001ea07:	83 ec 14             	sub    esp,0x14
c001ea0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ea12:	83 c0 0c             	add    eax,0xc
c001ea15:	50                   	push   eax
c001ea16:	68 64 cf 02 c0       	push   0xc002cf64
c001ea1b:	e8 cb 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ea20:	fa                   	cli    
c001ea21:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ea27:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001ea2d:	fa                   	cli    
c001ea2e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ea34:	c7 04 24 18 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc18
c001ea3b:	e8 ab 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ea40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea49:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea51:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea54:	5a                   	pop    edx
c001ea55:	59                   	pop    ecx
c001ea56:	50                   	push   eax
c001ea57:	68 4c 25 03 c0       	push   0xc003254c
c001ea5c:	e8 0b a9 00 00       	call   c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea66:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea6d:	c7 04 24 32 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc32
c001ea74:	e8 72 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ea81:	85 c0                	test   eax,eax
c001ea83:	0f 84 8d 00 00 00    	je     c001eb16 <terminateTask(int)+0x10f>
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	68 4c cc 02 c0       	push   0xc002cc4c
c001ea91:	e8 55 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ea96:	58                   	pop    eax
c001ea97:	c6 05 2c 25 03 c0 01 	mov    BYTE PTR ds:0xc003252c,0x1
c001ea9e:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c001eaa4:	e8 ef fa ff ff       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c001eaa9:	c7 04 24 66 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc66
c001eab0:	e8 36 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eabd:	48                   	dec    eax
c001eabe:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eac3:	75 01                	jne    c001eac6 <terminateTask(int)+0xbf>
c001eac5:	fb                   	sti    
c001eac6:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001eacb:	48                   	dec    eax
c001eacc:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001ead1:	75 09                	jne    c001eadc <terminateTask(int)+0xd5>
c001ead3:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c001eada:	75 4c                	jne    c001eb28 <terminateTask(int)+0x121>
c001eadc:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eae1:	48                   	dec    eax
c001eae2:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eae7:	75 01                	jne    c001eaea <terminateTask(int)+0xe3>
c001eae9:	fb                   	sti    
c001eaea:	83 ec 0c             	sub    esp,0xc
c001eaed:	68 9e cc 02 c0       	push   0xc002cc9e
c001eaf2:	e8 f4 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	fa                   	cli    
c001eafb:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001eb01:	e8 ce f5 ff ff       	call   c001e0d4 <schedule()>
c001eb06:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eb0b:	48                   	dec    eax
c001eb0c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eb11:	75 e7                	jne    c001eafa <terminateTask(int)+0xf3>
c001eb13:	fb                   	sti    
c001eb14:	eb e4                	jmp    c001eafa <terminateTask(int)+0xf3>
c001eb16:	83 ec 0c             	sub    esp,0xc
c001eb19:	68 80 cc 02 c0       	push   0xc002cc80
c001eb1e:	e8 c8 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eb23:	83 c4 10             	add    esp,0x10
c001eb26:	eb 90                	jmp    c001eab8 <terminateTask(int)+0xb1>
c001eb28:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001eb32:	e8 9d f5 ff ff       	call   c001e0d4 <schedule()>
c001eb37:	eb a3                	jmp    c001eadc <terminateTask(int)+0xd5>

c001eb39 <Thr::terminateFromIRQ(int)>:
c001eb39:	83 ec 18             	sub    esp,0x18
c001eb3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb40:	e8 c2 fe ff ff       	call   c001ea07 <terminateTask(int)>
c001eb45:	90                   	nop

c001eb46 <Semaphore::release()>:
c001eb46:	83 ec 0c             	sub    esp,0xc
c001eb49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb4d:	fa                   	cli    
c001eb4e:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001eb53:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001eb59:	8d 48 01             	lea    ecx,[eax+0x1]
c001eb5c:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001eb62:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eb65:	85 c9                	test   ecx,ecx
c001eb67:	74 3c                	je     c001eba5 <Semaphore::release()+0x5f>
c001eb69:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb72:	51                   	push   ecx
c001eb73:	e8 20 fa ff ff       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c001eb78:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	48                   	dec    eax
c001eb81:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001eb86:	85 c0                	test   eax,eax
c001eb88:	75 09                	jne    c001eb93 <Semaphore::release()+0x4d>
c001eb8a:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001eb8f:	85 c0                	test   eax,eax
c001eb91:	75 17                	jne    c001ebaa <Semaphore::release()+0x64>
c001eb93:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eb98:	48                   	dec    eax
c001eb99:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eb9e:	75 01                	jne    c001eba1 <Semaphore::release()+0x5b>
c001eba0:	fb                   	sti    
c001eba1:	83 c4 0c             	add    esp,0xc
c001eba4:	c3                   	ret    
c001eba5:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eba8:	eb d7                	jmp    c001eb81 <Semaphore::release()+0x3b>
c001ebaa:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001ebb4:	e8 1b f5 ff ff       	call   c001e0d4 <schedule()>
c001ebb9:	eb d8                	jmp    c001eb93 <Semaphore::release()+0x4d>

c001ebbb <__static_initialization_and_destruction_0(int, int)>:
c001ebbb:	83 ec 0c             	sub    esp,0xc
c001ebbe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ebc3:	0f 85 88 00 00 00    	jne    c001ec51 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebc9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ebd1:	75 7e                	jne    c001ec51 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebd3:	83 ec 0c             	sub    esp,0xc
c001ebd6:	68 64 25 03 c0       	push   0xc0032564
c001ebdb:	e8 1c aa 00 00       	call   c00295fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebe0:	83 c4 10             	add    esp,0x10
c001ebe3:	83 ec 04             	sub    esp,0x4
c001ebe6:	68 dc dd 02 c0       	push   0xc002dddc
c001ebeb:	68 64 25 03 c0       	push   0xc0032564
c001ebf0:	68 b0 95 02 c0       	push   0xc00295b0
c001ebf5:	e8 8b 3b ff ff       	call   c0012785 <__cxa_atexit>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	83 ec 0c             	sub    esp,0xc
c001ec00:	68 58 25 03 c0       	push   0xc0032558
c001ec05:	e8 f2 a9 00 00       	call   c00295fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec0a:	83 c4 10             	add    esp,0x10
c001ec0d:	83 ec 04             	sub    esp,0x4
c001ec10:	68 dc dd 02 c0       	push   0xc002dddc
c001ec15:	68 58 25 03 c0       	push   0xc0032558
c001ec1a:	68 b0 95 02 c0       	push   0xc00295b0
c001ec1f:	e8 61 3b ff ff       	call   c0012785 <__cxa_atexit>
c001ec24:	83 c4 10             	add    esp,0x10
c001ec27:	83 ec 0c             	sub    esp,0xc
c001ec2a:	68 4c 25 03 c0       	push   0xc003254c
c001ec2f:	e8 c8 a9 00 00       	call   c00295fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	83 ec 04             	sub    esp,0x4
c001ec3a:	68 dc dd 02 c0       	push   0xc002dddc
c001ec3f:	68 4c 25 03 c0       	push   0xc003254c
c001ec44:	68 b0 95 02 c0       	push   0xc00295b0
c001ec49:	e8 37 3b ff ff       	call   c0012785 <__cxa_atexit>
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	90                   	nop
c001ec52:	83 c4 0c             	add    esp,0xc
c001ec55:	c3                   	ret    

c001ec56 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	83 ec 08             	sub    esp,0x8
c001ec5c:	68 ff ff 00 00       	push   0xffff
c001ec61:	6a 01                	push   0x1
c001ec63:	e8 53 ff ff ff       	call   c001ebbb <__static_initialization_and_destruction_0(int, int)>
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	83 c4 0c             	add    esp,0xc
c001ec6e:	c3                   	ret    

c001ec6f <Vm::inbv(unsigned short)>:
c001ec6f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec73:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec78:	75 06                	jne    c001ec80 <Vm::inbv(unsigned short)+0x11>
c001ec7a:	a0 ac 25 03 c0       	mov    al,ds:0xc00325ac
c001ec7f:	c3                   	ret    
c001ec80:	ec                   	in     al,dx
c001ec81:	c3                   	ret    

c001ec82 <Vm::outbv(unsigned short, unsigned char)>:
c001ec82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec8a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec8f:	75 25                	jne    c001ecb6 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec91:	8b 0d ac 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325ac
c001ec97:	8d 51 01             	lea    edx,[ecx+0x1]
c001ec9a:	88 81 c0 25 03 c0    	mov    BYTE PTR [ecx-0x3ffcda40],al
c001eca0:	89 15 ac 25 03 c0    	mov    DWORD PTR ds:0xc00325ac,edx
c001eca6:	83 fa 20             	cmp    edx,0x20
c001eca9:	75 0c                	jne    c001ecb7 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ecab:	c7 05 ac 25 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x1f
c001ecb5:	c3                   	ret    
c001ecb6:	ee                   	out    dx,al
c001ecb7:	c3                   	ret    

c001ecb8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ecb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecbd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecc2:	c1 e0 04             	shl    eax,0x4
c001ecc5:	01 d0                	add    eax,edx
c001ecc7:	c3                   	ret    

c001ecc8 <Vm::getSegment(unsigned int)>:
c001ecc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eccc:	c1 e8 10             	shr    eax,0x10
c001eccf:	c3                   	ret    

c001ecd0 <Vm::getOffset(unsigned int)>:
c001ecd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecd4:	c3                   	ret    

c001ecd5 <Vm::mainloop2()>:
c001ecd5:	83 ec 18             	sub    esp,0x18
c001ecd8:	fa                   	cli    
c001ecd9:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ecdf:	6a 02                	push   0x2
c001ece1:	c6 05 a5 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a5,0x1
c001ece8:	e8 98 f5 ff ff       	call   c001e285 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecf2:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ecf6:	52                   	push   edx
c001ecf7:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ecfb:	52                   	push   edx
c001ecfc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ed00:	52                   	push   edx
c001ed01:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ed05:	50                   	push   eax
c001ed06:	e8 ef 15 fe ff       	call   c00002fa <goToVM86>
c001ed0b:	83 c4 2c             	add    esp,0x2c
c001ed0e:	c3                   	ret    

c001ed0f <Vm::mainVm8086Loop(void*)>:
c001ed0f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ed14:	48                   	dec    eax
c001ed15:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ed1a:	75 01                	jne    c001ed1d <Vm::mainVm8086Loop(void*)+0xe>
c001ed1c:	fb                   	sti    
c001ed1d:	eb b6                	jmp    c001ecd5 <Vm::mainloop2()>

c001ed1f <Vm::mainloop3(unsigned long)>:
c001ed1f:	83 ec 18             	sub    esp,0x18
c001ed22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed26:	fa                   	cli    
c001ed27:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ed2d:	6a 02                	push   0x2
c001ed2f:	c6 05 a4 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a4,0x1
c001ed36:	a3 a0 25 03 c0       	mov    ds:0xc00325a0,eax
c001ed3b:	e8 45 f5 ff ff       	call   c001e285 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed40:	83 c4 1c             	add    esp,0x1c
c001ed43:	eb 90                	jmp    c001ecd5 <Vm::mainloop2()>

c001ed45 <Vm::initialise8086()>:
c001ed45:	83 ec 0c             	sub    esp,0xc
c001ed48:	68 80 00 00 00       	push   0x80
c001ed4d:	6a 00                	push   0x0
c001ed4f:	68 0f ed 01 c0       	push   0xc001ed0f
c001ed54:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001ed5a:	e8 31 f1 ff ff       	call   c001de90 <Process::createThread(void (*)(void*), void*, int)>
c001ed5f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ed66:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ed6b:	68 00 01 00 00       	push   0x100
c001ed70:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001ed75:	6a 00                	push   0x0
c001ed77:	6a 00                	push   0x0
c001ed79:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed7f:	e8 8e 32 ff ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed84:	83 c4 2c             	add    esp,0x2c
c001ed87:	c3                   	ret    

c001ed88 <Vm::finish8086()>:
c001ed88:	53                   	push   ebx
c001ed89:	83 ec 08             	sub    esp,0x8
c001ed8c:	fa                   	cli    
c001ed8d:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ed93:	80 3d a4 25 03 c0 00 	cmp    BYTE PTR ds:0xc00325a4,0x0
c001ed9a:	75 15                	jne    c001edb1 <Vm::finish8086()+0x29>
c001ed9c:	e8 33 f3 ff ff       	call   c001e0d4 <schedule()>
c001eda1:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eda6:	48                   	dec    eax
c001eda7:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001edac:	75 de                	jne    c001ed8c <Vm::finish8086()+0x4>
c001edae:	fb                   	sti    
c001edaf:	eb db                	jmp    c001ed8c <Vm::finish8086()+0x4>
c001edb1:	83 ec 0c             	sub    esp,0xc
c001edb4:	8b 1d a0 25 03 c0    	mov    ebx,DWORD PTR ds:0xc00325a0
c001edba:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c001edc0:	c6 05 a4 25 03 c0 00 	mov    BYTE PTR ds:0xc00325a4,0x0
c001edc7:	e8 cc f7 ff ff       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c001edcc:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	8d 50 ff             	lea    edx,[eax-0x1]
c001edd7:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001eddd:	85 d2                	test   edx,edx
c001eddf:	75 01                	jne    c001ede2 <Vm::finish8086()+0x5a>
c001ede1:	fb                   	sti    
c001ede2:	89 d8                	mov    eax,ebx
c001ede4:	83 c4 08             	add    esp,0x8
c001ede7:	5b                   	pop    ebx
c001ede8:	c3                   	ret    

c001ede9 <Vm::getOutput8086(unsigned char*)>:
c001ede9:	57                   	push   edi
c001edea:	8b 0d ac 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325ac
c001edf0:	56                   	push   esi
c001edf1:	be c0 25 03 c0       	mov    esi,0xc00325c0
c001edf6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001edfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001edfc:	a1 ac 25 03 c0       	mov    eax,ds:0xc00325ac
c001ee01:	5e                   	pop    esi
c001ee02:	c7 05 ac 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x0
c001ee0c:	5f                   	pop    edi
c001ee0d:	c3                   	ret    

c001ee0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ee0e:	55                   	push   ebp
c001ee0f:	57                   	push   edi
c001ee10:	56                   	push   esi
c001ee11:	53                   	push   ebx
c001ee12:	83 ec 2c             	sub    esp,0x2c
c001ee15:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ee19:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ee21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee25:	fa                   	cli    
c001ee26:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ee2c:	0f b6 35 a5 25 03 c0 	movzx  esi,BYTE PTR ds:0xc00325a5
c001ee33:	89 f0                	mov    eax,esi
c001ee35:	84 c0                	test   al,al
c001ee37:	75 1d                	jne    c001ee56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ee39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee3d:	e8 92 f2 ff ff       	call   c001e0d4 <schedule()>
c001ee42:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ee47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee4b:	48                   	dec    eax
c001ee4c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ee51:	75 d2                	jne    c001ee25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee53:	fb                   	sti    
c001ee54:	eb cf                	jmp    c001ee25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee56:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ee5b:	c7 05 ac 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x0
c001ee65:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ee69:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ee6d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee71:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee75:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee79:	50                   	push   eax
c001ee7a:	6a 20                	push   0x20
c001ee7c:	6a 00                	push   0x0
c001ee7e:	68 c0 25 03 c0       	push   0xc00325c0
c001ee83:	e8 c8 18 fe ff       	call   c0000750 <memset>
c001ee88:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee8f:	e8 f8 09 ff ff       	call   c000f88c <malloc>
c001ee94:	83 c4 0c             	add    esp,0xc
c001ee97:	89 c3                	mov    ebx,eax
c001ee99:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001ee9f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eea3:	50                   	push   eax
c001eea4:	e8 a1 3f ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	85 db                	test   ebx,ebx
c001eeae:	75 0a                	jne    c001eeba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	68 83 cf 02 c0       	push   0xc002cf83
c001eeb8:	eb 3e                	jmp    c001eef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eeba:	50                   	push   eax
c001eebb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eebf:	50                   	push   eax
c001eec0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eec4:	50                   	push   eax
c001eec5:	53                   	push   ebx
c001eec6:	e8 8f 42 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001eecb:	83 c4 10             	add    esp,0x10
c001eece:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eed3:	74 0a                	je     c001eedf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	68 97 cf 02 c0       	push   0xc002cf97
c001eedd:	eb 19                	jmp    c001eef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eedf:	51                   	push   ecx
c001eee0:	51                   	push   ecx
c001eee1:	6a 01                	push   0x1
c001eee3:	53                   	push   ebx
c001eee4:	e8 c5 3f ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001eee9:	83 c4 10             	add    esp,0x10
c001eeec:	85 c0                	test   eax,eax
c001eeee:	74 24                	je     c001ef14 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	68 b0 cf 02 c0       	push   0xc002cfb0
c001eef8:	e8 24 b4 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001eefd:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ef02:	83 c4 10             	add    esp,0x10
c001ef05:	48                   	dec    eax
c001ef06:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ef0b:	85 c0                	test   eax,eax
c001ef0d:	75 01                	jne    c001ef10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ef0f:	fb                   	sti    
c001ef10:	31 f6                	xor    esi,esi
c001ef12:	eb 58                	jmp    c001ef6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ef14:	0f b7 ed             	movzx  ebp,bp
c001ef17:	50                   	push   eax
c001ef18:	0f b7 ff             	movzx  edi,di
c001ef1b:	50                   	push   eax
c001ef1c:	55                   	push   ebp
c001ef1d:	57                   	push   edi
c001ef1e:	e8 95 fd ff ff       	call   c001ecb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef23:	5a                   	pop    edx
c001ef24:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef26:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ef2a:	51                   	push   ecx
c001ef2b:	50                   	push   eax
c001ef2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef34:	53                   	push   ebx
c001ef35:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ef38:	83 c4 14             	add    esp,0x14
c001ef3b:	53                   	push   ebx
c001ef3c:	e8 cb 3f ff ff       	call   c0012f0c <File::close()>
c001ef41:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ef46:	83 c4 10             	add    esp,0x10
c001ef49:	48                   	dec    eax
c001ef4a:	c6 05 a5 25 03 c0 00 	mov    BYTE PTR ds:0xc00325a5,0x0
c001ef51:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ef56:	85 c0                	test   eax,eax
c001ef58:	75 01                	jne    c001ef5b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ef5a:	fb                   	sti    
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c001ef64:	e8 2f f6 ff ff       	call   c001e598 <unblockTask(ThreadControlBlock*)>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	83 c4 2c             	add    esp,0x2c
c001ef6f:	89 f0                	mov    eax,esi
c001ef71:	5b                   	pop    ebx
c001ef72:	5e                   	pop    esi
c001ef73:	5f                   	pop    edi
c001ef74:	5d                   	pop    ebp
c001ef75:	c3                   	ret    

c001ef76 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef76:	57                   	push   edi
c001ef77:	56                   	push   esi
c001ef78:	53                   	push   ebx
c001ef79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef85:	83 e8 06             	sub    eax,0x6
c001ef88:	0f b7 c0             	movzx  eax,ax
c001ef8b:	50                   	push   eax
c001ef8c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef91:	50                   	push   eax
c001ef92:	e8 21 fd ff ff       	call   c001ecb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef97:	5a                   	pop    edx
c001ef98:	5e                   	pop    esi
c001ef99:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ef9c:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef9f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efa5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001efa8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001efab:	83 c2 02             	add    edx,0x2
c001efae:	66 89 10             	mov    WORD PTR [eax],dx
c001efb1:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001efb4:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001efb8:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001efbb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001efbf:	89 d6                	mov    esi,edx
c001efc1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001efc7:	66 81 e6 ff fd       	and    si,0xfdff
c001efcc:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001efd0:	74 07                	je     c001efd9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001efd2:	89 d6                	mov    esi,edx
c001efd4:	66 81 ce 00 02       	or     si,0x200
c001efd9:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001efdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efe2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001efe6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001efee:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001eff1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001eff9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001effc:	5b                   	pop    ebx
c001effd:	5e                   	pop    esi
c001effe:	5f                   	pop    edi
c001efff:	c3                   	ret    

c001f000 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f000:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f005:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f00a:	c1 e0 04             	shl    eax,0x4
c001f00d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f010:	c3                   	ret    

c001f011 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f011:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f016:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f01b:	c1 e0 04             	shl    eax,0x4
c001f01e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f022:	c3                   	ret    

c001f023 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f023:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f028:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f02d:	c1 e0 04             	shl    eax,0x4
c001f030:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f033:	c3                   	ret    

c001f034 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f034:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f039:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f03e:	c1 e0 04             	shl    eax,0x4
c001f041:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f045:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f048:	c3                   	ret    

c001f049 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f049:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f04e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f053:	c1 e0 04             	shl    eax,0x4
c001f056:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f05a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f05e:	c3                   	ret    

c001f05f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f05f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f064:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f069:	c1 e0 04             	shl    eax,0x4
c001f06c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f070:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f073:	c3                   	ret    

c001f074 <Vm::faultHandler(regs*)>:
c001f074:	55                   	push   ebp
c001f075:	57                   	push   edi
c001f076:	56                   	push   esi
c001f077:	53                   	push   ebx
c001f078:	83 ec 1c             	sub    esp,0x1c
c001f07b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f07f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f082:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f086:	0f b7 f8             	movzx  edi,ax
c001f089:	52                   	push   edx
c001f08a:	0f b7 c0             	movzx  eax,ax
c001f08d:	50                   	push   eax
c001f08e:	e8 25 fc ff ff       	call   c001ecb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001f093:	5a                   	pop    edx
c001f094:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f097:	59                   	pop    ecx
c001f098:	89 c1                	mov    ecx,eax
c001f09a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f09d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0a1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0aa:	0f b7 c5             	movzx  eax,bp
c001f0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f0b5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f0b9:	e8 fa fb ff ff       	call   c001ecb8 <Vm::realToLinear(unsigned short, unsigned short)>
c001f0be:	5e                   	pop    esi
c001f0bf:	be 06 00 00 00       	mov    esi,0x6
c001f0c4:	5a                   	pop    edx
c001f0c5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f0ca:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f0cf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f0d2:	80 fa 9d             	cmp    dl,0x9d
c001f0d5:	0f 84 2c 02 00 00    	je     c001f307 <Vm::faultHandler(regs*)+0x293>
c001f0db:	0f 87 91 00 00 00    	ja     c001f172 <Vm::faultHandler(regs*)+0xfe>
c001f0e1:	80 fa 66             	cmp    dl,0x66
c001f0e4:	0f 84 98 01 00 00    	je     c001f282 <Vm::faultHandler(regs*)+0x20e>
c001f0ea:	77 47                	ja     c001f133 <Vm::faultHandler(regs*)+0xbf>
c001f0ec:	80 fa 36             	cmp    dl,0x36
c001f0ef:	0f 84 80 01 00 00    	je     c001f275 <Vm::faultHandler(regs*)+0x201>
c001f0f5:	77 1a                	ja     c001f111 <Vm::faultHandler(regs*)+0x9d>
c001f0f7:	80 fa 26             	cmp    dl,0x26
c001f0fa:	0f 84 4e 01 00 00    	je     c001f24e <Vm::faultHandler(regs*)+0x1da>
c001f100:	80 fa 2e             	cmp    dl,0x2e
c001f103:	0f 85 e2 05 00 00    	jne    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f109:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f10c:	31 f6                	xor    esi,esi
c001f10e:	41                   	inc    ecx
c001f10f:	eb be                	jmp    c001f0cf <Vm::faultHandler(regs*)+0x5b>
c001f111:	80 fa 64             	cmp    dl,0x64
c001f114:	0f 84 41 01 00 00    	je     c001f25b <Vm::faultHandler(regs*)+0x1e7>
c001f11a:	0f 87 48 01 00 00    	ja     c001f268 <Vm::faultHandler(regs*)+0x1f4>
c001f120:	80 fa 3e             	cmp    dl,0x3e
c001f123:	0f 85 c2 05 00 00    	jne    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f129:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f12c:	be 01 00 00 00       	mov    esi,0x1
c001f131:	eb db                	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f133:	80 fa 6d             	cmp    dl,0x6d
c001f136:	0f 84 ec 02 00 00    	je     c001f428 <Vm::faultHandler(regs*)+0x3b4>
c001f13c:	77 17                	ja     c001f155 <Vm::faultHandler(regs*)+0xe1>
c001f13e:	80 fa 67             	cmp    dl,0x67
c001f141:	0f 84 48 01 00 00    	je     c001f28f <Vm::faultHandler(regs*)+0x21b>
c001f147:	80 fa 6c             	cmp    dl,0x6c
c001f14a:	0f 84 69 02 00 00    	je     c001f3b9 <Vm::faultHandler(regs*)+0x345>
c001f150:	e9 96 05 00 00       	jmp    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f155:	80 fa 6f             	cmp    dl,0x6f
c001f158:	0f 84 f4 03 00 00    	je     c001f552 <Vm::faultHandler(regs*)+0x4de>
c001f15e:	0f 82 59 03 00 00    	jb     c001f4bd <Vm::faultHandler(regs*)+0x449>
c001f164:	80 fa 9c             	cmp    dl,0x9c
c001f167:	0f 84 2f 01 00 00    	je     c001f29c <Vm::faultHandler(regs*)+0x228>
c001f16d:	e9 79 05 00 00       	jmp    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f172:	80 fa ec             	cmp    dl,0xec
c001f175:	0f 84 14 05 00 00    	je     c001f68f <Vm::faultHandler(regs*)+0x61b>
c001f17b:	77 7b                	ja     c001f1f8 <Vm::faultHandler(regs*)+0x184>
c001f17d:	80 fa e4             	cmp    dl,0xe4
c001f180:	0f 84 93 04 00 00    	je     c001f619 <Vm::faultHandler(regs*)+0x5a5>
c001f186:	77 53                	ja     c001f1db <Vm::faultHandler(regs*)+0x167>
c001f188:	80 fa cd             	cmp    dl,0xcd
c001f18b:	0f 84 d9 01 00 00    	je     c001f36a <Vm::faultHandler(regs*)+0x2f6>
c001f191:	80 fa cf             	cmp    dl,0xcf
c001f194:	0f 85 51 05 00 00    	jne    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f19a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f19d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f1a0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f1a4:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f1a7:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f1ab:	81 ca 00 02 02 00    	or     edx,0x20200
c001f1b1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f1b4:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f1b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1be:	66 c1 e8 09          	shr    ax,0x9
c001f1c2:	83 e0 01             	and    eax,0x1
c001f1c5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1c8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f1cb:	83 c0 06             	add    eax,0x6
c001f1ce:	25 ff ff 00 00       	and    eax,0xffff
c001f1d3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f1d6:	e9 0c 05 00 00       	jmp    c001f6e7 <Vm::faultHandler(regs*)+0x673>
c001f1db:	80 fa e6             	cmp    dl,0xe6
c001f1de:	0f 84 7f 04 00 00    	je     c001f663 <Vm::faultHandler(regs*)+0x5ef>
c001f1e4:	0f 82 4b 04 00 00    	jb     c001f635 <Vm::faultHandler(regs*)+0x5c1>
c001f1ea:	80 fa e7             	cmp    dl,0xe7
c001f1ed:	0f 84 87 04 00 00    	je     c001f67a <Vm::faultHandler(regs*)+0x606>
c001f1f3:	e9 f3 04 00 00       	jmp    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f1f8:	80 fa ef             	cmp    dl,0xef
c001f1fb:	0f 84 d1 04 00 00    	je     c001f6d2 <Vm::faultHandler(regs*)+0x65e>
c001f201:	77 28                	ja     c001f22b <Vm::faultHandler(regs*)+0x1b7>
c001f203:	80 fa ed             	cmp    dl,0xed
c001f206:	0f 84 9f 04 00 00    	je     c001f6ab <Vm::faultHandler(regs*)+0x637>
c001f20c:	80 fa ee             	cmp    dl,0xee
c001f20f:	0f 85 d6 04 00 00    	jne    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f215:	50                   	push   eax
c001f216:	50                   	push   eax
c001f217:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f21b:	50                   	push   eax
c001f21c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f220:	50                   	push   eax
c001f221:	e8 5c fa ff ff       	call   c001ec82 <Vm::outbv(unsigned short, unsigned char)>
c001f226:	e9 9f 04 00 00       	jmp    c001f6ca <Vm::faultHandler(regs*)+0x656>
c001f22b:	80 fa fa             	cmp    dl,0xfa
c001f22e:	0f 84 69 01 00 00    	je     c001f39d <Vm::faultHandler(regs*)+0x329>
c001f234:	80 fa fb             	cmp    dl,0xfb
c001f237:	0f 84 6e 01 00 00    	je     c001f3ab <Vm::faultHandler(regs*)+0x337>
c001f23d:	80 fa f3             	cmp    dl,0xf3
c001f240:	0f 85 a5 04 00 00    	jne    c001f6eb <Vm::faultHandler(regs*)+0x677>
c001f246:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f249:	e9 c0 fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f24e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f251:	be 02 00 00 00       	mov    esi,0x2
c001f256:	e9 b3 fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f25b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f25e:	be 03 00 00 00       	mov    esi,0x3
c001f263:	e9 a6 fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f268:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f26b:	be 04 00 00 00       	mov    esi,0x4
c001f270:	e9 99 fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f275:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f278:	be 05 00 00 00       	mov    esi,0x5
c001f27d:	e9 8c fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f282:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f285:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f28a:	e9 7f fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f28f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f292:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f297:	e9 72 fe ff ff       	jmp    c001f10e <Vm::faultHandler(regs*)+0x9a>
c001f29c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f29f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f2a3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2a8:	74 30                	je     c001f2da <Vm::faultHandler(regs*)+0x266>
c001f2aa:	83 e9 04             	sub    ecx,0x4
c001f2ad:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2b3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2b9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2bc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2c5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2c9:	0f 84 15 04 00 00    	je     c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f2cf:	80 ce 02             	or     dh,0x2
c001f2d2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2d5:	e9 0a 04 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f2da:	83 e9 02             	sub    ecx,0x2
c001f2dd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2e3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2e6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2f0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2f4:	74 05                	je     c001f2fb <Vm::faultHandler(regs*)+0x287>
c001f2f6:	80 ce 02             	or     dh,0x2
c001f2f9:	eb 03                	jmp    c001f2fe <Vm::faultHandler(regs*)+0x28a>
c001f2fb:	80 e6 fd             	and    dh,0xfd
c001f2fe:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f302:	e9 dd 03 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f307:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f30c:	74 2a                	je     c001f338 <Vm::faultHandler(regs*)+0x2c4>
c001f30e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f310:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f316:	81 ca 00 02 02 00    	or     edx,0x20200
c001f31c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f31f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f321:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f327:	c1 e8 09             	shr    eax,0x9
c001f32a:	83 e0 01             	and    eax,0x1
c001f32d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f330:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f333:	83 c0 04             	add    eax,0x4
c001f336:	eb 25                	jmp    c001f35d <Vm::faultHandler(regs*)+0x2e9>
c001f338:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f33b:	81 ca 00 02 02 00    	or     edx,0x20200
c001f341:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f344:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f347:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f34d:	66 c1 e8 09          	shr    ax,0x9
c001f351:	83 e0 01             	and    eax,0x1
c001f354:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f357:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f35a:	83 c0 02             	add    eax,0x2
c001f35d:	25 ff ff 00 00       	and    eax,0xffff
c001f362:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f365:	e9 7a 03 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f36a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f36e:	3c ee                	cmp    al,0xee
c001f370:	75 10                	jne    c001f382 <Vm::faultHandler(regs*)+0x30e>
c001f372:	83 ec 0c             	sub    esp,0xc
c001f375:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f378:	e8 a2 f9 ff ff       	call   c001ed1f <Vm::mainloop3(unsigned long)>
c001f37d:	e9 4b 03 00 00       	jmp    c001f6cd <Vm::faultHandler(regs*)+0x659>
c001f382:	83 ec 0c             	sub    esp,0xc
c001f385:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38d:	51                   	push   ecx
c001f38e:	50                   	push   eax
c001f38f:	53                   	push   ebx
c001f390:	e8 e1 fb ff ff       	call   c001ef76 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f395:	83 c4 20             	add    esp,0x20
c001f398:	e9 4a 03 00 00       	jmp    c001f6e7 <Vm::faultHandler(regs*)+0x673>
c001f39d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3a2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3a6:	e9 39 03 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f3ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3b0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f3b4:	e9 2b 03 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f3b9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f3bc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f3c1:	74 2b                	je     c001f3ee <Vm::faultHandler(regs*)+0x37a>
c001f3c3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f3ca:	76 22                	jbe    c001f3ee <Vm::faultHandler(regs*)+0x37a>
c001f3cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3d0:	50                   	push   eax
c001f3d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3d5:	50                   	push   eax
c001f3d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3da:	50                   	push   eax
c001f3db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3df:	50                   	push   eax
c001f3e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3e4:	50                   	push   eax
c001f3e5:	6a 6c                	push   0x6c
c001f3e7:	6a 6c                	push   0x6c
c001f3e9:	e9 b9 01 00 00       	jmp    c001f5a7 <Vm::faultHandler(regs*)+0x533>
c001f3ee:	83 ec 0c             	sub    esp,0xc
c001f3f1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3f5:	0f b7 f6             	movzx  esi,si
c001f3f8:	50                   	push   eax
c001f3f9:	e8 71 f8 ff ff       	call   c001ec6f <Vm::inbv(unsigned short)>
c001f3fe:	83 c4 0c             	add    esp,0xc
c001f401:	0f b6 c0             	movzx  eax,al
c001f404:	50                   	push   eax
c001f405:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f409:	50                   	push   eax
c001f40a:	56                   	push   esi
c001f40b:	e8 24 fc ff ff       	call   c001f034 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f410:	83 c4 10             	add    esp,0x10
c001f413:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f416:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f41a:	74 03                	je     c001f41f <Vm::faultHandler(regs*)+0x3ab>
c001f41c:	48                   	dec    eax
c001f41d:	eb 01                	jmp    c001f420 <Vm::faultHandler(regs*)+0x3ac>
c001f41f:	40                   	inc    eax
c001f420:	0f b7 c0             	movzx  eax,ax
c001f423:	e9 8d 00 00 00       	jmp    c001f4b5 <Vm::faultHandler(regs*)+0x441>
c001f428:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f42b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f42e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f433:	74 29                	je     c001f45e <Vm::faultHandler(regs*)+0x3ea>
c001f435:	3d ff ff 00 00       	cmp    eax,0xffff
c001f43a:	76 22                	jbe    c001f45e <Vm::faultHandler(regs*)+0x3ea>
c001f43c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f440:	50                   	push   eax
c001f441:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f445:	50                   	push   eax
c001f446:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f44a:	50                   	push   eax
c001f44b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f44f:	50                   	push   eax
c001f450:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f454:	50                   	push   eax
c001f455:	6a 6d                	push   0x6d
c001f457:	6a 6d                	push   0x6d
c001f459:	e9 49 01 00 00       	jmp    c001f5a7 <Vm::faultHandler(regs*)+0x533>
c001f45e:	0f b7 c8             	movzx  ecx,ax
c001f461:	0f b7 f6             	movzx  esi,si
c001f464:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f467:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f46c:	74 20                	je     c001f48e <Vm::faultHandler(regs*)+0x41a>
c001f46e:	ed                   	in     eax,dx
c001f46f:	55                   	push   ebp
c001f470:	50                   	push   eax
c001f471:	51                   	push   ecx
c001f472:	56                   	push   esi
c001f473:	e8 e7 fb ff ff       	call   c001f05f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f478:	83 c4 10             	add    esp,0x10
c001f47b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f47e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f482:	74 05                	je     c001f489 <Vm::faultHandler(regs*)+0x415>
c001f484:	83 e8 04             	sub    eax,0x4
c001f487:	eb 27                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x43c>
c001f489:	83 c0 04             	add    eax,0x4
c001f48c:	eb 22                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x43c>
c001f48e:	66 ed                	in     ax,dx
c001f490:	0f b7 c0             	movzx  eax,ax
c001f493:	57                   	push   edi
c001f494:	50                   	push   eax
c001f495:	51                   	push   ecx
c001f496:	56                   	push   esi
c001f497:	e8 ad fb ff ff       	call   c001f049 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f49c:	83 c4 10             	add    esp,0x10
c001f49f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4a2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f4a6:	74 05                	je     c001f4ad <Vm::faultHandler(regs*)+0x439>
c001f4a8:	83 e8 02             	sub    eax,0x2
c001f4ab:	eb 03                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x43c>
c001f4ad:	83 c0 02             	add    eax,0x2
c001f4b0:	25 ff ff 00 00       	and    eax,0xffff
c001f4b5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f4b8:	e9 27 02 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f4bd:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4c0:	3c 05                	cmp    al,0x5
c001f4c2:	77 24                	ja     c001f4e8 <Vm::faultHandler(regs*)+0x474>
c001f4c4:	0f b6 c0             	movzx  eax,al
c001f4c7:	ff 24 85 24 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fdc]
c001f4ce:	0f b7 fd             	movzx  edi,bp
c001f4d1:	eb 15                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x474>
c001f4d3:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f4d7:	eb 0f                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x474>
c001f4d9:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f4dd:	eb 09                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x474>
c001f4df:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f4e3:	eb 03                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x474>
c001f4e5:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f4e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4eb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4f0:	74 29                	je     c001f51b <Vm::faultHandler(regs*)+0x4a7>
c001f4f2:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4f7:	76 22                	jbe    c001f51b <Vm::faultHandler(regs*)+0x4a7>
c001f4f9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4fd:	50                   	push   eax
c001f4fe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f502:	50                   	push   eax
c001f503:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f507:	50                   	push   eax
c001f508:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f50c:	50                   	push   eax
c001f50d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f511:	50                   	push   eax
c001f512:	6a 6e                	push   0x6e
c001f514:	6a 6e                	push   0x6e
c001f516:	e9 8c 00 00 00       	jmp    c001f5a7 <Vm::faultHandler(regs*)+0x533>
c001f51b:	0f b7 c0             	movzx  eax,ax
c001f51e:	52                   	push   edx
c001f51f:	52                   	push   edx
c001f520:	50                   	push   eax
c001f521:	57                   	push   edi
c001f522:	e8 d9 fa ff ff       	call   c001f000 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f527:	59                   	pop    ecx
c001f528:	0f b6 c0             	movzx  eax,al
c001f52b:	5e                   	pop    esi
c001f52c:	50                   	push   eax
c001f52d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f531:	50                   	push   eax
c001f532:	e8 4b f7 ff ff       	call   c001ec82 <Vm::outbv(unsigned short, unsigned char)>
c001f537:	83 c4 10             	add    esp,0x10
c001f53a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f53d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f541:	74 03                	je     c001f546 <Vm::faultHandler(regs*)+0x4d2>
c001f543:	48                   	dec    eax
c001f544:	eb 01                	jmp    c001f547 <Vm::faultHandler(regs*)+0x4d3>
c001f546:	40                   	inc    eax
c001f547:	0f b7 c0             	movzx  eax,ax
c001f54a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f54d:	e9 92 01 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f552:	8d 46 ff             	lea    eax,[esi-0x1]
c001f555:	3c 05                	cmp    al,0x5
c001f557:	77 1f                	ja     c001f578 <Vm::faultHandler(regs*)+0x504>
c001f559:	0f b6 c0             	movzx  eax,al
c001f55c:	ff 24 85 3c d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fc4]
c001f563:	89 ef                	mov    edi,ebp
c001f565:	eb 11                	jmp    c001f578 <Vm::faultHandler(regs*)+0x504>
c001f567:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f56a:	eb 0c                	jmp    c001f578 <Vm::faultHandler(regs*)+0x504>
c001f56c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f56f:	eb 07                	jmp    c001f578 <Vm::faultHandler(regs*)+0x504>
c001f571:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f574:	eb 02                	jmp    c001f578 <Vm::faultHandler(regs*)+0x504>
c001f576:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f578:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f57b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f580:	74 37                	je     c001f5b9 <Vm::faultHandler(regs*)+0x545>
c001f582:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f588:	76 2f                	jbe    c001f5b9 <Vm::faultHandler(regs*)+0x545>
c001f58a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f58e:	50                   	push   eax
c001f58f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f593:	50                   	push   eax
c001f594:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f598:	50                   	push   eax
c001f599:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f59d:	50                   	push   eax
c001f59e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5a2:	50                   	push   eax
c001f5a3:	6a 6f                	push   0x6f
c001f5a5:	6a 6f                	push   0x6f
c001f5a7:	68 c9 cf 02 c0       	push   0xc002cfc9
c001f5ac:	e8 3a 33 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001f5b1:	83 c4 20             	add    esp,0x20
c001f5b4:	e9 86 01 00 00       	jmp    c001f73f <Vm::faultHandler(regs*)+0x6cb>
c001f5b9:	0f b7 d7             	movzx  edx,di
c001f5bc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f5bf:	0f b7 c6             	movzx  eax,si
c001f5c2:	81 e1 00 04 00 00    	and    ecx,0x400
c001f5c8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f5cb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5d0:	74 1d                	je     c001f5ef <Vm::faultHandler(regs*)+0x57b>
c001f5d2:	55                   	push   ebp
c001f5d3:	55                   	push   ebp
c001f5d4:	50                   	push   eax
c001f5d5:	52                   	push   edx
c001f5d6:	e8 48 fa ff ff       	call   c001f023 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	89 fa                	mov    edx,edi
c001f5e0:	ef                   	out    dx,eax
c001f5e1:	85 c9                	test   ecx,ecx
c001f5e3:	74 05                	je     c001f5ea <Vm::faultHandler(regs*)+0x576>
c001f5e5:	83 ee 04             	sub    esi,0x4
c001f5e8:	eb 21                	jmp    c001f60b <Vm::faultHandler(regs*)+0x597>
c001f5ea:	83 c6 04             	add    esi,0x4
c001f5ed:	eb 1c                	jmp    c001f60b <Vm::faultHandler(regs*)+0x597>
c001f5ef:	55                   	push   ebp
c001f5f0:	55                   	push   ebp
c001f5f1:	50                   	push   eax
c001f5f2:	52                   	push   edx
c001f5f3:	e8 19 fa ff ff       	call   c001f011 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f5f8:	83 c4 10             	add    esp,0x10
c001f5fb:	89 fa                	mov    edx,edi
c001f5fd:	66 ef                	out    dx,ax
c001f5ff:	85 c9                	test   ecx,ecx
c001f601:	74 05                	je     c001f608 <Vm::faultHandler(regs*)+0x594>
c001f603:	83 ee 02             	sub    esi,0x2
c001f606:	eb 03                	jmp    c001f60b <Vm::faultHandler(regs*)+0x597>
c001f608:	83 c6 02             	add    esi,0x2
c001f60b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f611:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f614:	e9 cb 00 00 00       	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f619:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f620:	83 ec 0c             	sub    esp,0xc
c001f623:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f627:	50                   	push   eax
c001f628:	e8 42 f6 ff ff       	call   c001ec6f <Vm::inbv(unsigned short)>
c001f62d:	0f b6 c0             	movzx  eax,al
c001f630:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f633:	eb 3f                	jmp    c001f674 <Vm::faultHandler(regs*)+0x600>
c001f635:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f63a:	74 07                	je     c001f643 <Vm::faultHandler(regs*)+0x5cf>
c001f63c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f640:	ed                   	in     eax,dx
c001f641:	eb 14                	jmp    c001f657 <Vm::faultHandler(regs*)+0x5e3>
c001f643:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f646:	66 31 f6             	xor    si,si
c001f649:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f64c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f650:	66 ed                	in     ax,dx
c001f652:	0f b7 c0             	movzx  eax,ax
c001f655:	09 f0                	or     eax,esi
c001f657:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f65a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f65e:	e9 84 00 00 00       	jmp    c001f6e7 <Vm::faultHandler(regs*)+0x673>
c001f663:	52                   	push   edx
c001f664:	52                   	push   edx
c001f665:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f669:	50                   	push   eax
c001f66a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f66e:	50                   	push   eax
c001f66f:	e8 0e f6 ff ff       	call   c001ec82 <Vm::outbv(unsigned short, unsigned char)>
c001f674:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f678:	eb 53                	jmp    c001f6cd <Vm::faultHandler(regs*)+0x659>
c001f67a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f67d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f681:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f686:	74 03                	je     c001f68b <Vm::faultHandler(regs*)+0x617>
c001f688:	ef                   	out    dx,eax
c001f689:	eb cf                	jmp    c001f65a <Vm::faultHandler(regs*)+0x5e6>
c001f68b:	66 ef                	out    dx,ax
c001f68d:	eb cb                	jmp    c001f65a <Vm::faultHandler(regs*)+0x5e6>
c001f68f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f69d:	50                   	push   eax
c001f69e:	e8 cc f5 ff ff       	call   c001ec6f <Vm::inbv(unsigned short)>
c001f6a3:	0f b6 c0             	movzx  eax,al
c001f6a6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f6a9:	eb 1f                	jmp    c001f6ca <Vm::faultHandler(regs*)+0x656>
c001f6ab:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6ae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6b3:	74 03                	je     c001f6b8 <Vm::faultHandler(regs*)+0x644>
c001f6b5:	ed                   	in     eax,dx
c001f6b6:	eb 0d                	jmp    c001f6c5 <Vm::faultHandler(regs*)+0x651>
c001f6b8:	66 ed                	in     ax,dx
c001f6ba:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f6bd:	0f b7 c0             	movzx  eax,ax
c001f6c0:	66 31 d2             	xor    dx,dx
c001f6c3:	09 d0                	or     eax,edx
c001f6c5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6c8:	eb 1a                	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f6ca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6cd:	83 c4 10             	add    esp,0x10
c001f6d0:	eb 15                	jmp    c001f6e7 <Vm::faultHandler(regs*)+0x673>
c001f6d2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6d5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6d8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6dd:	74 03                	je     c001f6e2 <Vm::faultHandler(regs*)+0x66e>
c001f6df:	ef                   	out    dx,eax
c001f6e0:	eb 02                	jmp    c001f6e4 <Vm::faultHandler(regs*)+0x670>
c001f6e2:	66 ef                	out    dx,ax
c001f6e4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6e7:	b0 01                	mov    al,0x1
c001f6e9:	eb 56                	jmp    c001f741 <Vm::faultHandler(regs*)+0x6cd>
c001f6eb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6ef:	50                   	push   eax
c001f6f0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f6f4:	50                   	push   eax
c001f6f5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f6f9:	50                   	push   eax
c001f6fa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f6fe:	50                   	push   eax
c001f6ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f703:	50                   	push   eax
c001f704:	52                   	push   edx
c001f705:	52                   	push   edx
c001f706:	68 f6 cf 02 c0       	push   0xc002cff6
c001f70b:	e8 db 31 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001f710:	83 c4 20             	add    esp,0x20
c001f713:	83 ec 0c             	sub    esp,0xc
c001f716:	6a 60                	push   0x60
c001f718:	e8 52 f5 ff ff       	call   c001ec6f <Vm::inbv(unsigned short)>
c001f71d:	83 c4 10             	add    esp,0x10
c001f720:	3c 1c                	cmp    al,0x1c
c001f722:	74 04                	je     c001f728 <Vm::faultHandler(regs*)+0x6b4>
c001f724:	3c 5a                	cmp    al,0x5a
c001f726:	75 eb                	jne    c001f713 <Vm::faultHandler(regs*)+0x69f>
c001f728:	3c 5a                	cmp    al,0x5a
c001f72a:	74 04                	je     c001f730 <Vm::faultHandler(regs*)+0x6bc>
c001f72c:	3c 1c                	cmp    al,0x1c
c001f72e:	75 0f                	jne    c001f73f <Vm::faultHandler(regs*)+0x6cb>
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	6a 60                	push   0x60
c001f735:	e8 35 f5 ff ff       	call   c001ec6f <Vm::inbv(unsigned short)>
c001f73a:	83 c4 10             	add    esp,0x10
c001f73d:	eb e9                	jmp    c001f728 <Vm::faultHandler(regs*)+0x6b4>
c001f73f:	31 c0                	xor    eax,eax
c001f741:	83 c4 1c             	add    esp,0x1c
c001f744:	5b                   	pop    ebx
c001f745:	5e                   	pop    esi
c001f746:	5f                   	pop    edi
c001f747:	5d                   	pop    ebp
c001f748:	c3                   	ret    

c001f749 <Vm::fpuInternalTo32(unsigned long long)>:
c001f749:	57                   	push   edi
c001f74a:	56                   	push   esi
c001f74b:	53                   	push   ebx
c001f74c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f754:	89 d6                	mov    esi,edx
c001f756:	89 d7                	mov    edi,edx
c001f758:	89 c1                	mov    ecx,eax
c001f75a:	c1 ef 14             	shr    edi,0x14
c001f75d:	89 d3                	mov    ebx,edx
c001f75f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f765:	31 d2                	xor    edx,edx
c001f767:	89 f8                	mov    eax,edi
c001f769:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f76f:	bf ff 00 00 00       	mov    edi,0xff
c001f774:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f779:	83 d2 ff             	adc    edx,0xffffffff
c001f77c:	39 c7                	cmp    edi,eax
c001f77e:	bf 00 00 00 00       	mov    edi,0x0
c001f783:	19 d7                	sbb    edi,edx
c001f785:	72 15                	jb     c001f79c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f787:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f78b:	c1 e0 17             	shl    eax,0x17
c001f78e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f794:	09 f1                	or     ecx,esi
c001f796:	09 c1                	or     ecx,eax
c001f798:	89 cf                	mov    edi,ecx
c001f79a:	eb 02                	jmp    c001f79e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f79c:	31 ff                	xor    edi,edi
c001f79e:	89 f8                	mov    eax,edi
c001f7a0:	5b                   	pop    ebx
c001f7a1:	5e                   	pop    esi
c001f7a2:	5f                   	pop    edi
c001f7a3:	c3                   	ret    

c001f7a4 <Vm::fpuInternalTo64(unsigned long long)>:
c001f7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7ac:	c3                   	ret    

c001f7ad <Vm::fpu32ToInternal(unsigned int)>:
c001f7ad:	57                   	push   edi
c001f7ae:	31 ff                	xor    edi,edi
c001f7b0:	56                   	push   esi
c001f7b1:	53                   	push   ebx
c001f7b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7b6:	89 cb                	mov    ebx,ecx
c001f7b8:	89 ce                	mov    esi,ecx
c001f7ba:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f7c0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7c6:	c1 e9 17             	shr    ecx,0x17
c001f7c9:	89 f0                	mov    eax,esi
c001f7cb:	0f b6 d1             	movzx  edx,cl
c001f7ce:	81 c2 80 03 00 00    	add    edx,0x380
c001f7d4:	89 d1                	mov    ecx,edx
c001f7d6:	89 fa                	mov    edx,edi
c001f7d8:	c1 e1 14             	shl    ecx,0x14
c001f7db:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7df:	c1 e0 1d             	shl    eax,0x1d
c001f7e2:	89 d7                	mov    edi,edx
c001f7e4:	89 c6                	mov    esi,eax
c001f7e6:	89 ca                	mov    edx,ecx
c001f7e8:	89 f0                	mov    eax,esi
c001f7ea:	09 fa                	or     edx,edi
c001f7ec:	09 da                	or     edx,ebx
c001f7ee:	5b                   	pop    ebx
c001f7ef:	5e                   	pop    esi
c001f7f0:	5f                   	pop    edi
c001f7f1:	c3                   	ret    

c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuFloatToLong(unsigned long long)>:
c001f7fb:	57                   	push   edi
c001f7fc:	31 c0                	xor    eax,eax
c001f7fe:	56                   	push   esi
c001f7ff:	31 d2                	xor    edx,edx
c001f801:	53                   	push   ebx
c001f802:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f806:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f80a:	89 d9                	mov    ecx,ebx
c001f80c:	c1 e9 14             	shr    ecx,0x14
c001f80f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f815:	89 cf                	mov    edi,ecx
c001f817:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f81d:	78 33                	js     c001f852 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f81f:	89 d9                	mov    ecx,ebx
c001f821:	89 f0                	mov    eax,esi
c001f823:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f829:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f82f:	89 ca                	mov    edx,ecx
c001f831:	b9 34 00 00 00       	mov    ecx,0x34
c001f836:	29 f9                	sub    ecx,edi
c001f838:	0f ad d0             	shrd   eax,edx,cl
c001f83b:	d3 fa                	sar    edx,cl
c001f83d:	f6 c1 20             	test   cl,0x20
c001f840:	74 05                	je     c001f847 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f842:	89 d0                	mov    eax,edx
c001f844:	c1 fa 1f             	sar    edx,0x1f
c001f847:	85 db                	test   ebx,ebx
c001f849:	79 07                	jns    c001f852 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f84b:	f7 d8                	neg    eax
c001f84d:	83 d2 00             	adc    edx,0x0
c001f850:	f7 da                	neg    edx
c001f852:	5b                   	pop    ebx
c001f853:	5e                   	pop    esi
c001f854:	5f                   	pop    edi
c001f855:	c3                   	ret    

c001f856 <Vm::fpuULongToFloat(unsigned long long)>:
c001f856:	57                   	push   edi
c001f857:	31 c9                	xor    ecx,ecx
c001f859:	56                   	push   esi
c001f85a:	53                   	push   ebx
c001f85b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f85f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f863:	0f ba e7 14          	bt     edi,0x14
c001f867:	72 07                	jb     c001f870 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f869:	01 f6                	add    esi,esi
c001f86b:	11 ff                	adc    edi,edi
c001f86d:	41                   	inc    ecx
c001f86e:	eb f3                	jmp    c001f863 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f870:	89 fa                	mov    edx,edi
c001f872:	89 f0                	mov    eax,esi
c001f874:	bb 33 04 00 00       	mov    ebx,0x433
c001f879:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f87f:	29 cb                	sub    ebx,ecx
c001f881:	89 d9                	mov    ecx,ebx
c001f883:	5b                   	pop    ebx
c001f884:	c1 e1 14             	shl    ecx,0x14
c001f887:	5e                   	pop    esi
c001f888:	09 ca                	or     edx,ecx
c001f88a:	5f                   	pop    edi
c001f88b:	c3                   	ret    

c001f88c <Vm::fpuLongToFloat(long long)>:
c001f88c:	56                   	push   esi
c001f88d:	31 c0                	xor    eax,eax
c001f88f:	53                   	push   ebx
c001f890:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f894:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f898:	39 c8                	cmp    eax,ecx
c001f89a:	19 d8                	sbb    eax,ebx
c001f89c:	7d 04                	jge    c001f8a2 <Vm::fpuLongToFloat(long long)+0x16>
c001f89e:	31 f6                	xor    esi,esi
c001f8a0:	eb 0c                	jmp    c001f8ae <Vm::fpuLongToFloat(long long)+0x22>
c001f8a2:	f7 d9                	neg    ecx
c001f8a4:	be 01 00 00 00       	mov    esi,0x1
c001f8a9:	83 d3 00             	adc    ebx,0x0
c001f8ac:	f7 db                	neg    ebx
c001f8ae:	31 c0                	xor    eax,eax
c001f8b0:	0f ba e3 14          	bt     ebx,0x14
c001f8b4:	72 07                	jb     c001f8bd <Vm::fpuLongToFloat(long long)+0x31>
c001f8b6:	01 c9                	add    ecx,ecx
c001f8b8:	11 db                	adc    ebx,ebx
c001f8ba:	40                   	inc    eax
c001f8bb:	eb f3                	jmp    c001f8b0 <Vm::fpuLongToFloat(long long)+0x24>
c001f8bd:	ba 33 04 00 00       	mov    edx,0x433
c001f8c2:	29 c2                	sub    edx,eax
c001f8c4:	89 c8                	mov    eax,ecx
c001f8c6:	c1 e2 14             	shl    edx,0x14
c001f8c9:	89 d9                	mov    ecx,ebx
c001f8cb:	89 f3                	mov    ebx,esi
c001f8cd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8d3:	09 ca                	or     edx,ecx
c001f8d5:	84 db                	test   bl,bl
c001f8d7:	74 06                	je     c001f8df <Vm::fpuLongToFloat(long long)+0x53>
c001f8d9:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8df:	5b                   	pop    ebx
c001f8e0:	5e                   	pop    esi
c001f8e1:	c3                   	ret    

c001f8e2 <Vm::fpuGet0()>:
c001f8e2:	31 c0                	xor    eax,eax
c001f8e4:	31 d2                	xor    edx,edx
c001f8e6:	c3                   	ret    

c001f8e7 <Vm::fpuGet1()>:
c001f8e7:	b8 01 00 00 00       	mov    eax,0x1
c001f8ec:	31 d2                	xor    edx,edx
c001f8ee:	c3                   	ret    

c001f8ef <Vm::fpuGetPi()>:
c001f8ef:	b8 03 00 00 00       	mov    eax,0x3
c001f8f4:	31 d2                	xor    edx,edx
c001f8f6:	c3                   	ret    

c001f8f7 <Vm::fpuGetLog2E()>:
c001f8f7:	83 ec 18             	sub    esp,0x18
c001f8fa:	68 54 d0 02 c0       	push   0xc002d054
c001f8ff:	e8 1d aa ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001f904:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f909:	31 d2                	xor    edx,edx
c001f90b:	83 c4 1c             	add    esp,0x1c
c001f90e:	c3                   	ret    

c001f90f <Vm::fpuGetLogE2()>:
c001f90f:	83 ec 18             	sub    esp,0x18
c001f912:	68 60 d0 02 c0       	push   0xc002d060
c001f917:	e8 05 aa ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001f91c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f921:	31 d2                	xor    edx,edx
c001f923:	83 c4 1c             	add    esp,0x1c
c001f926:	c3                   	ret    

c001f927 <Vm::fpuGetLog210()>:
c001f927:	83 ec 18             	sub    esp,0x18
c001f92a:	68 6c d0 02 c0       	push   0xc002d06c
c001f92f:	e8 ed a9 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001f934:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f939:	31 d2                	xor    edx,edx
c001f93b:	83 c4 1c             	add    esp,0x1c
c001f93e:	c3                   	ret    

c001f93f <Vm::fpuGetLog102()>:
c001f93f:	83 ec 18             	sub    esp,0x18
c001f942:	68 79 d0 02 c0       	push   0xc002d079
c001f947:	e8 d5 a9 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001f94c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f951:	31 d2                	xor    edx,edx
c001f953:	83 c4 1c             	add    esp,0x1c
c001f956:	c3                   	ret    

c001f957 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f957:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f95b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f95f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f963:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f967:	0f 92 c0             	setb   al
c001f96a:	c3                   	ret    

c001f96b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f96b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f973:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f977:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f97b:	09 c2                	or     edx,eax
c001f97d:	0f 94 c0             	sete   al
c001f980:	c3                   	ret    

c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f981:	57                   	push   edi
c001f982:	56                   	push   esi
c001f983:	53                   	push   ebx
c001f984:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f988:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f98c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f990:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f994:	57                   	push   edi
c001f995:	56                   	push   esi
c001f996:	53                   	push   ebx
c001f997:	51                   	push   ecx
c001f998:	e8 ce ff ff ff       	call   c001f96b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	88 c2                	mov    dl,al
c001f9a2:	31 c0                	xor    eax,eax
c001f9a4:	84 d2                	test   dl,dl
c001f9a6:	75 0c                	jne    c001f9b4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f9a8:	57                   	push   edi
c001f9a9:	56                   	push   esi
c001f9aa:	53                   	push   ebx
c001f9ab:	51                   	push   ecx
c001f9ac:	e8 a6 ff ff ff       	call   c001f957 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f9b1:	83 c4 10             	add    esp,0x10
c001f9b4:	83 e0 01             	and    eax,0x1
c001f9b7:	5b                   	pop    ebx
c001f9b8:	88 c1                	mov    cl,al
c001f9ba:	83 e2 01             	and    edx,0x1
c001f9bd:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001f9c2:	c1 e2 06             	shl    edx,0x6
c001f9c5:	83 e0 ba             	and    eax,0xffffffba
c001f9c8:	5e                   	pop    esi
c001f9c9:	09 c8                	or     eax,ecx
c001f9cb:	5f                   	pop    edi
c001f9cc:	09 d0                	or     eax,edx
c001f9ce:	a2 e1 25 03 c0       	mov    ds:0xc00325e1,al
c001f9d3:	c3                   	ret    

c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9dc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9e0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9e4:	c3                   	ret    

c001f9e5 <Vm::fpuAbs(unsigned long long)>:
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9ed:	c3                   	ret    

c001f9ee <Vm::fpuChs(unsigned long long)>:
c001f9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9f6:	f7 d8                	neg    eax
c001f9f8:	83 d2 00             	adc    edx,0x0
c001f9fb:	f7 da                	neg    edx
c001f9fd:	c3                   	ret    

c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9fe:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fa02:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fa07:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fa0b:	eb c7                	jmp    c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fa0d:	53                   	push   ebx
c001fa0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa1e:	0f af ca             	imul   ecx,edx
c001fa21:	0f af d8             	imul   ebx,eax
c001fa24:	f7 e2                	mul    edx
c001fa26:	01 d9                	add    ecx,ebx
c001fa28:	5b                   	pop    ebx
c001fa29:	01 ca                	add    edx,ecx
c001fa2b:	c3                   	ret    

c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa3f:	e8 d0 77 00 00       	call   c0027214 <__udivdi3>
c001fa44:	83 c4 1c             	add    esp,0x1c
c001fa47:	c3                   	ret    

c001fa48 <Vm::fpuSquare(unsigned long long)>:
c001fa48:	50                   	push   eax
c001fa49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa51:	52                   	push   edx
c001fa52:	50                   	push   eax
c001fa53:	52                   	push   edx
c001fa54:	50                   	push   eax
c001fa55:	e8 b3 ff ff ff       	call   c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa5a:	83 c4 14             	add    esp,0x14
c001fa5d:	c3                   	ret    

c001fa5e <Vm::fpuGetReg(int)>:
c001fa5e:	83 ec 0c             	sub    esp,0xc
c001fa61:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa66:	76 10                	jbe    c001fa78 <Vm::fpuGetReg(int)+0x1a>
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	68 86 d0 02 c0       	push   0xc002d086
c001fa70:	e8 ac a8 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001fa75:	83 c4 10             	add    esp,0x10
c001fa78:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001fa7d:	b9 08 00 00 00       	mov    ecx,0x8
c001fa82:	c0 e8 03             	shr    al,0x3
c001fa85:	83 e0 07             	and    eax,0x7
c001fa88:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa8c:	99                   	cdq    
c001fa8d:	f7 f9                	idiv   ecx
c001fa8f:	8b 04 d5 e4 25 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcda1c]
c001fa96:	8b 14 d5 e8 25 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcda18]
c001fa9d:	83 c4 0c             	add    esp,0xc
c001faa0:	c3                   	ret    

c001faa1 <Vm::fpuSetReg(int, unsigned long long)>:
c001faa1:	57                   	push   edi
c001faa2:	56                   	push   esi
c001faa3:	52                   	push   edx
c001faa4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001faa8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001faac:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fab1:	76 10                	jbe    c001fac3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	68 99 d0 02 c0       	push   0xc002d099
c001fabb:	e8 61 a8 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001fac8:	b9 08 00 00 00       	mov    ecx,0x8
c001facd:	c0 e8 03             	shr    al,0x3
c001fad0:	83 e0 07             	and    eax,0x7
c001fad3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fad7:	99                   	cdq    
c001fad8:	f7 f9                	idiv   ecx
c001fada:	89 34 d5 e4 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda1c],esi
c001fae1:	89 3c d5 e8 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda18],edi
c001fae8:	58                   	pop    eax
c001fae9:	5e                   	pop    esi
c001faea:	5f                   	pop    edi
c001faeb:	c3                   	ret    

c001faec <Vm::fpuPush(unsigned long long)>:
c001faec:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001faf1:	c0 e8 03             	shr    al,0x3
c001faf4:	83 e0 07             	and    eax,0x7
c001faf7:	83 c0 07             	add    eax,0x7
c001fafa:	88 c2                	mov    dl,al
c001fafc:	83 e0 07             	and    eax,0x7
c001faff:	83 e2 07             	and    edx,0x7
c001fb02:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fb09:	8a 15 e1 25 03 c0    	mov    dl,BYTE PTR ds:0xc00325e1
c001fb0f:	83 e2 c7             	and    edx,0xffffffc7
c001fb12:	09 ca                	or     edx,ecx
c001fb14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb18:	88 15 e1 25 03 c0    	mov    BYTE PTR ds:0xc00325e1,dl
c001fb1e:	89 0c c5 e8 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda18],ecx
c001fb25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb29:	89 14 c5 e4 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda1c],edx
c001fb30:	a1 24 26 03 c0       	mov    eax,ds:0xc0032624
c001fb35:	83 f8 08             	cmp    eax,0x8
c001fb38:	75 08                	jne    c001fb42 <Vm::fpuPush(unsigned long long)+0x56>
c001fb3a:	80 0d e0 25 03 c0 40 	or     BYTE PTR ds:0xc00325e0,0x40
c001fb41:	c3                   	ret    
c001fb42:	40                   	inc    eax
c001fb43:	a3 24 26 03 c0       	mov    ds:0xc0032624,eax
c001fb48:	c3                   	ret    

c001fb49 <Vm::fpuPop()>:
c001fb49:	8a 0d e1 25 03 c0    	mov    cl,BYTE PTR ds:0xc00325e1
c001fb4f:	53                   	push   ebx
c001fb50:	c0 e9 03             	shr    cl,0x3
c001fb53:	8a 1d e1 25 03 c0    	mov    bl,BYTE PTR ds:0xc00325e1
c001fb59:	83 e1 07             	and    ecx,0x7
c001fb5c:	83 e3 c7             	and    ebx,0xffffffc7
c001fb5f:	8b 04 cd e4 25 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcda1c]
c001fb66:	8b 14 cd e8 25 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcda18]
c001fb6d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb74:	83 e1 38             	and    ecx,0x38
c001fb77:	09 d9                	or     ecx,ebx
c001fb79:	88 0d e1 25 03 c0    	mov    BYTE PTR ds:0xc00325e1,cl
c001fb7f:	8b 0d 24 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032624
c001fb85:	85 c9                	test   ecx,ecx
c001fb87:	74 09                	je     c001fb92 <Vm::fpuPop()+0x49>
c001fb89:	49                   	dec    ecx
c001fb8a:	89 0d 24 26 03 c0    	mov    DWORD PTR ds:0xc0032624,ecx
c001fb90:	eb 07                	jmp    c001fb99 <Vm::fpuPop()+0x50>
c001fb92:	80 0d e0 25 03 c0 40 	or     BYTE PTR ds:0xc00325e0,0x40
c001fb99:	5b                   	pop    ebx
c001fb9a:	c3                   	ret    

c001fb9b <Vm::x87Handler(regs*)>:
c001fb9b:	55                   	push   ebp
c001fb9c:	57                   	push   edi
c001fb9d:	56                   	push   esi
c001fb9e:	53                   	push   ebx
c001fb9f:	83 ec 1c             	sub    esp,0x1c
c001fba2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fba6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fbab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fbae:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fbb6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fbba:	50                   	push   eax
c001fbbb:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fbbf:	50                   	push   eax
c001fbc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbc4:	50                   	push   eax
c001fbc5:	53                   	push   ebx
c001fbc6:	e8 23 9e ff ff       	call   c00199ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fbcb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	89 c6                	mov    esi,eax
c001fbd3:	80 fa d9             	cmp    dl,0xd9
c001fbd6:	0f 85 52 01 00 00    	jne    c001fd2e <Vm::x87Handler(regs*)+0x193>
c001fbdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbe0:	8d 50 20             	lea    edx,[eax+0x20]
c001fbe3:	80 fa 0e             	cmp    dl,0xe
c001fbe6:	0f 87 86 00 00 00    	ja     c001fc72 <Vm::x87Handler(regs*)+0xd7>
c001fbec:	0f b6 d2             	movzx  edx,dl
c001fbef:	ff 24 95 ac d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2f54]
c001fbf6:	e8 e7 fc ff ff       	call   c001f8e2 <Vm::fpuGet0()>
c001fbfb:	eb 05                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fbfd:	e8 e5 fc ff ff       	call   c001f8e7 <Vm::fpuGet1()>
c001fc02:	57                   	push   edi
c001fc03:	57                   	push   edi
c001fc04:	52                   	push   edx
c001fc05:	50                   	push   eax
c001fc06:	e8 e1 fe ff ff       	call   c001faec <Vm::fpuPush(unsigned long long)>
c001fc0b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	b0 01                	mov    al,0x1
c001fc14:	e9 e3 09 00 00       	jmp    c00205fc <Vm::x87Handler(regs*)+0xa61>
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	6a 00                	push   0x0
c001fc1e:	e8 3b fe ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fc23:	59                   	pop    ecx
c001fc24:	5e                   	pop    esi
c001fc25:	52                   	push   edx
c001fc26:	50                   	push   eax
c001fc27:	e8 c2 fd ff ff       	call   c001f9ee <Vm::fpuChs(unsigned long long)>
c001fc2c:	eb 13                	jmp    c001fc41 <Vm::x87Handler(regs*)+0xa6>
c001fc2e:	83 ec 0c             	sub    esp,0xc
c001fc31:	6a 00                	push   0x0
c001fc33:	e8 26 fe ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fc38:	5f                   	pop    edi
c001fc39:	5d                   	pop    ebp
c001fc3a:	52                   	push   edx
c001fc3b:	50                   	push   eax
c001fc3c:	e8 a4 fd ff ff       	call   c001f9e5 <Vm::fpuAbs(unsigned long long)>
c001fc41:	83 c4 0c             	add    esp,0xc
c001fc44:	52                   	push   edx
c001fc45:	50                   	push   eax
c001fc46:	6a 00                	push   0x0
c001fc48:	e8 54 fe ff ff       	call   c001faa1 <Vm::fpuSetReg(int, unsigned long long)>
c001fc4d:	eb bc                	jmp    c001fc0b <Vm::x87Handler(regs*)+0x70>
c001fc4f:	e8 d3 fc ff ff       	call   c001f927 <Vm::fpuGetLog210()>
c001fc54:	eb ac                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fc56:	e8 9c fc ff ff       	call   c001f8f7 <Vm::fpuGetLog2E()>
c001fc5b:	eb a5                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fc5d:	e8 8d fc ff ff       	call   c001f8ef <Vm::fpuGetPi()>
c001fc62:	eb 9e                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fc64:	e8 d6 fc ff ff       	call   c001f93f <Vm::fpuGetLog102()>
c001fc69:	eb 97                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fc6b:	e8 9f fc ff ff       	call   c001f90f <Vm::fpuGetLogE2()>
c001fc70:	eb 90                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x67>
c001fc72:	8d 50 40             	lea    edx,[eax+0x40]
c001fc75:	80 fa 07             	cmp    dl,0x7
c001fc78:	77 15                	ja     c001fc8f <Vm::x87Handler(regs*)+0xf4>
c001fc7a:	83 ec 0c             	sub    esp,0xc
c001fc7d:	2d c0 00 00 00       	sub    eax,0xc0
c001fc82:	50                   	push   eax
c001fc83:	e8 d6 fd ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fc88:	59                   	pop    ecx
c001fc89:	5e                   	pop    esi
c001fc8a:	e9 75 ff ff ff       	jmp    c001fc04 <Vm::x87Handler(regs*)+0x69>
c001fc8f:	8d 50 38             	lea    edx,[eax+0x38]
c001fc92:	80 fa 07             	cmp    dl,0x7
c001fc95:	77 3c                	ja     c001fcd3 <Vm::x87Handler(regs*)+0x138>
c001fc97:	83 ec 0c             	sub    esp,0xc
c001fc9a:	2d c8 00 00 00       	sub    eax,0xc8
c001fc9f:	50                   	push   eax
c001fca0:	e8 b9 fd ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fca5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcac:	89 c6                	mov    esi,eax
c001fcae:	89 d7                	mov    edi,edx
c001fcb0:	e8 a9 fd ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fcb5:	83 c4 0c             	add    esp,0xc
c001fcb8:	52                   	push   edx
c001fcb9:	50                   	push   eax
c001fcba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcbe:	2d c8 00 00 00       	sub    eax,0xc8
c001fcc3:	50                   	push   eax
c001fcc4:	e8 d8 fd ff ff       	call   c001faa1 <Vm::fpuSetReg(int, unsigned long long)>
c001fcc9:	83 c4 0c             	add    esp,0xc
c001fccc:	57                   	push   edi
c001fccd:	56                   	push   esi
c001fcce:	e9 73 ff ff ff       	jmp    c001fc46 <Vm::x87Handler(regs*)+0xab>
c001fcd3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcd7:	84 d2                	test   dl,dl
c001fcd9:	75 0f                	jne    c001fcea <Vm::x87Handler(regs*)+0x14f>
c001fcdb:	83 ec 0c             	sub    esp,0xc
c001fcde:	ff 36                	push   DWORD PTR [esi]
c001fce0:	e8 c8 fa ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c001fce5:	e9 bf 00 00 00       	jmp    c001fda9 <Vm::x87Handler(regs*)+0x20e>
c001fcea:	80 fa 03             	cmp    dl,0x3
c001fced:	75 13                	jne    c001fd02 <Vm::x87Handler(regs*)+0x167>
c001fcef:	e8 55 fe ff ff       	call   c001fb49 <Vm::fpuPop()>
c001fcf4:	55                   	push   ebp
c001fcf5:	55                   	push   ebp
c001fcf6:	52                   	push   edx
c001fcf7:	50                   	push   eax
c001fcf8:	e8 4c fa ff ff       	call   c001f749 <Vm::fpuInternalTo32(unsigned long long)>
c001fcfd:	e9 88 00 00 00       	jmp    c001fd8a <Vm::x87Handler(regs*)+0x1ef>
c001fd02:	80 fa 05             	cmp    dl,0x5
c001fd05:	75 0e                	jne    c001fd15 <Vm::x87Handler(regs*)+0x17a>
c001fd07:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd0a:	66 a3 e2 25 03 c0    	mov    ds:0xc00325e2,ax
c001fd10:	e9 df 00 00 00       	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x259>
c001fd15:	31 c0                	xor    eax,eax
c001fd17:	80 fa 07             	cmp    dl,0x7
c001fd1a:	0f 85 dc 08 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c001fd20:	66 a1 e2 25 03 c0    	mov    ax,ds:0xc00325e2
c001fd26:	66 89 06             	mov    WORD PTR [esi],ax
c001fd29:	e9 c6 00 00 00       	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x259>
c001fd2e:	80 fa d8             	cmp    dl,0xd8
c001fd31:	0f 84 c9 00 00 00    	je     c001fe00 <Vm::x87Handler(regs*)+0x265>
c001fd37:	80 fa dc             	cmp    dl,0xdc
c001fd3a:	0f 84 0d 02 00 00    	je     c001ff4d <Vm::x87Handler(regs*)+0x3b2>
c001fd40:	80 fa de             	cmp    dl,0xde
c001fd43:	0f 84 cd 02 00 00    	je     c0020016 <Vm::x87Handler(regs*)+0x47b>
c001fd49:	80 fa dd             	cmp    dl,0xdd
c001fd4c:	0f 84 5f 04 00 00    	je     c00201b1 <Vm::x87Handler(regs*)+0x616>
c001fd52:	80 fa da             	cmp    dl,0xda
c001fd55:	0f 84 24 05 00 00    	je     c002027f <Vm::x87Handler(regs*)+0x6e4>
c001fd5b:	80 fa df             	cmp    dl,0xdf
c001fd5e:	0f 84 68 05 00 00    	je     c00202cc <Vm::x87Handler(regs*)+0x731>
c001fd64:	31 c0                	xor    eax,eax
c001fd66:	80 fa db             	cmp    dl,0xdb
c001fd69:	0f 85 8d 08 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c001fd6f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd73:	80 fa 03             	cmp    dl,0x3
c001fd76:	0f 85 70 06 00 00    	jne    c00203ec <Vm::x87Handler(regs*)+0x851>
c001fd7c:	e8 c8 fd ff ff       	call   c001fb49 <Vm::fpuPop()>
c001fd81:	55                   	push   ebp
c001fd82:	55                   	push   ebp
c001fd83:	52                   	push   edx
c001fd84:	50                   	push   eax
c001fd85:	e8 71 fa ff ff       	call   c001f7fb <Vm::fpuFloatToLong(unsigned long long)>
c001fd8a:	83 c4 10             	add    esp,0x10
c001fd8d:	89 06                	mov    DWORD PTR [esi],eax
c001fd8f:	eb 63                	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x259>
c001fd91:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd95:	84 d2                	test   dl,dl
c001fd97:	0f 85 e6 05 00 00    	jne    c0020383 <Vm::x87Handler(regs*)+0x7e8>
c001fd9d:	57                   	push   edi
c001fd9e:	57                   	push   edi
c001fd9f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fda2:	ff 36                	push   DWORD PTR [esi]
c001fda4:	e8 49 fa ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c001fda9:	5e                   	pop    esi
c001fdaa:	5f                   	pop    edi
c001fdab:	52                   	push   edx
c001fdac:	50                   	push   eax
c001fdad:	e8 3a fd ff ff       	call   c001faec <Vm::fpuPush(unsigned long long)>
c001fdb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fdb6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdb9:	e9 51 fe ff ff       	jmp    c001fc0f <Vm::x87Handler(regs*)+0x74>
c001fdbe:	80 fa 03             	cmp    dl,0x3
c001fdc1:	0f 85 d7 06 00 00    	jne    c002049e <Vm::x87Handler(regs*)+0x903>
c001fdc7:	57                   	push   edi
c001fdc8:	57                   	push   edi
c001fdc9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdcc:	ff 36                	push   DWORD PTR [esi]
c001fdce:	e8 1f fa ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c001fdd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdda:	89 c6                	mov    esi,eax
c001fddc:	89 d7                	mov    edi,edx
c001fdde:	e8 7b fc ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fde3:	57                   	push   edi
c001fde4:	56                   	push   esi
c001fde5:	52                   	push   edx
c001fde6:	50                   	push   eax
c001fde7:	e8 95 fb ff ff       	call   c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdec:	83 c4 20             	add    esp,0x20
c001fdef:	e8 55 fd ff ff       	call   c001fb49 <Vm::fpuPop()>
c001fdf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdf8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdfb:	e9 12 fe ff ff       	jmp    c001fc12 <Vm::x87Handler(regs*)+0x77>
c001fe00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe04:	8d 50 40             	lea    edx,[eax+0x40]
c001fe07:	80 fa 07             	cmp    dl,0x7
c001fe0a:	77 29                	ja     c001fe35 <Vm::x87Handler(regs*)+0x29a>
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	2d c0 00 00 00       	sub    eax,0xc0
c001fe14:	50                   	push   eax
c001fe15:	e8 44 fc ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fe1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe21:	89 c6                	mov    esi,eax
c001fe23:	89 d7                	mov    edi,edx
c001fe25:	e8 34 fc ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fe2a:	57                   	push   edi
c001fe2b:	56                   	push   esi
c001fe2c:	52                   	push   edx
c001fe2d:	50                   	push   eax
c001fe2e:	e8 a1 fb ff ff       	call   c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe33:	eb 2f                	jmp    c001fe64 <Vm::x87Handler(regs*)+0x2c9>
c001fe35:	8d 50 38             	lea    edx,[eax+0x38]
c001fe38:	80 fa 07             	cmp    dl,0x7
c001fe3b:	77 2f                	ja     c001fe6c <Vm::x87Handler(regs*)+0x2d1>
c001fe3d:	83 ec 0c             	sub    esp,0xc
c001fe40:	2d c8 00 00 00       	sub    eax,0xc8
c001fe45:	50                   	push   eax
c001fe46:	e8 13 fc ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fe4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe52:	89 c6                	mov    esi,eax
c001fe54:	89 d7                	mov    edi,edx
c001fe56:	e8 03 fc ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fe5b:	57                   	push   edi
c001fe5c:	56                   	push   esi
c001fe5d:	52                   	push   edx
c001fe5e:	50                   	push   eax
c001fe5f:	e8 a9 fb ff ff       	call   c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe64:	83 c4 1c             	add    esp,0x1c
c001fe67:	e9 d8 fd ff ff       	jmp    c001fc44 <Vm::x87Handler(regs*)+0xa9>
c001fe6c:	8d 50 30             	lea    edx,[eax+0x30]
c001fe6f:	80 fa 07             	cmp    dl,0x7
c001fe72:	77 0d                	ja     c001fe81 <Vm::x87Handler(regs*)+0x2e6>
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	2d d0 00 00 00       	sub    eax,0xd0
c001fe7c:	e9 99 03 00 00       	jmp    c002021a <Vm::x87Handler(regs*)+0x67f>
c001fe81:	8d 50 28             	lea    edx,[eax+0x28]
c001fe84:	80 fa 07             	cmp    dl,0x7
c001fe87:	77 0d                	ja     c001fe96 <Vm::x87Handler(regs*)+0x2fb>
c001fe89:	83 ec 0c             	sub    esp,0xc
c001fe8c:	2d d8 00 00 00       	sub    eax,0xd8
c001fe91:	e9 c0 03 00 00       	jmp    c0020256 <Vm::x87Handler(regs*)+0x6bb>
c001fe96:	8d 50 20             	lea    edx,[eax+0x20]
c001fe99:	80 fa 07             	cmp    dl,0x7
c001fe9c:	77 1b                	ja     c001feb9 <Vm::x87Handler(regs*)+0x31e>
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	2d e0 00 00 00       	sub    eax,0xe0
c001fea6:	50                   	push   eax
c001fea7:	e8 b2 fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001feac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feb3:	89 c6                	mov    esi,eax
c001feb5:	89 d7                	mov    edi,edx
c001feb7:	eb 22                	jmp    c001fedb <Vm::x87Handler(regs*)+0x340>
c001feb9:	8d 50 18             	lea    edx,[eax+0x18]
c001febc:	80 fa 07             	cmp    dl,0x7
c001febf:	77 2d                	ja     c001feee <Vm::x87Handler(regs*)+0x353>
c001fec1:	83 ec 0c             	sub    esp,0xc
c001fec4:	6a 00                	push   0x0
c001fec6:	e8 93 fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fecb:	89 c6                	mov    esi,eax
c001fecd:	89 d7                	mov    edi,edx
c001fecf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed3:	2d e8 00 00 00       	sub    eax,0xe8
c001fed8:	89 04 24             	mov    DWORD PTR [esp],eax
c001fedb:	e8 7e fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fee0:	57                   	push   edi
c001fee1:	56                   	push   esi
c001fee2:	52                   	push   edx
c001fee3:	50                   	push   eax
c001fee4:	e8 15 fb ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fee9:	e9 76 ff ff ff       	jmp    c001fe64 <Vm::x87Handler(regs*)+0x2c9>
c001feee:	8d 50 10             	lea    edx,[eax+0x10]
c001fef1:	80 fa 07             	cmp    dl,0x7
c001fef4:	77 1b                	ja     c001ff11 <Vm::x87Handler(regs*)+0x376>
c001fef6:	83 ec 0c             	sub    esp,0xc
c001fef9:	2d f0 00 00 00       	sub    eax,0xf0
c001fefe:	50                   	push   eax
c001feff:	e8 5a fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ff04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff0b:	89 c6                	mov    esi,eax
c001ff0d:	89 d7                	mov    edi,edx
c001ff0f:	eb 22                	jmp    c001ff33 <Vm::x87Handler(regs*)+0x398>
c001ff11:	3c f7                	cmp    al,0xf7
c001ff13:	0f 86 d1 03 00 00    	jbe    c00202ea <Vm::x87Handler(regs*)+0x74f>
c001ff19:	83 ec 0c             	sub    esp,0xc
c001ff1c:	6a 00                	push   0x0
c001ff1e:	e8 3b fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ff23:	89 c6                	mov    esi,eax
c001ff25:	89 d7                	mov    edi,edx
c001ff27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2b:	2d f8 00 00 00       	sub    eax,0xf8
c001ff30:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff33:	e8 26 fb ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ff38:	57                   	push   edi
c001ff39:	56                   	push   esi
c001ff3a:	52                   	push   edx
c001ff3b:	50                   	push   eax
c001ff3c:	e8 eb fa ff ff       	call   c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff41:	83 c4 1c             	add    esp,0x1c
c001ff44:	52                   	push   edx
c001ff45:	50                   	push   eax
c001ff46:	6a 00                	push   0x0
c001ff48:	e9 51 02 00 00       	jmp    c002019e <Vm::x87Handler(regs*)+0x603>
c001ff4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff51:	8d 50 40             	lea    edx,[eax+0x40]
c001ff54:	80 fa 07             	cmp    dl,0x7
c001ff57:	77 37                	ja     c001ff90 <Vm::x87Handler(regs*)+0x3f5>
c001ff59:	83 ec 0c             	sub    esp,0xc
c001ff5c:	2d c0 00 00 00       	sub    eax,0xc0
c001ff61:	50                   	push   eax
c001ff62:	e8 f7 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ff67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff6e:	89 c6                	mov    esi,eax
c001ff70:	89 d7                	mov    edi,edx
c001ff72:	e8 e7 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ff77:	57                   	push   edi
c001ff78:	56                   	push   esi
c001ff79:	52                   	push   edx
c001ff7a:	50                   	push   eax
c001ff7b:	e8 54 fa ff ff       	call   c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff80:	83 c4 1c             	add    esp,0x1c
c001ff83:	52                   	push   edx
c001ff84:	50                   	push   eax
c001ff85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff89:	2d c0 00 00 00       	sub    eax,0xc0
c001ff8e:	eb 3d                	jmp    c001ffcd <Vm::x87Handler(regs*)+0x432>
c001ff90:	8d 50 38             	lea    edx,[eax+0x38]
c001ff93:	80 fa 07             	cmp    dl,0x7
c001ff96:	77 3b                	ja     c001ffd3 <Vm::x87Handler(regs*)+0x438>
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	2d c8 00 00 00       	sub    eax,0xc8
c001ffa0:	50                   	push   eax
c001ffa1:	e8 b8 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ffa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffad:	89 c6                	mov    esi,eax
c001ffaf:	89 d7                	mov    edi,edx
c001ffb1:	e8 a8 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ffb6:	57                   	push   edi
c001ffb7:	56                   	push   esi
c001ffb8:	52                   	push   edx
c001ffb9:	50                   	push   eax
c001ffba:	e8 4e fa ff ff       	call   c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffbf:	83 c4 1c             	add    esp,0x1c
c001ffc2:	52                   	push   edx
c001ffc3:	50                   	push   eax
c001ffc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc8:	2d c8 00 00 00       	sub    eax,0xc8
c001ffcd:	50                   	push   eax
c001ffce:	e9 75 fc ff ff       	jmp    c001fc48 <Vm::x87Handler(regs*)+0xad>
c001ffd3:	83 c0 18             	add    eax,0x18
c001ffd6:	3c 07                	cmp    al,0x7
c001ffd8:	0f 87 3b 04 00 00    	ja     c0020419 <Vm::x87Handler(regs*)+0x87e>
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	6a 00                	push   0x0
c001ffe3:	e8 76 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001ffe8:	89 c6                	mov    esi,eax
c001ffea:	89 d7                	mov    edi,edx
c001ffec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff0:	2d e8 00 00 00       	sub    eax,0xe8
c001fff5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fff8:	e8 61 fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c001fffd:	57                   	push   edi
c001fffe:	56                   	push   esi
c001ffff:	52                   	push   edx
c0020000:	50                   	push   eax
c0020001:	e8 f8 f9 ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020006:	83 c4 1c             	add    esp,0x1c
c0020009:	52                   	push   edx
c002000a:	50                   	push   eax
c002000b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000f:	2d e8 00 00 00       	sub    eax,0xe8
c0020014:	eb b7                	jmp    c001ffcd <Vm::x87Handler(regs*)+0x432>
c0020016:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001a:	8d 50 40             	lea    edx,[eax+0x40]
c002001d:	80 fa 07             	cmp    dl,0x7
c0020020:	77 3a                	ja     c002005c <Vm::x87Handler(regs*)+0x4c1>
c0020022:	83 ec 0c             	sub    esp,0xc
c0020025:	2d c0 00 00 00       	sub    eax,0xc0
c002002a:	50                   	push   eax
c002002b:	e8 2e fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020030:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020037:	89 c6                	mov    esi,eax
c0020039:	89 d7                	mov    edi,edx
c002003b:	e8 1e fa ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020040:	57                   	push   edi
c0020041:	56                   	push   esi
c0020042:	52                   	push   edx
c0020043:	50                   	push   eax
c0020044:	e8 8b f9 ff ff       	call   c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020049:	83 c4 1c             	add    esp,0x1c
c002004c:	52                   	push   edx
c002004d:	50                   	push   eax
c002004e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020052:	2d c0 00 00 00       	sub    eax,0xc0
c0020057:	e9 9e 01 00 00       	jmp    c00201fa <Vm::x87Handler(regs*)+0x65f>
c002005c:	8d 50 20             	lea    edx,[eax+0x20]
c002005f:	80 fa 07             	cmp    dl,0x7
c0020062:	77 3a                	ja     c002009e <Vm::x87Handler(regs*)+0x503>
c0020064:	83 ec 0c             	sub    esp,0xc
c0020067:	2d e0 00 00 00       	sub    eax,0xe0
c002006c:	50                   	push   eax
c002006d:	e8 ec f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020079:	89 c6                	mov    esi,eax
c002007b:	89 d7                	mov    edi,edx
c002007d:	e8 dc f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020082:	57                   	push   edi
c0020083:	56                   	push   esi
c0020084:	52                   	push   edx
c0020085:	50                   	push   eax
c0020086:	e8 73 f9 ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c002008b:	83 c4 1c             	add    esp,0x1c
c002008e:	52                   	push   edx
c002008f:	50                   	push   eax
c0020090:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020094:	2d e0 00 00 00       	sub    eax,0xe0
c0020099:	e9 5c 01 00 00       	jmp    c00201fa <Vm::x87Handler(regs*)+0x65f>
c002009e:	8d 50 18             	lea    edx,[eax+0x18]
c00200a1:	80 fa 07             	cmp    dl,0x7
c00200a4:	77 3b                	ja     c00200e1 <Vm::x87Handler(regs*)+0x546>
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	6a 00                	push   0x0
c00200ab:	e8 ae f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00200b0:	89 c6                	mov    esi,eax
c00200b2:	89 d7                	mov    edi,edx
c00200b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b8:	2d e8 00 00 00       	sub    eax,0xe8
c00200bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00200c0:	e8 99 f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00200c5:	57                   	push   edi
c00200c6:	56                   	push   esi
c00200c7:	52                   	push   edx
c00200c8:	50                   	push   eax
c00200c9:	e8 30 f9 ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200ce:	83 c4 1c             	add    esp,0x1c
c00200d1:	52                   	push   edx
c00200d2:	50                   	push   eax
c00200d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d7:	2d e8 00 00 00       	sub    eax,0xe8
c00200dc:	e9 19 01 00 00       	jmp    c00201fa <Vm::x87Handler(regs*)+0x65f>
c00200e1:	8d 50 38             	lea    edx,[eax+0x38]
c00200e4:	80 fa 07             	cmp    dl,0x7
c00200e7:	77 37                	ja     c0020120 <Vm::x87Handler(regs*)+0x585>
c00200e9:	83 ec 0c             	sub    esp,0xc
c00200ec:	2d c8 00 00 00       	sub    eax,0xc8
c00200f1:	50                   	push   eax
c00200f2:	e8 67 f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00200f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200fe:	89 c6                	mov    esi,eax
c0020100:	89 d7                	mov    edi,edx
c0020102:	e8 57 f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020107:	57                   	push   edi
c0020108:	56                   	push   esi
c0020109:	52                   	push   edx
c002010a:	50                   	push   eax
c002010b:	e8 fd f8 ff ff       	call   c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020110:	83 c4 1c             	add    esp,0x1c
c0020113:	52                   	push   edx
c0020114:	50                   	push   eax
c0020115:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020119:	2d c8 00 00 00       	sub    eax,0xc8
c002011e:	eb 7d                	jmp    c002019d <Vm::x87Handler(regs*)+0x602>
c0020120:	3c f7                	cmp    al,0xf7
c0020122:	76 38                	jbe    c002015c <Vm::x87Handler(regs*)+0x5c1>
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	6a 00                	push   0x0
c0020129:	e8 30 f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002012e:	89 c6                	mov    esi,eax
c0020130:	89 d7                	mov    edi,edx
c0020132:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020136:	2d f8 00 00 00       	sub    eax,0xf8
c002013b:	89 04 24             	mov    DWORD PTR [esp],eax
c002013e:	e8 1b f9 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020143:	57                   	push   edi
c0020144:	56                   	push   esi
c0020145:	52                   	push   edx
c0020146:	50                   	push   eax
c0020147:	e8 e0 f8 ff ff       	call   c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002014c:	83 c4 1c             	add    esp,0x1c
c002014f:	52                   	push   edx
c0020150:	50                   	push   eax
c0020151:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020155:	2d f8 00 00 00       	sub    eax,0xf8
c002015a:	eb 41                	jmp    c002019d <Vm::x87Handler(regs*)+0x602>
c002015c:	8d 50 10             	lea    edx,[eax+0x10]
c002015f:	80 fa 07             	cmp    dl,0x7
c0020162:	0f 87 5a 01 00 00    	ja     c00202c2 <Vm::x87Handler(regs*)+0x727>
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	2d f0 00 00 00       	sub    eax,0xf0
c0020170:	50                   	push   eax
c0020171:	e8 e8 f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020176:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017d:	89 c6                	mov    esi,eax
c002017f:	89 d7                	mov    edi,edx
c0020181:	e8 d8 f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020186:	57                   	push   edi
c0020187:	56                   	push   esi
c0020188:	52                   	push   edx
c0020189:	50                   	push   eax
c002018a:	e8 9d f8 ff ff       	call   c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002018f:	83 c4 1c             	add    esp,0x1c
c0020192:	52                   	push   edx
c0020193:	50                   	push   eax
c0020194:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020198:	2d f0 00 00 00       	sub    eax,0xf0
c002019d:	50                   	push   eax
c002019e:	e8 fe f8 ff ff       	call   c001faa1 <Vm::fpuSetReg(int, unsigned long long)>
c00201a3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201a7:	e8 9d f9 ff ff       	call   c001fb49 <Vm::fpuPop()>
c00201ac:	e9 5e fa ff ff       	jmp    c001fc0f <Vm::x87Handler(regs*)+0x74>
c00201b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201b5:	8d 50 30             	lea    edx,[eax+0x30]
c00201b8:	80 fa 07             	cmp    dl,0x7
c00201bb:	77 1d                	ja     c00201da <Vm::x87Handler(regs*)+0x63f>
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	6a 00                	push   0x0
c00201c2:	e8 97 f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00201c7:	83 c4 0c             	add    esp,0xc
c00201ca:	52                   	push   edx
c00201cb:	50                   	push   eax
c00201cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201d0:	2d d0 00 00 00       	sub    eax,0xd0
c00201d5:	e9 f3 fd ff ff       	jmp    c001ffcd <Vm::x87Handler(regs*)+0x432>
c00201da:	8d 50 28             	lea    edx,[eax+0x28]
c00201dd:	80 fa 07             	cmp    dl,0x7
c00201e0:	77 28                	ja     c002020a <Vm::x87Handler(regs*)+0x66f>
c00201e2:	83 ec 0c             	sub    esp,0xc
c00201e5:	6a 00                	push   0x0
c00201e7:	e8 72 f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00201ec:	83 c4 0c             	add    esp,0xc
c00201ef:	52                   	push   edx
c00201f0:	50                   	push   eax
c00201f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201f5:	2d d8 00 00 00       	sub    eax,0xd8
c00201fa:	50                   	push   eax
c00201fb:	e8 a1 f8 ff ff       	call   c001faa1 <Vm::fpuSetReg(int, unsigned long long)>
c0020200:	e8 44 f9 ff ff       	call   c001fb49 <Vm::fpuPop()>
c0020205:	e9 01 fa ff ff       	jmp    c001fc0b <Vm::x87Handler(regs*)+0x70>
c002020a:	8d 50 20             	lea    edx,[eax+0x20]
c002020d:	80 fa 07             	cmp    dl,0x7
c0020210:	77 30                	ja     c0020242 <Vm::x87Handler(regs*)+0x6a7>
c0020212:	83 ec 0c             	sub    esp,0xc
c0020215:	2d e0 00 00 00       	sub    eax,0xe0
c002021a:	50                   	push   eax
c002021b:	e8 3e f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020220:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020227:	89 c6                	mov    esi,eax
c0020229:	89 d7                	mov    edi,edx
c002022b:	e8 2e f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020230:	57                   	push   edi
c0020231:	56                   	push   esi
c0020232:	52                   	push   edx
c0020233:	50                   	push   eax
c0020234:	e8 48 f7 ff ff       	call   c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020239:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002023d:	e9 54 02 00 00       	jmp    c0020496 <Vm::x87Handler(regs*)+0x8fb>
c0020242:	8d 50 18             	lea    edx,[eax+0x18]
c0020245:	80 fa 07             	cmp    dl,0x7
c0020248:	0f 87 43 fb ff ff    	ja     c001fd91 <Vm::x87Handler(regs*)+0x1f6>
c002024e:	83 ec 0c             	sub    esp,0xc
c0020251:	2d e8 00 00 00       	sub    eax,0xe8
c0020256:	50                   	push   eax
c0020257:	e8 02 f8 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002025c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020263:	89 c6                	mov    esi,eax
c0020265:	89 d7                	mov    edi,edx
c0020267:	e8 f2 f7 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002026c:	57                   	push   edi
c002026d:	56                   	push   esi
c002026e:	52                   	push   edx
c002026f:	50                   	push   eax
c0020270:	e8 0c f7 ff ff       	call   c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020275:	83 c4 20             	add    esp,0x20
c0020278:	e8 cc f8 ff ff       	call   c001fb49 <Vm::fpuPop()>
c002027d:	eb 62                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x746>
c002027f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020283:	0f 85 0f 01 00 00    	jne    c0020398 <Vm::x87Handler(regs*)+0x7fd>
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	6a 01                	push   0x1
c002028e:	e8 cb f7 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020293:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002029a:	89 c6                	mov    esi,eax
c002029c:	89 d7                	mov    edi,edx
c002029e:	e8 bb f7 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00202a3:	57                   	push   edi
c00202a4:	56                   	push   esi
c00202a5:	52                   	push   edx
c00202a6:	50                   	push   eax
c00202a7:	e8 d5 f6 ff ff       	call   c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202ac:	83 c4 20             	add    esp,0x20
c00202af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202b3:	e8 91 f8 ff ff       	call   c001fb49 <Vm::fpuPop()>
c00202b8:	e8 8c f8 ff ff       	call   c001fb49 <Vm::fpuPop()>
c00202bd:	e9 50 f9 ff ff       	jmp    c001fc12 <Vm::x87Handler(regs*)+0x77>
c00202c2:	3c d9                	cmp    al,0xd9
c00202c4:	0f 85 b5 02 00 00    	jne    c002057f <Vm::x87Handler(regs*)+0x9e4>
c00202ca:	eb bd                	jmp    c0020289 <Vm::x87Handler(regs*)+0x6ee>
c00202cc:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202d0:	0f 85 ea 02 00 00    	jne    c00205c0 <Vm::x87Handler(regs*)+0xa25>
c00202d6:	0f b7 05 e0 25 03 c0 	movzx  eax,WORD PTR ds:0xc00325e0
c00202dd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202e1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202e5:	e9 28 f9 ff ff       	jmp    c001fc12 <Vm::x87Handler(regs*)+0x77>
c00202ea:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ee:	84 d2                	test   dl,dl
c00202f0:	75 0f                	jne    c0020301 <Vm::x87Handler(regs*)+0x766>
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	ff 36                	push   DWORD PTR [esi]
c00202f7:	e8 b1 f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c00202fc:	e9 2c 01 00 00       	jmp    c002042d <Vm::x87Handler(regs*)+0x892>
c0020301:	80 fa 01             	cmp    dl,0x1
c0020304:	75 0f                	jne    c0020315 <Vm::x87Handler(regs*)+0x77a>
c0020306:	83 ec 0c             	sub    esp,0xc
c0020309:	ff 36                	push   DWORD PTR [esi]
c002030b:	e8 9d f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c0020310:	e9 81 02 00 00       	jmp    c0020596 <Vm::x87Handler(regs*)+0x9fb>
c0020315:	80 fa 04             	cmp    dl,0x4
c0020318:	75 0f                	jne    c0020329 <Vm::x87Handler(regs*)+0x78e>
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	ff 36                	push   DWORD PTR [esi]
c002031f:	e8 89 f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c0020324:	e9 86 01 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x914>
c0020329:	80 fa 05             	cmp    dl,0x5
c002032c:	75 1b                	jne    c0020349 <Vm::x87Handler(regs*)+0x7ae>
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	6a 00                	push   0x0
c0020333:	e8 26 f7 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020338:	89 c7                	mov    edi,eax
c002033a:	89 d5                	mov    ebp,edx
c002033c:	58                   	pop    eax
c002033d:	ff 36                	push   DWORD PTR [esi]
c002033f:	e8 69 f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c0020344:	e9 a3 01 00 00       	jmp    c00204ec <Vm::x87Handler(regs*)+0x951>
c0020349:	80 fa 06             	cmp    dl,0x6
c002034c:	75 0f                	jne    c002035d <Vm::x87Handler(regs*)+0x7c2>
c002034e:	83 ec 0c             	sub    esp,0xc
c0020351:	ff 36                	push   DWORD PTR [esi]
c0020353:	e8 55 f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c0020358:	e9 ae 01 00 00       	jmp    c002050b <Vm::x87Handler(regs*)+0x970>
c002035d:	31 c0                	xor    eax,eax
c002035f:	80 fa 07             	cmp    dl,0x7
c0020362:	0f 85 94 02 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	6a 00                	push   0x0
c002036d:	e8 ec f6 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020372:	89 c7                	mov    edi,eax
c0020374:	89 d5                	mov    ebp,edx
c0020376:	58                   	pop    eax
c0020377:	ff 36                	push   DWORD PTR [esi]
c0020379:	e8 2f f4 ff ff       	call   c001f7ad <Vm::fpu32ToInternal(unsigned int)>
c002037e:	e9 cb 01 00 00       	jmp    c002054e <Vm::x87Handler(regs*)+0x9b3>
c0020383:	80 fa 03             	cmp    dl,0x3
c0020386:	0f 85 d3 01 00 00    	jne    c002055f <Vm::x87Handler(regs*)+0x9c4>
c002038c:	e8 b8 f7 ff ff       	call   c001fb49 <Vm::fpuPop()>
c0020391:	51                   	push   ecx
c0020392:	51                   	push   ecx
c0020393:	e9 de 01 00 00       	jmp    c0020576 <Vm::x87Handler(regs*)+0x9db>
c0020398:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002039c:	80 fa 01             	cmp    dl,0x1
c002039f:	75 09                	jne    c00203aa <Vm::x87Handler(regs*)+0x80f>
c00203a1:	57                   	push   edi
c00203a2:	57                   	push   edi
c00203a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00203a5:	e9 e3 01 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0x9f2>
c00203aa:	80 fa 04             	cmp    dl,0x4
c00203ad:	75 12                	jne    c00203c1 <Vm::x87Handler(regs*)+0x826>
c00203af:	31 d2                	xor    edx,edx
c00203b1:	51                   	push   ecx
c00203b2:	51                   	push   ecx
c00203b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00203b5:	52                   	push   edx
c00203b6:	50                   	push   eax
c00203b7:	e8 d0 f4 ff ff       	call   c001f88c <Vm::fpuLongToFloat(long long)>
c00203bc:	e9 ee 00 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x914>
c00203c1:	31 c0                	xor    eax,eax
c00203c3:	80 fa 07             	cmp    dl,0x7
c00203c6:	0f 85 30 02 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c00203cc:	83 ec 0c             	sub    esp,0xc
c00203cf:	6a 00                	push   0x0
c00203d1:	e8 88 f6 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00203d6:	89 c7                	mov    edi,eax
c00203d8:	89 d5                	mov    ebp,edx
c00203da:	58                   	pop    eax
c00203db:	8b 06                	mov    eax,DWORD PTR [esi]
c00203dd:	5a                   	pop    edx
c00203de:	31 d2                	xor    edx,edx
c00203e0:	52                   	push   edx
c00203e1:	50                   	push   eax
c00203e2:	e8 a5 f4 ff ff       	call   c001f88c <Vm::fpuLongToFloat(long long)>
c00203e7:	e9 62 01 00 00       	jmp    c002054e <Vm::x87Handler(regs*)+0x9b3>
c00203ec:	84 d2                	test   dl,dl
c00203ee:	75 0d                	jne    c00203fd <Vm::x87Handler(regs*)+0x862>
c00203f0:	31 d2                	xor    edx,edx
c00203f2:	55                   	push   ebp
c00203f3:	55                   	push   ebp
c00203f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00203f6:	52                   	push   edx
c00203f7:	50                   	push   eax
c00203f8:	e9 d3 01 00 00       	jmp    c00205d0 <Vm::x87Handler(regs*)+0xa35>
c00203fd:	31 c0                	xor    eax,eax
c00203ff:	80 fa 02             	cmp    dl,0x2
c0020402:	0f 85 f4 01 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	6a 00                	push   0x0
c002040d:	e8 4c f6 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020412:	59                   	pop    ecx
c0020413:	5f                   	pop    edi
c0020414:	e9 6a f9 ff ff       	jmp    c001fd83 <Vm::x87Handler(regs*)+0x1e8>
c0020419:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002041d:	84 d2                	test   dl,dl
c002041f:	75 2a                	jne    c002044b <Vm::x87Handler(regs*)+0x8b0>
c0020421:	50                   	push   eax
c0020422:	50                   	push   eax
c0020423:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020426:	ff 36                	push   DWORD PTR [esi]
c0020428:	e8 c5 f3 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c002042d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020434:	89 c6                	mov    esi,eax
c0020436:	89 d7                	mov    edi,edx
c0020438:	e8 21 f6 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002043d:	57                   	push   edi
c002043e:	56                   	push   esi
c002043f:	52                   	push   edx
c0020440:	50                   	push   eax
c0020441:	e8 8e f5 ff ff       	call   c001f9d4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020446:	e9 64 01 00 00       	jmp    c00205af <Vm::x87Handler(regs*)+0xa14>
c002044b:	80 fa 01             	cmp    dl,0x1
c002044e:	75 11                	jne    c0020461 <Vm::x87Handler(regs*)+0x8c6>
c0020450:	50                   	push   eax
c0020451:	50                   	push   eax
c0020452:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020455:	ff 36                	push   DWORD PTR [esi]
c0020457:	e8 96 f3 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c002045c:	e9 35 01 00 00       	jmp    c0020596 <Vm::x87Handler(regs*)+0x9fb>
c0020461:	80 fa 02             	cmp    dl,0x2
c0020464:	0f 85 54 f9 ff ff    	jne    c001fdbe <Vm::x87Handler(regs*)+0x223>
c002046a:	55                   	push   ebp
c002046b:	55                   	push   ebp
c002046c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002046f:	ff 36                	push   DWORD PTR [esi]
c0020471:	e8 7c f3 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c0020476:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002047d:	89 c6                	mov    esi,eax
c002047f:	89 d7                	mov    edi,edx
c0020481:	e8 d8 f5 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020486:	57                   	push   edi
c0020487:	56                   	push   esi
c0020488:	52                   	push   edx
c0020489:	50                   	push   eax
c002048a:	e8 f2 f4 ff ff       	call   c001f981 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002048f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020493:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020496:	83 c4 20             	add    esp,0x20
c0020499:	e9 74 f7 ff ff       	jmp    c001fc12 <Vm::x87Handler(regs*)+0x77>
c002049e:	80 fa 04             	cmp    dl,0x4
c00204a1:	75 2a                	jne    c00204cd <Vm::x87Handler(regs*)+0x932>
c00204a3:	51                   	push   ecx
c00204a4:	51                   	push   ecx
c00204a5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204a8:	ff 36                	push   DWORD PTR [esi]
c00204aa:	e8 43 f3 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c00204af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b6:	89 c6                	mov    esi,eax
c00204b8:	89 d7                	mov    edi,edx
c00204ba:	e8 9f f5 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00204bf:	57                   	push   edi
c00204c0:	56                   	push   esi
c00204c1:	52                   	push   edx
c00204c2:	50                   	push   eax
c00204c3:	e8 36 f5 ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204c8:	e9 e2 00 00 00       	jmp    c00205af <Vm::x87Handler(regs*)+0xa14>
c00204cd:	80 fa 05             	cmp    dl,0x5
c00204d0:	75 28                	jne    c00204fa <Vm::x87Handler(regs*)+0x95f>
c00204d2:	83 ec 0c             	sub    esp,0xc
c00204d5:	6a 00                	push   0x0
c00204d7:	e8 82 f5 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00204dc:	89 c7                	mov    edi,eax
c00204de:	89 d5                	mov    ebp,edx
c00204e0:	58                   	pop    eax
c00204e1:	5a                   	pop    edx
c00204e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e5:	ff 36                	push   DWORD PTR [esi]
c00204e7:	e8 06 f3 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c00204ec:	83 c4 10             	add    esp,0x10
c00204ef:	55                   	push   ebp
c00204f0:	57                   	push   edi
c00204f1:	52                   	push   edx
c00204f2:	50                   	push   eax
c00204f3:	e8 06 f5 ff ff       	call   c001f9fe <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204f8:	eb 60                	jmp    c002055a <Vm::x87Handler(regs*)+0x9bf>
c00204fa:	80 fa 06             	cmp    dl,0x6
c00204fd:	75 2a                	jne    c0020529 <Vm::x87Handler(regs*)+0x98e>
c00204ff:	51                   	push   ecx
c0020500:	51                   	push   ecx
c0020501:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020504:	ff 36                	push   DWORD PTR [esi]
c0020506:	e8 e7 f2 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c002050b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020512:	89 c6                	mov    esi,eax
c0020514:	89 d7                	mov    edi,edx
c0020516:	e8 43 f5 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002051b:	57                   	push   edi
c002051c:	56                   	push   esi
c002051d:	52                   	push   edx
c002051e:	50                   	push   eax
c002051f:	e8 08 f5 ff ff       	call   c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020524:	e9 86 00 00 00       	jmp    c00205af <Vm::x87Handler(regs*)+0xa14>
c0020529:	31 c0                	xor    eax,eax
c002052b:	80 fa 07             	cmp    dl,0x7
c002052e:	0f 85 c8 00 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c0020534:	83 ec 0c             	sub    esp,0xc
c0020537:	6a 00                	push   0x0
c0020539:	e8 20 f5 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c002053e:	89 c7                	mov    edi,eax
c0020540:	89 d5                	mov    ebp,edx
c0020542:	58                   	pop    eax
c0020543:	5a                   	pop    edx
c0020544:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020547:	ff 36                	push   DWORD PTR [esi]
c0020549:	e8 a4 f2 ff ff       	call   c001f7f2 <Vm::fpu64ToInternal(unsigned long long)>
c002054e:	83 c4 10             	add    esp,0x10
c0020551:	55                   	push   ebp
c0020552:	57                   	push   edi
c0020553:	52                   	push   edx
c0020554:	50                   	push   eax
c0020555:	e8 d2 f4 ff ff       	call   c001fa2c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002055a:	83 c4 0c             	add    esp,0xc
c002055d:	eb 53                	jmp    c00205b2 <Vm::x87Handler(regs*)+0xa17>
c002055f:	31 c0                	xor    eax,eax
c0020561:	80 fa 02             	cmp    dl,0x2
c0020564:	0f 85 92 00 00 00    	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c002056a:	83 ec 0c             	sub    esp,0xc
c002056d:	6a 00                	push   0x0
c002056f:	e8 ea f4 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c0020574:	59                   	pop    ecx
c0020575:	5f                   	pop    edi
c0020576:	52                   	push   edx
c0020577:	50                   	push   eax
c0020578:	e8 27 f2 ff ff       	call   c001f7a4 <Vm::fpuInternalTo64(unsigned long long)>
c002057d:	eb 70                	jmp    c00205ef <Vm::x87Handler(regs*)+0xa54>
c002057f:	31 c0                	xor    eax,eax
c0020581:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020586:	75 74                	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c0020588:	50                   	push   eax
c0020589:	50                   	push   eax
c002058a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002058d:	31 d2                	xor    edx,edx
c002058f:	52                   	push   edx
c0020590:	50                   	push   eax
c0020591:	e8 f6 f2 ff ff       	call   c001f88c <Vm::fpuLongToFloat(long long)>
c0020596:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002059d:	89 c6                	mov    esi,eax
c002059f:	89 d7                	mov    edi,edx
c00205a1:	e8 b8 f4 ff ff       	call   c001fa5e <Vm::fpuGetReg(int)>
c00205a6:	57                   	push   edi
c00205a7:	56                   	push   esi
c00205a8:	52                   	push   edx
c00205a9:	50                   	push   eax
c00205aa:	e8 5e f4 ff ff       	call   c001fa0d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205af:	83 c4 1c             	add    esp,0x1c
c00205b2:	52                   	push   edx
c00205b3:	50                   	push   eax
c00205b4:	6a 00                	push   0x0
c00205b6:	e8 e6 f4 ff ff       	call   c001faa1 <Vm::fpuSetReg(int, unsigned long long)>
c00205bb:	e9 f2 f7 ff ff       	jmp    c001fdb2 <Vm::x87Handler(regs*)+0x217>
c00205c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205c4:	80 fa 05             	cmp    dl,0x5
c00205c7:	75 11                	jne    c00205da <Vm::x87Handler(regs*)+0xa3f>
c00205c9:	55                   	push   ebp
c00205ca:	55                   	push   ebp
c00205cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205ce:	ff 36                	push   DWORD PTR [esi]
c00205d0:	e8 81 f2 ff ff       	call   c001f856 <Vm::fpuULongToFloat(unsigned long long)>
c00205d5:	e9 cf f7 ff ff       	jmp    c001fda9 <Vm::x87Handler(regs*)+0x20e>
c00205da:	31 c0                	xor    eax,eax
c00205dc:	80 fa 07             	cmp    dl,0x7
c00205df:	75 1b                	jne    c00205fc <Vm::x87Handler(regs*)+0xa61>
c00205e1:	e8 63 f5 ff ff       	call   c001fb49 <Vm::fpuPop()>
c00205e6:	51                   	push   ecx
c00205e7:	51                   	push   ecx
c00205e8:	52                   	push   edx
c00205e9:	50                   	push   eax
c00205ea:	e8 0c f2 ff ff       	call   c001f7fb <Vm::fpuFloatToLong(unsigned long long)>
c00205ef:	83 c4 10             	add    esp,0x10
c00205f2:	89 06                	mov    DWORD PTR [esi],eax
c00205f4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205f7:	e9 f8 f7 ff ff       	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x259>
c00205fc:	83 c4 1c             	add    esp,0x1c
c00205ff:	5b                   	pop    ebx
c0020600:	5e                   	pop    esi
c0020601:	5f                   	pop    edi
c0020602:	5d                   	pop    ebp
c0020603:	c3                   	ret    

c0020604 <__static_initialization_and_destruction_0(int, int)>:
c0020604:	83 ec 0c             	sub    esp,0xc
c0020607:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002060c:	75 1a                	jne    c0020628 <__static_initialization_and_destruction_0(int, int)+0x24>
c002060e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020616:	75 10                	jne    c0020628 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	68 e0 25 03 c0       	push   0xc00325e0
c0020620:	e8 37 90 00 00       	call   c002965c <Vm::_FPUState::_FPUState()>
c0020625:	83 c4 10             	add    esp,0x10
c0020628:	90                   	nop
c0020629:	83 c4 0c             	add    esp,0xc
c002062c:	c3                   	ret    

c002062d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002062d:	83 ec 0c             	sub    esp,0xc
c0020630:	83 ec 08             	sub    esp,0x8
c0020633:	68 ff ff 00 00       	push   0xffff
c0020638:	6a 01                	push   0x1
c002063a:	e8 c5 ff ff ff       	call   c0020604 <__static_initialization_and_destruction_0(int, int)>
c002063f:	83 c4 10             	add    esp,0x10
c0020642:	83 c4 0c             	add    esp,0xc
c0020645:	c3                   	ret    

c0020646 <FAT::getName()>:
c0020646:	b8 e8 d0 02 c0       	mov    eax,0xc002d0e8
c002064b:	c3                   	ret    

c002064c <FAT::tell(void*, unsigned long long*)>:
c002064c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020651:	75 06                	jne    c0020659 <FAT::tell(void*, unsigned long long*)+0xd>
c0020653:	b8 04 00 00 00       	mov    eax,0x4
c0020658:	c3                   	ret    
c0020659:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002065e:	75 06                	jne    c0020666 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020660:	b8 04 00 00 00       	mov    eax,0x4
c0020665:	c3                   	ret    
c0020666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002066a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002066d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020670:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020674:	89 01                	mov    DWORD PTR [ecx],eax
c0020676:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020679:	b8 00 00 00 00       	mov    eax,0x0
c002067e:	c3                   	ret    
c002067f:	90                   	nop

c0020680 <FAT::stat(void*, unsigned long long*)>:
c0020680:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020685:	75 06                	jne    c002068d <FAT::stat(void*, unsigned long long*)+0xd>
c0020687:	b8 04 00 00 00       	mov    eax,0x4
c002068c:	c3                   	ret    
c002068d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020692:	75 06                	jne    c002069a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020694:	b8 04 00 00 00       	mov    eax,0x4
c0020699:	c3                   	ret    
c002069a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002069e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00206a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00206a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206a8:	89 01                	mov    DWORD PTR [ecx],eax
c00206aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206ad:	b8 00 00 00 00       	mov    eax,0x0
c00206b2:	c3                   	ret    
c00206b3:	90                   	nop

c00206b4 <FAT::~FAT()>:
c00206b4:	83 ec 0c             	sub    esp,0xc
c00206b7:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c00206bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c0:	89 10                	mov    DWORD PTR [eax],edx
c00206c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c6:	83 ec 0c             	sub    esp,0xc
c00206c9:	50                   	push   eax
c00206ca:	e8 4b 25 ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c00206cf:	83 c4 10             	add    esp,0x10
c00206d2:	90                   	nop
c00206d3:	83 c4 0c             	add    esp,0xc
c00206d6:	c3                   	ret    
c00206d7:	90                   	nop

c00206d8 <FAT::~FAT()>:
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	83 ec 0c             	sub    esp,0xc
c00206de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206e2:	e8 cd ff ff ff       	call   c00206b4 <FAT::~FAT()>
c00206e7:	83 c4 10             	add    esp,0x10
c00206ea:	83 ec 08             	sub    esp,0x8
c00206ed:	6a 08                	push   0x8
c00206ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206f3:	e8 13 21 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c00206f8:	83 c4 10             	add    esp,0x10
c00206fb:	83 c4 0c             	add    esp,0xc
c00206fe:	c3                   	ret    
c00206ff:	90                   	nop

c0020700 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020700:	83 ec 1c             	sub    esp,0x1c
c0020703:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002070a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002070f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020713:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c002071a:	83 f8 ff             	cmp    eax,0xffffffff
c002071d:	75 34                	jne    c0020753 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002071f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020723:	88 c2                	mov    dl,al
c0020725:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c002072a:	01 d0                	add    eax,edx
c002072c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020730:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002073a:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c0020741:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020746:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002074a:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c0020751:	eb 17                	jmp    c002076a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020753:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020757:	88 c2                	mov    dl,al
c0020759:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002075d:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020764:	01 d0                	add    eax,edx
c0020766:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002076a:	83 ec 04             	sub    esp,0x4
c002076d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020771:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020775:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020779:	50                   	push   eax
c002077a:	e8 7f 65 fe ff       	call   c0006cfe <f_getlabel>
c002077f:	83 c4 10             	add    esp,0x10
c0020782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020786:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002078b:	75 07                	jne    c0020794 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002078d:	b8 00 00 00 00       	mov    eax,0x0
c0020792:	eb 05                	jmp    c0020799 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020794:	b8 01 00 00 00       	mov    eax,0x1
c0020799:	83 c4 1c             	add    esp,0x1c
c002079c:	c3                   	ret    
c002079d:	90                   	nop

c002079e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002079e:	57                   	push   edi
c002079f:	83 ec 58             	sub    esp,0x58
c00207a2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00207aa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207ae:	b9 0f 00 00 00       	mov    ecx,0xf
c00207b3:	b8 00 00 00 00       	mov    eax,0x0
c00207b8:	fc                   	cld    
c00207b9:	89 d7                	mov    edi,edx
c00207bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207c1:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c00207c8:	83 f8 ff             	cmp    eax,0xffffffff
c00207cb:	75 34                	jne    c0020801 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207cd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207d1:	88 c2                	mov    dl,al
c00207d3:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c00207d8:	01 d0                	add    eax,edx
c00207da:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207de:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c00207e4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207e8:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c00207ef:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c00207f4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207f8:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c00207ff:	eb 17                	jmp    c0020818 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020801:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020805:	88 c2                	mov    dl,al
c0020807:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002080b:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020812:	01 d0                	add    eax,edx
c0020814:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020818:	83 ec 08             	sub    esp,0x8
c002081b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002081f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020823:	50                   	push   eax
c0020824:	e8 23 01 fe ff       	call   c000094c <strcat>
c0020829:	83 c4 10             	add    esp,0x10
c002082c:	83 ec 0c             	sub    esp,0xc
c002082f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020833:	50                   	push   eax
c0020834:	e8 b3 66 fe ff       	call   c0006eec <f_setlabel>
c0020839:	83 c4 10             	add    esp,0x10
c002083c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020840:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020845:	75 07                	jne    c002084e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020847:	b8 00 00 00 00       	mov    eax,0x0
c002084c:	eb 05                	jmp    c0020853 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002084e:	b8 01 00 00 00       	mov    eax,0x1
c0020853:	83 c4 58             	add    esp,0x58
c0020856:	5f                   	pop    edi
c0020857:	c3                   	ret    

c0020858 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020858:	83 ec 2c             	sub    esp,0x2c
c002085b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020863:	83 ec 08             	sub    esp,0x8
c0020866:	68 0c d1 02 c0       	push   0xc002d10c
c002086b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002086f:	e8 24 00 fe ff       	call   c0000898 <strcmp>
c0020874:	83 c4 10             	add    esp,0x10
c0020877:	85 c0                	test   eax,eax
c0020879:	0f 94 c0             	sete   al
c002087c:	84 c0                	test   al,al
c002087e:	74 0d                	je     c002088d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020880:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020888:	e9 a6 00 00 00       	jmp    c0020933 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002088d:	83 ec 08             	sub    esp,0x8
c0020890:	68 fe d0 02 c0       	push   0xc002d0fe
c0020895:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020899:	e8 fa ff fd ff       	call   c0000898 <strcmp>
c002089e:	83 c4 10             	add    esp,0x10
c00208a1:	85 c0                	test   eax,eax
c00208a3:	0f 94 c0             	sete   al
c00208a6:	84 c0                	test   al,al
c00208a8:	74 0a                	je     c00208b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00208aa:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208b2:	eb 7f                	jmp    c0020933 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b4:	83 ec 08             	sub    esp,0x8
c00208b7:	68 04 d1 02 c0       	push   0xc002d104
c00208bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208c0:	e8 d3 ff fd ff       	call   c0000898 <strcmp>
c00208c5:	83 c4 10             	add    esp,0x10
c00208c8:	85 c0                	test   eax,eax
c00208ca:	0f 94 c0             	sete   al
c00208cd:	84 c0                	test   al,al
c00208cf:	74 0a                	je     c00208db <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208d1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208d9:	eb 58                	jmp    c0020933 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208db:	83 ec 08             	sub    esp,0x8
c00208de:	68 cc 9d 02 c0       	push   0xc0029dcc
c00208e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208e7:	e8 ac ff fd ff       	call   c0000898 <strcmp>
c00208ec:	83 c4 10             	add    esp,0x10
c00208ef:	85 c0                	test   eax,eax
c00208f1:	0f 94 c0             	sete   al
c00208f4:	84 c0                	test   al,al
c00208f6:	74 0a                	je     c0020902 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208f8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020900:	eb 31                	jmp    c0020933 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020902:	83 ec 08             	sub    esp,0x8
c0020905:	68 0a d1 02 c0       	push   0xc002d10a
c002090a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002090e:	e8 85 ff fd ff       	call   c0000898 <strcmp>
c0020913:	83 c4 10             	add    esp,0x10
c0020916:	85 c0                	test   eax,eax
c0020918:	0f 94 c0             	sete   al
c002091b:	84 c0                	test   al,al
c002091d:	74 0a                	je     c0020929 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002091f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020927:	eb 0a                	jmp    c0020933 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020929:	b8 08 00 00 00       	mov    eax,0x8
c002092e:	e9 04 01 00 00       	jmp    c0020a37 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020933:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002093a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002093f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020943:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c002094a:	83 f8 ff             	cmp    eax,0xffffffff
c002094d:	75 34                	jne    c0020983 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002094f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020953:	88 c2                	mov    dl,al
c0020955:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c002095a:	01 d0                	add    eax,edx
c002095c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020960:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020966:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002096a:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c0020971:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020976:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002097a:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c0020981:	eb 17                	jmp    c002099a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020983:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020987:	88 c2                	mov    dl,al
c0020989:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002098d:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020994:	01 d0                	add    eax,edx
c0020996:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002099a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002099e:	88 04 24             	mov    BYTE PTR [esp],al
c00209a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00209a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00209b1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00209b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209be:	83 ec 0c             	sub    esp,0xc
c00209c1:	68 00 20 00 00       	push   0x2000
c00209c6:	e8 c1 ee fe ff       	call   c000f88c <malloc>
c00209cb:	83 c4 10             	add    esp,0x10
c00209ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209d2:	68 00 20 00 00       	push   0x2000
c00209d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209df:	50                   	push   eax
c00209e0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209e4:	50                   	push   eax
c00209e5:	e8 4d 69 fe ff       	call   c0007337 <f_mkfs>
c00209ea:	83 c4 10             	add    esp,0x10
c00209ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209f6:	75 07                	jne    c00209ff <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209f8:	b8 00 00 00 00       	mov    eax,0x0
c00209fd:	eb 38                	jmp    c0020a37 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209ff:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020a04:	75 17                	jne    c0020a1d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020a06:	83 ec 0c             	sub    esp,0xc
c0020a09:	68 48 d1 02 c0       	push   0xc002d148
c0020a0e:	e8 d8 1e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	b8 09 00 00 00       	mov    eax,0x9
c0020a1b:	eb 1a                	jmp    c0020a37 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a21:	83 ec 08             	sub    esp,0x8
c0020a24:	50                   	push   eax
c0020a25:	68 10 d1 02 c0       	push   0xc002d110
c0020a2a:	e8 bc 1e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0020a2f:	83 c4 10             	add    esp,0x10
c0020a32:	b8 01 00 00 00       	mov    eax,0x1
c0020a37:	83 c4 2c             	add    esp,0x2c
c0020a3a:	c3                   	ret    
c0020a3b:	90                   	nop

c0020a3c <FAT::tryMount(LogicalDisk*, int)>:
c0020a3c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a42:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020a47:	83 f8 14             	cmp    eax,0x14
c0020a4a:	75 17                	jne    c0020a63 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a4c:	83 ec 0c             	sub    esp,0xc
c0020a4f:	68 22 d1 02 c0       	push   0xc002d122
c0020a54:	e8 c8 98 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0020a59:	83 c4 10             	add    esp,0x10
c0020a5c:	b0 00                	mov    al,0x0
c0020a5e:	e9 d7 01 00 00       	jmp    c0020c3a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a63:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a6a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a76:	3d 00 02 00 00       	cmp    eax,0x200
c0020a7b:	74 07                	je     c0020a84 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a7d:	b0 00                	mov    al,0x0
c0020a7f:	e9 b6 01 00 00       	jmp    c0020c3a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a84:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a8c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a93:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020a9a:	83 f8 ff             	cmp    eax,0xffffffff
c0020a9d:	74 07                	je     c0020aa6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a9f:	b0 01                	mov    al,0x1
c0020aa1:	e9 94 01 00 00       	jmp    c0020c3a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020ab0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020ab8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020abf:	88 c2                	mov    dl,al
c0020ac1:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020ac6:	01 d0                	add    eax,edx
c0020ac8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020acf:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020ad5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020adc:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c0020ae3:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020ae8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020aef:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c0020af6:	83 ec 0c             	sub    esp,0xc
c0020af9:	68 54 02 00 00       	push   0x254
c0020afe:	e8 89 ed fe ff       	call   c000f88c <malloc>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020b0d:	83 ec 04             	sub    esp,0x4
c0020b10:	6a 00                	push   0x0
c0020b12:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b19:	50                   	push   eax
c0020b1a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b21:	e8 cf 43 fe ff       	call   c0004ef5 <f_mount>
c0020b26:	83 c4 10             	add    esp,0x10
c0020b29:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b30:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b38:	74 19                	je     c0020b53 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b3a:	83 ec 0c             	sub    esp,0xc
c0020b3d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b44:	e8 63 ed fe ff       	call   c000f8ac <rfree>
c0020b49:	83 c4 10             	add    esp,0x10
c0020b4c:	b0 00                	mov    al,0x0
c0020b4e:	e9 e7 00 00 00       	jmp    c0020c3a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b53:	83 ec 04             	sub    esp,0x4
c0020b56:	68 00 01 00 00       	push   0x100
c0020b5b:	6a 00                	push   0x0
c0020b5d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b64:	50                   	push   eax
c0020b65:	e8 e6 fb fd ff       	call   c0000750 <memset>
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	83 ec 08             	sub    esp,0x8
c0020b70:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b77:	50                   	push   eax
c0020b78:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b7f:	50                   	push   eax
c0020b80:	e8 c7 fd fd ff       	call   c000094c <strcat>
c0020b85:	83 c4 10             	add    esp,0x10
c0020b88:	83 ec 08             	sub    esp,0x8
c0020b8b:	68 30 d1 02 c0       	push   0xc002d130
c0020b90:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b97:	50                   	push   eax
c0020b98:	e8 af fd fd ff       	call   c000094c <strcat>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	83 ec 04             	sub    esp,0x4
c0020ba3:	6a 01                	push   0x1
c0020ba5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020bac:	50                   	push   eax
c0020bad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb1:	50                   	push   eax
c0020bb2:	e8 a0 43 fe ff       	call   c0004f57 <f_open>
c0020bb7:	83 c4 10             	add    esp,0x10
c0020bba:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bc1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020bc8:	85 c0                	test   eax,eax
c0020bca:	74 0a                	je     c0020bd6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020bcc:	78 2d                	js     c0020bfb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bce:	83 e8 04             	sub    eax,0x4
c0020bd1:	83 f8 01             	cmp    eax,0x1
c0020bd4:	77 25                	ja     c0020bfb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bd6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bde:	83 ec 0c             	sub    esp,0xc
c0020be1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020be5:	50                   	push   eax
c0020be6:	e8 be 4e fe ff       	call   c0005aa9 <f_close>
c0020beb:	83 c4 10             	add    esp,0x10
c0020bee:	90                   	nop
c0020bef:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bf7:	74 3a                	je     c0020c33 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bf9:	eb 2d                	jmp    c0020c28 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bfb:	83 ec 0c             	sub    esp,0xc
c0020bfe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c05:	e8 a2 ec fe ff       	call   c000f8ac <rfree>
c0020c0a:	83 c4 10             	add    esp,0x10
c0020c0d:	83 ec 04             	sub    esp,0x4
c0020c10:	6a 00                	push   0x0
c0020c12:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c19:	50                   	push   eax
c0020c1a:	6a 00                	push   0x0
c0020c1c:	e8 d4 42 fe ff       	call   c0004ef5 <f_mount>
c0020c21:	83 c4 10             	add    esp,0x10
c0020c24:	b0 00                	mov    al,0x0
c0020c26:	eb 12                	jmp    c0020c3a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c28:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020c2d:	40                   	inc    eax
c0020c2e:	a3 40 26 03 c0       	mov    ds:0xc0032640,eax
c0020c33:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c3a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c40:	c3                   	ret    
c0020c41:	90                   	nop

c0020c42 <FAT::getFileFirstSector(char const*)>:
c0020c42:	53                   	push   ebx
c0020c43:	83 ec 28             	sub    esp,0x28
c0020c46:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c4e:	83 ec 0c             	sub    esp,0xc
c0020c51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c55:	e8 32 ec fe ff       	call   c000f88c <malloc>
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	89 c3                	mov    ebx,eax
c0020c5f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0020c64:	83 ec 04             	sub    esp,0x4
c0020c67:	50                   	push   eax
c0020c68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c6c:	53                   	push   ebx
c0020c6d:	e8 d8 21 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c0020c72:	83 c4 10             	add    esp,0x10
c0020c75:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c79:	83 ec 08             	sub    esp,0x8
c0020c7c:	6a 01                	push   0x1
c0020c7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c82:	e8 27 22 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c0020c87:	83 c4 10             	add    esp,0x10
c0020c8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c90:	83 c0 0c             	add    eax,0xc
c0020c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c95:	83 ec 0c             	sub    esp,0xc
c0020c98:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c9c:	52                   	push   edx
c0020c9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ca1:	52                   	push   edx
c0020ca2:	6a 00                	push   0x0
c0020ca4:	6a 04                	push   0x4
c0020ca6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020caa:	ff d0                	call   eax
c0020cac:	83 c4 20             	add    esp,0x20
c0020caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cb3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020cb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cc1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cc7:	83 ec 04             	sub    esp,0x4
c0020cca:	52                   	push   edx
c0020ccb:	50                   	push   eax
c0020ccc:	68 3b d1 02 c0       	push   0xc002d13b
c0020cd1:	e8 15 1c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0020cd6:	83 c4 10             	add    esp,0x10
c0020cd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cdd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ce0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ce3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ce7:	83 ec 0c             	sub    esp,0xc
c0020cea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020cee:	e8 19 22 ff ff       	call   c0012f0c <File::close()>
c0020cf3:	83 c4 10             	add    esp,0x10
c0020cf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cfa:	ba 00 00 00 00       	mov    edx,0x0
c0020cff:	83 c4 28             	add    esp,0x28
c0020d02:	5b                   	pop    ebx
c0020d03:	c3                   	ret    

c0020d04 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020d04:	57                   	push   edi
c0020d05:	56                   	push   esi
c0020d06:	53                   	push   ebx
c0020d07:	81 ec 50 02 00 00    	sub    esp,0x250
c0020d0d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020d15:	74 0a                	je     c0020d21 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020d17:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020d1f:	75 0a                	jne    c0020d2b <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020d21:	b8 04 00 00 00       	mov    eax,0x4
c0020d26:	e9 29 01 00 00       	jmp    c0020e54 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020d2b:	83 ec 08             	sub    esp,0x8
c0020d2e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d35:	50                   	push   eax
c0020d36:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020d3d:	e8 71 53 fe ff       	call   c00060b3 <f_readdir>
c0020d42:	83 c4 10             	add    esp,0x10
c0020d45:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020d4c:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020d53:	83 ec 0c             	sub    esp,0xc
c0020d56:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020d5d:	83 c0 1a             	add    eax,0x1a
c0020d60:	50                   	push   eax
c0020d61:	e8 06 fa fd ff       	call   c000076c <strlen>
c0020d66:	83 c4 10             	add    esp,0x10
c0020d69:	ba 00 00 00 00       	mov    edx,0x0
c0020d6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d76:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d7d:	0f b6 c0             	movzx  eax,al
c0020d80:	83 e0 10             	and    eax,0x10
c0020d83:	74 07                	je     c0020d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d85:	b8 02 00 00 00       	mov    eax,0x2
c0020d8a:	eb 05                	jmp    c0020d91 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d8c:	b8 01 00 00 00       	mov    eax,0x1
c0020d91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d95:	83 ec 08             	sub    esp,0x8
c0020d98:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d9f:	83 c0 1a             	add    eax,0x1a
c0020da2:	50                   	push   eax
c0020da3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020da7:	83 c0 10             	add    eax,0x10
c0020daa:	50                   	push   eax
c0020dab:	e8 5c fa fd ff       	call   c000080c <strcpy>
c0020db0:	83 c4 10             	add    esp,0x10
c0020db3:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020dba:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020dc1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020dc5:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020dcc:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020dd3:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020dda:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020de1:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020de8:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020def:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020df6:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020dfd:	89 c6                	mov    esi,eax
c0020dff:	89 d7                	mov    edi,edx
c0020e01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e03:	89 c8                	mov    eax,ecx
c0020e05:	89 fa                	mov    edx,edi
c0020e07:	89 f3                	mov    ebx,esi
c0020e09:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020e10:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020e17:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020e1e:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020e25:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e2b:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020e32:	84 c0                	test   al,al
c0020e34:	75 07                	jne    c0020e3d <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020e36:	b8 07 00 00 00       	mov    eax,0x7
c0020e3b:	eb 17                	jmp    c0020e54 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e3d:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020e44:	85 c0                	test   eax,eax
c0020e46:	75 07                	jne    c0020e4f <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020e48:	b8 00 00 00 00       	mov    eax,0x0
c0020e4d:	eb 05                	jmp    c0020e54 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e4f:	b8 01 00 00 00       	mov    eax,0x1
c0020e54:	81 c4 50 02 00 00    	add    esp,0x250
c0020e5a:	5b                   	pop    ebx
c0020e5b:	5e                   	pop    esi
c0020e5c:	5f                   	pop    edi
c0020e5d:	c3                   	ret    

c0020e5e <FAT::read(void*, unsigned long, void*, int*)>:
c0020e5e:	83 ec 1c             	sub    esp,0x1c
c0020e61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e66:	74 07                	je     c0020e6f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e6d:	75 07                	jne    c0020e76 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e6f:	b8 04 00 00 00       	mov    eax,0x4
c0020e74:	eb 3d                	jmp    c0020eb3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e7a:	50                   	push   eax
c0020e7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e87:	e8 07 45 fe ff       	call   c0005393 <f_read>
c0020e8c:	83 c4 10             	add    esp,0x10
c0020e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e97:	89 c2                	mov    edx,eax
c0020e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e9d:	89 10                	mov    DWORD PTR [eax],edx
c0020e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ea3:	85 c0                	test   eax,eax
c0020ea5:	75 07                	jne    c0020eae <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020ea7:	b8 00 00 00 00       	mov    eax,0x0
c0020eac:	eb 05                	jmp    c0020eb3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020eae:	b8 01 00 00 00       	mov    eax,0x1
c0020eb3:	83 c4 1c             	add    esp,0x1c
c0020eb6:	c3                   	ret    
c0020eb7:	90                   	nop

c0020eb8 <FAT::write(void*, unsigned long, void*, int*)>:
c0020eb8:	83 ec 1c             	sub    esp,0x1c
c0020ebb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ec0:	74 07                	je     c0020ec9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ec2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ec7:	75 07                	jne    c0020ed0 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ec9:	b8 04 00 00 00       	mov    eax,0x4
c0020ece:	eb 3d                	jmp    c0020f0d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ed0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ed4:	50                   	push   eax
c0020ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ed9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020edd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ee1:	e8 2d 47 fe ff       	call   c0005613 <f_write>
c0020ee6:	83 c4 10             	add    esp,0x10
c0020ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ef1:	89 c2                	mov    edx,eax
c0020ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ef7:	89 10                	mov    DWORD PTR [eax],edx
c0020ef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020efd:	85 c0                	test   eax,eax
c0020eff:	75 07                	jne    c0020f08 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020f01:	b8 00 00 00 00       	mov    eax,0x0
c0020f06:	eb 05                	jmp    c0020f0d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f08:	b8 01 00 00 00       	mov    eax,0x1
c0020f0d:	83 c4 1c             	add    esp,0x1c
c0020f10:	c3                   	ret    
c0020f11:	90                   	nop

c0020f12 <FAT::close(void*)>:
c0020f12:	83 ec 1c             	sub    esp,0x1c
c0020f15:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f1a:	75 07                	jne    c0020f23 <FAT::close(void*)+0x11>
c0020f1c:	b8 04 00 00 00       	mov    eax,0x4
c0020f21:	eb 36                	jmp    c0020f59 <FAT::close(void*)+0x47>
c0020f23:	83 ec 0c             	sub    esp,0xc
c0020f26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f2a:	e8 7a 4b fe ff       	call   c0005aa9 <f_close>
c0020f2f:	83 c4 10             	add    esp,0x10
c0020f32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f36:	83 ec 0c             	sub    esp,0xc
c0020f39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f3d:	e8 5a e9 fe ff       	call   c000f89c <free>
c0020f42:	83 c4 10             	add    esp,0x10
c0020f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f49:	85 c0                	test   eax,eax
c0020f4b:	75 07                	jne    c0020f54 <FAT::close(void*)+0x42>
c0020f4d:	b8 00 00 00 00       	mov    eax,0x0
c0020f52:	eb 05                	jmp    c0020f59 <FAT::close(void*)+0x47>
c0020f54:	b8 01 00 00 00       	mov    eax,0x1
c0020f59:	83 c4 1c             	add    esp,0x1c
c0020f5c:	c3                   	ret    
c0020f5d:	90                   	nop

c0020f5e <FAT::closeDir(void*)>:
c0020f5e:	83 ec 1c             	sub    esp,0x1c
c0020f61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f66:	75 07                	jne    c0020f6f <FAT::closeDir(void*)+0x11>
c0020f68:	b8 04 00 00 00       	mov    eax,0x4
c0020f6d:	eb 36                	jmp    c0020fa5 <FAT::closeDir(void*)+0x47>
c0020f6f:	83 ec 0c             	sub    esp,0xc
c0020f72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f76:	e8 16 51 fe ff       	call   c0006091 <f_closedir>
c0020f7b:	83 c4 10             	add    esp,0x10
c0020f7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f82:	83 ec 0c             	sub    esp,0xc
c0020f85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f89:	e8 0e e9 fe ff       	call   c000f89c <free>
c0020f8e:	83 c4 10             	add    esp,0x10
c0020f91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f95:	85 c0                	test   eax,eax
c0020f97:	75 07                	jne    c0020fa0 <FAT::closeDir(void*)+0x42>
c0020f99:	b8 00 00 00 00       	mov    eax,0x0
c0020f9e:	eb 05                	jmp    c0020fa5 <FAT::closeDir(void*)+0x47>
c0020fa0:	b8 01 00 00 00       	mov    eax,0x1
c0020fa5:	83 c4 1c             	add    esp,0x1c
c0020fa8:	c3                   	ret    
c0020fa9:	90                   	nop

c0020faa <FAT::seek(void*, unsigned long long)>:
c0020faa:	83 ec 2c             	sub    esp,0x2c
c0020fad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020fb5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fbd:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020fc2:	75 07                	jne    c0020fcb <FAT::seek(void*, unsigned long long)+0x21>
c0020fc4:	b8 04 00 00 00       	mov    eax,0x4
c0020fc9:	eb 2f                	jmp    c0020ffa <FAT::seek(void*, unsigned long long)+0x50>
c0020fcb:	83 ec 04             	sub    esp,0x4
c0020fce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fd6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020fda:	e8 f9 4a fe ff       	call   c0005ad8 <f_lseek>
c0020fdf:	83 c4 10             	add    esp,0x10
c0020fe2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fea:	85 c0                	test   eax,eax
c0020fec:	75 07                	jne    c0020ff5 <FAT::seek(void*, unsigned long long)+0x4b>
c0020fee:	b8 00 00 00 00       	mov    eax,0x0
c0020ff3:	eb 05                	jmp    c0020ffa <FAT::seek(void*, unsigned long long)+0x50>
c0020ff5:	b8 01 00 00 00       	mov    eax,0x1
c0020ffa:	83 c4 2c             	add    esp,0x2c
c0020ffd:	c3                   	ret    

c0020ffe <fatWrapperReadDisk>:
c0020ffe:	83 ec 1c             	sub    esp,0x1c
c0021001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021005:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002100d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021010:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021014:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021018:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002101d:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0021024:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021028:	83 ec 0c             	sub    esp,0xc
c002102b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002102f:	52                   	push   edx
c0021030:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021034:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021038:	50                   	push   eax
c0021039:	e8 2a 52 ff ff       	call   c0016268 <LogicalDisk::read(unsigned long long, int, void*)>
c002103e:	83 c4 20             	add    esp,0x20
c0021041:	83 c4 1c             	add    esp,0x1c
c0021044:	c3                   	ret    

c0021045 <fatWrapperWriteDisk>:
c0021045:	83 ec 1c             	sub    esp,0x1c
c0021048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002104c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021050:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021054:	89 04 24             	mov    DWORD PTR [esp],eax
c0021057:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002105b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002105f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021064:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c002106b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002106f:	83 ec 0c             	sub    esp,0xc
c0021072:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021076:	52                   	push   edx
c0021077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002107b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002107f:	50                   	push   eax
c0021080:	e8 4f 52 ff ff       	call   c00162d4 <LogicalDisk::write(unsigned long long, int, void*)>
c0021085:	83 c4 20             	add    esp,0x20
c0021088:	83 c4 1c             	add    esp,0x1c
c002108b:	c3                   	ret    

c002108c <fatWrapperIoctl>:
c002108c:	53                   	push   ebx
c002108d:	83 ec 28             	sub    esp,0x28
c0021090:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021094:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021098:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002109c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00210a0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00210a5:	75 31                	jne    c00210d8 <fatWrapperIoctl+0x4c>
c00210a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00210af:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210b4:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c00210bb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210cb:	66 89 02             	mov    WORD PTR [edx],ax
c00210ce:	b8 00 00 00 00       	mov    eax,0x0
c00210d3:	e9 b2 00 00 00       	jmp    c002118a <fatWrapperIoctl+0xfe>
c00210d8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00210dd:	75 6a                	jne    c0021149 <fatWrapperIoctl+0xbd>
c00210df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210ec:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c00210f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210f9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00210ff:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021105:	89 c8                	mov    eax,ecx
c0021107:	89 da                	mov    edx,ebx
c0021109:	0f a4 c2 0a          	shld   edx,eax,0xa
c002110d:	c1 e0 0a             	shl    eax,0xa
c0021110:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021115:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c002111c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021122:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021128:	89 cb                	mov    ebx,ecx
c002112a:	c1 fb 1f             	sar    ebx,0x1f
c002112d:	53                   	push   ebx
c002112e:	51                   	push   ecx
c002112f:	52                   	push   edx
c0021130:	50                   	push   eax
c0021131:	e8 de 60 00 00       	call   c0027214 <__udivdi3>
c0021136:	83 c4 10             	add    esp,0x10
c0021139:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002113d:	89 01                	mov    DWORD PTR [ecx],eax
c002113f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021142:	b8 00 00 00 00       	mov    eax,0x0
c0021147:	eb 41                	jmp    c002118a <fatWrapperIoctl+0xfe>
c0021149:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002114e:	75 07                	jne    c0021157 <fatWrapperIoctl+0xcb>
c0021150:	b8 00 00 00 00       	mov    eax,0x0
c0021155:	eb 33                	jmp    c002118a <fatWrapperIoctl+0xfe>
c0021157:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002115c:	75 19                	jne    c0021177 <fatWrapperIoctl+0xeb>
c002115e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021162:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002116a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021170:	b8 00 00 00 00       	mov    eax,0x0
c0021175:	eb 13                	jmp    c002118a <fatWrapperIoctl+0xfe>
c0021177:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002117c:	75 07                	jne    c0021185 <fatWrapperIoctl+0xf9>
c002117e:	b8 00 00 00 00       	mov    eax,0x0
c0021183:	eb 05                	jmp    c002118a <fatWrapperIoctl+0xfe>
c0021185:	b8 04 00 00 00       	mov    eax,0x4
c002118a:	83 c4 28             	add    esp,0x28
c002118d:	5b                   	pop    ebx
c002118e:	c3                   	ret    
c002118f:	90                   	nop

c0021190 <FAT::FAT()>:
c0021190:	83 ec 1c             	sub    esp,0x1c
c0021193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021197:	83 ec 0c             	sub    esp,0xc
c002119a:	50                   	push   eax
c002119b:	e8 56 1a ff ff       	call   c0012bf6 <Filesystem::Filesystem()>
c00211a0:	83 c4 10             	add    esp,0x10
c00211a3:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c00211a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211ac:	89 10                	mov    DWORD PTR [eax],edx
c00211ae:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c00211b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211c0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00211c5:	7f 15                	jg     c00211dc <FAT::FAT()+0x4c>
c00211c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211cb:	c7 04 85 60 26 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd9a0],0xffffffff
c00211d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211da:	eb e4                	jmp    c00211c0 <FAT::FAT()+0x30>
c00211dc:	90                   	nop
c00211dd:	83 c4 1c             	add    esp,0x1c
c00211e0:	c3                   	ret    
c00211e1:	90                   	nop

c00211e2 <FAT::fixFilepath(char*)>:
c00211e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211e6:	8a 00                	mov    al,BYTE PTR [eax]
c00211e8:	3c 40                	cmp    al,0x40
c00211ea:	7e 2c                	jle    c0021218 <FAT::fixFilepath(char*)+0x36>
c00211ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211f0:	8a 00                	mov    al,BYTE PTR [eax]
c00211f2:	83 e8 41             	sub    eax,0x41
c00211f5:	88 c2                	mov    dl,al
c00211f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211fb:	88 10                	mov    BYTE PTR [eax],dl
c00211fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021201:	8a 00                	mov    al,BYTE PTR [eax]
c0021203:	0f be c0             	movsx  eax,al
c0021206:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c002120d:	83 c0 30             	add    eax,0x30
c0021210:	88 c2                	mov    dl,al
c0021212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021216:	88 10                	mov    BYTE PTR [eax],dl
c0021218:	90                   	nop
c0021219:	c3                   	ret    

c002121a <FAT::open(char const*, void**, FileOpenMode)>:
c002121a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021220:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021228:	74 0a                	je     c0021234 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002122a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021232:	75 0a                	jne    c002123e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021234:	b8 04 00 00 00       	mov    eax,0x4
c0021239:	e9 fd 00 00 00       	jmp    c002133b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002123e:	83 ec 08             	sub    esp,0x8
c0021241:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021248:	8d 44 24 14          	lea    eax,[esp+0x14]
c002124c:	50                   	push   eax
c002124d:	e8 ba f5 fd ff       	call   c000080c <strcpy>
c0021252:	83 c4 10             	add    esp,0x10
c0021255:	83 ec 08             	sub    esp,0x8
c0021258:	8d 44 24 10          	lea    eax,[esp+0x10]
c002125c:	50                   	push   eax
c002125d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021264:	e8 79 ff ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c0021269:	83 c4 10             	add    esp,0x10
c002126c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021274:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002127b:	83 e0 01             	and    eax,0x1
c002127e:	74 08                	je     c0021288 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021280:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002128f:	83 e0 04             	and    eax,0x4
c0021292:	74 10                	je     c00212a4 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021294:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002129c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00212a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212ab:	83 e0 02             	and    eax,0x2
c00212ae:	74 08                	je     c00212b8 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00212b0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00212b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212bf:	83 e0 08             	and    eax,0x8
c00212c2:	74 08                	je     c00212cc <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00212c4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00212cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212d3:	83 e0 10             	and    eax,0x10
c00212d6:	74 08                	je     c00212e0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00212d8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	68 50 02 00 00       	push   0x250
c00212e8:	e8 9f e5 fe ff       	call   c000f88c <malloc>
c00212ed:	83 c4 10             	add    esp,0x10
c00212f0:	89 c2                	mov    edx,eax
c00212f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212f9:	89 10                	mov    DWORD PTR [eax],edx
c00212fb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021303:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002130a:	8b 00                	mov    eax,DWORD PTR [eax]
c002130c:	83 ec 04             	sub    esp,0x4
c002130f:	52                   	push   edx
c0021310:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021314:	52                   	push   edx
c0021315:	50                   	push   eax
c0021316:	e8 3c 3c fe ff       	call   c0004f57 <f_open>
c002131b:	83 c4 10             	add    esp,0x10
c002131e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021325:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002132d:	74 07                	je     c0021336 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002132f:	b8 01 00 00 00       	mov    eax,0x1
c0021334:	eb 05                	jmp    c002133b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021336:	b8 00 00 00 00       	mov    eax,0x0
c002133b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021341:	c3                   	ret    

c0021342 <FAT::openDir(char const*, void**)>:
c0021342:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021348:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021350:	74 0a                	je     c002135c <FAT::openDir(char const*, void**)+0x1a>
c0021352:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002135a:	75 07                	jne    c0021363 <FAT::openDir(char const*, void**)+0x21>
c002135c:	b8 04 00 00 00       	mov    eax,0x4
c0021361:	eb 7d                	jmp    c00213e0 <FAT::openDir(char const*, void**)+0x9e>
c0021363:	83 ec 08             	sub    esp,0x8
c0021366:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002136d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021371:	50                   	push   eax
c0021372:	e8 95 f4 fd ff       	call   c000080c <strcpy>
c0021377:	83 c4 10             	add    esp,0x10
c002137a:	83 ec 08             	sub    esp,0x8
c002137d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021381:	50                   	push   eax
c0021382:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021389:	e8 54 fe ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c002138e:	83 c4 10             	add    esp,0x10
c0021391:	83 ec 0c             	sub    esp,0xc
c0021394:	6a 4c                	push   0x4c
c0021396:	e8 f1 e4 fe ff       	call   c000f88c <malloc>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	89 c2                	mov    edx,eax
c00213a0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213a7:	89 10                	mov    DWORD PTR [eax],edx
c00213a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00213b2:	83 ec 08             	sub    esp,0x8
c00213b5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213b9:	52                   	push   edx
c00213ba:	50                   	push   eax
c00213bb:	e8 cf 4b fe ff       	call   c0005f8f <f_opendir>
c00213c0:	83 c4 10             	add    esp,0x10
c00213c3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213ca:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00213d2:	74 07                	je     c00213db <FAT::openDir(char const*, void**)+0x99>
c00213d4:	b8 01 00 00 00       	mov    eax,0x1
c00213d9:	eb 05                	jmp    c00213e0 <FAT::openDir(char const*, void**)+0x9e>
c00213db:	b8 00 00 00 00       	mov    eax,0x0
c00213e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213e6:	c3                   	ret    
c00213e7:	90                   	nop

c00213e8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00213e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00213ee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00213f6:	75 0a                	jne    c0021402 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00213f8:	b8 04 00 00 00       	mov    eax,0x4
c00213fd:	e9 c9 00 00 00       	jmp    c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021402:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002140a:	75 0a                	jne    c0021416 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002140c:	b8 04 00 00 00       	mov    eax,0x4
c0021411:	e9 b5 00 00 00       	jmp    c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021416:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002141e:	75 0a                	jne    c002142a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021420:	b8 04 00 00 00       	mov    eax,0x4
c0021425:	e9 a1 00 00 00       	jmp    c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002142a:	83 ec 08             	sub    esp,0x8
c002142d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021434:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002143b:	50                   	push   eax
c002143c:	e8 cb f3 fd ff       	call   c000080c <strcpy>
c0021441:	83 c4 10             	add    esp,0x10
c0021444:	83 ec 08             	sub    esp,0x8
c0021447:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002144e:	50                   	push   eax
c002144f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021456:	e8 87 fd ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c002145b:	83 c4 10             	add    esp,0x10
c002145e:	83 ec 08             	sub    esp,0x8
c0021461:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021465:	50                   	push   eax
c0021466:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002146d:	50                   	push   eax
c002146e:	e8 db 4c fe ff       	call   c000614e <f_stat>
c0021473:	83 c4 10             	add    esp,0x10
c0021476:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002147d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021484:	85 c0                	test   eax,eax
c0021486:	74 07                	je     c002148f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021488:	83 f8 04             	cmp    eax,0x4
c002148b:	74 32                	je     c00214bf <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002148d:	eb 37                	jmp    c00214c6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002148f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021493:	0f b6 c0             	movzx  eax,al
c0021496:	83 e0 10             	and    eax,0x10
c0021499:	0f 95 c2             	setne  dl
c002149c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00214a3:	88 10                	mov    BYTE PTR [eax],dl
c00214a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00214a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214ac:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00214b3:	89 01                	mov    DWORD PTR [ecx],eax
c00214b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00214b8:	b8 00 00 00 00       	mov    eax,0x0
c00214bd:	eb 0c                	jmp    c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214bf:	b8 02 00 00 00       	mov    eax,0x2
c00214c4:	eb 05                	jmp    c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214c6:	b8 01 00 00 00       	mov    eax,0x1
c00214cb:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214d1:	c3                   	ret    

c00214d2 <FAT::unlink(char const*)>:
c00214d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214d8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214e0:	75 07                	jne    c00214e9 <FAT::unlink(char const*)+0x17>
c00214e2:	b8 04 00 00 00       	mov    eax,0x4
c00214e7:	eb 5c                	jmp    c0021545 <FAT::unlink(char const*)+0x73>
c00214e9:	83 ec 08             	sub    esp,0x8
c00214ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214f7:	50                   	push   eax
c00214f8:	e8 0f f3 fd ff       	call   c000080c <strcpy>
c00214fd:	83 c4 10             	add    esp,0x10
c0021500:	83 ec 08             	sub    esp,0x8
c0021503:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021507:	50                   	push   eax
c0021508:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002150f:	e8 ce fc ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c0021514:	83 c4 10             	add    esp,0x10
c0021517:	83 ec 0c             	sub    esp,0xc
c002151a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002151e:	50                   	push   eax
c002151f:	e8 7c 4f fe ff       	call   c00064a0 <f_unlink>
c0021524:	83 c4 10             	add    esp,0x10
c0021527:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002152e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021535:	85 c0                	test   eax,eax
c0021537:	75 07                	jne    c0021540 <FAT::unlink(char const*)+0x6e>
c0021539:	b8 00 00 00 00       	mov    eax,0x0
c002153e:	eb 05                	jmp    c0021545 <FAT::unlink(char const*)+0x73>
c0021540:	b8 01 00 00 00       	mov    eax,0x1
c0021545:	81 c4 1c 01 00 00    	add    esp,0x11c
c002154b:	c3                   	ret    

c002154c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002154c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021552:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021559:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021560:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021564:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021568:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021570:	75 0a                	jne    c002157c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021572:	b8 04 00 00 00       	mov    eax,0x4
c0021577:	e9 1c 01 00 00       	jmp    c0021698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002157c:	83 ec 08             	sub    esp,0x8
c002157f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021586:	8d 44 24 24          	lea    eax,[esp+0x24]
c002158a:	50                   	push   eax
c002158b:	e8 7c f2 fd ff       	call   c000080c <strcpy>
c0021590:	83 c4 10             	add    esp,0x10
c0021593:	83 ec 08             	sub    esp,0x8
c0021596:	8d 44 24 20          	lea    eax,[esp+0x20]
c002159a:	50                   	push   eax
c002159b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00215a2:	e8 3b fc ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00215b2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00215ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215bf:	83 e0 01             	and    eax,0x1
c00215c2:	74 08                	je     c00215cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00215c4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00215cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215d1:	83 e0 02             	and    eax,0x2
c00215d4:	74 08                	je     c00215de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00215d6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00215de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215e3:	83 e0 04             	and    eax,0x4
c00215e6:	74 08                	je     c00215f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00215e8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00215f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215f5:	83 e0 08             	and    eax,0x8
c00215f8:	74 08                	je     c0021602 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00215fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021602:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021607:	83 e0 01             	and    eax,0x1
c002160a:	74 08                	je     c0021614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002160c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021614:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021619:	83 e0 02             	and    eax,0x2
c002161c:	74 08                	je     c0021626 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002161e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021626:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002162b:	83 e0 04             	and    eax,0x4
c002162e:	74 08                	je     c0021638 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021630:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021638:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002163d:	83 e0 08             	and    eax,0x8
c0021640:	74 08                	je     c002164a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021642:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002164a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021651:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021658:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021660:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021668:	83 ec 04             	sub    esp,0x4
c002166b:	52                   	push   edx
c002166c:	50                   	push   eax
c002166d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021671:	50                   	push   eax
c0021672:	e8 cb 54 fe ff       	call   c0006b42 <f_chmod>
c0021677:	83 c4 10             	add    esp,0x10
c002167a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021681:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021688:	85 c0                	test   eax,eax
c002168a:	75 07                	jne    c0021693 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002168c:	b8 00 00 00 00       	mov    eax,0x0
c0021691:	eb 05                	jmp    c0021698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021693:	b8 01 00 00 00       	mov    eax,0x1
c0021698:	81 c4 2c 01 00 00    	add    esp,0x12c
c002169e:	c3                   	ret    
c002169f:	90                   	nop

c00216a0 <FAT::rename(char const*, char const*)>:
c00216a0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00216a6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00216ae:	74 0a                	je     c00216ba <FAT::rename(char const*, char const*)+0x1a>
c00216b0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00216b8:	75 0a                	jne    c00216c4 <FAT::rename(char const*, char const*)+0x24>
c00216ba:	b8 04 00 00 00       	mov    eax,0x4
c00216bf:	e9 98 00 00 00       	jmp    c002175c <FAT::rename(char const*, char const*)+0xbc>
c00216c4:	83 ec 08             	sub    esp,0x8
c00216c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216d5:	50                   	push   eax
c00216d6:	e8 31 f1 fd ff       	call   c000080c <strcpy>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	83 ec 08             	sub    esp,0x8
c00216e1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00216e8:	50                   	push   eax
c00216e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216f0:	e8 ed fa ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c00216f5:	83 c4 10             	add    esp,0x10
c00216f8:	83 ec 08             	sub    esp,0x8
c00216fb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021702:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021706:	50                   	push   eax
c0021707:	e8 00 f1 fd ff       	call   c000080c <strcpy>
c002170c:	83 c4 10             	add    esp,0x10
c002170f:	83 ec 08             	sub    esp,0x8
c0021712:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021716:	50                   	push   eax
c0021717:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002171e:	e8 bf fa ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c0021723:	83 c4 10             	add    esp,0x10
c0021726:	83 ec 08             	sub    esp,0x8
c0021729:	8d 44 24 14          	lea    eax,[esp+0x14]
c002172d:	50                   	push   eax
c002172e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021735:	50                   	push   eax
c0021736:	e8 14 51 fe ff       	call   c000684f <f_rename>
c002173b:	83 c4 10             	add    esp,0x10
c002173e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021745:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002174c:	85 c0                	test   eax,eax
c002174e:	75 07                	jne    c0021757 <FAT::rename(char const*, char const*)+0xb7>
c0021750:	b8 00 00 00 00       	mov    eax,0x0
c0021755:	eb 05                	jmp    c002175c <FAT::rename(char const*, char const*)+0xbc>
c0021757:	b8 01 00 00 00       	mov    eax,0x1
c002175c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021762:	c3                   	ret    
c0021763:	90                   	nop

c0021764 <FAT::mkdir(char const*)>:
c0021764:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002176a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021772:	75 07                	jne    c002177b <FAT::mkdir(char const*)+0x17>
c0021774:	b8 04 00 00 00       	mov    eax,0x4
c0021779:	eb 5c                	jmp    c00217d7 <FAT::mkdir(char const*)+0x73>
c002177b:	83 ec 08             	sub    esp,0x8
c002177e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021785:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021789:	50                   	push   eax
c002178a:	e8 7d f0 fd ff       	call   c000080c <strcpy>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021799:	50                   	push   eax
c002179a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217a1:	e8 3c fa ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c00217a6:	83 c4 10             	add    esp,0x10
c00217a9:	83 ec 0c             	sub    esp,0xc
c00217ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217b0:	50                   	push   eax
c00217b1:	e8 6d 4e fe ff       	call   c0006623 <f_mkdir>
c00217b6:	83 c4 10             	add    esp,0x10
c00217b9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00217c0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00217c7:	85 c0                	test   eax,eax
c00217c9:	75 07                	jne    c00217d2 <FAT::mkdir(char const*)+0x6e>
c00217cb:	b8 00 00 00 00       	mov    eax,0x0
c00217d0:	eb 05                	jmp    c00217d7 <FAT::mkdir(char const*)+0x73>
c00217d2:	b8 01 00 00 00       	mov    eax,0x1
c00217d7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217dd:	c3                   	ret    

c00217de <FAT::exists(char const*)>:
c00217de:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00217e4:	83 ec 08             	sub    esp,0x8
c00217e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217f2:	50                   	push   eax
c00217f3:	e8 14 f0 fd ff       	call   c000080c <strcpy>
c00217f8:	83 c4 10             	add    esp,0x10
c00217fb:	83 ec 08             	sub    esp,0x8
c00217fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021802:	50                   	push   eax
c0021803:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002180a:	e8 d3 f9 ff ff       	call   c00211e2 <FAT::fixFilepath(char*)>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	83 ec 08             	sub    esp,0x8
c0021815:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002181c:	50                   	push   eax
c002181d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021821:	50                   	push   eax
c0021822:	e8 27 49 fe ff       	call   c000614e <f_stat>
c0021827:	83 c4 10             	add    esp,0x10
c002182a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021831:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021838:	85 c0                	test   eax,eax
c002183a:	75 04                	jne    c0021840 <FAT::exists(char const*)+0x62>
c002183c:	b0 01                	mov    al,0x1
c002183e:	eb 02                	jmp    c0021842 <FAT::exists(char const*)+0x64>
c0021840:	b0 00                	mov    al,0x0
c0021842:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021848:	c3                   	ret    
c0021849:	90                   	nop

c002184a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002184a:	b8 08 00 00 00       	mov    eax,0x8
c002184f:	c3                   	ret    

c0021850 <ISO9660::seek(void*, unsigned long long)>:
c0021850:	53                   	push   ebx
c0021851:	b8 04 00 00 00       	mov    eax,0x4
c0021856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002185a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002185e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021862:	85 d2                	test   edx,edx
c0021864:	74 17                	je     c002187d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021866:	89 c8                	mov    eax,ecx
c0021868:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002186b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002186e:	b8 01 00 00 00       	mov    eax,0x1
c0021873:	73 08                	jae    c002187d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021875:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021878:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002187b:	31 c0                	xor    eax,eax
c002187d:	5b                   	pop    ebx
c002187e:	c3                   	ret    
c002187f:	90                   	nop

c0021880 <ISO9660::tell(void*, unsigned long long*)>:
c0021880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021888:	85 d2                	test   edx,edx
c002188a:	74 12                	je     c002189e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002188c:	85 c0                	test   eax,eax
c002188e:	74 0e                	je     c002189e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021890:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021893:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021896:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021899:	89 10                	mov    DWORD PTR [eax],edx
c002189b:	31 c0                	xor    eax,eax
c002189d:	c3                   	ret    
c002189e:	b8 04 00 00 00       	mov    eax,0x4
c00218a3:	c3                   	ret    

c00218a4 <ISO9660::getName()>:
c00218a4:	b8 d8 d1 02 c0       	mov    eax,0xc002d1d8
c00218a9:	c3                   	ret    

c00218aa <ISO9660::stat(void*, unsigned long long*)>:
c00218aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218b2:	85 d2                	test   edx,edx
c00218b4:	74 12                	je     c00218c8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00218b6:	85 c0                	test   eax,eax
c00218b8:	74 0e                	je     c00218c8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00218ba:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00218bd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00218c0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218c3:	89 10                	mov    DWORD PTR [eax],edx
c00218c5:	31 c0                	xor    eax,eax
c00218c7:	c3                   	ret    
c00218c8:	b8 04 00 00 00       	mov    eax,0x4
c00218cd:	c3                   	ret    

c00218ce <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00218ce:	b8 01 00 00 00       	mov    eax,0x1
c00218d3:	c3                   	ret    

c00218d4 <ISO9660::unlink(char const*)>:
c00218d4:	b8 01 00 00 00       	mov    eax,0x1
c00218d9:	c3                   	ret    

c00218da <ISO9660::write(void*, unsigned long, void*, int*)>:
c00218da:	b8 01 00 00 00       	mov    eax,0x1
c00218df:	c3                   	ret    

c00218e0 <ISO9660::rename(char const*, char const*)>:
c00218e0:	b8 01 00 00 00       	mov    eax,0x1
c00218e5:	c3                   	ret    

c00218e6 <ISO9660::mkdir(char const*)>:
c00218e6:	b8 01 00 00 00       	mov    eax,0x1
c00218eb:	c3                   	ret    

c00218ec <ISO9660::close(void*)>:
c00218ec:	83 ec 0c             	sub    esp,0xc
c00218ef:	b8 04 00 00 00       	mov    eax,0x4
c00218f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218f8:	85 d2                	test   edx,edx
c00218fa:	74 0e                	je     c002190a <ISO9660::close(void*)+0x1e>
c00218fc:	83 ec 0c             	sub    esp,0xc
c00218ff:	52                   	push   edx
c0021900:	e8 97 df fe ff       	call   c000f89c <free>
c0021905:	83 c4 10             	add    esp,0x10
c0021908:	31 c0                	xor    eax,eax
c002190a:	83 c4 0c             	add    esp,0xc
c002190d:	c3                   	ret    

c002190e <ISO9660::closeDir(void*)>:
c002190e:	83 ec 0c             	sub    esp,0xc
c0021911:	b8 04 00 00 00       	mov    eax,0x4
c0021916:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002191a:	85 d2                	test   edx,edx
c002191c:	74 0e                	je     c002192c <ISO9660::closeDir(void*)+0x1e>
c002191e:	83 ec 0c             	sub    esp,0xc
c0021921:	52                   	push   edx
c0021922:	e8 75 df fe ff       	call   c000f89c <free>
c0021927:	83 c4 10             	add    esp,0x10
c002192a:	31 c0                	xor    eax,eax
c002192c:	83 c4 0c             	add    esp,0xc
c002192f:	c3                   	ret    

c0021930 <ISO9660::~ISO9660()>:
c0021930:	83 ec 0c             	sub    esp,0xc
c0021933:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c0021938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193c:	89 10                	mov    DWORD PTR [eax],edx
c002193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021942:	83 ec 0c             	sub    esp,0xc
c0021945:	50                   	push   eax
c0021946:	e8 cf 12 ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c002194b:	83 c4 10             	add    esp,0x10
c002194e:	90                   	nop
c002194f:	83 c4 0c             	add    esp,0xc
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <ISO9660::~ISO9660()>:
c0021954:	83 ec 0c             	sub    esp,0xc
c0021957:	83 ec 0c             	sub    esp,0xc
c002195a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002195e:	e8 cd ff ff ff       	call   c0021930 <ISO9660::~ISO9660()>
c0021963:	83 c4 10             	add    esp,0x10
c0021966:	83 ec 08             	sub    esp,0x8
c0021969:	6a 08                	push   0x8
c002196b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002196f:	e8 97 0e ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0021974:	83 c4 10             	add    esp,0x10
c0021977:	83 c4 0c             	add    esp,0xc
c002197a:	c3                   	ret    

c002197b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002197b:	55                   	push   ebp
c002197c:	31 c9                	xor    ecx,ecx
c002197e:	57                   	push   edi
c002197f:	56                   	push   esi
c0021980:	53                   	push   ebx
c0021981:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021985:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021989:	89 eb                	mov    ebx,ebp
c002198b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002198f:	39 ce                	cmp    esi,ecx
c0021991:	7e 17                	jle    c00219aa <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021993:	31 d2                	xor    edx,edx
c0021995:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021999:	7d 13                	jge    c00219ae <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002199b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002199f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00219a2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00219a5:	75 0d                	jne    c00219b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00219a7:	42                   	inc    edx
c00219a8:	eb eb                	jmp    c0021995 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00219aa:	31 c0                	xor    eax,eax
c00219ac:	eb 0a                	jmp    c00219b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00219ae:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00219b2:	eb 04                	jmp    c00219b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00219b4:	41                   	inc    ecx
c00219b5:	43                   	inc    ebx
c00219b6:	eb d7                	jmp    c002198f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00219b8:	5b                   	pop    ebx
c00219b9:	5e                   	pop    esi
c00219ba:	5f                   	pop    edi
c00219bb:	5d                   	pop    ebp
c00219bc:	c3                   	ret    

c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00219bd:	57                   	push   edi
c00219be:	56                   	push   esi
c00219bf:	53                   	push   ebx
c00219c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219c8:	39 0d 40 27 03 c0    	cmp    DWORD PTR ds:0xc0032740,ecx
c00219ce:	75 08                	jne    c00219d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00219d0:	38 05 b4 e5 02 c0    	cmp    BYTE PTR ds:0xc002e5b4,al
c00219d6:	74 2b                	je     c0021a03 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00219d8:	83 ec 0c             	sub    esp,0xc
c00219db:	a2 b4 e5 02 c0       	mov    ds:0xc002e5b4,al
c00219e0:	68 60 27 03 c0       	push   0xc0032760
c00219e5:	0f be c0             	movsx  eax,al
c00219e8:	6a 01                	push   0x1
c00219ea:	89 0d 40 27 03 c0    	mov    DWORD PTR ds:0xc0032740,ecx
c00219f0:	31 db                	xor    ebx,ebx
c00219f2:	53                   	push   ebx
c00219f3:	51                   	push   ecx
c00219f4:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c00219fb:	e8 68 48 ff ff       	call   c0016268 <LogicalDisk::read(unsigned long long, int, void*)>
c0021a00:	83 c4 20             	add    esp,0x20
c0021a03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021a07:	be 60 27 03 c0       	mov    esi,0xc0032760
c0021a0c:	b9 00 08 00 00       	mov    ecx,0x800
c0021a11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a13:	5b                   	pop    ebx
c0021a14:	5e                   	pop    esi
c0021a15:	5f                   	pop    edi
c0021a16:	c3                   	ret    
c0021a17:	90                   	nop

c0021a18 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a18:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a1e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a25:	83 c0 41             	add    eax,0x41
c0021a28:	0f be c0             	movsx  eax,al
c0021a2b:	50                   	push   eax
c0021a2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a30:	50                   	push   eax
c0021a31:	6a 10                	push   0x10
c0021a33:	e8 85 ff ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	31 c0                	xor    eax,eax
c0021a3d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a42:	75 1d                	jne    c0021a61 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a44:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a49:	75 16                	jne    c0021a61 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a4b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a50:	75 0f                	jne    c0021a61 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a52:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a57:	75 08                	jne    c0021a61 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a59:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a5e:	0f 94 c0             	sete   al
c0021a61:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a67:	c3                   	ret    

c0021a68 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a68:	55                   	push   ebp
c0021a69:	57                   	push   edi
c0021a6a:	56                   	push   esi
c0021a6b:	53                   	push   ebx
c0021a6c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a72:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a79:	85 ed                	test   ebp,ebp
c0021a7b:	0f 84 da 01 00 00    	je     c0021c5b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a81:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a89:	0f 84 cc 01 00 00    	je     c0021c5b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a8f:	b8 01 00 00 00       	mov    eax,0x1
c0021a94:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a98:	0f 85 c2 01 00 00    	jne    c0021c60 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a9e:	31 d2                	xor    edx,edx
c0021aa0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021aa7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021aaa:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021aad:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ab3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ab7:	01 c8                	add    eax,ecx
c0021ab9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021abc:	11 da                	adc    edx,ebx
c0021abe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021ac2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ac6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021aca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ace:	19 d7                	sbb    edi,edx
c0021ad0:	72 11                	jb     c0021ae3 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021ad2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ad5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021ad9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021add:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ae1:	eb 0c                	jmp    c0021aef <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021ae3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021ae7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aeb:	29 ce                	sub    esi,ecx
c0021aed:	19 df                	sbb    edi,ebx
c0021aef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021af2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021af5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021af9:	c1 e0 0b             	shl    eax,0xb
c0021afc:	01 c8                	add    eax,ecx
c0021afe:	11 da                	adc    edx,ebx
c0021b00:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b07:	51                   	push   ecx
c0021b08:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b0c:	50                   	push   eax
c0021b0d:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021b11:	53                   	push   ebx
c0021b12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b1a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b1e:	50                   	push   eax
c0021b1f:	e8 99 fe ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b24:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b27:	b8 00 08 00 00       	mov    eax,0x800
c0021b2c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021b32:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021b36:	29 d0                	sub    eax,edx
c0021b38:	83 c4 10             	add    esp,0x10
c0021b3b:	89 f9                	mov    ecx,edi
c0021b3d:	39 c6                	cmp    esi,eax
c0021b3f:	83 d9 00             	sbb    ecx,0x0
c0021b42:	7d 1b                	jge    c0021b5f <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021b44:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021b49:	75 12                	jne    c0021b5d <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021b4b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b58:	e9 fa 00 00 00       	jmp    c0021c57 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b5d:	89 f0                	mov    eax,esi
c0021b5f:	01 d3                	add    ebx,edx
c0021b61:	31 d2                	xor    edx,edx
c0021b63:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021b67:	39 c2                	cmp    edx,eax
c0021b69:	7d 14                	jge    c0021b7f <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021b6b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b72:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b76:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b79:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b7c:	42                   	inc    edx
c0021b7d:	eb e8                	jmp    c0021b67 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b7f:	89 c2                	mov    edx,eax
c0021b81:	85 c0                	test   eax,eax
c0021b83:	79 02                	jns    c0021b87 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b85:	31 d2                	xor    edx,edx
c0021b87:	01 c2                	add    edx,eax
c0021b89:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b8c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021b97:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021b9b:	99                   	cdq    
c0021b9c:	01 c1                	add    ecx,eax
c0021b9e:	11 d3                	adc    ebx,edx
c0021ba0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021ba4:	29 c6                	sub    esi,eax
c0021ba6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021baa:	19 d7                	sbb    edi,edx
c0021bac:	89 34 24             	mov    DWORD PTR [esp],esi
c0021baf:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021bb3:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021bb8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021bbb:	b8 00 00 00 00       	mov    eax,0x0
c0021bc0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bc4:	7d 43                	jge    c0021c09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021bc6:	52                   	push   edx
c0021bc7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bcb:	50                   	push   eax
c0021bcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bd8:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021bdc:	50                   	push   eax
c0021bdd:	e8 db fd ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021be2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021bea:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021bef:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021bf7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021bff:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021c04:	83 c4 10             	add    esp,0x10
c0021c07:	eb aa                	jmp    c0021bb3 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c0d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021c10:	74 2a                	je     c0021c3c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021c12:	50                   	push   eax
c0021c13:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c17:	50                   	push   eax
c0021c18:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021c1c:	56                   	push   esi
c0021c1d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021c21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021c25:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021c29:	51                   	push   ecx
c0021c2a:	e8 8e fd ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c2f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c39:	83 c4 10             	add    esp,0x10
c0021c3c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021c47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c4b:	89 18                	mov    DWORD PTR [eax],ebx
c0021c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c51:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c54:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c57:	31 c0                	xor    eax,eax
c0021c59:	eb 05                	jmp    c0021c60 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c5b:	b8 04 00 00 00       	mov    eax,0x4
c0021c60:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c66:	5b                   	pop    ebx
c0021c67:	5e                   	pop    esi
c0021c68:	5f                   	pop    edi
c0021c69:	5d                   	pop    ebp
c0021c6a:	c3                   	ret    
c0021c6b:	90                   	nop

c0021c6c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c6c:	55                   	push   ebp
c0021c6d:	57                   	push   edi
c0021c6e:	56                   	push   esi
c0021c6f:	53                   	push   ebx
c0021c70:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c76:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c7d:	85 ed                	test   ebp,ebp
c0021c7f:	0f 84 51 02 00 00    	je     c0021ed6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c85:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c8d:	0f 84 43 02 00 00    	je     c0021ed6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c96:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021c99:	75 0a                	jne    c0021ca5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c9b:	b8 07 00 00 00       	mov    eax,0x7
c0021ca0:	e9 36 02 00 00       	jmp    c0021edb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ca5:	50                   	push   eax
c0021ca6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021caa:	50                   	push   eax
c0021cab:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021cb2:	53                   	push   ebx
c0021cb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021cb6:	c1 e0 0b             	shl    eax,0xb
c0021cb9:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021cbc:	c1 e8 0b             	shr    eax,0xb
c0021cbf:	50                   	push   eax
c0021cc0:	e8 f8 fc ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021cc8:	83 c4 10             	add    esp,0x10
c0021ccb:	89 c1                	mov    ecx,eax
c0021ccd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021cd0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021cd6:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021cd9:	84 db                	test   bl,bl
c0021cdb:	0f 85 8b 00 00 00    	jne    c0021d6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021ce1:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021ce7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021cea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021cf0:	29 c6                	sub    esi,eax
c0021cf2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021cf6:	89 f3                	mov    ebx,esi
c0021cf8:	89 f1                	mov    ecx,esi
c0021cfa:	c1 fb 1f             	sar    ebx,0x1f
c0021cfd:	01 f0                	add    eax,esi
c0021cff:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021d02:	11 da                	adc    edx,ebx
c0021d04:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021d0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021d0e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021d11:	89 d8                	mov    eax,ebx
c0021d13:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021d17:	ba 00 00 00 00       	mov    edx,0x0
c0021d1c:	19 f8                	sbb    eax,edi
c0021d1e:	b8 00 00 00 00       	mov    eax,0x0
c0021d23:	73 08                	jae    c0021d2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021d25:	89 f0                	mov    eax,esi
c0021d27:	89 fa                	mov    edx,edi
c0021d29:	29 c8                	sub    eax,ecx
c0021d2b:	19 da                	sbb    edx,ebx
c0021d2d:	89 d7                	mov    edi,edx
c0021d2f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021d32:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021d35:	09 c7                	or     edi,eax
c0021d37:	0f 84 5e ff ff ff    	je     c0021c9b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021d3d:	57                   	push   edi
c0021d3e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d42:	50                   	push   eax
c0021d43:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d4a:	53                   	push   ebx
c0021d4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d4e:	c1 e0 0b             	shl    eax,0xb
c0021d51:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021d55:	c1 e8 0b             	shr    eax,0xb
c0021d58:	50                   	push   eax
c0021d59:	e8 5f fc ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d5e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d61:	83 c4 10             	add    esp,0x10
c0021d64:	25 ff 07 00 00       	and    eax,0x7ff
c0021d69:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d6c:	31 ff                	xor    edi,edi
c0021d6e:	56                   	push   esi
c0021d6f:	6a 28                	push   0x28
c0021d71:	6a 00                	push   0x0
c0021d73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d77:	50                   	push   eax
c0021d78:	e8 d3 e9 fd ff       	call   c0000750 <memset>
c0021d7d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d80:	25 ff 07 00 00       	and    eax,0x7ff
c0021d85:	89 c6                	mov    esi,eax
c0021d87:	83 c6 21             	add    esi,0x21
c0021d8a:	83 d7 00             	adc    edi,0x0
c0021d8d:	83 c4 10             	add    esp,0x10
c0021d90:	31 c9                	xor    ecx,ecx
c0021d92:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021d99:	83 f9 28             	cmp    ecx,0x28
c0021d9c:	88 04 24             	mov    BYTE PTR [esp],al
c0021d9f:	0f 94 c2             	sete   dl
c0021da2:	88 d0                	mov    al,dl
c0021da4:	ba ff 07 00 00       	mov    edx,0x7ff
c0021da9:	39 f2                	cmp    edx,esi
c0021dab:	ba 00 00 00 00       	mov    edx,0x0
c0021db0:	19 fa                	sbb    edx,edi
c0021db2:	0f 92 c2             	setb   dl
c0021db5:	09 c2                	or     edx,eax
c0021db7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021dbb:	0f 94 c0             	sete   al
c0021dbe:	08 d0                	or     al,dl
c0021dc0:	75 16                	jne    c0021dd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021dc2:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021dc6:	74 10                	je     c0021dd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021dc8:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021dcb:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021dcf:	41                   	inc    ecx
c0021dd0:	83 c6 01             	add    esi,0x1
c0021dd3:	83 d7 00             	adc    edi,0x0
c0021dd6:	eb ba                	jmp    c0021d92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021dd8:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021ddf:	83 ec 0c             	sub    esp,0xc
c0021de2:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021de6:	56                   	push   esi
c0021de7:	e8 80 e9 fd ff       	call   c000076c <strlen>
c0021dec:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021df3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021df7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021dff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e02:	5a                   	pop    edx
c0021e03:	25 ff 07 00 00       	and    eax,0x7ff
c0021e08:	59                   	pop    ecx
c0021e09:	01 f8                	add    eax,edi
c0021e0b:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021e11:	83 e0 02             	and    eax,0x2
c0021e14:	3c 01                	cmp    al,0x1
c0021e16:	19 c0                	sbb    eax,eax
c0021e18:	83 c0 02             	add    eax,0x2
c0021e1b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e1f:	56                   	push   esi
c0021e20:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021e24:	50                   	push   eax
c0021e25:	e8 e2 e9 fd ff       	call   c000080c <strcpy>
c0021e2a:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021e2e:	83 c4 10             	add    esp,0x10
c0021e31:	84 c0                	test   al,al
c0021e33:	75 21                	jne    c0021e56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021e35:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021e3d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e45:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e4d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e54:	eb 28                	jmp    c0021e7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e56:	fe c8                	dec    al
c0021e58:	75 24                	jne    c0021e7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e5a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e62:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e6a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e72:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e79:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e7e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e82:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e89:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e92:	0f b6 f3             	movzx  esi,bl
c0021e95:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021e9c:	31 db                	xor    ebx,ebx
c0021e9e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021ea4:	89 df                	mov    edi,ebx
c0021ea6:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eac:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021eaf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021eb2:	39 c6                	cmp    esi,eax
c0021eb4:	19 d7                	sbb    edi,edx
c0021eb6:	72 10                	jb     c0021ec8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021eb8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ebf:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021ec6:	eb 0a                	jmp    c0021ed2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021ec8:	29 f0                	sub    eax,esi
c0021eca:	19 da                	sbb    edx,ebx
c0021ecc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021ecf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021ed2:	31 c0                	xor    eax,eax
c0021ed4:	eb 05                	jmp    c0021edb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ed6:	b8 04 00 00 00       	mov    eax,0x4
c0021edb:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ee1:	5b                   	pop    ebx
c0021ee2:	5e                   	pop    esi
c0021ee3:	5f                   	pop    edi
c0021ee4:	5d                   	pop    ebp
c0021ee5:	c3                   	ret    

c0021ee6 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ee6:	57                   	push   edi
c0021ee7:	56                   	push   esi
c0021ee8:	81 ec 38 08 00 00    	sub    esp,0x838
c0021eee:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ef6:	50                   	push   eax
c0021ef7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021efb:	50                   	push   eax
c0021efc:	6a 10                	push   0x10
c0021efe:	e8 ba fa ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f03:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021f0a:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021f0e:	b9 22 00 00 00       	mov    ecx,0x22
c0021f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f15:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021f1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f20:	89 10                	mov    DWORD PTR [eax],edx
c0021f22:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021f29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f2d:	89 10                	mov    DWORD PTR [eax],edx
c0021f2f:	81 c4 44 08 00 00    	add    esp,0x844
c0021f35:	b0 01                	mov    al,0x1
c0021f37:	5e                   	pop    esi
c0021f38:	5f                   	pop    edi
c0021f39:	c3                   	ret    

c0021f3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021f3a:	55                   	push   ebp
c0021f3b:	57                   	push   edi
c0021f3c:	56                   	push   esi
c0021f3d:	53                   	push   ebx
c0021f3e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f44:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f4b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f56:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f5a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f62:	75 03                	jne    c0021f67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f64:	83 c3 02             	add    ebx,0x2
c0021f67:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f6a:	75 03                	jne    c0021f6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f6c:	43                   	inc    ebx
c0021f6d:	eb f8                	jmp    c0021f67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f6f:	51                   	push   ecx
c0021f70:	68 00 01 00 00       	push   0x100
c0021f75:	6a 00                	push   0x0
c0021f77:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f7b:	50                   	push   eax
c0021f7c:	e8 cf e7 fd ff       	call   c0000750 <memset>
c0021f81:	83 c4 10             	add    esp,0x10
c0021f84:	31 d2                	xor    edx,edx
c0021f86:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f89:	84 c0                	test   al,al
c0021f8b:	74 21                	je     c0021fae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f8d:	3c 2f                	cmp    al,0x2f
c0021f8f:	75 0b                	jne    c0021f9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f91:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f95:	bd 01 00 00 00       	mov    ebp,0x1
c0021f9a:	eb 14                	jmp    c0021fb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f9c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f9f:	80 f9 19             	cmp    cl,0x19
c0021fa2:	77 03                	ja     c0021fa7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fa4:	83 e8 20             	sub    eax,0x20
c0021fa7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021fab:	42                   	inc    edx
c0021fac:	eb d8                	jmp    c0021f86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021fae:	31 ed                	xor    ebp,ebp
c0021fb0:	83 ec 0c             	sub    esp,0xc
c0021fb3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021fba:	e8 cd d8 fe ff       	call   c000f88c <malloc>
c0021fbf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021fc6:	89 c6                	mov    esi,eax
c0021fc8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021fce:	c1 ef 0b             	shr    edi,0xb
c0021fd1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021fd8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021fdc:	83 c4 10             	add    esp,0x10
c0021fdf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fe8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021fef:	74 28                	je     c0022019 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ff1:	52                   	push   edx
c0021ff2:	57                   	push   edi
c0021ff3:	50                   	push   eax
c0021ff4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ff8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021fff:	e8 b9 f9 ff ff       	call   c00219bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022008:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002200f:	05 00 08 00 00       	add    eax,0x800
c0022014:	83 c4 10             	add    esp,0x10
c0022017:	eb cb                	jmp    c0021fe4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022019:	83 ec 0c             	sub    esp,0xc
c002201c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022020:	57                   	push   edi
c0022021:	e8 46 e7 fd ff       	call   c000076c <strlen>
c0022026:	50                   	push   eax
c0022027:	57                   	push   edi
c0022028:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002202f:	56                   	push   esi
c0022030:	e8 46 f9 ff ff       	call   c002197b <__memmem(unsigned char*, int, unsigned char*, int)>
c0022035:	83 c4 20             	add    esp,0x20
c0022038:	85 c0                	test   eax,eax
c002203a:	75 13                	jne    c002204f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002203c:	83 ec 0c             	sub    esp,0xc
c002203f:	56                   	push   esi
c0022040:	e8 57 d8 fe ff       	call   c000f89c <free>
c0022045:	83 c4 10             	add    esp,0x10
c0022048:	31 c0                	xor    eax,eax
c002204a:	e9 b3 00 00 00       	jmp    c0022102 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002204f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022053:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022057:	c1 e7 08             	shl    edi,0x8
c002205a:	c1 e2 10             	shl    edx,0x10
c002205d:	09 d7                	or     edi,edx
c002205f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022063:	09 d7                	or     edi,edx
c0022065:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022069:	c1 e2 18             	shl    edx,0x18
c002206c:	09 d7                	or     edi,edx
c002206e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022072:	89 d1                	mov    ecx,edx
c0022074:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022078:	c1 e1 08             	shl    ecx,0x8
c002207b:	c1 e2 10             	shl    edx,0x10
c002207e:	09 ca                	or     edx,ecx
c0022080:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022084:	09 ca                	or     edx,ecx
c0022086:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002208a:	c1 e1 18             	shl    ecx,0x18
c002208d:	09 ca                	or     edx,ecx
c002208f:	89 e9                	mov    ecx,ebp
c0022091:	84 c9                	test   cl,cl
c0022093:	74 3c                	je     c00220d1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022095:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022099:	83 ec 0c             	sub    esp,0xc
c002209c:	56                   	push   esi
c002209d:	e8 fa d7 fe ff       	call   c000f89c <free>
c00220a2:	83 c4 0c             	add    esp,0xc
c00220a5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220ac:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00220b1:	50                   	push   eax
c00220b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220b9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220c4:	52                   	push   edx
c00220c5:	57                   	push   edi
c00220c6:	53                   	push   ebx
c00220c7:	e8 6e fe ff ff       	call   c0021f3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220cc:	83 c4 20             	add    esp,0x20
c00220cf:	eb 31                	jmp    c0022102 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220d1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00220d4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00220db:	d0 e8                	shr    al,1
c00220dd:	89 3b                	mov    DWORD PTR [ebx],edi
c00220df:	83 e0 01             	and    eax,0x1
c00220e2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220e9:	83 ec 0c             	sub    esp,0xc
c00220ec:	89 13                	mov    DWORD PTR [ebx],edx
c00220ee:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00220f5:	89 03                	mov    DWORD PTR [ebx],eax
c00220f7:	56                   	push   esi
c00220f8:	e8 9f d7 fe ff       	call   c000f89c <free>
c00220fd:	83 c4 10             	add    esp,0x10
c0022100:	b0 01                	mov    al,0x1
c0022102:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022108:	5b                   	pop    ebx
c0022109:	5e                   	pop    esi
c002210a:	5f                   	pop    edi
c002210b:	5d                   	pop    ebp
c002210c:	c3                   	ret    

c002210d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002210d:	55                   	push   ebp
c002210e:	57                   	push   edi
c002210f:	56                   	push   esi
c0022110:	53                   	push   ebx
c0022111:	83 ec 20             	sub    esp,0x20
c0022114:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022118:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002211c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022120:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022128:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022130:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022135:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002213b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022141:	57                   	push   edi
c0022142:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022146:	50                   	push   eax
c0022147:	8d 44 24 14          	lea    eax,[esp+0x14]
c002214b:	50                   	push   eax
c002214c:	e8 95 fd ff ff       	call   c0021ee6 <readRoot(unsigned int*, unsigned int*, char)>
c0022151:	5a                   	pop    edx
c0022152:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022156:	e8 11 e6 fd ff       	call   c000076c <strlen>
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	83 f8 03             	cmp    eax,0x3
c0022161:	77 17                	ja     c002217a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022163:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022167:	89 03                	mov    DWORD PTR [ebx],eax
c0022169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002216d:	89 06                	mov    DWORD PTR [esi],eax
c002216f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022176:	b0 01                	mov    al,0x1
c0022178:	eb 19                	jmp    c0022193 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002217a:	50                   	push   eax
c002217b:	55                   	push   ebp
c002217c:	57                   	push   edi
c002217d:	56                   	push   esi
c002217e:	53                   	push   ebx
c002217f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022183:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022187:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002218b:	e8 aa fd ff ff       	call   c0021f3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022190:	83 c4 20             	add    esp,0x20
c0022193:	83 c4 1c             	add    esp,0x1c
c0022196:	5b                   	pop    ebx
c0022197:	5e                   	pop    esi
c0022198:	5f                   	pop    edi
c0022199:	5d                   	pop    ebp
c002219a:	c3                   	ret    
c002219b:	90                   	nop

c002219c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002219c:	57                   	push   edi
c002219d:	56                   	push   esi
c002219e:	53                   	push   ebx
c002219f:	83 ec 10             	sub    esp,0x10
c00221a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221aa:	85 ff                	test   edi,edi
c00221ac:	0f 84 9d 00 00 00    	je     c002224f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00221b2:	85 f6                	test   esi,esi
c00221b4:	0f 84 95 00 00 00    	je     c002224f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00221ba:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00221bf:	74 17                	je     c00221d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00221c1:	83 ec 0c             	sub    esp,0xc
c00221c4:	68 f3 d1 02 c0       	push   0xc002d1f3
c00221c9:	e8 1d 07 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	b8 03 00 00 00       	mov    eax,0x3
c00221d6:	eb 7c                	jmp    c0022254 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221d8:	83 ec 0c             	sub    esp,0xc
c00221db:	6a 1c                	push   0x1c
c00221dd:	e8 aa d6 fe ff       	call   c000f88c <malloc>
c00221e2:	89 07                	mov    DWORD PTR [edi],eax
c00221e4:	89 c3                	mov    ebx,eax
c00221e6:	58                   	pop    eax
c00221e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221eb:	50                   	push   eax
c00221ec:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221ef:	50                   	push   eax
c00221f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221f4:	50                   	push   eax
c00221f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221f9:	50                   	push   eax
c00221fa:	56                   	push   esi
c00221fb:	e8 0d ff ff ff       	call   c002210d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022200:	83 c4 20             	add    esp,0x20
c0022203:	84 c0                	test   al,al
c0022205:	74 07                	je     c002220e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022207:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002220c:	74 0b                	je     c0022219 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002220e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022212:	b8 01 00 00 00       	mov    eax,0x1
c0022217:	eb 3b                	jmp    c0022254 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022219:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022221:	89 03                	mov    DWORD PTR [ebx],eax
c0022223:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002222a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002222e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022235:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002223c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002223f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022246:	8a 06                	mov    al,BYTE PTR [esi]
c0022248:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002224b:	31 c0                	xor    eax,eax
c002224d:	eb 05                	jmp    c0022254 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002224f:	b8 04 00 00 00       	mov    eax,0x4
c0022254:	83 c4 10             	add    esp,0x10
c0022257:	5b                   	pop    ebx
c0022258:	5e                   	pop    esi
c0022259:	5f                   	pop    edi
c002225a:	c3                   	ret    
c002225b:	90                   	nop

c002225c <ISO9660::exists(char const*)>:
c002225c:	83 ec 28             	sub    esp,0x28
c002225f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022263:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022267:	52                   	push   edx
c0022268:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002226b:	52                   	push   edx
c002226c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022270:	52                   	push   edx
c0022271:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022275:	52                   	push   edx
c0022276:	50                   	push   eax
c0022277:	e8 91 fe ff ff       	call   c002210d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002227c:	83 c4 3c             	add    esp,0x3c
c002227f:	c3                   	ret    

c0022280 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022280:	56                   	push   esi
c0022281:	53                   	push   ebx
c0022282:	83 ec 14             	sub    esp,0x14
c0022285:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022289:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002228d:	85 db                	test   ebx,ebx
c002228f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022293:	0f 94 c2             	sete   dl
c0022296:	85 f6                	test   esi,esi
c0022298:	0f 94 c0             	sete   al
c002229b:	08 c2                	or     dl,al
c002229d:	75 68                	jne    c0022307 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002229f:	85 c9                	test   ecx,ecx
c00222a1:	74 64                	je     c0022307 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00222a3:	83 ec 0c             	sub    esp,0xc
c00222a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00222ad:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222ba:	50                   	push   eax
c00222bb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00222be:	50                   	push   eax
c00222bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222c3:	50                   	push   eax
c00222c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222c8:	50                   	push   eax
c00222c9:	51                   	push   ecx
c00222ca:	e8 3e fe ff ff       	call   c002210d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222cf:	83 c4 20             	add    esp,0x20
c00222d2:	ba 01 00 00 00       	mov    edx,0x1
c00222d7:	84 c0                	test   al,al
c00222d9:	74 31                	je     c002230c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222e6:	89 03                	mov    DWORD PTR [ebx],eax
c00222e8:	ba 00 00 00 00       	mov    edx,0x0
c00222ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222f1:	85 c0                	test   eax,eax
c00222f3:	0f 95 06             	setne  BYTE PTR [esi]
c00222f6:	74 14                	je     c002230c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222fe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022305:	eb 05                	jmp    c002230c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022307:	ba 04 00 00 00       	mov    edx,0x4
c002230c:	83 c4 14             	add    esp,0x14
c002230f:	89 d0                	mov    eax,edx
c0022311:	5b                   	pop    ebx
c0022312:	5e                   	pop    esi
c0022313:	c3                   	ret    

c0022314 <ISO9660::openDir(char const*, void**)>:
c0022314:	57                   	push   edi
c0022315:	56                   	push   esi
c0022316:	53                   	push   ebx
c0022317:	83 ec 10             	sub    esp,0x10
c002231a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002231e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022322:	85 ff                	test   edi,edi
c0022324:	0f 84 95 00 00 00    	je     c00223bf <ISO9660::openDir(char const*, void**)+0xab>
c002232a:	85 f6                	test   esi,esi
c002232c:	0f 84 8d 00 00 00    	je     c00223bf <ISO9660::openDir(char const*, void**)+0xab>
c0022332:	83 ec 0c             	sub    esp,0xc
c0022335:	6a 1c                	push   0x1c
c0022337:	e8 50 d5 fe ff       	call   c000f88c <malloc>
c002233c:	89 07                	mov    DWORD PTR [edi],eax
c002233e:	89 c3                	mov    ebx,eax
c0022340:	59                   	pop    ecx
c0022341:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022345:	50                   	push   eax
c0022346:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022349:	50                   	push   eax
c002234a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002234e:	50                   	push   eax
c002234f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022353:	50                   	push   eax
c0022354:	56                   	push   esi
c0022355:	e8 b3 fd ff ff       	call   c002210d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002235a:	83 c4 20             	add    esp,0x20
c002235d:	84 c0                	test   al,al
c002235f:	74 07                	je     c0022368 <ISO9660::openDir(char const*, void**)+0x54>
c0022361:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022366:	75 21                	jne    c0022389 <ISO9660::openDir(char const*, void**)+0x75>
c0022368:	0f b6 c0             	movzx  eax,al
c002236b:	52                   	push   edx
c002236c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022370:	50                   	push   eax
c0022371:	68 19 d2 02 c0       	push   0xc002d219
c0022376:	e8 70 05 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002237b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002237f:	83 c4 10             	add    esp,0x10
c0022382:	b8 01 00 00 00       	mov    eax,0x1
c0022387:	eb 3b                	jmp    c00223c4 <ISO9660::openDir(char const*, void**)+0xb0>
c0022389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022391:	89 03                	mov    DWORD PTR [ebx],eax
c0022393:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002239a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002239e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00223a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00223ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00223af:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00223b6:	8a 06                	mov    al,BYTE PTR [esi]
c00223b8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00223bb:	31 c0                	xor    eax,eax
c00223bd:	eb 05                	jmp    c00223c4 <ISO9660::openDir(char const*, void**)+0xb0>
c00223bf:	b8 04 00 00 00       	mov    eax,0x4
c00223c4:	83 c4 10             	add    esp,0x10
c00223c7:	5b                   	pop    ebx
c00223c8:	5e                   	pop    esi
c00223c9:	5f                   	pop    edi
c00223ca:	c3                   	ret    
c00223cb:	90                   	nop

c00223cc <ISO9660::ISO9660()>:
c00223cc:	83 ec 0c             	sub    esp,0xc
c00223cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d3:	83 ec 0c             	sub    esp,0xc
c00223d6:	50                   	push   eax
c00223d7:	e8 1a 08 ff ff       	call   c0012bf6 <Filesystem::Filesystem()>
c00223dc:	83 c4 10             	add    esp,0x10
c00223df:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c00223e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e8:	89 10                	mov    DWORD PTR [eax],edx
c00223ea:	90                   	nop
c00223eb:	83 c4 0c             	add    esp,0xc
c00223ee:	c3                   	ret    
c00223ef:	90                   	nop

c00223f0 <SoundChannel::SoundChannel(int, int, int, int)>:
c00223f0:	83 ec 1c             	sub    esp,0x1c
c00223f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223fb:	89 10                	mov    DWORD PTR [eax],edx
c00223fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022401:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022410:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022413:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022418:	75 23                	jne    c002243d <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c002241a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022427:	0f af c2             	imul   eax,edx
c002242a:	85 c0                	test   eax,eax
c002242c:	79 03                	jns    c0022431 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c002242e:	83 c0 03             	add    eax,0x3
c0022431:	c1 f8 02             	sar    eax,0x2
c0022434:	05 a0 0f 00 00       	add    eax,0xfa0
c0022439:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002243d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022441:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022445:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022457:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002245e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022462:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022465:	c1 e0 02             	shl    eax,0x2
c0022468:	83 ec 0c             	sub    esp,0xc
c002246b:	50                   	push   eax
c002246c:	e8 1b d4 fe ff       	call   c000f88c <malloc>
c0022471:	83 c4 10             	add    esp,0x10
c0022474:	89 c2                	mov    edx,eax
c0022476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002247a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002247d:	83 ec 04             	sub    esp,0x4
c0022480:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022484:	50                   	push   eax
c0022485:	6a 01                	push   0x1
c0022487:	6a 04                	push   0x4
c0022489:	e8 d7 66 fe ff       	call   c0008b65 <src_new>
c002248e:	83 c4 10             	add    esp,0x10
c0022491:	89 c2                	mov    edx,eax
c0022493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022497:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002249a:	83 ec 0c             	sub    esp,0xc
c002249d:	68 9c d2 02 c0       	push   0xc002d29c
c00224a2:	e8 44 04 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ae:	85 c0                	test   eax,eax
c00224b0:	74 10                	je     c00224c2 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c00224b2:	83 ec 0c             	sub    esp,0xc
c00224b5:	68 b2 d2 02 c0       	push   0xc002d2b2
c00224ba:	e8 62 7e ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00224bf:	83 c4 10             	add    esp,0x10
c00224c2:	a0 60 33 03 c0       	mov    al,ds:0xc0033360
c00224c7:	83 f0 01             	xor    eax,0x1
c00224ca:	84 c0                	test   al,al
c00224cc:	74 57                	je     c0022525 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00224ce:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00224d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224df:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224e7:	7f 35                	jg     c002251e <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00224e9:	83 ec 0c             	sub    esp,0xc
c00224ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224f0:	e8 4a 56 00 00       	call   c0027b3f <__floatsisf>
c00224f5:	83 c4 10             	add    esp,0x10
c00224f8:	8b 15 cc d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2cc
c00224fe:	83 ec 08             	sub    esp,0x8
c0022501:	52                   	push   edx
c0022502:	50                   	push   eax
c0022503:	e8 49 52 00 00       	call   c0027751 <__mulsf3>
c0022508:	83 c4 10             	add    esp,0x10
c002250b:	89 c2                	mov    edx,eax
c002250d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022511:	89 14 85 60 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd0a0],edx
c0022518:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002251c:	eb c1                	jmp    c00224df <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c002251e:	c6 05 60 33 03 c0 01 	mov    BYTE PTR ds:0xc0033360,0x1
c0022525:	90                   	nop
c0022526:	83 c4 1c             	add    esp,0x1c
c0022529:	c3                   	ret    

c002252a <SoundChannel::~SoundChannel()>:
c002252a:	83 ec 0c             	sub    esp,0xc
c002252d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022531:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022534:	83 ec 0c             	sub    esp,0xc
c0022537:	50                   	push   eax
c0022538:	e8 5f d3 fe ff       	call   c000f89c <free>
c002253d:	83 c4 10             	add    esp,0x10
c0022540:	90                   	nop
c0022541:	83 c4 0c             	add    esp,0xc
c0022544:	c3                   	ret    
c0022545:	90                   	nop

c0022546 <SoundChannel::getSampleRate()>:
c0022546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002254a:	8b 00                	mov    eax,DWORD PTR [eax]
c002254c:	c3                   	ret    
c002254d:	90                   	nop

c002254e <SoundChannel::getBits()>:
c002254e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022555:	c3                   	ret    

c0022556 <SoundChannel::getBufferUsed()>:
c0022556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002255a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002255d:	c3                   	ret    

c002255e <SoundChannel::getBufferSize()>:
c002255e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022562:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022565:	c3                   	ret    

c0022566 <SoundChannel::unbuffer(float*, int, int)>:
c0022566:	56                   	push   esi
c0022567:	53                   	push   ebx
c0022568:	83 ec 40             	sub    esp,0x40
c002256b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002256f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022576:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022579:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002257d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022581:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022585:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022589:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002258d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022591:	e8 a9 55 00 00       	call   c0027b3f <__floatsisf>
c0022596:	5a                   	pop    edx
c0022597:	89 c6                	mov    esi,eax
c0022599:	ff 33                	push   DWORD PTR [ebx]
c002259b:	e8 9f 55 00 00       	call   c0027b3f <__floatsisf>
c00225a0:	59                   	pop    ecx
c00225a1:	5a                   	pop    edx
c00225a2:	50                   	push   eax
c00225a3:	56                   	push   esi
c00225a4:	e8 6b 53 00 00       	call   c0027914 <__divsf3>
c00225a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00225ac:	e8 5e 68 00 00       	call   c0028e0f <__extendsfdf2>
c00225b1:	59                   	pop    ecx
c00225b2:	5e                   	pop    esi
c00225b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00225b7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00225bb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225c7:	50                   	push   eax
c00225c8:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00225cb:	e8 8a 61 fe ff       	call   c000875a <src_process>
c00225d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225d4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00225d7:	83 c4 0c             	add    esp,0xc
c00225da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225dd:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225e0:	29 d0                	sub    eax,edx
c00225e2:	c1 e0 02             	shl    eax,0x2
c00225e5:	50                   	push   eax
c00225e6:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225e9:	50                   	push   eax
c00225ea:	51                   	push   ecx
c00225eb:	e8 98 e0 fd ff       	call   c0000688 <memmove>
c00225f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225f4:	83 c4 44             	add    esp,0x44
c00225f7:	5b                   	pop    ebx
c00225f8:	5e                   	pop    esi
c00225f9:	c3                   	ret    

c00225fa <SoundChannel::buffer16(short*, int)>:
c00225fa:	55                   	push   ebp
c00225fb:	57                   	push   edi
c00225fc:	56                   	push   esi
c00225fd:	53                   	push   ebx
c00225fe:	83 ec 1c             	sub    esp,0x1c
c0022601:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022605:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022608:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002260b:	0f 84 d2 00 00 00    	je     c00226e3 <SoundChannel::buffer16(short*, int)+0xe9>
c0022611:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022615:	85 ed                	test   ebp,ebp
c0022617:	0f 8e c6 00 00 00    	jle    c00226e3 <SoundChannel::buffer16(short*, int)+0xe9>
c002261d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022621:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022626:	83 ec 0c             	sub    esp,0xc
c0022629:	0f bf 00             	movsx  eax,WORD PTR [eax]
c002262c:	50                   	push   eax
c002262d:	e8 0d 55 00 00       	call   c0027b3f <__floatsisf>
c0022632:	59                   	pop    ecx
c0022633:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022636:	5f                   	pop    edi
c0022637:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002263a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002263d:	55                   	push   ebp
c002263e:	50                   	push   eax
c002263f:	e8 0d 51 00 00       	call   c0027751 <__mulsf3>
c0022644:	83 c4 10             	add    esp,0x10
c0022647:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002264a:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002264d:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022650:	0f 84 99 00 00 00    	je     c00226ef <SoundChannel::buffer16(short*, int)+0xf5>
c0022656:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002265b:	74 78                	je     c00226d5 <SoundChannel::buffer16(short*, int)+0xdb>
c002265d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022661:	83 ec 0c             	sub    esp,0xc
c0022664:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022668:	50                   	push   eax
c0022669:	e8 d1 54 00 00       	call   c0027b3f <__floatsisf>
c002266e:	5f                   	pop    edi
c002266f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022672:	5a                   	pop    edx
c0022673:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022676:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022679:	55                   	push   ebp
c002267a:	50                   	push   eax
c002267b:	e8 d1 50 00 00       	call   c0027751 <__mulsf3>
c0022680:	83 c4 10             	add    esp,0x10
c0022683:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022686:	be 02 00 00 00       	mov    esi,0x2
c002268b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002268e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022691:	74 46                	je     c00226d9 <SoundChannel::buffer16(short*, int)+0xdf>
c0022693:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022697:	eb 36                	jmp    c00226cf <SoundChannel::buffer16(short*, int)+0xd5>
c0022699:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002269d:	83 ec 0c             	sub    esp,0xc
c00226a0:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c00226a4:	46                   	inc    esi
c00226a5:	50                   	push   eax
c00226a6:	e8 94 54 00 00       	call   c0027b3f <__floatsisf>
c00226ab:	5a                   	pop    edx
c00226ac:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00226af:	59                   	pop    ecx
c00226b0:	8d 4f 01             	lea    ecx,[edi+0x1]
c00226b3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00226b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ba:	50                   	push   eax
c00226bb:	e8 91 50 00 00       	call   c0027751 <__mulsf3>
c00226c0:	83 c4 10             	add    esp,0x10
c00226c3:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00226c7:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00226ca:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00226cd:	74 0a                	je     c00226d9 <SoundChannel::buffer16(short*, int)+0xdf>
c00226cf:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00226d3:	75 c4                	jne    c0022699 <SoundChannel::buffer16(short*, int)+0x9f>
c00226d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00226d9:	83 c4 1c             	add    esp,0x1c
c00226dc:	89 f0                	mov    eax,esi
c00226de:	5b                   	pop    ebx
c00226df:	5e                   	pop    esi
c00226e0:	5f                   	pop    edi
c00226e1:	5d                   	pop    ebp
c00226e2:	c3                   	ret    
c00226e3:	83 c4 1c             	add    esp,0x1c
c00226e6:	31 f6                	xor    esi,esi
c00226e8:	5b                   	pop    ebx
c00226e9:	89 f0                	mov    eax,esi
c00226eb:	5e                   	pop    esi
c00226ec:	5f                   	pop    edi
c00226ed:	5d                   	pop    ebp
c00226ee:	c3                   	ret    
c00226ef:	be 01 00 00 00       	mov    esi,0x1
c00226f4:	eb e3                	jmp    c00226d9 <SoundChannel::buffer16(short*, int)+0xdf>

c00226f6 <SoundChannel::buffer8(unsigned char*, int)>:
c00226f6:	55                   	push   ebp
c00226f7:	57                   	push   edi
c00226f8:	56                   	push   esi
c00226f9:	53                   	push   ebx
c00226fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00226fe:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022702:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022705:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022709:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002270c:	74 7a                	je     c0022788 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002270e:	85 ff                	test   edi,edi
c0022710:	7e 76                	jle    c0022788 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022712:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022716:	8d 70 01             	lea    esi,[eax+0x1]
c0022719:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002271c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002271f:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c0022726:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022729:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002272c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002272f:	74 5e                	je     c002278f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022731:	83 ff 01             	cmp    edi,0x1
c0022734:	74 4b                	je     c0022781 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022736:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002273a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002273d:	8d 70 01             	lea    esi,[eax+0x1]
c0022740:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022743:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c002274a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002274d:	b8 02 00 00 00       	mov    eax,0x2
c0022752:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022755:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022758:	75 23                	jne    c002277d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002275a:	eb 27                	jmp    c0022783 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002275c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022761:	8d 71 01             	lea    esi,[ecx+0x1]
c0022764:	40                   	inc    eax
c0022765:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022768:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002276b:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c0022772:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022775:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022778:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002277b:	74 06                	je     c0022783 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002277d:	39 c7                	cmp    edi,eax
c002277f:	75 db                	jne    c002275c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022781:	89 f8                	mov    eax,edi
c0022783:	5b                   	pop    ebx
c0022784:	5e                   	pop    esi
c0022785:	5f                   	pop    edi
c0022786:	5d                   	pop    ebp
c0022787:	c3                   	ret    
c0022788:	5b                   	pop    ebx
c0022789:	31 c0                	xor    eax,eax
c002278b:	5e                   	pop    esi
c002278c:	5f                   	pop    edi
c002278d:	5d                   	pop    ebp
c002278e:	c3                   	ret    
c002278f:	b8 01 00 00 00       	mov    eax,0x1
c0022794:	eb ed                	jmp    c0022783 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022796 <SoundDevice::SoundDevice(char const*)>:
c0022796:	83 ec 1c             	sub    esp,0x1c
c0022799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279d:	83 ec 08             	sub    esp,0x8
c00227a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227a4:	50                   	push   eax
c00227a5:	e8 7e 17 ff ff       	call   c0013f28 <Device::Device(char const*)>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c00227b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227b6:	89 10                	mov    DWORD PTR [eax],edx
c00227b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227bc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227dc:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227e1:	7f 19                	jg     c00227fc <SoundDevice::SoundDevice(char const*)+0x66>
c00227e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227eb:	83 c2 54             	add    edx,0x54
c00227ee:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00227f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227fa:	eb e0                	jmp    c00227dc <SoundDevice::SoundDevice(char const*)+0x46>
c00227fc:	90                   	nop
c00227fd:	83 c4 1c             	add    esp,0x1c
c0022800:	c3                   	ret    
c0022801:	90                   	nop

c0022802 <SoundDevice::~SoundDevice()>:
c0022802:	53                   	push   ebx
c0022803:	83 ec 18             	sub    esp,0x18
c0022806:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c002280b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002280f:	89 10                	mov    DWORD PTR [eax],edx
c0022811:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022819:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002281e:	7f 46                	jg     c0022866 <SoundDevice::~SoundDevice()+0x64>
c0022820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022828:	83 c2 54             	add    edx,0x54
c002282b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002282f:	85 c0                	test   eax,eax
c0022831:	74 2d                	je     c0022860 <SoundDevice::~SoundDevice()+0x5e>
c0022833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002283b:	83 c2 54             	add    edx,0x54
c002283e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022842:	85 db                	test   ebx,ebx
c0022844:	74 1a                	je     c0022860 <SoundDevice::~SoundDevice()+0x5e>
c0022846:	83 ec 0c             	sub    esp,0xc
c0022849:	53                   	push   ebx
c002284a:	e8 db fc ff ff       	call   c002252a <SoundChannel::~SoundChannel()>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	83 ec 08             	sub    esp,0x8
c0022855:	6a 2c                	push   0x2c
c0022857:	53                   	push   ebx
c0022858:	e8 ae ff fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002285d:	83 c4 10             	add    esp,0x10
c0022860:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022864:	eb b3                	jmp    c0022819 <SoundDevice::~SoundDevice()+0x17>
c0022866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002286a:	83 ec 0c             	sub    esp,0xc
c002286d:	50                   	push   eax
c002286e:	e8 7f 13 ff ff       	call   c0013bf2 <Device::~Device()>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	90                   	nop
c0022877:	83 c4 18             	add    esp,0x18
c002287a:	5b                   	pop    ebx
c002287b:	c3                   	ret    

c002287c <SoundDevice::~SoundDevice()>:
c002287c:	83 ec 0c             	sub    esp,0xc
c002287f:	83 ec 0c             	sub    esp,0xc
c0022882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022886:	e8 77 ff ff ff       	call   c0022802 <SoundDevice::~SoundDevice()>
c002288b:	83 c4 10             	add    esp,0x10
c002288e:	83 ec 08             	sub    esp,0x8
c0022891:	68 e4 01 00 00       	push   0x1e4
c0022896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002289a:	e8 6c ff fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002289f:	83 c4 10             	add    esp,0x10
c00228a2:	83 c4 0c             	add    esp,0xc
c00228a5:	c3                   	ret    

c00228a6 <SoundDevice::getFreeChannelNum()>:
c00228a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228aa:	31 c0                	xor    eax,eax
c00228ac:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00228b4:	74 09                	je     c00228bf <SoundDevice::getFreeChannelNum()+0x19>
c00228b6:	40                   	inc    eax
c00228b7:	83 f8 20             	cmp    eax,0x20
c00228ba:	75 f0                	jne    c00228ac <SoundDevice::getFreeChannelNum()+0x6>
c00228bc:	83 c8 ff             	or     eax,0xffffffff
c00228bf:	c3                   	ret    

c00228c0 <SoundDevice::addChannel(SoundChannel*)>:
c00228c0:	56                   	push   esi
c00228c1:	53                   	push   ebx
c00228c2:	51                   	push   ecx
c00228c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228cb:	53                   	push   ebx
c00228cc:	e8 d5 ff ff ff       	call   c00228a6 <SoundDevice::getFreeChannelNum()>
c00228d1:	5a                   	pop    edx
c00228d2:	83 f8 ff             	cmp    eax,0xffffffff
c00228d5:	74 51                	je     c0022928 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228d7:	85 f6                	test   esi,esi
c00228d9:	74 4d                	je     c0022928 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228db:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228e2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228e9:	75 30                	jne    c002291b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228eb:	83 ec 0c             	sub    esp,0xc
c00228ee:	56                   	push   esi
c00228ef:	e8 52 fc ff ff       	call   c0022546 <SoundChannel::getSampleRate()>
c00228f4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00228fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00228fd:	e8 4c fc ff ff       	call   c002254e <SoundChannel::getBits()>
c0022902:	83 c4 0c             	add    esp,0xc
c0022905:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002290b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002290d:	50                   	push   eax
c002290e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022914:	53                   	push   ebx
c0022915:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022918:	83 c4 10             	add    esp,0x10
c002291b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022921:	b8 01 00 00 00       	mov    eax,0x1
c0022926:	eb 03                	jmp    c002292b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022928:	83 c8 ff             	or     eax,0xffffffff
c002292b:	5a                   	pop    edx
c002292c:	5b                   	pop    ebx
c002292d:	5e                   	pop    esi
c002292e:	c3                   	ret    
c002292f:	90                   	nop

c0022930 <SoundDevice::removeChannel(int)>:
c0022930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022938:	83 fa 1f             	cmp    edx,0x1f
c002293b:	77 23                	ja     c0022960 <SoundDevice::removeChannel(int)+0x30>
c002293d:	8d 14 90             	lea    edx,[eax+edx*4]
c0022940:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022947:	74 17                	je     c0022960 <SoundDevice::removeChannel(int)+0x30>
c0022949:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022953:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022959:	75 05                	jne    c0022960 <SoundDevice::removeChannel(int)+0x30>
c002295b:	8b 00                	mov    eax,DWORD PTR [eax]
c002295d:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022960:	c3                   	ret    
c0022961:	90                   	nop

c0022962 <SoundDevice::floatTo16(float*, short*, int)>:
c0022962:	57                   	push   edi
c0022963:	56                   	push   esi
c0022964:	53                   	push   ebx
c0022965:	31 db                	xor    ebx,ebx
c0022967:	83 ec 10             	sub    esp,0x10
c002296a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002296e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022972:	0f 8d d0 00 00 00    	jge    c0022a48 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022978:	83 ec 0c             	sub    esp,0xc
c002297b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002297f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022982:	e8 88 64 00 00       	call   c0028e0f <__extendsfdf2>
c0022987:	83 c4 10             	add    esp,0x10
c002298a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002298e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022992:	68 00 00 f0 3f       	push   0x3ff00000
c0022997:	6a 00                	push   0x0
c0022999:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002299d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a1:	e8 f5 53 00 00       	call   c0027d9b <__adddf3>
c00229a6:	83 c4 10             	add    esp,0x10
c00229a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229b1:	68 00 00 e0 3f       	push   0x3fe00000
c00229b6:	6a 00                	push   0x0
c00229b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c0:	e8 53 5a 00 00       	call   c0028418 <__muldf3>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229d0:	68 c0 ff df 40       	push   0x40dfffc0
c00229d5:	6a 00                	push   0x0
c00229d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229df:	e8 34 5a 00 00       	call   c0028418 <__muldf3>
c00229e4:	59                   	pop    ecx
c00229e5:	5f                   	pop    edi
c00229e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f6:	e8 f0 62 00 00       	call   c0028ceb <__truncdfsf2>
c00229fb:	5a                   	pop    edx
c00229fc:	89 c7                	mov    edi,eax
c00229fe:	59                   	pop    ecx
c00229ff:	68 00 fe ff 46       	push   0x46fffe00
c0022a04:	50                   	push   eax
c0022a05:	e8 8b 53 00 00       	call   c0027d95 <__gesf2>
c0022a0a:	83 c4 10             	add    esp,0x10
c0022a0d:	85 c0                	test   eax,eax
c0022a0f:	78 08                	js     c0022a19 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022a11:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022a17:	eb 29                	jmp    c0022a42 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a19:	50                   	push   eax
c0022a1a:	50                   	push   eax
c0022a1b:	6a 00                	push   0x0
c0022a1d:	57                   	push   edi
c0022a1e:	e8 76 53 00 00       	call   c0027d99 <__lesf2>
c0022a23:	83 c4 10             	add    esp,0x10
c0022a26:	85 c0                	test   eax,eax
c0022a28:	7f 08                	jg     c0022a32 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022a2a:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022a30:	eb 10                	jmp    c0022a42 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a32:	83 ec 0c             	sub    esp,0xc
c0022a35:	57                   	push   edi
c0022a36:	e8 71 64 00 00       	call   c0028eac <lrintf>
c0022a3b:	83 c4 10             	add    esp,0x10
c0022a3e:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022a42:	43                   	inc    ebx
c0022a43:	e9 26 ff ff ff       	jmp    c002296e <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022a48:	83 c4 10             	add    esp,0x10
c0022a4b:	5b                   	pop    ebx
c0022a4c:	5e                   	pop    esi
c0022a4d:	5f                   	pop    edi
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022a50:	57                   	push   edi
c0022a51:	56                   	push   esi
c0022a52:	53                   	push   ebx
c0022a53:	31 db                	xor    ebx,ebx
c0022a55:	83 ec 10             	sub    esp,0x10
c0022a58:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a5c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a60:	0f 8d cb 00 00 00    	jge    c0022b31 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022a66:	83 ec 0c             	sub    esp,0xc
c0022a69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a6d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a70:	e8 9a 63 00 00       	call   c0028e0f <__extendsfdf2>
c0022a75:	83 c4 10             	add    esp,0x10
c0022a78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a80:	68 00 00 f0 3f       	push   0x3ff00000
c0022a85:	6a 00                	push   0x0
c0022a87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8f:	e8 07 53 00 00       	call   c0027d9b <__adddf3>
c0022a94:	83 c4 10             	add    esp,0x10
c0022a97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a9f:	68 00 00 e0 3f       	push   0x3fe00000
c0022aa4:	6a 00                	push   0x0
c0022aa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aae:	e8 65 59 00 00       	call   c0028418 <__muldf3>
c0022ab3:	83 c4 10             	add    esp,0x10
c0022ab6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022abe:	68 00 00 60 40       	push   0x40600000
c0022ac3:	6a 00                	push   0x0
c0022ac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022acd:	e8 46 59 00 00       	call   c0028418 <__muldf3>
c0022ad2:	59                   	pop    ecx
c0022ad3:	5f                   	pop    edi
c0022ad4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ad8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022adc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae4:	e8 02 62 00 00       	call   c0028ceb <__truncdfsf2>
c0022ae9:	5a                   	pop    edx
c0022aea:	89 c7                	mov    edi,eax
c0022aec:	59                   	pop    ecx
c0022aed:	68 00 00 fe 42       	push   0x42fe0000
c0022af2:	50                   	push   eax
c0022af3:	e8 9d 52 00 00       	call   c0027d95 <__gesf2>
c0022af8:	83 c4 10             	add    esp,0x10
c0022afb:	85 c0                	test   eax,eax
c0022afd:	78 06                	js     c0022b05 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022aff:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022b03:	eb 26                	jmp    c0022b2b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b05:	50                   	push   eax
c0022b06:	50                   	push   eax
c0022b07:	6a 00                	push   0x0
c0022b09:	57                   	push   edi
c0022b0a:	e8 8a 52 00 00       	call   c0027d99 <__lesf2>
c0022b0f:	83 c4 10             	add    esp,0x10
c0022b12:	85 c0                	test   eax,eax
c0022b14:	7f 06                	jg     c0022b1c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022b16:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022b1a:	eb 0f                	jmp    c0022b2b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	57                   	push   edi
c0022b20:	e8 87 63 00 00       	call   c0028eac <lrintf>
c0022b25:	83 c4 10             	add    esp,0x10
c0022b28:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b2b:	43                   	inc    ebx
c0022b2c:	e9 2b ff ff ff       	jmp    c0022a5c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022b31:	83 c4 10             	add    esp,0x10
c0022b34:	5b                   	pop    ebx
c0022b35:	5e                   	pop    esi
c0022b36:	5f                   	pop    edi
c0022b37:	c3                   	ret    

c0022b38 <SoundDevice::getAudio(int, float*, float*)>:
c0022b38:	55                   	push   ebp
c0022b39:	57                   	push   edi
c0022b3a:	56                   	push   esi
c0022b3b:	53                   	push   ebx
c0022b3c:	83 ec 28             	sub    esp,0x28
c0022b3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b43:	68 d0 d2 02 c0       	push   0xc002d2d0
c0022b48:	e8 9e fd fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022b4d:	59                   	pop    ecx
c0022b4e:	5e                   	pop    esi
c0022b4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022b53:	68 e7 d2 02 c0       	push   0xc002d2e7
c0022b58:	e8 8e fd fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022b5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b61:	83 c4 0c             	add    esp,0xc
c0022b64:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022b6b:	56                   	push   esi
c0022b6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b70:	68 09 d3 02 c0       	push   0xc002d309
c0022b75:	e8 71 fd fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022b7a:	83 c4 0c             	add    esp,0xc
c0022b7d:	56                   	push   esi
c0022b7e:	31 f6                	xor    esi,esi
c0022b80:	6a 00                	push   0x0
c0022b82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b86:	e8 c5 db fd ff       	call   c0000750 <memset>
c0022b8b:	83 c4 10             	add    esp,0x10
c0022b8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b96:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b9e:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022ba5:	85 c0                	test   eax,eax
c0022ba7:	0f 84 d7 00 00 00    	je     c0022c84 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022bad:	83 ec 0c             	sub    esp,0xc
c0022bb0:	50                   	push   eax
c0022bb1:	e8 a8 f9 ff ff       	call   c002255e <SoundChannel::getBufferSize()>
c0022bb6:	5f                   	pop    edi
c0022bb7:	5d                   	pop    ebp
c0022bb8:	50                   	push   eax
c0022bb9:	68 2d d3 02 c0       	push   0xc002d32d
c0022bbe:	e8 28 fd fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022bc3:	58                   	pop    eax
c0022bc4:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bcb:	e8 86 f9 ff ff       	call   c0022556 <SoundChannel::getBufferUsed()>
c0022bd0:	5a                   	pop    edx
c0022bd1:	59                   	pop    ecx
c0022bd2:	50                   	push   eax
c0022bd3:	68 40 d3 02 c0       	push   0xc002d340
c0022bd8:	e8 0e fd fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022bdd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022be1:	99                   	cdq    
c0022be2:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022be8:	50                   	push   eax
c0022be9:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022bef:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022bf3:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bfa:	e8 67 f9 ff ff       	call   c0022566 <SoundChannel::unbuffer(float*, int, int)>
c0022bff:	83 c4 14             	add    esp,0x14
c0022c02:	89 c5                	mov    ebp,eax
c0022c04:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c0b:	e8 46 f9 ff ff       	call   c0022556 <SoundChannel::getBufferUsed()>
c0022c10:	5f                   	pop    edi
c0022c11:	5a                   	pop    edx
c0022c12:	50                   	push   eax
c0022c13:	68 58 d3 02 c0       	push   0xc002d358
c0022c18:	e8 ce fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022c1d:	56                   	push   esi
c0022c1e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c22:	99                   	cdq    
c0022c23:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c29:	50                   	push   eax
c0022c2a:	55                   	push   ebp
c0022c2b:	68 70 d3 02 c0       	push   0xc002d370
c0022c30:	e8 b6 fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022c35:	83 c4 20             	add    esp,0x20
c0022c38:	31 c0                	xor    eax,eax
c0022c3a:	39 e8                	cmp    eax,ebp
c0022c3c:	7d 1e                	jge    c0022c5c <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022c3e:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022c44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022c48:	0f af d0             	imul   edx,eax
c0022c4b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022c4e:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022c52:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022c56:	40                   	inc    eax
c0022c57:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022c5a:	eb de                	jmp    c0022c3a <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022c5c:	50                   	push   eax
c0022c5d:	50                   	push   eax
c0022c5e:	55                   	push   ebp
c0022c5f:	68 9d d3 02 c0       	push   0xc002d39d
c0022c64:	e8 82 fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022c69:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022c6d:	5a                   	pop    edx
c0022c6e:	59                   	pop    ecx
c0022c6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c73:	68 ae d3 02 c0       	push   0xc002d3ae
c0022c78:	e8 6e fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022c7d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c81:	83 c4 10             	add    esp,0x10
c0022c84:	46                   	inc    esi
c0022c85:	83 fe 20             	cmp    esi,0x20
c0022c88:	0f 85 10 ff ff ff    	jne    c0022b9e <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c92:	83 c4 1c             	add    esp,0x1c
c0022c95:	5b                   	pop    ebx
c0022c96:	5e                   	pop    esi
c0022c97:	5f                   	pop    edi
c0022c98:	5d                   	pop    ebp
c0022c99:	c3                   	ret    

c0022c9a <PCI::open(int, int, void*)>:
c0022c9a:	83 ec 18             	sub    esp,0x18
c0022c9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ca1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022ca5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022cab:	8b 10                	mov    edx,DWORD PTR [eax]
c0022cad:	50                   	push   eax
c0022cae:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022cb1:	31 c0                	xor    eax,eax
c0022cb3:	83 c4 1c             	add    esp,0x1c
c0022cb6:	c3                   	ret    
c0022cb7:	90                   	nop

c0022cb8 <PCI::close(int, int, void*)>:
c0022cb8:	31 c0                	xor    eax,eax
c0022cba:	c3                   	ret    
c0022cbb:	90                   	nop

c0022cbc <PCI::PCI()>:
c0022cbc:	83 ec 0c             	sub    esp,0xc
c0022cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc3:	83 ec 08             	sub    esp,0x8
c0022cc6:	68 fc d3 02 c0       	push   0xc002d3fc
c0022ccb:	50                   	push   eax
c0022ccc:	e8 bb 08 ff ff       	call   c001358c <Bus::Bus(char const*)>
c0022cd1:	83 c4 10             	add    esp,0x10
c0022cd4:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c0022cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cdd:	89 10                	mov    DWORD PTR [eax],edx
c0022cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf1:	a3 64 33 03 c0       	mov    ds:0xc0033364,eax
c0022cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d00:	0f b6 d0             	movzx  edx,al
c0022d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d07:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d18:	0f b6 d0             	movzx  edx,al
c0022d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d2e:	8d 50 01             	lea    edx,[eax+0x1]
c0022d31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d35:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d3b:	0f b6 d0             	movzx  edx,al
c0022d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d42:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022d46:	83 c9 c0             	or     ecx,0xffffffc0
c0022d49:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022d4d:	90                   	nop
c0022d4e:	83 c4 0c             	add    esp,0xc
c0022d51:	c3                   	ret    

c0022d52 <PCI::readBAR8(unsigned int, int)>:
c0022d52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d5a:	f6 c2 01             	test   dl,0x1
c0022d5d:	74 07                	je     c0022d66 <PCI::readBAR8(unsigned int, int)+0x14>
c0022d5f:	83 e2 fc             	and    edx,0xfffffffc
c0022d62:	01 c2                	add    edx,eax
c0022d64:	ec                   	in     al,dx
c0022d65:	c3                   	ret    
c0022d66:	83 e2 f0             	and    edx,0xfffffff0
c0022d69:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022d6c:	c3                   	ret    
c0022d6d:	90                   	nop

c0022d6e <PCI::readBAR16(unsigned int, int)>:
c0022d6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d76:	f6 c2 01             	test   dl,0x1
c0022d79:	74 08                	je     c0022d83 <PCI::readBAR16(unsigned int, int)+0x15>
c0022d7b:	83 e2 fc             	and    edx,0xfffffffc
c0022d7e:	01 c2                	add    edx,eax
c0022d80:	66 ed                	in     ax,dx
c0022d82:	c3                   	ret    
c0022d83:	83 e2 f0             	and    edx,0xfffffff0
c0022d86:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d8a:	c3                   	ret    
c0022d8b:	90                   	nop

c0022d8c <PCI::readBAR32(unsigned int, int)>:
c0022d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d94:	f6 c2 01             	test   dl,0x1
c0022d97:	74 07                	je     c0022da0 <PCI::readBAR32(unsigned int, int)+0x14>
c0022d99:	83 e2 fc             	and    edx,0xfffffffc
c0022d9c:	01 c2                	add    edx,eax
c0022d9e:	ed                   	in     eax,dx
c0022d9f:	c3                   	ret    
c0022da0:	83 e2 f0             	and    edx,0xfffffff0
c0022da3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022da6:	c3                   	ret    
c0022da7:	90                   	nop

c0022da8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022da8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022db0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022db4:	f6 c2 01             	test   dl,0x1
c0022db7:	74 07                	je     c0022dc0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022db9:	83 e2 fc             	and    edx,0xfffffffc
c0022dbc:	01 ca                	add    edx,ecx
c0022dbe:	ee                   	out    dx,al
c0022dbf:	c3                   	ret    
c0022dc0:	83 e2 f0             	and    edx,0xfffffff0
c0022dc3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022dc6:	c3                   	ret    
c0022dc7:	90                   	nop

c0022dc8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022dc8:	57                   	push   edi
c0022dc9:	56                   	push   esi
c0022dca:	53                   	push   ebx
c0022dcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dcf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022dd3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022dd7:	f6 c2 01             	test   dl,0x1
c0022dda:	74 24                	je     c0022e00 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022ddc:	89 d3                	mov    ebx,edx
c0022dde:	83 e3 fc             	and    ebx,0xfffffffc
c0022de1:	50                   	push   eax
c0022de2:	0f b7 c7             	movzx  eax,di
c0022de5:	50                   	push   eax
c0022de6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022de9:	50                   	push   eax
c0022dea:	68 04 d4 02 c0       	push   0xc002d404
c0022def:	e8 f7 fa fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022df4:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022df7:	89 f8                	mov    eax,edi
c0022df9:	66 ef                	out    dx,ax
c0022dfb:	83 c4 10             	add    esp,0x10
c0022dfe:	eb 07                	jmp    c0022e07 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022e00:	83 e2 f0             	and    edx,0xfffffff0
c0022e03:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022e07:	5b                   	pop    ebx
c0022e08:	5e                   	pop    esi
c0022e09:	5f                   	pop    edi
c0022e0a:	c3                   	ret    
c0022e0b:	90                   	nop

c0022e0c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022e0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e18:	f6 c2 01             	test   dl,0x1
c0022e1b:	74 07                	je     c0022e24 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022e1d:	83 e2 fc             	and    edx,0xfffffffc
c0022e20:	01 ca                	add    edx,ecx
c0022e22:	ef                   	out    dx,eax
c0022e23:	c3                   	ret    
c0022e24:	83 e2 f0             	and    edx,0xfffffff0
c0022e27:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022e2a:	c3                   	ret    
c0022e2b:	90                   	nop

c0022e2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e2c:	55                   	push   ebp
c0022e2d:	57                   	push   edi
c0022e2e:	56                   	push   esi
c0022e2f:	53                   	push   ebx
c0022e30:	83 ec 0c             	sub    esp,0xc
c0022e33:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e37:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022e3b:	89 f0                	mov    eax,esi
c0022e3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022e41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e45:	3c 07                	cmp    al,0x7
c0022e47:	76 10                	jbe    c0022e59 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022e49:	83 ec 0c             	sub    esp,0xc
c0022e4c:	68 1b d4 02 c0       	push   0xc002d41b
c0022e51:	e8 cb 74 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0022e56:	83 c4 10             	add    esp,0x10
c0022e59:	80 fb 0f             	cmp    bl,0xf
c0022e5c:	76 10                	jbe    c0022e6e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022e5e:	83 ec 0c             	sub    esp,0xc
c0022e61:	68 4b d4 02 c0       	push   0xc002d44b
c0022e66:	e8 b6 74 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0022e6b:	83 c4 10             	add    esp,0x10
c0022e6e:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e71:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e76:	83 c8 f0             	or     eax,0xfffffff0
c0022e79:	ee                   	out    dx,al
c0022e7a:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e7f:	89 e8                	mov    eax,ebp
c0022e81:	ee                   	out    dx,al
c0022e82:	83 c4 0c             	add    esp,0xc
c0022e85:	89 d8                	mov    eax,ebx
c0022e87:	66 81 e7 fc 00       	and    di,0xfc
c0022e8c:	5b                   	pop    ebx
c0022e8d:	c1 e0 08             	shl    eax,0x8
c0022e90:	5e                   	pop    esi
c0022e91:	09 f8                	or     eax,edi
c0022e93:	5f                   	pop    edi
c0022e94:	66 0d 00 c0          	or     ax,0xc000
c0022e98:	5d                   	pop    ebp
c0022e99:	c3                   	ret    

c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e9a:	57                   	push   edi
c0022e9b:	56                   	push   esi
c0022e9c:	53                   	push   ebx
c0022e9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ea5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022eab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022eaf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022eb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022eb7:	83 ff 01             	cmp    edi,0x1
c0022eba:	75 3e                	jne    c0022efa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022ebc:	89 de                	mov    esi,ebx
c0022ebe:	0f b6 c0             	movzx  eax,al
c0022ec1:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022ec7:	c1 e0 10             	shl    eax,0x10
c0022eca:	0f b6 c9             	movzx  ecx,cl
c0022ecd:	09 f0                	or     eax,esi
c0022ecf:	c1 e1 08             	shl    ecx,0x8
c0022ed2:	0f b6 d2             	movzx  edx,dl
c0022ed5:	09 c8                	or     eax,ecx
c0022ed7:	c1 e2 0b             	shl    edx,0xb
c0022eda:	09 d0                	or     eax,edx
c0022edc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ee1:	0d 00 00 00 80       	or     eax,0x80000000
c0022ee6:	ef                   	out    dx,eax
c0022ee7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022eec:	ed                   	in     eax,dx
c0022eed:	83 e3 02             	and    ebx,0x2
c0022ef0:	0f b6 cb             	movzx  ecx,bl
c0022ef3:	c1 e1 03             	shl    ecx,0x3
c0022ef6:	d3 e8                	shr    eax,cl
c0022ef8:	eb 43                	jmp    c0022f3d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022efa:	83 ff 02             	cmp    edi,0x2
c0022efd:	75 2c                	jne    c0022f2b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022eff:	83 ec 0c             	sub    esp,0xc
c0022f02:	0f b6 c9             	movzx  ecx,cl
c0022f05:	0f b6 d2             	movzx  edx,dl
c0022f08:	0f b6 fb             	movzx  edi,bl
c0022f0b:	0f b6 c0             	movzx  eax,al
c0022f0e:	57                   	push   edi
c0022f0f:	51                   	push   ecx
c0022f10:	52                   	push   edx
c0022f11:	50                   	push   eax
c0022f12:	56                   	push   esi
c0022f13:	e8 14 ff ff ff       	call   c0022e2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f18:	89 c2                	mov    edx,eax
c0022f1a:	ed                   	in     eax,dx
c0022f1b:	83 e3 02             	and    ebx,0x2
c0022f1e:	83 c4 20             	add    esp,0x20
c0022f21:	0f b6 cb             	movzx  ecx,bl
c0022f24:	c1 e1 03             	shl    ecx,0x3
c0022f27:	d3 e8                	shr    eax,cl
c0022f29:	eb 12                	jmp    c0022f3d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f2b:	83 ec 0c             	sub    esp,0xc
c0022f2e:	68 7b d4 02 c0       	push   0xc002d47b
c0022f33:	e8 e9 73 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0022f38:	83 c4 10             	add    esp,0x10
c0022f3b:	31 c0                	xor    eax,eax
c0022f3d:	5b                   	pop    ebx
c0022f3e:	5e                   	pop    esi
c0022f3f:	5f                   	pop    edi
c0022f40:	c3                   	ret    
c0022f41:	90                   	nop

c0022f42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022f42:	83 ec 18             	sub    esp,0x18
c0022f45:	6a 00                	push   0x0
c0022f47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f4c:	50                   	push   eax
c0022f4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f52:	50                   	push   eax
c0022f53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f58:	50                   	push   eax
c0022f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f5d:	e8 38 ff ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f62:	83 c4 2c             	add    esp,0x2c
c0022f65:	c3                   	ret    

c0022f66 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022f66:	83 ec 18             	sub    esp,0x18
c0022f69:	6a 0e                	push   0xe
c0022f6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f70:	50                   	push   eax
c0022f71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f76:	50                   	push   eax
c0022f77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f7c:	50                   	push   eax
c0022f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f81:	e8 14 ff ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f86:	83 c4 2c             	add    esp,0x2c
c0022f89:	0f b6 c0             	movzx  eax,al
c0022f8c:	c3                   	ret    
c0022f8d:	90                   	nop

c0022f8e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f8e:	55                   	push   ebp
c0022f8f:	57                   	push   edi
c0022f90:	56                   	push   esi
c0022f91:	53                   	push   ebx
c0022f92:	83 ec 18             	sub    esp,0x18
c0022f95:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022f9a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022f9f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022fa4:	6a 0a                	push   0xa
c0022fa6:	56                   	push   esi
c0022fa7:	55                   	push   ebp
c0022fa8:	57                   	push   edi
c0022fa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fad:	e8 e8 fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fb2:	83 c4 14             	add    esp,0x14
c0022fb5:	89 c3                	mov    ebx,eax
c0022fb7:	6a 0a                	push   0xa
c0022fb9:	0f b6 db             	movzx  ebx,bl
c0022fbc:	56                   	push   esi
c0022fbd:	55                   	push   ebp
c0022fbe:	57                   	push   edi
c0022fbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fc3:	e8 d2 fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fc8:	83 c4 2c             	add    esp,0x2c
c0022fcb:	25 00 ff 00 00       	and    eax,0xff00
c0022fd0:	09 d8                	or     eax,ebx
c0022fd2:	5b                   	pop    ebx
c0022fd3:	5e                   	pop    esi
c0022fd4:	5f                   	pop    edi
c0022fd5:	5d                   	pop    ebp
c0022fd6:	c3                   	ret    
c0022fd7:	90                   	nop

c0022fd8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022fd8:	83 ec 18             	sub    esp,0x18
c0022fdb:	6a 08                	push   0x8
c0022fdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe2:	50                   	push   eax
c0022fe3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe8:	50                   	push   eax
c0022fe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fee:	50                   	push   eax
c0022fef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ff3:	e8 a2 fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ff8:	83 c4 2c             	add    esp,0x2c
c0022ffb:	0f b6 c4             	movzx  eax,ah
c0022ffe:	c3                   	ret    
c0022fff:	90                   	nop

c0023000 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023000:	83 ec 18             	sub    esp,0x18
c0023003:	6a 08                	push   0x8
c0023005:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002300a:	50                   	push   eax
c002300b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023010:	50                   	push   eax
c0023011:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023016:	50                   	push   eax
c0023017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002301b:	e8 7a fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023020:	83 c4 2c             	add    esp,0x2c
c0023023:	c3                   	ret    

c0023024 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023024:	83 ec 18             	sub    esp,0x18
c0023027:	6a 3c                	push   0x3c
c0023029:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002302e:	50                   	push   eax
c002302f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023034:	50                   	push   eax
c0023035:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303a:	50                   	push   eax
c002303b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002303f:	e8 56 fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023044:	83 c4 2c             	add    esp,0x2c
c0023047:	c3                   	ret    

c0023048 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023048:	83 ec 18             	sub    esp,0x18
c002304b:	6a 18                	push   0x18
c002304d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023052:	50                   	push   eax
c0023053:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023058:	50                   	push   eax
c0023059:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002305e:	50                   	push   eax
c002305f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023063:	e8 32 fe ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023068:	83 c4 2c             	add    esp,0x2c
c002306b:	0f b6 c4             	movzx  eax,ah
c002306e:	c3                   	ret    
c002306f:	90                   	nop

c0023070 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023070:	55                   	push   ebp
c0023071:	57                   	push   edi
c0023072:	56                   	push   esi
c0023073:	53                   	push   ebx
c0023074:	83 ec 28             	sub    esp,0x28
c0023077:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002307b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023080:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023085:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002308a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023091:	8d 43 12             	lea    eax,[ebx+0x12]
c0023094:	83 c3 10             	add    ebx,0x10
c0023097:	0f b6 c0             	movzx  eax,al
c002309a:	0f b6 db             	movzx  ebx,bl
c002309d:	50                   	push   eax
c002309e:	51                   	push   ecx
c002309f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00230a3:	57                   	push   edi
c00230a4:	55                   	push   ebp
c00230a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230a9:	e8 ec fd ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230ae:	83 c4 14             	add    esp,0x14
c00230b1:	89 c6                	mov    esi,eax
c00230b3:	53                   	push   ebx
c00230b4:	c1 e6 10             	shl    esi,0x10
c00230b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00230bb:	51                   	push   ecx
c00230bc:	57                   	push   edi
c00230bd:	55                   	push   ebp
c00230be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230c2:	e8 d3 fd ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230c7:	83 c4 3c             	add    esp,0x3c
c00230ca:	0f b7 c0             	movzx  eax,ax
c00230cd:	5b                   	pop    ebx
c00230ce:	09 f0                	or     eax,esi
c00230d0:	5e                   	pop    esi
c00230d1:	5f                   	pop    edi
c00230d2:	5d                   	pop    ebp
c00230d3:	c3                   	ret    

c00230d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00230d4:	55                   	push   ebp
c00230d5:	57                   	push   edi
c00230d6:	56                   	push   esi
c00230d7:	53                   	push   ebx
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00230df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230e3:	89 f5                	mov    ebp,esi
c00230e5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00230eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230fb:	83 f9 01             	cmp    ecx,0x1
c00230fe:	75 5d                	jne    c002315d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0023100:	0f b6 c8             	movzx  ecx,al
c0023103:	0f b6 d2             	movzx  edx,dl
c0023106:	c1 e1 10             	shl    ecx,0x10
c0023109:	c1 e2 0b             	shl    edx,0xb
c002310c:	89 f0                	mov    eax,esi
c002310e:	25 fc 00 00 00       	and    eax,0xfc
c0023113:	09 c1                	or     ecx,eax
c0023115:	89 e8                	mov    eax,ebp
c0023117:	0f b6 c0             	movzx  eax,al
c002311a:	c1 e0 08             	shl    eax,0x8
c002311d:	09 c1                	or     ecx,eax
c002311f:	09 d1                	or     ecx,edx
c0023121:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023126:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002312c:	89 c8                	mov    eax,ecx
c002312e:	ef                   	out    dx,eax
c002312f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023134:	ed                   	in     eax,dx
c0023135:	0f b7 db             	movzx  ebx,bx
c0023138:	83 e6 02             	and    esi,0x2
c002313b:	74 0a                	je     c0023147 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002313d:	0f b7 d0             	movzx  edx,ax
c0023140:	c1 e3 10             	shl    ebx,0x10
c0023143:	09 d3                	or     ebx,edx
c0023145:	eb 05                	jmp    c002314c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0023147:	66 31 c0             	xor    ax,ax
c002314a:	09 c3                	or     ebx,eax
c002314c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023151:	89 c8                	mov    eax,ecx
c0023153:	ef                   	out    dx,eax
c0023154:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023159:	89 d8                	mov    eax,ebx
c002315b:	eb 41                	jmp    c002319e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002315d:	83 f9 02             	cmp    ecx,0x2
c0023160:	75 45                	jne    c00231a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0023162:	83 ec 0c             	sub    esp,0xc
c0023165:	0f b6 d2             	movzx  edx,dl
c0023168:	89 f1                	mov    ecx,esi
c002316a:	0f b6 c0             	movzx  eax,al
c002316d:	0f b6 f1             	movzx  esi,cl
c0023170:	89 e9                	mov    ecx,ebp
c0023172:	56                   	push   esi
c0023173:	0f b6 c9             	movzx  ecx,cl
c0023176:	51                   	push   ecx
c0023177:	52                   	push   edx
c0023178:	50                   	push   eax
c0023179:	57                   	push   edi
c002317a:	e8 ad fc ff ff       	call   c0022e2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002317f:	89 c2                	mov    edx,eax
c0023181:	ed                   	in     eax,dx
c0023182:	83 c4 20             	add    esp,0x20
c0023185:	0f b7 db             	movzx  ebx,bx
c0023188:	f6 c2 02             	test   dl,0x2
c002318b:	74 0c                	je     c0023199 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002318d:	0f b7 c8             	movzx  ecx,ax
c0023190:	89 d8                	mov    eax,ebx
c0023192:	c1 e0 10             	shl    eax,0x10
c0023195:	09 c8                	or     eax,ecx
c0023197:	eb 05                	jmp    c002319e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023199:	66 31 c0             	xor    ax,ax
c002319c:	09 d8                	or     eax,ebx
c002319e:	ef                   	out    dx,eax
c002319f:	83 c4 0c             	add    esp,0xc
c00231a2:	5b                   	pop    ebx
c00231a3:	5e                   	pop    esi
c00231a4:	5f                   	pop    edi
c00231a5:	5d                   	pop    ebp
c00231a6:	c3                   	ret    
c00231a7:	c7 44 24 20 7b d4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d47b
c00231af:	83 c4 0c             	add    esp,0xc
c00231b2:	5b                   	pop    ebx
c00231b3:	5e                   	pop    esi
c00231b4:	5f                   	pop    edi
c00231b5:	5d                   	pop    ebp
c00231b6:	e9 66 71 ff ff       	jmp    c001a321 <Krnl::panic(char const*)>
c00231bb:	90                   	nop

c00231bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00231bc:	55                   	push   ebp
c00231bd:	57                   	push   edi
c00231be:	56                   	push   esi
c00231bf:	53                   	push   ebx
c00231c0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231c6:	80 3d 70 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033370,0x0
c00231cd:	0f 85 96 00 00 00    	jne    c0023269 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00231d3:	83 ec 0c             	sub    esp,0xc
c00231d6:	68 14 01 00 00       	push   0x114
c00231db:	e8 ac c6 fe ff       	call   c000f88c <malloc>
c00231e0:	83 c4 0c             	add    esp,0xc
c00231e3:	89 c3                	mov    ebx,eax
c00231e5:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c00231eb:	68 81 d4 02 c0       	push   0xc002d481
c00231f0:	50                   	push   eax
c00231f1:	e8 54 fc fe ff       	call   c0012e4a <File::File(char const*, Process*)>
c00231f6:	5a                   	pop    edx
c00231f7:	59                   	pop    ecx
c00231f8:	6a 01                	push   0x1
c00231fa:	53                   	push   ebx
c00231fb:	e8 ae fc fe ff       	call   c0012eae <File::open(FileOpenMode)>
c0023200:	83 c4 0c             	add    esp,0xc
c0023203:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023207:	50                   	push   eax
c0023208:	8d 44 24 28          	lea    eax,[esp+0x28]
c002320c:	50                   	push   eax
c002320d:	53                   	push   ebx
c002320e:	e8 47 ff fe ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c0023213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023217:	40                   	inc    eax
c0023218:	89 04 24             	mov    DWORD PTR [esp],eax
c002321b:	e8 6c c6 fe ff       	call   c000f88c <malloc>
c0023220:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023224:	a3 6c 33 03 c0       	mov    ds:0xc003336c,eax
c0023229:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002322d:	5e                   	pop    esi
c002322e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023230:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023234:	51                   	push   ecx
c0023235:	50                   	push   eax
c0023236:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002323a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002323e:	53                   	push   ebx
c002323f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023242:	83 c4 14             	add    esp,0x14
c0023245:	53                   	push   ebx
c0023246:	e8 c1 fc fe ff       	call   c0012f0c <File::close()>
c002324b:	5f                   	pop    edi
c002324c:	5d                   	pop    ebp
c002324d:	ff 35 6c 33 03 c0    	push   DWORD PTR ds:0xc003336c
c0023253:	68 9a d4 02 c0       	push   0xc002d49a
c0023258:	e8 8e f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002325d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023261:	83 c4 10             	add    esp,0x10
c0023264:	a3 68 33 03 c0       	mov    ds:0xc0033368,eax
c0023269:	a1 68 33 03 c0       	mov    eax,ds:0xc0033368
c002326e:	8b 15 6c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003336c
c0023274:	89 04 24             	mov    DWORD PTR [esp],eax
c0023277:	31 ff                	xor    edi,edi
c0023279:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023281:	31 f6                	xor    esi,esi
c0023283:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023288:	31 db                	xor    ebx,ebx
c002328a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023292:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023297:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002329e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00232a2:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00232a9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00232ad:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00232b0:	0f 8e 6b 01 00 00    	jle    c0023421 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c00232b6:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00232b9:	d4 40                	aam    0x40
c00232bb:	d5 39                	aad    0x39
c00232bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00232c1:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00232c5:	d4 40                	aam    0x40
c00232c7:	d5 39                	aad    0x39
c00232c9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00232cd:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00232d1:	d4 40                	aam    0x40
c00232d3:	d5 39                	aad    0x39
c00232d5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00232d9:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00232dd:	d4 40                	aam    0x40
c00232df:	d5 39                	aad    0x39
c00232e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00232e5:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00232e9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00232ed:	3c 56                	cmp    al,0x56
c00232ef:	74 45                	je     c0023336 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00232f1:	d4 40                	aam    0x40
c00232f3:	d5 39                	aad    0x39
c00232f5:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232f8:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00232fc:	0f b6 c9             	movzx  ecx,cl
c00232ff:	c1 e1 04             	shl    ecx,0x4
c0023302:	d4 40                	aam    0x40
c0023304:	d5 39                	aad    0x39
c0023306:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023309:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002330d:	0f b6 db             	movzx  ebx,bl
c0023310:	09 cb                	or     ebx,ecx
c0023312:	c1 e3 04             	shl    ebx,0x4
c0023315:	d4 40                	aam    0x40
c0023317:	d5 39                	aad    0x39
c0023319:	8d 48 d0             	lea    ecx,[eax-0x30]
c002331c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023320:	0f b6 c9             	movzx  ecx,cl
c0023323:	09 cb                	or     ebx,ecx
c0023325:	c1 e3 04             	shl    ebx,0x4
c0023328:	89 d9                	mov    ecx,ebx
c002332a:	d4 40                	aam    0x40
c002332c:	d5 39                	aad    0x39
c002332e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023331:	0f b6 db             	movzx  ebx,bl
c0023334:	09 cb                	or     ebx,ecx
c0023336:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002333a:	80 f9 44             	cmp    cl,0x44
c002333d:	74 47                	je     c0023386 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c002333f:	88 c8                	mov    al,cl
c0023341:	d4 40                	aam    0x40
c0023343:	d5 39                	aad    0x39
c0023345:	83 e8 30             	sub    eax,0x30
c0023348:	0f b6 e8             	movzx  ebp,al
c002334b:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c002334f:	c1 e5 04             	shl    ebp,0x4
c0023352:	d4 40                	aam    0x40
c0023354:	d5 39                	aad    0x39
c0023356:	83 e8 30             	sub    eax,0x30
c0023359:	0f b6 f0             	movzx  esi,al
c002335c:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023360:	09 ee                	or     esi,ebp
c0023362:	c1 e6 04             	shl    esi,0x4
c0023365:	d4 40                	aam    0x40
c0023367:	d5 39                	aad    0x39
c0023369:	83 e8 30             	sub    eax,0x30
c002336c:	0f b6 e8             	movzx  ebp,al
c002336f:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023373:	09 ee                	or     esi,ebp
c0023375:	c1 e6 04             	shl    esi,0x4
c0023378:	89 f5                	mov    ebp,esi
c002337a:	d4 40                	aam    0x40
c002337c:	d5 39                	aad    0x39
c002337e:	83 e8 30             	sub    eax,0x30
c0023381:	0f b6 f0             	movzx  esi,al
c0023384:	09 ee                	or     esi,ebp
c0023386:	83 c7 10             	add    edi,0x10
c0023389:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002338d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023390:	3c 0a                	cmp    al,0xa
c0023392:	74 09                	je     c002339d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023394:	45                   	inc    ebp
c0023395:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023398:	75 16                	jne    c00233b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002339a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002339d:	3c 0a                	cmp    al,0xa
c002339f:	0f 94 c0             	sete   al
c00233a2:	0f b6 c0             	movzx  eax,al
c00233a5:	01 c7                	add    edi,eax
c00233a7:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00233ac:	75 0c                	jne    c00233ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c00233ae:	eb 15                	jmp    c00233c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c00233b0:	47                   	inc    edi
c00233b1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00233b4:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00233b8:	eb d3                	jmp    c002338d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c00233ba:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00233bf:	0f 85 e8 fe ff ff    	jne    c00232ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233c5:	80 f9 44             	cmp    cl,0x44
c00233c8:	74 0b                	je     c00233d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00233ca:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00233cf:	0f 85 d8 fe ff ff    	jne    c00232ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00233d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00233dd:	c1 e1 04             	shl    ecx,0x4
c00233e0:	83 e8 30             	sub    eax,0x30
c00233e3:	09 c8                	or     eax,ecx
c00233e5:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00233e9:	0f 85 be fe ff ff    	jne    c00232ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233ef:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00233f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00233f7:	c1 e1 04             	shl    ecx,0x4
c00233fa:	83 e8 30             	sub    eax,0x30
c00233fd:	09 c8                	or     eax,ecx
c00233ff:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023403:	0f 85 a4 fe ff ff    	jne    c00232ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023409:	50                   	push   eax
c002340a:	50                   	push   eax
c002340b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002340f:	50                   	push   eax
c0023410:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023417:	e8 f0 d3 fd ff       	call   c000080c <strcpy>
c002341c:	83 c4 10             	add    esp,0x10
c002341f:	eb 15                	jmp    c0023436 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023421:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023428:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023433:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023436:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002343d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023443:	5b                   	pop    ebx
c0023444:	5e                   	pop    esi
c0023445:	5f                   	pop    edi
c0023446:	5d                   	pop    ebp
c0023447:	c3                   	ret    

c0023448 <PCI::checkBus(unsigned char)>:
c0023448:	56                   	push   esi
c0023449:	53                   	push   ebx
c002344a:	31 db                	xor    ebx,ebx
c002344c:	51                   	push   ecx
c002344d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023452:	52                   	push   edx
c0023453:	53                   	push   ebx
c0023454:	43                   	inc    ebx
c0023455:	56                   	push   esi
c0023456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002345a:	e8 37 03 00 00       	call   c0023796 <PCI::checkDevice(unsigned char, unsigned char)>
c002345f:	83 c4 10             	add    esp,0x10
c0023462:	83 fb 20             	cmp    ebx,0x20
c0023465:	75 eb                	jne    c0023452 <PCI::checkBus(unsigned char)+0xa>
c0023467:	58                   	pop    eax
c0023468:	5b                   	pop    ebx
c0023469:	5e                   	pop    esi
c002346a:	c3                   	ret    
c002346b:	90                   	nop

c002346c <PCI::foundDevice(PCIDeviceInfo)>:
c002346c:	55                   	push   ebp
c002346d:	57                   	push   edi
c002346e:	56                   	push   esi
c002346f:	53                   	push   ebx
c0023470:	83 ec 1c             	sub    esp,0x1c
c0023473:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023477:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002347d:	0f 84 52 01 00 00    	je     c00235d5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023483:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023487:	66 81 f9 06 04       	cmp    cx,0x406
c002348c:	75 2c                	jne    c00234ba <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002348e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023493:	50                   	push   eax
c0023494:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023499:	50                   	push   eax
c002349a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002349f:	50                   	push   eax
c00234a0:	56                   	push   esi
c00234a1:	e8 a2 fb ff ff       	call   c0023048 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00234a6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00234aa:	0f b6 c0             	movzx  eax,al
c00234ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00234b1:	83 c4 2c             	add    esp,0x2c
c00234b4:	5b                   	pop    ebx
c00234b5:	5e                   	pop    esi
c00234b6:	5f                   	pop    edi
c00234b7:	5d                   	pop    ebp
c00234b8:	eb 8e                	jmp    c0023448 <PCI::checkBus(unsigned char)>
c00234ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00234be:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00234c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00234c8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00234cc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00234d0:	88 d3                	mov    bl,dl
c00234d2:	85 c0                	test   eax,eax
c00234d4:	74 33                	je     c0023509 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234d9:	85 d2                	test   edx,edx
c00234db:	74 28                	je     c0023505 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234dd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234e3:	31 ef                	xor    edi,ebp
c00234e5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234eb:	75 18                	jne    c0023505 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234f1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00234f7:	75 0c                	jne    c0023505 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234f9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234ff:	0f 84 d0 00 00 00    	je     c00235d5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023505:	8b 00                	mov    eax,DWORD PTR [eax]
c0023507:	eb c9                	jmp    c00234d2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023509:	66 81 f9 01 06       	cmp    cx,0x601
c002350e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023512:	75 19                	jne    c002352d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023514:	83 ec 0c             	sub    esp,0xc
c0023517:	68 64 01 00 00       	push   0x164
c002351c:	e8 6b c3 fe ff       	call   c000f88c <malloc>
c0023521:	89 c5                	mov    ebp,eax
c0023523:	89 04 24             	mov    DWORD PTR [esp],eax
c0023526:	e8 a1 0f 00 00       	call   c00244cc <SATABus::SATABus()>
c002352b:	eb 1e                	jmp    c002354b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002352d:	66 81 f9 01 01       	cmp    cx,0x101
c0023532:	75 60                	jne    c0023594 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023534:	83 ec 0c             	sub    esp,0xc
c0023537:	68 70 02 00 00       	push   0x270
c002353c:	e8 4b c3 fe ff       	call   c000f88c <malloc>
c0023541:	89 c5                	mov    ebp,eax
c0023543:	89 04 24             	mov    DWORD PTR [esp],eax
c0023546:	e8 0f 03 00 00       	call   c002385a <IDE::IDE()>
c002354b:	58                   	pop    eax
c002354c:	5a                   	pop    edx
c002354d:	55                   	push   ebp
c002354e:	56                   	push   esi
c002354f:	e8 d0 07 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c0023554:	83 ec 1c             	sub    esp,0x1c
c0023557:	b9 09 00 00 00       	mov    ecx,0x9
c002355c:	fc                   	cld    
c002355d:	89 e7                	mov    edi,esp
c002355f:	89 de                	mov    esi,ebx
c0023561:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023563:	55                   	push   ebp
c0023564:	e8 cd 06 ff ff       	call   c0013c36 <Device::preOpenPCI(PCIDeviceInfo)>
c0023569:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002356c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023570:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023578:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023580:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023588:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002358b:	83 c4 4c             	add    esp,0x4c
c002358e:	5b                   	pop    ebx
c002358f:	5e                   	pop    esi
c0023590:	5f                   	pop    edi
c0023591:	5d                   	pop    ebp
c0023592:	ff e0                	jmp    eax
c0023594:	83 ec 0c             	sub    esp,0xc
c0023597:	68 58 01 00 00       	push   0x158
c002359c:	e8 eb c2 fe ff       	call   c000f88c <malloc>
c00235a1:	89 c5                	mov    ebp,eax
c00235a3:	58                   	pop    eax
c00235a4:	5a                   	pop    edx
c00235a5:	68 ac d4 02 c0       	push   0xc002d4ac
c00235aa:	55                   	push   ebp
c00235ab:	e8 7e 0a ff ff       	call   c001402e <DriverlessDevice::DriverlessDevice(char const*)>
c00235b0:	59                   	pop    ecx
c00235b1:	5f                   	pop    edi
c00235b2:	55                   	push   ebp
c00235b3:	56                   	push   esi
c00235b4:	e8 6b 07 ff ff       	call   c0013d24 <Device::addChild(Device*)>
c00235b9:	b9 09 00 00 00       	mov    ecx,0x9
c00235be:	fc                   	cld    
c00235bf:	89 df                	mov    edi,ebx
c00235c1:	89 de                	mov    esi,ebx
c00235c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235c5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235c9:	83 c4 2c             	add    esp,0x2c
c00235cc:	5b                   	pop    ebx
c00235cd:	5e                   	pop    esi
c00235ce:	5f                   	pop    edi
c00235cf:	5d                   	pop    ebp
c00235d0:	e9 61 06 ff ff       	jmp    c0013c36 <Device::preOpenPCI(PCIDeviceInfo)>
c00235d5:	83 c4 1c             	add    esp,0x1c
c00235d8:	5b                   	pop    ebx
c00235d9:	5e                   	pop    esi
c00235da:	5f                   	pop    edi
c00235db:	5d                   	pop    ebp
c00235dc:	c3                   	ret    
c00235dd:	90                   	nop

c00235de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235de:	55                   	push   ebp
c00235df:	57                   	push   edi
c00235e0:	56                   	push   esi
c00235e1:	53                   	push   ebx
c00235e2:	83 ec 68             	sub    esp,0x68
c00235e5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00235e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00235f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00235fb:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023604:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002360b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023610:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023614:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023619:	6a 0c                	push   0xc
c002361b:	57                   	push   edi
c002361c:	53                   	push   ebx
c002361d:	56                   	push   esi
c002361e:	55                   	push   ebp
c002361f:	e8 76 f8 ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023624:	83 c4 20             	add    esp,0x20
c0023627:	57                   	push   edi
c0023628:	53                   	push   ebx
c0023629:	56                   	push   esi
c002362a:	55                   	push   ebp
c002362b:	e8 5e f9 ff ff       	call   c0022f8e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023630:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023635:	57                   	push   edi
c0023636:	53                   	push   ebx
c0023637:	56                   	push   esi
c0023638:	55                   	push   ebp
c0023639:	e8 e6 f9 ff ff       	call   c0023024 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002363e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023642:	83 c4 14             	add    esp,0x14
c0023645:	6a 3c                	push   0x3c
c0023647:	57                   	push   edi
c0023648:	53                   	push   ebx
c0023649:	56                   	push   esi
c002364a:	55                   	push   ebp
c002364b:	e8 4a f8 ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023650:	0f b6 c4             	movzx  eax,ah
c0023653:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023657:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002365b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002365f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0023664:	83 c4 20             	add    esp,0x20
c0023667:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002366d:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023674:	74 7c                	je     c00236f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023676:	31 c0                	xor    eax,eax
c0023678:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c002367e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023684:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002368a:	7e 66                	jle    c00236f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002368c:	8d 14 c2             	lea    edx,[edx+eax*8]
c002368f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023696:	39 cb                	cmp    ebx,ecx
c0023698:	75 55                	jne    c00236ef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002369a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00236a1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00236a5:	75 48                	jne    c00236ef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00236a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00236ab:	83 ec 0c             	sub    esp,0xc
c00236ae:	68 c6 d4 02 c0       	push   0xc002d4c6
c00236b3:	e8 33 f2 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00236b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00236bc:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00236c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00236c6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236cc:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00236d4:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00236d8:	52                   	push   edx
c00236d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236dd:	53                   	push   ebx
c00236de:	68 eb d4 02 c0       	push   0xc002d4eb
c00236e3:	e8 03 f2 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00236e8:	83 c4 20             	add    esp,0x20
c00236eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236ef:	40                   	inc    eax
c00236f0:	eb 86                	jmp    c0023678 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00236f2:	31 d2                	xor    edx,edx
c00236f4:	83 ec 0c             	sub    esp,0xc
c00236f7:	57                   	push   edi
c00236f8:	53                   	push   ebx
c00236f9:	56                   	push   esi
c00236fa:	52                   	push   edx
c00236fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00236ff:	55                   	push   ebp
c0023700:	e8 6b f9 ff ff       	call   c0023070 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023709:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002370d:	42                   	inc    edx
c002370e:	83 c4 20             	add    esp,0x20
c0023711:	83 fa 06             	cmp    edx,0x6
c0023714:	75 de                	jne    c00236f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023716:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002371b:	83 ec 0c             	sub    esp,0xc
c002371e:	86 e0                	xchg   al,ah
c0023720:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023725:	6a 02                	push   0x2
c0023727:	57                   	push   edi
c0023728:	53                   	push   ebx
c0023729:	56                   	push   esi
c002372a:	55                   	push   ebp
c002372b:	e8 6a f7 ff ff       	call   c0022e9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023730:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023735:	83 c4 20             	add    esp,0x20
c0023738:	57                   	push   edi
c0023739:	53                   	push   ebx
c002373a:	56                   	push   esi
c002373b:	55                   	push   ebp
c002373c:	e8 97 f8 ff ff       	call   c0022fd8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023741:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023745:	57                   	push   edi
c0023746:	53                   	push   ebx
c0023747:	56                   	push   esi
c0023748:	55                   	push   ebp
c0023749:	e8 f4 f7 ff ff       	call   c0022f42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002374e:	b9 09 00 00 00       	mov    ecx,0x9
c0023753:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023758:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002375c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023760:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023764:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023768:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002376c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023770:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023774:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023778:	83 ec 0c             	sub    esp,0xc
c002377b:	fc                   	cld    
c002377c:	89 e7                	mov    edi,esp
c002377e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023782:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023784:	55                   	push   ebp
c0023785:	e8 e2 fc ff ff       	call   c002346c <PCI::foundDevice(PCIDeviceInfo)>
c002378a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023790:	5b                   	pop    ebx
c0023791:	5e                   	pop    esi
c0023792:	5f                   	pop    edi
c0023793:	5d                   	pop    ebp
c0023794:	c3                   	ret    
c0023795:	90                   	nop

c0023796 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023796:	55                   	push   ebp
c0023797:	57                   	push   edi
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	83 ec 0c             	sub    esp,0xc
c002379d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00237a1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00237a6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00237ab:	6a 00                	push   0x0
c00237ad:	56                   	push   esi
c00237ae:	57                   	push   edi
c00237af:	55                   	push   ebp
c00237b0:	e8 8d f7 ff ff       	call   c0022f42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237b5:	6a 00                	push   0x0
c00237b7:	56                   	push   esi
c00237b8:	57                   	push   edi
c00237b9:	55                   	push   ebp
c00237ba:	e8 1f fe ff ff       	call   c00235de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237bf:	83 c4 20             	add    esp,0x20
c00237c2:	6a 00                	push   0x0
c00237c4:	56                   	push   esi
c00237c5:	57                   	push   edi
c00237c6:	55                   	push   ebp
c00237c7:	e8 9a f7 ff ff       	call   c0022f66 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237cc:	83 c4 10             	add    esp,0x10
c00237cf:	84 c0                	test   al,al
c00237d1:	79 27                	jns    c00237fa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237d3:	bb 01 00 00 00       	mov    ebx,0x1
c00237d8:	53                   	push   ebx
c00237d9:	56                   	push   esi
c00237da:	57                   	push   edi
c00237db:	55                   	push   ebp
c00237dc:	e8 61 f7 ff ff       	call   c0022f42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237e1:	83 c4 10             	add    esp,0x10
c00237e4:	66 40                	inc    ax
c00237e6:	74 0c                	je     c00237f4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237e8:	53                   	push   ebx
c00237e9:	56                   	push   esi
c00237ea:	57                   	push   edi
c00237eb:	55                   	push   ebp
c00237ec:	e8 ed fd ff ff       	call   c00235de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237f1:	83 c4 10             	add    esp,0x10
c00237f4:	43                   	inc    ebx
c00237f5:	83 fb 08             	cmp    ebx,0x8
c00237f8:	75 de                	jne    c00237d8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237fa:	83 c4 0c             	add    esp,0xc
c00237fd:	5b                   	pop    ebx
c00237fe:	5e                   	pop    esi
c00237ff:	5f                   	pop    edi
c0023800:	5d                   	pop    ebp
c0023801:	c3                   	ret    

c0023802 <PCI::detect()>:
c0023802:	56                   	push   esi
c0023803:	53                   	push   ebx
c0023804:	53                   	push   ebx
c0023805:	31 db                	xor    ebx,ebx
c0023807:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002380b:	6a 00                	push   0x0
c002380d:	6a 00                	push   0x0
c002380f:	6a 00                	push   0x0
c0023811:	56                   	push   esi
c0023812:	e8 4f f7 ff ff       	call   c0022f66 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023817:	83 c4 10             	add    esp,0x10
c002381a:	a8 80                	test   al,0x80
c002381c:	75 21                	jne    c002383f <PCI::detect()+0x3d>
c002381e:	51                   	push   ecx
c002381f:	51                   	push   ecx
c0023820:	6a 00                	push   0x0
c0023822:	56                   	push   esi
c0023823:	e8 20 fc ff ff       	call   c0023448 <PCI::checkBus(unsigned char)>
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	eb 24                	jmp    c0023851 <PCI::detect()+0x4f>
c002382d:	52                   	push   edx
c002382e:	52                   	push   edx
c002382f:	53                   	push   ebx
c0023830:	43                   	inc    ebx
c0023831:	56                   	push   esi
c0023832:	e8 11 fc ff ff       	call   c0023448 <PCI::checkBus(unsigned char)>
c0023837:	83 c4 10             	add    esp,0x10
c002383a:	83 fb 08             	cmp    ebx,0x8
c002383d:	74 12                	je     c0023851 <PCI::detect()+0x4f>
c002383f:	53                   	push   ebx
c0023840:	6a 00                	push   0x0
c0023842:	6a 00                	push   0x0
c0023844:	56                   	push   esi
c0023845:	e8 f8 f6 ff ff       	call   c0022f42 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002384a:	83 c4 10             	add    esp,0x10
c002384d:	66 40                	inc    ax
c002384f:	74 dc                	je     c002382d <PCI::detect()+0x2b>
c0023851:	58                   	pop    eax
c0023852:	5b                   	pop    ebx
c0023853:	5e                   	pop    esi
c0023854:	c3                   	ret    
c0023855:	90                   	nop

c0023856 <IDE::close(int, int, void*)>:
c0023856:	83 c8 ff             	or     eax,0xffffffff
c0023859:	c3                   	ret    

c002385a <IDE::IDE()>:
c002385a:	83 ec 0c             	sub    esp,0xc
c002385d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023861:	83 ec 08             	sub    esp,0x8
c0023864:	68 34 d5 02 c0       	push   0xc002d534
c0023869:	50                   	push   eax
c002386a:	e8 63 08 ff ff       	call   c00140d2 <HardDiskController::HardDiskController(char const*)>
c002386f:	83 c4 10             	add    esp,0x10
c0023872:	ba 74 d7 02 c0       	mov    edx,0xc002d774
c0023877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387b:	89 10                	mov    DWORD PTR [eax],edx
c002387d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023881:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023888:	90                   	nop
c0023889:	83 c4 0c             	add    esp,0xc
c002388c:	c3                   	ret    
c002388d:	90                   	nop

c002388e <IDE::prepareInterrupt(unsigned char)>:
c002388e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023893:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023897:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002389f:	c3                   	ret    

c00238a0 <selectDrive(unsigned char, unsigned char)>:
c00238a0:	c3                   	ret    
c00238a1:	90                   	nop

c00238a2 <IDE::getBase(unsigned char)>:
c00238a2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00238a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238ab:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00238b3:	c3                   	ret    

c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00238b4:	55                   	push   ebp
c00238b5:	57                   	push   edi
c00238b6:	56                   	push   esi
c00238b7:	53                   	push   ebx
c00238b8:	83 ec 1c             	sub    esp,0x1c
c00238bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238c3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00238c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238ce:	80 f9 03             	cmp    cl,0x3
c00238d1:	77 51                	ja     c0023924 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238d7:	0f b6 f2             	movzx  esi,dl
c00238da:	0f b6 db             	movzx  ebx,bl
c00238dd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238e0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238e4:	83 ca 80             	or     edx,0xffffff80
c00238e7:	0f b6 d2             	movzx  edx,dl
c00238ea:	52                   	push   edx
c00238eb:	6a 0c                	push   0xc
c00238ed:	56                   	push   esi
c00238ee:	57                   	push   edi
c00238ef:	e8 c0 ff ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238fd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023901:	ee                   	out    dx,al
c0023902:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023907:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002390b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002390f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023913:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002391b:	83 c4 2c             	add    esp,0x2c
c002391e:	5b                   	pop    ebx
c002391f:	5e                   	pop    esi
c0023920:	5f                   	pop    edi
c0023921:	5d                   	pop    ebp
c0023922:	eb 90                	jmp    c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023924:	80 fb 07             	cmp    bl,0x7
c0023927:	77 12                	ja     c002393b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023929:	0f b6 d2             	movzx  edx,dl
c002392c:	0f b6 db             	movzx  ebx,bl
c002392f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023937:	89 da                	mov    edx,ebx
c0023939:	eb 2f                	jmp    c002396a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002393b:	80 fb 0d             	cmp    bl,0xd
c002393e:	77 13                	ja     c0023953 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023940:	0f b6 d2             	movzx  edx,dl
c0023943:	0f b6 db             	movzx  ebx,bl
c0023946:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002394d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023951:	eb 17                	jmp    c002396a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023953:	80 fb 15             	cmp    bl,0x15
c0023956:	77 13                	ja     c002396b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023958:	0f b6 d2             	movzx  edx,dl
c002395b:	0f b6 db             	movzx  ebx,bl
c002395e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023966:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002396a:	ee                   	out    dx,al
c002396b:	83 c4 1c             	add    esp,0x1c
c002396e:	5b                   	pop    ebx
c002396f:	5e                   	pop    esi
c0023970:	5f                   	pop    edi
c0023971:	5d                   	pop    ebp
c0023972:	c3                   	ret    
c0023973:	90                   	nop

c0023974 <IDE::read(unsigned char, unsigned char)>:
c0023974:	55                   	push   ebp
c0023975:	57                   	push   edi
c0023976:	56                   	push   esi
c0023977:	53                   	push   ebx
c0023978:	83 ec 1c             	sub    esp,0x1c
c002397b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002397f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023983:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023986:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002398a:	3c 03                	cmp    al,0x3
c002398c:	77 43                	ja     c00239d1 <IDE::read(unsigned char, unsigned char)+0x5d>
c002398e:	0f b6 f2             	movzx  esi,dl
c0023991:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023994:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023998:	83 c8 80             	or     eax,0xffffff80
c002399b:	0f b6 c0             	movzx  eax,al
c002399e:	50                   	push   eax
c002399f:	6a 0c                	push   0xc
c00239a1:	56                   	push   esi
c00239a2:	57                   	push   edi
c00239a3:	e8 0c ff ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00239ad:	0f b6 c3             	movzx  eax,bl
c00239b0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00239b4:	ec                   	in     al,dx
c00239b5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239b9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00239be:	52                   	push   edx
c00239bf:	6a 0c                	push   0xc
c00239c1:	56                   	push   esi
c00239c2:	57                   	push   edi
c00239c3:	e8 ec fe ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c8:	83 c4 20             	add    esp,0x20
c00239cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239cf:	eb 49                	jmp    c0023a1a <IDE::read(unsigned char, unsigned char)+0xa6>
c00239d1:	80 fb 07             	cmp    bl,0x7
c00239d4:	77 12                	ja     c00239e8 <IDE::read(unsigned char, unsigned char)+0x74>
c00239d6:	0f b6 d2             	movzx  edx,dl
c00239d9:	0f b6 c3             	movzx  eax,bl
c00239dc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239e4:	89 c2                	mov    edx,eax
c00239e6:	eb 31                	jmp    c0023a19 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239e8:	80 fb 0d             	cmp    bl,0xd
c00239eb:	77 13                	ja     c0023a00 <IDE::read(unsigned char, unsigned char)+0x8c>
c00239ed:	0f b6 d2             	movzx  edx,dl
c00239f0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239f7:	0f b6 d3             	movzx  edx,bl
c00239fa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239fe:	eb 19                	jmp    c0023a19 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a00:	31 c0                	xor    eax,eax
c0023a02:	80 fb 15             	cmp    bl,0x15
c0023a05:	77 13                	ja     c0023a1a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a07:	0f b6 d2             	movzx  edx,dl
c0023a0a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023a12:	0f b6 d3             	movzx  edx,bl
c0023a15:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023a19:	ec                   	in     al,dx
c0023a1a:	83 c4 1c             	add    esp,0x1c
c0023a1d:	5b                   	pop    ebx
c0023a1e:	5e                   	pop    esi
c0023a1f:	5f                   	pop    edi
c0023a20:	5d                   	pop    ebp
c0023a21:	c3                   	ret    

c0023a22 <IDE::waitInterrupt(unsigned char)>:
c0023a22:	55                   	push   ebp
c0023a23:	57                   	push   edi
c0023a24:	56                   	push   esi
c0023a25:	53                   	push   ebx
c0023a26:	31 db                	xor    ebx,ebx
c0023a28:	83 ec 0c             	sub    esp,0xc
c0023a2b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a2f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a34:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a3c:	89 e8                	mov    eax,ebp
c0023a3e:	84 c0                	test   al,al
c0023a40:	75 34                	jne    c0023a76 <IDE::waitInterrupt(unsigned char)+0x54>
c0023a42:	52                   	push   edx
c0023a43:	6a 0c                	push   0xc
c0023a45:	56                   	push   esi
c0023a46:	57                   	push   edi
c0023a47:	e8 28 ff ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023a4c:	83 c4 10             	add    esp,0x10
c0023a4f:	a8 01                	test   al,0x1
c0023a51:	75 2b                	jne    c0023a7e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a53:	f6 c3 04             	test   bl,0x4
c0023a56:	75 16                	jne    c0023a6e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a58:	83 fb 32             	cmp    ebx,0x32
c0023a5b:	7e 11                	jle    c0023a6e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a5d:	50                   	push   eax
c0023a5e:	50                   	push   eax
c0023a5f:	6a 00                	push   0x0
c0023a61:	68 80 96 98 00       	push   0x989680
c0023a66:	e8 6c a9 ff ff       	call   c001e3d7 <nanoSleep(unsigned long long)>
c0023a6b:	83 c4 10             	add    esp,0x10
c0023a6e:	83 fb 3c             	cmp    ebx,0x3c
c0023a71:	74 0b                	je     c0023a7e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a73:	43                   	inc    ebx
c0023a74:	eb be                	jmp    c0023a34 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a76:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a7e:	83 c4 0c             	add    esp,0xc
c0023a81:	89 e8                	mov    eax,ebp
c0023a83:	5b                   	pop    ebx
c0023a84:	5e                   	pop    esi
c0023a85:	5f                   	pop    edi
c0023a86:	5d                   	pop    ebp
c0023a87:	c3                   	ret    

c0023a88 <ideChannel0IRQHandler(regs*, void*)>:
c0023a88:	83 ec 10             	sub    esp,0x10
c0023a8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a8f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a96:	6a 07                	push   0x7
c0023a98:	6a 00                	push   0x0
c0023a9a:	50                   	push   eax
c0023a9b:	e8 d4 fe ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023aa0:	83 c4 1c             	add    esp,0x1c
c0023aa3:	c3                   	ret    

c0023aa4 <ideChannel1IRQHandler(regs*, void*)>:
c0023aa4:	83 ec 10             	sub    esp,0x10
c0023aa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023aab:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023ab2:	6a 07                	push   0x7
c0023ab4:	6a 01                	push   0x1
c0023ab6:	50                   	push   eax
c0023ab7:	e8 b8 fe ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023abc:	83 c4 1c             	add    esp,0x1c
c0023abf:	c3                   	ret    

c0023ac0 <IDE::enableIRQs(unsigned char, bool)>:
c0023ac0:	57                   	push   edi
c0023ac1:	56                   	push   esi
c0023ac2:	be 04 00 00 00       	mov    esi,0x4
c0023ac7:	53                   	push   ebx
c0023ac8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023acd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ad1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023ad6:	0f 94 c0             	sete   al
c0023ad9:	d1 e0                	shl    eax,1
c0023adb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023ae2:	0f b6 c0             	movzx  eax,al
c0023ae5:	50                   	push   eax
c0023ae6:	6a 0c                	push   0xc
c0023ae8:	57                   	push   edi
c0023ae9:	53                   	push   ebx
c0023aea:	e8 c5 fd ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aef:	83 c4 10             	add    esp,0x10
c0023af2:	50                   	push   eax
c0023af3:	6a 0c                	push   0xc
c0023af5:	57                   	push   edi
c0023af6:	53                   	push   ebx
c0023af7:	e8 78 fe ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023afc:	83 c4 10             	add    esp,0x10
c0023aff:	4e                   	dec    esi
c0023b00:	75 f0                	jne    c0023af2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023b02:	5b                   	pop    ebx
c0023b03:	5e                   	pop    esi
c0023b04:	5f                   	pop    edi
c0023b05:	c3                   	ret    

c0023b06 <IDE::open(int, int, void*)>:
c0023b06:	55                   	push   ebp
c0023b07:	57                   	push   edi
c0023b08:	56                   	push   esi
c0023b09:	53                   	push   ebx
c0023b0a:	83 ec 1c             	sub    esp,0x1c
c0023b0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023b11:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023b1a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b23:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b2a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b31:	0f 85 b0 02 00 00    	jne    c0023de7 <IDE::open(int, int, void*)+0x2e1>
c0023b37:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b3d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b41:	83 e0 7f             	and    eax,0x7f
c0023b44:	3c 05                	cmp    al,0x5
c0023b46:	74 04                	je     c0023b4c <IDE::open(int, int, void*)+0x46>
c0023b48:	3c 0f                	cmp    al,0xf
c0023b4a:	75 32                	jne    c0023b7e <IDE::open(int, int, void*)+0x78>
c0023b4c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b52:	83 e0 fc             	and    eax,0xfffffffc
c0023b55:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b5c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b62:	83 e0 fc             	and    eax,0xfffffffc
c0023b65:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b6c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b72:	83 e0 fc             	and    eax,0xfffffffc
c0023b75:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b7c:	eb 14                	jmp    c0023b92 <IDE::open(int, int, void*)+0x8c>
c0023b7e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b88:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b92:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b99:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ba4:	89 c6                	mov    esi,eax
c0023ba6:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023bab:	c1 e6 10             	shl    esi,0x10
c0023bae:	89 e8                	mov    eax,ebp
c0023bb0:	89 fa                	mov    edx,edi
c0023bb2:	c1 e0 0b             	shl    eax,0xb
c0023bb5:	09 f0                	or     eax,esi
c0023bb7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023bbe:	c1 e6 08             	shl    esi,0x8
c0023bc1:	09 c6                	or     esi,eax
c0023bc3:	89 f0                	mov    eax,esi
c0023bc5:	0d 08 00 00 80       	or     eax,0x80000008
c0023bca:	ef                   	out    dx,eax
c0023bcb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023bd0:	89 ca                	mov    edx,ecx
c0023bd2:	ed                   	in     eax,dx
c0023bd3:	c1 e8 10             	shr    eax,0x10
c0023bd6:	3d ff ff 00 00       	cmp    eax,0xffff
c0023bdb:	0f 84 f5 00 00 00    	je     c0023cd6 <IDE::open(int, int, void*)+0x1d0>
c0023be1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023be7:	89 fa                	mov    edx,edi
c0023be9:	89 f0                	mov    eax,esi
c0023beb:	ef                   	out    dx,eax
c0023bec:	b0 fe                	mov    al,0xfe
c0023bee:	89 ca                	mov    edx,ecx
c0023bf0:	ee                   	out    dx,al
c0023bf1:	89 f0                	mov    eax,esi
c0023bf3:	89 fa                	mov    edx,edi
c0023bf5:	ef                   	out    dx,eax
c0023bf6:	89 ca                	mov    edx,ecx
c0023bf8:	ed                   	in     eax,dx
c0023bf9:	3c fe                	cmp    al,0xfe
c0023bfb:	0f 85 a9 00 00 00    	jne    c0023caa <IDE::open(int, int, void*)+0x1a4>
c0023c01:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c0023c07:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023c0e:	74 33                	je     c0023c43 <IDE::open(int, int, void*)+0x13d>
c0023c10:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023c16:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023c1a:	40                   	inc    eax
c0023c1b:	83 ec 0c             	sub    esp,0xc
c0023c1e:	0f b6 c0             	movzx  eax,al
c0023c21:	50                   	push   eax
c0023c22:	55                   	push   ebp
c0023c23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c27:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c2d:	51                   	push   ecx
c0023c2e:	e8 a1 41 ff ff       	call   c0017dd4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c33:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c38:	83 c4 1c             	add    esp,0x1c
c0023c3b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c41:	eb 0a                	jmp    c0023c4d <IDE::open(int, int, void*)+0x147>
c0023c43:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c4d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c54:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c5b:	c1 e1 10             	shl    ecx,0x10
c0023c5e:	c1 e0 08             	shl    eax,0x8
c0023c61:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c66:	09 c1                	or     ecx,eax
c0023c68:	89 fa                	mov    edx,edi
c0023c6a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c71:	c1 e0 0b             	shl    eax,0xb
c0023c74:	09 c1                	or     ecx,eax
c0023c76:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c7c:	89 c8                	mov    eax,ecx
c0023c7e:	ef                   	out    dx,eax
c0023c7f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c84:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c8a:	89 f2                	mov    edx,esi
c0023c8c:	ee                   	out    dx,al
c0023c8d:	89 c8                	mov    eax,ecx
c0023c8f:	89 fa                	mov    edx,edi
c0023c91:	ef                   	out    dx,eax
c0023c92:	89 f2                	mov    edx,esi
c0023c94:	ed                   	in     eax,dx
c0023c95:	0f b6 c0             	movzx  eax,al
c0023c98:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c9e:	74 46                	je     c0023ce6 <IDE::open(int, int, void*)+0x1e0>
c0023ca0:	83 ec 0c             	sub    esp,0xc
c0023ca3:	68 4c d5 02 c0       	push   0xc002d54c
c0023ca8:	eb 34                	jmp    c0023cde <IDE::open(int, int, void*)+0x1d8>
c0023caa:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023cb3:	75 17                	jne    c0023ccc <IDE::open(int, int, void*)+0x1c6>
c0023cb5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023cba:	74 07                	je     c0023cc3 <IDE::open(int, int, void*)+0x1bd>
c0023cbc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023cc1:	75 09                	jne    c0023ccc <IDE::open(int, int, void*)+0x1c6>
c0023cc3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023cca:	eb 1a                	jmp    c0023ce6 <IDE::open(int, int, void*)+0x1e0>
c0023ccc:	83 ec 0c             	sub    esp,0xc
c0023ccf:	68 54 d5 02 c0       	push   0xc002d554
c0023cd4:	eb 08                	jmp    c0023cde <IDE::open(int, int, void*)+0x1d8>
c0023cd6:	83 ec 0c             	sub    esp,0xc
c0023cd9:	68 85 d5 02 c0       	push   0xc002d585
c0023cde:	e8 3e 66 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023ced:	79 1a                	jns    c0023d09 <IDE::open(int, int, void*)+0x203>
c0023cef:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023cf5:	83 e0 fc             	and    eax,0xfffffffc
c0023cf8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023cff:	83 c0 08             	add    eax,0x8
c0023d02:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023d09:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023d0f:	89 c2                	mov    edx,eax
c0023d11:	83 e2 0f             	and    edx,0xf
c0023d14:	66 83 fa 08          	cmp    dx,0x8
c0023d18:	75 0a                	jne    c0023d24 <IDE::open(int, int, void*)+0x21e>
c0023d1a:	83 e8 02             	sub    eax,0x2
c0023d1d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d24:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d2a:	89 c2                	mov    edx,eax
c0023d2c:	83 e2 0f             	and    edx,0xf
c0023d2f:	66 83 fa 08          	cmp    dx,0x8
c0023d33:	75 0a                	jne    c0023d3f <IDE::open(int, int, void*)+0x239>
c0023d35:	83 e8 02             	sub    eax,0x2
c0023d38:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d3f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d46:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d4d:	89 d0                	mov    eax,edx
c0023d4f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d56:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d5d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d62:	0f b6 c9             	movzx  ecx,cl
c0023d65:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d6c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d6f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d73:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d77:	8d 50 02             	lea    edx,[eax+0x2]
c0023d7a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d7f:	0f b6 d2             	movzx  edx,dl
c0023d82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d88:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d8b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d8f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d93:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d96:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d9b:	0f b6 c9             	movzx  ecx,cl
c0023d9e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023da4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023da7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023dab:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023daf:	8d 50 04             	lea    edx,[eax+0x4]
c0023db2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023db8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023dbd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023dc4:	66 85 f6             	test   si,si
c0023dc7:	74 3e                	je     c0023e07 <IDE::open(int, int, void*)+0x301>
c0023dc9:	0f b6 d2             	movzx  edx,dl
c0023dcc:	83 c0 05             	add    eax,0x5
c0023dcf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023dd2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dd6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023dda:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023de0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023de5:	eb 20                	jmp    c0023e07 <IDE::open(int, int, void*)+0x301>
c0023de7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023df1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023dfb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e02:	e9 02 ff ff ff       	jmp    c0023d09 <IDE::open(int, int, void*)+0x203>
c0023e07:	52                   	push   edx
c0023e08:	52                   	push   edx
c0023e09:	6a 00                	push   0x0
c0023e0b:	53                   	push   ebx
c0023e0c:	e8 7d fa ff ff       	call   c002388e <IDE::prepareInterrupt(unsigned char)>
c0023e11:	59                   	pop    ecx
c0023e12:	5e                   	pop    esi
c0023e13:	6a 01                	push   0x1
c0023e15:	53                   	push   ebx
c0023e16:	e8 73 fa ff ff       	call   c002388e <IDE::prepareInterrupt(unsigned char)>
c0023e1b:	83 c4 0c             	add    esp,0xc
c0023e1e:	6a 00                	push   0x0
c0023e20:	6a 00                	push   0x0
c0023e22:	53                   	push   ebx
c0023e23:	e8 98 fc ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0023e28:	83 c4 0c             	add    esp,0xc
c0023e2b:	6a 00                	push   0x0
c0023e2d:	6a 01                	push   0x1
c0023e2f:	53                   	push   ebx
c0023e30:	e8 8b fc ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0023e35:	83 c4 10             	add    esp,0x10
c0023e38:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e3f:	74 40                	je     c0023e81 <IDE::open(int, int, void*)+0x37b>
c0023e41:	83 ec 0c             	sub    esp,0xc
c0023e44:	68 af d5 02 c0       	push   0xc002d5af
c0023e49:	e8 9d ea fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023e4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e51:	6a 01                	push   0x1
c0023e53:	68 88 3a 02 c0       	push   0xc0023a88
c0023e58:	6a 0e                	push   0xe
c0023e5a:	53                   	push   ebx
c0023e5b:	e8 3c fe fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e60:	83 c4 14             	add    esp,0x14
c0023e63:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e69:	53                   	push   ebx
c0023e6a:	6a 01                	push   0x1
c0023e6c:	68 a4 3a 02 c0       	push   0xc0023aa4
c0023e71:	6a 0f                	push   0xf
c0023e73:	53                   	push   ebx
c0023e74:	e8 23 fe fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e79:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e7f:	eb 4a                	jmp    c0023ecb <IDE::open(int, int, void*)+0x3c5>
c0023e81:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e8b:	50                   	push   eax
c0023e8c:	6a 0f                	push   0xf
c0023e8e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e94:	68 cb d5 02 c0       	push   0xc002d5cb
c0023e99:	e8 4d ea fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023e9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ea1:	6a 00                	push   0x0
c0023ea3:	68 88 3a 02 c0       	push   0xc0023a88
c0023ea8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023eae:	53                   	push   ebx
c0023eaf:	e8 e8 fd fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023eb4:	83 c4 14             	add    esp,0x14
c0023eb7:	53                   	push   ebx
c0023eb8:	6a 00                	push   0x0
c0023eba:	68 a4 3a 02 c0       	push   0xc0023aa4
c0023ebf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023ec5:	53                   	push   ebx
c0023ec6:	e8 d1 fd fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ecd:	83 c4 20             	add    esp,0x20
c0023ed0:	83 ec 0c             	sub    esp,0xc
c0023ed3:	53                   	push   ebx
c0023ed4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023ed7:	83 c4 0c             	add    esp,0xc
c0023eda:	6a 07                	push   0x7
c0023edc:	6a 00                	push   0x0
c0023ede:	53                   	push   ebx
c0023edf:	e8 90 fa ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023ee4:	83 c4 0c             	add    esp,0xc
c0023ee7:	6a 07                	push   0x7
c0023ee9:	6a 01                	push   0x1
c0023eeb:	53                   	push   ebx
c0023eec:	e8 83 fa ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0023ef1:	83 c4 0c             	add    esp,0xc
c0023ef4:	6a 01                	push   0x1
c0023ef6:	6a 00                	push   0x0
c0023ef8:	53                   	push   ebx
c0023ef9:	e8 c2 fb ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0023efe:	83 c4 0c             	add    esp,0xc
c0023f01:	6a 01                	push   0x1
c0023f03:	6a 01                	push   0x1
c0023f05:	53                   	push   ebx
c0023f06:	e8 b5 fb ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0023f0b:	83 c4 2c             	add    esp,0x2c
c0023f0e:	31 c0                	xor    eax,eax
c0023f10:	5b                   	pop    ebx
c0023f11:	5e                   	pop    esi
c0023f12:	5f                   	pop    edi
c0023f13:	5d                   	pop    ebp
c0023f14:	c3                   	ret    
c0023f15:	90                   	nop

c0023f16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023f16:	55                   	push   ebp
c0023f17:	57                   	push   edi
c0023f18:	56                   	push   esi
c0023f19:	53                   	push   ebx
c0023f1a:	83 ec 1c             	sub    esp,0x1c
c0023f1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023f21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f25:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f28:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f2c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f30:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f34:	80 fa 03             	cmp    dl,0x3
c0023f37:	77 5d                	ja     c0023f96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f39:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f41:	0f b6 db             	movzx  ebx,bl
c0023f44:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f47:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f4b:	83 ca 80             	or     edx,0xffffff80
c0023f4e:	0f b6 d2             	movzx  edx,dl
c0023f51:	52                   	push   edx
c0023f52:	6a 0c                	push   0xc
c0023f54:	53                   	push   ebx
c0023f55:	56                   	push   esi
c0023f56:	e8 59 f9 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f5b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f64:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f68:	0f b6 c0             	movzx  eax,al
c0023f6b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f6f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f71:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f76:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f7a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f82:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f8a:	83 c4 2c             	add    esp,0x2c
c0023f8d:	5b                   	pop    ebx
c0023f8e:	5e                   	pop    esi
c0023f8f:	5f                   	pop    edi
c0023f90:	5d                   	pop    ebp
c0023f91:	e9 1e f9 ff ff       	jmp    c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f96:	3c 07                	cmp    al,0x7
c0023f98:	77 10                	ja     c0023faa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f9a:	0f b6 db             	movzx  ebx,bl
c0023f9d:	0f b6 d0             	movzx  edx,al
c0023fa0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023fa8:	eb 2d                	jmp    c0023fd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023faa:	3c 0d                	cmp    al,0xd
c0023fac:	77 13                	ja     c0023fc1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023fae:	0f b6 db             	movzx  ebx,bl
c0023fb1:	0f b6 c0             	movzx  eax,al
c0023fb4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023fbb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023fbf:	eb 16                	jmp    c0023fd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023fc1:	3c 15                	cmp    al,0x15
c0023fc3:	77 14                	ja     c0023fd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023fc5:	0f b6 db             	movzx  ebx,bl
c0023fc8:	0f b6 c0             	movzx  eax,al
c0023fcb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fd3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023fd7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fd9:	83 c4 1c             	add    esp,0x1c
c0023fdc:	5b                   	pop    ebx
c0023fdd:	5e                   	pop    esi
c0023fde:	5f                   	pop    edi
c0023fdf:	5d                   	pop    ebp
c0023fe0:	c3                   	ret    
c0023fe1:	90                   	nop

c0023fe2 <IDE::detect()>:
c0023fe2:	55                   	push   ebp
c0023fe3:	57                   	push   edi
c0023fe4:	56                   	push   esi
c0023fe5:	53                   	push   ebx
c0023fe6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023fec:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023ff3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023ffa:	0f 85 be 02 00 00    	jne    c00242be <IDE::detect()+0x2dc>
c0024000:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024007:	31 f6                	xor    esi,esi
c0024009:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024011:	31 ed                	xor    ebp,ebp
c0024013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024017:	c1 e0 06             	shl    eax,0x6
c002401a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024022:	89 e8                	mov    eax,ebp
c0024024:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024028:	c1 e0 04             	shl    eax,0x4
c002402b:	83 c8 a0             	or     eax,0xffffffa0
c002402e:	0f b6 c0             	movzx  eax,al
c0024031:	50                   	push   eax
c0024032:	6a 06                	push   0x6
c0024034:	56                   	push   esi
c0024035:	53                   	push   ebx
c0024036:	e8 79 f8 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002403b:	83 c4 0c             	add    esp,0xc
c002403e:	6a 0c                	push   0xc
c0024040:	56                   	push   esi
c0024041:	53                   	push   ebx
c0024042:	e8 2d f9 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024047:	83 c4 0c             	add    esp,0xc
c002404a:	6a 0c                	push   0xc
c002404c:	56                   	push   esi
c002404d:	53                   	push   ebx
c002404e:	e8 21 f9 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	6a 0c                	push   0xc
c0024058:	56                   	push   esi
c0024059:	53                   	push   ebx
c002405a:	e8 15 f9 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002405f:	83 c4 0c             	add    esp,0xc
c0024062:	6a 0c                	push   0xc
c0024064:	56                   	push   esi
c0024065:	53                   	push   ebx
c0024066:	e8 09 f9 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002406b:	68 ec 00 00 00       	push   0xec
c0024070:	6a 07                	push   0x7
c0024072:	56                   	push   esi
c0024073:	53                   	push   ebx
c0024074:	e8 3b f8 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024079:	83 c4 1c             	add    esp,0x1c
c002407c:	6a 0c                	push   0xc
c002407e:	56                   	push   esi
c002407f:	53                   	push   ebx
c0024080:	e8 ef f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024085:	83 c4 0c             	add    esp,0xc
c0024088:	6a 0c                	push   0xc
c002408a:	56                   	push   esi
c002408b:	53                   	push   ebx
c002408c:	e8 e3 f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024091:	83 c4 0c             	add    esp,0xc
c0024094:	6a 0c                	push   0xc
c0024096:	56                   	push   esi
c0024097:	53                   	push   ebx
c0024098:	e8 d7 f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002409d:	83 c4 0c             	add    esp,0xc
c00240a0:	6a 0c                	push   0xc
c00240a2:	56                   	push   esi
c00240a3:	53                   	push   ebx
c00240a4:	e8 cb f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c00240a9:	83 c4 0c             	add    esp,0xc
c00240ac:	6a 0c                	push   0xc
c00240ae:	56                   	push   esi
c00240af:	53                   	push   ebx
c00240b0:	e8 bf f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c00240b5:	83 c4 10             	add    esp,0x10
c00240b8:	84 c0                	test   al,al
c00240ba:	0f 84 8b 01 00 00    	je     c002424b <IDE::detect()+0x269>
c00240c0:	31 ff                	xor    edi,edi
c00240c2:	50                   	push   eax
c00240c3:	6a 0c                	push   0xc
c00240c5:	56                   	push   esi
c00240c6:	53                   	push   ebx
c00240c7:	e8 a8 f8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c00240cc:	83 c4 10             	add    esp,0x10
c00240cf:	a8 01                	test   al,0x1
c00240d1:	0f 85 8e 01 00 00    	jne    c0024265 <IDE::detect()+0x283>
c00240d7:	84 c0                	test   al,al
c00240d9:	78 04                	js     c00240df <IDE::detect()+0xfd>
c00240db:	a8 08                	test   al,0x8
c00240dd:	75 27                	jne    c0024106 <IDE::detect()+0x124>
c00240df:	47                   	inc    edi
c00240e0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240e6:	7e da                	jle    c00240c2 <IDE::detect()+0xe0>
c00240e8:	50                   	push   eax
c00240e9:	50                   	push   eax
c00240ea:	6a 00                	push   0x0
c00240ec:	68 40 4b 4c 00       	push   0x4c4b40
c00240f1:	e8 e1 a2 ff ff       	call   c001e3d7 <nanoSleep(unsigned long long)>
c00240f6:	83 c4 10             	add    esp,0x10
c00240f9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240ff:	75 c1                	jne    c00240c2 <IDE::detect()+0xe0>
c0024101:	e9 5f 01 00 00       	jmp    c0024265 <IDE::detect()+0x283>
c0024106:	31 c9                	xor    ecx,ecx
c0024108:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002410c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024110:	83 ec 0c             	sub    esp,0xc
c0024113:	68 80 00 00 00       	push   0x80
c0024118:	57                   	push   edi
c0024119:	6a 00                	push   0x0
c002411b:	56                   	push   esi
c002411c:	53                   	push   ebx
c002411d:	e8 f4 fd ff ff       	call   c0023f16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024122:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002412b:	89 d1                	mov    ecx,edx
c002412d:	c1 e0 06             	shl    eax,0x6
c0024130:	01 d8                	add    eax,ebx
c0024132:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024139:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024140:	89 f2                	mov    edx,esi
c0024142:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024148:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002414c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024152:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024156:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002415d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024165:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002416c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024174:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002417a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024181:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024187:	8d 54 24 58          	lea    edx,[esp+0x58]
c002418b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002418f:	83 c4 20             	add    esp,0x20
c0024192:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024195:	83 c0 02             	add    eax,0x2
c0024198:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002419e:	83 c7 02             	add    edi,0x2
c00241a1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00241a4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00241aa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00241ae:	75 e2                	jne    c0024192 <IDE::detect()+0x1b0>
c00241b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241b4:	c1 e0 06             	shl    eax,0x6
c00241b7:	01 d8                	add    eax,ebx
c00241b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00241bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00241c6:	66 c1 ea 09          	shr    dx,0x9
c00241ca:	83 e2 01             	and    edx,0x1
c00241cd:	84 c9                	test   cl,cl
c00241cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241d5:	75 2f                	jne    c0024206 <IDE::detect()+0x224>
c00241d7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241dd:	85 c0                	test   eax,eax
c00241df:	74 66                	je     c0024247 <IDE::detect()+0x265>
c00241e1:	50                   	push   eax
c00241e2:	55                   	push   ebp
c00241e3:	56                   	push   esi
c00241e4:	68 e7 d5 02 c0       	push   0xc002d5e7
c00241e9:	e8 fd e6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00241ee:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241f5:	e8 92 b6 fe ff       	call   c000f88c <malloc>
c00241fa:	89 c7                	mov    edi,eax
c00241fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00241ff:	e8 78 06 00 00       	call   c002487c <ATA::ATA()>
c0024204:	eb 28                	jmp    c002422e <IDE::detect()+0x24c>
c0024206:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002420c:	55                   	push   ebp
c002420d:	56                   	push   esi
c002420e:	68 16 d6 02 c0       	push   0xc002d616
c0024213:	e8 d3 e6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024218:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002421f:	e8 68 b6 fe ff       	call   c000f88c <malloc>
c0024224:	89 c7                	mov    edi,eax
c0024226:	89 04 24             	mov    DWORD PTR [esp],eax
c0024229:	e8 56 0c 00 00       	call   c0024e84 <ATAPI::ATAPI()>
c002422e:	5a                   	pop    edx
c002422f:	59                   	pop    ecx
c0024230:	57                   	push   edi
c0024231:	53                   	push   ebx
c0024232:	e8 ed fa fe ff       	call   c0013d24 <Device::addChild(Device*)>
c0024237:	8b 07                	mov    eax,DWORD PTR [edi]
c0024239:	53                   	push   ebx
c002423a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002423e:	6a 00                	push   0x0
c0024240:	57                   	push   edi
c0024241:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024244:	83 c4 20             	add    esp,0x20
c0024247:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002424b:	4d                   	dec    ebp
c002424c:	74 0a                	je     c0024258 <IDE::detect()+0x276>
c002424e:	bd 01 00 00 00       	mov    ebp,0x1
c0024253:	e9 bb fd ff ff       	jmp    c0024013 <IDE::detect()+0x31>
c0024258:	4e                   	dec    esi
c0024259:	74 63                	je     c00242be <IDE::detect()+0x2dc>
c002425b:	be 01 00 00 00       	mov    esi,0x1
c0024260:	e9 ac fd ff ff       	jmp    c0024011 <IDE::detect()+0x2f>
c0024265:	50                   	push   eax
c0024266:	6a 04                	push   0x4
c0024268:	56                   	push   esi
c0024269:	53                   	push   ebx
c002426a:	e8 05 f7 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002426f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024273:	83 c4 0c             	add    esp,0xc
c0024276:	6a 05                	push   0x5
c0024278:	56                   	push   esi
c0024279:	53                   	push   ebx
c002427a:	e8 f5 f6 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002427f:	83 c4 10             	add    esp,0x10
c0024282:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024286:	80 fa 14             	cmp    dl,0x14
c0024289:	75 04                	jne    c002428f <IDE::detect()+0x2ad>
c002428b:	3c eb                	cmp    al,0xeb
c002428d:	eb 07                	jmp    c0024296 <IDE::detect()+0x2b4>
c002428f:	3c 96                	cmp    al,0x96
c0024291:	75 b8                	jne    c002424b <IDE::detect()+0x269>
c0024293:	80 fa 69             	cmp    dl,0x69
c0024296:	75 b3                	jne    c002424b <IDE::detect()+0x269>
c0024298:	68 a1 00 00 00       	push   0xa1
c002429d:	6a 07                	push   0x7
c002429f:	56                   	push   esi
c00242a0:	53                   	push   ebx
c00242a1:	e8 0e f6 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a6:	5f                   	pop    edi
c00242a7:	58                   	pop    eax
c00242a8:	6a 00                	push   0x0
c00242aa:	68 40 42 0f 00       	push   0xf4240
c00242af:	e8 23 a1 ff ff       	call   c001e3d7 <nanoSleep(unsigned long long)>
c00242b4:	83 c4 10             	add    esp,0x10
c00242b7:	b1 01                	mov    cl,0x1
c00242b9:	e9 4a fe ff ff       	jmp    c0024108 <IDE::detect()+0x126>
c00242be:	81 c4 1c 02 00 00    	add    esp,0x21c
c00242c4:	5b                   	pop    ebx
c00242c5:	5e                   	pop    esi
c00242c6:	5f                   	pop    edi
c00242c7:	5d                   	pop    ebp
c00242c8:	c3                   	ret    
c00242c9:	90                   	nop

c00242ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242ca:	55                   	push   ebp
c00242cb:	57                   	push   edi
c00242cc:	56                   	push   esi
c00242cd:	53                   	push   ebx
c00242ce:	83 ec 1c             	sub    esp,0x1c
c00242d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242d9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242dd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242e1:	88 c3                	mov    bl,al
c00242e3:	84 c0                	test   al,al
c00242e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242e9:	0f 84 67 01 00 00    	je     c0024456 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242ef:	83 ec 0c             	sub    esp,0xc
c00242f2:	68 47 d6 02 c0       	push   0xc002d647
c00242f7:	e8 ef e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00242fc:	83 c4 10             	add    esp,0x10
c00242ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024303:	3c 01                	cmp    al,0x1
c0024305:	75 17                	jne    c002431e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024307:	83 ec 0c             	sub    esp,0xc
c002430a:	b3 13                	mov    bl,0x13
c002430c:	68 53 d6 02 c0       	push   0xc002d653
c0024311:	e8 d5 e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024316:	83 c4 10             	add    esp,0x10
c0024319:	e9 25 01 00 00       	jmp    c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002431e:	3c 02                	cmp    al,0x2
c0024320:	0f 85 ef 00 00 00    	jne    c0024415 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024326:	d1 e6                	shl    esi,1
c0024328:	09 ee                	or     esi,ebp
c002432a:	52                   	push   edx
c002432b:	89 f0                	mov    eax,esi
c002432d:	6a 01                	push   0x1
c002432f:	0f b6 f0             	movzx  esi,al
c0024332:	c1 e6 06             	shl    esi,0x6
c0024335:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002433d:	50                   	push   eax
c002433e:	57                   	push   edi
c002433f:	e8 30 f6 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	89 c6                	mov    esi,eax
c0024349:	a8 01                	test   al,0x1
c002434b:	74 12                	je     c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002434d:	83 ec 0c             	sub    esp,0xc
c0024350:	b3 07                	mov    bl,0x7
c0024352:	68 68 d6 02 c0       	push   0xc002d668
c0024357:	e8 8f e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002435c:	83 c4 10             	add    esp,0x10
c002435f:	f7 c6 02 00 00 00    	test   esi,0x2
c0024365:	74 12                	je     c0024379 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024367:	83 ec 0c             	sub    esp,0xc
c002436a:	b3 03                	mov    bl,0x3
c002436c:	68 86 d6 02 c0       	push   0xc002d686
c0024371:	e8 75 e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024376:	83 c4 10             	add    esp,0x10
c0024379:	f7 c6 04 00 00 00    	test   esi,0x4
c002437f:	74 12                	je     c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024381:	83 ec 0c             	sub    esp,0xc
c0024384:	b3 14                	mov    bl,0x14
c0024386:	68 a6 d6 02 c0       	push   0xc002d6a6
c002438b:	e8 5b e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024390:	83 c4 10             	add    esp,0x10
c0024393:	f7 c6 08 00 00 00    	test   esi,0x8
c0024399:	74 12                	je     c00243ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002439b:	83 ec 0c             	sub    esp,0xc
c002439e:	b3 03                	mov    bl,0x3
c00243a0:	68 86 d6 02 c0       	push   0xc002d686
c00243a5:	e8 41 e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00243aa:	83 c4 10             	add    esp,0x10
c00243ad:	f7 c6 10 00 00 00    	test   esi,0x10
c00243b3:	74 12                	je     c00243c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00243b5:	83 ec 0c             	sub    esp,0xc
c00243b8:	b3 15                	mov    bl,0x15
c00243ba:	68 be d6 02 c0       	push   0xc002d6be
c00243bf:	e8 27 e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00243c4:	83 c4 10             	add    esp,0x10
c00243c7:	f7 c6 20 00 00 00    	test   esi,0x20
c00243cd:	74 12                	je     c00243e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243cf:	83 ec 0c             	sub    esp,0xc
c00243d2:	b3 03                	mov    bl,0x3
c00243d4:	68 86 d6 02 c0       	push   0xc002d686
c00243d9:	e8 0d e5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	f7 c6 40 00 00 00    	test   esi,0x40
c00243e7:	74 12                	je     c00243fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243e9:	83 ec 0c             	sub    esp,0xc
c00243ec:	b3 16                	mov    bl,0x16
c00243ee:	68 d8 d6 02 c0       	push   0xc002d6d8
c00243f3:	e8 f3 e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	89 f0                	mov    eax,esi
c00243fd:	84 c0                	test   al,al
c00243ff:	79 42                	jns    c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024401:	83 ec 0c             	sub    esp,0xc
c0024404:	b3 0d                	mov    bl,0xd
c0024406:	68 f9 d6 02 c0       	push   0xc002d6f9
c002440b:	e8 db e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024410:	83 c4 10             	add    esp,0x10
c0024413:	eb 2e                	jmp    c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024415:	3c 03                	cmp    al,0x3
c0024417:	75 14                	jne    c002442d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024419:	83 ec 0c             	sub    esp,0xc
c002441c:	b3 17                	mov    bl,0x17
c002441e:	68 0d d7 02 c0       	push   0xc002d70d
c0024423:	e8 c3 e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024428:	83 c4 10             	add    esp,0x10
c002442b:	eb 16                	jmp    c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002442d:	3c 04                	cmp    al,0x4
c002442f:	75 12                	jne    c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024431:	83 ec 0c             	sub    esp,0xc
c0024434:	b3 08                	mov    bl,0x8
c0024436:	68 23 d7 02 c0       	push   0xc002d723
c002443b:	e8 ab e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024440:	83 c4 10             	add    esp,0x10
c0024443:	50                   	push   eax
c0024444:	50                   	push   eax
c0024445:	0f b6 c3             	movzx  eax,bl
c0024448:	50                   	push   eax
c0024449:	68 3b d7 02 c0       	push   0xc002d73b
c002444e:	e8 98 e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024453:	83 c4 10             	add    esp,0x10
c0024456:	83 c4 1c             	add    esp,0x1c
c0024459:	88 d8                	mov    al,bl
c002445b:	5b                   	pop    ebx
c002445c:	5e                   	pop    esi
c002445d:	5f                   	pop    edi
c002445e:	5d                   	pop    ebp
c002445f:	c3                   	ret    

c0024460 <IDE::polling(unsigned char, unsigned int)>:
c0024460:	57                   	push   edi
c0024461:	56                   	push   esi
c0024462:	53                   	push   ebx
c0024463:	bb 04 00 00 00       	mov    ebx,0x4
c0024468:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002446c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024471:	52                   	push   edx
c0024472:	6a 0c                	push   0xc
c0024474:	56                   	push   esi
c0024475:	57                   	push   edi
c0024476:	e8 f9 f4 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c002447b:	83 c4 10             	add    esp,0x10
c002447e:	4b                   	dec    ebx
c002447f:	75 f0                	jne    c0024471 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024481:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024486:	50                   	push   eax
c0024487:	6a 0c                	push   0xc
c0024489:	56                   	push   esi
c002448a:	57                   	push   edi
c002448b:	e8 e4 f4 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024490:	83 c4 10             	add    esp,0x10
c0024493:	a8 01                	test   al,0x1
c0024495:	74 12                	je     c00244a9 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024497:	83 ec 0c             	sub    esp,0xc
c002449a:	68 55 d7 02 c0       	push   0xc002d755
c002449f:	e8 47 e4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00244a4:	83 c4 10             	add    esp,0x10
c00244a7:	eb 17                	jmp    c00244c0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00244a9:	a8 20                	test   al,0x20
c00244ab:	75 0f                	jne    c00244bc <IDE::polling(unsigned char, unsigned int)+0x5c>
c00244ad:	4b                   	dec    ebx
c00244ae:	74 10                	je     c00244c0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00244b0:	84 c0                	test   al,al
c00244b2:	78 d2                	js     c0024486 <IDE::polling(unsigned char, unsigned int)+0x26>
c00244b4:	a8 08                	test   al,0x8
c00244b6:	74 ce                	je     c0024486 <IDE::polling(unsigned char, unsigned int)+0x26>
c00244b8:	31 c0                	xor    eax,eax
c00244ba:	eb 06                	jmp    c00244c2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00244bc:	b0 01                	mov    al,0x1
c00244be:	eb 02                	jmp    c00244c2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00244c0:	b0 02                	mov    al,0x2
c00244c2:	5b                   	pop    ebx
c00244c3:	5e                   	pop    esi
c00244c4:	5f                   	pop    edi
c00244c5:	c3                   	ret    

c00244c6 <SATABus::close(int, int, void*)>:
c00244c6:	31 c0                	xor    eax,eax
c00244c8:	c3                   	ret    
c00244c9:	90                   	nop

c00244ca <SATABus::detect()>:
c00244ca:	c3                   	ret    
c00244cb:	90                   	nop

c00244cc <SATABus::SATABus()>:
c00244cc:	83 ec 0c             	sub    esp,0xc
c00244cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d3:	83 ec 08             	sub    esp,0x8
c00244d6:	68 98 d7 02 c0       	push   0xc002d798
c00244db:	50                   	push   eax
c00244dc:	e8 f1 fb fe ff       	call   c00140d2 <HardDiskController::HardDiskController(char const*)>
c00244e1:	83 c4 10             	add    esp,0x10
c00244e4:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c00244e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ed:	89 10                	mov    DWORD PTR [eax],edx
c00244ef:	83 ec 0c             	sub    esp,0xc
c00244f2:	6a 50                	push   0x50
c00244f4:	e8 69 b7 fe ff       	call   c000fc62 <Phys::allocateContiguousPages(int)>
c00244f9:	83 c4 10             	add    esp,0x10
c00244fc:	89 c2                	mov    edx,eax
c00244fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024502:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024508:	83 ec 0c             	sub    esp,0xc
c002450b:	6a 50                	push   0x50
c002450d:	e8 d3 cf fe ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0024512:	83 c4 10             	add    esp,0x10
c0024515:	89 c2                	mov    edx,eax
c0024517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002451b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024521:	a1 90 f1 02 c0       	mov    eax,ds:0xc002f190
c0024526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002452a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024530:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024534:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002453a:	83 ec 0c             	sub    esp,0xc
c002453d:	6a 03                	push   0x3
c002453f:	6a 50                	push   0x50
c0024541:	51                   	push   ecx
c0024542:	52                   	push   edx
c0024543:	50                   	push   eax
c0024544:	e8 c9 da fe ff       	call   c0012012 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024549:	83 c4 20             	add    esp,0x20
c002454c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024550:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002455a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024560:	83 ec 04             	sub    esp,0x4
c0024563:	52                   	push   edx
c0024564:	50                   	push   eax
c0024565:	68 bc d7 02 c0       	push   0xc002d7bc
c002456a:	e8 7c e3 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002456f:	83 c4 10             	add    esp,0x10
c0024572:	90                   	nop
c0024573:	83 c4 0c             	add    esp,0xc
c0024576:	c3                   	ret    
c0024577:	90                   	nop

c0024578 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024578:	83 ec 0c             	sub    esp,0xc
c002457b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002457f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024582:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024585:	09 c2                	or     edx,eax
c0024587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002458b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024591:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024593:	31 c0                	xor    eax,eax
c0024595:	c1 e9 08             	shr    ecx,0x8
c0024598:	83 e1 0f             	and    ecx,0xf
c002459b:	39 c8                	cmp    eax,ecx
c002459d:	74 0a                	je     c00245a9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002459f:	f6 c2 01             	test   dl,0x1
c00245a2:	74 18                	je     c00245bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00245a4:	d1 ea                	shr    edx,1
c00245a6:	40                   	inc    eax
c00245a7:	eb f2                	jmp    c002459b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00245a9:	83 ec 0c             	sub    esp,0xc
c00245ac:	68 e0 d7 02 c0       	push   0xc002d7e0
c00245b1:	e8 6b 5d ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00245b6:	83 c4 10             	add    esp,0x10
c00245b9:	83 c8 ff             	or     eax,0xffffffff
c00245bc:	83 c4 0c             	add    esp,0xc
c00245bf:	c3                   	ret    

c00245c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00245c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245c4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00245c7:	89 c2                	mov    edx,eax
c00245c9:	c1 ea 08             	shr    edx,0x8
c00245cc:	83 e2 0f             	and    edx,0xf
c00245cf:	fe ca                	dec    dl
c00245d1:	75 31                	jne    c0024604 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245d3:	83 e0 0f             	and    eax,0xf
c00245d6:	3c 03                	cmp    al,0x3
c00245d8:	75 2a                	jne    c0024604 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245da:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245dd:	b8 02 00 00 00       	mov    eax,0x2
c00245e2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245e8:	74 1c                	je     c0024606 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245ea:	b8 04 00 00 00       	mov    eax,0x4
c00245ef:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245f5:	74 0f                	je     c0024606 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245f7:	31 c0                	xor    eax,eax
c00245f9:	83 fa 03             	cmp    edx,0x3
c00245fc:	0f 94 c0             	sete   al
c00245ff:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024603:	c3                   	ret    
c0024604:	31 c0                	xor    eax,eax
c0024606:	c3                   	ret    
c0024607:	90                   	nop

c0024608 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002460c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002460f:	0f ba e2 0f          	bt     edx,0xf
c0024613:	72 f7                	jb     c002460c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024615:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024618:	83 ca 10             	or     edx,0x10
c002461b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002461e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024621:	83 ca 01             	or     edx,0x1
c0024624:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024627:	c3                   	ret    

c0024628 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002462c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002462f:	83 e2 fe             	and    edx,0xfffffffe
c0024632:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024635:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024638:	83 e2 ef             	and    edx,0xffffffef
c002463b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002463e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024641:	0f ba e2 0e          	bt     edx,0xe
c0024645:	72 f7                	jb     c002463e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024647:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002464a:	0f ba e2 0f          	bt     edx,0xf
c002464e:	72 ee                	jb     c002463e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024650:	c3                   	ret    
c0024651:	90                   	nop

c0024652 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024652:	55                   	push   ebp
c0024653:	57                   	push   edi
c0024654:	56                   	push   esi
c0024655:	53                   	push   ebx
c0024656:	83 ec 1c             	sub    esp,0x1c
c0024659:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002465d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024661:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024665:	53                   	push   ebx
c0024666:	89 fd                	mov    ebp,edi
c0024668:	56                   	push   esi
c0024669:	c1 e5 0a             	shl    ebp,0xa
c002466c:	e8 b7 ff ff ff       	call   c0024628 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024671:	83 ec 0c             	sub    esp,0xc
c0024674:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002467a:	01 e8                	add    eax,ebp
c002467c:	89 03                	mov    DWORD PTR [ebx],eax
c002467e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024680:	68 00 04 00 00       	push   0x400
c0024685:	6a 00                	push   0x0
c0024687:	50                   	push   eax
c0024688:	e8 c3 c0 fd ff       	call   c0000750 <memset>
c002468d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024693:	89 fa                	mov    edx,edi
c0024695:	01 e8                	add    eax,ebp
c0024697:	c1 e7 0d             	shl    edi,0xd
c002469a:	89 03                	mov    DWORD PTR [ebx],eax
c002469c:	c1 e2 08             	shl    edx,0x8
c002469f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00246a6:	81 c2 00 80 00 00    	add    edx,0x8000
c00246ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00246b0:	89 d0                	mov    eax,edx
c00246b2:	83 c4 1c             	add    esp,0x1c
c00246b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246bb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00246be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246c1:	68 00 01 00 00       	push   0x100
c00246c6:	6a 00                	push   0x0
c00246c8:	50                   	push   eax
c00246c9:	e8 82 c0 fd ff       	call   c0000750 <memset>
c00246ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246d2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246d8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246e2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246e5:	83 c4 10             	add    esp,0x10
c00246e8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246ef:	31 ff                	xor    edi,edi
c00246f1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246f7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024701:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024707:	83 c5 20             	add    ebp,0x20
c002470a:	01 f8                	add    eax,edi
c002470c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002470f:	52                   	push   edx
c0024710:	68 00 01 00 00       	push   0x100
c0024715:	6a 00                	push   0x0
c0024717:	50                   	push   eax
c0024718:	e8 33 c0 fd ff       	call   c0000750 <memset>
c002471d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024721:	83 c4 10             	add    esp,0x10
c0024724:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002472a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024731:	01 f8                	add    eax,edi
c0024733:	81 c7 00 01 00 00    	add    edi,0x100
c0024739:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002473c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024742:	75 b3                	jne    c00246f7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024744:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024748:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002474c:	83 c4 1c             	add    esp,0x1c
c002474f:	5b                   	pop    ebx
c0024750:	5e                   	pop    esi
c0024751:	5f                   	pop    edi
c0024752:	5d                   	pop    ebp
c0024753:	e9 b0 fe ff ff       	jmp    c0024608 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024758 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024758:	55                   	push   ebp
c0024759:	57                   	push   edi
c002475a:	56                   	push   esi
c002475b:	53                   	push   ebx
c002475c:	31 db                	xor    ebx,ebx
c002475e:	83 ec 0c             	sub    esp,0xc
c0024761:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024765:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024769:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002476c:	f7 c7 01 00 00 00    	test   edi,0x1
c0024772:	0f 84 aa 00 00 00    	je     c0024822 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024778:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002477c:	89 d8                	mov    eax,ebx
c002477e:	c1 e0 07             	shl    eax,0x7
c0024781:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024788:	55                   	push   ebp
c0024789:	56                   	push   esi
c002478a:	e8 31 fe ff ff       	call   c00245c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002478f:	5a                   	pop    edx
c0024790:	83 f8 01             	cmp    eax,0x1
c0024793:	59                   	pop    ecx
c0024794:	75 30                	jne    c00247c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024796:	50                   	push   eax
c0024797:	50                   	push   eax
c0024798:	53                   	push   ebx
c0024799:	68 05 d8 02 c0       	push   0xc002d805
c002479e:	e8 48 e1 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00247a3:	83 c4 0c             	add    esp,0xc
c00247a6:	53                   	push   ebx
c00247a7:	55                   	push   ebp
c00247a8:	56                   	push   esi
c00247a9:	e8 a4 fe ff ff       	call   c0024652 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247ae:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00247b5:	e8 d2 b0 fe ff       	call   c000f88c <malloc>
c00247ba:	89 c5                	mov    ebp,eax
c00247bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00247bf:	e8 24 0d 00 00       	call   c00254e8 <SATA::SATA()>
c00247c4:	eb 33                	jmp    c00247f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00247c6:	83 f8 04             	cmp    eax,0x4
c00247c9:	75 47                	jne    c0024812 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247cb:	50                   	push   eax
c00247cc:	50                   	push   eax
c00247cd:	53                   	push   ebx
c00247ce:	68 1c d8 02 c0       	push   0xc002d81c
c00247d3:	e8 13 e1 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00247d8:	83 c4 0c             	add    esp,0xc
c00247db:	53                   	push   ebx
c00247dc:	55                   	push   ebp
c00247dd:	56                   	push   esi
c00247de:	e8 6f fe ff ff       	call   c0024652 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247e3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247ea:	e8 9d b0 fe ff       	call   c000f88c <malloc>
c00247ef:	89 c5                	mov    ebp,eax
c00247f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00247f4:	e8 65 10 00 00       	call   c002585e <SATAPI::SATAPI()>
c00247f9:	5a                   	pop    edx
c00247fa:	59                   	pop    ecx
c00247fb:	55                   	push   ebp
c00247fc:	56                   	push   esi
c00247fd:	e8 22 f5 fe ff       	call   c0013d24 <Device::addChild(Device*)>
c0024802:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024805:	56                   	push   esi
c0024806:	6a 00                	push   0x0
c0024808:	53                   	push   ebx
c0024809:	55                   	push   ebp
c002480a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002480d:	83 c4 20             	add    esp,0x20
c0024810:	eb 10                	jmp    c0024822 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024812:	50                   	push   eax
c0024813:	50                   	push   eax
c0024814:	53                   	push   ebx
c0024815:	68 35 d8 02 c0       	push   0xc002d835
c002481a:	e8 cc e0 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002481f:	83 c4 10             	add    esp,0x10
c0024822:	d1 ef                	shr    edi,1
c0024824:	43                   	inc    ebx
c0024825:	83 fb 20             	cmp    ebx,0x20
c0024828:	0f 85 3e ff ff ff    	jne    c002476c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002482e:	83 c4 0c             	add    esp,0xc
c0024831:	5b                   	pop    ebx
c0024832:	5e                   	pop    esi
c0024833:	5f                   	pop    edi
c0024834:	5d                   	pop    ebp
c0024835:	c3                   	ret    

c0024836 <SATABus::open(int, int, void*)>:
c0024836:	83 ec 14             	sub    esp,0x14
c0024839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002483d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024843:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024849:	52                   	push   edx
c002484a:	50                   	push   eax
c002484b:	e8 08 ff ff ff       	call   c0024758 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024850:	31 c0                	xor    eax,eax
c0024852:	83 c4 1c             	add    esp,0x1c
c0024855:	c3                   	ret    

c0024856 <ATA::close(int, int, void*)>:
c0024856:	83 ec 0c             	sub    esp,0xc
c0024859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002485d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024863:	85 c0                	test   eax,eax
c0024865:	74 0c                	je     c0024873 <ATA::close(int, int, void*)+0x1d>
c0024867:	83 ec 0c             	sub    esp,0xc
c002486a:	8b 10                	mov    edx,DWORD PTR [eax]
c002486c:	50                   	push   eax
c002486d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024870:	83 c4 10             	add    esp,0x10
c0024873:	31 c0                	xor    eax,eax
c0024875:	83 c4 0c             	add    esp,0xc
c0024878:	c3                   	ret    
c0024879:	90                   	nop

c002487a <ATA::powerSaving(PowerSavingLevel)>:
c002487a:	c3                   	ret    
c002487b:	90                   	nop

c002487c <ATA::ATA()>:
c002487c:	83 ec 0c             	sub    esp,0xc
c002487f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024883:	83 ec 04             	sub    esp,0x4
c0024886:	68 00 02 00 00       	push   0x200
c002488b:	68 1d d9 02 c0       	push   0xc002d91d
c0024890:	50                   	push   eax
c0024891:	e8 d4 f8 fe ff       	call   c001416a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024896:	83 c4 10             	add    esp,0x10
c0024899:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c002489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a2:	89 10                	mov    DWORD PTR [eax],edx
c00248a4:	90                   	nop
c00248a5:	83 c4 0c             	add    esp,0xc
c00248a8:	c3                   	ret    
c00248a9:	90                   	nop

c00248aa <ATA::flush(bool)>:
c00248aa:	53                   	push   ebx
c00248ab:	83 ec 08             	sub    esp,0x8
c00248ae:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00248b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248b7:	19 c0                	sbb    eax,eax
c00248b9:	83 e0 fd             	and    eax,0xfffffffd
c00248bc:	05 ea 00 00 00       	add    eax,0xea
c00248c1:	50                   	push   eax
c00248c2:	6a 07                	push   0x7
c00248c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248cb:	50                   	push   eax
c00248cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248d2:	e8 dd ef ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248d7:	83 c4 0c             	add    esp,0xc
c00248da:	6a 00                	push   0x0
c00248dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248e3:	50                   	push   eax
c00248e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248ea:	e8 71 fb ff ff       	call   c0024460 <IDE::polling(unsigned char, unsigned int)>
c00248ef:	83 c4 18             	add    esp,0x18
c00248f2:	5b                   	pop    ebx
c00248f3:	c3                   	ret    

c00248f4 <ATA::readyForCommand()>:
c00248f4:	56                   	push   esi
c00248f5:	53                   	push   ebx
c00248f6:	31 db                	xor    ebx,ebx
c00248f8:	50                   	push   eax
c00248f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248fd:	50                   	push   eax
c00248fe:	6a 0c                	push   0xc
c0024900:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024907:	50                   	push   eax
c0024908:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002490e:	e8 61 f0 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024913:	83 c4 10             	add    esp,0x10
c0024916:	a8 88                	test   al,0x88
c0024918:	74 23                	je     c002493d <ATA::readyForCommand()+0x49>
c002491a:	43                   	inc    ebx
c002491b:	83 fb 63             	cmp    ebx,0x63
c002491e:	7e dd                	jle    c00248fd <ATA::readyForCommand()+0x9>
c0024920:	51                   	push   ecx
c0024921:	51                   	push   ecx
c0024922:	6a 00                	push   0x0
c0024924:	68 40 42 0f 00       	push   0xf4240
c0024929:	e8 a9 9a ff ff       	call   c001e3d7 <nanoSleep(unsigned long long)>
c002492e:	83 c4 10             	add    esp,0x10
c0024931:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024937:	75 c4                	jne    c00248fd <ATA::readyForCommand()+0x9>
c0024939:	31 c0                	xor    eax,eax
c002493b:	eb 02                	jmp    c002493f <ATA::readyForCommand()+0x4b>
c002493d:	b0 01                	mov    al,0x1
c002493f:	5a                   	pop    edx
c0024940:	5b                   	pop    ebx
c0024941:	5e                   	pop    esi
c0024942:	c3                   	ret    
c0024943:	90                   	nop

c0024944 <ATA::access(unsigned long long, int, void*, bool)>:
c0024944:	55                   	push   ebp
c0024945:	57                   	push   edi
c0024946:	56                   	push   esi
c0024947:	53                   	push   ebx
c0024948:	83 ec 2c             	sub    esp,0x2c
c002494b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002494f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024953:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002495b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002495f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024963:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024967:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024971:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024977:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002497b:	c1 e0 06             	shl    eax,0x6
c002497e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024986:	74 5d                	je     c00249e5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024988:	89 fa                	mov    edx,edi
c002498a:	89 f0                	mov    eax,esi
c002498c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024990:	c1 ea 1c             	shr    edx,0x1c
c0024993:	89 d1                	mov    ecx,edx
c0024995:	09 c1                	or     ecx,eax
c0024997:	74 25                	je     c00249be <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024999:	31 ed                	xor    ebp,ebp
c002499b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00249a2:	89 fa                	mov    edx,edi
c00249a4:	89 f0                	mov    eax,esi
c00249a6:	0f ad d0             	shrd   eax,edx,cl
c00249a9:	d3 ea                	shr    edx,cl
c00249ab:	f6 c1 20             	test   cl,0x20
c00249ae:	74 02                	je     c00249b2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00249b0:	89 d0                	mov    eax,edx
c00249b2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00249b6:	45                   	inc    ebp
c00249b7:	83 fd 06             	cmp    ebp,0x6
c00249ba:	75 df                	jne    c002499b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00249bc:	eb 76                	jmp    c0024a34 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00249be:	89 f0                	mov    eax,esi
c00249c0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00249c5:	89 fa                	mov    edx,edi
c00249c7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249ce:	0f ac d0 10          	shrd   eax,edx,0x10
c00249d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249d7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249db:	c1 ee 18             	shr    esi,0x18
c00249de:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249e3:	eb 56                	jmp    c0024a3b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249e5:	6a 00                	push   0x0
c00249e7:	6a 3f                	push   0x3f
c00249e9:	57                   	push   edi
c00249ea:	56                   	push   esi
c00249eb:	e8 24 29 00 00       	call   c0027314 <__umoddi3>
c00249f0:	83 c4 10             	add    esp,0x10
c00249f3:	40                   	inc    eax
c00249f4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249f8:	6a 00                	push   0x0
c00249fa:	68 f0 03 00 00       	push   0x3f0
c00249ff:	57                   	push   edi
c0024a00:	56                   	push   esi
c0024a01:	e8 0e 28 00 00       	call   c0027214 <__udivdi3>
c0024a06:	83 c4 10             	add    esp,0x10
c0024a09:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024a0e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a15:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a1a:	6a 00                	push   0x0
c0024a1c:	6a 3f                	push   0x3f
c0024a1e:	57                   	push   edi
c0024a1f:	56                   	push   esi
c0024a20:	e8 ef 27 00 00       	call   c0027214 <__udivdi3>
c0024a25:	83 c4 10             	add    esp,0x10
c0024a28:	89 c6                	mov    esi,eax
c0024a2a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a2f:	83 e6 0f             	and    esi,0xf
c0024a32:	eb 07                	jmp    c0024a3b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a34:	31 f6                	xor    esi,esi
c0024a36:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a3b:	bf 01 00 00 00       	mov    edi,0x1
c0024a40:	50                   	push   eax
c0024a41:	6a 00                	push   0x0
c0024a43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a4a:	50                   	push   eax
c0024a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a4f:	e8 6c f0 ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0024a54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a57:	e8 98 fe ff ff       	call   c00248f4 <ATA::readyForCommand()>
c0024a5c:	83 c4 10             	add    esp,0x10
c0024a5f:	84 c0                	test   al,al
c0024a61:	0f 84 5a 02 00 00    	je     c0024cc1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a67:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a73:	c1 e0 04             	shl    eax,0x4
c0024a76:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a7d:	09 c6                	or     esi,eax
c0024a7f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a84:	75 05                	jne    c0024a8b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a86:	83 ce a0             	or     esi,0xffffffa0
c0024a89:	eb 03                	jmp    c0024a8e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a8b:	83 ce e0             	or     esi,0xffffffe0
c0024a8e:	89 f0                	mov    eax,esi
c0024a90:	0f b6 f0             	movzx  esi,al
c0024a93:	56                   	push   esi
c0024a94:	6a 06                	push   0x6
c0024a96:	51                   	push   ecx
c0024a97:	52                   	push   edx
c0024a98:	e8 17 ee ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9d:	83 c4 10             	add    esp,0x10
c0024aa0:	6a 00                	push   0x0
c0024aa2:	6a 01                	push   0x1
c0024aa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aab:	50                   	push   eax
c0024aac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab2:	e8 fd ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab7:	83 c4 10             	add    esp,0x10
c0024aba:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024abf:	75 6e                	jne    c0024b2f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024ac1:	6a 00                	push   0x0
c0024ac3:	6a 08                	push   0x8
c0024ac5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024acc:	50                   	push   eax
c0024acd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad3:	e8 dc ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024add:	50                   	push   eax
c0024ade:	6a 09                	push   0x9
c0024ae0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae7:	50                   	push   eax
c0024ae8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aee:	e8 c1 ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af3:	83 c4 20             	add    esp,0x20
c0024af6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024afb:	50                   	push   eax
c0024afc:	6a 0a                	push   0xa
c0024afe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b05:	50                   	push   eax
c0024b06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b0c:	e8 a3 ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b11:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024b16:	50                   	push   eax
c0024b17:	6a 0b                	push   0xb
c0024b19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b20:	50                   	push   eax
c0024b21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b27:	e8 88 ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b2c:	83 c4 20             	add    esp,0x20
c0024b2f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b34:	50                   	push   eax
c0024b35:	6a 02                	push   0x2
c0024b37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b3e:	50                   	push   eax
c0024b3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b45:	e8 6a ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b4a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b4f:	50                   	push   eax
c0024b50:	6a 03                	push   0x3
c0024b52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b59:	50                   	push   eax
c0024b5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b60:	e8 4f ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b65:	83 c4 20             	add    esp,0x20
c0024b68:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b6d:	50                   	push   eax
c0024b6e:	6a 04                	push   0x4
c0024b70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b77:	50                   	push   eax
c0024b78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b7e:	e8 31 ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b88:	50                   	push   eax
c0024b89:	6a 05                	push   0x5
c0024b8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b92:	50                   	push   eax
c0024b93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b99:	e8 16 ed ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b9e:	83 c4 20             	add    esp,0x20
c0024ba1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024ba6:	0f 94 c0             	sete   al
c0024ba9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bae:	74 09                	je     c0024bb9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024bb0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024bb7:	eb 07                	jmp    c0024bc0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024bb9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024bc0:	0f b6 c0             	movzx  eax,al
c0024bc3:	50                   	push   eax
c0024bc4:	6a 07                	push   0x7
c0024bc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bcd:	50                   	push   eax
c0024bce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd4:	e8 db ec ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024bdd:	83 c4 10             	add    esp,0x10
c0024be0:	85 f6                	test   esi,esi
c0024be2:	0f 84 ba 00 00 00    	je     c0024ca2 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024be8:	50                   	push   eax
c0024be9:	6a 01                	push   0x1
c0024beb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bf2:	50                   	push   eax
c0024bf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bf9:	e8 62 f8 ff ff       	call   c0024460 <IDE::polling(unsigned char, unsigned int)>
c0024bfe:	83 c4 10             	add    esp,0x10
c0024c01:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024c07:	84 c0                	test   al,al
c0024c09:	74 2c                	je     c0024c37 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024c0b:	0f b6 f8             	movzx  edi,al
c0024c0e:	0f b6 d2             	movzx  edx,dl
c0024c11:	57                   	push   edi
c0024c12:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024c19:	50                   	push   eax
c0024c1a:	52                   	push   edx
c0024c1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c21:	e8 a4 f6 ff ff       	call   c00242ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c26:	c7 04 24 78 d8 02 c0 	mov    DWORD PTR [esp],0xc002d878
c0024c2d:	e8 b9 dc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024c32:	e9 87 00 00 00       	jmp    c0024cbe <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c37:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c3c:	74 33                	je     c0024c71 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c3e:	31 ed                	xor    ebp,ebp
c0024c40:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c44:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c48:	50                   	push   eax
c0024c49:	50                   	push   eax
c0024c4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c51:	50                   	push   eax
c0024c52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c58:	e8 45 ec ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c0024c5d:	89 c2                	mov    edx,eax
c0024c5f:	89 f8                	mov    eax,edi
c0024c61:	66 ef                	out    dx,ax
c0024c63:	45                   	inc    ebp
c0024c64:	83 c4 10             	add    esp,0x10
c0024c67:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c6d:	75 d1                	jne    c0024c40 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c6f:	eb 23                	jmp    c0024c94 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c71:	0f b6 d2             	movzx  edx,dl
c0024c74:	51                   	push   ecx
c0024c75:	51                   	push   ecx
c0024c76:	52                   	push   edx
c0024c77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c7d:	e8 20 ec ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c0024c82:	b9 00 01 00 00       	mov    ecx,0x100
c0024c87:	89 c2                	mov    edx,eax
c0024c89:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c8d:	fc                   	cld    
c0024c8e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c91:	83 c4 10             	add    esp,0x10
c0024c94:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c9c:	4e                   	dec    esi
c0024c9d:	e9 3e ff ff ff       	jmp    c0024be0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024ca2:	31 ff                	xor    edi,edi
c0024ca4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024ca9:	74 16                	je     c0024cc1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024cab:	50                   	push   eax
c0024cac:	50                   	push   eax
c0024cad:	31 c0                	xor    eax,eax
c0024caf:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024cb4:	0f 94 c0             	sete   al
c0024cb7:	50                   	push   eax
c0024cb8:	53                   	push   ebx
c0024cb9:	e8 ec fb ff ff       	call   c00248aa <ATA::flush(bool)>
c0024cbe:	83 c4 10             	add    esp,0x10
c0024cc1:	83 c4 2c             	add    esp,0x2c
c0024cc4:	89 f8                	mov    eax,edi
c0024cc6:	5b                   	pop    ebx
c0024cc7:	5e                   	pop    esi
c0024cc8:	5f                   	pop    edi
c0024cc9:	5d                   	pop    ebp
c0024cca:	c3                   	ret    
c0024ccb:	90                   	nop

c0024ccc <ATA::read(unsigned long long, int, void*)>:
c0024ccc:	57                   	push   edi
c0024ccd:	b8 04 00 00 00       	mov    eax,0x4
c0024cd2:	56                   	push   esi
c0024cd3:	53                   	push   ebx
c0024cd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cdc:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cdf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ce3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ce7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ced:	77 25                	ja     c0024d14 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cef:	b8 06 00 00 00       	mov    eax,0x6
c0024cf4:	85 f6                	test   esi,esi
c0024cf6:	74 1c                	je     c0024d14 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cf8:	50                   	push   eax
c0024cf9:	50                   	push   eax
c0024cfa:	6a 00                	push   0x0
c0024cfc:	56                   	push   esi
c0024cfd:	52                   	push   edx
c0024cfe:	53                   	push   ebx
c0024cff:	51                   	push   ecx
c0024d00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d04:	e8 3b fc ff ff       	call   c0024944 <ATA::access(unsigned long long, int, void*, bool)>
c0024d09:	83 c4 20             	add    esp,0x20
c0024d0c:	85 c0                	test   eax,eax
c0024d0e:	0f 95 c0             	setne  al
c0024d11:	0f b6 c0             	movzx  eax,al
c0024d14:	5b                   	pop    ebx
c0024d15:	5e                   	pop    esi
c0024d16:	5f                   	pop    edi
c0024d17:	c3                   	ret    

c0024d18 <ATA::write(unsigned long long, int, void*)>:
c0024d18:	57                   	push   edi
c0024d19:	b8 04 00 00 00       	mov    eax,0x4
c0024d1e:	56                   	push   esi
c0024d1f:	53                   	push   ebx
c0024d20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d28:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d2f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d33:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d39:	77 25                	ja     c0024d60 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d3b:	b8 06 00 00 00       	mov    eax,0x6
c0024d40:	85 f6                	test   esi,esi
c0024d42:	74 1c                	je     c0024d60 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d44:	50                   	push   eax
c0024d45:	50                   	push   eax
c0024d46:	6a 01                	push   0x1
c0024d48:	56                   	push   esi
c0024d49:	52                   	push   edx
c0024d4a:	53                   	push   ebx
c0024d4b:	51                   	push   ecx
c0024d4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d50:	e8 ef fb ff ff       	call   c0024944 <ATA::access(unsigned long long, int, void*, bool)>
c0024d55:	83 c4 20             	add    esp,0x20
c0024d58:	85 c0                	test   eax,eax
c0024d5a:	0f 95 c0             	setne  al
c0024d5d:	0f b6 c0             	movzx  eax,al
c0024d60:	5b                   	pop    ebx
c0024d61:	5e                   	pop    esi
c0024d62:	5f                   	pop    edi
c0024d63:	c3                   	ret    

c0024d64 <ATA::detectCHS()>:
c0024d64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d68:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d6e:	c1 e0 06             	shl    eax,0x6
c0024d71:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d77:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d81:	c7 44 24 04 83 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d883
c0024d89:	e9 93 55 ff ff       	jmp    c001a321 <Krnl::panic(char const*)>

c0024d8e <ATA::open(int, int, void*)>:
c0024d8e:	53                   	push   ebx
c0024d8f:	83 ec 08             	sub    esp,0x8
c0024d92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d9e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024da4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024daa:	c1 e0 06             	shl    eax,0x6
c0024dad:	01 d0                	add    eax,edx
c0024daf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024db6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024dbc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024dc3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024dcd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024dd3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dda:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024de1:	75 0c                	jne    c0024def <ATA::open(int, int, void*)+0x61>
c0024de3:	83 ec 0c             	sub    esp,0xc
c0024de6:	53                   	push   ebx
c0024de7:	e8 78 ff ff ff       	call   c0024d64 <ATA::detectCHS()>
c0024dec:	83 c4 10             	add    esp,0x10
c0024def:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024df5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024dfb:	c1 e0 06             	shl    eax,0x6
c0024dfe:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024e05:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e0f:	d1 e8                	shr    eax,1
c0024e11:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024e17:	6a 04                	push   0x4
c0024e19:	6a 0c                	push   0xc
c0024e1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e22:	50                   	push   eax
c0024e23:	52                   	push   edx
c0024e24:	e8 8b ea ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e29:	90                   	nop
c0024e2a:	90                   	nop
c0024e2b:	6a 00                	push   0x0
c0024e2d:	6a 0c                	push   0xc
c0024e2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e36:	50                   	push   eax
c0024e37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e3d:	e8 72 ea ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e42:	83 c4 14             	add    esp,0x14
c0024e45:	53                   	push   ebx
c0024e46:	e8 87 f3 fe ff       	call   c00141d2 <PhysicalDisk::startCache()>
c0024e4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e4e:	e8 39 16 ff ff       	call   c001648c <createPartitionsForDisk(PhysicalDisk*)>
c0024e53:	31 c0                	xor    eax,eax
c0024e55:	83 c4 18             	add    esp,0x18
c0024e58:	5b                   	pop    ebx
c0024e59:	c3                   	ret    

c0024e5a <ATAPI::write(unsigned long long, int, void*)>:
c0024e5a:	b8 03 00 00 00       	mov    eax,0x3
c0024e5f:	c3                   	ret    

c0024e60 <ATAPI::close(int, int, void*)>:
c0024e60:	83 ec 0c             	sub    esp,0xc
c0024e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e6d:	85 c0                	test   eax,eax
c0024e6f:	74 0c                	je     c0024e7d <ATAPI::close(int, int, void*)+0x1d>
c0024e71:	83 ec 0c             	sub    esp,0xc
c0024e74:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e76:	50                   	push   eax
c0024e77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e7a:	83 c4 10             	add    esp,0x10
c0024e7d:	31 c0                	xor    eax,eax
c0024e7f:	83 c4 0c             	add    esp,0xc
c0024e82:	c3                   	ret    
c0024e83:	90                   	nop

c0024e84 <ATAPI::ATAPI()>:
c0024e84:	83 ec 0c             	sub    esp,0xc
c0024e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e8b:	83 ec 04             	sub    esp,0x4
c0024e8e:	68 00 08 00 00       	push   0x800
c0024e93:	68 bd d9 02 c0       	push   0xc002d9bd
c0024e98:	50                   	push   eax
c0024e99:	e8 cc f2 fe ff       	call   c001416a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e9e:	83 c4 10             	add    esp,0x10
c0024ea1:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c0024ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eaa:	89 10                	mov    DWORD PTR [eax],edx
c0024eac:	90                   	nop
c0024ead:	83 c4 0c             	add    esp,0xc
c0024eb0:	c3                   	ret    
c0024eb1:	90                   	nop

c0024eb2 <ATAPI::readyForCommand()>:
c0024eb2:	56                   	push   esi
c0024eb3:	53                   	push   ebx
c0024eb4:	31 db                	xor    ebx,ebx
c0024eb6:	50                   	push   eax
c0024eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ebb:	50                   	push   eax
c0024ebc:	6a 0c                	push   0xc
c0024ebe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ec5:	50                   	push   eax
c0024ec6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ecc:	e8 a3 ea ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c0024ed1:	83 c4 10             	add    esp,0x10
c0024ed4:	a8 88                	test   al,0x88
c0024ed6:	74 23                	je     c0024efb <ATAPI::readyForCommand()+0x49>
c0024ed8:	43                   	inc    ebx
c0024ed9:	83 fb 63             	cmp    ebx,0x63
c0024edc:	7e dd                	jle    c0024ebb <ATAPI::readyForCommand()+0x9>
c0024ede:	51                   	push   ecx
c0024edf:	51                   	push   ecx
c0024ee0:	6a 00                	push   0x0
c0024ee2:	68 40 42 0f 00       	push   0xf4240
c0024ee7:	e8 eb 94 ff ff       	call   c001e3d7 <nanoSleep(unsigned long long)>
c0024eec:	83 c4 10             	add    esp,0x10
c0024eef:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ef5:	75 c4                	jne    c0024ebb <ATAPI::readyForCommand()+0x9>
c0024ef7:	31 c0                	xor    eax,eax
c0024ef9:	eb 02                	jmp    c0024efd <ATAPI::readyForCommand()+0x4b>
c0024efb:	b0 01                	mov    al,0x1
c0024efd:	5a                   	pop    edx
c0024efe:	5b                   	pop    ebx
c0024eff:	5e                   	pop    esi
c0024f00:	c3                   	ret    
c0024f01:	90                   	nop

c0024f02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024f02:	55                   	push   ebp
c0024f03:	57                   	push   edi
c0024f04:	56                   	push   esi
c0024f05:	53                   	push   ebx
c0024f06:	83 ec 20             	sub    esp,0x20
c0024f09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024f0d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024f11:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024f15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f19:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f1d:	6a 01                	push   0x1
c0024f1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f26:	50                   	push   eax
c0024f27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f2d:	e8 8e eb ff ff       	call   c0023ac0 <IDE::enableIRQs(unsigned char, bool)>
c0024f32:	5e                   	pop    esi
c0024f33:	58                   	pop    eax
c0024f34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f3b:	50                   	push   eax
c0024f3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f42:	e8 47 e9 ff ff       	call   c002388e <IDE::prepareInterrupt(unsigned char)>
c0024f47:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f4a:	e8 63 ff ff ff       	call   c0024eb2 <ATAPI::readyForCommand()>
c0024f4f:	83 c4 10             	add    esp,0x10
c0024f52:	84 c0                	test   al,al
c0024f54:	75 0a                	jne    c0024f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f56:	bb 01 00 00 00       	mov    ebx,0x1
c0024f5b:	e9 57 02 00 00       	jmp    c00251b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f60:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f66:	c1 e0 04             	shl    eax,0x4
c0024f69:	0f b6 c0             	movzx  eax,al
c0024f6c:	50                   	push   eax
c0024f6d:	6a 06                	push   0x6
c0024f6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f76:	50                   	push   eax
c0024f77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f7d:	e8 32 e9 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f82:	6a 00                	push   0x0
c0024f84:	6a 01                	push   0x1
c0024f86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f8d:	50                   	push   eax
c0024f8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f94:	e8 1b e9 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f99:	83 c4 20             	add    esp,0x20
c0024f9c:	0f b6 c3             	movzx  eax,bl
c0024f9f:	0f b6 df             	movzx  ebx,bh
c0024fa2:	50                   	push   eax
c0024fa3:	6a 04                	push   0x4
c0024fa5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fac:	50                   	push   eax
c0024fad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fb3:	e8 fc e8 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb8:	53                   	push   ebx
c0024fb9:	6a 05                	push   0x5
c0024fbb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fc2:	50                   	push   eax
c0024fc3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc9:	e8 e6 e8 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fce:	83 c4 20             	add    esp,0x20
c0024fd1:	68 a0 00 00 00       	push   0xa0
c0024fd6:	6a 07                	push   0x7
c0024fd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fdf:	50                   	push   eax
c0024fe0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fe6:	e8 c9 e8 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024feb:	83 c4 0c             	add    esp,0xc
c0024fee:	6a 01                	push   0x1
c0024ff0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ff7:	50                   	push   eax
c0024ff8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ffe:	e8 5d f4 ff ff       	call   c0024460 <IDE::polling(unsigned char, unsigned int)>
c0025003:	83 c4 10             	add    esp,0x10
c0025006:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002500c:	84 c0                	test   al,al
c002500e:	74 23                	je     c0025033 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025010:	0f b6 d8             	movzx  ebx,al
c0025013:	0f b6 d2             	movzx  edx,dl
c0025016:	53                   	push   ebx
c0025017:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002501e:	50                   	push   eax
c002501f:	52                   	push   edx
c0025020:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025026:	e8 9f f2 ff ff       	call   c00242ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002502b:	83 c4 10             	add    esp,0x10
c002502e:	e9 84 01 00 00       	jmp    c00251b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025033:	0f b6 d2             	movzx  edx,dl
c0025036:	53                   	push   ebx
c0025037:	53                   	push   ebx
c0025038:	52                   	push   edx
c0025039:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002503f:	e8 5e e8 ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c0025044:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025048:	b9 06 00 00 00       	mov    ecx,0x6
c002504d:	89 c2                	mov    edx,eax
c002504f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025052:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025056:	83 c4 10             	add    esp,0x10
c0025059:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002505f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025066:	85 db                	test   ebx,ebx
c0025068:	0f 84 ec 00 00 00    	je     c002515a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002506e:	51                   	push   ecx
c002506f:	51                   	push   ecx
c0025070:	52                   	push   edx
c0025071:	50                   	push   eax
c0025072:	e8 ab e9 ff ff       	call   c0023a22 <IDE::waitInterrupt(unsigned char)>
c0025077:	83 c4 10             	add    esp,0x10
c002507a:	84 c0                	test   al,al
c002507c:	0f 84 d4 fe ff ff    	je     c0024f56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025082:	56                   	push   esi
c0025083:	56                   	push   esi
c0025084:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002508b:	50                   	push   eax
c002508c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025092:	e8 f7 e7 ff ff       	call   c002388e <IDE::prepareInterrupt(unsigned char)>
c0025097:	83 c4 0c             	add    esp,0xc
c002509a:	6a 04                	push   0x4
c002509c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a3:	50                   	push   eax
c00250a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250aa:	e8 c5 e8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c00250af:	83 c4 0c             	add    esp,0xc
c00250b2:	89 c6                	mov    esi,eax
c00250b4:	6a 05                	push   0x5
c00250b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250bd:	50                   	push   eax
c00250be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250c4:	e8 ab e8 ff ff       	call   c0023974 <IDE::read(unsigned char, unsigned char)>
c00250c9:	89 f1                	mov    ecx,esi
c00250cb:	0f b6 c0             	movzx  eax,al
c00250ce:	0f b6 f1             	movzx  esi,cl
c00250d1:	c1 e0 08             	shl    eax,0x8
c00250d4:	09 c6                	or     esi,eax
c00250d6:	d1 fe                	sar    esi,1
c00250d8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250e4:	74 41                	je     c0025127 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250e6:	31 c9                	xor    ecx,ecx
c00250e8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250ee:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250f5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00250f9:	75 0a                	jne    c0025105 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00250fb:	01 c9                	add    ecx,ecx
c00250fd:	01 cd                	add    ebp,ecx
c00250ff:	4b                   	dec    ebx
c0025100:	e9 54 ff ff ff       	jmp    c0025059 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025105:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002510a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002510e:	51                   	push   ecx
c002510f:	51                   	push   ecx
c0025110:	52                   	push   edx
c0025111:	50                   	push   eax
c0025112:	e8 8b e7 ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c0025117:	89 c2                	mov    edx,eax
c0025119:	89 f0                	mov    eax,esi
c002511b:	66 ef                	out    dx,ax
c002511d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025121:	83 c4 10             	add    esp,0x10
c0025124:	41                   	inc    ecx
c0025125:	eb c1                	jmp    c00250e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025127:	31 f6                	xor    esi,esi
c0025129:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002512f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025136:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002513a:	75 06                	jne    c0025142 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002513c:	01 f6                	add    esi,esi
c002513e:	01 f5                	add    ebp,esi
c0025140:	eb bd                	jmp    c00250ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025142:	51                   	push   ecx
c0025143:	51                   	push   ecx
c0025144:	52                   	push   edx
c0025145:	50                   	push   eax
c0025146:	e8 57 e7 ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c002514b:	89 c2                	mov    edx,eax
c002514d:	66 ed                	in     ax,dx
c002514f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025154:	83 c4 10             	add    esp,0x10
c0025157:	46                   	inc    esi
c0025158:	eb cf                	jmp    c0025129 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002515a:	51                   	push   ecx
c002515b:	51                   	push   ecx
c002515c:	52                   	push   edx
c002515d:	50                   	push   eax
c002515e:	e8 bf e8 ff ff       	call   c0023a22 <IDE::waitInterrupt(unsigned char)>
c0025163:	83 c4 10             	add    esp,0x10
c0025166:	84 c0                	test   al,al
c0025168:	0f 84 e8 fd ff ff    	je     c0024f56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002516e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025173:	52                   	push   edx
c0025174:	52                   	push   edx
c0025175:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002517c:	50                   	push   eax
c002517d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025183:	e8 06 e7 ff ff       	call   c002388e <IDE::prepareInterrupt(unsigned char)>
c0025188:	83 c4 10             	add    esp,0x10
c002518b:	50                   	push   eax
c002518c:	50                   	push   eax
c002518d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025194:	50                   	push   eax
c0025195:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002519b:	e8 02 e7 ff ff       	call   c00238a2 <IDE::getBase(unsigned char)>
c00251a0:	8d 50 07             	lea    edx,[eax+0x7]
c00251a3:	ec                   	in     al,dx
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	a8 88                	test   al,0x88
c00251a9:	74 0a                	je     c00251b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00251ab:	4b                   	dec    ebx
c00251ac:	75 dd                	jne    c002518b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00251ae:	bb 02 00 00 00       	mov    ebx,0x2
c00251b3:	eb 02                	jmp    c00251b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00251b5:	31 db                	xor    ebx,ebx
c00251b7:	83 c4 1c             	add    esp,0x1c
c00251ba:	89 d8                	mov    eax,ebx
c00251bc:	5b                   	pop    ebx
c00251bd:	5e                   	pop    esi
c00251be:	5f                   	pop    edi
c00251bf:	5d                   	pop    ebp
c00251c0:	c3                   	ret    
c00251c1:	90                   	nop

c00251c2 <ATAPI::diskRemoved()>:
c00251c2:	83 ec 18             	sub    esp,0x18
c00251c5:	68 c9 d9 02 c0       	push   0xc002d9c9
c00251ca:	e8 1c d7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00251cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251d3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251da:	83 c4 1c             	add    esp,0x1c
c00251dd:	c3                   	ret    

c00251de <ATAPI::eject()>:
c00251de:	57                   	push   edi
c00251df:	b9 03 00 00 00       	mov    ecx,0x3
c00251e4:	53                   	push   ebx
c00251e5:	83 ec 14             	sub    esp,0x14
c00251e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251f0:	fc                   	cld    
c00251f1:	31 c0                	xor    eax,eax
c00251f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251ff:	50                   	push   eax
c0025200:	50                   	push   eax
c0025201:	6a 00                	push   0x0
c0025203:	6a 00                	push   0x0
c0025205:	6a 00                	push   0x0
c0025207:	6a 02                	push   0x2
c0025209:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002520d:	50                   	push   eax
c002520e:	53                   	push   ebx
c002520f:	e8 ee fc ff ff       	call   c0024f02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025214:	83 c4 14             	add    esp,0x14
c0025217:	53                   	push   ebx
c0025218:	e8 a5 ff ff ff       	call   c00251c2 <ATAPI::diskRemoved()>
c002521d:	83 c4 24             	add    esp,0x24
c0025220:	31 c0                	xor    eax,eax
c0025222:	5b                   	pop    ebx
c0025223:	5f                   	pop    edi
c0025224:	c3                   	ret    
c0025225:	90                   	nop

c0025226 <ATAPI::diskInserted()>:
c0025226:	53                   	push   ebx
c0025227:	83 ec 14             	sub    esp,0x14
c002522a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002522e:	68 e0 d9 02 c0       	push   0xc002d9e0
c0025233:	e8 b3 d6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0025238:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002523f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025242:	e8 8b ef fe ff       	call   c00141d2 <PhysicalDisk::startCache()>
c0025247:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002524b:	83 c4 18             	add    esp,0x18
c002524e:	5b                   	pop    ebx
c002524f:	e9 38 12 ff ff       	jmp    c001648c <createPartitionsForDisk(PhysicalDisk*)>

c0025254 <ATAPI::detectMedia()>:
c0025254:	56                   	push   esi
c0025255:	53                   	push   ebx
c0025256:	83 ec 28             	sub    esp,0x28
c0025259:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002525d:	6a 0c                	push   0xc
c002525f:	6a 00                	push   0x0
c0025261:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025265:	56                   	push   esi
c0025266:	e8 e5 b4 fd ff       	call   c0000750 <memset>
c002526b:	58                   	pop    eax
c002526c:	5a                   	pop    edx
c002526d:	6a 00                	push   0x0
c002526f:	6a 00                	push   0x0
c0025271:	6a 00                	push   0x0
c0025273:	6a 00                	push   0x0
c0025275:	56                   	push   esi
c0025276:	53                   	push   ebx
c0025277:	e8 86 fc ff ff       	call   c0024f02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002527c:	83 c4 1c             	add    esp,0x1c
c002527f:	6a 0c                	push   0xc
c0025281:	6a 00                	push   0x0
c0025283:	56                   	push   esi
c0025284:	e8 c7 b4 fd ff       	call   c0000750 <memset>
c0025289:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002528e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025293:	59                   	pop    ecx
c0025294:	58                   	pop    eax
c0025295:	6a 01                	push   0x1
c0025297:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002529b:	50                   	push   eax
c002529c:	6a 00                	push   0x0
c002529e:	6a 12                	push   0x12
c00252a0:	56                   	push   esi
c00252a1:	53                   	push   ebx
c00252a2:	e8 5b fc ff ff       	call   c0024f02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252a7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252ab:	83 c4 20             	add    esp,0x20
c00252ae:	83 e0 7f             	and    eax,0x7f
c00252b1:	3c 70                	cmp    al,0x70
c00252b3:	74 15                	je     c00252ca <ATAPI::detectMedia()+0x76>
c00252b5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252bc:	75 0c                	jne    c00252ca <ATAPI::detectMedia()+0x76>
c00252be:	83 ec 0c             	sub    esp,0xc
c00252c1:	53                   	push   ebx
c00252c2:	e8 5f ff ff ff       	call   c0025226 <ATAPI::diskInserted()>
c00252c7:	83 c4 10             	add    esp,0x10
c00252ca:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252ce:	83 e0 0f             	and    eax,0xf
c00252d1:	3c 02                	cmp    al,0x2
c00252d3:	75 1b                	jne    c00252f0 <ATAPI::detectMedia()+0x9c>
c00252d5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252da:	75 2d                	jne    c0025309 <ATAPI::detectMedia()+0xb5>
c00252dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252e3:	74 24                	je     c0025309 <ATAPI::detectMedia()+0xb5>
c00252e5:	83 ec 0c             	sub    esp,0xc
c00252e8:	53                   	push   ebx
c00252e9:	e8 d4 fe ff ff       	call   c00251c2 <ATAPI::diskRemoved()>
c00252ee:	eb 16                	jmp    c0025306 <ATAPI::detectMedia()+0xb2>
c00252f0:	84 c0                	test   al,al
c00252f2:	75 15                	jne    c0025309 <ATAPI::detectMedia()+0xb5>
c00252f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252fb:	75 0c                	jne    c0025309 <ATAPI::detectMedia()+0xb5>
c00252fd:	83 ec 0c             	sub    esp,0xc
c0025300:	53                   	push   ebx
c0025301:	e8 20 ff ff ff       	call   c0025226 <ATAPI::diskInserted()>
c0025306:	83 c4 10             	add    esp,0x10
c0025309:	83 c4 24             	add    esp,0x24
c002530c:	5b                   	pop    ebx
c002530d:	5e                   	pop    esi
c002530e:	c3                   	ret    
c002530f:	90                   	nop

c0025310 <ATAPI::open(int, int, void*)>:
c0025310:	53                   	push   ebx
c0025311:	83 ec 08             	sub    esp,0x8
c0025314:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002531c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025320:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025326:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002532c:	c1 e0 06             	shl    eax,0x6
c002532f:	01 d0                	add    eax,edx
c0025331:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025338:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002533e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025345:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002534f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025355:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002535c:	6a 04                	push   0x4
c002535e:	6a 0c                	push   0xc
c0025360:	51                   	push   ecx
c0025361:	52                   	push   edx
c0025362:	e8 4d e5 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025367:	90                   	nop
c0025368:	90                   	nop
c0025369:	6a 00                	push   0x0
c002536b:	6a 0c                	push   0xc
c002536d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025374:	50                   	push   eax
c0025375:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002537b:	e8 34 e5 ff ff       	call   c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025380:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025387:	83 c4 14             	add    esp,0x14
c002538a:	53                   	push   ebx
c002538b:	e8 c4 fe ff ff       	call   c0025254 <ATAPI::detectMedia()>
c0025390:	31 c0                	xor    eax,eax
c0025392:	83 c4 18             	add    esp,0x18
c0025395:	5b                   	pop    ebx
c0025396:	c3                   	ret    
c0025397:	90                   	nop

c0025398 <ATAPI::read(unsigned long long, int, void*)>:
c0025398:	55                   	push   ebp
c0025399:	57                   	push   edi
c002539a:	56                   	push   esi
c002539b:	53                   	push   ebx
c002539c:	83 ec 1c             	sub    esp,0x1c
c002539f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00253a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00253ab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253b2:	74 41                	je     c00253f5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00253b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253b8:	b9 03 00 00 00       	mov    ecx,0x3
c00253bd:	fc                   	cld    
c00253be:	31 c0                	xor    eax,eax
c00253c0:	86 fb                	xchg   bl,bh
c00253c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253c4:	c1 c3 10             	rol    ebx,0x10
c00253c7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253cc:	89 e8                	mov    eax,ebp
c00253ce:	86 fb                	xchg   bl,bh
c00253d0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253d4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253d8:	50                   	push   eax
c00253d9:	50                   	push   eax
c00253da:	55                   	push   ebp
c00253db:	c1 e5 0b             	shl    ebp,0xb
c00253de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253e2:	6a 00                	push   0x0
c00253e4:	55                   	push   ebp
c00253e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253e9:	50                   	push   eax
c00253ea:	56                   	push   esi
c00253eb:	e8 12 fb ff ff       	call   c0024f02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253f0:	83 c4 20             	add    esp,0x20
c00253f3:	eb 1a                	jmp    c002540f <ATAPI::read(unsigned long long, int, void*)+0x77>
c00253f5:	83 ec 0c             	sub    esp,0xc
c00253f8:	56                   	push   esi
c00253f9:	e8 56 fe ff ff       	call   c0025254 <ATAPI::detectMedia()>
c00253fe:	83 c4 10             	add    esp,0x10
c0025401:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025408:	75 aa                	jne    c00253b4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002540a:	b8 02 00 00 00       	mov    eax,0x2
c002540f:	83 c4 1c             	add    esp,0x1c
c0025412:	5b                   	pop    ebx
c0025413:	5e                   	pop    esi
c0025414:	5f                   	pop    edi
c0025415:	5d                   	pop    ebp
c0025416:	c3                   	ret    
c0025417:	90                   	nop

c0025418 <SATA::close(int, int, void*)>:
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025425:	85 c0                	test   eax,eax
c0025427:	74 0c                	je     c0025435 <SATA::close(int, int, void*)+0x1d>
c0025429:	83 ec 0c             	sub    esp,0xc
c002542c:	8b 10                	mov    edx,DWORD PTR [eax]
c002542e:	50                   	push   eax
c002542f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025432:	83 c4 10             	add    esp,0x10
c0025435:	31 c0                	xor    eax,eax
c0025437:	83 c4 0c             	add    esp,0xc
c002543a:	c3                   	ret    
c002543b:	90                   	nop

c002543c <SATA::powerSaving(PowerSavingLevel)>:
c002543c:	c3                   	ret    
c002543d:	90                   	nop

c002543e <SATA::open(int, int, void*)>:
c002543e:	56                   	push   esi
c002543f:	53                   	push   ebx
c0025440:	50                   	push   eax
c0025441:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025449:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025453:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025459:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025467:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025471:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025477:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002547e:	e8 2a a7 fe ff       	call   c000fbad <Phys::allocatePage()>
c0025483:	89 c6                	mov    esi,eax
c0025485:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002548b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025491:	e8 17 a7 fe ff       	call   c000fbad <Phys::allocatePage()>
c0025496:	39 c6                	cmp    esi,eax
c0025498:	74 10                	je     c00254aa <SATA::open(int, int, void*)+0x6c>
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	68 08 d9 02 c0       	push   0xc002d908
c00254a2:	e8 7a 4e ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00254a7:	83 c4 10             	add    esp,0x10
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	6a 02                	push   0x2
c00254af:	e8 31 c0 fe ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c00254b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254ba:	6a 03                	push   0x3
c00254bc:	50                   	push   eax
c00254bd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254c3:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c00254c9:	e8 4e c8 fe ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c00254ce:	83 c4 14             	add    esp,0x14
c00254d1:	53                   	push   ebx
c00254d2:	e8 fb ec fe ff       	call   c00141d2 <PhysicalDisk::startCache()>
c00254d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254da:	e8 ad 0f ff ff       	call   c001648c <createPartitionsForDisk(PhysicalDisk*)>
c00254df:	83 c4 14             	add    esp,0x14
c00254e2:	31 c0                	xor    eax,eax
c00254e4:	5b                   	pop    ebx
c00254e5:	5e                   	pop    esi
c00254e6:	c3                   	ret    
c00254e7:	90                   	nop

c00254e8 <SATA::SATA()>:
c00254e8:	83 ec 0c             	sub    esp,0xc
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	83 ec 04             	sub    esp,0x4
c00254f2:	68 00 02 00 00       	push   0x200
c00254f7:	68 1c d9 02 c0       	push   0xc002d91c
c00254fc:	50                   	push   eax
c00254fd:	e8 68 ec fe ff       	call   c001416a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025502:	83 c4 10             	add    esp,0x10
c0025505:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c002550a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550e:	89 10                	mov    DWORD PTR [eax],edx
c0025510:	90                   	nop
c0025511:	83 c4 0c             	add    esp,0xc
c0025514:	c3                   	ret    
c0025515:	90                   	nop

c0025516 <SATA::access(unsigned long long, int, void*, bool)>:
c0025516:	55                   	push   ebp
c0025517:	57                   	push   edi
c0025518:	56                   	push   esi
c0025519:	53                   	push   ebx
c002551a:	83 ec 2c             	sub    esp,0x2c
c002551d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025521:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025525:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025529:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002552d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025531:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025536:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002553a:	7e 10                	jle    c002554c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	68 2c d9 02 c0       	push   0xc002d92c
c0025544:	e8 d8 4d ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025549:	83 c4 10             	add    esp,0x10
c002554c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025552:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025558:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002555e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025562:	89 d0                	mov    eax,edx
c0025564:	c1 e0 07             	shl    eax,0x7
c0025567:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002556b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025575:	51                   	push   ecx
c0025576:	8d 42 02             	lea    eax,[edx+0x2]
c0025579:	51                   	push   ecx
c002557a:	c1 e0 07             	shl    eax,0x7
c002557d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025581:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025585:	50                   	push   eax
c0025586:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002558c:	e8 e7 ef ff ff       	call   c0024578 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025591:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025595:	83 c4 10             	add    esp,0x10
c0025598:	b8 01 00 00 00       	mov    eax,0x1
c002559d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00255a2:	0f 84 cb 01 00 00    	je     c0025773 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00255a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00255ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00255b0:	c1 e0 09             	shl    eax,0x9
c00255b3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00255b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00255bc:	74 0e                	je     c00255cc <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00255be:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255c4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255c8:	89 c1                	mov    ecx,eax
c00255ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255d0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255d6:	8d 42 02             	lea    eax,[edx+0x2]
c00255d9:	c1 e0 07             	shl    eax,0x7
c00255dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00255e2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255e8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255f2:	c1 e1 05             	shl    ecx,0x5
c00255f5:	01 c8                	add    eax,ecx
c00255f7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00255fb:	83 e1 01             	and    ecx,0x1
c00255fe:	89 ce                	mov    esi,ecx
c0025600:	8a 08                	mov    cl,BYTE PTR [eax]
c0025602:	c1 e6 06             	shl    esi,0x6
c0025605:	83 e1 bf             	and    ecx,0xffffffbf
c0025608:	09 f1                	or     ecx,esi
c002560a:	88 08                	mov    BYTE PTR [eax],cl
c002560c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002560e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025614:	81 c9 05 00 01 00    	or     ecx,0x10005
c002561a:	89 08                	mov    DWORD PTR [eax],ecx
c002561c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025622:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025628:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002562e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025631:	50                   	push   eax
c0025632:	68 90 00 00 00       	push   0x90
c0025637:	6a 00                	push   0x0
c0025639:	56                   	push   esi
c002563a:	e8 11 b1 fd ff       	call   c0000750 <memset>
c002563f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025645:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025649:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002564f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025653:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025657:	83 c4 10             	add    esp,0x10
c002565a:	48                   	dec    eax
c002565b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025660:	89 c1                	mov    ecx,eax
c0025662:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025668:	25 00 00 c0 ff       	and    eax,0xffc00000
c002566d:	09 c8                	or     eax,ecx
c002566f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025675:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025678:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002567f:	66 25 00 7f          	and    ax,0x7f00
c0025683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025687:	66 0d 27 80          	or     ax,0x8027
c002568b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025690:	66 89 06             	mov    WORD PTR [esi],ax
c0025693:	19 c0                	sbb    eax,eax
c0025695:	83 e0 f0             	and    eax,0xfffffff0
c0025698:	83 c0 35             	add    eax,0x35
c002569b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002569e:	89 e8                	mov    eax,ebp
c00256a0:	c1 e8 10             	shr    eax,0x10
c00256a3:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00256a6:	89 e8                	mov    eax,ebp
c00256a8:	c1 e8 18             	shr    eax,0x18
c00256ab:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00256ae:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00256b2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00256b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256b9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00256bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256c0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256c4:	89 d6                	mov    esi,edx
c00256c6:	31 c0                	xor    eax,eax
c00256c8:	c1 e6 07             	shl    esi,0x7
c00256cb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256cf:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256d5:	80 e1 88             	and    cl,0x88
c00256d8:	74 0a                	je     c00256e4 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00256da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256df:	74 0a                	je     c00256eb <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00256e1:	40                   	inc    eax
c00256e2:	eb eb                	jmp    c00256cf <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00256e4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256e9:	75 0a                	jne    c00256f5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00256eb:	83 ec 0c             	sub    esp,0xc
c00256ee:	68 65 d9 02 c0       	push   0xc002d965
c00256f3:	eb 56                	jmp    c002574b <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00256f5:	b8 01 00 00 00       	mov    eax,0x1
c00256fa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00256fe:	c1 e2 07             	shl    edx,0x7
c0025701:	d3 e0                	shl    eax,cl
c0025703:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025707:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002570d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025713:	85 c8                	test   eax,ecx
c0025715:	74 20                	je     c0025737 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025717:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002571d:	0f ba e1 1e          	bt     ecx,0x1e
c0025721:	73 ea                	jae    c002570d <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025723:	83 ec 0c             	sub    esp,0xc
c0025726:	68 73 d9 02 c0       	push   0xc002d973
c002572b:	e8 f1 4b ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025730:	83 c4 10             	add    esp,0x10
c0025733:	31 c0                	xor    eax,eax
c0025735:	eb 3c                	jmp    c0025773 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025737:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002573d:	0f ba e0 1e          	bt     eax,0x1e
c0025741:	73 17                	jae    c002575a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025743:	83 ec 0c             	sub    esp,0xc
c0025746:	68 73 d9 02 c0       	push   0xc002d973
c002574b:	e8 d1 4b ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025750:	83 c4 10             	add    esp,0x10
c0025753:	b8 01 00 00 00       	mov    eax,0x1
c0025758:	eb 19                	jmp    c0025773 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002575a:	31 c0                	xor    eax,eax
c002575c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025761:	75 10                	jne    c0025773 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025763:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025769:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002576d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025771:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025773:	83 c4 2c             	add    esp,0x2c
c0025776:	5b                   	pop    ebx
c0025777:	5e                   	pop    esi
c0025778:	5f                   	pop    edi
c0025779:	5d                   	pop    ebp
c002577a:	c3                   	ret    
c002577b:	90                   	nop

c002577c <SATA::read(unsigned long long, int, void*)>:
c002577c:	57                   	push   edi
c002577d:	b8 04 00 00 00       	mov    eax,0x4
c0025782:	56                   	push   esi
c0025783:	53                   	push   ebx
c0025784:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025788:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002578c:	8d 7a ff             	lea    edi,[edx-0x1]
c002578f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025793:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025797:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002579d:	77 25                	ja     c00257c4 <SATA::read(unsigned long long, int, void*)+0x48>
c002579f:	b8 06 00 00 00       	mov    eax,0x6
c00257a4:	85 f6                	test   esi,esi
c00257a6:	74 1c                	je     c00257c4 <SATA::read(unsigned long long, int, void*)+0x48>
c00257a8:	50                   	push   eax
c00257a9:	50                   	push   eax
c00257aa:	6a 00                	push   0x0
c00257ac:	56                   	push   esi
c00257ad:	52                   	push   edx
c00257ae:	53                   	push   ebx
c00257af:	51                   	push   ecx
c00257b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00257b4:	e8 5d fd ff ff       	call   c0025516 <SATA::access(unsigned long long, int, void*, bool)>
c00257b9:	83 c4 20             	add    esp,0x20
c00257bc:	85 c0                	test   eax,eax
c00257be:	0f 95 c0             	setne  al
c00257c1:	0f b6 c0             	movzx  eax,al
c00257c4:	5b                   	pop    ebx
c00257c5:	5e                   	pop    esi
c00257c6:	5f                   	pop    edi
c00257c7:	c3                   	ret    

c00257c8 <SATA::write(unsigned long long, int, void*)>:
c00257c8:	55                   	push   ebp
c00257c9:	b8 04 00 00 00       	mov    eax,0x4
c00257ce:	57                   	push   edi
c00257cf:	56                   	push   esi
c00257d0:	53                   	push   ebx
c00257d1:	83 ec 0c             	sub    esp,0xc
c00257d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00257dc:	8d 73 ff             	lea    esi,[ebx-0x1]
c00257df:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257e7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257ed:	77 3d                	ja     c002582c <SATA::write(unsigned long long, int, void*)+0x64>
c00257ef:	b8 06 00 00 00       	mov    eax,0x6
c00257f4:	85 ed                	test   ebp,ebp
c00257f6:	74 34                	je     c002582c <SATA::write(unsigned long long, int, void*)+0x64>
c00257f8:	c1 e3 09             	shl    ebx,0x9
c00257fb:	01 eb                	add    ebx,ebp
c00257fd:	89 d6                	mov    esi,edx
c00257ff:	89 cf                	mov    edi,ecx
c0025801:	83 c6 01             	add    esi,0x1
c0025804:	83 d7 00             	adc    edi,0x0
c0025807:	50                   	push   eax
c0025808:	50                   	push   eax
c0025809:	6a 01                	push   0x1
c002580b:	55                   	push   ebp
c002580c:	81 c5 00 02 00 00    	add    ebp,0x200
c0025812:	6a 01                	push   0x1
c0025814:	51                   	push   ecx
c0025815:	52                   	push   edx
c0025816:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002581a:	e8 f7 fc ff ff       	call   c0025516 <SATA::access(unsigned long long, int, void*, bool)>
c002581f:	83 c4 20             	add    esp,0x20
c0025822:	89 f2                	mov    edx,esi
c0025824:	89 f9                	mov    ecx,edi
c0025826:	39 dd                	cmp    ebp,ebx
c0025828:	75 d3                	jne    c00257fd <SATA::write(unsigned long long, int, void*)+0x35>
c002582a:	31 c0                	xor    eax,eax
c002582c:	83 c4 0c             	add    esp,0xc
c002582f:	5b                   	pop    ebx
c0025830:	5e                   	pop    esi
c0025831:	5f                   	pop    edi
c0025832:	5d                   	pop    ebp
c0025833:	c3                   	ret    

c0025834 <SATAPI::write(unsigned long long, int, void*)>:
c0025834:	b8 03 00 00 00       	mov    eax,0x3
c0025839:	c3                   	ret    

c002583a <SATAPI::close(int, int, void*)>:
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025841:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025847:	85 c0                	test   eax,eax
c0025849:	74 0c                	je     c0025857 <SATAPI::close(int, int, void*)+0x1d>
c002584b:	83 ec 0c             	sub    esp,0xc
c002584e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025850:	50                   	push   eax
c0025851:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025854:	83 c4 10             	add    esp,0x10
c0025857:	31 c0                	xor    eax,eax
c0025859:	83 c4 0c             	add    esp,0xc
c002585c:	c3                   	ret    
c002585d:	90                   	nop

c002585e <SATAPI::SATAPI()>:
c002585e:	83 ec 0c             	sub    esp,0xc
c0025861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025865:	83 ec 04             	sub    esp,0x4
c0025868:	68 00 08 00 00       	push   0x800
c002586d:	68 bc d9 02 c0       	push   0xc002d9bc
c0025872:	50                   	push   eax
c0025873:	e8 f2 e8 fe ff       	call   c001416a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025878:	83 c4 10             	add    esp,0x10
c002587b:	ba 68 da 02 c0       	mov    edx,0xc002da68
c0025880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025884:	89 10                	mov    DWORD PTR [eax],edx
c0025886:	90                   	nop
c0025887:	83 c4 0c             	add    esp,0xc
c002588a:	c3                   	ret    
c002588b:	90                   	nop

c002588c <SATAPI::diskRemoved()>:
c002588c:	83 ec 18             	sub    esp,0x18
c002588f:	68 c8 d9 02 c0       	push   0xc002d9c8
c0025894:	e8 52 d0 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0025899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002589d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00258a4:	83 c4 1c             	add    esp,0x1c
c00258a7:	c3                   	ret    

c00258a8 <SATAPI::diskInserted()>:
c00258a8:	53                   	push   ebx
c00258a9:	83 ec 14             	sub    esp,0x14
c00258ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00258b0:	68 df d9 02 c0       	push   0xc002d9df
c00258b5:	e8 31 d0 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00258ba:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00258c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258c4:	e8 09 e9 fe ff       	call   c00141d2 <PhysicalDisk::startCache()>
c00258c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258cd:	83 c4 18             	add    esp,0x18
c00258d0:	5b                   	pop    ebx
c00258d1:	e9 b6 0b ff ff       	jmp    c001648c <createPartitionsForDisk(PhysicalDisk*)>

c00258d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258d6:	55                   	push   ebp
c00258d7:	57                   	push   edi
c00258d8:	56                   	push   esi
c00258d9:	53                   	push   ebx
c00258da:	83 ec 34             	sub    esp,0x34
c00258dd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258e5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258f1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025901:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025907:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002590b:	c1 e0 07             	shl    eax,0x7
c002590e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025916:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025924:	8d 58 02             	lea    ebx,[eax+0x2]
c0025927:	c1 e3 07             	shl    ebx,0x7
c002592a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002592e:	53                   	push   ebx
c002592f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025935:	e8 3e ec ff ff       	call   c0024578 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002593a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002593e:	83 c4 10             	add    esp,0x10
c0025941:	b8 01 00 00 00       	mov    eax,0x1
c0025946:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002594b:	0f 84 85 01 00 00    	je     c0025ad6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025951:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025959:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002595f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025965:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025969:	c1 e1 05             	shl    ecx,0x5
c002596c:	01 c8                	add    eax,ecx
c002596e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025970:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025976:	81 c9 25 00 01 00    	or     ecx,0x10025
c002597c:	89 08                	mov    DWORD PTR [eax],ecx
c002597e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025984:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002598a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025990:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025993:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025996:	50                   	push   eax
c0025997:	68 90 00 00 00       	push   0x90
c002599c:	6a 00                	push   0x0
c002599e:	53                   	push   ebx
c002599f:	e8 ac ad fd ff       	call   c0000750 <memset>
c00259a4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00259a8:	b9 0c 00 00 00       	mov    ecx,0xc
c00259ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00259af:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00259b5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00259b9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00259bf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259c3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259c7:	48                   	dec    eax
c00259c8:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259cd:	89 c1                	mov    ecx,eax
c00259cf:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259d5:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259da:	09 c8                	or     eax,ecx
c00259dc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259e2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259e5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259ec:	66 25 00 7f          	and    ax,0x7f00
c00259f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259f4:	66 0d 27 80          	or     ax,0x8027
c00259f8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259fc:	66 89 03             	mov    WORD PTR [ebx],ax
c00259ff:	89 d0                	mov    eax,edx
c0025a01:	c1 ea 18             	shr    edx,0x18
c0025a04:	c1 e8 10             	shr    eax,0x10
c0025a07:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025a0a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025a0d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025a11:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025a14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025a18:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a1b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a1f:	83 c4 10             	add    esp,0x10
c0025a22:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a26:	31 c0                	xor    eax,eax
c0025a28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a2c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a32:	80 e2 88             	and    dl,0x88
c0025a35:	74 0a                	je     c0025a41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a37:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a3c:	74 0a                	je     c0025a48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a3e:	40                   	inc    eax
c0025a3f:	eb eb                	jmp    c0025a2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a41:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a46:	75 0f                	jne    c0025a57 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	68 65 d9 02 c0       	push   0xc002d965
c0025a50:	e8 cc 48 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025a55:	eb 3f                	jmp    c0025a96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a57:	ba 01 00 00 00       	mov    edx,0x1
c0025a5c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a64:	d3 e2                	shl    edx,cl
c0025a66:	c1 e0 07             	shl    eax,0x7
c0025a69:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a6f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a73:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a79:	85 ca                	test   edx,ecx
c0025a7b:	74 23                	je     c0025aa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a7d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a83:	0f ba e1 1e          	bt     ecx,0x1e
c0025a87:	73 ea                	jae    c0025a73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a89:	83 ec 0c             	sub    esp,0xc
c0025a8c:	68 f7 d9 02 c0       	push   0xc002d9f7
c0025a91:	e8 55 ce fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0025a96:	83 c4 10             	add    esp,0x10
c0025a99:	b8 01 00 00 00       	mov    eax,0x1
c0025a9e:	eb 36                	jmp    c0025ad6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025aa0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025aa6:	0f ba e0 1e          	bt     eax,0x1e
c0025aaa:	73 0a                	jae    c0025ab6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025aac:	83 ec 0c             	sub    esp,0xc
c0025aaf:	68 0a da 02 c0       	push   0xc002da0a
c0025ab4:	eb db                	jmp    c0025a91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025ab6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025abb:	74 17                	je     c0025ad4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025abd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025ac2:	74 10                	je     c0025ad4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ac4:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025aca:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ace:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ad2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ad4:	31 c0                	xor    eax,eax
c0025ad6:	83 c4 2c             	add    esp,0x2c
c0025ad9:	5b                   	pop    ebx
c0025ada:	5e                   	pop    esi
c0025adb:	5f                   	pop    edi
c0025adc:	5d                   	pop    ebp
c0025add:	c3                   	ret    

c0025ade <SATAPI::eject()>:
c0025ade:	57                   	push   edi
c0025adf:	b9 03 00 00 00       	mov    ecx,0x3
c0025ae4:	53                   	push   ebx
c0025ae5:	83 ec 14             	sub    esp,0x14
c0025ae8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025aec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025af0:	fc                   	cld    
c0025af1:	31 c0                	xor    eax,eax
c0025af3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025af5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025afa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025aff:	50                   	push   eax
c0025b00:	6a 00                	push   0x0
c0025b02:	6a 00                	push   0x0
c0025b04:	6a 00                	push   0x0
c0025b06:	6a 00                	push   0x0
c0025b08:	6a 02                	push   0x2
c0025b0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025b0e:	50                   	push   eax
c0025b0f:	53                   	push   ebx
c0025b10:	e8 c1 fd ff ff       	call   c00258d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b15:	83 c4 14             	add    esp,0x14
c0025b18:	53                   	push   ebx
c0025b19:	e8 6e fd ff ff       	call   c002588c <SATAPI::diskRemoved()>
c0025b1e:	83 c4 24             	add    esp,0x24
c0025b21:	31 c0                	xor    eax,eax
c0025b23:	5b                   	pop    ebx
c0025b24:	5f                   	pop    edi
c0025b25:	c3                   	ret    

c0025b26 <SATAPI::detectMedia()>:
c0025b26:	56                   	push   esi
c0025b27:	53                   	push   ebx
c0025b28:	83 ec 28             	sub    esp,0x28
c0025b2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b2f:	6a 0c                	push   0xc
c0025b31:	6a 00                	push   0x0
c0025b33:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b37:	56                   	push   esi
c0025b38:	e8 13 ac fd ff       	call   c0000750 <memset>
c0025b3d:	83 c4 0c             	add    esp,0xc
c0025b40:	6a 00                	push   0x0
c0025b42:	6a 00                	push   0x0
c0025b44:	6a 00                	push   0x0
c0025b46:	6a 00                	push   0x0
c0025b48:	6a 00                	push   0x0
c0025b4a:	56                   	push   esi
c0025b4b:	53                   	push   ebx
c0025b4c:	e8 85 fd ff ff       	call   c00258d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b51:	83 c4 1c             	add    esp,0x1c
c0025b54:	6a 0c                	push   0xc
c0025b56:	6a 00                	push   0x0
c0025b58:	56                   	push   esi
c0025b59:	e8 f2 ab fd ff       	call   c0000750 <memset>
c0025b5e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b63:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b68:	83 c4 0c             	add    esp,0xc
c0025b6b:	6a 01                	push   0x1
c0025b6d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b71:	50                   	push   eax
c0025b72:	6a 00                	push   0x0
c0025b74:	6a 00                	push   0x0
c0025b76:	6a 12                	push   0x12
c0025b78:	56                   	push   esi
c0025b79:	53                   	push   ebx
c0025b7a:	e8 57 fd ff ff       	call   c00258d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b7f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b83:	83 c4 20             	add    esp,0x20
c0025b86:	83 e0 7f             	and    eax,0x7f
c0025b89:	3c 70                	cmp    al,0x70
c0025b8b:	74 15                	je     c0025ba2 <SATAPI::detectMedia()+0x7c>
c0025b8d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b94:	75 0c                	jne    c0025ba2 <SATAPI::detectMedia()+0x7c>
c0025b96:	83 ec 0c             	sub    esp,0xc
c0025b99:	53                   	push   ebx
c0025b9a:	e8 09 fd ff ff       	call   c00258a8 <SATAPI::diskInserted()>
c0025b9f:	83 c4 10             	add    esp,0x10
c0025ba2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025ba6:	83 e0 0f             	and    eax,0xf
c0025ba9:	3c 02                	cmp    al,0x2
c0025bab:	75 1b                	jne    c0025bc8 <SATAPI::detectMedia()+0xa2>
c0025bad:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025bb2:	75 2d                	jne    c0025be1 <SATAPI::detectMedia()+0xbb>
c0025bb4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bbb:	74 24                	je     c0025be1 <SATAPI::detectMedia()+0xbb>
c0025bbd:	83 ec 0c             	sub    esp,0xc
c0025bc0:	53                   	push   ebx
c0025bc1:	e8 c6 fc ff ff       	call   c002588c <SATAPI::diskRemoved()>
c0025bc6:	eb 16                	jmp    c0025bde <SATAPI::detectMedia()+0xb8>
c0025bc8:	84 c0                	test   al,al
c0025bca:	75 15                	jne    c0025be1 <SATAPI::detectMedia()+0xbb>
c0025bcc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bd3:	75 0c                	jne    c0025be1 <SATAPI::detectMedia()+0xbb>
c0025bd5:	83 ec 0c             	sub    esp,0xc
c0025bd8:	53                   	push   ebx
c0025bd9:	e8 ca fc ff ff       	call   c00258a8 <SATAPI::diskInserted()>
c0025bde:	83 c4 10             	add    esp,0x10
c0025be1:	83 c4 24             	add    esp,0x24
c0025be4:	5b                   	pop    ebx
c0025be5:	5e                   	pop    esi
c0025be6:	c3                   	ret    
c0025be7:	90                   	nop

c0025be8 <SATAPI::open(int, int, void*)>:
c0025be8:	56                   	push   esi
c0025be9:	53                   	push   ebx
c0025bea:	50                   	push   eax
c0025beb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bf3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025bfd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025c03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025c0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c11:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c1b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c21:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c28:	e8 80 9f fe ff       	call   c000fbad <Phys::allocatePage()>
c0025c2d:	89 c6                	mov    esi,eax
c0025c2f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c35:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c3b:	e8 6d 9f fe ff       	call   c000fbad <Phys::allocatePage()>
c0025c40:	39 c6                	cmp    esi,eax
c0025c42:	74 10                	je     c0025c54 <SATAPI::open(int, int, void*)+0x6c>
c0025c44:	83 ec 0c             	sub    esp,0xc
c0025c47:	68 1f da 02 c0       	push   0xc002da1f
c0025c4c:	e8 d0 46 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025c51:	83 c4 10             	add    esp,0x10
c0025c54:	83 ec 0c             	sub    esp,0xc
c0025c57:	6a 02                	push   0x2
c0025c59:	e8 87 b8 fe ff       	call   c00114e5 <Virt::allocateKernelVirtualPages(int)>
c0025c5e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c64:	6a 03                	push   0x3
c0025c66:	50                   	push   eax
c0025c67:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c6d:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c0025c73:	e8 a4 c0 fe ff       	call   c0011d1c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c78:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c7f:	83 c4 14             	add    esp,0x14
c0025c82:	53                   	push   ebx
c0025c83:	e8 9e fe ff ff       	call   c0025b26 <SATAPI::detectMedia()>
c0025c88:	83 c4 14             	add    esp,0x14
c0025c8b:	31 c0                	xor    eax,eax
c0025c8d:	5b                   	pop    ebx
c0025c8e:	5e                   	pop    esi
c0025c8f:	c3                   	ret    

c0025c90 <SATAPI::read(unsigned long long, int, void*)>:
c0025c90:	55                   	push   ebp
c0025c91:	57                   	push   edi
c0025c92:	56                   	push   esi
c0025c93:	53                   	push   ebx
c0025c94:	83 ec 1c             	sub    esp,0x1c
c0025c97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025ca3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025caa:	74 19                	je     c0025cc5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025cac:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025cb1:	7e 2e                	jle    c0025ce1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cb3:	83 ec 0c             	sub    esp,0xc
c0025cb6:	68 35 da 02 c0       	push   0xc002da35
c0025cbb:	e8 61 46 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0025cc0:	83 c4 10             	add    esp,0x10
c0025cc3:	eb 1c                	jmp    c0025ce1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cc5:	83 ec 0c             	sub    esp,0xc
c0025cc8:	55                   	push   ebp
c0025cc9:	e8 58 fe ff ff       	call   c0025b26 <SATAPI::detectMedia()>
c0025cce:	83 c4 10             	add    esp,0x10
c0025cd1:	b8 02 00 00 00       	mov    eax,0x2
c0025cd6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cdd:	75 cd                	jne    c0025cac <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025cdf:	eb 49                	jmp    c0025d2a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025ce1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ce5:	b9 03 00 00 00       	mov    ecx,0x3
c0025cea:	fc                   	cld    
c0025ceb:	31 c0                	xor    eax,eax
c0025ced:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cef:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cf4:	89 d8                	mov    eax,ebx
c0025cf6:	86 e0                	xchg   al,ah
c0025cf8:	c1 c0 10             	rol    eax,0x10
c0025cfb:	86 e0                	xchg   al,ah
c0025cfd:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025d01:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025d05:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025d09:	50                   	push   eax
c0025d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025d0e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d12:	56                   	push   esi
c0025d13:	53                   	push   ebx
c0025d14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d18:	c1 e0 0b             	shl    eax,0xb
c0025d1b:	50                   	push   eax
c0025d1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d20:	50                   	push   eax
c0025d21:	55                   	push   ebp
c0025d22:	e8 af fb ff ff       	call   c00258d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d27:	83 c4 20             	add    esp,0x20
c0025d2a:	83 c4 1c             	add    esp,0x1c
c0025d2d:	5b                   	pop    ebx
c0025d2e:	5e                   	pop    esi
c0025d2f:	5f                   	pop    edi
c0025d30:	5d                   	pop    ebp
c0025d31:	c3                   	ret    

c0025d32 <AVX::open(int, int, void*)>:
c0025d32:	83 ec 0c             	sub    esp,0xc
c0025d35:	e8 3e 11 00 00       	call   c0026e78 <avxInit>
c0025d3a:	b8 00 00 00 00       	mov    eax,0x0
c0025d3f:	83 c4 0c             	add    esp,0xc
c0025d42:	c3                   	ret    
c0025d43:	90                   	nop

c0025d44 <AVX::close(int, int, void*)>:
c0025d44:	83 ec 0c             	sub    esp,0xc
c0025d47:	e8 2d 11 00 00       	call   c0026e79 <avxClose>
c0025d4c:	b8 00 00 00 00       	mov    eax,0x0
c0025d51:	83 c4 0c             	add    esp,0xc
c0025d54:	c3                   	ret    
c0025d55:	90                   	nop

c0025d56 <AVX::available()>:
c0025d56:	83 ec 0c             	sub    esp,0xc
c0025d59:	e8 12 11 00 00       	call   c0026e70 <avxDetect>
c0025d5e:	85 c0                	test   eax,eax
c0025d60:	0f 95 c0             	setne  al
c0025d63:	83 c4 0c             	add    esp,0xc
c0025d66:	c3                   	ret    
c0025d67:	90                   	nop

c0025d68 <AVX::save(void*)>:
c0025d68:	83 ec 0c             	sub    esp,0xc
c0025d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d6f:	83 ec 0c             	sub    esp,0xc
c0025d72:	50                   	push   eax
c0025d73:	e8 fe 10 00 00       	call   c0026e76 <avxSave>
c0025d78:	83 c4 10             	add    esp,0x10
c0025d7b:	90                   	nop
c0025d7c:	83 c4 0c             	add    esp,0xc
c0025d7f:	c3                   	ret    

c0025d80 <AVX::load(void*)>:
c0025d80:	83 ec 0c             	sub    esp,0xc
c0025d83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d87:	83 ec 0c             	sub    esp,0xc
c0025d8a:	50                   	push   eax
c0025d8b:	e8 e7 10 00 00       	call   c0026e77 <avxLoad>
c0025d90:	83 c4 10             	add    esp,0x10
c0025d93:	90                   	nop
c0025d94:	83 c4 0c             	add    esp,0xc
c0025d97:	c3                   	ret    

c0025d98 <AVX::AVX()>:
c0025d98:	83 ec 0c             	sub    esp,0xc
c0025d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9f:	83 ec 08             	sub    esp,0x8
c0025da2:	68 98 da 02 c0       	push   0xc002da98
c0025da7:	50                   	push   eax
c0025da8:	e8 9b e4 fe ff       	call   c0014248 <FPU::FPU(char const*)>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c0025db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db9:	89 10                	mov    DWORD PTR [eax],edx
c0025dbb:	90                   	nop
c0025dbc:	83 c4 0c             	add    esp,0xc
c0025dbf:	c3                   	ret    

c0025dc0 <MMX::available()>:
c0025dc0:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025dc5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025dcb:	83 e0 20             	and    eax,0x20
c0025dce:	84 c0                	test   al,al
c0025dd0:	0f 95 c0             	setne  al
c0025dd3:	c3                   	ret    

c0025dd4 <MMX::open(int, int, void*)>:
c0025dd4:	83 ec 0c             	sub    esp,0xc
c0025dd7:	e8 26 11 00 00       	call   c0026f02 <x87Init>
c0025ddc:	b8 00 00 00 00       	mov    eax,0x0
c0025de1:	83 c4 0c             	add    esp,0xc
c0025de4:	c3                   	ret    
c0025de5:	90                   	nop

c0025de6 <MMX::close(int, int, void*)>:
c0025de6:	83 ec 0c             	sub    esp,0xc
c0025de9:	e8 2e 11 00 00       	call   c0026f1c <x87Close>
c0025dee:	b8 00 00 00 00       	mov    eax,0x0
c0025df3:	83 c4 0c             	add    esp,0xc
c0025df6:	c3                   	ret    
c0025df7:	90                   	nop

c0025df8 <MMX::save(void*)>:
c0025df8:	83 ec 0c             	sub    esp,0xc
c0025dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dff:	83 ec 0c             	sub    esp,0xc
c0025e02:	50                   	push   eax
c0025e03:	e8 e9 10 00 00       	call   c0026ef1 <x87Save>
c0025e08:	83 c4 10             	add    esp,0x10
c0025e0b:	90                   	nop
c0025e0c:	83 c4 0c             	add    esp,0xc
c0025e0f:	c3                   	ret    

c0025e10 <MMX::load(void*)>:
c0025e10:	83 ec 0c             	sub    esp,0xc
c0025e13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e17:	83 ec 0c             	sub    esp,0xc
c0025e1a:	50                   	push   eax
c0025e1b:	e8 da 10 00 00       	call   c0026efa <x87Load>
c0025e20:	83 c4 10             	add    esp,0x10
c0025e23:	90                   	nop
c0025e24:	83 c4 0c             	add    esp,0xc
c0025e27:	c3                   	ret    

c0025e28 <MMX::MMX()>:
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e2f:	83 ec 08             	sub    esp,0x8
c0025e32:	68 d8 da 02 c0       	push   0xc002dad8
c0025e37:	50                   	push   eax
c0025e38:	e8 0b e4 fe ff       	call   c0014248 <FPU::FPU(char const*)>
c0025e3d:	83 c4 10             	add    esp,0x10
c0025e40:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c0025e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e49:	89 10                	mov    DWORD PTR [eax],edx
c0025e4b:	90                   	nop
c0025e4c:	83 c4 0c             	add    esp,0xc
c0025e4f:	c3                   	ret    

c0025e50 <SSE::open(int, int, void*)>:
c0025e50:	83 ec 0c             	sub    esp,0xc
c0025e53:	e8 5c 10 00 00       	call   c0026eb4 <sseInit>
c0025e58:	b8 00 00 00 00       	mov    eax,0x0
c0025e5d:	83 c4 0c             	add    esp,0xc
c0025e60:	c3                   	ret    
c0025e61:	90                   	nop

c0025e62 <SSE::close(int, int, void*)>:
c0025e62:	83 ec 0c             	sub    esp,0xc
c0025e65:	e8 5a 10 00 00       	call   c0026ec4 <sseClose>
c0025e6a:	b8 00 00 00 00       	mov    eax,0x0
c0025e6f:	83 c4 0c             	add    esp,0xc
c0025e72:	c3                   	ret    
c0025e73:	90                   	nop

c0025e74 <SSE::available()>:
c0025e74:	83 ec 1c             	sub    esp,0x1c
c0025e77:	e8 14 10 00 00       	call   c0026e90 <absolutelyNoChanceInHell>
c0025e7c:	85 c0                	test   eax,eax
c0025e7e:	0f 95 c0             	setne  al
c0025e81:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e85:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e89:	83 c4 1c             	add    esp,0x1c
c0025e8c:	c3                   	ret    
c0025e8d:	90                   	nop

c0025e8e <SSE::save(void*)>:
c0025e8e:	83 ec 0c             	sub    esp,0xc
c0025e91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e95:	83 ec 0c             	sub    esp,0xc
c0025e98:	50                   	push   eax
c0025e99:	e8 0a 10 00 00       	call   c0026ea8 <sseSave>
c0025e9e:	83 c4 10             	add    esp,0x10
c0025ea1:	90                   	nop
c0025ea2:	83 c4 0c             	add    esp,0xc
c0025ea5:	c3                   	ret    

c0025ea6 <SSE::load(void*)>:
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ead:	83 ec 0c             	sub    esp,0xc
c0025eb0:	50                   	push   eax
c0025eb1:	e8 f8 0f 00 00       	call   c0026eae <sseLoad>
c0025eb6:	83 c4 10             	add    esp,0x10
c0025eb9:	90                   	nop
c0025eba:	83 c4 0c             	add    esp,0xc
c0025ebd:	c3                   	ret    

c0025ebe <SSE::SSE()>:
c0025ebe:	83 ec 0c             	sub    esp,0xc
c0025ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec5:	83 ec 08             	sub    esp,0x8
c0025ec8:	68 18 db 02 c0       	push   0xc002db18
c0025ecd:	50                   	push   eax
c0025ece:	e8 75 e3 fe ff       	call   c0014248 <FPU::FPU(char const*)>
c0025ed3:	83 c4 10             	add    esp,0x10
c0025ed6:	ba 28 db 02 c0       	mov    edx,0xc002db28
c0025edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edf:	89 10                	mov    DWORD PTR [eax],edx
c0025ee1:	90                   	nop
c0025ee2:	83 c4 0c             	add    esp,0xc
c0025ee5:	c3                   	ret    

c0025ee6 <x87::open(int, int, void*)>:
c0025ee6:	83 ec 0c             	sub    esp,0xc
c0025ee9:	e8 14 10 00 00       	call   c0026f02 <x87Init>
c0025eee:	b8 00 00 00 00       	mov    eax,0x0
c0025ef3:	83 c4 0c             	add    esp,0xc
c0025ef6:	c3                   	ret    
c0025ef7:	90                   	nop

c0025ef8 <x87::close(int, int, void*)>:
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	e8 1c 10 00 00       	call   c0026f1c <x87Close>
c0025f00:	b8 00 00 00 00       	mov    eax,0x0
c0025f05:	83 c4 0c             	add    esp,0xc
c0025f08:	c3                   	ret    
c0025f09:	90                   	nop

c0025f0a <x87::available()>:
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	e8 c4 0f 00 00       	call   c0026ed6 <x87Detect>
c0025f12:	85 c0                	test   eax,eax
c0025f14:	0f 95 c0             	setne  al
c0025f17:	83 c4 0c             	add    esp,0xc
c0025f1a:	c3                   	ret    
c0025f1b:	90                   	nop

c0025f1c <x87::save(void*)>:
c0025f1c:	83 ec 0c             	sub    esp,0xc
c0025f1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f23:	83 ec 0c             	sub    esp,0xc
c0025f26:	50                   	push   eax
c0025f27:	e8 c5 0f 00 00       	call   c0026ef1 <x87Save>
c0025f2c:	83 c4 10             	add    esp,0x10
c0025f2f:	90                   	nop
c0025f30:	83 c4 0c             	add    esp,0xc
c0025f33:	c3                   	ret    

c0025f34 <x87::load(void*)>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f3b:	83 ec 0c             	sub    esp,0xc
c0025f3e:	50                   	push   eax
c0025f3f:	e8 b6 0f 00 00       	call   c0026efa <x87Load>
c0025f44:	83 c4 10             	add    esp,0x10
c0025f47:	90                   	nop
c0025f48:	83 c4 0c             	add    esp,0xc
c0025f4b:	c3                   	ret    

c0025f4c <x87::x87()>:
c0025f4c:	83 ec 0c             	sub    esp,0xc
c0025f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f53:	83 ec 08             	sub    esp,0x8
c0025f56:	68 58 db 02 c0       	push   0xc002db58
c0025f5b:	50                   	push   eax
c0025f5c:	e8 e7 e2 fe ff       	call   c0014248 <FPU::FPU(char const*)>
c0025f61:	83 c4 10             	add    esp,0x10
c0025f64:	ba 68 db 02 c0       	mov    edx,0xc002db68
c0025f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6d:	89 10                	mov    DWORD PTR [eax],edx
c0025f6f:	90                   	nop
c0025f70:	83 c4 0c             	add    esp,0xc
c0025f73:	c3                   	ret    

c0025f74 <APIC::disable()>:
c0025f74:	90                   	nop
c0025f75:	c3                   	ret    

c0025f76 <APIC::close(int, int, void*)>:
c0025f76:	55                   	push   ebp
c0025f77:	89 e5                	mov    ebp,esp
c0025f79:	83 ec 08             	sub    esp,0x8
c0025f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f81:	83 c0 3c             	add    eax,0x3c
c0025f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f86:	83 ec 0c             	sub    esp,0xc
c0025f89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f8c:	ff d0                	call   eax
c0025f8e:	83 c4 10             	add    esp,0x10
c0025f91:	b8 00 00 00 00       	mov    eax,0x0
c0025f96:	c9                   	leave  
c0025f97:	c3                   	ret    

c0025f98 <IOAPIC::close(int, int, void*)>:
c0025f98:	b8 00 00 00 00       	mov    eax,0x0
c0025f9d:	c3                   	ret    

c0025f9e <APIC::io_wait()>:
c0025f9e:	eb 00                	jmp    c0025fa0 <APIC::io_wait()+0x2>
c0025fa0:	eb 00                	jmp    c0025fa2 <APIC::io_wait()+0x4>
c0025fa2:	90                   	nop
c0025fa3:	c3                   	ret    

c0025fa4 <APIC::getBase()>:
c0025fa4:	55                   	push   ebp
c0025fa5:	89 e5                	mov    ebp,esp
c0025fa7:	83 ec 18             	sub    esp,0x18
c0025faa:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025faf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025fb5:	83 e0 08             	and    eax,0x8
c0025fb8:	84 c0                	test   al,al
c0025fba:	75 07                	jne    c0025fc3 <APIC::getBase()+0x1f>
c0025fbc:	b8 00 00 00 00       	mov    eax,0x0
c0025fc1:	eb 21                	jmp    c0025fe4 <APIC::getBase()+0x40>
c0025fc3:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025fc8:	83 ec 08             	sub    esp,0x8
c0025fcb:	6a 1b                	push   0x1b
c0025fcd:	50                   	push   eax
c0025fce:	e8 5f 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025fd3:	83 c4 10             	add    esp,0x10
c0025fd6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fd9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fe4:	c9                   	leave  
c0025fe5:	c3                   	ret    

c0025fe6 <APIC::eoi(unsigned char)>:
c0025fe6:	55                   	push   ebp
c0025fe7:	89 e5                	mov    ebp,esp
c0025fe9:	83 ec 28             	sub    esp,0x28
c0025fec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ff2:	83 ec 0c             	sub    esp,0xc
c0025ff5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff8:	e8 a7 ff ff ff       	call   c0025fa4 <APIC::getBase()>
c0025ffd:	83 c4 10             	add    esp,0x10
c0026000:	05 b0 00 00 00       	add    eax,0xb0
c0026005:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002600b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026011:	90                   	nop
c0026012:	c9                   	leave  
c0026013:	c3                   	ret    

c0026014 <APIC::open(int, int, void*)>:
c0026014:	55                   	push   ebp
c0026015:	89 e5                	mov    ebp,esp
c0026017:	57                   	push   edi
c0026018:	56                   	push   esi
c0026019:	53                   	push   ebx
c002601a:	83 ec 2c             	sub    esp,0x2c
c002601d:	83 ec 0c             	sub    esp,0xc
c0026020:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026023:	e8 7c ff ff ff       	call   c0025fa4 <APIC::getBase()>
c0026028:	83 c4 10             	add    esp,0x10
c002602b:	89 c2                	mov    edx,eax
c002602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026030:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026036:	0f b6 f8             	movzx  edi,al
c0026039:	89 d0                	mov    eax,edx
c002603b:	ba 00 00 00 00       	mov    edx,0x0
c0026040:	89 c1                	mov    ecx,eax
c0026042:	80 e5 ff             	and    ch,0xff
c0026045:	89 cb                	mov    ebx,ecx
c0026047:	0f b6 f2             	movzx  esi,dl
c002604a:	89 d8                	mov    eax,ebx
c002604c:	89 f2                	mov    edx,esi
c002604e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026051:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026054:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026058:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002605c:	83 e0 00             	and    eax,0x0
c002605f:	09 d0                	or     eax,edx
c0026061:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026068:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002606e:	8d 50 01             	lea    edx,[eax+0x1]
c0026071:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026074:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002607a:	0f b6 d0             	movzx  edx,al
c002607d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026080:	83 c2 08             	add    edx,0x8
c0026083:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026087:	0f b6 c9             	movzx  ecx,cl
c002608a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026090:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026094:	83 ec 0c             	sub    esp,0xc
c0026097:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002609a:	e8 05 ff ff ff       	call   c0025fa4 <APIC::getBase()>
c002609f:	83 c4 10             	add    esp,0x10
c00260a2:	05 f0 00 00 00       	add    eax,0xf0
c00260a7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00260aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00260af:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00260b2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00260b9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00260c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260c3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260c6:	89 10                	mov    DWORD PTR [eax],edx
c00260c8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260cf:	a1 f0 18 03 c0       	mov    eax,ds:0xc00318f0
c00260d4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260d7:	7d 7c                	jge    c0026155 <APIC::open(int, int, void*)+0x141>
c00260d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260dc:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00260e3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260e9:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00260f0:	c1 e8 08             	shr    eax,0x8
c00260f3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260fa:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c0026101:	c1 e8 18             	shr    eax,0x18
c0026104:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026107:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002610b:	75 40                	jne    c002614d <APIC::open(int, int, void*)+0x139>
c002610d:	83 ec 0c             	sub    esp,0xc
c0026110:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026113:	e8 8c fe ff ff       	call   c0025fa4 <APIC::getBase()>
c0026118:	83 c4 10             	add    esp,0x10
c002611b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002611f:	75 07                	jne    c0026128 <APIC::open(int, int, void*)+0x114>
c0026121:	ba 60 03 00 00       	mov    edx,0x360
c0026126:	eb 05                	jmp    c002612d <APIC::open(int, int, void*)+0x119>
c0026128:	ba 50 03 00 00       	mov    edx,0x350
c002612d:	01 d0                	add    eax,edx
c002612f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026132:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026135:	8b 00                	mov    eax,DWORD PTR [eax]
c0026137:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002613a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026141:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026145:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026148:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002614b:	89 10                	mov    DWORD PTR [eax],edx
c002614d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026150:	e9 7a ff ff ff       	jmp    c00260cf <APIC::open(int, int, void*)+0xbb>
c0026155:	b8 00 00 00 00       	mov    eax,0x0
c002615a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002615d:	5b                   	pop    ebx
c002615e:	5e                   	pop    esi
c002615f:	5f                   	pop    edi
c0026160:	5d                   	pop    ebp
c0026161:	c3                   	ret    

c0026162 <IOAPIC::IOAPIC()>:
c0026162:	83 ec 0c             	sub    esp,0xc
c0026165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026169:	83 ec 08             	sub    esp,0x8
c002616c:	68 98 db 02 c0       	push   0xc002db98
c0026171:	50                   	push   eax
c0026172:	e8 b1 dd fe ff       	call   c0013f28 <Device::Device(char const*)>
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c002617f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026183:	89 10                	mov    DWORD PTR [eax],edx
c0026185:	90                   	nop
c0026186:	83 c4 0c             	add    esp,0xc
c0026189:	c3                   	ret    

c002618a <APIC::APIC()>:
c002618a:	53                   	push   ebx
c002618b:	83 ec 18             	sub    esp,0x18
c002618e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026192:	83 ec 08             	sub    esp,0x8
c0026195:	68 a0 db 02 c0       	push   0xc002dba0
c002619a:	50                   	push   eax
c002619b:	e8 02 e5 fe ff       	call   c00146a2 <InterruptController::InterruptController(char const*)>
c00261a0:	83 c4 10             	add    esp,0x10
c00261a3:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c00261a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261ac:	89 10                	mov    DWORD PTR [eax],edx
c00261ae:	a0 c0 33 03 c0       	mov    al,ds:0xc00333c0
c00261b3:	83 f0 01             	xor    eax,0x1
c00261b6:	84 c0                	test   al,al
c00261b8:	0f 84 a1 00 00 00    	je     c002625f <APIC::APIC()+0xd5>
c00261be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261c3:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c00261c8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261cc:	0f 83 86 00 00 00    	jae    c0026258 <APIC::APIC()+0xce>
c00261d2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261e1:	e8 a6 96 fe ff       	call   c000f88c <malloc>
c00261e6:	83 c4 10             	add    esp,0x10
c00261e9:	89 c3                	mov    ebx,eax
c00261eb:	83 ec 0c             	sub    esp,0xc
c00261ee:	53                   	push   ebx
c00261ef:	e8 6e ff ff ff       	call   c0026162 <IOAPIC::IOAPIC()>
c00261f4:	83 c4 10             	add    esp,0x10
c00261f7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026204:	89 14 85 a0 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc60],edx
c002620b:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c0026210:	40                   	inc    eax
c0026211:	a3 80 33 03 c0       	mov    ds:0xc0033380,eax
c0026216:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c002621b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026221:	83 ec 08             	sub    esp,0x8
c0026224:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026228:	50                   	push   eax
c0026229:	e8 f6 da fe ff       	call   c0013d24 <Device::addChild(Device*)>
c002622e:	83 c4 10             	add    esp,0x10
c0026231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026235:	8b 00                	mov    eax,DWORD PTR [eax]
c0026237:	83 c0 08             	add    eax,0x8
c002623a:	8b 00                	mov    eax,DWORD PTR [eax]
c002623c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026241:	6a 00                	push   0x0
c0026243:	6a 00                	push   0x0
c0026245:	52                   	push   edx
c0026246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002624a:	ff d0                	call   eax
c002624c:	83 c4 10             	add    esp,0x10
c002624f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026253:	e9 6b ff ff ff       	jmp    c00261c3 <APIC::APIC()+0x39>
c0026258:	c6 05 c0 33 03 c0 01 	mov    BYTE PTR ds:0xc00333c0,0x1
c002625f:	90                   	nop
c0026260:	83 c4 18             	add    esp,0x18
c0026263:	5b                   	pop    ebx
c0026264:	c3                   	ret    
c0026265:	90                   	nop

c0026266 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026266:	55                   	push   ebp
c0026267:	89 e5                	mov    ebp,esp
c0026269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026272:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026275:	72 1d                	jb     c0026294 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002627a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026283:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026289:	01 d0                	add    eax,edx
c002628b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002628e:	73 04                	jae    c0026294 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026290:	b0 01                	mov    al,0x1
c0026292:	eb 02                	jmp    c0026296 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026294:	b0 00                	mov    al,0x0
c0026296:	5d                   	pop    ebp
c0026297:	c3                   	ret    

c0026298 <IOAPIC::read(int)>:
c0026298:	55                   	push   ebp
c0026299:	89 e5                	mov    ebp,esp
c002629b:	83 ec 10             	sub    esp,0x10
c002629e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262a7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00262aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262ad:	0f b6 d0             	movzx  edx,al
c00262b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262b3:	89 10                	mov    DWORD PTR [eax],edx
c00262b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262b8:	83 c0 10             	add    eax,0x10
c00262bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00262bd:	c9                   	leave  
c00262be:	c3                   	ret    
c00262bf:	90                   	nop

c00262c0 <IOAPIC::open(int, int, void*)>:
c00262c0:	55                   	push   ebp
c00262c1:	89 e5                	mov    ebp,esp
c00262c3:	57                   	push   edi
c00262c4:	56                   	push   esi
c00262c5:	53                   	push   ebx
c00262c6:	83 ec 0c             	sub    esp,0xc
c00262c9:	83 ec 0c             	sub    esp,0xc
c00262cc:	68 cb db 02 c0       	push   0xc002dbcb
c00262d1:	e8 15 c6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00262d6:	83 c4 10             	add    esp,0x10
c00262d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262ee:	8b 14 85 e0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce620]
c00262f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026301:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026307:	8b 14 85 60 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5a0]
c002630e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026311:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002631a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026323:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026329:	0f b6 f8             	movzx  edi,al
c002632c:	89 d0                	mov    eax,edx
c002632e:	ba 00 00 00 00       	mov    edx,0x0
c0026333:	89 c1                	mov    ecx,eax
c0026335:	80 e5 ff             	and    ch,0xff
c0026338:	89 cb                	mov    ebx,ecx
c002633a:	0f b6 f2             	movzx  esi,dl
c002633d:	89 d8                	mov    eax,ebx
c002633f:	89 f2                	mov    edx,esi
c0026341:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026344:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026347:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002634b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002634f:	83 e0 00             	and    eax,0x0
c0026352:	09 d0                	or     eax,edx
c0026354:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026361:	8d 50 01             	lea    edx,[eax+0x1]
c0026364:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026367:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002636d:	0f b6 d0             	movzx  edx,al
c0026370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026373:	83 c2 08             	add    edx,0x8
c0026376:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002637a:	0f b6 c9             	movzx  ecx,cl
c002637d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026383:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026387:	83 ec 08             	sub    esp,0x8
c002638a:	6a 01                	push   0x1
c002638c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002638f:	e8 04 ff ff ff       	call   c0026298 <IOAPIC::read(int)>
c0026394:	83 c4 10             	add    esp,0x10
c0026397:	c1 f8 10             	sar    eax,0x10
c002639a:	0f b6 c0             	movzx  eax,al
c002639d:	8d 50 01             	lea    edx,[eax+0x1]
c00263a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00263a9:	b8 00 00 00 00       	mov    eax,0x0
c00263ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263b1:	5b                   	pop    ebx
c00263b2:	5e                   	pop    esi
c00263b3:	5f                   	pop    edi
c00263b4:	5d                   	pop    ebp
c00263b5:	c3                   	ret    

c00263b6 <IOAPIC::write(int, int)>:
c00263b6:	55                   	push   ebp
c00263b7:	89 e5                	mov    ebp,esp
c00263b9:	83 ec 10             	sub    esp,0x10
c00263bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263cb:	0f b6 d0             	movzx  edx,al
c00263ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263d1:	89 10                	mov    DWORD PTR [eax],edx
c00263d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263d6:	8d 50 10             	lea    edx,[eax+0x10]
c00263d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263dc:	89 02                	mov    DWORD PTR [edx],eax
c00263de:	90                   	nop
c00263df:	c9                   	leave  
c00263e0:	c3                   	ret    
c00263e1:	90                   	nop

c00263e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263e2:	55                   	push   ebp
c00263e3:	89 e5                	mov    ebp,esp
c00263e5:	53                   	push   ebx
c00263e6:	83 ec 2c             	sub    esp,0x2c
c00263e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263ec:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263ef:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263f2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263fe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026401:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026404:	88 d8                	mov    al,bl
c0026406:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026409:	88 c8                	mov    al,cl
c002640b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002640e:	88 d0                	mov    al,dl
c0026410:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026413:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026417:	83 c0 08             	add    eax,0x8
c002641a:	01 c0                	add    eax,eax
c002641c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002641f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026423:	83 c0 08             	add    eax,0x8
c0026426:	01 c0                	add    eax,eax
c0026428:	40                   	inc    eax
c0026429:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002642c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002642f:	50                   	push   eax
c0026430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026433:	e8 60 fe ff ff       	call   c0026298 <IOAPIC::read(int)>
c0026438:	83 c4 08             	add    esp,0x8
c002643b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002643e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026445:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026448:	c1 e0 18             	shl    eax,0x18
c002644b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002644e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026451:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026454:	52                   	push   edx
c0026455:	50                   	push   eax
c0026456:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026459:	e8 58 ff ff ff       	call   c00263b6 <IOAPIC::write(int, int)>
c002645e:	83 c4 0c             	add    esp,0xc
c0026461:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026464:	50                   	push   eax
c0026465:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026468:	e8 2b fe ff ff       	call   c0026298 <IOAPIC::read(int)>
c002646d:	83 c4 08             	add    esp,0x8
c0026470:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026473:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002647a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026481:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026488:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002648c:	74 09                	je     c0026497 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002648e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026495:	eb 07                	jmp    c002649e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026497:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002649e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00264a2:	74 09                	je     c00264ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00264a4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00264ab:	eb 07                	jmp    c00264b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00264ad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00264b4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00264bb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00264bf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264c2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264c8:	52                   	push   edx
c00264c9:	50                   	push   eax
c00264ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264cd:	e8 e4 fe ff ff       	call   c00263b6 <IOAPIC::write(int, int)>
c00264d2:	83 c4 0c             	add    esp,0xc
c00264d5:	90                   	nop
c00264d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264d9:	c9                   	leave  
c00264da:	c3                   	ret    
c00264db:	90                   	nop

c00264dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264dc:	55                   	push   ebp
c00264dd:	89 e5                	mov    ebp,esp
c00264df:	57                   	push   edi
c00264e0:	56                   	push   esi
c00264e1:	53                   	push   ebx
c00264e2:	83 ec 2c             	sub    esp,0x2c
c00264e5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264e8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264eb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264ef:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264f3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264f7:	74 5a                	je     c0026553 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264f9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264fd:	7f 44                	jg     c0026543 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026502:	05 80 e2 02 c0       	add    eax,0xc002e280
c0026507:	8a 00                	mov    al,BYTE PTR [eax]
c0026509:	0f b6 c0             	movzx  eax,al
c002650c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002650f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026512:	66 8b 84 00 80 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce680]
c002651a:	0f b7 c0             	movzx  eax,ax
c002651d:	83 e0 02             	and    eax,0x2
c0026520:	85 c0                	test   eax,eax
c0026522:	74 04                	je     c0026528 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026524:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026528:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002652b:	66 8b 84 00 80 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce680]
c0026533:	0f b7 c0             	movzx  eax,ax
c0026536:	83 e0 08             	and    eax,0x8
c0026539:	85 c0                	test   eax,eax
c002653b:	74 16                	je     c0026553 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002653d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026541:	eb 10                	jmp    c0026553 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026543:	83 ec 0c             	sub    esp,0xc
c0026546:	68 dc db 02 c0       	push   0xc002dbdc
c002654b:	e8 d1 3d ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0026550:	83 c4 10             	add    esp,0x10
c0026553:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026557:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c002655c:	83 ec 08             	sub    esp,0x8
c002655f:	50                   	push   eax
c0026560:	68 14 dc 02 c0       	push   0xc002dc14
c0026565:	e8 81 c3 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002656a:	83 c4 10             	add    esp,0x10
c002656d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026574:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c0026579:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002657c:	7d 67                	jge    c00265e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002657e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026581:	8b 04 85 a0 33 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccc60]
c0026588:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002658b:	83 ec 08             	sub    esp,0x8
c002658e:	52                   	push   edx
c002658f:	50                   	push   eax
c0026590:	e8 d1 fc ff ff       	call   c0026266 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026595:	83 c4 10             	add    esp,0x10
c0026598:	84 c0                	test   al,al
c002659a:	74 44                	je     c00265e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002659c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002659f:	8b 1c 85 a0 33 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccc60]
c00265a6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00265aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00265ad:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00265b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265b4:	83 c0 20             	add    eax,0x20
c00265b7:	0f b6 f0             	movzx  esi,al
c00265ba:	b8 00 00 00 00       	mov    eax,0x0
c00265bf:	99                   	cdq    
c00265c0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265c3:	0f b6 c9             	movzx  ecx,cl
c00265c6:	83 ec 04             	sub    esp,0x4
c00265c9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265cc:	57                   	push   edi
c00265cd:	56                   	push   esi
c00265ce:	52                   	push   edx
c00265cf:	50                   	push   eax
c00265d0:	51                   	push   ecx
c00265d1:	53                   	push   ebx
c00265d2:	e8 0b fe ff ff       	call   c00263e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265d7:	83 c4 20             	add    esp,0x20
c00265da:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265de:	eb 05                	jmp    c00265e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265e0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265e3:	eb 8f                	jmp    c0026574 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265e5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265e8:	83 f0 01             	xor    eax,0x1
c00265eb:	84 c0                	test   al,al
c00265ed:	74 10                	je     c00265ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265ef:	83 ec 0c             	sub    esp,0xc
c00265f2:	68 2b dc 02 c0       	push   0xc002dc2b
c00265f7:	e8 25 3d ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00265fc:	83 c4 10             	add    esp,0x10
c00265ff:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026603:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002660a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002660e:	7f 65                	jg     c0026675 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026613:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026616:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002661d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026620:	01 ca                	add    edx,ecx
c0026622:	83 c2 54             	add    edx,0x54
c0026625:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026629:	85 c0                	test   eax,eax
c002662b:	75 43                	jne    c0026670 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002662d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026630:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026633:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002663a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002663d:	01 ca                	add    edx,ecx
c002663f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026642:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026645:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002664c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002664f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026656:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026659:	01 ca                	add    edx,ecx
c002665b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026661:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026664:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026668:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666b:	83 e8 20             	sub    eax,0x20
c002666e:	eb 1a                	jmp    c002668a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026670:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026673:	eb 95                	jmp    c002660a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026675:	83 ec 0c             	sub    esp,0xc
c0026678:	68 38 dc 02 c0       	push   0xc002dc38
c002667d:	e8 9f 3c ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0026682:	83 c4 10             	add    esp,0x10
c0026685:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002668a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002668d:	5b                   	pop    ebx
c002668e:	5e                   	pop    esi
c002668f:	5f                   	pop    edi
c0026690:	5d                   	pop    ebp
c0026691:	c3                   	ret    

c0026692 <PIC::disable()>:
c0026692:	55                   	push   ebp
c0026693:	89 e5                	mov    ebp,esp
c0026695:	83 ec 10             	sub    esp,0x10
c0026698:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002669e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00266a2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00266a5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00266a9:	ee                   	out    dx,al
c00266aa:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00266b0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00266b4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00266b7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00266bb:	ee                   	out    dx,al
c00266bc:	90                   	nop
c00266bd:	c9                   	leave  
c00266be:	c3                   	ret    
c00266bf:	90                   	nop

c00266c0 <PIC::close(int, int, void*)>:
c00266c0:	55                   	push   ebp
c00266c1:	89 e5                	mov    ebp,esp
c00266c3:	83 ec 08             	sub    esp,0x8
c00266c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00266cb:	83 c0 3c             	add    eax,0x3c
c00266ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d0:	83 ec 0c             	sub    esp,0xc
c00266d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266d6:	ff d0                	call   eax
c00266d8:	83 c4 10             	add    esp,0x10
c00266db:	b8 00 00 00 00       	mov    eax,0x0
c00266e0:	c9                   	leave  
c00266e1:	c3                   	ret    

c00266e2 <PIC::PIC()>:
c00266e2:	83 ec 0c             	sub    esp,0xc
c00266e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e9:	83 ec 08             	sub    esp,0x8
c00266ec:	68 e4 dc 02 c0       	push   0xc002dce4
c00266f1:	50                   	push   eax
c00266f2:	e8 ab df fe ff       	call   c00146a2 <InterruptController::InterruptController(char const*)>
c00266f7:	83 c4 10             	add    esp,0x10
c00266fa:	ba 10 dd 02 c0       	mov    edx,0xc002dd10
c00266ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026703:	89 10                	mov    DWORD PTR [eax],edx
c0026705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026709:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670f:	0f b6 d0             	movzx  edx,al
c0026712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026716:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002671d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026721:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026727:	0f b6 d0             	movzx  edx,al
c002672a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026737:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002673d:	8d 50 01             	lea    edx,[eax+0x1]
c0026740:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026744:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002674a:	0f b6 d0             	movzx  edx,al
c002674d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026751:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026755:	83 e1 3f             	and    ecx,0x3f
c0026758:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002675c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026760:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026766:	0f b6 d0             	movzx  edx,al
c0026769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026778:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002677e:	0f b6 d0             	movzx  edx,al
c0026781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026785:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002678e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026794:	8d 50 01             	lea    edx,[eax+0x1]
c0026797:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002679b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267a1:	0f b6 d0             	movzx  edx,al
c00267a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267ac:	83 e1 3f             	and    ecx,0x3f
c00267af:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267b3:	90                   	nop
c00267b4:	83 c4 0c             	add    esp,0xc
c00267b7:	c3                   	ret    

c00267b8 <PIC::ioWait()>:
c00267b8:	eb 00                	jmp    c00267ba <PIC::ioWait()+0x2>
c00267ba:	eb 00                	jmp    c00267bc <PIC::ioWait()+0x4>
c00267bc:	90                   	nop
c00267bd:	c3                   	ret    

c00267be <PIC::getIRQReg(int)>:
c00267be:	55                   	push   ebp
c00267bf:	89 e5                	mov    ebp,esp
c00267c1:	83 ec 10             	sub    esp,0x10
c00267c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267c7:	0f b6 c0             	movzx  eax,al
c00267ca:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267d0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267d3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267d6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267da:	ee                   	out    dx,al
c00267db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267de:	0f b6 c0             	movzx  eax,al
c00267e1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267e7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267ea:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267ed:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267f1:	ee                   	out    dx,al
c00267f2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267f8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267fc:	89 c2                	mov    edx,eax
c00267fe:	ec                   	in     al,dx
c00267ff:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026802:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026805:	0f b6 c0             	movzx  eax,al
c0026808:	c1 e0 08             	shl    eax,0x8
c002680b:	89 c1                	mov    ecx,eax
c002680d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026813:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026817:	89 c2                	mov    edx,eax
c0026819:	ec                   	in     al,dx
c002681a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002681d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026820:	0f b6 c0             	movzx  eax,al
c0026823:	09 c8                	or     eax,ecx
c0026825:	c9                   	leave  
c0026826:	c3                   	ret    
c0026827:	90                   	nop

c0026828 <PIC::eoi(unsigned char)>:
c0026828:	55                   	push   ebp
c0026829:	89 e5                	mov    ebp,esp
c002682b:	83 ec 14             	sub    esp,0x14
c002682e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026831:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026834:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026838:	75 1e                	jne    c0026858 <PIC::eoi(unsigned char)+0x30>
c002683a:	6a 0b                	push   0xb
c002683c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002683f:	e8 7a ff ff ff       	call   c00267be <PIC::getIRQReg(int)>
c0026844:	83 c4 08             	add    esp,0x8
c0026847:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002684b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002684f:	25 80 00 00 00       	and    eax,0x80
c0026854:	85 c0                	test   eax,eax
c0026856:	74 5f                	je     c00268b7 <PIC::eoi(unsigned char)+0x8f>
c0026858:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002685c:	75 2d                	jne    c002688b <PIC::eoi(unsigned char)+0x63>
c002685e:	6a 0b                	push   0xb
c0026860:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026863:	e8 56 ff ff ff       	call   c00267be <PIC::getIRQReg(int)>
c0026868:	83 c4 08             	add    esp,0x8
c002686b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002686f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026872:	66 85 c0             	test   ax,ax
c0026875:	78 14                	js     c002688b <PIC::eoi(unsigned char)+0x63>
c0026877:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002687d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026881:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026884:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026888:	ee                   	out    dx,al
c0026889:	eb 2d                	jmp    c00268b8 <PIC::eoi(unsigned char)+0x90>
c002688b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002688f:	76 12                	jbe    c00268a3 <PIC::eoi(unsigned char)+0x7b>
c0026891:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026897:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002689b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002689e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268a2:	ee                   	out    dx,al
c00268a3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268a9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00268ad:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268b0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268b4:	ee                   	out    dx,al
c00268b5:	eb 01                	jmp    c00268b8 <PIC::eoi(unsigned char)+0x90>
c00268b7:	90                   	nop
c00268b8:	c9                   	leave  
c00268b9:	c3                   	ret    

c00268ba <PIC::remap()>:
c00268ba:	55                   	push   ebp
c00268bb:	89 e5                	mov    ebp,esp
c00268bd:	83 ec 48             	sub    esp,0x48
c00268c0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268c7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268ce:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268d4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268d7:	89 c2                	mov    edx,eax
c00268d9:	ec                   	in     al,dx
c00268da:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268dd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268e0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268e3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268e9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268ec:	89 c2                	mov    edx,eax
c00268ee:	ec                   	in     al,dx
c00268ef:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268f2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268f5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268f8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268fe:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026902:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026905:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026908:	ee                   	out    dx,al
c0026909:	83 ec 0c             	sub    esp,0xc
c002690c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002690f:	e8 a4 fe ff ff       	call   c00267b8 <PIC::ioWait()>
c0026914:	83 c4 10             	add    esp,0x10
c0026917:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002691d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026921:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026924:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026927:	ee                   	out    dx,al
c0026928:	83 ec 0c             	sub    esp,0xc
c002692b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002692e:	e8 85 fe ff ff       	call   c00267b8 <PIC::ioWait()>
c0026933:	83 c4 10             	add    esp,0x10
c0026936:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026939:	0f b6 c0             	movzx  eax,al
c002693c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026942:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026945:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026948:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002694b:	ee                   	out    dx,al
c002694c:	83 ec 0c             	sub    esp,0xc
c002694f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026952:	e8 61 fe ff ff       	call   c00267b8 <PIC::ioWait()>
c0026957:	83 c4 10             	add    esp,0x10
c002695a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002695d:	0f b6 c0             	movzx  eax,al
c0026960:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026966:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026969:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002696c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002696f:	ee                   	out    dx,al
c0026970:	83 ec 0c             	sub    esp,0xc
c0026973:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026976:	e8 3d fe ff ff       	call   c00267b8 <PIC::ioWait()>
c002697b:	83 c4 10             	add    esp,0x10
c002697e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026984:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026988:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002698b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002698e:	ee                   	out    dx,al
c002698f:	83 ec 0c             	sub    esp,0xc
c0026992:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026995:	e8 1e fe ff ff       	call   c00267b8 <PIC::ioWait()>
c002699a:	83 c4 10             	add    esp,0x10
c002699d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00269a3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00269a7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00269aa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269ad:	ee                   	out    dx,al
c00269ae:	83 ec 0c             	sub    esp,0xc
c00269b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b4:	e8 ff fd ff ff       	call   c00267b8 <PIC::ioWait()>
c00269b9:	83 c4 10             	add    esp,0x10
c00269bc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269c2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269c6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269c9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269cc:	ee                   	out    dx,al
c00269cd:	83 ec 0c             	sub    esp,0xc
c00269d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269d3:	e8 e0 fd ff ff       	call   c00267b8 <PIC::ioWait()>
c00269d8:	83 c4 10             	add    esp,0x10
c00269db:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269e1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269e5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269e8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269eb:	ee                   	out    dx,al
c00269ec:	83 ec 0c             	sub    esp,0xc
c00269ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269f2:	e8 c1 fd ff ff       	call   c00267b8 <PIC::ioWait()>
c00269f7:	83 c4 10             	add    esp,0x10
c00269fa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269fe:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026a04:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026a07:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026a0a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a0d:	ee                   	out    dx,al
c0026a0e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026a12:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a18:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a1b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a1e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a21:	ee                   	out    dx,al
c0026a22:	90                   	nop
c0026a23:	c9                   	leave  
c0026a24:	c3                   	ret    
c0026a25:	90                   	nop

c0026a26 <PIC::open(int, int, void*)>:
c0026a26:	55                   	push   ebp
c0026a27:	89 e5                	mov    ebp,esp
c0026a29:	83 ec 18             	sub    esp,0x18
c0026a2c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a32:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a36:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a39:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a3d:	ee                   	out    dx,al
c0026a3e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a44:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a48:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a4b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a4f:	ee                   	out    dx,al
c0026a50:	83 ec 0c             	sub    esp,0xc
c0026a53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a56:	e8 5f fe ff ff       	call   c00268ba <PIC::remap()>
c0026a5b:	83 c4 10             	add    esp,0x10
c0026a5e:	b8 00 00 00 00       	mov    eax,0x0
c0026a63:	c9                   	leave  
c0026a64:	c3                   	ret    
c0026a65:	90                   	nop

c0026a66 <APICTimer::close(int, int, void*)>:
c0026a66:	b8 00 00 00 00       	mov    eax,0x0
c0026a6b:	c3                   	ret    

c0026a6c <apicTimerHandler(regs*, void*)>:
c0026a6c:	83 ec 0c             	sub    esp,0xc
c0026a6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a73:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a75:	99                   	cdq    
c0026a76:	52                   	push   edx
c0026a77:	50                   	push   eax
c0026a78:	6a 00                	push   0x0
c0026a7a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a7f:	e8 90 07 00 00       	call   c0027214 <__udivdi3>
c0026a84:	83 c4 10             	add    esp,0x10
c0026a87:	83 ec 08             	sub    esp,0x8
c0026a8a:	52                   	push   edx
c0026a8b:	50                   	push   eax
c0026a8c:	e8 a0 fd fe ff       	call   c0016831 <timerHandler(unsigned long long)>
c0026a91:	83 c4 10             	add    esp,0x10
c0026a94:	90                   	nop
c0026a95:	83 c4 0c             	add    esp,0xc
c0026a98:	c3                   	ret    
c0026a99:	90                   	nop

c0026a9a <APICTimer::write(int)>:
c0026a9a:	53                   	push   ebx
c0026a9b:	83 ec 28             	sub    esp,0x28
c0026a9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026aa2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026aa6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026aac:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0026ab1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ab7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026abd:	83 ec 0c             	sub    esp,0xc
c0026ac0:	50                   	push   eax
c0026ac1:	e8 de f4 ff ff       	call   c0025fa4 <APIC::getBase()>
c0026ac6:	83 c4 10             	add    esp,0x10
c0026ac9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026acd:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c0026ad2:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c0026ad8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026adc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ae4:	05 e0 03 00 00       	add    eax,0x3e0
c0026ae9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026aef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026af3:	05 80 03 00 00       	add    eax,0x380
c0026af8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026afe:	fb                   	sti    
c0026aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b07:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026b0c:	83 d2 00             	adc    edx,0x0
c0026b0f:	89 c1                	mov    ecx,eax
c0026b11:	89 d3                	mov    ebx,edx
c0026b13:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c0026b18:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c0026b1e:	39 c8                	cmp    eax,ecx
c0026b20:	89 d0                	mov    eax,edx
c0026b22:	19 d8                	sbb    eax,ebx
c0026b24:	73 02                	jae    c0026b28 <APICTimer::write(int)+0x8e>
c0026b26:	eb d7                	jmp    c0026aff <APICTimer::write(int)+0x65>
c0026b28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b2c:	05 20 03 00 00       	add    eax,0x320
c0026b31:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b3b:	05 90 03 00 00       	add    eax,0x390
c0026b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b42:	f7 d0                	not    eax
c0026b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b50:	ba 00 00 00 00       	mov    edx,0x0
c0026b55:	f7 f3                	div    ebx
c0026b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b65:	0d 00 00 02 00       	or     eax,0x20000
c0026b6a:	89 c2                	mov    edx,eax
c0026b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b70:	05 20 03 00 00       	add    eax,0x320
c0026b75:	89 10                	mov    DWORD PTR [eax],edx
c0026b77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b7b:	05 e0 03 00 00       	add    eax,0x3e0
c0026b80:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b8a:	05 80 03 00 00       	add    eax,0x380
c0026b8f:	89 c2                	mov    edx,eax
c0026b91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b95:	89 02                	mov    DWORD PTR [edx],eax
c0026b97:	90                   	nop
c0026b98:	83 c4 28             	add    esp,0x28
c0026b9b:	5b                   	pop    ebx
c0026b9c:	c3                   	ret    
c0026b9d:	90                   	nop

c0026b9e <APICTimer::open(int, int, void*)>:
c0026b9e:	57                   	push   edi
c0026b9f:	56                   	push   esi
c0026ba0:	53                   	push   ebx
c0026ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ba7:	83 c0 24             	add    eax,0x24
c0026baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bac:	83 ec 08             	sub    esp,0x8
c0026baf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bb7:	ff d0                	call   eax
c0026bb9:	83 c4 10             	add    esp,0x10
c0026bbc:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0026bc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bc7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026bcd:	83 ec 0c             	sub    esp,0xc
c0026bd0:	50                   	push   eax
c0026bd1:	e8 ce f3 ff ff       	call   c0025fa4 <APIC::getBase()>
c0026bd6:	83 c4 10             	add    esp,0x10
c0026bd9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026be9:	0f b6 f8             	movzx  edi,al
c0026bec:	89 d0                	mov    eax,edx
c0026bee:	ba 00 00 00 00       	mov    edx,0x0
c0026bf3:	89 c1                	mov    ecx,eax
c0026bf5:	80 e5 ff             	and    ch,0xff
c0026bf8:	89 cb                	mov    ebx,ecx
c0026bfa:	0f b6 f2             	movzx  esi,dl
c0026bfd:	89 d8                	mov    eax,ebx
c0026bff:	89 f2                	mov    edx,esi
c0026c01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c05:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026c08:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026c0c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026c10:	83 e0 00             	and    eax,0x0
c0026c13:	09 d0                	or     eax,edx
c0026c15:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c23:	8d 50 01             	lea    edx,[eax+0x1]
c0026c26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c2a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c30:	0f b6 d0             	movzx  edx,al
c0026c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c37:	83 c2 08             	add    edx,0x8
c0026c3a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c3e:	0f b6 c9             	movzx  ecx,cl
c0026c41:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c47:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c53:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c61:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c6b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c71:	83 ec 0c             	sub    esp,0xc
c0026c74:	51                   	push   ecx
c0026c75:	6a 01                	push   0x1
c0026c77:	68 6c 6a 02 c0       	push   0xc0026a6c
c0026c7c:	52                   	push   edx
c0026c7d:	50                   	push   eax
c0026c7e:	e8 19 d0 fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c83:	83 c4 20             	add    esp,0x20
c0026c86:	89 c2                	mov    edx,eax
c0026c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c8c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c92:	b8 00 00 00 00       	mov    eax,0x0
c0026c97:	5b                   	pop    ebx
c0026c98:	5e                   	pop    esi
c0026c99:	5f                   	pop    edi
c0026c9a:	c3                   	ret    
c0026c9b:	90                   	nop

c0026c9c <APICTimer::APICTimer()>:
c0026c9c:	83 ec 0c             	sub    esp,0xc
c0026c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca3:	83 ec 08             	sub    esp,0x8
c0026ca6:	68 50 dd 02 c0       	push   0xc002dd50
c0026cab:	50                   	push   eax
c0026cac:	e8 f1 fa fe ff       	call   c00167a2 <Timer::Timer(char const*)>
c0026cb1:	83 c4 10             	add    esp,0x10
c0026cb4:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c0026cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cbd:	89 10                	mov    DWORD PTR [eax],edx
c0026cbf:	90                   	nop
c0026cc0:	83 c4 0c             	add    esp,0xc
c0026cc3:	c3                   	ret    

c0026cc4 <PIT::write(int)>:
c0026cc4:	83 ec 10             	sub    esp,0x10
c0026cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ccb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026ccf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026cd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026cd9:	a3 c4 33 03 c0       	mov    ds:0xc00333c4,eax
c0026cde:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026ce3:	99                   	cdq    
c0026ce4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026ce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cf3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026cf8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026cfc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026d01:	ee                   	out    dx,al
c0026d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d06:	0f b6 c0             	movzx  eax,al
c0026d09:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026d10:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026d14:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d18:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d1d:	ee                   	out    dx,al
c0026d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d22:	c1 f8 08             	sar    eax,0x8
c0026d25:	0f b6 c0             	movzx  eax,al
c0026d28:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d2f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d37:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d3c:	ee                   	out    dx,al
c0026d3d:	90                   	nop
c0026d3e:	83 c4 10             	add    esp,0x10
c0026d41:	c3                   	ret    

c0026d42 <pitHandler(regs*, void*)>:
c0026d42:	83 ec 0c             	sub    esp,0xc
c0026d45:	a1 c4 33 03 c0       	mov    eax,ds:0xc00333c4
c0026d4a:	99                   	cdq    
c0026d4b:	52                   	push   edx
c0026d4c:	50                   	push   eax
c0026d4d:	6a 00                	push   0x0
c0026d4f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d54:	e8 bb 04 00 00       	call   c0027214 <__udivdi3>
c0026d59:	83 c4 10             	add    esp,0x10
c0026d5c:	83 ec 08             	sub    esp,0x8
c0026d5f:	52                   	push   edx
c0026d60:	50                   	push   eax
c0026d61:	e8 cb fa fe ff       	call   c0016831 <timerHandler(unsigned long long)>
c0026d66:	83 c4 10             	add    esp,0x10
c0026d69:	90                   	nop
c0026d6a:	83 c4 0c             	add    esp,0xc
c0026d6d:	c3                   	ret    

c0026d6e <PIT::open(int, int, void*)>:
c0026d6e:	83 ec 0c             	sub    esp,0xc
c0026d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d77:	83 c0 24             	add    eax,0x24
c0026d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d7c:	83 ec 08             	sub    esp,0x8
c0026d7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d87:	ff d0                	call   eax
c0026d89:	83 c4 10             	add    esp,0x10
c0026d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d90:	83 ec 0c             	sub    esp,0xc
c0026d93:	6a 00                	push   0x0
c0026d95:	6a 01                	push   0x1
c0026d97:	68 42 6d 02 c0       	push   0xc0026d42
c0026d9c:	6a 00                	push   0x0
c0026d9e:	50                   	push   eax
c0026d9f:	e8 f8 ce fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026da4:	83 c4 20             	add    esp,0x20
c0026da7:	89 c2                	mov    edx,eax
c0026da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dad:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026db3:	b8 00 00 00 00       	mov    eax,0x0
c0026db8:	83 c4 0c             	add    esp,0xc
c0026dbb:	c3                   	ret    

c0026dbc <PIT::close(int, int, void*)>:
c0026dbc:	83 ec 0c             	sub    esp,0xc
c0026dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd1:	6a 01                	push   0x1
c0026dd3:	68 42 6d 02 c0       	push   0xc0026d42
c0026dd8:	6a 00                	push   0x0
c0026dda:	50                   	push   eax
c0026ddb:	e8 06 cf fe ff       	call   c0013ce6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026de0:	83 c4 10             	add    esp,0x10
c0026de3:	b8 00 00 00 00       	mov    eax,0x0
c0026de8:	83 c4 0c             	add    esp,0xc
c0026deb:	c3                   	ret    

c0026dec <PIT::PIT()>:
c0026dec:	83 ec 0c             	sub    esp,0xc
c0026def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df3:	83 ec 08             	sub    esp,0x8
c0026df6:	68 8c dd 02 c0       	push   0xc002dd8c
c0026dfb:	50                   	push   eax
c0026dfc:	e8 a1 f9 fe ff       	call   c00167a2 <Timer::Timer(char const*)>
c0026e01:	83 c4 10             	add    esp,0x10
c0026e04:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c0026e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0d:	89 10                	mov    DWORD PTR [eax],edx
c0026e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e19:	0f b6 d0             	movzx  edx,al
c0026e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e20:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e31:	0f b6 d0             	movzx  edx,al
c0026e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e38:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e41:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e47:	8d 50 01             	lea    edx,[eax+0x1]
c0026e4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e4e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e54:	0f b6 d0             	movzx  edx,al
c0026e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e5b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e5f:	83 e1 3f             	and    ecx,0x3f
c0026e62:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e66:	90                   	nop
c0026e67:	83 c4 0c             	add    esp,0xc
c0026e6a:	c3                   	ret    
c0026e6b:	66 90                	xchg   ax,ax
c0026e6d:	66 90                	xchg   ax,ax
c0026e6f:	90                   	nop

c0026e70 <avxDetect>:
c0026e70:	b8 00 00 00 00       	mov    eax,0x0
c0026e75:	c3                   	ret    

c0026e76 <avxSave>:
c0026e76:	c3                   	ret    

c0026e77 <avxLoad>:
c0026e77:	c3                   	ret    

c0026e78 <avxInit>:
c0026e78:	c3                   	ret    

c0026e79 <avxClose>:
c0026e79:	c3                   	ret    

c0026e7a <wouldSheSayYes>:
c0026e7a:	c3                   	ret    
c0026e7b:	49                   	dec    ecx
c0026e7c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e80:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e84:	75 20                	jne    c0026ea6 <sseDetect.noSSE+0x1>
c0026e86:	4e                   	dec    esi
c0026e87:	79 61                	jns    c0026eea <x87Detect+0x14>
c0026e89:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e8e:	66 90                	xchg   ax,ax

c0026e90 <absolutelyNoChanceInHell>:
c0026e90:	b8 01 00 00 00       	mov    eax,0x1
c0026e95:	0f a2                	cpuid  
c0026e97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e9d:	74 06                	je     c0026ea5 <sseDetect.noSSE>
c0026e9f:	b8 01 00 00 00       	mov    eax,0x1
c0026ea4:	c3                   	ret    

c0026ea5 <sseDetect.noSSE>:
c0026ea5:	31 c0                	xor    eax,eax
c0026ea7:	c3                   	ret    

c0026ea8 <sseSave>:
c0026ea8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026ead:	c3                   	ret    

c0026eae <sseLoad>:
c0026eae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026eb3:	c3                   	ret    

c0026eb4 <sseInit>:
c0026eb4:	e8 49 00 00 00       	call   c0026f02 <x87Init>
c0026eb9:	0f 20 e0             	mov    eax,cr4
c0026ebc:	66 0d 00 06          	or     ax,0x600
c0026ec0:	0f 22 e0             	mov    cr4,eax
c0026ec3:	c3                   	ret    

c0026ec4 <sseClose>:
c0026ec4:	c3                   	ret    
c0026ec5:	66 90                	xchg   ax,ax
c0026ec7:	66 90                	xchg   ax,ax
c0026ec9:	66 90                	xchg   ax,ax
c0026ecb:	66 90                	xchg   ax,ax
c0026ecd:	66 90                	xchg   ax,ax
c0026ecf:	90                   	nop

c0026ed0 <value_37F>:
c0026ed0:	7f 03                	jg     c0026ed5 <value_37A+0x1>

c0026ed2 <value_37E>:
c0026ed2:	7e 03                	jle    c0026ed7 <x87Detect+0x1>

c0026ed4 <value_37A>:
c0026ed4:	7a 03                	jp     c0026ed9 <x87Detect+0x3>

c0026ed6 <x87Detect>:
c0026ed6:	b8 01 00 00 00       	mov    eax,0x1
c0026edb:	0f a2                	cpuid  
c0026edd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ee3:	74 06                	je     c0026eeb <x87Detect.nox87>
c0026ee5:	b8 01 00 00 00       	mov    eax,0x1
c0026eea:	c3                   	ret    

c0026eeb <x87Detect.nox87>:
c0026eeb:	b8 00 00 00 00       	mov    eax,0x0
c0026ef0:	c3                   	ret    

c0026ef1 <x87Save>:
c0026ef1:	55                   	push   ebp
c0026ef2:	89 e5                	mov    ebp,esp
c0026ef4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ef8:	c9                   	leave  
c0026ef9:	c3                   	ret    

c0026efa <x87Load>:
c0026efa:	55                   	push   ebp
c0026efb:	89 e5                	mov    ebp,esp
c0026efd:	dd 65 08             	frstor [ebp+0x8]
c0026f00:	c9                   	leave  
c0026f01:	c3                   	ret    

c0026f02 <x87Init>:
c0026f02:	9b db e3             	finit  
c0026f05:	0f 20 c0             	mov    eax,cr0
c0026f08:	66 25 fb ff          	and    ax,0xfffb
c0026f0c:	66 0d 22 00          	or     ax,0x22
c0026f10:	0f 22 c0             	mov    cr0,eax
c0026f13:	0f 06                	clts   
c0026f15:	d9 2d d4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026ed4
c0026f1b:	c3                   	ret    

c0026f1c <x87Close>:
c0026f1c:	c3                   	ret    
c0026f1d:	66 90                	xchg   ax,ax
c0026f1f:	90                   	nop

c0026f20 <__do_global_ctors_aux>:
c0026f20:	a1 58 9b 02 c0       	mov    eax,ds:0xc0029b58
c0026f25:	83 f8 ff             	cmp    eax,0xffffffff
c0026f28:	74 1a                	je     c0026f44 <__do_global_ctors_aux+0x24>
c0026f2a:	55                   	push   ebp
c0026f2b:	89 e5                	mov    ebp,esp
c0026f2d:	53                   	push   ebx
c0026f2e:	52                   	push   edx
c0026f2f:	bb 58 9b 02 c0       	mov    ebx,0xc0029b58
c0026f34:	ff d0                	call   eax
c0026f36:	83 eb 04             	sub    ebx,0x4
c0026f39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f3b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f3e:	75 f4                	jne    c0026f34 <__do_global_ctors_aux+0x14>
c0026f40:	58                   	pop    eax
c0026f41:	5b                   	pop    ebx
c0026f42:	5d                   	pop    ebp
c0026f43:	c3                   	ret    
c0026f44:	c3                   	ret    
c0026f45:	66 90                	xchg   ax,ax
c0026f47:	90                   	nop

c0026f48 <__divdi3>:
c0026f48:	55                   	push   ebp
c0026f49:	57                   	push   edi
c0026f4a:	56                   	push   esi
c0026f4b:	53                   	push   ebx
c0026f4c:	83 ec 1c             	sub    esp,0x1c
c0026f4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f5a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f62:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f66:	85 db                	test   ebx,ebx
c0026f68:	0f 88 8e 00 00 00    	js     c0026ffc <__divdi3+0xb4>
c0026f6e:	89 dd                	mov    ebp,ebx
c0026f70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f78:	89 d3                	mov    ebx,edx
c0026f7a:	85 d2                	test   edx,edx
c0026f7c:	79 0d                	jns    c0026f8b <__divdi3+0x43>
c0026f7e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f82:	f7 d8                	neg    eax
c0026f84:	83 d2 00             	adc    edx,0x0
c0026f87:	f7 da                	neg    edx
c0026f89:	89 d3                	mov    ebx,edx
c0026f8b:	89 c7                	mov    edi,eax
c0026f8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f90:	85 db                	test   ebx,ebx
c0026f92:	75 48                	jne    c0026fdc <__divdi3+0x94>
c0026f94:	39 ef                	cmp    edi,ebp
c0026f96:	76 24                	jbe    c0026fbc <__divdi3+0x74>
c0026f98:	89 ea                	mov    edx,ebp
c0026f9a:	f7 f7                	div    edi
c0026f9c:	89 c1                	mov    ecx,eax
c0026f9e:	31 f6                	xor    esi,esi
c0026fa0:	89 c8                	mov    eax,ecx
c0026fa2:	89 f2                	mov    edx,esi
c0026fa4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026fa8:	85 c9                	test   ecx,ecx
c0026faa:	74 07                	je     c0026fb3 <__divdi3+0x6b>
c0026fac:	f7 d8                	neg    eax
c0026fae:	83 d2 00             	adc    edx,0x0
c0026fb1:	f7 da                	neg    edx
c0026fb3:	83 c4 1c             	add    esp,0x1c
c0026fb6:	5b                   	pop    ebx
c0026fb7:	5e                   	pop    esi
c0026fb8:	5f                   	pop    edi
c0026fb9:	5d                   	pop    ebp
c0026fba:	c3                   	ret    
c0026fbb:	90                   	nop
c0026fbc:	85 ff                	test   edi,edi
c0026fbe:	75 0b                	jne    c0026fcb <__divdi3+0x83>
c0026fc0:	b8 01 00 00 00       	mov    eax,0x1
c0026fc5:	31 d2                	xor    edx,edx
c0026fc7:	f7 f3                	div    ebx
c0026fc9:	89 c7                	mov    edi,eax
c0026fcb:	31 d2                	xor    edx,edx
c0026fcd:	89 e8                	mov    eax,ebp
c0026fcf:	f7 f7                	div    edi
c0026fd1:	89 c6                	mov    esi,eax
c0026fd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fd6:	f7 f7                	div    edi
c0026fd8:	89 c1                	mov    ecx,eax
c0026fda:	eb c4                	jmp    c0026fa0 <__divdi3+0x58>
c0026fdc:	39 eb                	cmp    ebx,ebp
c0026fde:	77 3c                	ja     c002701c <__divdi3+0xd4>
c0026fe0:	0f bd f3             	bsr    esi,ebx
c0026fe3:	83 f6 1f             	xor    esi,0x1f
c0026fe6:	75 40                	jne    c0027028 <__divdi3+0xe0>
c0026fe8:	39 eb                	cmp    ebx,ebp
c0026fea:	72 09                	jb     c0026ff5 <__divdi3+0xad>
c0026fec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fef:	0f 87 97 00 00 00    	ja     c002708c <__divdi3+0x144>
c0026ff5:	b9 01 00 00 00       	mov    ecx,0x1
c0026ffa:	eb a4                	jmp    c0026fa0 <__divdi3+0x58>
c0026ffc:	f7 d9                	neg    ecx
c0026ffe:	83 d3 00             	adc    ebx,0x0
c0027001:	f7 db                	neg    ebx
c0027003:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027006:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002700a:	89 dd                	mov    ebp,ebx
c002700c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027014:	e9 5f ff ff ff       	jmp    c0026f78 <__divdi3+0x30>
c0027019:	8d 76 00             	lea    esi,[esi+0x0]
c002701c:	31 f6                	xor    esi,esi
c002701e:	31 c9                	xor    ecx,ecx
c0027020:	e9 7b ff ff ff       	jmp    c0026fa0 <__divdi3+0x58>
c0027025:	8d 76 00             	lea    esi,[esi+0x0]
c0027028:	b8 20 00 00 00       	mov    eax,0x20
c002702d:	29 f0                	sub    eax,esi
c002702f:	89 f1                	mov    ecx,esi
c0027031:	d3 e3                	shl    ebx,cl
c0027033:	89 fa                	mov    edx,edi
c0027035:	88 c1                	mov    cl,al
c0027037:	d3 ea                	shr    edx,cl
c0027039:	09 da                	or     edx,ebx
c002703b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002703f:	89 f1                	mov    ecx,esi
c0027041:	d3 e7                	shl    edi,cl
c0027043:	89 eb                	mov    ebx,ebp
c0027045:	88 c1                	mov    cl,al
c0027047:	d3 eb                	shr    ebx,cl
c0027049:	89 f1                	mov    ecx,esi
c002704b:	d3 e5                	shl    ebp,cl
c002704d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027050:	88 c1                	mov    cl,al
c0027052:	d3 ea                	shr    edx,cl
c0027054:	09 d5                	or     ebp,edx
c0027056:	89 e8                	mov    eax,ebp
c0027058:	89 da                	mov    edx,ebx
c002705a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002705e:	89 d3                	mov    ebx,edx
c0027060:	89 c5                	mov    ebp,eax
c0027062:	f7 e7                	mul    edi
c0027064:	39 d3                	cmp    ebx,edx
c0027066:	72 18                	jb     c0027080 <__divdi3+0x138>
c0027068:	74 0a                	je     c0027074 <__divdi3+0x12c>
c002706a:	89 e9                	mov    ecx,ebp
c002706c:	31 f6                	xor    esi,esi
c002706e:	e9 2d ff ff ff       	jmp    c0026fa0 <__divdi3+0x58>
c0027073:	90                   	nop
c0027074:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027077:	89 f1                	mov    ecx,esi
c0027079:	d3 e7                	shl    edi,cl
c002707b:	39 c7                	cmp    edi,eax
c002707d:	73 eb                	jae    c002706a <__divdi3+0x122>
c002707f:	90                   	nop
c0027080:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027083:	31 f6                	xor    esi,esi
c0027085:	e9 16 ff ff ff       	jmp    c0026fa0 <__divdi3+0x58>
c002708a:	66 90                	xchg   ax,ax
c002708c:	31 c9                	xor    ecx,ecx
c002708e:	e9 0d ff ff ff       	jmp    c0026fa0 <__divdi3+0x58>
c0027093:	90                   	nop

c0027094 <__moddi3>:
c0027094:	55                   	push   ebp
c0027095:	57                   	push   edi
c0027096:	56                   	push   esi
c0027097:	53                   	push   ebx
c0027098:	83 ec 2c             	sub    esp,0x2c
c002709b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002709f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00270a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00270a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00270ab:	85 db                	test   ebx,ebx
c00270ad:	0f 88 85 00 00 00    	js     c0027138 <__moddi3+0xa4>
c00270b3:	89 de                	mov    esi,ebx
c00270b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00270bd:	89 d7                	mov    edi,edx
c00270bf:	85 d2                	test   edx,edx
c00270c1:	79 09                	jns    c00270cc <__moddi3+0x38>
c00270c3:	f7 d8                	neg    eax
c00270c5:	83 d2 00             	adc    edx,0x0
c00270c8:	f7 da                	neg    edx
c00270ca:	89 d7                	mov    edi,edx
c00270cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270d0:	89 cd                	mov    ebp,ecx
c00270d2:	85 ff                	test   edi,edi
c00270d4:	75 52                	jne    c0027128 <__moddi3+0x94>
c00270d6:	89 c3                	mov    ebx,eax
c00270d8:	39 f0                	cmp    eax,esi
c00270da:	76 24                	jbe    c0027100 <__moddi3+0x6c>
c00270dc:	89 c8                	mov    eax,ecx
c00270de:	89 f2                	mov    edx,esi
c00270e0:	f7 f3                	div    ebx
c00270e2:	89 d6                	mov    esi,edx
c00270e4:	89 f0                	mov    eax,esi
c00270e6:	31 d2                	xor    edx,edx
c00270e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270ec:	85 c9                	test   ecx,ecx
c00270ee:	74 07                	je     c00270f7 <__moddi3+0x63>
c00270f0:	f7 d8                	neg    eax
c00270f2:	83 d2 00             	adc    edx,0x0
c00270f5:	f7 da                	neg    edx
c00270f7:	83 c4 2c             	add    esp,0x2c
c00270fa:	5b                   	pop    ebx
c00270fb:	5e                   	pop    esi
c00270fc:	5f                   	pop    edi
c00270fd:	5d                   	pop    ebp
c00270fe:	c3                   	ret    
c00270ff:	90                   	nop
c0027100:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027104:	85 db                	test   ebx,ebx
c0027106:	75 0d                	jne    c0027115 <__moddi3+0x81>
c0027108:	b8 01 00 00 00       	mov    eax,0x1
c002710d:	31 d2                	xor    edx,edx
c002710f:	f7 f7                	div    edi
c0027111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027115:	89 f0                	mov    eax,esi
c0027117:	31 d2                	xor    edx,edx
c0027119:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002711d:	f7 f7                	div    edi
c002711f:	89 e8                	mov    eax,ebp
c0027121:	f7 f7                	div    edi
c0027123:	89 d6                	mov    esi,edx
c0027125:	eb bd                	jmp    c00270e4 <__moddi3+0x50>
c0027127:	90                   	nop
c0027128:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002712c:	39 f7                	cmp    edi,esi
c002712e:	76 20                	jbe    c0027150 <__moddi3+0xbc>
c0027130:	89 c8                	mov    eax,ecx
c0027132:	89 f2                	mov    edx,esi
c0027134:	eb b2                	jmp    c00270e8 <__moddi3+0x54>
c0027136:	66 90                	xchg   ax,ax
c0027138:	f7 d9                	neg    ecx
c002713a:	83 d3 00             	adc    ebx,0x0
c002713d:	f7 db                	neg    ebx
c002713f:	89 de                	mov    esi,ebx
c0027141:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027149:	e9 6f ff ff ff       	jmp    c00270bd <__moddi3+0x29>
c002714e:	66 90                	xchg   ax,ax
c0027150:	0f bd c7             	bsr    eax,edi
c0027153:	83 f0 1f             	xor    eax,0x1f
c0027156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002715a:	75 24                	jne    c0027180 <__moddi3+0xec>
c002715c:	39 f7                	cmp    edi,esi
c002715e:	72 06                	jb     c0027166 <__moddi3+0xd2>
c0027160:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027164:	77 0c                	ja     c0027172 <__moddi3+0xde>
c0027166:	89 e9                	mov    ecx,ebp
c0027168:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002716c:	19 fe                	sbb    esi,edi
c002716e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027172:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027176:	89 f2                	mov    edx,esi
c0027178:	e9 6b ff ff ff       	jmp    c00270e8 <__moddi3+0x54>
c002717d:	8d 76 00             	lea    esi,[esi+0x0]
c0027180:	b8 20 00 00 00       	mov    eax,0x20
c0027185:	89 c2                	mov    edx,eax
c0027187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002718b:	29 da                	sub    edx,ebx
c002718d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027191:	88 d9                	mov    cl,bl
c0027193:	d3 e7                	shl    edi,cl
c0027195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027199:	88 d1                	mov    cl,dl
c002719b:	d3 e8                	shr    eax,cl
c002719d:	09 c7                	or     edi,eax
c002719f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00271a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271a7:	89 d8                	mov    eax,ebx
c00271a9:	88 d9                	mov    cl,bl
c00271ab:	d3 e7                	shl    edi,cl
c00271ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00271b1:	89 f3                	mov    ebx,esi
c00271b3:	88 d1                	mov    cl,dl
c00271b5:	d3 eb                	shr    ebx,cl
c00271b7:	89 c7                	mov    edi,eax
c00271b9:	88 c1                	mov    cl,al
c00271bb:	d3 e6                	shl    esi,cl
c00271bd:	89 e8                	mov    eax,ebp
c00271bf:	88 d1                	mov    cl,dl
c00271c1:	d3 e8                	shr    eax,cl
c00271c3:	09 f0                	or     eax,esi
c00271c5:	89 f9                	mov    ecx,edi
c00271c7:	d3 e5                	shl    ebp,cl
c00271c9:	89 da                	mov    edx,ebx
c00271cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271cf:	89 d3                	mov    ebx,edx
c00271d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271d5:	89 c6                	mov    esi,eax
c00271d7:	89 d1                	mov    ecx,edx
c00271d9:	39 d3                	cmp    ebx,edx
c00271db:	72 27                	jb     c0027204 <__moddi3+0x170>
c00271dd:	74 21                	je     c0027200 <__moddi3+0x16c>
c00271df:	29 f5                	sub    ebp,esi
c00271e1:	19 cb                	sbb    ebx,ecx
c00271e3:	89 de                	mov    esi,ebx
c00271e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271e9:	d3 e6                	shl    esi,cl
c00271eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271ef:	89 f9                	mov    ecx,edi
c00271f1:	d3 ed                	shr    ebp,cl
c00271f3:	09 ee                	or     esi,ebp
c00271f5:	89 f0                	mov    eax,esi
c00271f7:	d3 eb                	shr    ebx,cl
c00271f9:	89 da                	mov    edx,ebx
c00271fb:	e9 e8 fe ff ff       	jmp    c00270e8 <__moddi3+0x54>
c0027200:	39 c5                	cmp    ebp,eax
c0027202:	73 db                	jae    c00271df <__moddi3+0x14b>
c0027204:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027208:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002720c:	89 d1                	mov    ecx,edx
c002720e:	89 c6                	mov    esi,eax
c0027210:	eb cd                	jmp    c00271df <__moddi3+0x14b>
c0027212:	66 90                	xchg   ax,ax

c0027214 <__udivdi3>:
c0027214:	55                   	push   ebp
c0027215:	57                   	push   edi
c0027216:	56                   	push   esi
c0027217:	53                   	push   ebx
c0027218:	83 ec 1c             	sub    esp,0x1c
c002721b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002721f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027223:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027227:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002722b:	85 d2                	test   edx,edx
c002722d:	75 41                	jne    c0027270 <__udivdi3+0x5c>
c002722f:	39 f7                	cmp    edi,esi
c0027231:	76 15                	jbe    c0027248 <__udivdi3+0x34>
c0027233:	89 e8                	mov    eax,ebp
c0027235:	89 f2                	mov    edx,esi
c0027237:	f7 f7                	div    edi
c0027239:	31 db                	xor    ebx,ebx
c002723b:	89 da                	mov    edx,ebx
c002723d:	83 c4 1c             	add    esp,0x1c
c0027240:	5b                   	pop    ebx
c0027241:	5e                   	pop    esi
c0027242:	5f                   	pop    edi
c0027243:	5d                   	pop    ebp
c0027244:	c3                   	ret    
c0027245:	8d 76 00             	lea    esi,[esi+0x0]
c0027248:	89 f9                	mov    ecx,edi
c002724a:	85 ff                	test   edi,edi
c002724c:	75 0b                	jne    c0027259 <__udivdi3+0x45>
c002724e:	b8 01 00 00 00       	mov    eax,0x1
c0027253:	31 d2                	xor    edx,edx
c0027255:	f7 f7                	div    edi
c0027257:	89 c1                	mov    ecx,eax
c0027259:	31 d2                	xor    edx,edx
c002725b:	89 f0                	mov    eax,esi
c002725d:	f7 f1                	div    ecx
c002725f:	89 c3                	mov    ebx,eax
c0027261:	89 e8                	mov    eax,ebp
c0027263:	f7 f1                	div    ecx
c0027265:	89 da                	mov    edx,ebx
c0027267:	83 c4 1c             	add    esp,0x1c
c002726a:	5b                   	pop    ebx
c002726b:	5e                   	pop    esi
c002726c:	5f                   	pop    edi
c002726d:	5d                   	pop    ebp
c002726e:	c3                   	ret    
c002726f:	90                   	nop
c0027270:	39 f2                	cmp    edx,esi
c0027272:	77 1c                	ja     c0027290 <__udivdi3+0x7c>
c0027274:	0f bd da             	bsr    ebx,edx
c0027277:	83 f3 1f             	xor    ebx,0x1f
c002727a:	75 24                	jne    c00272a0 <__udivdi3+0x8c>
c002727c:	39 f2                	cmp    edx,esi
c002727e:	72 08                	jb     c0027288 <__udivdi3+0x74>
c0027280:	39 ef                	cmp    edi,ebp
c0027282:	0f 87 84 00 00 00    	ja     c002730c <__udivdi3+0xf8>
c0027288:	b8 01 00 00 00       	mov    eax,0x1
c002728d:	eb ac                	jmp    c002723b <__udivdi3+0x27>
c002728f:	90                   	nop
c0027290:	31 db                	xor    ebx,ebx
c0027292:	31 c0                	xor    eax,eax
c0027294:	89 da                	mov    edx,ebx
c0027296:	83 c4 1c             	add    esp,0x1c
c0027299:	5b                   	pop    ebx
c002729a:	5e                   	pop    esi
c002729b:	5f                   	pop    edi
c002729c:	5d                   	pop    ebp
c002729d:	c3                   	ret    
c002729e:	66 90                	xchg   ax,ax
c00272a0:	b8 20 00 00 00       	mov    eax,0x20
c00272a5:	29 d8                	sub    eax,ebx
c00272a7:	88 d9                	mov    cl,bl
c00272a9:	d3 e2                	shl    edx,cl
c00272ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00272af:	89 fa                	mov    edx,edi
c00272b1:	88 c1                	mov    cl,al
c00272b3:	d3 ea                	shr    edx,cl
c00272b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00272b9:	09 d1                	or     ecx,edx
c00272bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00272bf:	88 d9                	mov    cl,bl
c00272c1:	d3 e7                	shl    edi,cl
c00272c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272c7:	89 f7                	mov    edi,esi
c00272c9:	88 c1                	mov    cl,al
c00272cb:	d3 ef                	shr    edi,cl
c00272cd:	88 d9                	mov    cl,bl
c00272cf:	d3 e6                	shl    esi,cl
c00272d1:	89 ea                	mov    edx,ebp
c00272d3:	88 c1                	mov    cl,al
c00272d5:	d3 ea                	shr    edx,cl
c00272d7:	09 d6                	or     esi,edx
c00272d9:	89 f0                	mov    eax,esi
c00272db:	89 fa                	mov    edx,edi
c00272dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272e1:	89 d7                	mov    edi,edx
c00272e3:	89 c6                	mov    esi,eax
c00272e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272e9:	39 d7                	cmp    edi,edx
c00272eb:	72 13                	jb     c0027300 <__udivdi3+0xec>
c00272ed:	74 09                	je     c00272f8 <__udivdi3+0xe4>
c00272ef:	89 f0                	mov    eax,esi
c00272f1:	31 db                	xor    ebx,ebx
c00272f3:	e9 43 ff ff ff       	jmp    c002723b <__udivdi3+0x27>
c00272f8:	88 d9                	mov    cl,bl
c00272fa:	d3 e5                	shl    ebp,cl
c00272fc:	39 c5                	cmp    ebp,eax
c00272fe:	73 ef                	jae    c00272ef <__udivdi3+0xdb>
c0027300:	8d 46 ff             	lea    eax,[esi-0x1]
c0027303:	31 db                	xor    ebx,ebx
c0027305:	e9 31 ff ff ff       	jmp    c002723b <__udivdi3+0x27>
c002730a:	66 90                	xchg   ax,ax
c002730c:	31 c0                	xor    eax,eax
c002730e:	e9 28 ff ff ff       	jmp    c002723b <__udivdi3+0x27>
c0027313:	90                   	nop

c0027314 <__umoddi3>:
c0027314:	55                   	push   ebp
c0027315:	57                   	push   edi
c0027316:	56                   	push   esi
c0027317:	53                   	push   ebx
c0027318:	83 ec 1c             	sub    esp,0x1c
c002731b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002731f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027323:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027327:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002732b:	89 da                	mov    edx,ebx
c002732d:	85 c0                	test   eax,eax
c002732f:	75 37                	jne    c0027368 <__umoddi3+0x54>
c0027331:	39 df                	cmp    edi,ebx
c0027333:	76 13                	jbe    c0027348 <__umoddi3+0x34>
c0027335:	89 f0                	mov    eax,esi
c0027337:	f7 f7                	div    edi
c0027339:	89 d0                	mov    eax,edx
c002733b:	31 d2                	xor    edx,edx
c002733d:	83 c4 1c             	add    esp,0x1c
c0027340:	5b                   	pop    ebx
c0027341:	5e                   	pop    esi
c0027342:	5f                   	pop    edi
c0027343:	5d                   	pop    ebp
c0027344:	c3                   	ret    
c0027345:	8d 76 00             	lea    esi,[esi+0x0]
c0027348:	89 fd                	mov    ebp,edi
c002734a:	85 ff                	test   edi,edi
c002734c:	75 0b                	jne    c0027359 <__umoddi3+0x45>
c002734e:	b8 01 00 00 00       	mov    eax,0x1
c0027353:	31 d2                	xor    edx,edx
c0027355:	f7 f7                	div    edi
c0027357:	89 c5                	mov    ebp,eax
c0027359:	89 d8                	mov    eax,ebx
c002735b:	31 d2                	xor    edx,edx
c002735d:	f7 f5                	div    ebp
c002735f:	89 f0                	mov    eax,esi
c0027361:	f7 f5                	div    ebp
c0027363:	89 d0                	mov    eax,edx
c0027365:	eb d4                	jmp    c002733b <__umoddi3+0x27>
c0027367:	90                   	nop
c0027368:	89 f1                	mov    ecx,esi
c002736a:	39 d8                	cmp    eax,ebx
c002736c:	76 0a                	jbe    c0027378 <__umoddi3+0x64>
c002736e:	89 f0                	mov    eax,esi
c0027370:	83 c4 1c             	add    esp,0x1c
c0027373:	5b                   	pop    ebx
c0027374:	5e                   	pop    esi
c0027375:	5f                   	pop    edi
c0027376:	5d                   	pop    ebp
c0027377:	c3                   	ret    
c0027378:	0f bd e8             	bsr    ebp,eax
c002737b:	83 f5 1f             	xor    ebp,0x1f
c002737e:	75 1c                	jne    c002739c <__umoddi3+0x88>
c0027380:	39 d8                	cmp    eax,ebx
c0027382:	72 04                	jb     c0027388 <__umoddi3+0x74>
c0027384:	39 f7                	cmp    edi,esi
c0027386:	77 08                	ja     c0027390 <__umoddi3+0x7c>
c0027388:	89 da                	mov    edx,ebx
c002738a:	29 fe                	sub    esi,edi
c002738c:	19 c2                	sbb    edx,eax
c002738e:	89 f1                	mov    ecx,esi
c0027390:	89 c8                	mov    eax,ecx
c0027392:	83 c4 1c             	add    esp,0x1c
c0027395:	5b                   	pop    ebx
c0027396:	5e                   	pop    esi
c0027397:	5f                   	pop    edi
c0027398:	5d                   	pop    ebp
c0027399:	c3                   	ret    
c002739a:	66 90                	xchg   ax,ax
c002739c:	ba 20 00 00 00       	mov    edx,0x20
c00273a1:	29 ea                	sub    edx,ebp
c00273a3:	89 e9                	mov    ecx,ebp
c00273a5:	d3 e0                	shl    eax,cl
c00273a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00273ab:	89 f8                	mov    eax,edi
c00273ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00273b1:	88 d1                	mov    cl,dl
c00273b3:	d3 e8                	shr    eax,cl
c00273b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00273b9:	09 c1                	or     ecx,eax
c00273bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00273bf:	89 e9                	mov    ecx,ebp
c00273c1:	d3 e7                	shl    edi,cl
c00273c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273c7:	89 d8                	mov    eax,ebx
c00273c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273cd:	88 d1                	mov    cl,dl
c00273cf:	d3 e8                	shr    eax,cl
c00273d1:	89 c7                	mov    edi,eax
c00273d3:	89 e9                	mov    ecx,ebp
c00273d5:	d3 e3                	shl    ebx,cl
c00273d7:	89 f0                	mov    eax,esi
c00273d9:	88 d1                	mov    cl,dl
c00273db:	d3 e8                	shr    eax,cl
c00273dd:	09 d8                	or     eax,ebx
c00273df:	89 e9                	mov    ecx,ebp
c00273e1:	d3 e6                	shl    esi,cl
c00273e3:	89 f3                	mov    ebx,esi
c00273e5:	89 fa                	mov    edx,edi
c00273e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273eb:	89 d1                	mov    ecx,edx
c00273ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273f1:	89 c6                	mov    esi,eax
c00273f3:	89 d7                	mov    edi,edx
c00273f5:	39 d1                	cmp    ecx,edx
c00273f7:	72 27                	jb     c0027420 <__umoddi3+0x10c>
c00273f9:	74 21                	je     c002741c <__umoddi3+0x108>
c00273fb:	89 ca                	mov    edx,ecx
c00273fd:	29 f3                	sub    ebx,esi
c00273ff:	19 fa                	sbb    edx,edi
c0027401:	89 d0                	mov    eax,edx
c0027403:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027407:	d3 e0                	shl    eax,cl
c0027409:	89 e9                	mov    ecx,ebp
c002740b:	d3 eb                	shr    ebx,cl
c002740d:	09 d8                	or     eax,ebx
c002740f:	d3 ea                	shr    edx,cl
c0027411:	83 c4 1c             	add    esp,0x1c
c0027414:	5b                   	pop    ebx
c0027415:	5e                   	pop    esi
c0027416:	5f                   	pop    edi
c0027417:	5d                   	pop    ebp
c0027418:	c3                   	ret    
c0027419:	8d 76 00             	lea    esi,[esi+0x0]
c002741c:	39 c3                	cmp    ebx,eax
c002741e:	73 db                	jae    c00273fb <__umoddi3+0xe7>
c0027420:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027424:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027428:	89 d7                	mov    edi,edx
c002742a:	89 c6                	mov    esi,eax
c002742c:	eb cd                	jmp    c00273fb <__umoddi3+0xe7>

c002742e <__addsf3>:
c002742e:	55                   	push   ebp
c002742f:	89 e5                	mov    ebp,esp
c0027431:	57                   	push   edi
c0027432:	56                   	push   esi
c0027433:	53                   	push   ebx
c0027434:	83 ec 08             	sub    esp,0x8
c0027437:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002743a:	89 fa                	mov    edx,edi
c002743c:	89 f8                	mov    eax,edi
c002743e:	c1 f8 17             	sar    eax,0x17
c0027441:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027444:	c1 e2 08             	shl    edx,0x8
c0027447:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002744d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027450:	89 de                	mov    esi,ebx
c0027452:	c1 fe 17             	sar    esi,0x17
c0027455:	c1 e3 08             	shl    ebx,0x8
c0027458:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002745e:	31 f0                	xor    eax,esi
c0027460:	0f 88 3b 01 00 00    	js     c00275a1 <__addsf3+0x173>
c0027466:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027469:	29 f1                	sub    ecx,esi
c002746b:	85 c9                	test   ecx,ecx
c002746d:	7e 54                	jle    c00274c3 <__addsf3+0x95>
c002746f:	89 f0                	mov    eax,esi
c0027471:	84 c0                	test   al,al
c0027473:	75 10                	jne    c0027485 <__addsf3+0x57>
c0027475:	85 db                	test   ebx,ebx
c0027477:	0f 84 aa 02 00 00    	je     c0027727 <__addsf3+0x2f9>
c002747d:	49                   	dec    ecx
c002747e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027481:	74 38                	je     c00274bb <__addsf3+0x8d>
c0027483:	eb 13                	jmp    c0027498 <__addsf3+0x6a>
c0027485:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027488:	f7 d0                	not    eax
c002748a:	84 c0                	test   al,al
c002748c:	0f 84 95 02 00 00    	je     c0027727 <__addsf3+0x2f9>
c0027492:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027498:	83 f9 1f             	cmp    ecx,0x1f
c002749b:	0f 8f 86 02 00 00    	jg     c0027727 <__addsf3+0x2f9>
c00274a1:	89 de                	mov    esi,ebx
c00274a3:	d3 ee                	shr    esi,cl
c00274a5:	b8 20 00 00 00       	mov    eax,0x20
c00274aa:	29 c8                	sub    eax,ecx
c00274ac:	89 c1                	mov    ecx,eax
c00274ae:	d3 e3                	shl    ebx,cl
c00274b0:	31 c0                	xor    eax,eax
c00274b2:	85 db                	test   ebx,ebx
c00274b4:	0f 95 c0             	setne  al
c00274b7:	09 f0                	or     eax,esi
c00274b9:	01 d0                	add    eax,edx
c00274bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00274be:	e9 b6 00 00 00       	jmp    c0027579 <__addsf3+0x14b>
c00274c3:	74 5c                	je     c0027521 <__addsf3+0xf3>
c00274c5:	89 f1                	mov    ecx,esi
c00274c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274d1:	75 14                	jne    c00274e7 <__addsf3+0xb9>
c00274d3:	85 d2                	test   edx,edx
c00274d5:	0f 84 4c 02 00 00    	je     c0027727 <__addsf3+0x2f9>
c00274db:	49                   	dec    ecx
c00274dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274df:	0f 84 94 00 00 00    	je     c0027579 <__addsf3+0x14b>
c00274e5:	eb 12                	jmp    c00274f9 <__addsf3+0xcb>
c00274e7:	89 f0                	mov    eax,esi
c00274e9:	f7 d0                	not    eax
c00274eb:	84 c0                	test   al,al
c00274ed:	0f 84 34 02 00 00    	je     c0027727 <__addsf3+0x2f9>
c00274f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274fc:	83 f9 1f             	cmp    ecx,0x1f
c00274ff:	0f 8f 22 02 00 00    	jg     c0027727 <__addsf3+0x2f9>
c0027505:	89 d7                	mov    edi,edx
c0027507:	d3 ef                	shr    edi,cl
c0027509:	b8 20 00 00 00       	mov    eax,0x20
c002750e:	29 c8                	sub    eax,ecx
c0027510:	89 c1                	mov    ecx,eax
c0027512:	d3 e2                	shl    edx,cl
c0027514:	31 c0                	xor    eax,eax
c0027516:	85 d2                	test   edx,edx
c0027518:	0f 95 c0             	setne  al
c002751b:	09 f8                	or     eax,edi
c002751d:	01 d8                	add    eax,ebx
c002751f:	eb 58                	jmp    c0027579 <__addsf3+0x14b>
c0027521:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027524:	8d 70 01             	lea    esi,[eax+0x1]
c0027527:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002752d:	75 32                	jne    c0027561 <__addsf3+0x133>
c002752f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027533:	75 1f                	jne    c0027554 <__addsf3+0x126>
c0027535:	85 d2                	test   edx,edx
c0027537:	0f 84 e0 01 00 00    	je     c002771d <__addsf3+0x2ef>
c002753d:	85 db                	test   ebx,ebx
c002753f:	0f 84 e2 01 00 00    	je     c0027727 <__addsf3+0x2f9>
c0027545:	89 d0                	mov    eax,edx
c0027547:	01 d8                	add    eax,ebx
c0027549:	0f 89 a9 01 00 00    	jns    c00276f8 <__addsf3+0x2ca>
c002754f:	e9 9d 01 00 00       	jmp    c00276f1 <__addsf3+0x2c3>
c0027554:	85 d2                	test   edx,edx
c0027556:	0f 85 cb 01 00 00    	jne    c0027727 <__addsf3+0x2f9>
c002755c:	e9 bc 01 00 00       	jmp    c002771d <__addsf3+0x2ef>
c0027561:	31 c0                	xor    eax,eax
c0027563:	89 f1                	mov    ecx,esi
c0027565:	f7 d1                	not    ecx
c0027567:	84 c9                	test   cl,cl
c0027569:	0f 84 90 01 00 00    	je     c00276ff <__addsf3+0x2d1>
c002756f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027572:	d1 e8                	shr    eax,1
c0027574:	e9 86 01 00 00       	jmp    c00276ff <__addsf3+0x2d1>
c0027579:	85 c0                	test   eax,eax
c002757b:	0f 89 7e 01 00 00    	jns    c00276ff <__addsf3+0x2d1>
c0027581:	46                   	inc    esi
c0027582:	89 f2                	mov    edx,esi
c0027584:	f7 d2                	not    edx
c0027586:	84 d2                	test   dl,dl
c0027588:	0f 84 6f 01 00 00    	je     c00276fd <__addsf3+0x2cf>
c002758e:	89 c2                	mov    edx,eax
c0027590:	83 e2 01             	and    edx,0x1
c0027593:	d1 e8                	shr    eax,1
c0027595:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002759a:	09 d0                	or     eax,edx
c002759c:	e9 5e 01 00 00       	jmp    c00276ff <__addsf3+0x2d1>
c00275a1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00275a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275a8:	89 f0                	mov    eax,esi
c00275aa:	0f b6 c0             	movzx  eax,al
c00275ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275b0:	29 c1                	sub    ecx,eax
c00275b2:	85 c9                	test   ecx,ecx
c00275b4:	7e 55                	jle    c002760b <__addsf3+0x1dd>
c00275b6:	85 c0                	test   eax,eax
c00275b8:	75 11                	jne    c00275cb <__addsf3+0x19d>
c00275ba:	85 db                	test   ebx,ebx
c00275bc:	0f 84 65 01 00 00    	je     c0027727 <__addsf3+0x2f9>
c00275c2:	49                   	dec    ecx
c00275c3:	75 19                	jne    c00275de <__addsf3+0x1b0>
c00275c5:	89 d0                	mov    eax,edx
c00275c7:	29 d8                	sub    eax,ebx
c00275c9:	eb 38                	jmp    c0027603 <__addsf3+0x1d5>
c00275cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275ce:	f7 d0                	not    eax
c00275d0:	84 c0                	test   al,al
c00275d2:	0f 84 4f 01 00 00    	je     c0027727 <__addsf3+0x2f9>
c00275d8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275de:	83 f9 1f             	cmp    ecx,0x1f
c00275e1:	0f 8f 40 01 00 00    	jg     c0027727 <__addsf3+0x2f9>
c00275e7:	89 de                	mov    esi,ebx
c00275e9:	d3 ee                	shr    esi,cl
c00275eb:	b8 20 00 00 00       	mov    eax,0x20
c00275f0:	29 c8                	sub    eax,ecx
c00275f2:	89 c1                	mov    ecx,eax
c00275f4:	d3 e3                	shl    ebx,cl
c00275f6:	31 c0                	xor    eax,eax
c00275f8:	85 db                	test   ebx,ebx
c00275fa:	0f 95 c0             	setne  al
c00275fd:	09 f0                	or     eax,esi
c00275ff:	29 c2                	sub    edx,eax
c0027601:	89 d0                	mov    eax,edx
c0027603:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027606:	e9 af 00 00 00       	jmp    c00276ba <__addsf3+0x28c>
c002760b:	74 5c                	je     c0027669 <__addsf3+0x23b>
c002760d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027610:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027613:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027617:	75 14                	jne    c002762d <__addsf3+0x1ff>
c0027619:	85 d2                	test   edx,edx
c002761b:	0f 84 06 01 00 00    	je     c0027727 <__addsf3+0x2f9>
c0027621:	48                   	dec    eax
c0027622:	75 1b                	jne    c002763f <__addsf3+0x211>
c0027624:	89 d8                	mov    eax,ebx
c0027626:	29 d0                	sub    eax,edx
c0027628:	e9 8d 00 00 00       	jmp    c00276ba <__addsf3+0x28c>
c002762d:	89 f1                	mov    ecx,esi
c002762f:	f7 d1                	not    ecx
c0027631:	84 c9                	test   cl,cl
c0027633:	0f 84 ee 00 00 00    	je     c0027727 <__addsf3+0x2f9>
c0027639:	81 ca 00 00 00 80    	or     edx,0x80000000
c002763f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027642:	83 f8 1f             	cmp    eax,0x1f
c0027645:	0f 8f dc 00 00 00    	jg     c0027727 <__addsf3+0x2f9>
c002764b:	89 d7                	mov    edi,edx
c002764d:	88 c1                	mov    cl,al
c002764f:	d3 ef                	shr    edi,cl
c0027651:	b9 20 00 00 00       	mov    ecx,0x20
c0027656:	29 c1                	sub    ecx,eax
c0027658:	d3 e2                	shl    edx,cl
c002765a:	31 c0                	xor    eax,eax
c002765c:	85 d2                	test   edx,edx
c002765e:	0f 95 c0             	setne  al
c0027661:	09 f8                	or     eax,edi
c0027663:	29 c3                	sub    ebx,eax
c0027665:	89 d8                	mov    eax,ebx
c0027667:	eb 51                	jmp    c00276ba <__addsf3+0x28c>
c0027669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002766c:	40                   	inc    eax
c002766d:	a8 fe                	test   al,0xfe
c002766f:	75 3d                	jne    c00276ae <__addsf3+0x280>
c0027671:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027675:	0f 85 a7 00 00 00    	jne    c0027722 <__addsf3+0x2f4>
c002767b:	85 d2                	test   edx,edx
c002767d:	75 12                	jne    c0027691 <__addsf3+0x263>
c002767f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027682:	85 db                	test   ebx,ebx
c0027684:	0f 85 9d 00 00 00    	jne    c0027727 <__addsf3+0x2f9>
c002768a:	31 ff                	xor    edi,edi
c002768c:	e9 96 00 00 00       	jmp    c0027727 <__addsf3+0x2f9>
c0027691:	85 db                	test   ebx,ebx
c0027693:	0f 84 8e 00 00 00    	je     c0027727 <__addsf3+0x2f9>
c0027699:	89 d0                	mov    eax,edx
c002769b:	29 d8                	sub    eax,ebx
c002769d:	79 06                	jns    c00276a5 <__addsf3+0x277>
c002769f:	89 d8                	mov    eax,ebx
c00276a1:	29 d0                	sub    eax,edx
c00276a3:	eb 5a                	jmp    c00276ff <__addsf3+0x2d1>
c00276a5:	bf 00 00 00 00       	mov    edi,0x0
c00276aa:	74 7b                	je     c0027727 <__addsf3+0x2f9>
c00276ac:	eb 4a                	jmp    c00276f8 <__addsf3+0x2ca>
c00276ae:	89 d0                	mov    eax,edx
c00276b0:	29 d8                	sub    eax,ebx
c00276b2:	79 12                	jns    c00276c6 <__addsf3+0x298>
c00276b4:	89 d8                	mov    eax,ebx
c00276b6:	29 d0                	sub    eax,edx
c00276b8:	eb 09                	jmp    c00276c3 <__addsf3+0x295>
c00276ba:	85 c0                	test   eax,eax
c00276bc:	79 41                	jns    c00276ff <__addsf3+0x2d1>
c00276be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276c3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276c6:	31 f6                	xor    esi,esi
c00276c8:	85 c0                	test   eax,eax
c00276ca:	74 33                	je     c00276ff <__addsf3+0x2d1>
c00276cc:	0f bd c8             	bsr    ecx,eax
c00276cf:	83 f1 1f             	xor    ecx,0x1f
c00276d2:	d3 e0                	shl    eax,cl
c00276d4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276d8:	39 ca                	cmp    edx,ecx
c00276da:	7f 10                	jg     c00276ec <__addsf3+0x2be>
c00276dc:	29 d1                	sub    ecx,edx
c00276de:	41                   	inc    ecx
c00276df:	d3 e8                	shr    eax,cl
c00276e1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276e4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276ea:	eb 13                	jmp    c00276ff <__addsf3+0x2d1>
c00276ec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276ef:	29 ce                	sub    esi,ecx
c00276f1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276f6:	eb 07                	jmp    c00276ff <__addsf3+0x2d1>
c00276f8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276fb:	eb 02                	jmp    c00276ff <__addsf3+0x2d1>
c00276fd:	31 c0                	xor    eax,eax
c00276ff:	89 c2                	mov    edx,eax
c0027701:	c1 ea 08             	shr    edx,0x8
c0027704:	a8 7f                	test   al,0x7f
c0027706:	0f 95 c1             	setne  cl
c0027709:	09 d1                	or     ecx,edx
c002770b:	83 e1 01             	and    ecx,0x1
c002770e:	c1 e8 07             	shr    eax,0x7
c0027711:	21 c8                	and    eax,ecx
c0027713:	c1 e6 17             	shl    esi,0x17
c0027716:	09 d6                	or     esi,edx
c0027718:	8d 3c 30             	lea    edi,[eax+esi*1]
c002771b:	eb 0a                	jmp    c0027727 <__addsf3+0x2f9>
c002771d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027720:	eb 05                	jmp    c0027727 <__addsf3+0x2f9>
c0027722:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027727:	89 f8                	mov    eax,edi
c0027729:	5a                   	pop    edx
c002772a:	59                   	pop    ecx
c002772b:	5b                   	pop    ebx
c002772c:	5e                   	pop    esi
c002772d:	5f                   	pop    edi
c002772e:	5d                   	pop    ebp
c002772f:	c3                   	ret    

c0027730 <__subsf3>:
c0027730:	55                   	push   ebp
c0027731:	89 e5                	mov    ebp,esp
c0027733:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027736:	05 00 00 00 80       	add    eax,0x80000000
c002773b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002773e:	5d                   	pop    ebp
c002773f:	e9 ea fc ff ff       	jmp    c002742e <__addsf3>

c0027744 <__negsf2>:
c0027744:	55                   	push   ebp
c0027745:	89 e5                	mov    ebp,esp
c0027747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002774a:	05 00 00 00 80       	add    eax,0x80000000
c002774f:	5d                   	pop    ebp
c0027750:	c3                   	ret    

c0027751 <__mulsf3>:
c0027751:	55                   	push   ebp
c0027752:	89 e5                	mov    ebp,esp
c0027754:	57                   	push   edi
c0027755:	56                   	push   esi
c0027756:	53                   	push   ebx
c0027757:	83 ec 1c             	sub    esp,0x1c
c002775a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002775d:	89 f0                	mov    eax,esi
c002775f:	89 f1                	mov    ecx,esi
c0027761:	c1 f9 17             	sar    ecx,0x17
c0027764:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027767:	c1 e0 08             	shl    eax,0x8
c002776a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002776f:	89 c1                	mov    ecx,eax
c0027771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027774:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027777:	89 c7                	mov    edi,eax
c0027779:	c1 ff 17             	sar    edi,0x17
c002777c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027780:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027783:	89 f8                	mov    eax,edi
c0027785:	0f b6 c0             	movzx  eax,al
c0027788:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002778b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002778f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027792:	42                   	inc    edx
c0027793:	80 e2 fe             	and    dl,0xfe
c0027796:	75 7b                	jne    c0027813 <__mulsf3+0xc2>
c0027798:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002779c:	74 54                	je     c00277f2 <__mulsf3+0xa1>
c002779e:	85 c9                	test   ecx,ecx
c00277a0:	0f 85 64 01 00 00    	jne    c002790a <__mulsf3+0x1b9>
c00277a6:	8d 57 01             	lea    edx,[edi+0x1]
c00277a9:	80 e2 fe             	and    dl,0xfe
c00277ac:	75 1f                	jne    c00277cd <__mulsf3+0x7c>
c00277ae:	85 c0                	test   eax,eax
c00277b0:	b8 00 00 00 00       	mov    eax,0x0
c00277b5:	74 29                	je     c00277e0 <__mulsf3+0x8f>
c00277b7:	53                   	push   ebx
c00277b8:	53                   	push   ebx
c00277b9:	50                   	push   eax
c00277ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277bd:	e8 96 05 00 00       	call   c0027d58 <__nesf2>
c00277c2:	83 c4 10             	add    esp,0x10
c00277c5:	85 c0                	test   eax,eax
c00277c7:	0f 85 3a 01 00 00    	jne    c0027907 <__mulsf3+0x1b6>
c00277cd:	85 ff                	test   edi,edi
c00277cf:	0f 89 35 01 00 00    	jns    c002790a <__mulsf3+0x1b9>
c00277d5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277db:	e9 2a 01 00 00       	jmp    c002790a <__mulsf3+0x1b9>
c00277e0:	51                   	push   ecx
c00277e1:	51                   	push   ecx
c00277e2:	50                   	push   eax
c00277e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277e6:	e8 6d 05 00 00       	call   c0027d58 <__nesf2>
c00277eb:	83 c4 10             	add    esp,0x10
c00277ee:	85 c0                	test   eax,eax
c00277f0:	eb 15                	jmp    c0027807 <__mulsf3+0xb6>
c00277f2:	85 c9                	test   ecx,ecx
c00277f4:	74 0b                	je     c0027801 <__mulsf3+0xb0>
c00277f6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277f9:	01 c9                	add    ecx,ecx
c00277fb:	78 16                	js     c0027813 <__mulsf3+0xc2>
c00277fd:	89 d3                	mov    ebx,edx
c00277ff:	eb f5                	jmp    c00277f6 <__mulsf3+0xa5>
c0027801:	89 f8                	mov    eax,edi
c0027803:	f7 d0                	not    eax
c0027805:	84 c0                	test   al,al
c0027807:	75 c4                	jne    c00277cd <__mulsf3+0x7c>
c0027809:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002780e:	e9 f7 00 00 00       	jmp    c002790a <__mulsf3+0x1b9>
c0027813:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027816:	c1 e6 08             	shl    esi,0x8
c0027819:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002781f:	8d 57 01             	lea    edx,[edi+0x1]
c0027822:	80 e2 fe             	and    dl,0xfe
c0027825:	75 63                	jne    c002788a <__mulsf3+0x139>
c0027827:	85 c0                	test   eax,eax
c0027829:	74 2f                	je     c002785a <__mulsf3+0x109>
c002782b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002782f:	0f 89 d2 00 00 00    	jns    c0027907 <__mulsf3+0x1b6>
c0027835:	52                   	push   edx
c0027836:	52                   	push   edx
c0027837:	6a 00                	push   0x0
c0027839:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002783c:	e8 dc 04 00 00       	call   c0027d1d <__eqsf2>
c0027841:	83 c4 10             	add    esp,0x10
c0027844:	85 c0                	test   eax,eax
c0027846:	0f 85 bb 00 00 00    	jne    c0027907 <__mulsf3+0x1b6>
c002784c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002784f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027855:	e9 b0 00 00 00       	jmp    c002790a <__mulsf3+0x1b9>
c002785a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002785d:	50                   	push   eax
c002785e:	50                   	push   eax
c002785f:	6a 00                	push   0x0
c0027861:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027864:	e8 b4 04 00 00       	call   c0027d1d <__eqsf2>
c0027869:	83 c4 10             	add    esp,0x10
c002786c:	85 c0                	test   eax,eax
c002786e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027871:	75 0c                	jne    c002787f <__mulsf3+0x12e>
c0027873:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027877:	0f 89 8a 00 00 00    	jns    c0027907 <__mulsf3+0x1b6>
c002787d:	eb cd                	jmp    c002784c <__mulsf3+0xfb>
c002787f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027882:	01 f6                	add    esi,esi
c0027884:	78 04                	js     c002788a <__mulsf3+0x139>
c0027886:	89 c3                	mov    ebx,eax
c0027888:	eb f5                	jmp    c002787f <__mulsf3+0x12e>
c002788a:	89 c8                	mov    eax,ecx
c002788c:	0d 00 00 00 80       	or     eax,0x80000000
c0027891:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027897:	f7 e6                	mul    esi
c0027899:	85 c0                	test   eax,eax
c002789b:	0f 95 c0             	setne  al
c002789e:	0f b6 c0             	movzx  eax,al
c00278a1:	09 c2                	or     edx,eax
c00278a3:	78 03                	js     c00278a8 <__mulsf3+0x157>
c00278a5:	01 d2                	add    edx,edx
c00278a7:	4b                   	dec    ebx
c00278a8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00278ae:	7f 22                	jg     c00278d2 <__mulsf3+0x181>
c00278b0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278b6:	85 db                	test   ebx,ebx
c00278b8:	7f 23                	jg     c00278dd <__mulsf3+0x18c>
c00278ba:	83 fb e9             	cmp    ebx,0xffffffe9
c00278bd:	7c 1a                	jl     c00278d9 <__mulsf3+0x188>
c00278bf:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278c5:	b9 01 00 00 00       	mov    ecx,0x1
c00278ca:	29 d9                	sub    ecx,ebx
c00278cc:	d3 ea                	shr    edx,cl
c00278ce:	31 db                	xor    ebx,ebx
c00278d0:	eb 0b                	jmp    c00278dd <__mulsf3+0x18c>
c00278d2:	bb ff 00 00 00       	mov    ebx,0xff
c00278d7:	eb 02                	jmp    c00278db <__mulsf3+0x18a>
c00278d9:	31 db                	xor    ebx,ebx
c00278db:	31 d2                	xor    edx,edx
c00278dd:	89 d0                	mov    eax,edx
c00278df:	c1 e8 08             	shr    eax,0x8
c00278e2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278e5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278eb:	09 fb                	or     ebx,edi
c00278ed:	c1 e3 17             	shl    ebx,0x17
c00278f0:	09 c3                	or     ebx,eax
c00278f2:	f6 c2 7f             	test   dl,0x7f
c00278f5:	0f 95 c1             	setne  cl
c00278f8:	09 c8                	or     eax,ecx
c00278fa:	83 e0 01             	and    eax,0x1
c00278fd:	c1 ea 07             	shr    edx,0x7
c0027900:	21 c2                	and    edx,eax
c0027902:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027905:	eb 03                	jmp    c002790a <__mulsf3+0x1b9>
c0027907:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002790a:	89 f0                	mov    eax,esi
c002790c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002790f:	5b                   	pop    ebx
c0027910:	5e                   	pop    esi
c0027911:	5f                   	pop    edi
c0027912:	5d                   	pop    ebp
c0027913:	c3                   	ret    

c0027914 <__divsf3>:
c0027914:	55                   	push   ebp
c0027915:	89 e5                	mov    ebp,esp
c0027917:	57                   	push   edi
c0027918:	56                   	push   esi
c0027919:	53                   	push   ebx
c002791a:	83 ec 1c             	sub    esp,0x1c
c002791d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027920:	89 d8                	mov    eax,ebx
c0027922:	89 d9                	mov    ecx,ebx
c0027924:	c1 f9 17             	sar    ecx,0x17
c0027927:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002792a:	c1 e0 08             	shl    eax,0x8
c002792d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027932:	89 c1                	mov    ecx,eax
c0027934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027937:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002793a:	89 c7                	mov    edi,eax
c002793c:	c1 ff 17             	sar    edi,0x17
c002793f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027943:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027946:	89 f8                	mov    eax,edi
c0027948:	0f b6 c0             	movzx  eax,al
c002794b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002794e:	29 c6                	sub    esi,eax
c0027950:	83 c6 7f             	add    esi,0x7f
c0027953:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027956:	42                   	inc    edx
c0027957:	80 e2 fe             	and    dl,0xfe
c002795a:	0f 85 9c 00 00 00    	jne    c00279fc <__divsf3+0xe8>
c0027960:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027964:	74 33                	je     c0027999 <__divsf3+0x85>
c0027966:	85 c9                	test   ecx,ecx
c0027968:	0f 85 c7 01 00 00    	jne    c0027b35 <__divsf3+0x221>
c002796e:	8d 57 01             	lea    edx,[edi+0x1]
c0027971:	80 e2 fe             	and    dl,0xfe
c0027974:	75 2f                	jne    c00279a5 <__divsf3+0x91>
c0027976:	85 c0                	test   eax,eax
c0027978:	74 2b                	je     c00279a5 <__divsf3+0x91>
c002797a:	51                   	push   ecx
c002797b:	51                   	push   ecx
c002797c:	6a 00                	push   0x0
c002797e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027981:	e8 d2 03 00 00       	call   c0027d58 <__nesf2>
c0027986:	83 c4 10             	add    esp,0x10
c0027989:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002798c:	85 c0                	test   eax,eax
c002798e:	0f 85 a1 01 00 00    	jne    c0027b35 <__divsf3+0x221>
c0027994:	e9 92 01 00 00       	jmp    c0027b2b <__divsf3+0x217>
c0027999:	85 c9                	test   ecx,ecx
c002799b:	75 1b                	jne    c00279b8 <__divsf3+0xa4>
c002799d:	8d 57 01             	lea    edx,[edi+0x1]
c00279a0:	80 e2 fe             	and    dl,0xfe
c00279a3:	74 1e                	je     c00279c3 <__divsf3+0xaf>
c00279a5:	85 ff                	test   edi,edi
c00279a7:	0f 89 88 01 00 00    	jns    c0027b35 <__divsf3+0x221>
c00279ad:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00279b3:	e9 7d 01 00 00       	jmp    c0027b35 <__divsf3+0x221>
c00279b8:	8d 56 ff             	lea    edx,[esi-0x1]
c00279bb:	01 c9                	add    ecx,ecx
c00279bd:	78 3d                	js     c00279fc <__divsf3+0xe8>
c00279bf:	89 d6                	mov    esi,edx
c00279c1:	eb f5                	jmp    c00279b8 <__divsf3+0xa4>
c00279c3:	85 c0                	test   eax,eax
c00279c5:	b8 00 00 00 00       	mov    eax,0x0
c00279ca:	74 18                	je     c00279e4 <__divsf3+0xd0>
c00279cc:	52                   	push   edx
c00279cd:	52                   	push   edx
c00279ce:	50                   	push   eax
c00279cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279d2:	e8 81 03 00 00       	call   c0027d58 <__nesf2>
c00279d7:	83 c4 10             	add    esp,0x10
c00279da:	85 c0                	test   eax,eax
c00279dc:	0f 85 50 01 00 00    	jne    c0027b32 <__divsf3+0x21e>
c00279e2:	eb c1                	jmp    c00279a5 <__divsf3+0x91>
c00279e4:	56                   	push   esi
c00279e5:	56                   	push   esi
c00279e6:	50                   	push   eax
c00279e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ea:	e8 69 03 00 00       	call   c0027d58 <__nesf2>
c00279ef:	83 c4 10             	add    esp,0x10
c00279f2:	85 c0                	test   eax,eax
c00279f4:	0f 84 31 01 00 00    	je     c0027b2b <__divsf3+0x217>
c00279fa:	eb a9                	jmp    c00279a5 <__divsf3+0x91>
c00279fc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279ff:	c1 e3 08             	shl    ebx,0x8
c0027a02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a08:	8d 57 01             	lea    edx,[edi+0x1]
c0027a0b:	80 e2 fe             	and    dl,0xfe
c0027a0e:	75 71                	jne    c0027a81 <__divsf3+0x16d>
c0027a10:	85 c0                	test   eax,eax
c0027a12:	ba 00 00 00 00       	mov    edx,0x0
c0027a17:	74 2f                	je     c0027a48 <__divsf3+0x134>
c0027a19:	51                   	push   ecx
c0027a1a:	51                   	push   ecx
c0027a1b:	52                   	push   edx
c0027a1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a1f:	e8 f9 02 00 00       	call   c0027d1d <__eqsf2>
c0027a24:	83 c4 10             	add    esp,0x10
c0027a27:	85 c0                	test   eax,eax
c0027a29:	0f 85 03 01 00 00    	jne    c0027b32 <__divsf3+0x21e>
c0027a2f:	31 d2                	xor    edx,edx
c0027a31:	89 d3                	mov    ebx,edx
c0027a33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a36:	31 f8                	xor    eax,edi
c0027a38:	0f 89 f7 00 00 00    	jns    c0027b35 <__divsf3+0x221>
c0027a3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a43:	e9 ed 00 00 00       	jmp    c0027b35 <__divsf3+0x221>
c0027a48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a4b:	50                   	push   eax
c0027a4c:	50                   	push   eax
c0027a4d:	52                   	push   edx
c0027a4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a51:	e8 c7 02 00 00       	call   c0027d1d <__eqsf2>
c0027a56:	83 c4 10             	add    esp,0x10
c0027a59:	85 c0                	test   eax,eax
c0027a5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a5e:	75 16                	jne    c0027a76 <__divsf3+0x162>
c0027a60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a63:	31 fb                	xor    ebx,edi
c0027a65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a71:	e9 bf 00 00 00       	jmp    c0027b35 <__divsf3+0x221>
c0027a76:	8d 46 01             	lea    eax,[esi+0x1]
c0027a79:	01 db                	add    ebx,ebx
c0027a7b:	78 04                	js     c0027a81 <__divsf3+0x16d>
c0027a7d:	89 c6                	mov    esi,eax
c0027a7f:	eb f5                	jmp    c0027a76 <__divsf3+0x162>
c0027a81:	89 c8                	mov    eax,ecx
c0027a83:	0d 00 00 00 80       	or     eax,0x80000000
c0027a88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a8e:	31 d2                	xor    edx,edx
c0027a90:	39 d8                	cmp    eax,ebx
c0027a92:	72 07                	jb     c0027a9b <__divsf3+0x187>
c0027a94:	29 d8                	sub    eax,ebx
c0027a96:	ba 01 00 00 00       	mov    edx,0x1
c0027a9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027aa2:	01 d2                	add    edx,edx
c0027aa4:	89 c1                	mov    ecx,eax
c0027aa6:	01 c0                	add    eax,eax
c0027aa8:	85 c9                	test   ecx,ecx
c0027aaa:	78 04                	js     c0027ab0 <__divsf3+0x19c>
c0027aac:	39 c3                	cmp    ebx,eax
c0027aae:	77 05                	ja     c0027ab5 <__divsf3+0x1a1>
c0027ab0:	29 d8                	sub    eax,ebx
c0027ab2:	83 ca 01             	or     edx,0x1
c0027ab5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027ab8:	75 e8                	jne    c0027aa2 <__divsf3+0x18e>
c0027aba:	85 c0                	test   eax,eax
c0027abc:	0f 95 c0             	setne  al
c0027abf:	0f b6 c0             	movzx  eax,al
c0027ac2:	c1 e2 06             	shl    edx,0x6
c0027ac5:	09 c2                	or     edx,eax
c0027ac7:	78 03                	js     c0027acc <__divsf3+0x1b8>
c0027ac9:	01 d2                	add    edx,edx
c0027acb:	4e                   	dec    esi
c0027acc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ad2:	7f 22                	jg     c0027af6 <__divsf3+0x1e2>
c0027ad4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ada:	85 f6                	test   esi,esi
c0027adc:	7f 23                	jg     c0027b01 <__divsf3+0x1ed>
c0027ade:	83 fe e9             	cmp    esi,0xffffffe9
c0027ae1:	7c 1a                	jl     c0027afd <__divsf3+0x1e9>
c0027ae3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ae9:	b9 01 00 00 00       	mov    ecx,0x1
c0027aee:	29 f1                	sub    ecx,esi
c0027af0:	d3 ea                	shr    edx,cl
c0027af2:	31 f6                	xor    esi,esi
c0027af4:	eb 0b                	jmp    c0027b01 <__divsf3+0x1ed>
c0027af6:	be ff 00 00 00       	mov    esi,0xff
c0027afb:	eb 02                	jmp    c0027aff <__divsf3+0x1eb>
c0027afd:	31 f6                	xor    esi,esi
c0027aff:	31 d2                	xor    edx,edx
c0027b01:	89 d0                	mov    eax,edx
c0027b03:	c1 e8 08             	shr    eax,0x8
c0027b06:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b09:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b0f:	09 fe                	or     esi,edi
c0027b11:	c1 e6 17             	shl    esi,0x17
c0027b14:	09 c6                	or     esi,eax
c0027b16:	f6 c2 7f             	test   dl,0x7f
c0027b19:	0f 95 c1             	setne  cl
c0027b1c:	09 c8                	or     eax,ecx
c0027b1e:	83 e0 01             	and    eax,0x1
c0027b21:	c1 ea 07             	shr    edx,0x7
c0027b24:	21 c2                	and    edx,eax
c0027b26:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b29:	eb 0a                	jmp    c0027b35 <__divsf3+0x221>
c0027b2b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b30:	eb 03                	jmp    c0027b35 <__divsf3+0x221>
c0027b32:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b35:	89 d8                	mov    eax,ebx
c0027b37:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b3a:	5b                   	pop    ebx
c0027b3b:	5e                   	pop    esi
c0027b3c:	5f                   	pop    edi
c0027b3d:	5d                   	pop    ebp
c0027b3e:	c3                   	ret    

c0027b3f <__floatsisf>:
c0027b3f:	55                   	push   ebp
c0027b40:	89 e5                	mov    ebp,esp
c0027b42:	53                   	push   ebx
c0027b43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b46:	85 d2                	test   edx,edx
c0027b48:	7e 2b                	jle    c0027b75 <__floatsisf+0x36>
c0027b4a:	0f bd ca             	bsr    ecx,edx
c0027b4d:	83 f1 1f             	xor    ecx,0x1f
c0027b50:	d3 e2                	shl    edx,cl
c0027b52:	89 d0                	mov    eax,edx
c0027b54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b59:	89 c3                	mov    ebx,eax
c0027b5b:	c1 eb 08             	shr    ebx,0x8
c0027b5e:	80 e2 7f             	and    dl,0x7f
c0027b61:	0f 95 c2             	setne  dl
c0027b64:	09 da                	or     edx,ebx
c0027b66:	83 e2 01             	and    edx,0x1
c0027b69:	c1 e8 07             	shr    eax,0x7
c0027b6c:	21 c2                	and    edx,eax
c0027b6e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b73:	eb 32                	jmp    c0027ba7 <__floatsisf+0x68>
c0027b75:	b8 00 00 00 00       	mov    eax,0x0
c0027b7a:	74 34                	je     c0027bb0 <__floatsisf+0x71>
c0027b7c:	f7 da                	neg    edx
c0027b7e:	0f bd ca             	bsr    ecx,edx
c0027b81:	83 f1 1f             	xor    ecx,0x1f
c0027b84:	d3 e2                	shl    edx,cl
c0027b86:	89 d0                	mov    eax,edx
c0027b88:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b8d:	89 c3                	mov    ebx,eax
c0027b8f:	c1 eb 08             	shr    ebx,0x8
c0027b92:	80 e2 7f             	and    dl,0x7f
c0027b95:	0f 95 c2             	setne  dl
c0027b98:	09 da                	or     edx,ebx
c0027b9a:	83 e2 01             	and    edx,0x1
c0027b9d:	c1 e8 07             	shr    eax,0x7
c0027ba0:	21 c2                	and    edx,eax
c0027ba2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027ba7:	29 c8                	sub    eax,ecx
c0027ba9:	c1 e0 17             	shl    eax,0x17
c0027bac:	09 d8                	or     eax,ebx
c0027bae:	01 d0                	add    eax,edx
c0027bb0:	5b                   	pop    ebx
c0027bb1:	5d                   	pop    ebp
c0027bb2:	c3                   	ret    

c0027bb3 <__floatunsisf>:
c0027bb3:	55                   	push   ebp
c0027bb4:	89 e5                	mov    ebp,esp
c0027bb6:	53                   	push   ebx
c0027bb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bba:	31 c0                	xor    eax,eax
c0027bbc:	85 d2                	test   edx,edx
c0027bbe:	74 32                	je     c0027bf2 <__floatunsisf+0x3f>
c0027bc0:	0f bd ca             	bsr    ecx,edx
c0027bc3:	83 f1 1f             	xor    ecx,0x1f
c0027bc6:	d3 e2                	shl    edx,cl
c0027bc8:	89 d0                	mov    eax,edx
c0027bca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bcf:	89 c3                	mov    ebx,eax
c0027bd1:	c1 eb 08             	shr    ebx,0x8
c0027bd4:	80 e2 7f             	and    dl,0x7f
c0027bd7:	0f 95 c2             	setne  dl
c0027bda:	09 da                	or     edx,ebx
c0027bdc:	83 e2 01             	and    edx,0x1
c0027bdf:	c1 e8 07             	shr    eax,0x7
c0027be2:	21 c2                	and    edx,eax
c0027be4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027be9:	29 c8                	sub    eax,ecx
c0027beb:	c1 e0 17             	shl    eax,0x17
c0027bee:	09 d8                	or     eax,ebx
c0027bf0:	01 d0                	add    eax,edx
c0027bf2:	5b                   	pop    ebx
c0027bf3:	5d                   	pop    ebp
c0027bf4:	c3                   	ret    

c0027bf5 <__fixsfsi>:
c0027bf5:	55                   	push   ebp
c0027bf6:	89 e5                	mov    ebp,esp
c0027bf8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bfb:	89 d1                	mov    ecx,edx
c0027bfd:	c1 e1 08             	shl    ecx,0x8
c0027c00:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027c06:	c1 fa 17             	sar    edx,0x17
c0027c09:	78 1c                	js     c0027c27 <__fixsfsi+0x32>
c0027c0b:	83 ea 7f             	sub    edx,0x7f
c0027c0e:	31 c0                	xor    eax,eax
c0027c10:	83 fa 1e             	cmp    edx,0x1e
c0027c13:	77 40                	ja     c0027c55 <__fixsfsi+0x60>
c0027c15:	89 c8                	mov    eax,ecx
c0027c17:	0d 00 00 00 80       	or     eax,0x80000000
c0027c1c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c21:	29 d1                	sub    ecx,edx
c0027c23:	d3 e8                	shr    eax,cl
c0027c25:	eb 2e                	jmp    c0027c55 <__fixsfsi+0x60>
c0027c27:	31 c0                	xor    eax,eax
c0027c29:	81 c2 81 00 00 00    	add    edx,0x81
c0027c2f:	78 24                	js     c0027c55 <__fixsfsi+0x60>
c0027c31:	83 fa 1e             	cmp    edx,0x1e
c0027c34:	7e 09                	jle    c0027c3f <__fixsfsi+0x4a>
c0027c36:	83 fa 1f             	cmp    edx,0x1f
c0027c39:	75 18                	jne    c0027c53 <__fixsfsi+0x5e>
c0027c3b:	85 c9                	test   ecx,ecx
c0027c3d:	75 14                	jne    c0027c53 <__fixsfsi+0x5e>
c0027c3f:	89 c8                	mov    eax,ecx
c0027c41:	0d 00 00 00 80       	or     eax,0x80000000
c0027c46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c4b:	29 d1                	sub    ecx,edx
c0027c4d:	d3 e8                	shr    eax,cl
c0027c4f:	f7 d8                	neg    eax
c0027c51:	eb 02                	jmp    c0027c55 <__fixsfsi+0x60>
c0027c53:	31 c0                	xor    eax,eax
c0027c55:	5d                   	pop    ebp
c0027c56:	c3                   	ret    

c0027c57 <__fixunssfsi>:
c0027c57:	55                   	push   ebp
c0027c58:	89 e5                	mov    ebp,esp
c0027c5a:	53                   	push   ebx
c0027c5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c5e:	89 d3                	mov    ebx,edx
c0027c60:	c1 fb 17             	sar    ebx,0x17
c0027c63:	83 eb 7f             	sub    ebx,0x7f
c0027c66:	31 c0                	xor    eax,eax
c0027c68:	83 fb 1f             	cmp    ebx,0x1f
c0027c6b:	77 18                	ja     c0027c85 <__fixunssfsi+0x2e>
c0027c6d:	89 d0                	mov    eax,edx
c0027c6f:	c1 e0 08             	shl    eax,0x8
c0027c72:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c77:	0d 00 00 00 80       	or     eax,0x80000000
c0027c7c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c81:	29 d9                	sub    ecx,ebx
c0027c83:	d3 e8                	shr    eax,cl
c0027c85:	5b                   	pop    ebx
c0027c86:	5d                   	pop    ebp
c0027c87:	c3                   	ret    

c0027c88 <__cmpsf2>:
c0027c88:	55                   	push   ebp
c0027c89:	89 e5                	mov    ebp,esp
c0027c8b:	57                   	push   edi
c0027c8c:	56                   	push   esi
c0027c8d:	53                   	push   ebx
c0027c8e:	83 ec 24             	sub    esp,0x24
c0027c91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c97:	e8 4f 10 00 00       	call   c0028ceb <__truncdfsf2>
c0027c9c:	5a                   	pop    edx
c0027c9d:	59                   	pop    ecx
c0027c9e:	89 c3                	mov    ebx,eax
c0027ca0:	c1 e8 17             	shr    eax,0x17
c0027ca3:	0f b6 f0             	movzx  esi,al
c0027ca6:	89 d8                	mov    eax,ebx
c0027ca8:	c1 e8 1f             	shr    eax,0x1f
c0027cab:	31 c6                	xor    esi,eax
c0027cad:	c1 e3 08             	shl    ebx,0x8
c0027cb0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027cb3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027cb6:	e8 30 10 00 00       	call   c0028ceb <__truncdfsf2>
c0027cbb:	83 c4 10             	add    esp,0x10
c0027cbe:	89 c1                	mov    ecx,eax
c0027cc0:	c1 e9 17             	shr    ecx,0x17
c0027cc3:	0f b6 c9             	movzx  ecx,cl
c0027cc6:	89 c7                	mov    edi,eax
c0027cc8:	c1 ef 1f             	shr    edi,0x1f
c0027ccb:	89 ca                	mov    edx,ecx
c0027ccd:	31 fa                	xor    edx,edi
c0027ccf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cd2:	c1 e0 08             	shl    eax,0x8
c0027cd5:	89 c2                	mov    edx,eax
c0027cd7:	89 d8                	mov    eax,ebx
c0027cd9:	09 d0                	or     eax,edx
c0027cdb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ce0:	09 f0                	or     eax,esi
c0027ce2:	75 08                	jne    c0027cec <__cmpsf2+0x64>
c0027ce4:	31 c0                	xor    eax,eax
c0027ce6:	39 f9                	cmp    ecx,edi
c0027ce8:	75 0c                	jne    c0027cf6 <__cmpsf2+0x6e>
c0027cea:	eb 29                	jmp    c0027d15 <__cmpsf2+0x8d>
c0027cec:	b8 01 00 00 00       	mov    eax,0x1
c0027cf1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cf4:	7f 1f                	jg     c0027d15 <__cmpsf2+0x8d>
c0027cf6:	83 c8 ff             	or     eax,0xffffffff
c0027cf9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cfc:	7c 17                	jl     c0027d15 <__cmpsf2+0x8d>
c0027cfe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027d04:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d0a:	b8 01 00 00 00       	mov    eax,0x1
c0027d0f:	39 d3                	cmp    ebx,edx
c0027d11:	77 02                	ja     c0027d15 <__cmpsf2+0x8d>
c0027d13:	19 c0                	sbb    eax,eax
c0027d15:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d18:	5b                   	pop    ebx
c0027d19:	5e                   	pop    esi
c0027d1a:	5f                   	pop    edi
c0027d1b:	5d                   	pop    ebp
c0027d1c:	c3                   	ret    

c0027d1d <__eqsf2>:
c0027d1d:	55                   	push   ebp
c0027d1e:	89 e5                	mov    ebp,esp
c0027d20:	83 ec 24             	sub    esp,0x24
c0027d23:	6a 01                	push   0x1
c0027d25:	83 ec 0c             	sub    esp,0xc
c0027d28:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d2b:	e8 df 10 00 00       	call   c0028e0f <__extendsfdf2>
c0027d30:	83 c4 10             	add    esp,0x10
c0027d33:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d36:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d39:	52                   	push   edx
c0027d3a:	50                   	push   eax
c0027d3b:	50                   	push   eax
c0027d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d3f:	e8 cb 10 00 00       	call   c0028e0f <__extendsfdf2>
c0027d44:	59                   	pop    ecx
c0027d45:	59                   	pop    ecx
c0027d46:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d49:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d4c:	52                   	push   edx
c0027d4d:	50                   	push   eax
c0027d4e:	e8 35 ff ff ff       	call   c0027c88 <__cmpsf2>
c0027d53:	83 c4 20             	add    esp,0x20
c0027d56:	c9                   	leave  
c0027d57:	c3                   	ret    

c0027d58 <__nesf2>:
c0027d58:	eb c3                	jmp    c0027d1d <__eqsf2>

c0027d5a <__gtsf2>:
c0027d5a:	55                   	push   ebp
c0027d5b:	89 e5                	mov    ebp,esp
c0027d5d:	83 ec 24             	sub    esp,0x24
c0027d60:	6a ff                	push   0xffffffff
c0027d62:	83 ec 0c             	sub    esp,0xc
c0027d65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d68:	e8 a2 10 00 00       	call   c0028e0f <__extendsfdf2>
c0027d6d:	83 c4 10             	add    esp,0x10
c0027d70:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d73:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d76:	52                   	push   edx
c0027d77:	50                   	push   eax
c0027d78:	50                   	push   eax
c0027d79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d7c:	e8 8e 10 00 00       	call   c0028e0f <__extendsfdf2>
c0027d81:	59                   	pop    ecx
c0027d82:	59                   	pop    ecx
c0027d83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d86:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d89:	52                   	push   edx
c0027d8a:	50                   	push   eax
c0027d8b:	e8 f8 fe ff ff       	call   c0027c88 <__cmpsf2>
c0027d90:	83 c4 20             	add    esp,0x20
c0027d93:	c9                   	leave  
c0027d94:	c3                   	ret    

c0027d95 <__gesf2>:
c0027d95:	eb c3                	jmp    c0027d5a <__gtsf2>

c0027d97 <__ltsf2>:
c0027d97:	eb 84                	jmp    c0027d1d <__eqsf2>

c0027d99 <__lesf2>:
c0027d99:	eb 82                	jmp    c0027d1d <__eqsf2>

c0027d9b <__adddf3>:
c0027d9b:	55                   	push   ebp
c0027d9c:	89 e5                	mov    ebp,esp
c0027d9e:	57                   	push   edi
c0027d9f:	56                   	push   esi
c0027da0:	53                   	push   ebx
c0027da1:	83 ec 24             	sub    esp,0x24
c0027da4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027da7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027daa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027db0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027db3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027db6:	89 c8                	mov    eax,ecx
c0027db8:	89 ce                	mov    esi,ecx
c0027dba:	c1 fe 14             	sar    esi,0x14
c0027dbd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027dc0:	89 fb                	mov    ebx,edi
c0027dc2:	89 fa                	mov    edx,edi
c0027dc4:	c1 e2 0b             	shl    edx,0xb
c0027dc7:	c1 e0 0b             	shl    eax,0xb
c0027dca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027dcf:	c1 eb 15             	shr    ebx,0x15
c0027dd2:	09 d8                	or     eax,ebx
c0027dd4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dda:	c1 fe 14             	sar    esi,0x14
c0027ddd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027de0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027de3:	89 f3                	mov    ebx,esi
c0027de5:	c1 e3 0b             	shl    ebx,0xb
c0027de8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027deb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dee:	c1 e3 0b             	shl    ebx,0xb
c0027df1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027df7:	c1 ee 15             	shr    esi,0x15
c0027dfa:	09 f3                	or     ebx,esi
c0027dfc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027dff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e02:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027e05:	0f 88 5f 02 00 00    	js     c002806a <__adddf3+0x2cf>
c0027e0b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e0e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e11:	85 db                	test   ebx,ebx
c0027e13:	0f 8e c7 00 00 00    	jle    c0027ee0 <__adddf3+0x145>
c0027e19:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e20:	75 1a                	jne    c0027e3c <__adddf3+0xa1>
c0027e22:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e25:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e28:	0f 84 b2 05 00 00    	je     c00283e0 <__adddf3+0x645>
c0027e2e:	4b                   	dec    ebx
c0027e2f:	75 23                	jne    c0027e54 <__adddf3+0xb9>
c0027e31:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e34:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e37:	e9 99 00 00 00       	jmp    c0027ed5 <__adddf3+0x13a>
c0027e3c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e3f:	f7 d6                	not    esi
c0027e41:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e47:	0f 84 93 05 00 00    	je     c00283e0 <__adddf3+0x645>
c0027e4d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e54:	83 fb 1f             	cmp    ebx,0x1f
c0027e57:	7e 42                	jle    c0027e9b <__adddf3+0x100>
c0027e59:	83 fb 3f             	cmp    ebx,0x3f
c0027e5c:	0f 8f 7e 05 00 00    	jg     c00283e0 <__adddf3+0x645>
c0027e62:	83 e3 1f             	and    ebx,0x1f
c0027e65:	89 d9                	mov    ecx,ebx
c0027e67:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e6a:	d3 ef                	shr    edi,cl
c0027e6c:	31 db                	xor    ebx,ebx
c0027e6e:	85 c9                	test   ecx,ecx
c0027e70:	74 15                	je     c0027e87 <__adddf3+0xec>
c0027e72:	be 20 00 00 00       	mov    esi,0x20
c0027e77:	29 ce                	sub    esi,ecx
c0027e79:	89 f1                	mov    ecx,esi
c0027e7b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e7e:	d3 e6                	shl    esi,cl
c0027e80:	31 db                	xor    ebx,ebx
c0027e82:	85 f6                	test   esi,esi
c0027e84:	0f 95 c3             	setne  bl
c0027e87:	31 c9                	xor    ecx,ecx
c0027e89:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e8d:	0f 95 c1             	setne  cl
c0027e90:	09 cf                	or     edi,ecx
c0027e92:	09 fb                	or     ebx,edi
c0027e94:	01 da                	add    edx,ebx
c0027e96:	83 d0 00             	adc    eax,0x0
c0027e99:	eb 3a                	jmp    c0027ed5 <__adddf3+0x13a>
c0027e9b:	bf 20 00 00 00       	mov    edi,0x20
c0027ea0:	29 df                	sub    edi,ebx
c0027ea2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ea5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ea8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027eab:	d3 e6                	shl    esi,cl
c0027ead:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027eb0:	88 d9                	mov    cl,bl
c0027eb2:	d3 ef                	shr    edi,cl
c0027eb4:	09 fe                	or     esi,edi
c0027eb6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027eb9:	88 d9                	mov    cl,bl
c0027ebb:	d3 ef                	shr    edi,cl
c0027ebd:	89 fb                	mov    ebx,edi
c0027ebf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ec2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ec5:	d3 e7                	shl    edi,cl
c0027ec7:	85 ff                	test   edi,edi
c0027ec9:	0f 95 c1             	setne  cl
c0027ecc:	0f b6 c9             	movzx  ecx,cl
c0027ecf:	09 ce                	or     esi,ecx
c0027ed1:	01 f2                	add    edx,esi
c0027ed3:	11 d8                	adc    eax,ebx
c0027ed5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ed8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027edb:	e9 52 01 00 00       	jmp    c0028032 <__adddf3+0x297>
c0027ee0:	0f 84 d5 00 00 00    	je     c0027fbb <__adddf3+0x220>
c0027ee6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ee9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027eec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027eef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ef2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ef9:	75 20                	jne    c0027f1b <__adddf3+0x180>
c0027efb:	89 d6                	mov    esi,edx
c0027efd:	09 c6                	or     esi,eax
c0027eff:	0f 84 db 04 00 00    	je     c00283e0 <__adddf3+0x645>
c0027f05:	4b                   	dec    ebx
c0027f06:	75 29                	jne    c0027f31 <__adddf3+0x196>
c0027f08:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f0b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f0e:	01 d1                	add    ecx,edx
c0027f10:	11 c6                	adc    esi,eax
c0027f12:	89 f0                	mov    eax,esi
c0027f14:	89 ca                	mov    edx,ecx
c0027f16:	e9 17 01 00 00       	jmp    c0028032 <__adddf3+0x297>
c0027f1b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f1e:	f7 d6                	not    esi
c0027f20:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f26:	0f 84 b4 04 00 00    	je     c00283e0 <__adddf3+0x645>
c0027f2c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f31:	83 fb 1f             	cmp    ebx,0x1f
c0027f34:	7e 48                	jle    c0027f7e <__adddf3+0x1e3>
c0027f36:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f39:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f3c:	83 fb 3f             	cmp    ebx,0x3f
c0027f3f:	0f 8f 9b 04 00 00    	jg     c00283e0 <__adddf3+0x645>
c0027f45:	83 e3 1f             	and    ebx,0x1f
c0027f48:	89 d9                	mov    ecx,ebx
c0027f4a:	89 c7                	mov    edi,eax
c0027f4c:	d3 ef                	shr    edi,cl
c0027f4e:	31 db                	xor    ebx,ebx
c0027f50:	85 c9                	test   ecx,ecx
c0027f52:	74 12                	je     c0027f66 <__adddf3+0x1cb>
c0027f54:	be 20 00 00 00       	mov    esi,0x20
c0027f59:	29 ce                	sub    esi,ecx
c0027f5b:	89 f1                	mov    ecx,esi
c0027f5d:	d3 e0                	shl    eax,cl
c0027f5f:	31 db                	xor    ebx,ebx
c0027f61:	85 c0                	test   eax,eax
c0027f63:	0f 95 c3             	setne  bl
c0027f66:	31 c0                	xor    eax,eax
c0027f68:	85 d2                	test   edx,edx
c0027f6a:	0f 95 c0             	setne  al
c0027f6d:	09 c7                	or     edi,eax
c0027f6f:	09 fb                	or     ebx,edi
c0027f71:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f74:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f77:	01 da                	add    edx,ebx
c0027f79:	83 d6 00             	adc    esi,0x0
c0027f7c:	eb 39                	jmp    c0027fb7 <__adddf3+0x21c>
c0027f7e:	be 20 00 00 00       	mov    esi,0x20
c0027f83:	29 de                	sub    esi,ebx
c0027f85:	89 c7                	mov    edi,eax
c0027f87:	89 f1                	mov    ecx,esi
c0027f89:	d3 e7                	shl    edi,cl
c0027f8b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f8e:	89 d7                	mov    edi,edx
c0027f90:	88 d9                	mov    cl,bl
c0027f92:	d3 ef                	shr    edi,cl
c0027f94:	89 f9                	mov    ecx,edi
c0027f96:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f99:	09 cf                	or     edi,ecx
c0027f9b:	88 d9                	mov    cl,bl
c0027f9d:	d3 e8                	shr    eax,cl
c0027f9f:	89 f1                	mov    ecx,esi
c0027fa1:	d3 e2                	shl    edx,cl
c0027fa3:	85 d2                	test   edx,edx
c0027fa5:	0f 95 c2             	setne  dl
c0027fa8:	0f b6 d2             	movzx  edx,dl
c0027fab:	09 d7                	or     edi,edx
c0027fad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fb0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fb3:	01 fa                	add    edx,edi
c0027fb5:	11 c6                	adc    esi,eax
c0027fb7:	89 f0                	mov    eax,esi
c0027fb9:	eb 77                	jmp    c0028032 <__adddf3+0x297>
c0027fbb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fbe:	46                   	inc    esi
c0027fbf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fc2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fc8:	75 41                	jne    c002800b <__adddf3+0x270>
c0027fca:	89 d3                	mov    ebx,edx
c0027fcc:	09 c3                	or     ebx,eax
c0027fce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fd5:	75 27                	jne    c0027ffe <__adddf3+0x263>
c0027fd7:	85 db                	test   ebx,ebx
c0027fd9:	0f 84 fb 03 00 00    	je     c00283da <__adddf3+0x63f>
c0027fdf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fe2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fe5:	0f 84 f5 03 00 00    	je     c00283e0 <__adddf3+0x645>
c0027feb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027ff1:	85 c0                	test   eax,eax
c0027ff3:	0f 89 91 03 00 00    	jns    c002838a <__adddf3+0x5ef>
c0027ff9:	e9 85 03 00 00       	jmp    c0028383 <__adddf3+0x5e8>
c0027ffe:	85 db                	test   ebx,ebx
c0028000:	0f 85 da 03 00 00    	jne    c00283e0 <__adddf3+0x645>
c0028006:	e9 cf 03 00 00       	jmp    c00283da <__adddf3+0x63f>
c002800b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002800e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028011:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028014:	f7 d1                	not    ecx
c0028016:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002801c:	0f 84 70 03 00 00    	je     c0028392 <__adddf3+0x5f7>
c0028022:	d1 ea                	shr    edx,1
c0028024:	89 c1                	mov    ecx,eax
c0028026:	c1 e1 1f             	shl    ecx,0x1f
c0028029:	09 ca                	or     edx,ecx
c002802b:	d1 e8                	shr    eax,1
c002802d:	e9 6f 03 00 00       	jmp    c00283a1 <__adddf3+0x606>
c0028032:	85 c0                	test   eax,eax
c0028034:	0f 89 67 03 00 00    	jns    c00283a1 <__adddf3+0x606>
c002803a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002803d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028040:	f7 d1                	not    ecx
c0028042:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028048:	0f 84 44 03 00 00    	je     c0028392 <__adddf3+0x5f7>
c002804e:	89 d1                	mov    ecx,edx
c0028050:	d1 e9                	shr    ecx,1
c0028052:	83 e2 01             	and    edx,0x1
c0028055:	09 ca                	or     edx,ecx
c0028057:	89 c1                	mov    ecx,eax
c0028059:	c1 e1 1f             	shl    ecx,0x1f
c002805c:	09 ca                	or     edx,ecx
c002805e:	d1 e8                	shr    eax,1
c0028060:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028065:	e9 37 03 00 00       	jmp    c00283a1 <__adddf3+0x606>
c002806a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002806d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028073:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028076:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028079:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002807f:	29 de                	sub    esi,ebx
c0028081:	85 f6                	test   esi,esi
c0028083:	0f 8e bd 00 00 00    	jle    c0028146 <__adddf3+0x3ab>
c0028089:	85 db                	test   ebx,ebx
c002808b:	75 17                	jne    c00280a4 <__adddf3+0x309>
c002808d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028090:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028093:	0f 84 47 03 00 00    	je     c00283e0 <__adddf3+0x645>
c0028099:	4e                   	dec    esi
c002809a:	75 20                	jne    c00280bc <__adddf3+0x321>
c002809c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002809f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00280a2:	eb 5b                	jmp    c00280ff <__adddf3+0x364>
c00280a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280a7:	f7 d3                	not    ebx
c00280a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280af:	0f 84 2b 03 00 00    	je     c00283e0 <__adddf3+0x645>
c00280b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280bc:	83 fe 1f             	cmp    esi,0x1f
c00280bf:	7e 49                	jle    c002810a <__adddf3+0x36f>
c00280c1:	83 fe 3f             	cmp    esi,0x3f
c00280c4:	0f 8f 16 03 00 00    	jg     c00283e0 <__adddf3+0x645>
c00280ca:	83 e6 1f             	and    esi,0x1f
c00280cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280d0:	89 f1                	mov    ecx,esi
c00280d2:	d3 ef                	shr    edi,cl
c00280d4:	31 db                	xor    ebx,ebx
c00280d6:	85 f6                	test   esi,esi
c00280d8:	74 13                	je     c00280ed <__adddf3+0x352>
c00280da:	b9 20 00 00 00       	mov    ecx,0x20
c00280df:	29 f1                	sub    ecx,esi
c00280e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280e4:	d3 e6                	shl    esi,cl
c00280e6:	31 db                	xor    ebx,ebx
c00280e8:	85 f6                	test   esi,esi
c00280ea:	0f 95 c3             	setne  bl
c00280ed:	31 c9                	xor    ecx,ecx
c00280ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280f3:	0f 95 c1             	setne  cl
c00280f6:	09 cf                	or     edi,ecx
c00280f8:	09 fb                	or     ebx,edi
c00280fa:	29 da                	sub    edx,ebx
c00280fc:	83 d8 00             	sbb    eax,0x0
c00280ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028102:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028105:	e9 aa 01 00 00       	jmp    c00282b4 <__adddf3+0x519>
c002810a:	bf 20 00 00 00       	mov    edi,0x20
c002810f:	29 f7                	sub    edi,esi
c0028111:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028114:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028117:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002811a:	d3 e3                	shl    ebx,cl
c002811c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002811f:	89 f1                	mov    ecx,esi
c0028121:	d3 ef                	shr    edi,cl
c0028123:	09 fb                	or     ebx,edi
c0028125:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028128:	89 f1                	mov    ecx,esi
c002812a:	d3 ef                	shr    edi,cl
c002812c:	89 fe                	mov    esi,edi
c002812e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028131:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028134:	d3 e7                	shl    edi,cl
c0028136:	85 ff                	test   edi,edi
c0028138:	0f 95 c1             	setne  cl
c002813b:	0f b6 c9             	movzx  ecx,cl
c002813e:	09 cb                	or     ebx,ecx
c0028140:	29 da                	sub    edx,ebx
c0028142:	19 f0                	sbb    eax,esi
c0028144:	eb b9                	jmp    c00280ff <__adddf3+0x364>
c0028146:	0f 84 cd 00 00 00    	je     c0028219 <__adddf3+0x47e>
c002814c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002814f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028152:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028155:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028159:	75 1b                	jne    c0028176 <__adddf3+0x3db>
c002815b:	89 d6                	mov    esi,edx
c002815d:	09 c6                	or     esi,eax
c002815f:	0f 84 7b 02 00 00    	je     c00283e0 <__adddf3+0x645>
c0028165:	4b                   	dec    ebx
c0028166:	75 24                	jne    c002818c <__adddf3+0x3f1>
c0028168:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002816b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002816e:	29 d1                	sub    ecx,edx
c0028170:	19 c6                	sbb    esi,eax
c0028172:	89 ca                	mov    edx,ecx
c0028174:	eb 61                	jmp    c00281d7 <__adddf3+0x43c>
c0028176:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028179:	f7 d6                	not    esi
c002817b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028181:	0f 84 59 02 00 00    	je     c00283e0 <__adddf3+0x645>
c0028187:	0d 00 00 00 80       	or     eax,0x80000000
c002818c:	83 fb 1f             	cmp    ebx,0x1f
c002818f:	7e 4d                	jle    c00281de <__adddf3+0x443>
c0028191:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028194:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028197:	83 fb 3f             	cmp    ebx,0x3f
c002819a:	0f 8f 40 02 00 00    	jg     c00283e0 <__adddf3+0x645>
c00281a0:	83 e3 1f             	and    ebx,0x1f
c00281a3:	89 d9                	mov    ecx,ebx
c00281a5:	89 c7                	mov    edi,eax
c00281a7:	d3 ef                	shr    edi,cl
c00281a9:	31 db                	xor    ebx,ebx
c00281ab:	85 c9                	test   ecx,ecx
c00281ad:	74 12                	je     c00281c1 <__adddf3+0x426>
c00281af:	be 20 00 00 00       	mov    esi,0x20
c00281b4:	29 ce                	sub    esi,ecx
c00281b6:	89 f1                	mov    ecx,esi
c00281b8:	d3 e0                	shl    eax,cl
c00281ba:	31 db                	xor    ebx,ebx
c00281bc:	85 c0                	test   eax,eax
c00281be:	0f 95 c3             	setne  bl
c00281c1:	31 c0                	xor    eax,eax
c00281c3:	85 d2                	test   edx,edx
c00281c5:	0f 95 c0             	setne  al
c00281c8:	09 c7                	or     edi,eax
c00281ca:	09 fb                	or     ebx,edi
c00281cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281d2:	29 da                	sub    edx,ebx
c00281d4:	83 de 00             	sbb    esi,0x0
c00281d7:	89 f0                	mov    eax,esi
c00281d9:	e9 d6 00 00 00       	jmp    c00282b4 <__adddf3+0x519>
c00281de:	be 20 00 00 00       	mov    esi,0x20
c00281e3:	29 de                	sub    esi,ebx
c00281e5:	89 c7                	mov    edi,eax
c00281e7:	89 f1                	mov    ecx,esi
c00281e9:	d3 e7                	shl    edi,cl
c00281eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ee:	89 d7                	mov    edi,edx
c00281f0:	88 d9                	mov    cl,bl
c00281f2:	d3 ef                	shr    edi,cl
c00281f4:	89 f9                	mov    ecx,edi
c00281f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281f9:	09 cf                	or     edi,ecx
c00281fb:	88 d9                	mov    cl,bl
c00281fd:	d3 e8                	shr    eax,cl
c00281ff:	89 f1                	mov    ecx,esi
c0028201:	d3 e2                	shl    edx,cl
c0028203:	85 d2                	test   edx,edx
c0028205:	0f 95 c2             	setne  dl
c0028208:	0f b6 d2             	movzx  edx,dl
c002820b:	09 d7                	or     edi,edx
c002820d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028210:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028213:	29 fa                	sub    edx,edi
c0028215:	19 c6                	sbb    esi,eax
c0028217:	eb be                	jmp    c00281d7 <__adddf3+0x43c>
c0028219:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002821c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002821f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028225:	75 6a                	jne    c0028291 <__adddf3+0x4f6>
c0028227:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002822b:	75 58                	jne    c0028285 <__adddf3+0x4ea>
c002822d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028230:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028233:	89 d6                	mov    esi,edx
c0028235:	09 c6                	or     esi,eax
c0028237:	75 17                	jne    c0028250 <__adddf3+0x4b5>
c0028239:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002823c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002823f:	85 db                	test   ebx,ebx
c0028241:	0f 85 99 01 00 00    	jne    c00283e0 <__adddf3+0x645>
c0028247:	31 ff                	xor    edi,edi
c0028249:	31 c9                	xor    ecx,ecx
c002824b:	e9 90 01 00 00       	jmp    c00283e0 <__adddf3+0x645>
c0028250:	85 db                	test   ebx,ebx
c0028252:	0f 84 88 01 00 00    	je     c00283e0 <__adddf3+0x645>
c0028258:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002825b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002825e:	85 c0                	test   eax,eax
c0028260:	79 10                	jns    c0028272 <__adddf3+0x4d7>
c0028262:	31 c9                	xor    ecx,ecx
c0028264:	f7 da                	neg    edx
c0028266:	0f 95 c1             	setne  cl
c0028269:	01 c8                	add    eax,ecx
c002826b:	f7 d8                	neg    eax
c002826d:	e9 2f 01 00 00       	jmp    c00283a1 <__adddf3+0x606>
c0028272:	31 ff                	xor    edi,edi
c0028274:	31 c9                	xor    ecx,ecx
c0028276:	89 c3                	mov    ebx,eax
c0028278:	09 d3                	or     ebx,edx
c002827a:	0f 84 60 01 00 00    	je     c00283e0 <__adddf3+0x645>
c0028280:	e9 05 01 00 00       	jmp    c002838a <__adddf3+0x5ef>
c0028285:	31 ff                	xor    edi,edi
c0028287:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002828c:	e9 4f 01 00 00       	jmp    c00283e0 <__adddf3+0x645>
c0028291:	89 c1                	mov    ecx,eax
c0028293:	89 d0                	mov    eax,edx
c0028295:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028298:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002829b:	89 ca                	mov    edx,ecx
c002829d:	85 c9                	test   ecx,ecx
c002829f:	79 2c                	jns    c00282cd <__adddf3+0x532>
c00282a1:	31 c9                	xor    ecx,ecx
c00282a3:	f7 d8                	neg    eax
c00282a5:	0f 95 c1             	setne  cl
c00282a8:	01 ca                	add    edx,ecx
c00282aa:	f7 da                	neg    edx
c00282ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282b2:	eb 19                	jmp    c00282cd <__adddf3+0x532>
c00282b4:	85 c0                	test   eax,eax
c00282b6:	0f 89 e5 00 00 00    	jns    c00283a1 <__adddf3+0x606>
c00282bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282c1:	89 c1                	mov    ecx,eax
c00282c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282c9:	89 d0                	mov    eax,edx
c00282cb:	89 ca                	mov    edx,ecx
c00282cd:	85 d2                	test   edx,edx
c00282cf:	74 59                	je     c002832a <__adddf3+0x58f>
c00282d1:	0f bd da             	bsr    ebx,edx
c00282d4:	83 f3 1f             	xor    ebx,0x1f
c00282d7:	88 d9                	mov    cl,bl
c00282d9:	d3 e2                	shl    edx,cl
c00282db:	bf 20 00 00 00       	mov    edi,0x20
c00282e0:	89 f9                	mov    ecx,edi
c00282e2:	29 d9                	sub    ecx,ebx
c00282e4:	89 c6                	mov    esi,eax
c00282e6:	d3 ee                	shr    esi,cl
c00282e8:	09 d6                	or     esi,edx
c00282ea:	88 d9                	mov    cl,bl
c00282ec:	d3 e0                	shl    eax,cl
c00282ee:	89 c2                	mov    edx,eax
c00282f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282f3:	25 ff 07 00 00       	and    eax,0x7ff
c00282f8:	39 d8                	cmp    eax,ebx
c00282fa:	7f 22                	jg     c002831e <__adddf3+0x583>
c00282fc:	29 c3                	sub    ebx,eax
c00282fe:	43                   	inc    ebx
c00282ff:	88 d9                	mov    cl,bl
c0028301:	d3 ea                	shr    edx,cl
c0028303:	29 df                	sub    edi,ebx
c0028305:	89 f9                	mov    ecx,edi
c0028307:	89 f0                	mov    eax,esi
c0028309:	d3 e0                	shl    eax,cl
c002830b:	09 c2                	or     edx,eax
c002830d:	89 f0                	mov    eax,esi
c002830f:	88 d9                	mov    cl,bl
c0028311:	d3 e8                	shr    eax,cl
c0028313:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028316:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002831c:	eb 6f                	jmp    c002838d <__adddf3+0x5f2>
c002831e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028321:	29 d8                	sub    eax,ebx
c0028323:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028326:	89 f0                	mov    eax,esi
c0028328:	eb 59                	jmp    c0028383 <__adddf3+0x5e8>
c002832a:	85 c0                	test   eax,eax
c002832c:	74 6a                	je     c0028398 <__adddf3+0x5fd>
c002832e:	0f bd c8             	bsr    ecx,eax
c0028331:	83 f1 1f             	xor    ecx,0x1f
c0028334:	d3 e0                	shl    eax,cl
c0028336:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028339:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002833f:	83 c1 20             	add    ecx,0x20
c0028342:	39 cb                	cmp    ebx,ecx
c0028344:	7f 35                	jg     c002837b <__adddf3+0x5e0>
c0028346:	29 d9                	sub    ecx,ebx
c0028348:	8d 71 01             	lea    esi,[ecx+0x1]
c002834b:	83 fe 1f             	cmp    esi,0x1f
c002834e:	7e 09                	jle    c0028359 <__adddf3+0x5be>
c0028350:	83 e9 1f             	sub    ecx,0x1f
c0028353:	d3 e8                	shr    eax,cl
c0028355:	89 c3                	mov    ebx,eax
c0028357:	eb 11                	jmp    c002836a <__adddf3+0x5cf>
c0028359:	b9 20 00 00 00       	mov    ecx,0x20
c002835e:	29 f1                	sub    ecx,esi
c0028360:	89 c3                	mov    ebx,eax
c0028362:	d3 e3                	shl    ebx,cl
c0028364:	89 f1                	mov    ecx,esi
c0028366:	d3 e8                	shr    eax,cl
c0028368:	89 c2                	mov    edx,eax
c002836a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002836d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028372:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028375:	89 d0                	mov    eax,edx
c0028377:	89 da                	mov    edx,ebx
c0028379:	eb 26                	jmp    c00283a1 <__adddf3+0x606>
c002837b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002837e:	29 cf                	sub    edi,ecx
c0028380:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028383:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028388:	eb 17                	jmp    c00283a1 <__adddf3+0x606>
c002838a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002838d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028390:	eb 0f                	jmp    c00283a1 <__adddf3+0x606>
c0028392:	31 d2                	xor    edx,edx
c0028394:	31 c0                	xor    eax,eax
c0028396:	eb 09                	jmp    c00283a1 <__adddf3+0x606>
c0028398:	89 c2                	mov    edx,eax
c002839a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00283a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283a4:	c1 e1 14             	shl    ecx,0x14
c00283a7:	89 c3                	mov    ebx,eax
c00283a9:	c1 eb 0b             	shr    ebx,0xb
c00283ac:	09 d9                	or     ecx,ebx
c00283ae:	89 d3                	mov    ebx,edx
c00283b0:	c1 eb 0b             	shr    ebx,0xb
c00283b3:	c1 e0 15             	shl    eax,0x15
c00283b6:	09 d8                	or     eax,ebx
c00283b8:	89 c7                	mov    edi,eax
c00283ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283c0:	0f 95 c0             	setne  al
c00283c3:	89 c6                	mov    esi,eax
c00283c5:	09 f3                	or     ebx,esi
c00283c7:	83 e3 01             	and    ebx,0x1
c00283ca:	c1 ea 0a             	shr    edx,0xa
c00283cd:	21 da                	and    edx,ebx
c00283cf:	89 f8                	mov    eax,edi
c00283d1:	01 d0                	add    eax,edx
c00283d3:	83 d1 00             	adc    ecx,0x0
c00283d6:	89 c7                	mov    edi,eax
c00283d8:	eb 06                	jmp    c00283e0 <__adddf3+0x645>
c00283da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283e0:	89 f8                	mov    eax,edi
c00283e2:	89 ca                	mov    edx,ecx
c00283e4:	83 c4 24             	add    esp,0x24
c00283e7:	5b                   	pop    ebx
c00283e8:	5e                   	pop    esi
c00283e9:	5f                   	pop    edi
c00283ea:	5d                   	pop    ebp
c00283eb:	c3                   	ret    

c00283ec <__subdf3>:
c00283ec:	55                   	push   ebp
c00283ed:	89 e5                	mov    ebp,esp
c00283ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028401:	5d                   	pop    ebp
c0028402:	e9 94 f9 ff ff       	jmp    c0027d9b <__adddf3>

c0028407 <__negdf2>:
c0028407:	55                   	push   ebp
c0028408:	89 e5                	mov    ebp,esp
c002840a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002840d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028410:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028416:	5d                   	pop    ebp
c0028417:	c3                   	ret    

c0028418 <__muldf3>:
c0028418:	55                   	push   ebp
c0028419:	89 e5                	mov    ebp,esp
c002841b:	57                   	push   edi
c002841c:	56                   	push   esi
c002841d:	53                   	push   ebx
c002841e:	83 ec 24             	sub    esp,0x24
c0028421:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028427:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002842a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002842d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028430:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028433:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028436:	89 c8                	mov    eax,ecx
c0028438:	c1 f8 14             	sar    eax,0x14
c002843b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002843e:	89 f8                	mov    eax,edi
c0028440:	89 fb                	mov    ebx,edi
c0028442:	c1 e3 0b             	shl    ebx,0xb
c0028445:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028448:	c1 e1 0b             	shl    ecx,0xb
c002844b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028451:	c1 e8 15             	shr    eax,0x15
c0028454:	09 c1                	or     ecx,eax
c0028456:	89 d6                	mov    esi,edx
c0028458:	89 d0                	mov    eax,edx
c002845a:	c1 f8 14             	sar    eax,0x14
c002845d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028460:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028463:	89 c3                	mov    ebx,eax
c0028465:	c1 e3 0b             	shl    ebx,0xb
c0028468:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002846b:	c1 e6 0b             	shl    esi,0xb
c002846e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028474:	c1 e8 15             	shr    eax,0x15
c0028477:	09 c6                	or     esi,eax
c0028479:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002847c:	25 ff 07 00 00       	and    eax,0x7ff
c0028481:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028484:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028487:	25 ff 07 00 00       	and    eax,0x7ff
c002848c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002848f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028492:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028495:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002849c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002849f:	40                   	inc    eax
c00284a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00284a5:	0f 85 8d 00 00 00    	jne    c0028538 <__muldf3+0x120>
c00284ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284ae:	09 c8                	or     eax,ecx
c00284b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00284b4:	74 44                	je     c00284fa <__muldf3+0xe2>
c00284b6:	85 c0                	test   eax,eax
c00284b8:	0f 85 31 02 00 00    	jne    c00286ef <__muldf3+0x2d7>
c00284be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284c1:	40                   	inc    eax
c00284c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284c7:	75 13                	jne    c00284dc <__muldf3+0xc4>
c00284c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284cc:	09 f1                	or     ecx,esi
c00284ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284d2:	74 22                	je     c00284f6 <__muldf3+0xde>
c00284d4:	85 c9                	test   ecx,ecx
c00284d6:	0f 85 0d 02 00 00    	jne    c00286e9 <__muldf3+0x2d1>
c00284dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284e0:	0f 89 09 02 00 00    	jns    c00286ef <__muldf3+0x2d7>
c00284e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284e9:	05 00 00 00 80       	add    eax,0x80000000
c00284ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284f1:	e9 f9 01 00 00       	jmp    c00286ef <__muldf3+0x2d7>
c00284f6:	85 c9                	test   ecx,ecx
c00284f8:	eb 2e                	jmp    c0028528 <__muldf3+0x110>
c00284fa:	85 c0                	test   eax,eax
c00284fc:	74 20                	je     c002851e <__muldf3+0x106>
c00284fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028501:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028504:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028507:	c1 ef 1f             	shr    edi,0x1f
c002850a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002850d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028510:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028513:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028516:	09 f9                	or     ecx,edi
c0028518:	78 1e                	js     c0028538 <__muldf3+0x120>
c002851a:	89 c3                	mov    ebx,eax
c002851c:	eb e0                	jmp    c00284fe <__muldf3+0xe6>
c002851e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028521:	f7 d0                	not    eax
c0028523:	a9 ff 07 00 00       	test   eax,0x7ff
c0028528:	75 b2                	jne    c00284dc <__muldf3+0xc4>
c002852a:	31 ff                	xor    edi,edi
c002852c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028533:	e9 b7 01 00 00       	jmp    c00286ef <__muldf3+0x2d7>
c0028538:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002853b:	40                   	inc    eax
c002853c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028541:	75 57                	jne    c002859a <__muldf3+0x182>
c0028543:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028546:	09 f0                	or     eax,esi
c0028548:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002854c:	74 23                	je     c0028571 <__muldf3+0x159>
c002854e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028552:	0f 89 91 01 00 00    	jns    c00286e9 <__muldf3+0x2d1>
c0028558:	85 c0                	test   eax,eax
c002855a:	0f 85 89 01 00 00    	jne    c00286e9 <__muldf3+0x2d1>
c0028560:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028563:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028569:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002856c:	e9 7e 01 00 00       	jmp    c00286ef <__muldf3+0x2d7>
c0028571:	85 c0                	test   eax,eax
c0028573:	75 0c                	jne    c0028581 <__muldf3+0x169>
c0028575:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028579:	0f 89 6a 01 00 00    	jns    c00286e9 <__muldf3+0x2d1>
c002857f:	eb df                	jmp    c0028560 <__muldf3+0x148>
c0028581:	01 f6                	add    esi,esi
c0028583:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028586:	c1 ea 1f             	shr    edx,0x1f
c0028589:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002858c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002858f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028592:	09 d6                	or     esi,edx
c0028594:	78 04                	js     c002859a <__muldf3+0x182>
c0028596:	89 c3                	mov    ebx,eax
c0028598:	eb e7                	jmp    c0028581 <__muldf3+0x169>
c002859a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00285a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285a6:	89 c8                	mov    eax,ecx
c00285a8:	f7 e6                	mul    esi
c00285aa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00285ad:	89 c7                	mov    edi,eax
c00285af:	89 c8                	mov    eax,ecx
c00285b1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00285b7:	89 c1                	mov    ecx,eax
c00285b9:	89 f0                	mov    eax,esi
c00285bb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00285be:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285c1:	89 c6                	mov    esi,eax
c00285c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285c6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285cc:	31 c0                	xor    eax,eax
c00285ce:	01 f1                	add    ecx,esi
c00285d0:	0f 92 c0             	setb   al
c00285d3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285d6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285d9:	83 d6 00             	adc    esi,0x0
c00285dc:	01 c7                	add    edi,eax
c00285de:	83 d6 00             	adc    esi,0x0
c00285e1:	01 ca                	add    edx,ecx
c00285e3:	0f 92 c1             	setb   cl
c00285e6:	0f b6 c9             	movzx  ecx,cl
c00285e9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285ec:	83 d6 00             	adc    esi,0x0
c00285ef:	01 cf                	add    edi,ecx
c00285f1:	83 d6 00             	adc    esi,0x0
c00285f4:	31 c9                	xor    ecx,ecx
c00285f6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285f9:	0f 95 c1             	setne  cl
c00285fc:	09 cf                	or     edi,ecx
c00285fe:	85 f6                	test   esi,esi
c0028600:	78 0c                	js     c002860e <__muldf3+0x1f6>
c0028602:	01 f6                	add    esi,esi
c0028604:	89 f8                	mov    eax,edi
c0028606:	c1 e8 1f             	shr    eax,0x1f
c0028609:	09 c6                	or     esi,eax
c002860b:	01 ff                	add    edi,edi
c002860d:	4b                   	dec    ebx
c002860e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028614:	0f 8f 85 00 00 00    	jg     c002869f <__muldf3+0x287>
c002861a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028620:	85 db                	test   ebx,ebx
c0028622:	0f 8f 84 00 00 00    	jg     c00286ac <__muldf3+0x294>
c0028628:	83 fb cc             	cmp    ebx,0xffffffcc
c002862b:	7c 79                	jl     c00286a6 <__muldf3+0x28e>
c002862d:	ba 01 00 00 00       	mov    edx,0x1
c0028632:	29 da                	sub    edx,ebx
c0028634:	81 ce 00 00 00 80    	or     esi,0x80000000
c002863a:	83 fa 1f             	cmp    edx,0x1f
c002863d:	7e 30                	jle    c002866f <__muldf3+0x257>
c002863f:	83 fa 20             	cmp    edx,0x20
c0028642:	75 0b                	jne    c002864f <__muldf3+0x237>
c0028644:	31 c0                	xor    eax,eax
c0028646:	85 ff                	test   edi,edi
c0028648:	0f 95 c0             	setne  al
c002864b:	89 c7                	mov    edi,eax
c002864d:	eb 1a                	jmp    c0028669 <__muldf3+0x251>
c002864f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028652:	89 f0                	mov    eax,esi
c0028654:	d3 e0                	shl    eax,cl
c0028656:	09 f8                	or     eax,edi
c0028658:	0f 95 c0             	setne  al
c002865b:	0f b6 c0             	movzx  eax,al
c002865e:	89 c7                	mov    edi,eax
c0028660:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028665:	29 d9                	sub    ecx,ebx
c0028667:	d3 ee                	shr    esi,cl
c0028669:	09 f7                	or     edi,esi
c002866b:	31 db                	xor    ebx,ebx
c002866d:	eb 3b                	jmp    c00286aa <__muldf3+0x292>
c002866f:	83 c3 1f             	add    ebx,0x1f
c0028672:	89 f0                	mov    eax,esi
c0028674:	88 d9                	mov    cl,bl
c0028676:	d3 e0                	shl    eax,cl
c0028678:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002867b:	89 f8                	mov    eax,edi
c002867d:	88 d1                	mov    cl,dl
c002867f:	d3 e8                	shr    eax,cl
c0028681:	89 c1                	mov    ecx,eax
c0028683:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028686:	09 c8                	or     eax,ecx
c0028688:	88 d9                	mov    cl,bl
c002868a:	d3 e7                	shl    edi,cl
c002868c:	31 db                	xor    ebx,ebx
c002868e:	85 ff                	test   edi,edi
c0028690:	0f 95 c3             	setne  bl
c0028693:	89 df                	mov    edi,ebx
c0028695:	09 c7                	or     edi,eax
c0028697:	88 d1                	mov    cl,dl
c0028699:	d3 ee                	shr    esi,cl
c002869b:	31 db                	xor    ebx,ebx
c002869d:	eb 0d                	jmp    c00286ac <__muldf3+0x294>
c002869f:	bb ff 07 00 00       	mov    ebx,0x7ff
c00286a4:	eb 02                	jmp    c00286a8 <__muldf3+0x290>
c00286a6:	31 db                	xor    ebx,ebx
c00286a8:	31 ff                	xor    edi,edi
c00286aa:	31 f6                	xor    esi,esi
c00286ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286af:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00286b2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00286b7:	09 c3                	or     ebx,eax
c00286b9:	c1 e3 14             	shl    ebx,0x14
c00286bc:	89 f0                	mov    eax,esi
c00286be:	c1 e8 0b             	shr    eax,0xb
c00286c1:	09 c3                	or     ebx,eax
c00286c3:	89 f8                	mov    eax,edi
c00286c5:	c1 e8 0b             	shr    eax,0xb
c00286c8:	c1 e6 15             	shl    esi,0x15
c00286cb:	09 c6                	or     esi,eax
c00286cd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286d3:	0f 95 c1             	setne  cl
c00286d6:	09 c8                	or     eax,ecx
c00286d8:	83 e0 01             	and    eax,0x1
c00286db:	c1 ef 0a             	shr    edi,0xa
c00286de:	21 c7                	and    edi,eax
c00286e0:	01 f7                	add    edi,esi
c00286e2:	83 d3 00             	adc    ebx,0x0
c00286e5:	89 da                	mov    edx,ebx
c00286e7:	eb 03                	jmp    c00286ec <__muldf3+0x2d4>
c00286e9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286ec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286ef:	89 f8                	mov    eax,edi
c00286f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286f4:	83 c4 24             	add    esp,0x24
c00286f7:	5b                   	pop    ebx
c00286f8:	5e                   	pop    esi
c00286f9:	5f                   	pop    edi
c00286fa:	5d                   	pop    ebp
c00286fb:	c3                   	ret    

c00286fc <__divdf3>:
c00286fc:	55                   	push   ebp
c00286fd:	89 e5                	mov    ebp,esp
c00286ff:	57                   	push   edi
c0028700:	56                   	push   esi
c0028701:	53                   	push   ebx
c0028702:	83 ec 2c             	sub    esp,0x2c
c0028705:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028708:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002870b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002870e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028711:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028714:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028717:	89 ce                	mov    esi,ecx
c0028719:	89 c8                	mov    eax,ecx
c002871b:	c1 f8 14             	sar    eax,0x14
c002871e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028721:	89 f8                	mov    eax,edi
c0028723:	89 fb                	mov    ebx,edi
c0028725:	c1 e3 0b             	shl    ebx,0xb
c0028728:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002872b:	c1 e6 0b             	shl    esi,0xb
c002872e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028734:	c1 e8 15             	shr    eax,0x15
c0028737:	09 c6                	or     esi,eax
c0028739:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002873c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002873f:	89 c2                	mov    edx,eax
c0028741:	c1 fa 14             	sar    edx,0x14
c0028744:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028747:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002874a:	89 de                	mov    esi,ebx
c002874c:	c1 e6 0b             	shl    esi,0xb
c002874f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028752:	c1 e0 0b             	shl    eax,0xb
c0028755:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002875a:	c1 eb 15             	shr    ebx,0x15
c002875d:	09 d8                	or     eax,ebx
c002875f:	89 c2                	mov    edx,eax
c0028761:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028764:	25 ff 07 00 00       	and    eax,0x7ff
c0028769:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002876c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002876f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028775:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028778:	29 d8                	sub    eax,ebx
c002877a:	05 ff 03 00 00       	add    eax,0x3ff
c002877f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028782:	46                   	inc    esi
c0028783:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028789:	0f 85 a5 00 00 00    	jne    c0028834 <__divdf3+0x138>
c002878f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028792:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028795:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028799:	74 2a                	je     c00287c5 <__divdf3+0xc9>
c002879b:	85 f6                	test   esi,esi
c002879d:	0f 85 cc 02 00 00    	jne    c0028a6f <__divdf3+0x373>
c00287a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287a6:	40                   	inc    eax
c00287a7:	a9 fe 07 00 00       	test   eax,0x7fe
c00287ac:	75 26                	jne    c00287d4 <__divdf3+0xd8>
c00287ae:	85 db                	test   ebx,ebx
c00287b0:	74 22                	je     c00287d4 <__divdf3+0xd8>
c00287b2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287b5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287bb:	09 d0                	or     eax,edx
c00287bd:	0f 85 ac 02 00 00    	jne    c0028a6f <__divdf3+0x373>
c00287c3:	eb 63                	jmp    c0028828 <__divdf3+0x12c>
c00287c5:	85 f6                	test   esi,esi
c00287c7:	75 22                	jne    c00287eb <__divdf3+0xef>
c00287c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287cc:	40                   	inc    eax
c00287cd:	a9 fe 07 00 00       	test   eax,0x7fe
c00287d2:	74 36                	je     c002880a <__divdf3+0x10e>
c00287d4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287d8:	0f 89 91 02 00 00    	jns    c0028a6f <__divdf3+0x373>
c00287de:	89 f8                	mov    eax,edi
c00287e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287e6:	e9 80 02 00 00       	jmp    c0028a6b <__divdf3+0x36f>
c00287eb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287ee:	01 f6                	add    esi,esi
c00287f0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287f3:	c1 ef 1f             	shr    edi,0x1f
c00287f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287f9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287fc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287ff:	09 f7                	or     edi,esi
c0028801:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028804:	78 2e                	js     c0028834 <__divdf3+0x138>
c0028806:	89 c8                	mov    eax,ecx
c0028808:	eb e1                	jmp    c00287eb <__divdf3+0xef>
c002880a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002880d:	09 d0                	or     eax,edx
c002880f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028813:	74 0f                	je     c0028824 <__divdf3+0x128>
c0028815:	85 c0                	test   eax,eax
c0028817:	74 bb                	je     c00287d4 <__divdf3+0xd8>
c0028819:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002881c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002881f:	e9 4b 02 00 00       	jmp    c0028a6f <__divdf3+0x373>
c0028824:	85 c0                	test   eax,eax
c0028826:	75 ac                	jne    c00287d4 <__divdf3+0xd8>
c0028828:	31 ff                	xor    edi,edi
c002882a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002882f:	e9 3b 02 00 00       	jmp    c0028a6f <__divdf3+0x373>
c0028834:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028837:	8d 4f 01             	lea    ecx,[edi+0x1]
c002883a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028840:	75 6b                	jne    c00288ad <__divdf3+0x1b1>
c0028842:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028845:	09 d6                	or     esi,edx
c0028847:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002884b:	74 28                	je     c0028875 <__divdf3+0x179>
c002884d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028850:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028853:	85 f6                	test   esi,esi
c0028855:	0f 85 14 02 00 00    	jne    c0028a6f <__divdf3+0x373>
c002885b:	31 ff                	xor    edi,edi
c002885d:	31 c9                	xor    ecx,ecx
c002885f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028862:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028865:	0f 89 04 02 00 00    	jns    c0028a6f <__divdf3+0x373>
c002886b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028870:	e9 fa 01 00 00       	jmp    c0028a6f <__divdf3+0x373>
c0028875:	85 f6                	test   esi,esi
c0028877:	75 1b                	jne    c0028894 <__divdf3+0x198>
c0028879:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002887c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002887f:	25 00 00 00 80       	and    eax,0x80000000
c0028884:	31 c9                	xor    ecx,ecx
c0028886:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002888b:	89 cf                	mov    edi,ecx
c002888d:	89 c1                	mov    ecx,eax
c002888f:	e9 db 01 00 00       	jmp    c0028a6f <__divdf3+0x373>
c0028894:	01 d2                	add    edx,edx
c0028896:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028899:	c1 eb 1f             	shr    ebx,0x1f
c002889c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002889f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00288a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00288a5:	09 da                	or     edx,ebx
c00288a7:	78 04                	js     c00288ad <__divdf3+0x1b1>
c00288a9:	89 c8                	mov    eax,ecx
c00288ab:	eb e7                	jmp    c0028894 <__divdf3+0x198>
c00288ad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288b0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00288b6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00288bc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00288bf:	39 d6                	cmp    esi,edx
c00288c1:	77 0d                	ja     c00288d0 <__divdf3+0x1d4>
c00288c3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288c6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288c9:	72 1b                	jb     c00288e6 <__divdf3+0x1ea>
c00288cb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288ce:	75 16                	jne    c00288e6 <__divdf3+0x1ea>
c00288d0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288d6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288d9:	83 de 00             	sbb    esi,0x0
c00288dc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288df:	ba 01 00 00 00       	mov    edx,0x1
c00288e4:	eb 02                	jmp    c00288e8 <__divdf3+0x1ec>
c00288e6:	31 d2                	xor    edx,edx
c00288e8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288ef:	31 ff                	xor    edi,edi
c00288f1:	01 ff                	add    edi,edi
c00288f3:	89 d1                	mov    ecx,edx
c00288f5:	c1 e9 1f             	shr    ecx,0x1f
c00288f8:	09 cf                	or     edi,ecx
c00288fa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288fd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028900:	89 da                	mov    edx,ebx
c0028902:	89 f3                	mov    ebx,esi
c0028904:	8d 34 36             	lea    esi,[esi+esi*1]
c0028907:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002890a:	c1 e9 1f             	shr    ecx,0x1f
c002890d:	09 ce                	or     esi,ecx
c002890f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028912:	01 c9                	add    ecx,ecx
c0028914:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028917:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002891a:	85 db                	test   ebx,ebx
c002891c:	78 29                	js     c0028947 <__divdf3+0x24b>
c002891e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028921:	72 07                	jb     c002892a <__divdf3+0x22e>
c0028923:	75 3c                	jne    c0028961 <__divdf3+0x265>
c0028925:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028928:	77 37                	ja     c0028961 <__divdf3+0x265>
c002892a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002892d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028930:	31 d2                	xor    edx,edx
c0028932:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028935:	0f 97 c2             	seta   dl
c0028938:	29 d6                	sub    esi,edx
c002893a:	89 d9                	mov    ecx,ebx
c002893c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002893f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028942:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028945:	eb 17                	jmp    c002895e <__divdf3+0x262>
c0028947:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002894a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002894d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028950:	0f 97 c1             	seta   cl
c0028953:	0f b6 c9             	movzx  ecx,cl
c0028956:	29 ce                	sub    esi,ecx
c0028958:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002895b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002895e:	83 ca 01             	or     edx,0x1
c0028961:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028964:	75 8b                	jne    c00288f1 <__divdf3+0x1f5>
c0028966:	c1 e7 09             	shl    edi,0x9
c0028969:	89 d1                	mov    ecx,edx
c002896b:	c1 e9 17             	shr    ecx,0x17
c002896e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028971:	09 f3                	or     ebx,esi
c0028973:	0f 95 c3             	setne  bl
c0028976:	0f b6 db             	movzx  ebx,bl
c0028979:	c1 e2 09             	shl    edx,0x9
c002897c:	09 d3                	or     ebx,edx
c002897e:	89 ca                	mov    edx,ecx
c0028980:	09 fa                	or     edx,edi
c0028982:	78 0c                	js     c0028990 <__divdf3+0x294>
c0028984:	01 d2                	add    edx,edx
c0028986:	89 d9                	mov    ecx,ebx
c0028988:	c1 e9 1f             	shr    ecx,0x1f
c002898b:	09 ca                	or     edx,ecx
c002898d:	01 db                	add    ebx,ebx
c002898f:	48                   	dec    eax
c0028990:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028995:	0f 8f 83 00 00 00    	jg     c0028a1e <__divdf3+0x322>
c002899b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289a1:	85 c0                	test   eax,eax
c00289a3:	0f 8f 82 00 00 00    	jg     c0028a2b <__divdf3+0x32f>
c00289a9:	83 f8 cc             	cmp    eax,0xffffffcc
c00289ac:	7c 77                	jl     c0028a25 <__divdf3+0x329>
c00289ae:	be 01 00 00 00       	mov    esi,0x1
c00289b3:	29 c6                	sub    esi,eax
c00289b5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00289bb:	83 fe 1f             	cmp    esi,0x1f
c00289be:	7e 2f                	jle    c00289ef <__divdf3+0x2f3>
c00289c0:	83 fe 20             	cmp    esi,0x20
c00289c3:	75 0a                	jne    c00289cf <__divdf3+0x2d3>
c00289c5:	85 db                	test   ebx,ebx
c00289c7:	0f 95 c3             	setne  bl
c00289ca:	0f b6 db             	movzx  ebx,bl
c00289cd:	eb 1a                	jmp    c00289e9 <__divdf3+0x2ed>
c00289cf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289d2:	89 d7                	mov    edi,edx
c00289d4:	d3 e7                	shl    edi,cl
c00289d6:	89 f9                	mov    ecx,edi
c00289d8:	09 d9                	or     ecx,ebx
c00289da:	0f 95 c3             	setne  bl
c00289dd:	0f b6 db             	movzx  ebx,bl
c00289e0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289e5:	29 c1                	sub    ecx,eax
c00289e7:	d3 ea                	shr    edx,cl
c00289e9:	09 d3                	or     ebx,edx
c00289eb:	31 c0                	xor    eax,eax
c00289ed:	eb 3a                	jmp    c0028a29 <__divdf3+0x32d>
c00289ef:	83 c0 1f             	add    eax,0x1f
c00289f2:	89 d7                	mov    edi,edx
c00289f4:	88 c1                	mov    cl,al
c00289f6:	d3 e7                	shl    edi,cl
c00289f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289fb:	89 df                	mov    edi,ebx
c00289fd:	89 f1                	mov    ecx,esi
c00289ff:	d3 ef                	shr    edi,cl
c0028a01:	89 f9                	mov    ecx,edi
c0028a03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a06:	09 cf                	or     edi,ecx
c0028a08:	88 c1                	mov    cl,al
c0028a0a:	d3 e3                	shl    ebx,cl
c0028a0c:	85 db                	test   ebx,ebx
c0028a0e:	0f 95 c3             	setne  bl
c0028a11:	0f b6 db             	movzx  ebx,bl
c0028a14:	09 fb                	or     ebx,edi
c0028a16:	89 f1                	mov    ecx,esi
c0028a18:	d3 ea                	shr    edx,cl
c0028a1a:	31 c0                	xor    eax,eax
c0028a1c:	eb 0d                	jmp    c0028a2b <__divdf3+0x32f>
c0028a1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a23:	eb 02                	jmp    c0028a27 <__divdf3+0x32b>
c0028a25:	31 c0                	xor    eax,eax
c0028a27:	31 db                	xor    ebx,ebx
c0028a29:	31 d2                	xor    edx,edx
c0028a2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a37:	09 c8                	or     eax,ecx
c0028a39:	c1 e0 14             	shl    eax,0x14
c0028a3c:	89 d1                	mov    ecx,edx
c0028a3e:	c1 e9 0b             	shr    ecx,0xb
c0028a41:	09 c8                	or     eax,ecx
c0028a43:	89 c6                	mov    esi,eax
c0028a45:	89 d9                	mov    ecx,ebx
c0028a47:	c1 e9 0b             	shr    ecx,0xb
c0028a4a:	c1 e2 15             	shl    edx,0x15
c0028a4d:	09 ca                	or     edx,ecx
c0028a4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a55:	0f 95 c0             	setne  al
c0028a58:	09 c1                	or     ecx,eax
c0028a5a:	83 e1 01             	and    ecx,0x1
c0028a5d:	c1 eb 0a             	shr    ebx,0xa
c0028a60:	21 cb                	and    ebx,ecx
c0028a62:	01 d3                	add    ebx,edx
c0028a64:	89 d8                	mov    eax,ebx
c0028a66:	83 d6 00             	adc    esi,0x0
c0028a69:	89 f2                	mov    edx,esi
c0028a6b:	89 c7                	mov    edi,eax
c0028a6d:	89 d1                	mov    ecx,edx
c0028a6f:	89 f8                	mov    eax,edi
c0028a71:	89 ca                	mov    edx,ecx
c0028a73:	83 c4 2c             	add    esp,0x2c
c0028a76:	5b                   	pop    ebx
c0028a77:	5e                   	pop    esi
c0028a78:	5f                   	pop    edi
c0028a79:	5d                   	pop    ebp
c0028a7a:	c3                   	ret    

c0028a7b <__floatsidf>:
c0028a7b:	55                   	push   ebp
c0028a7c:	89 e5                	mov    ebp,esp
c0028a7e:	56                   	push   esi
c0028a7f:	53                   	push   ebx
c0028a80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a83:	85 db                	test   ebx,ebx
c0028a85:	7e 15                	jle    c0028a9c <__floatsidf+0x21>
c0028a87:	0f bd cb             	bsr    ecx,ebx
c0028a8a:	83 f1 1f             	xor    ecx,0x1f
c0028a8d:	d3 e3                	shl    ebx,cl
c0028a8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a95:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a9a:	eb 21                	jmp    c0028abd <__floatsidf+0x42>
c0028a9c:	b8 00 00 00 00       	mov    eax,0x0
c0028aa1:	ba 00 00 00 00       	mov    edx,0x0
c0028aa6:	74 2a                	je     c0028ad2 <__floatsidf+0x57>
c0028aa8:	f7 db                	neg    ebx
c0028aaa:	0f bd cb             	bsr    ecx,ebx
c0028aad:	83 f1 1f             	xor    ecx,0x1f
c0028ab0:	d3 e3                	shl    ebx,cl
c0028ab2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ab8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028abd:	29 c8                	sub    eax,ecx
c0028abf:	c1 e0 14             	shl    eax,0x14
c0028ac2:	89 c1                	mov    ecx,eax
c0028ac4:	89 de                	mov    esi,ebx
c0028ac6:	c1 ee 0b             	shr    esi,0xb
c0028ac9:	09 f1                	or     ecx,esi
c0028acb:	89 ca                	mov    edx,ecx
c0028acd:	c1 e3 15             	shl    ebx,0x15
c0028ad0:	89 d8                	mov    eax,ebx
c0028ad2:	5b                   	pop    ebx
c0028ad3:	5e                   	pop    esi
c0028ad4:	5d                   	pop    ebp
c0028ad5:	c3                   	ret    

c0028ad6 <__floatunsidf>:
c0028ad6:	55                   	push   ebp
c0028ad7:	89 e5                	mov    ebp,esp
c0028ad9:	56                   	push   esi
c0028ada:	53                   	push   ebx
c0028adb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ade:	85 db                	test   ebx,ebx
c0028ae0:	74 2a                	je     c0028b0c <__floatunsidf+0x36>
c0028ae2:	0f bd cb             	bsr    ecx,ebx
c0028ae5:	83 f1 1f             	xor    ecx,0x1f
c0028ae8:	d3 e3                	shl    ebx,cl
c0028aea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028af0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028af5:	29 c8                	sub    eax,ecx
c0028af7:	c1 e0 14             	shl    eax,0x14
c0028afa:	89 c1                	mov    ecx,eax
c0028afc:	89 de                	mov    esi,ebx
c0028afe:	c1 ee 0b             	shr    esi,0xb
c0028b01:	09 f1                	or     ecx,esi
c0028b03:	89 ca                	mov    edx,ecx
c0028b05:	c1 e3 15             	shl    ebx,0x15
c0028b08:	89 d8                	mov    eax,ebx
c0028b0a:	eb 04                	jmp    c0028b10 <__floatunsidf+0x3a>
c0028b0c:	31 c0                	xor    eax,eax
c0028b0e:	31 d2                	xor    edx,edx
c0028b10:	5b                   	pop    ebx
c0028b11:	5e                   	pop    esi
c0028b12:	5d                   	pop    ebp
c0028b13:	c3                   	ret    

c0028b14 <__fixdfsi>:
c0028b14:	55                   	push   ebp
c0028b15:	89 e5                	mov    ebp,esp
c0028b17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b1a:	89 d1                	mov    ecx,edx
c0028b1c:	c1 e1 0b             	shl    ecx,0xb
c0028b1f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b28:	c1 e8 15             	shr    eax,0x15
c0028b2b:	09 c1                	or     ecx,eax
c0028b2d:	c1 fa 14             	sar    edx,0x14
c0028b30:	78 1f                	js     c0028b51 <__fixdfsi+0x3d>
c0028b32:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b38:	31 c0                	xor    eax,eax
c0028b3a:	83 fa 1e             	cmp    edx,0x1e
c0028b3d:	77 40                	ja     c0028b7f <__fixdfsi+0x6b>
c0028b3f:	89 c8                	mov    eax,ecx
c0028b41:	0d 00 00 00 80       	or     eax,0x80000000
c0028b46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b4b:	29 d1                	sub    ecx,edx
c0028b4d:	d3 e8                	shr    eax,cl
c0028b4f:	eb 2e                	jmp    c0028b7f <__fixdfsi+0x6b>
c0028b51:	31 c0                	xor    eax,eax
c0028b53:	81 c2 01 04 00 00    	add    edx,0x401
c0028b59:	78 24                	js     c0028b7f <__fixdfsi+0x6b>
c0028b5b:	83 fa 1e             	cmp    edx,0x1e
c0028b5e:	7e 09                	jle    c0028b69 <__fixdfsi+0x55>
c0028b60:	83 fa 1f             	cmp    edx,0x1f
c0028b63:	75 18                	jne    c0028b7d <__fixdfsi+0x69>
c0028b65:	85 c9                	test   ecx,ecx
c0028b67:	75 14                	jne    c0028b7d <__fixdfsi+0x69>
c0028b69:	89 c8                	mov    eax,ecx
c0028b6b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b70:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b75:	29 d1                	sub    ecx,edx
c0028b77:	d3 e8                	shr    eax,cl
c0028b79:	f7 d8                	neg    eax
c0028b7b:	eb 02                	jmp    c0028b7f <__fixdfsi+0x6b>
c0028b7d:	31 c0                	xor    eax,eax
c0028b7f:	5d                   	pop    ebp
c0028b80:	c3                   	ret    

c0028b81 <__fixunsdfsi>:
c0028b81:	55                   	push   ebp
c0028b82:	89 e5                	mov    ebp,esp
c0028b84:	53                   	push   ebx
c0028b85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b8b:	89 d3                	mov    ebx,edx
c0028b8d:	c1 fb 14             	sar    ebx,0x14
c0028b90:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b96:	31 c0                	xor    eax,eax
c0028b98:	83 fb 1f             	cmp    ebx,0x1f
c0028b9b:	77 1d                	ja     c0028bba <__fixunsdfsi+0x39>
c0028b9d:	89 d0                	mov    eax,edx
c0028b9f:	c1 e0 0b             	shl    eax,0xb
c0028ba2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028ba7:	c1 e9 15             	shr    ecx,0x15
c0028baa:	09 c8                	or     eax,ecx
c0028bac:	0d 00 00 00 80       	or     eax,0x80000000
c0028bb1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bb6:	29 d9                	sub    ecx,ebx
c0028bb8:	d3 e8                	shr    eax,cl
c0028bba:	5b                   	pop    ebx
c0028bbb:	5d                   	pop    ebp
c0028bbc:	c3                   	ret    

c0028bbd <__cmpdf2>:
c0028bbd:	55                   	push   ebp
c0028bbe:	89 e5                	mov    ebp,esp
c0028bc0:	57                   	push   edi
c0028bc1:	56                   	push   esi
c0028bc2:	53                   	push   ebx
c0028bc3:	83 ec 0c             	sub    esp,0xc
c0028bc6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028bc9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bcc:	89 ca                	mov    edx,ecx
c0028bce:	c1 ea 14             	shr    edx,0x14
c0028bd1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028bd7:	89 cb                	mov    ebx,ecx
c0028bd9:	c1 fb 1f             	sar    ebx,0x1f
c0028bdc:	31 da                	xor    edx,ebx
c0028bde:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028be1:	89 df                	mov    edi,ebx
c0028be3:	c1 e7 0b             	shl    edi,0xb
c0028be6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028be9:	c1 e1 0b             	shl    ecx,0xb
c0028bec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bf2:	c1 eb 15             	shr    ebx,0x15
c0028bf5:	09 d9                	or     ecx,ebx
c0028bf7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bfa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bfd:	89 ce                	mov    esi,ecx
c0028bff:	c1 ee 14             	shr    esi,0x14
c0028c02:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028c08:	89 cb                	mov    ebx,ecx
c0028c0a:	c1 fb 1f             	sar    ebx,0x1f
c0028c0d:	31 de                	xor    esi,ebx
c0028c0f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c12:	89 df                	mov    edi,ebx
c0028c14:	c1 e7 0b             	shl    edi,0xb
c0028c17:	c1 e1 0b             	shl    ecx,0xb
c0028c1a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c20:	c1 eb 15             	shr    ebx,0x15
c0028c23:	09 d9                	or     ecx,ebx
c0028c25:	89 d3                	mov    ebx,edx
c0028c27:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c2d:	43                   	inc    ebx
c0028c2e:	83 fb 01             	cmp    ebx,0x1
c0028c31:	77 08                	ja     c0028c3b <__cmpdf2+0x7e>
c0028c33:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c36:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c39:	75 68                	jne    c0028ca3 <__cmpdf2+0xe6>
c0028c3b:	89 f3                	mov    ebx,esi
c0028c3d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c43:	43                   	inc    ebx
c0028c44:	83 fb 01             	cmp    ebx,0x1
c0028c47:	77 06                	ja     c0028c4f <__cmpdf2+0x92>
c0028c49:	89 fb                	mov    ebx,edi
c0028c4b:	09 cb                	or     ebx,ecx
c0028c4d:	75 54                	jne    c0028ca3 <__cmpdf2+0xe6>
c0028c4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c52:	09 f8                	or     eax,edi
c0028c54:	09 c8                	or     eax,ecx
c0028c56:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c59:	75 12                	jne    c0028c6d <__cmpdf2+0xb0>
c0028c5b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c5e:	83 f8 01             	cmp    eax,0x1
c0028c61:	77 0a                	ja     c0028c6d <__cmpdf2+0xb0>
c0028c63:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c66:	31 c0                	xor    eax,eax
c0028c68:	83 fb 01             	cmp    ebx,0x1
c0028c6b:	76 36                	jbe    c0028ca3 <__cmpdf2+0xe6>
c0028c6d:	b8 01 00 00 00       	mov    eax,0x1
c0028c72:	39 f2                	cmp    edx,esi
c0028c74:	7f 2d                	jg     c0028ca3 <__cmpdf2+0xe6>
c0028c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c7b:	7c 26                	jl     c0028ca3 <__cmpdf2+0xe6>
c0028c7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c80:	77 07                	ja     c0028c89 <__cmpdf2+0xcc>
c0028c82:	72 16                	jb     c0028c9a <__cmpdf2+0xdd>
c0028c84:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c87:	76 0a                	jbe    c0028c93 <__cmpdf2+0xd6>
c0028c89:	89 d0                	mov    eax,edx
c0028c8b:	c1 f8 1f             	sar    eax,0x1f
c0028c8e:	83 c8 01             	or     eax,0x1
c0028c91:	eb 10                	jmp    c0028ca3 <__cmpdf2+0xe6>
c0028c93:	b8 00 00 00 00       	mov    eax,0x0
c0028c98:	73 09                	jae    c0028ca3 <__cmpdf2+0xe6>
c0028c9a:	89 d0                	mov    eax,edx
c0028c9c:	c1 f8 1f             	sar    eax,0x1f
c0028c9f:	83 e0 02             	and    eax,0x2
c0028ca2:	48                   	dec    eax
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	5b                   	pop    ebx
c0028ca7:	5e                   	pop    esi
c0028ca8:	5f                   	pop    edi
c0028ca9:	5d                   	pop    ebp
c0028caa:	c3                   	ret    

c0028cab <__eqdf2>:
c0028cab:	55                   	push   ebp
c0028cac:	89 e5                	mov    ebp,esp
c0028cae:	50                   	push   eax
c0028caf:	6a 01                	push   0x1
c0028cb1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cb4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cb7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cbd:	e8 fb fe ff ff       	call   c0028bbd <__cmpdf2>
c0028cc2:	83 c4 18             	add    esp,0x18
c0028cc5:	c9                   	leave  
c0028cc6:	c3                   	ret    

c0028cc7 <__nedf2>:
c0028cc7:	eb e2                	jmp    c0028cab <__eqdf2>

c0028cc9 <__gtdf2>:
c0028cc9:	55                   	push   ebp
c0028cca:	89 e5                	mov    ebp,esp
c0028ccc:	50                   	push   eax
c0028ccd:	6a ff                	push   0xffffffff
c0028ccf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cd2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cd5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cdb:	e8 dd fe ff ff       	call   c0028bbd <__cmpdf2>
c0028ce0:	83 c4 18             	add    esp,0x18
c0028ce3:	c9                   	leave  
c0028ce4:	c3                   	ret    

c0028ce5 <__gedf2>:
c0028ce5:	eb e2                	jmp    c0028cc9 <__gtdf2>

c0028ce7 <__ltdf2>:
c0028ce7:	eb c2                	jmp    c0028cab <__eqdf2>

c0028ce9 <__ledf2>:
c0028ce9:	eb c0                	jmp    c0028cab <__eqdf2>

c0028ceb <__truncdfsf2>:
c0028ceb:	55                   	push   ebp
c0028cec:	89 e5                	mov    ebp,esp
c0028cee:	57                   	push   edi
c0028cef:	56                   	push   esi
c0028cf0:	53                   	push   ebx
c0028cf1:	83 ec 0c             	sub    esp,0xc
c0028cf4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028cf7:	89 d1                	mov    ecx,edx
c0028cf9:	c1 f9 14             	sar    ecx,0x14
c0028cfc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cff:	89 df                	mov    edi,ebx
c0028d01:	c1 e7 0b             	shl    edi,0xb
c0028d04:	89 d0                	mov    eax,edx
c0028d06:	c1 e0 0b             	shl    eax,0xb
c0028d09:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d0e:	c1 eb 15             	shr    ebx,0x15
c0028d11:	09 d8                	or     eax,ebx
c0028d13:	89 cb                	mov    ebx,ecx
c0028d15:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d1b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d21:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d27:	0f 86 9e 00 00 00    	jbe    c0028dcb <__truncdfsf2+0xe0>
c0028d2d:	85 db                	test   ebx,ebx
c0028d2f:	75 0a                	jne    c0028d3b <__truncdfsf2+0x50>
c0028d31:	c1 fa 17             	sar    edx,0x17
c0028d34:	30 d2                	xor    dl,dl
c0028d36:	e9 84 00 00 00       	jmp    c0028dbf <__truncdfsf2+0xd4>
c0028d3b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d41:	83 fe 83             	cmp    esi,0xffffff83
c0028d44:	7d 4b                	jge    c0028d91 <__truncdfsf2+0xa6>
c0028d46:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d4b:	29 f1                	sub    ecx,esi
c0028d4d:	83 f9 1f             	cmp    ecx,0x1f
c0028d50:	7f 6b                	jg     c0028dbd <__truncdfsf2+0xd2>
c0028d52:	0d 00 00 00 80       	or     eax,0x80000000
c0028d57:	89 c3                	mov    ebx,eax
c0028d59:	d3 eb                	shr    ebx,cl
c0028d5b:	be 01 00 00 00       	mov    esi,0x1
c0028d60:	d3 e6                	shl    esi,cl
c0028d62:	4e                   	dec    esi
c0028d63:	21 f0                	and    eax,esi
c0028d65:	09 f8                	or     eax,edi
c0028d67:	0f 95 c0             	setne  al
c0028d6a:	0f b6 c0             	movzx  eax,al
c0028d6d:	09 c3                	or     ebx,eax
c0028d6f:	89 d9                	mov    ecx,ebx
c0028d71:	c1 e9 08             	shr    ecx,0x8
c0028d74:	f6 c3 7f             	test   bl,0x7f
c0028d77:	0f 95 c0             	setne  al
c0028d7a:	09 c8                	or     eax,ecx
c0028d7c:	83 e0 01             	and    eax,0x1
c0028d7f:	c1 eb 07             	shr    ebx,0x7
c0028d82:	21 c3                	and    ebx,eax
c0028d84:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d8a:	09 d1                	or     ecx,edx
c0028d8c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d8f:	eb 76                	jmp    c0028e07 <__truncdfsf2+0x11c>
c0028d91:	83 c6 80             	add    esi,0xffffff80
c0028d94:	7e 1d                	jle    c0028db3 <__truncdfsf2+0xc8>
c0028d96:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d9c:	75 0b                	jne    c0028da9 <__truncdfsf2+0xbe>
c0028d9e:	09 f8                	or     eax,edi
c0028da0:	74 09                	je     c0028dab <__truncdfsf2+0xc0>
c0028da2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028da7:	eb 02                	jmp    c0028dab <__truncdfsf2+0xc0>
c0028da9:	31 c0                	xor    eax,eax
c0028dab:	c1 fa 17             	sar    edx,0x17
c0028dae:	80 ca ff             	or     dl,0xff
c0028db1:	eb 0e                	jmp    c0028dc1 <__truncdfsf2+0xd6>
c0028db3:	c1 fa 1f             	sar    edx,0x1f
c0028db6:	c1 e2 08             	shl    edx,0x8
c0028db9:	09 ca                	or     edx,ecx
c0028dbb:	eb 04                	jmp    c0028dc1 <__truncdfsf2+0xd6>
c0028dbd:	31 d2                	xor    edx,edx
c0028dbf:	31 c0                	xor    eax,eax
c0028dc1:	c1 e2 17             	shl    edx,0x17
c0028dc4:	c1 e8 08             	shr    eax,0x8
c0028dc7:	09 d0                	or     eax,edx
c0028dc9:	eb 3c                	jmp    c0028e07 <__truncdfsf2+0x11c>
c0028dcb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028dd1:	89 ca                	mov    edx,ecx
c0028dd3:	c1 fa 0b             	sar    edx,0xb
c0028dd6:	c1 e2 08             	shl    edx,0x8
c0028dd9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028ddc:	31 db                	xor    ebx,ebx
c0028dde:	85 ff                	test   edi,edi
c0028de0:	0f 95 c3             	setne  bl
c0028de3:	09 d8                	or     eax,ebx
c0028de5:	89 c3                	mov    ebx,eax
c0028de7:	c1 eb 08             	shr    ebx,0x8
c0028dea:	a8 7f                	test   al,0x7f
c0028dec:	0f 95 c2             	setne  dl
c0028def:	89 d6                	mov    esi,edx
c0028df1:	09 de                	or     esi,ebx
c0028df3:	83 e6 01             	and    esi,0x1
c0028df6:	c1 e8 07             	shr    eax,0x7
c0028df9:	21 f0                	and    eax,esi
c0028dfb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dfe:	09 ca                	or     edx,ecx
c0028e00:	c1 e2 17             	shl    edx,0x17
c0028e03:	09 da                	or     edx,ebx
c0028e05:	01 d0                	add    eax,edx
c0028e07:	83 c4 0c             	add    esp,0xc
c0028e0a:	5b                   	pop    ebx
c0028e0b:	5e                   	pop    esi
c0028e0c:	5f                   	pop    edi
c0028e0d:	5d                   	pop    ebp
c0028e0e:	c3                   	ret    

c0028e0f <__extendsfdf2>:
c0028e0f:	55                   	push   ebp
c0028e10:	89 e5                	mov    ebp,esp
c0028e12:	57                   	push   edi
c0028e13:	56                   	push   esi
c0028e14:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e17:	89 d1                	mov    ecx,edx
c0028e19:	c1 f9 17             	sar    ecx,0x17
c0028e1c:	c1 e2 08             	shl    edx,0x8
c0028e1f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e25:	89 c8                	mov    eax,ecx
c0028e27:	80 e4 f8             	and    ah,0xf8
c0028e2a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e2d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e33:	75 27                	jne    c0028e5c <__extendsfdf2+0x4d>
c0028e35:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e3b:	75 18                	jne    c0028e55 <__extendsfdf2+0x46>
c0028e3d:	85 d2                	test   edx,edx
c0028e3f:	74 20                	je     c0028e61 <__extendsfdf2+0x52>
c0028e41:	41                   	inc    ecx
c0028e42:	01 d2                	add    edx,edx
c0028e44:	79 fb                	jns    c0028e41 <__extendsfdf2+0x32>
c0028e46:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e4c:	29 c8                	sub    eax,ecx
c0028e4e:	05 81 03 00 00       	add    eax,0x381
c0028e53:	eb 0c                	jmp    c0028e61 <__extendsfdf2+0x52>
c0028e55:	05 00 07 00 00       	add    eax,0x700
c0028e5a:	eb 05                	jmp    c0028e61 <__extendsfdf2+0x52>
c0028e5c:	05 80 03 00 00       	add    eax,0x380
c0028e61:	c1 e0 14             	shl    eax,0x14
c0028e64:	89 c1                	mov    ecx,eax
c0028e66:	89 d0                	mov    eax,edx
c0028e68:	c1 e8 0b             	shr    eax,0xb
c0028e6b:	09 c1                	or     ecx,eax
c0028e6d:	c1 e2 15             	shl    edx,0x15
c0028e70:	89 d0                	mov    eax,edx
c0028e72:	89 ca                	mov    edx,ecx
c0028e74:	5e                   	pop    esi
c0028e75:	5f                   	pop    edi
c0028e76:	5d                   	pop    ebp
c0028e77:	c3                   	ret    
c0028e78:	66 90                	xchg   ax,ax
c0028e7a:	66 90                	xchg   ax,ax
c0028e7c:	66 90                	xchg   ax,ax
c0028e7e:	66 90                	xchg   ax,ax

c0028e80 <fabs>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e87:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e97:	dd 04 24             	fld    QWORD PTR [esp]
c0028e9a:	83 c4 0c             	add    esp,0xc
c0028e9d:	c3                   	ret    
c0028e9e:	66 90                	xchg   ax,ax

c0028ea0 <lrint>:
c0028ea0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028ea4:	83 ec 04             	sub    esp,0x4
c0028ea7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028eaa:	58                   	pop    eax
c0028eab:	c3                   	ret    

c0028eac <lrintf>:
c0028eac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028eb0:	83 ec 04             	sub    esp,0x4
c0028eb3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028eb6:	58                   	pop    eax
c0028eb7:	c3                   	ret    

Disassembly of section .init:

c0028eb8 <_init>:
c0028eb8:	55                   	push   ebp
c0028eb9:	89 e5                	mov    ebp,esp
c0028ebb:	e8 58 72 fd ff       	call   c0000118 <frame_dummy>
c0028ec0:	e8 5b e0 ff ff       	call   c0026f20 <__do_global_ctors_aux>
c0028ec5:	5d                   	pop    ebp
c0028ec6:	c3                   	ret    

Disassembly of section .fini:

c0028ec7 <_fini>:
c0028ec7:	55                   	push   ebp
c0028ec8:	89 e5                	mov    ebp,esp
c0028eca:	e8 d9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028ecf:	5d                   	pop    ebp
c0028ed0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ed2 <Computer::~Computer()>:
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	89 10                	mov    DWORD PTR [eax],edx
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	50                   	push   eax
c0028ee8:	e8 05 ad fe ff       	call   c0013bf2 <Device::~Device()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	90                   	nop
c0028ef1:	83 c4 0c             	add    esp,0xc
c0028ef4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ef6 <Computer::~Computer()>:
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	83 ec 0c             	sub    esp,0xc
c0028efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f00:	e8 cd ff ff ff       	call   c0028ed2 <Computer::~Computer()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	83 ec 08             	sub    esp,0x8
c0028f0b:	68 ec 01 00 00       	push   0x1ec
c0028f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f14:	e8 f2 98 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	83 c4 0c             	add    esp,0xc
c0028f1f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f20 <idleCommon()>:
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	fa                   	cli    
c0028f24:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0028f2a:	e8 a5 51 ff ff       	call   c001e0d4 <schedule()>
c0028f2f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0028f34:	48                   	dec    eax
c0028f35:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0028f3a:	75 01                	jne    c0028f3d <idleCommon()+0x1d>
c0028f3c:	fb                   	sti    
c0028f3d:	83 c4 0c             	add    esp,0xc
c0028f40:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f42 <LinkedList<UnixFile>::~LinkedList()>:
c0028f42:	90                   	nop
c0028f43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f44 <LinkedList<UnixFile>::LinkedList()>:
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f87:	83 ec 0c             	sub    esp,0xc
c0028f8a:	68 7a ad 02 c0       	push   0xc002ad7a
c0028f8f:	e8 57 99 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0028f94:	83 c4 10             	add    esp,0x10
c0028f97:	90                   	nop
c0028f98:	83 c4 0c             	add    esp,0xc
c0028f9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f9c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028fa4:	75 10                	jne    c0028fb6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	68 94 ad 02 c0       	push   0xc002ad94
c0028fae:	e8 6e 13 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fba:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fbc:	85 c0                	test   eax,eax
c0028fbe:	74 34                	je     c0028ff4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fc7:	85 c0                	test   eax,eax
c0028fc9:	74 29                	je     c0028ff4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fe1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028feb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ff2:	eb 65                	jmp    c0029059 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ffa:	85 c0                	test   eax,eax
c0028ffc:	75 4b                	jne    c0029049 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029005:	85 c0                	test   eax,eax
c0029007:	75 40                	jne    c0029049 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029011:	89 10                	mov    DWORD PTR [eax],edx
c0029013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029017:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002901b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029025:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002902c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029030:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029033:	85 c0                	test   eax,eax
c0029035:	74 22                	je     c0029059 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029037:	83 ec 0c             	sub    esp,0xc
c002903a:	68 b6 ad 02 c0       	push   0xc002adb6
c002903f:	e8 dd 12 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029044:	83 c4 10             	add    esp,0x10
c0029047:	eb 10                	jmp    c0029059 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029049:	83 ec 0c             	sub    esp,0xc
c002904c:	68 c0 ad 02 c0       	push   0xc002adc0
c0029051:	e8 cb 12 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029056:	83 c4 10             	add    esp,0x10
c0029059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029060:	8d 50 01             	lea    edx,[eax+0x1]
c0029063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029067:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002906a:	90                   	nop
c002906b:	83 c4 0c             	add    esp,0xc
c002906e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029070 <LinkedList<UnixFile>::getFirstElement()>:
c0029070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029074:	8b 00                	mov    eax,DWORD PTR [eax]
c0029076:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029078 <LinkedList<UnixFile>::removeFirst()>:
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029081:	85 c0                	test   eax,eax
c0029083:	75 12                	jne    c0029097 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029085:	83 ec 0c             	sub    esp,0xc
c0029088:	68 cc ad 02 c0       	push   0xc002adcc
c002908d:	e8 8f 12 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029092:	83 c4 10             	add    esp,0x10
c0029095:	eb 7e                	jmp    c0029115 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002909e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290a1:	85 c0                	test   eax,eax
c00290a3:	74 10                	je     c00290b5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00290a5:	83 ec 0c             	sub    esp,0xc
c00290a8:	68 17 ae 02 c0       	push   0xc002ae17
c00290ad:	e8 6f 12 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00290b2:	83 c4 10             	add    esp,0x10
c00290b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290be:	85 c0                	test   eax,eax
c00290c0:	75 33                	jne    c00290f5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290de:	83 f8 01             	cmp    eax,0x1
c00290e1:	74 21                	je     c0029104 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290e3:	83 ec 0c             	sub    esp,0xc
c00290e6:	68 f0 ad 02 c0       	push   0xc002adf0
c00290eb:	e8 31 12 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00290f0:	83 c4 10             	add    esp,0x10
c00290f3:	eb 0f                	jmp    c0029104 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290fb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 10                	mov    DWORD PTR [eax],edx
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002910b:	8d 50 ff             	lea    edx,[eax-0x1]
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029115:	83 c4 0c             	add    esp,0xc
c0029118:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002911a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002911a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002911e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029121:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029122 <DriverlessDevice::~DriverlessDevice()>:
c0029122:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c0029127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002912b:	89 10                	mov    DWORD PTR [eax],edx
c002912d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029131:	50                   	push   eax
c0029132:	e8 bb aa fe ff       	call   c0013bf2 <Device::~Device()>
c0029137:	83 c4 04             	add    esp,0x4
c002913a:	90                   	nop
c002913b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002913c <DriverlessDevice::~DriverlessDevice()>:
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	83 ec 0c             	sub    esp,0xc
c0029142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029146:	e8 d7 ff ff ff       	call   c0029122 <DriverlessDevice::~DriverlessDevice()>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	83 ec 08             	sub    esp,0x8
c0029151:	68 58 01 00 00       	push   0x158
c0029156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915a:	e8 ac 96 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002915f:	83 c4 10             	add    esp,0x10
c0029162:	83 c4 0c             	add    esp,0xc
c0029165:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029166 <LinkedList<Device>::addElement(Device*)>:
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002916e:	75 10                	jne    c0029180 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	68 94 ad 02 c0       	push   0xc002ad94
c0029178:	e8 a4 11 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029184:	8b 00                	mov    eax,DWORD PTR [eax]
c0029186:	85 c0                	test   eax,eax
c0029188:	74 3a                	je     c00291c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002918a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029191:	85 c0                	test   eax,eax
c0029193:	74 2f                	je     c00291c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029199:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002919c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291a0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00291a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291b8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291c2:	eb 68                	jmp    c002922c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291ca:	85 c0                	test   eax,eax
c00291cc:	75 4e                	jne    c002921c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291d5:	85 c0                	test   eax,eax
c00291d7:	75 43                	jne    c002921c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291e1:	89 10                	mov    DWORD PTR [eax],edx
c00291e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291f5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029203:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029206:	85 c0                	test   eax,eax
c0029208:	74 22                	je     c002922c <LinkedList<Device>::addElement(Device*)+0xc6>
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	68 b6 ad 02 c0       	push   0xc002adb6
c0029212:	e8 0a 11 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	eb 10                	jmp    c002922c <LinkedList<Device>::addElement(Device*)+0xc6>
c002921c:	83 ec 0c             	sub    esp,0xc
c002921f:	68 c0 ad 02 c0       	push   0xc002adc0
c0029224:	e8 f8 10 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029229:	83 c4 10             	add    esp,0x10
c002922c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029230:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029233:	8d 50 01             	lea    edx,[eax+0x1]
c0029236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002923d:	90                   	nop
c002923e:	83 c4 0c             	add    esp,0xc
c0029241:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029242 <LinkedList<Device>::LinkedList()>:
c0029242:	83 ec 0c             	sub    esp,0xc
c0029245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029249:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002924f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029253:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002925a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029269:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002926f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002927a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029285:	83 ec 0c             	sub    esp,0xc
c0029288:	68 7a ad 02 c0       	push   0xc002ad7a
c002928d:	e8 59 96 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0029292:	83 c4 10             	add    esp,0x10
c0029295:	90                   	nop
c0029296:	83 c4 0c             	add    esp,0xc
c0029299:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002929a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002929e:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a0:	85 c0                	test   eax,eax
c00292a2:	75 0e                	jne    c00292b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292ab:	85 c0                	test   eax,eax
c00292ad:	75 03                	jne    c00292b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292af:	b0 01                	mov    al,0x1
c00292b1:	c3                   	ret    
c00292b2:	b0 00                	mov    al,0x0
c00292b4:	90                   	nop
c00292b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00292b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00292b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00292bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00292be <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00292be:	83 ec 0c             	sub    esp,0xc
c00292c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292c7:	85 c0                	test   eax,eax
c00292c9:	75 15                	jne    c00292e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292cb:	83 ec 0c             	sub    esp,0xc
c00292ce:	68 cc ad 02 c0       	push   0xc002adcc
c00292d3:	e8 49 10 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00292d8:	83 c4 10             	add    esp,0x10
c00292db:	e9 88 00 00 00       	jmp    c0029368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ea:	85 c0                	test   eax,eax
c00292ec:	0f 95 c0             	setne  al
c00292ef:	84 c0                	test   al,al
c00292f1:	74 10                	je     c0029303 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292f3:	83 ec 0c             	sub    esp,0xc
c00292f6:	68 17 ae 02 c0       	push   0xc002ae17
c00292fb:	e8 21 10 ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029300:	83 c4 10             	add    esp,0x10
c0029303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029307:	8b 00                	mov    eax,DWORD PTR [eax]
c0029309:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002930c:	85 c0                	test   eax,eax
c002930e:	0f 94 c0             	sete   al
c0029311:	84 c0                	test   al,al
c0029313:	74 33                	je     c0029348 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002931f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029323:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002932a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029331:	83 f8 01             	cmp    eax,0x1
c0029334:	74 21                	je     c0029357 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029336:	83 ec 0c             	sub    esp,0xc
c0029339:	68 f0 ad 02 c0       	push   0xc002adf0
c002933e:	e8 de 0f ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029343:	83 c4 10             	add    esp,0x10
c0029346:	eb 0f                	jmp    c0029357 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934c:	8b 00                	mov    eax,DWORD PTR [eax]
c002934e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029355:	89 10                	mov    DWORD PTR [eax],edx
c0029357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002935e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029365:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029368:	83 c4 0c             	add    esp,0xc
c002936b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002936c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002936c:	83 ec 0c             	sub    esp,0xc
c002936f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029374:	75 10                	jne    c0029386 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029376:	83 ec 0c             	sub    esp,0xc
c0029379:	68 94 ad 02 c0       	push   0xc002ad94
c002937e:	e8 9e 0f ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029383:	83 c4 10             	add    esp,0x10
c0029386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938a:	8b 00                	mov    eax,DWORD PTR [eax]
c002938c:	85 c0                	test   eax,eax
c002938e:	74 34                	je     c00293c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029397:	85 c0                	test   eax,eax
c0029399:	74 29                	je     c00293c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002939b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293a6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00293a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293bb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293c2:	eb 65                	jmp    c0029429 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ca:	85 c0                	test   eax,eax
c00293cc:	75 4b                	jne    c0029419 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d5:	85 c0                	test   eax,eax
c00293d7:	75 40                	jne    c0029419 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293e1:	89 10                	mov    DWORD PTR [eax],edx
c00293e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029400:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029403:	85 c0                	test   eax,eax
c0029405:	74 22                	je     c0029429 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029407:	83 ec 0c             	sub    esp,0xc
c002940a:	68 b6 ad 02 c0       	push   0xc002adb6
c002940f:	e8 0d 0f ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029414:	83 c4 10             	add    esp,0x10
c0029417:	eb 10                	jmp    c0029429 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029419:	83 ec 0c             	sub    esp,0xc
c002941c:	68 c0 ad 02 c0       	push   0xc002adc0
c0029421:	e8 fb 0e ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029426:	83 c4 10             	add    esp,0x10
c0029429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029430:	8d 50 01             	lea    edx,[eax+0x1]
c0029433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029437:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002943a:	90                   	nop
c002943b:	83 c4 0c             	add    esp,0xc
c002943e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029440 <ACPI::~ACPI()>:
c0029440:	83 ec 0c             	sub    esp,0xc
c0029443:	ba 8c bf 02 c0       	mov    edx,0xc002bf8c
c0029448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944c:	89 10                	mov    DWORD PTR [eax],edx
c002944e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029452:	83 ec 0c             	sub    esp,0xc
c0029455:	50                   	push   eax
c0029456:	e8 97 a7 fe ff       	call   c0013bf2 <Device::~Device()>
c002945b:	83 c4 10             	add    esp,0x10
c002945e:	90                   	nop
c002945f:	83 c4 0c             	add    esp,0xc
c0029462:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029464 <ACPI::~ACPI()>:
c0029464:	83 ec 0c             	sub    esp,0xc
c0029467:	83 ec 0c             	sub    esp,0xc
c002946a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002946e:	e8 cd ff ff ff       	call   c0029440 <ACPI::~ACPI()>
c0029473:	83 c4 10             	add    esp,0x10
c0029476:	83 ec 08             	sub    esp,0x8
c0029479:	68 64 12 00 00       	push   0x1264
c002947e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029482:	e8 84 93 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029487:	83 c4 10             	add    esp,0x10
c002948a:	83 c4 0c             	add    esp,0xc
c002948d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002948e <LinkedList<Device>::~LinkedList()>:
c002948e:	90                   	nop
c002948f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029490 <LinkedList<Device>::isEmpty()>:
c0029490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029494:	8b 00                	mov    eax,DWORD PTR [eax]
c0029496:	85 c0                	test   eax,eax
c0029498:	75 0e                	jne    c00294a8 <LinkedList<Device>::isEmpty()+0x18>
c002949a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002949e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294a1:	85 c0                	test   eax,eax
c00294a3:	75 03                	jne    c00294a8 <LinkedList<Device>::isEmpty()+0x18>
c00294a5:	b0 01                	mov    al,0x1
c00294a7:	c3                   	ret    
c00294a8:	b0 00                	mov    al,0x0
c00294aa:	90                   	nop
c00294ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00294ac <LinkedList<Device>::getFirstElement()>:
c00294ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00294b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00294b4 <LinkedList<Device>::removeFirst()>:
c00294b4:	83 ec 0c             	sub    esp,0xc
c00294b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294bd:	85 c0                	test   eax,eax
c00294bf:	75 15                	jne    c00294d6 <LinkedList<Device>::removeFirst()+0x22>
c00294c1:	83 ec 0c             	sub    esp,0xc
c00294c4:	68 cc ad 02 c0       	push   0xc002adcc
c00294c9:	e8 53 0e ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00294ce:	83 c4 10             	add    esp,0x10
c00294d1:	e9 87 00 00 00       	jmp    c002955d <LinkedList<Device>::removeFirst()+0xa9>
c00294d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294e3:	85 c0                	test   eax,eax
c00294e5:	74 10                	je     c00294f7 <LinkedList<Device>::removeFirst()+0x43>
c00294e7:	83 ec 0c             	sub    esp,0xc
c00294ea:	68 17 ae 02 c0       	push   0xc002ae17
c00294ef:	e8 2d 0e ff ff       	call   c001a321 <Krnl::panic(char const*)>
c00294f4:	83 c4 10             	add    esp,0x10
c00294f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294fd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029503:	85 c0                	test   eax,eax
c0029505:	75 33                	jne    c002953a <LinkedList<Device>::removeFirst()+0x86>
c0029507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029515:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029520:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029523:	83 f8 01             	cmp    eax,0x1
c0029526:	74 24                	je     c002954c <LinkedList<Device>::removeFirst()+0x98>
c0029528:	83 ec 0c             	sub    esp,0xc
c002952b:	68 f0 ad 02 c0       	push   0xc002adf0
c0029530:	e8 ec 0d ff ff       	call   c001a321 <Krnl::panic(char const*)>
c0029535:	83 c4 10             	add    esp,0x10
c0029538:	eb 12                	jmp    c002954c <LinkedList<Device>::removeFirst()+0x98>
c002953a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029540:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954a:	89 10                	mov    DWORD PTR [eax],edx
c002954c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029550:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029553:	8d 50 ff             	lea    edx,[eax-0x1]
c0029556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002955d:	83 c4 0c             	add    esp,0xc
c0029560:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029562 <CPU::~CPU()>:
c0029562:	83 ec 0c             	sub    esp,0xc
c0029565:	ba 7c c3 02 c0       	mov    edx,0xc002c37c
c002956a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956e:	89 10                	mov    DWORD PTR [eax],edx
c0029570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	50                   	push   eax
c0029578:	e8 75 a6 fe ff       	call   c0013bf2 <Device::~Device()>
c002957d:	83 c4 10             	add    esp,0x10
c0029580:	90                   	nop
c0029581:	83 c4 0c             	add    esp,0xc
c0029584:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029586 <CPU::~CPU()>:
c0029586:	83 ec 0c             	sub    esp,0xc
c0029589:	83 ec 0c             	sub    esp,0xc
c002958c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029590:	e8 cd ff ff ff       	call   c0029562 <CPU::~CPU()>
c0029595:	83 c4 10             	add    esp,0x10
c0029598:	83 ec 08             	sub    esp,0x8
c002959b:	68 98 11 00 00       	push   0x1198
c00295a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295a4:	e8 62 92 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00295a9:	83 c4 10             	add    esp,0x10
c00295ac:	83 c4 0c             	add    esp,0xc
c00295af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00295b0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00295b0:	90                   	nop
c00295b1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00295b2 <ThreadControlBlock::ThreadControlBlock()>:
c00295b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00295bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295cc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295e2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ed:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295f9:	90                   	nop
c00295fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295fc:	83 ec 0c             	sub    esp,0xc
c00295ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029603:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002961f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029623:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029638:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002963f:	83 ec 0c             	sub    esp,0xc
c0029642:	68 7a ad 02 c0       	push   0xc002ad7a
c0029647:	e8 9f 92 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002964c:	83 c4 10             	add    esp,0x10
c002964f:	90                   	nop
c0029650:	83 c4 0c             	add    esp,0xc
c0029653:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029654 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029658:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002965b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002965c <Vm::_FPUState::_FPUState()>:
c002965c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029660:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029667:	90                   	nop
c0029668:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002966a <PCI::~PCI()>:
c002966a:	83 ec 0c             	sub    esp,0xc
c002966d:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c0029672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029676:	89 10                	mov    DWORD PTR [eax],edx
c0029678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967c:	83 ec 0c             	sub    esp,0xc
c002967f:	50                   	push   eax
c0029680:	e8 3d 9f fe ff       	call   c00135c2 <Bus::~Bus()>
c0029685:	83 c4 10             	add    esp,0x10
c0029688:	90                   	nop
c0029689:	83 c4 0c             	add    esp,0xc
c002968c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002968e <PCI::~PCI()>:
c002968e:	83 ec 0c             	sub    esp,0xc
c0029691:	83 ec 0c             	sub    esp,0xc
c0029694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029698:	e8 cd ff ff ff       	call   c002966a <PCI::~PCI()>
c002969d:	83 c4 10             	add    esp,0x10
c00296a0:	83 ec 08             	sub    esp,0x8
c00296a3:	68 5c 01 00 00       	push   0x15c
c00296a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ac:	e8 5a 91 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00296b1:	83 c4 10             	add    esp,0x10
c00296b4:	83 c4 0c             	add    esp,0xc
c00296b7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00296b8 <IDE::~IDE()>:
c00296b8:	83 ec 0c             	sub    esp,0xc
c00296bb:	ba 74 d7 02 c0       	mov    edx,0xc002d774
c00296c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c4:	89 10                	mov    DWORD PTR [eax],edx
c00296c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ca:	83 ec 0c             	sub    esp,0xc
c00296cd:	50                   	push   eax
c00296ce:	e8 35 aa fe ff       	call   c0014108 <HardDiskController::~HardDiskController()>
c00296d3:	83 c4 10             	add    esp,0x10
c00296d6:	90                   	nop
c00296d7:	83 c4 0c             	add    esp,0xc
c00296da:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296dc <IDE::~IDE()>:
c00296dc:	83 ec 0c             	sub    esp,0xc
c00296df:	83 ec 0c             	sub    esp,0xc
c00296e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e6:	e8 cd ff ff ff       	call   c00296b8 <IDE::~IDE()>
c00296eb:	83 c4 10             	add    esp,0x10
c00296ee:	83 ec 08             	sub    esp,0x8
c00296f1:	68 70 02 00 00       	push   0x270
c00296f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296fa:	e8 0c 91 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00296ff:	83 c4 10             	add    esp,0x10
c0029702:	83 c4 0c             	add    esp,0xc
c0029705:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029706 <SATABus::~SATABus()>:
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c002970e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029712:	89 10                	mov    DWORD PTR [eax],edx
c0029714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029718:	83 ec 0c             	sub    esp,0xc
c002971b:	50                   	push   eax
c002971c:	e8 e7 a9 fe ff       	call   c0014108 <HardDiskController::~HardDiskController()>
c0029721:	83 c4 10             	add    esp,0x10
c0029724:	90                   	nop
c0029725:	83 c4 0c             	add    esp,0xc
c0029728:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002972a <SATABus::~SATABus()>:
c002972a:	83 ec 0c             	sub    esp,0xc
c002972d:	83 ec 0c             	sub    esp,0xc
c0029730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029734:	e8 cd ff ff ff       	call   c0029706 <SATABus::~SATABus()>
c0029739:	83 c4 10             	add    esp,0x10
c002973c:	83 ec 08             	sub    esp,0x8
c002973f:	68 64 01 00 00       	push   0x164
c0029744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029748:	e8 be 90 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002974d:	83 c4 10             	add    esp,0x10
c0029750:	83 c4 0c             	add    esp,0xc
c0029753:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029754 <ATA::~ATA()>:
c0029754:	83 ec 0c             	sub    esp,0xc
c0029757:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c002975c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029760:	89 10                	mov    DWORD PTR [eax],edx
c0029762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029766:	83 ec 0c             	sub    esp,0xc
c0029769:	50                   	push   eax
c002976a:	e8 8b aa fe ff       	call   c00141fa <PhysicalDisk::~PhysicalDisk()>
c002976f:	83 c4 10             	add    esp,0x10
c0029772:	90                   	nop
c0029773:	83 c4 0c             	add    esp,0xc
c0029776:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029778 <ATA::~ATA()>:
c0029778:	83 ec 0c             	sub    esp,0xc
c002977b:	83 ec 0c             	sub    esp,0xc
c002977e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029782:	e8 cd ff ff ff       	call   c0029754 <ATA::~ATA()>
c0029787:	83 c4 10             	add    esp,0x10
c002978a:	83 ec 08             	sub    esp,0x8
c002978d:	68 7c 01 00 00       	push   0x17c
c0029792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029796:	e8 70 90 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002979b:	83 c4 10             	add    esp,0x10
c002979e:	83 c4 0c             	add    esp,0xc
c00297a1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00297a2 <ATAPI::~ATAPI()>:
c00297a2:	83 ec 0c             	sub    esp,0xc
c00297a5:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c00297aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ae:	89 10                	mov    DWORD PTR [eax],edx
c00297b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b4:	83 ec 0c             	sub    esp,0xc
c00297b7:	50                   	push   eax
c00297b8:	e8 3d aa fe ff       	call   c00141fa <PhysicalDisk::~PhysicalDisk()>
c00297bd:	83 c4 10             	add    esp,0x10
c00297c0:	90                   	nop
c00297c1:	83 c4 0c             	add    esp,0xc
c00297c4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297c6 <ATAPI::~ATAPI()>:
c00297c6:	83 ec 0c             	sub    esp,0xc
c00297c9:	83 ec 0c             	sub    esp,0xc
c00297cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d0:	e8 cd ff ff ff       	call   c00297a2 <ATAPI::~ATAPI()>
c00297d5:	83 c4 10             	add    esp,0x10
c00297d8:	83 ec 08             	sub    esp,0x8
c00297db:	68 80 01 00 00       	push   0x180
c00297e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e4:	e8 22 90 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00297e9:	83 c4 10             	add    esp,0x10
c00297ec:	83 c4 0c             	add    esp,0xc
c00297ef:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297f0 <SATA::~SATA()>:
c00297f0:	83 ec 0c             	sub    esp,0xc
c00297f3:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c00297f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fc:	89 10                	mov    DWORD PTR [eax],edx
c00297fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029802:	83 ec 0c             	sub    esp,0xc
c0029805:	50                   	push   eax
c0029806:	e8 ef a9 fe ff       	call   c00141fa <PhysicalDisk::~PhysicalDisk()>
c002980b:	83 c4 10             	add    esp,0x10
c002980e:	90                   	nop
c002980f:	83 c4 0c             	add    esp,0xc
c0029812:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029814 <SATA::~SATA()>:
c0029814:	83 ec 0c             	sub    esp,0xc
c0029817:	83 ec 0c             	sub    esp,0xc
c002981a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002981e:	e8 cd ff ff ff       	call   c00297f0 <SATA::~SATA()>
c0029823:	83 c4 10             	add    esp,0x10
c0029826:	83 ec 08             	sub    esp,0x8
c0029829:	68 7c 01 00 00       	push   0x17c
c002982e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029832:	e8 d4 8f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029837:	83 c4 10             	add    esp,0x10
c002983a:	83 c4 0c             	add    esp,0xc
c002983d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002983e <SATAPI::~SATAPI()>:
c002983e:	83 ec 0c             	sub    esp,0xc
c0029841:	ba 68 da 02 c0       	mov    edx,0xc002da68
c0029846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984a:	89 10                	mov    DWORD PTR [eax],edx
c002984c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029850:	83 ec 0c             	sub    esp,0xc
c0029853:	50                   	push   eax
c0029854:	e8 a1 a9 fe ff       	call   c00141fa <PhysicalDisk::~PhysicalDisk()>
c0029859:	83 c4 10             	add    esp,0x10
c002985c:	90                   	nop
c002985d:	83 c4 0c             	add    esp,0xc
c0029860:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029862 <SATAPI::~SATAPI()>:
c0029862:	83 ec 0c             	sub    esp,0xc
c0029865:	83 ec 0c             	sub    esp,0xc
c0029868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986c:	e8 cd ff ff ff       	call   c002983e <SATAPI::~SATAPI()>
c0029871:	83 c4 10             	add    esp,0x10
c0029874:	83 ec 08             	sub    esp,0x8
c0029877:	68 80 01 00 00       	push   0x180
c002987c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029880:	e8 86 8f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029885:	83 c4 10             	add    esp,0x10
c0029888:	83 c4 0c             	add    esp,0xc
c002988b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002988c <AVX::~AVX()>:
c002988c:	83 ec 0c             	sub    esp,0xc
c002988f:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	89 10                	mov    DWORD PTR [eax],edx
c002989a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989e:	83 ec 0c             	sub    esp,0xc
c00298a1:	50                   	push   eax
c00298a2:	e8 d7 a9 fe ff       	call   c001427e <FPU::~FPU()>
c00298a7:	83 c4 10             	add    esp,0x10
c00298aa:	90                   	nop
c00298ab:	83 c4 0c             	add    esp,0xc
c00298ae:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00298b0 <AVX::~AVX()>:
c00298b0:	83 ec 0c             	sub    esp,0xc
c00298b3:	83 ec 0c             	sub    esp,0xc
c00298b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ba:	e8 cd ff ff ff       	call   c002988c <AVX::~AVX()>
c00298bf:	83 c4 10             	add    esp,0x10
c00298c2:	83 ec 08             	sub    esp,0x8
c00298c5:	68 58 01 00 00       	push   0x158
c00298ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ce:	e8 38 8f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00298d3:	83 c4 10             	add    esp,0x10
c00298d6:	83 c4 0c             	add    esp,0xc
c00298d9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298da <MMX::~MMX()>:
c00298da:	83 ec 0c             	sub    esp,0xc
c00298dd:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c00298e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e6:	89 10                	mov    DWORD PTR [eax],edx
c00298e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ec:	83 ec 0c             	sub    esp,0xc
c00298ef:	50                   	push   eax
c00298f0:	e8 89 a9 fe ff       	call   c001427e <FPU::~FPU()>
c00298f5:	83 c4 10             	add    esp,0x10
c00298f8:	90                   	nop
c00298f9:	83 c4 0c             	add    esp,0xc
c00298fc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298fe <MMX::~MMX()>:
c00298fe:	83 ec 0c             	sub    esp,0xc
c0029901:	83 ec 0c             	sub    esp,0xc
c0029904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029908:	e8 cd ff ff ff       	call   c00298da <MMX::~MMX()>
c002990d:	83 c4 10             	add    esp,0x10
c0029910:	83 ec 08             	sub    esp,0x8
c0029913:	68 58 01 00 00       	push   0x158
c0029918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002991c:	e8 ea 8e fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029921:	83 c4 10             	add    esp,0x10
c0029924:	83 c4 0c             	add    esp,0xc
c0029927:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029928 <SSE::~SSE()>:
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	ba 28 db 02 c0       	mov    edx,0xc002db28
c0029930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029934:	89 10                	mov    DWORD PTR [eax],edx
c0029936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993a:	83 ec 0c             	sub    esp,0xc
c002993d:	50                   	push   eax
c002993e:	e8 3b a9 fe ff       	call   c001427e <FPU::~FPU()>
c0029943:	83 c4 10             	add    esp,0x10
c0029946:	90                   	nop
c0029947:	83 c4 0c             	add    esp,0xc
c002994a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002994c <SSE::~SSE()>:
c002994c:	83 ec 0c             	sub    esp,0xc
c002994f:	83 ec 0c             	sub    esp,0xc
c0029952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029956:	e8 cd ff ff ff       	call   c0029928 <SSE::~SSE()>
c002995b:	83 c4 10             	add    esp,0x10
c002995e:	83 ec 08             	sub    esp,0x8
c0029961:	68 58 01 00 00       	push   0x158
c0029966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002996a:	e8 9c 8e fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	83 c4 0c             	add    esp,0xc
c0029975:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029976 <x87::~x87()>:
c0029976:	83 ec 0c             	sub    esp,0xc
c0029979:	ba 68 db 02 c0       	mov    edx,0xc002db68
c002997e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029982:	89 10                	mov    DWORD PTR [eax],edx
c0029984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029988:	83 ec 0c             	sub    esp,0xc
c002998b:	50                   	push   eax
c002998c:	e8 ed a8 fe ff       	call   c001427e <FPU::~FPU()>
c0029991:	83 c4 10             	add    esp,0x10
c0029994:	90                   	nop
c0029995:	83 c4 0c             	add    esp,0xc
c0029998:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002999a <x87::~x87()>:
c002999a:	83 ec 0c             	sub    esp,0xc
c002999d:	83 ec 0c             	sub    esp,0xc
c00299a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a4:	e8 cd ff ff ff       	call   c0029976 <x87::~x87()>
c00299a9:	83 c4 10             	add    esp,0x10
c00299ac:	83 ec 08             	sub    esp,0x8
c00299af:	68 58 01 00 00       	push   0x158
c00299b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b8:	e8 4e 8e fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	83 c4 0c             	add    esp,0xc
c00299c3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299c4 <IOAPIC::~IOAPIC()>:
c00299c4:	83 ec 0c             	sub    esp,0xc
c00299c7:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c00299cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d0:	89 10                	mov    DWORD PTR [eax],edx
c00299d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d6:	83 ec 0c             	sub    esp,0xc
c00299d9:	50                   	push   eax
c00299da:	e8 13 a2 fe ff       	call   c0013bf2 <Device::~Device()>
c00299df:	83 c4 10             	add    esp,0x10
c00299e2:	90                   	nop
c00299e3:	83 c4 0c             	add    esp,0xc
c00299e6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299e8 <IOAPIC::~IOAPIC()>:
c00299e8:	83 ec 0c             	sub    esp,0xc
c00299eb:	83 ec 0c             	sub    esp,0xc
c00299ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f2:	e8 cd ff ff ff       	call   c00299c4 <IOAPIC::~IOAPIC()>
c00299f7:	83 c4 10             	add    esp,0x10
c00299fa:	83 ec 08             	sub    esp,0x8
c00299fd:	68 68 01 00 00       	push   0x168
c0029a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a06:	e8 00 8e fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029a0b:	83 c4 10             	add    esp,0x10
c0029a0e:	83 c4 0c             	add    esp,0xc
c0029a11:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a12 <APIC::~APIC()>:
c0029a12:	83 ec 0c             	sub    esp,0xc
c0029a15:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c0029a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1e:	89 10                	mov    DWORD PTR [eax],edx
c0029a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a24:	83 ec 0c             	sub    esp,0xc
c0029a27:	50                   	push   eax
c0029a28:	e8 1b ad fe ff       	call   c0014748 <InterruptController::~InterruptController()>
c0029a2d:	83 c4 10             	add    esp,0x10
c0029a30:	90                   	nop
c0029a31:	83 c4 0c             	add    esp,0xc
c0029a34:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a36 <APIC::~APIC()>:
c0029a36:	83 ec 0c             	sub    esp,0xc
c0029a39:	83 ec 0c             	sub    esp,0xc
c0029a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a40:	e8 cd ff ff ff       	call   c0029a12 <APIC::~APIC()>
c0029a45:	83 c4 10             	add    esp,0x10
c0029a48:	83 ec 08             	sub    esp,0x8
c0029a4b:	68 58 21 00 00       	push   0x2158
c0029a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a54:	e8 b2 8d fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029a59:	83 c4 10             	add    esp,0x10
c0029a5c:	83 c4 0c             	add    esp,0xc
c0029a5f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a60 <PIC::~PIC()>:
c0029a60:	83 ec 0c             	sub    esp,0xc
c0029a63:	ba 10 dd 02 c0       	mov    edx,0xc002dd10
c0029a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6c:	89 10                	mov    DWORD PTR [eax],edx
c0029a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a72:	83 ec 0c             	sub    esp,0xc
c0029a75:	50                   	push   eax
c0029a76:	e8 cd ac fe ff       	call   c0014748 <InterruptController::~InterruptController()>
c0029a7b:	83 c4 10             	add    esp,0x10
c0029a7e:	90                   	nop
c0029a7f:	83 c4 0c             	add    esp,0xc
c0029a82:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a84 <PIC::~PIC()>:
c0029a84:	83 ec 0c             	sub    esp,0xc
c0029a87:	83 ec 0c             	sub    esp,0xc
c0029a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a8e:	e8 cd ff ff ff       	call   c0029a60 <PIC::~PIC()>
c0029a93:	83 c4 10             	add    esp,0x10
c0029a96:	83 ec 08             	sub    esp,0x8
c0029a99:	68 58 21 00 00       	push   0x2158
c0029a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aa2:	e8 64 8d fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	83 c4 0c             	add    esp,0xc
c0029aad:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029aae <APICTimer::~APICTimer()>:
c0029aae:	83 ec 0c             	sub    esp,0xc
c0029ab1:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c0029ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aba:	89 10                	mov    DWORD PTR [eax],edx
c0029abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac0:	83 ec 0c             	sub    esp,0xc
c0029ac3:	50                   	push   eax
c0029ac4:	e8 0f cd fe ff       	call   c00167d8 <Timer::~Timer()>
c0029ac9:	83 c4 10             	add    esp,0x10
c0029acc:	90                   	nop
c0029acd:	83 c4 0c             	add    esp,0xc
c0029ad0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ad2 <APICTimer::~APICTimer()>:
c0029ad2:	83 ec 0c             	sub    esp,0xc
c0029ad5:	83 ec 0c             	sub    esp,0xc
c0029ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029adc:	e8 cd ff ff ff       	call   c0029aae <APICTimer::~APICTimer()>
c0029ae1:	83 c4 10             	add    esp,0x10
c0029ae4:	83 ec 08             	sub    esp,0x8
c0029ae7:	68 60 01 00 00       	push   0x160
c0029aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029af0:	e8 16 8d fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029af5:	83 c4 10             	add    esp,0x10
c0029af8:	83 c4 0c             	add    esp,0xc
c0029afb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029afc <PIT::~PIT()>:
c0029afc:	83 ec 0c             	sub    esp,0xc
c0029aff:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c0029b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b08:	89 10                	mov    DWORD PTR [eax],edx
c0029b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0e:	83 ec 0c             	sub    esp,0xc
c0029b11:	50                   	push   eax
c0029b12:	e8 c1 cc fe ff       	call   c00167d8 <Timer::~Timer()>
c0029b17:	83 c4 10             	add    esp,0x10
c0029b1a:	90                   	nop
c0029b1b:	83 c4 0c             	add    esp,0xc
c0029b1e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b20 <PIT::~PIT()>:
c0029b20:	83 ec 0c             	sub    esp,0xc
c0029b23:	83 ec 0c             	sub    esp,0xc
c0029b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2a:	e8 cd ff ff ff       	call   c0029afc <PIT::~PIT()>
c0029b2f:	83 c4 10             	add    esp,0x10
c0029b32:	83 ec 08             	sub    esp,0x8
c0029b35:	68 5c 01 00 00       	push   0x15c
c0029b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b3e:	e8 c8 8c fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0029b43:	83 c4 10             	add    esp,0x10
c0029b46:	83 c4 0c             	add    esp,0xc
c0029b49:	c3                   	ret    
